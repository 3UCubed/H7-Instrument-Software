
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801534c  0801534c  0002534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156fc  080156fc  000256fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015704  08015704  00025704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015708  08015708  00025708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0801570c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  0801580c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  0801580c  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000326c3  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548f  00000000  00000000  000627f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030902  00000000  00000000  00074174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001944cd  00000000  00000000  000a4a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00238f43  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad64  00000000  00000000  00238f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015334 	.word	0x08015334

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015334 	.word	0x08015334

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 fbea 	bl	8010e74 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 fbdf 	bl	8010e74 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fbd4 	bl	8010e74 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 ff92 	bl	80145f8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000688 	.word	0x24000688
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	0801538c 	.word	0x0801538c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fecf 	bl	800e4a0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 ff21 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fdb5 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 ff17 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fdab 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 ff0d 	bl	80145f8 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fb64 	bl	8004ed2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f9a5 	bl	8004b5c <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 feef 	bl	80145f8 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fb46 	bl	8004ed2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f987 	bl	8004b5c <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 fed1 	bl	80145f8 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c f8c7 	bl	800c9f8 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f9c9 	bl	8004c0c <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c f928 	bl	800cad8 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 fa7e 	bl	8004d8c <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 feb0 	bl	80145f8 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 fe9b 	bl	80145f8 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 fe86 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fd1a 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 fe7c 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fd10 	bl	800832c <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 fe72 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fd06 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 fe68 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fcfc 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 fe5e 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fcf1 	bl	800832c <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 fe53 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fce6 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 fe48 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fcdb 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 fe3d 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fcd0 	bl	800832c <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 fe32 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fcc6 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 fe28 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fcbc 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 fe1e 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fcb1 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 fe13 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fca6 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 fe08 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fc9b 	bl	800832c <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	2400068c 	.word	0x2400068c
 80009fc:	240005cc 	.word	0x240005cc
 8000a00:	080153a4 	.word	0x080153a4
 8000a04:	58020400 	.word	0x58020400
 8000a08:	080153ac 	.word	0x080153ac
 8000a0c:	080153b8 	.word	0x080153b8
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	080153c0 	.word	0x080153c0
 8000a20:	080153cc 	.word	0x080153cc
 8000a24:	24000684 	.word	0x24000684
 8000a28:	24000534 	.word	0x24000534
 8000a2c:	080153e0 	.word	0x080153e0
 8000a30:	24000000 	.word	0x24000000
 8000a34:	080153ec 	.word	0x080153ec
 8000a38:	080153f8 	.word	0x080153f8
 8000a3c:	08015404 	.word	0x08015404
 8000a40:	08015410 	.word	0x08015410
 8000a44:	0801541c 	.word	0x0801541c
 8000a48:	0801542c 	.word	0x0801542c
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08015438 	.word	0x08015438
 8000a54:	08015444 	.word	0x08015444
 8000a58:	08015454 	.word	0x08015454
 8000a5c:	08015464 	.word	0x08015464
 8000a60:	08015470 	.word	0x08015470
 8000a64:	0801547c 	.word	0x0801547c
 8000a68:	08015488 	.word	0x08015488
 8000a6c:	08015494 	.word	0x08015494
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 fdc1 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fc54 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 fdb6 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fc4a 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 fdac 	bl	80145f8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fc40 	bl	800832c <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 fda2 	bl	80145f8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 fd9e 	bl	80145f8 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 fd97 	bl	80145f8 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 fd90 	bl	80145f8 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 fd89 	bl	80145f8 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 fd82 	bl	80145f8 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 fd7b 	bl	80145f8 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080154a0 	.word	0x080154a0
 8000b24:	58020800 	.word	0x58020800
 8000b28:	080154ac 	.word	0x080154ac
 8000b2c:	080154b8 	.word	0x080154b8
 8000b30:	080154c8 	.word	0x080154c8
 8000b34:	080154d8 	.word	0x080154d8
 8000b38:	2400067e 	.word	0x2400067e
 8000b3c:	080154e0 	.word	0x080154e0
 8000b40:	080154e8 	.word	0x080154e8
 8000b44:	2400067f 	.word	0x2400067f
 8000b48:	080154f0 	.word	0x080154f0
 8000b4c:	080154fc 	.word	0x080154fc
 8000b50:	24000680 	.word	0x24000680
 8000b54:	08015504 	.word	0x08015504

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 fa6a 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f89a 	bl	8000c98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f918 	bl	8000d98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe6a 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fe38 	bl	80017e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd9c 	bl	80016ac <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fde8 	bl	8001748 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb28 	bl	80011cc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fc1a 	bl	80013b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd1e 	bl	80015c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc6e 	bl	8001464 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa5c 	bl	8001044 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f934 	bl	8000df8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 faea 	bl	8001168 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fbb6 	bl	8001304 <MX_SPI1_Init>
  MX_RTC_Init();
 8000b98:	f000 fb58 	bl	800124c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if (!handshake())
 8000b9c:	f000 feca 	bl	8001934 <handshake>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <main+0x52>
  {
	  Error_Handler();
 8000ba6:	f001 fb69 	bl	800227c <Error_Handler>
  }


  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000baa:	2100      	movs	r1, #0
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <main+0xec>)
 8000bae:	f00c f833 	bl	800cc18 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4824      	ldr	r0, [pc, #144]	; (8000c48 <main+0xf0>)
 8000bb6:	f00c f82f 	bl	800cc18 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4823      	ldr	r0, [pc, #140]	; (8000c4c <main+0xf4>)
 8000bbe:	f00c f82b 	bl	800cc18 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc2:	f010 f801 	bl	8010bc8 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f010 f9fc 	bl	8010fc8 <osMessageQueueNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <main+0xf8>)
 8000bd4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <main+0xfc>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <main+0x100>)
 8000bdc:	f010 f83e 	bl	8010c5c <osThreadNew>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <main+0x104>)
 8000be4:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <main+0x108>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <main+0x10c>)
 8000bec:	f010 f836 	bl	8010c5c <osThreadNew>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <main+0x110>)
 8000bf4:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <main+0x114>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x118>)
 8000bfc:	f010 f82e 	bl	8010c5c <osThreadNew>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <main+0x11c>)
 8000c04:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <main+0x120>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0x124>)
 8000c0c:	f010 f826 	bl	8010c5c <osThreadNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <main+0x128>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c16:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <main+0x12c>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <main+0x130>)
 8000c1c:	f010 f81e 	bl	8010c5c <osThreadNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <main+0x134>)
 8000c24:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f010 f8e5 	bl	8010df6 <osEventFlagsNew>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <main+0x138>)
 8000c30:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c32:	f000 fea9 	bl	8001988 <system_setup>
  printf("Starting kernal...\n");
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <main+0x13c>)
 8000c38:	f013 fcde 	bl	80145f8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f00f ffe8 	bl	8010c10 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c40:	e7fe      	b.n	8000c40 <main+0xe8>
 8000c42:	bf00      	nop
 8000c44:	240004e8 	.word	0x240004e8
 8000c48:	24000534 	.word	0x24000534
 8000c4c:	24000580 	.word	0x24000580
 8000c50:	24000674 	.word	0x24000674
 8000c54:	08015570 	.word	0x08015570
 8000c58:	0800210d 	.word	0x0800210d
 8000c5c:	24000660 	.word	0x24000660
 8000c60:	08015594 	.word	0x08015594
 8000c64:	08002151 	.word	0x08002151
 8000c68:	24000664 	.word	0x24000664
 8000c6c:	080155b8 	.word	0x080155b8
 8000c70:	08002195 	.word	0x08002195
 8000c74:	24000668 	.word	0x24000668
 8000c78:	080155dc 	.word	0x080155dc
 8000c7c:	080021d9 	.word	0x080021d9
 8000c80:	2400066c 	.word	0x2400066c
 8000c84:	08015600 	.word	0x08015600
 8000c88:	080021fd 	.word	0x080021fd
 8000c8c:	24000670 	.word	0x24000670
 8000c90:	24000688 	.word	0x24000688
 8000c94:	0801550c 	.word	0x0801550c

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	; 0x70
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	224c      	movs	r2, #76	; 0x4c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f013 fb38 	bl	801431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f013 fb32 	bl	801431c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f007 fc85 	bl	80085c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <SystemClock_Config+0xfc>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf4:	bf00      	nop
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d02:	d1f8      	bne.n	8000cf6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d04:	230a      	movs	r3, #10
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d20:	230c      	movs	r3, #12
 8000d22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fc7b 	bl	800863c <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d4c:	f001 fa96 	bl	800227c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	233f      	movs	r3, #63	; 0x3f
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2303      	movs	r3, #3
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 f8ba 	bl	8008ef0 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d82:	f001 fa7b 	bl	800227c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	; 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58000400 	.word	0x58000400
 8000d94:	58024800 	.word	0x58024800

08000d98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	; 0xc0
 8000d9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	22c0      	movs	r2, #192	; 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f013 fab9 	bl	801431c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000daa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 fc53 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dec:	f001 fa46 	bl	800227c <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	37c0      	adds	r7, #192	; 0xc0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e1e:	4a7d      	ldr	r2, [pc, #500]	; (8001014 <MX_ADC1_Init+0x21c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e22:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b79      	ldr	r3, [pc, #484]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e30:	4b77      	ldr	r3, [pc, #476]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e36:	4b76      	ldr	r3, [pc, #472]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3c:	4b74      	ldr	r3, [pc, #464]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e48:	4b71      	ldr	r3, [pc, #452]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e4a:	220b      	movs	r2, #11
 8000e4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e60:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e74:	4b66      	ldr	r3, [pc, #408]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	4864      	ldr	r0, [pc, #400]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e7e:	f002 fb65 	bl	800354c <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e88:	f001 f9f8 	bl	800227c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	485e      	ldr	r0, [pc, #376]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e98:	f003 fc80 	bl	800479c <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ea2:	f001 f9eb 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <MX_ADC1_Init+0x220>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <MX_ADC1_Init+0x218>)
 8000eca:	f002 fdc3 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ed4:	f001 f9d2 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <MX_ADC1_Init+0x224>)
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000edc:	230c      	movs	r3, #12
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484a      	ldr	r0, [pc, #296]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ee6:	f002 fdb5 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ef0:	f001 f9c4 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <MX_ADC1_Init+0x228>)
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4843      	ldr	r0, [pc, #268]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f02:	f002 fda7 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000f0c:	f001 f9b6 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <MX_ADC1_Init+0x22c>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f14:	2318      	movs	r3, #24
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483c      	ldr	r0, [pc, #240]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f1e:	f002 fd99 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f28:	f001 f9a8 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_ADC1_Init+0x230>)
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f3c:	f002 fd8a 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f46:	f001 f999 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_ADC1_Init+0x234>)
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f4e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f5a:	f002 fd7b 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f64:	f001 f98a 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_ADC1_Init+0x238>)
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f6c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f78:	f002 fd6c 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f82:	f001 f97b 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_ADC1_Init+0x23c>)
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f8a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f96:	f002 fd5d 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000fa0:	f001 f96c 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC1_Init+0x240>)
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000fa8:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fb4:	f002 fd4e 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fbe:	f001 f95d 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC1_Init+0x244>)
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fd6:	f002 fd3d 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fe0:	f001 f94c 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0x248>)
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fe8:	f240 2306 	movw	r3, #518	; 0x206
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ff8:	f002 fd2c 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001002:	f001 f93b 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400011c 	.word	0x2400011c
 8001014:	40022000 	.word	0x40022000
 8001018:	0c900008 	.word	0x0c900008
 800101c:	10c00010 	.word	0x10c00010
 8001020:	14f00020 	.word	0x14f00020
 8001024:	1d500080 	.word	0x1d500080
 8001028:	21800100 	.word	0x21800100
 800102c:	25b00200 	.word	0x25b00200
 8001030:	2a000400 	.word	0x2a000400
 8001034:	2e300800 	.word	0x2e300800
 8001038:	3ac04000 	.word	0x3ac04000
 800103c:	3ef08000 	.word	0x3ef08000
 8001040:	47520000 	.word	0x47520000

08001044 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <MX_ADC3_Init+0x110>)
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <MX_ADC3_Init+0x114>)
 8001060:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <MX_ADC3_Init+0x110>)
 8001064:	2208      	movs	r2, #8
 8001066:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <MX_ADC3_Init+0x110>)
 800106a:	2201      	movs	r2, #1
 800106c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <MX_ADC3_Init+0x110>)
 8001070:	2204      	movs	r2, #4
 8001072:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_ADC3_Init+0x110>)
 800107c:	2201      	movs	r2, #1
 800107e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_ADC3_Init+0x110>)
 8001082:	2204      	movs	r2, #4
 8001084:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC3_Init+0x110>)
 8001088:	2200      	movs	r2, #0
 800108a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC3_Init+0x110>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_ADC3_Init+0x110>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_ADC3_Init+0x110>)
 800109a:	2203      	movs	r2, #3
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC3_Init+0x110>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010b4:	4827      	ldr	r0, [pc, #156]	; (8001154 <MX_ADC3_Init+0x110>)
 80010b6:	f002 fa49 	bl	800354c <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010c0:	f001 f8dc 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC3_Init+0x118>)
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2306      	movs	r3, #6
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010cc:	2307      	movs	r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_ADC3_Init+0x110>)
 80010e8:	f002 fcb4 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010f2:	f001 f8c3 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ADC3_Init+0x11c>)
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010fa:	230c      	movs	r3, #12
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_ADC3_Init+0x110>)
 8001104:	f002 fca6 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800110e:	f001 f8b5 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001116:	2312      	movs	r3, #18
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x110>)
 8001120:	f002 fc98 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800112a:	f001 f8a7 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_ADC3_Init+0x120>)
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001132:	2318      	movs	r3, #24
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC3_Init+0x110>)
 800113c:	f002 fc8a 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001146:	f001 f899 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000180 	.word	0x24000180
 8001158:	58026000 	.word	0x58026000
 800115c:	cb840000 	.word	0xcb840000
 8001160:	cfb80000 	.word	0xcfb80000
 8001164:	04300002 	.word	0x04300002

08001168 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2224      	movs	r2, #36	; 0x24
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f013 f8d1 	bl	801431c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DAC1_Init+0x5c>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_DAC1_Init+0x60>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_DAC1_Init+0x5c>)
 8001182:	f003 fcc9 	bl	8004b18 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800118c:	f001 f876 	bl	800227c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001194:	230a      	movs	r3, #10
 8001196:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_DAC1_Init+0x5c>)
 80011ac:	f003 fee4 	bl	8004f78 <HAL_DAC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011b6:	f001 f861 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	240002d4 	.word	0x240002d4
 80011c8:	40007400 	.word	0x40007400

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f007 f8aa 	bl	8008360 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f001 f833 	bl	800227c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f007 f93d 	bl	8008498 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f001 f82a 	bl	800227c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f007 f97f 	bl	800852e <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f001 f821 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000360 	.word	0x24000360
 8001244:	40005400 	.word	0x40005400
 8001248:	00506682 	.word	0x00506682

0800124c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_RTC_Init+0xb0>)
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <MX_RTC_Init+0xb4>)
 8001268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_RTC_Init+0xb0>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_RTC_Init+0xb0>)
 8001272:	227f      	movs	r2, #127	; 0x7f
 8001274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_RTC_Init+0xb0>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_RTC_Init+0xb0>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_RTC_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_RTC_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_RTC_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <MX_RTC_Init+0xb0>)
 8001296:	f00a fef7 	bl	800c088 <HAL_RTC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012a0:	f000 ffec 	bl	800227c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_RTC_Init+0xb0>)
 80012c0:	f00a ff64 	bl	800c18c <HAL_RTC_SetTime>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012ca:	f000 ffd7 	bl	800227c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012ce:	2305      	movs	r3, #5
 80012d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80012d2:	2305      	movs	r3, #5
 80012d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80012d6:	2331      	movs	r3, #49	; 0x31
 80012d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80012da:	2324      	movs	r3, #36	; 0x24
 80012dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_RTC_Init+0xb0>)
 80012e6:	f00b f84b 	bl	800c380 <HAL_RTC_SetDate>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012f0:	f000 ffc4 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	240003b4 	.word	0x240003b4
 8001300:	58004000 	.word	0x58004000

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_SPI1_Init+0xa8>)
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_SPI1_Init+0xac>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001310:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001318:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800131c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001320:	220f      	movs	r2, #15
 8001322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_SPI1_Init+0xa8>)
 800133a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800133e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI1_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI1_Init+0xa8>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI1_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SPI1_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001398:	f00b f998 	bl	800c6cc <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80013a2:	f000 ff6b 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240003d8 	.word	0x240003d8
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_SPI2_Init+0xac>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d0:	220f      	movs	r2, #15
 80013d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_SPI2_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SPI2_Init+0xa8>)
 80013e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_SPI2_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI2_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI2_Init+0xa8>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SPI2_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI2_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI2_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI2_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SPI2_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI2_Init+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SPI2_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI2_Init+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SPI2_Init+0xa8>)
 8001448:	f00b f940 	bl	800c6cc <HAL_SPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001452:	f000 ff13 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000460 	.word	0x24000460
 8001460:	40003800 	.word	0x40003800

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09a      	sub	sp, #104	; 0x68
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	222c      	movs	r2, #44	; 0x2c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f012 ff3c 	bl	801431c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014a6:	4a45      	ldr	r2, [pc, #276]	; (80015bc <MX_TIM1_Init+0x158>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ac:	225f      	movs	r2, #95	; 0x5f
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d0:	4839      	ldr	r0, [pc, #228]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014d2:	f00b fa3a 	bl	800c94a <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 fece 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ea:	4619      	mov	r1, r3
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ee:	f00c f879 	bl	800d5e4 <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014f8:	f000 fec0 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014fe:	f00b fce5 	bl	800cecc <HAL_TIM_PWM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001508:	f000 feb8 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001518:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151c:	4619      	mov	r1, r3
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001520:	f00c fdb6 	bl	800e090 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800152a:	f000 fea7 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001532:	f240 13df 	movw	r3, #479	; 0x1df
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001556:	f00b ff31 	bl	800d3bc <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fe8c 	bl	800227c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM1_Init+0x154>)
 800159a:	f00c fe07 	bl	800e1ac <HAL_TIMEx_ConfigBreakDeadTime>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015a4:	f000 fe6a 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM1_Init+0x154>)
 80015aa:	f001 f9f5 	bl	8002998 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3768      	adds	r7, #104	; 0x68
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	240004e8 	.word	0x240004e8
 80015bc:	40010000 	.word	0x40010000

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015fc:	222f      	movs	r2, #47	; 0x2f
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001608:	f640 4234 	movw	r2, #3124	; 0xc34
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800161c:	f00b f995 	bl	800c94a <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 fe29 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001638:	f00b ffd4 	bl	800d5e4 <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001642:	f000 fe1b 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001648:	f00b fc40 	bl	800cecc <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001652:	f000 fe13 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001656:	2320      	movs	r3, #32
 8001658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001666:	f00c fd13 	bl	800e090 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001670:	f000 fe04 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	220c      	movs	r2, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800168c:	f00b fe96 	bl	800d3bc <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001696:	f000 fdf1 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800169c:	f001 f97c 	bl	8002998 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000534 	.word	0x24000534

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM3_Init+0x94>)
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <MX_TIM3_Init+0x98>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d2:	222f      	movs	r2, #47	; 0x2f
 80016d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM3_Init+0x94>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM3_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM3_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_TIM3_Init+0x94>)
 80016f2:	f00b f92a 	bl	800c94a <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016fc:	f000 fdbe 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM3_Init+0x94>)
 800170e:	f00b ff69 	bl	800d5e4 <HAL_TIM_ConfigClockSource>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 fdb0 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM3_Init+0x94>)
 800172a:	f00c fcb1 	bl	800e090 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 fda2 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24000580 	.word	0x24000580
 8001744:	40000400 	.word	0x40000400

08001748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART1_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001754:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001792:	f00c fda7 	bl	800e2e4 <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 fd6e 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017a4:	f00f f901 	bl	80109aa <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f000 fd65 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00f f936 	bl	8010a26 <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fd5c 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017c6:	f00f f8b7 	bl	8010938 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f000 fd54 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	240005cc 	.word	0x240005cc
 80017dc:	40011000 	.word	0x40011000

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_DMA_Init+0x5c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_DMA_Init+0x5c>)
 80017f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	200b      	movs	r0, #11
 800180a:	f003 f95d 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800180e:	200b      	movs	r0, #11
 8001810:	f003 f974 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	200c      	movs	r0, #12
 800181a:	f003 f955 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800181e:	200c      	movs	r0, #12
 8001820:	f003 f96c 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2105      	movs	r1, #5
 8001828:	2010      	movs	r0, #16
 800182a:	f003 f94d 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800182e:	2010      	movs	r0, #16
 8001830:	f003 f964 	bl	8004afc <HAL_NVIC_EnableIRQ>

}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <MX_GPIO_Init+0xe8>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <MX_GPIO_Init+0xe8>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_GPIO_Init+0xe8>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018d4:	4815      	ldr	r0, [pc, #84]	; (800192c <MX_GPIO_Init+0xec>)
 80018d6:	f006 fd29 	bl	800832c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2164      	movs	r1, #100	; 0x64
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0xf0>)
 80018e0:	f006 fd24 	bl	800832c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018e4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_GPIO_Init+0xec>)
 80018fe:	f006 fb4d 	bl	8007f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_GPIO_Init+0xf0>)
 800191a:	f006 fb3f 	bl	8007f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	58020800 	.word	0x58020800
 8001930:	58020400 	.word	0x58020400

08001934 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[9];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 800193a:	230a      	movs	r3, #10
 800193c:	61bb      	str	r3, [r7, #24]

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive_IT(&huart1, rx_buffer, 9);
 800193e:	463b      	mov	r3, r7
 8001940:	2209      	movs	r2, #9
 8001942:	4619      	mov	r1, r3
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <handshake+0x50>)
 8001946:	f00c fdab 	bl	800e4a0 <HAL_UART_Receive_IT>
		key = rx_buffer[0];
 800194a:	783b      	ldrb	r3, [r7, #0]
 800194c:	75fb      	strb	r3, [r7, #23]
	}while(key != 0xFF);
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	2bff      	cmp	r3, #255	; 0xff
 8001952:	d1f4      	bne.n	800193e <handshake+0xa>

	// TODO: Set RTC based on received time stamp in rx_buffer and send timestamp of when RTC actually starts

	// TEMPORARY: Send back received time stamp, will be changed once above todo is completed
	rx_buffer[0] = 0xFA;
 8001954:	23fa      	movs	r3, #250	; 0xfa
 8001956:	703b      	strb	r3, [r7, #0]
	for(int i = 0; i < allowed_tries; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	e008      	b.n	8001970 <handshake+0x3c>
	{
		HAL_UART_Transmit(&huart1, rx_buffer, 9 * sizeof(uint8_t), 100);
 800195e:	4639      	mov	r1, r7
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	2209      	movs	r2, #9
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <handshake+0x50>)
 8001966:	f00c fd0d 	bl	800e384 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf2      	blt.n	800195e <handshake+0x2a>
	}

	return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	240005cc 	.word	0x240005cc

08001988 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 800198c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001990:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001996:	210c      	movs	r1, #12
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <system_setup+0x74>)
 800199a:	f00b faf9 	bl	800cf90 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800199e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <system_setup+0x78>)
 80019a8:	f002 fe94 	bl	80046d4 <HAL_ADCEx_Calibration_Start>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80019b2:	f000 fc63 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80019b6:	220b      	movs	r2, #11
 80019b8:	4912      	ldr	r1, [pc, #72]	; (8001a04 <system_setup+0x7c>)
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <system_setup+0x78>)
 80019bc:	f001 ff68 	bl	8003890 <HAL_ADC_Start_DMA>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80019c6:	f000 fc59 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80019ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <system_setup+0x80>)
 80019d4:	f002 fe7e 	bl	80046d4 <HAL_ADCEx_Calibration_Start>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80019de:	f000 fc4d 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80019e2:	2204      	movs	r2, #4
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <system_setup+0x84>)
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <system_setup+0x80>)
 80019e8:	f001 ff52 	bl	8003890 <HAL_ADC_Start_DMA>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80019f2:	f000 fc43 	bl	800227c <Error_Handler>
	  	}
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24000534 	.word	0x24000534
 8001a00:	2400011c 	.word	0x2400011c
 8001a04:	24000700 	.word	0x24000700
 8001a08:	24000180 	.word	0x24000180
 8001a0c:	24000720 	.word	0x24000720

08001a10 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481d      	ldr	r0, [pc, #116]	; (8001a98 <getTimestamp+0x88>)
 8001a22:	f00a fc51 	bl	800c2c8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481a      	ldr	r0, [pc, #104]	; (8001a98 <getTimestamp+0x88>)
 8001a30:	f00a fd2e 	bl	800c490 <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a3a:	fb03 f202 	mul.w	r2, r3, r2
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <getTimestamp+0x88>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24



    buffer[0] = currentDate.Year;		// 0-99
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	701a      	strb	r2, [r3, #0]
    buffer[1] = currentDate.Month;		// 1-12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	7b7a      	ldrb	r2, [r7, #13]
 8001a58:	701a      	strb	r2, [r3, #0]
    buffer[2] = currentDate.Date;		// 1-31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	7bba      	ldrb	r2, [r7, #14]
 8001a60:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3303      	adds	r3, #3
 8001a66:	7c3a      	ldrb	r2, [r7, #16]
 8001a68:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	7c7a      	ldrb	r2, [r7, #17]
 8001a70:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3305      	adds	r3, #5
 8001a76:	7cba      	ldrb	r2, [r7, #18]
 8001a78:	701a      	strb	r2, [r3, #0]
    buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	0a1a      	lsrs	r2, r3, #8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3306      	adds	r3, #6
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
    buffer[7] = milliseconds & 0xFF;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3307      	adds	r3, #7
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	240003b4 	.word	0x240003b4

08001a9c <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f012 fc17 	bl	80142e0 <malloc>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f012 fc1f 	bl	8014300 <memcpy>
    packet.size = size;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ad2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001ae6:	bf00      	nop
 8001ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aec:	483f      	ldr	r0, [pc, #252]	; (8001bec <sample_pmt+0x10c>)
 8001aee:	f006 fc05 	bl	80082fc <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f7      	bne.n	8001ae8 <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001af8:	200e      	movs	r0, #14
 8001afa:	f012 fbf1 	bl	80142e0 <malloc>
 8001afe:	4603      	mov	r3, r0
 8001b00:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001b02:	2002      	movs	r0, #2
 8001b04:	f012 fbec 	bl	80142e0 <malloc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001b0c:	2008      	movs	r0, #8
 8001b0e:	f012 fbe7 	bl	80142e0 <malloc>
 8001b12:	4603      	mov	r3, r0
 8001b14:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff7a 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	220e      	movs	r2, #14
 8001b20:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3301      	adds	r3, #1
 8001b26:	220d      	movs	r2, #13
 8001b28:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	22bb      	movs	r2, #187	; 0xbb
 8001b2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	22bb      	movs	r2, #187	; 0xbb
 8001b36:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <sample_pmt+0x110>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3302      	adds	r3, #2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <sample_pmt+0x110>)
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3303      	adds	r3, #3
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3304      	adds	r3, #4
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3305      	adds	r3, #5
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	7852      	ldrb	r2, [r2, #1]
 8001b66:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3307      	adds	r3, #7
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	7852      	ldrb	r2, [r2, #1]
 8001b7a:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	7892      	ldrb	r2, [r2, #2]
 8001b84:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3309      	adds	r3, #9
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	78d2      	ldrb	r2, [r2, #3]
 8001b8e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	330a      	adds	r3, #10
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	7912      	ldrb	r2, [r2, #4]
 8001b98:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	330b      	adds	r3, #11
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	7952      	ldrb	r2, [r2, #5]
 8001ba2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	7992      	ldrb	r2, [r2, #6]
 8001bac:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	330d      	adds	r3, #13
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	79d2      	ldrb	r2, [r2, #7]
 8001bb6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	220e      	movs	r2, #14
 8001bbc:	6979      	ldr	r1, [r7, #20]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff6c 	bl	8001a9c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <sample_pmt+0x114>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	1d39      	adds	r1, r7, #4
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f00f fa6f 	bl	80110b0 <osMessageQueuePut>
	free(buffer);
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f012 fb8c 	bl	80142f0 <free>
	free(pmt_spi);
 8001bd8:	6938      	ldr	r0, [r7, #16]
 8001bda:	f012 fb89 	bl	80142f0 <free>
	free(timestamp);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f012 fb86 	bl	80142f0 <free>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58020000 	.word	0x58020000
 8001bf0:	24000678 	.word	0x24000678
 8001bf4:	24000674 	.word	0x24000674

08001bf8 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001bfe:	bf00      	nop
 8001c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c04:	4856      	ldr	r0, [pc, #344]	; (8001d60 <sample_erpa+0x168>)
 8001c06:	f006 fb79 	bl	80082fc <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f7      	bne.n	8001c00 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001c10:	2012      	movs	r0, #18
 8001c12:	f012 fb65 	bl	80142e0 <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f012 fb60 	bl	80142e0 <malloc>
 8001c20:	4603      	mov	r3, r0
 8001c22:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001c24:	2004      	movs	r0, #4
 8001c26:	f012 fb5b 	bl	80142e0 <malloc>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001c2e:	2008      	movs	r0, #8
 8001c30:	f012 fb56 	bl	80142e0 <malloc>
 8001c34:	4603      	mov	r3, r0
 8001c36:	60bb      	str	r3, [r7, #8]
    getTimestamp(timestamp);
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7ff fee9 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	220e      	movs	r2, #14
 8001c42:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	220d      	movs	r2, #13
 8001c4a:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	22ee      	movs	r2, #238	; 0xee
 8001c50:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3302      	adds	r3, #2
 8001c56:	22dd      	movs	r2, #221	; 0xdd
 8001c58:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	22aa      	movs	r2, #170	; 0xaa
 8001c5e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	22aa      	movs	r2, #170	; 0xaa
 8001c66:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <sample_erpa+0x16c>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3302      	adds	r3, #2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <sample_erpa+0x16c>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3306      	adds	r3, #6
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3309      	adds	r3, #9
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	7852      	ldrb	r2, [r2, #1]
 8001cd2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	330a      	adds	r3, #10
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	330b      	adds	r3, #11
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	7852      	ldrb	r2, [r2, #1]
 8001ce6:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	330c      	adds	r3, #12
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	7892      	ldrb	r2, [r2, #2]
 8001cf0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	330d      	adds	r3, #13
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	78d2      	ldrb	r2, [r2, #3]
 8001cfa:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	330e      	adds	r3, #14
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	330f      	adds	r3, #15
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	7952      	ldrb	r2, [r2, #5]
 8001d0e:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3310      	adds	r3, #16
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	7992      	ldrb	r2, [r2, #6]
 8001d18:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3311      	adds	r3, #17
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	79d2      	ldrb	r2, [r2, #7]
 8001d22:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001d24:	463b      	mov	r3, r7
 8001d26:	2212      	movs	r2, #18
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff feb6 	bl	8001a9c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <sample_erpa+0x170>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4639      	mov	r1, r7
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f00f f9b9 	bl	80110b0 <osMessageQueuePut>
	free(buffer);
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f012 fad6 	bl	80142f0 <free>
	free(erpa_spi);
 8001d44:	6938      	ldr	r0, [r7, #16]
 8001d46:	f012 fad3 	bl	80142f0 <free>
	free(erpa_adc);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f012 fad0 	bl	80142f0 <free>
	free(timestamp);
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f012 facd 	bl	80142f0 <free>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58020400 	.word	0x58020400
 8001d64:	2400067a 	.word	0x2400067a
 8001d68:	24000674 	.word	0x24000674

08001d6c <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001d72:	202e      	movs	r0, #46	; 0x2e
 8001d74:	f012 fab4 	bl	80142e0 <malloc>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f012 faaf 	bl	80142e0 <malloc>
 8001d82:	4603      	mov	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001d86:	2012      	movs	r0, #18
 8001d88:	f012 faaa 	bl	80142e0 <malloc>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001d90:	2008      	movs	r0, #8
 8001d92:	f012 faa5 	bl	80142e0 <malloc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001d9a:	2008      	movs	r0, #8
 8001d9c:	f012 faa0 	bl	80142e0 <malloc>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff fe33 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2211      	movs	r2, #17
 8001dae:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3302      	adds	r3, #2
 8001db4:	2212      	movs	r2, #18
 8001db6:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	2213      	movs	r2, #19
 8001dbe:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	2214      	movs	r2, #20
 8001dc6:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	22a0      	movs	r2, #160	; 0xa0
 8001dcc:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	22a1      	movs	r2, #161	; 0xa1
 8001dd4:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	22a2      	movs	r2, #162	; 0xa2
 8001ddc:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3306      	adds	r3, #6
 8001de2:	22a3      	movs	r2, #163	; 0xa3
 8001de4:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3308      	adds	r3, #8
 8001dea:	22a4      	movs	r2, #164	; 0xa4
 8001dec:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	330a      	adds	r3, #10
 8001df2:	22a5      	movs	r2, #165	; 0xa5
 8001df4:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	22a6      	movs	r2, #166	; 0xa6
 8001dfc:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	330e      	adds	r3, #14
 8001e02:	22a7      	movs	r2, #167	; 0xa7
 8001e04:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3310      	adds	r3, #16
 8001e0a:	22a8      	movs	r2, #168	; 0xa8
 8001e0c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	22b0      	movs	r2, #176	; 0xb0
 8001e12:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3302      	adds	r3, #2
 8001e18:	22b1      	movs	r2, #177	; 0xb1
 8001e1a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	22b2      	movs	r2, #178	; 0xb2
 8001e22:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3306      	adds	r3, #6
 8001e28:	22b3      	movs	r2, #179	; 0xb3
 8001e2a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	22cc      	movs	r2, #204	; 0xcc
 8001e30:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	22cc      	movs	r2, #204	; 0xcc
 8001e38:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001e3a:	4ba5      	ldr	r3, [pc, #660]	; (80020d0 <sample_hk+0x364>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3302      	adds	r3, #2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001e4a:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <sample_hk+0x364>)
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3303      	adds	r3, #3
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3304      	adds	r3, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3305      	adds	r3, #5
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3306      	adds	r3, #6
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	121a      	asrs	r2, r3, #8
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3309      	adds	r3, #9
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb8:	121a      	asrs	r2, r3, #8
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	330a      	adds	r3, #10
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	330b      	adds	r3, #11
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	121a      	asrs	r2, r3, #8
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	330d      	adds	r3, #13
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	3306      	adds	r3, #6
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	121a      	asrs	r2, r3, #8
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	330e      	adds	r3, #14
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	3306      	adds	r3, #6
 8001f0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	330f      	adds	r3, #15
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3310      	adds	r3, #16
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3311      	adds	r3, #17
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3302      	adds	r3, #2
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3312      	adds	r3, #18
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3302      	adds	r3, #2
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3313      	adds	r3, #19
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3304      	adds	r3, #4
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3314      	adds	r3, #20
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3304      	adds	r3, #4
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3315      	adds	r3, #21
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3306      	adds	r3, #6
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3316      	adds	r3, #22
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3306      	adds	r3, #6
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3317      	adds	r3, #23
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	330c      	adds	r3, #12
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3319      	adds	r3, #25
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	331a      	adds	r3, #26
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	331b      	adds	r3, #27
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	331c      	adds	r3, #28
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	331d      	adds	r3, #29
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	330e      	adds	r3, #14
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	331e      	adds	r3, #30
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	330e      	adds	r3, #14
 8002008:	881a      	ldrh	r2, [r3, #0]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	331f      	adds	r3, #31
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3310      	adds	r3, #16
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29a      	uxth	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3320      	adds	r3, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3310      	adds	r3, #16
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3321      	adds	r3, #33	; 0x21
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3308      	adds	r3, #8
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b29a      	uxth	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3322      	adds	r3, #34	; 0x22
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3308      	adds	r3, #8
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3323      	adds	r3, #35	; 0x23
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	330a      	adds	r3, #10
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29a      	uxth	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3324      	adds	r3, #36	; 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	330a      	adds	r3, #10
 8002068:	881a      	ldrh	r2, [r3, #0]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3325      	adds	r3, #37	; 0x25
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3326      	adds	r3, #38	; 0x26
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3327      	adds	r3, #39	; 0x27
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	7852      	ldrb	r2, [r2, #1]
 8002084:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3328      	adds	r3, #40	; 0x28
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	7892      	ldrb	r2, [r2, #2]
 800208e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3329      	adds	r3, #41	; 0x29
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	78d2      	ldrb	r2, [r2, #3]
 8002098:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	332a      	adds	r3, #42	; 0x2a
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	7912      	ldrb	r2, [r2, #4]
 80020a2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	332b      	adds	r3, #43	; 0x2b
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	7952      	ldrb	r2, [r2, #5]
 80020ac:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	332c      	adds	r3, #44	; 0x2c
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	7992      	ldrb	r2, [r2, #6]
 80020b6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	332d      	adds	r3, #45	; 0x2d
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	79d2      	ldrb	r2, [r2, #7]
 80020c0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	222e      	movs	r2, #46	; 0x2e
 80020c6:	69f9      	ldr	r1, [r7, #28]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fce7 	bl	8001a9c <create_packet>
 80020ce:	e001      	b.n	80020d4 <sample_hk+0x368>
 80020d0:	2400067c 	.word	0x2400067c
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <sample_hk+0x39c>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	1d39      	adds	r1, r7, #4
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	f00e ffe7 	bl	80110b0 <osMessageQueuePut>
	free(buffer);
 80020e2:	69f8      	ldr	r0, [r7, #28]
 80020e4:	f012 f904 	bl	80142f0 <free>
	free(hk_i2c);
 80020e8:	69b8      	ldr	r0, [r7, #24]
 80020ea:	f012 f901 	bl	80142f0 <free>
	free(hk_adc1);
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f012 f8fe 	bl	80142f0 <free>
	free(hk_adc3);
 80020f4:	6938      	ldr	r0, [r7, #16]
 80020f6:	f012 f8fb 	bl	80142f0 <free>
	free(timestamp);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f012 f8f8 	bl	80142f0 <free>
}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	24000674 	.word	0x24000674

0800210c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <PMT_init+0x38>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	f00e feec 	bl	8010efc <osEventFlagsWait>
		if(PMT_ON){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <PMT_init+0x3c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <PMT_init+0x30>
	    sample_pmt();
 800212c:	f7ff fcd8 	bl	8001ae0 <sample_pmt>
		pmt_seq++;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <PMT_init+0x40>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <PMT_init+0x40>)
 800213a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800213c:	f00e fe20 	bl	8010d80 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002140:	e7e8      	b.n	8002114 <PMT_init+0x8>
 8002142:	bf00      	nop
 8002144:	24000688 	.word	0x24000688
 8002148:	2400067e 	.word	0x2400067e
 800214c:	24000678 	.word	0x24000678

08002150 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <ERPA_init+0x38>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	f00e feca 	bl	8010efc <osEventFlagsWait>
	  if (ERPA_ON)
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <ERPA_init+0x3c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002170:	f7ff fd42 	bl	8001bf8 <sample_erpa>
		erpa_seq++;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ERPA_init+0x40>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <ERPA_init+0x40>)
 800217e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002180:	f00e fdfe 	bl	8010d80 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002184:	e7e8      	b.n	8002158 <ERPA_init+0x8>
 8002186:	bf00      	nop
 8002188:	24000688 	.word	0x24000688
 800218c:	2400067f 	.word	0x2400067f
 8002190:	2400067a 	.word	0x2400067a

08002194 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HK_init+0x38>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a4:	2200      	movs	r2, #0
 80021a6:	2104      	movs	r1, #4
 80021a8:	f00e fea8 	bl	8010efc <osEventFlagsWait>
	  if(HK_ON)
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HK_init+0x3c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HK_init+0x30>
	  {
	    sample_hk();
 80021b4:	f7ff fdda 	bl	8001d6c <sample_hk>
		hk_seq++;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HK_init+0x40>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HK_init+0x40>)
 80021c2:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 80021c4:	f00e fddc 	bl	8010d80 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021c8:	e7e8      	b.n	800219c <HK_init+0x8>
 80021ca:	bf00      	nop
 80021cc:	24000688 	.word	0x24000688
 80021d0:	24000680 	.word	0x24000680
 80021d4:	2400067c 	.word	0x2400067c

080021d8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4904      	ldr	r1, [pc, #16]	; (80021f4 <UART_RX_init+0x1c>)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <UART_RX_init+0x20>)
 80021e6:	f00c f95b 	bl	800e4a0 <HAL_UART_Receive_IT>
		osDelay(5);
 80021ea:	2005      	movs	r0, #5
 80021ec:	f00e fde8 	bl	8010dc0 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80021f0:	e7f6      	b.n	80021e0 <UART_RX_init+0x8>
 80021f2:	bf00      	nop
 80021f4:	2400068c 	.word	0x2400068c
 80021f8:	240005cc 	.word	0x240005cc

080021fc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <UART_TX_init+0x50>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f107 010c 	add.w	r1, r7, #12
 800220c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002210:	2200      	movs	r2, #0
 8002212:	f00e ffad 	bl	8011170 <osMessageQueueGet>
 8002216:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d113      	bne.n	8002246 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <UART_TX_init+0x50>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f00f f802 	bl	801122c <osMessageQueueGetCount>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <UART_TX_init+0x54>)
 800222e:	f012 f95d 	bl	80144ec <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	8a3a      	ldrh	r2, [r7, #16]
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <UART_TX_init+0x58>)
 800223a:	f00c f8a3 	bl	800e384 <HAL_UART_Transmit>
	       free(msg.array);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f012 f855 	bl	80142f0 <free>
	   }
	   osThreadYield();
 8002246:	f00e fd9b 	bl	8010d80 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800224a:	e7db      	b.n	8002204 <UART_TX_init+0x8>
 800224c:	24000674 	.word	0x24000674
 8002250:	08015540 	.word	0x08015540
 8002254:	240005cc 	.word	0x240005cc

08002258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800226a:	f000 ff1f 	bl	80030ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40001000 	.word	0x40001000

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002280:	b672      	cpsid	i
}
 8002282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002284:	e7fe      	b.n	8002284 <Error_Handler+0x8>
	...

08002288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_MspInit+0x38>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_MspInit+0x38>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_MspInit+0x38>)
 80022a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	210f      	movs	r1, #15
 80022b0:	f06f 0001 	mvn.w	r0, #1
 80022b4:	f002 fc08 	bl	8004ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	58024400 	.word	0x58024400

080022c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	; 0x38
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_ADC_MspInit+0x20c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8091 	bne.w	800240a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80022e8:	4b7a      	ldr	r3, [pc, #488]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ee:	4a79      	ldr	r2, [pc, #484]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232a:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002334:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002352:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002360:	2333      	movs	r3, #51	; 0x33
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002364:	2303      	movs	r3, #3
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	4859      	ldr	r0, [pc, #356]	; (80024d8 <HAL_ADC_MspInit+0x214>)
 8002374:	f005 fe12 	bl	8007f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002378:	23ce      	movs	r3, #206	; 0xce
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	4854      	ldr	r0, [pc, #336]	; (80024dc <HAL_ADC_MspInit+0x218>)
 800238c:	f005 fe06 	bl	8007f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002390:	2303      	movs	r3, #3
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002394:	2303      	movs	r3, #3
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	484f      	ldr	r0, [pc, #316]	; (80024e0 <HAL_ADC_MspInit+0x21c>)
 80023a4:	f005 fdfa 	bl	8007f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023aa:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <HAL_ADC_MspInit+0x224>)
 80023ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023b0:	2209      	movs	r2, #9
 80023b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d0:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023ec:	483d      	ldr	r0, [pc, #244]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023ee:	f002 ff99 	bl	8005324 <HAL_DMA_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80023f8:	f7ff ff40 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
 8002402:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002408:	e05e      	b.n	80024c8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_ADC_MspInit+0x228>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d159      	bne.n	80024c8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002450:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002458:	f000 fe54 	bl	8003104 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800245c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002460:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002464:	f000 fe4e 	bl	8003104 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_ADC_MspInit+0x230>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002470:	2273      	movs	r2, #115	; 0x73
 8002472:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002486:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800248a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800249a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80024ac:	4810      	ldr	r0, [pc, #64]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024ae:	f002 ff39 	bl	8005324 <HAL_DMA_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80024b8:	f7ff fee0 	bl	800227c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024c8:	bf00      	nop
 80024ca:	3738      	adds	r7, #56	; 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	58024400 	.word	0x58024400
 80024d8:	58020800 	.word	0x58020800
 80024dc:	58020000 	.word	0x58020000
 80024e0:	58020400 	.word	0x58020400
 80024e4:	240001e4 	.word	0x240001e4
 80024e8:	40020010 	.word	0x40020010
 80024ec:	58026000 	.word	0x58026000
 80024f0:	2400025c 	.word	0x2400025c
 80024f4:	40020028 	.word	0x40020028

080024f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_DAC_MspInit+0xf0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d161      	bne.n	80025de <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800251c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 8002522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002526:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800252c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002556:	2310      	movs	r3, #16
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4821      	ldr	r0, [pc, #132]	; (80025f0 <HAL_DAC_MspInit+0xf8>)
 800256a:	f005 fd17 	bl	8007f9c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_DAC_MspInit+0x100>)
 8002572:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002576:	2243      	movs	r2, #67	; 0x43
 8002578:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002594:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800259c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80025b2:	4810      	ldr	r0, [pc, #64]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025b4:	f002 feb6 	bl	8005324 <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80025be:	f7ff fe5d 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2105      	movs	r1, #5
 80025d2:	2036      	movs	r0, #54	; 0x36
 80025d4:	f002 fa78 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025d8:	2036      	movs	r0, #54	; 0x36
 80025da:	f002 fa8f 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40007400 	.word	0x40007400
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020000 	.word	0x58020000
 80025f4:	240002e8 	.word	0x240002e8
 80025f8:	40020088 	.word	0x40020088

080025fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ba      	sub	sp, #232	; 0xe8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	22c0      	movs	r2, #192	; 0xc0
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f011 fe7d 	bl	801431c <memset>
  if(hi2c->Instance==I2C1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_I2C_MspInit+0xc8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d146      	bne.n	80026ba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800262c:	f04f 0208 	mov.w	r2, #8
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4618      	mov	r0, r3
 8002644:	f007 f822 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800264e:	f7ff fe15 	bl	800227c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268a:	2304      	movs	r3, #4
 800268c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <HAL_I2C_MspInit+0xd0>)
 8002698:	f005 fc80 	bl	8007f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 800269e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 80026a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 80026ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	37e8      	adds	r7, #232	; 0xe8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40005400 	.word	0x40005400
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020400 	.word	0x58020400

080026d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0b2      	sub	sp, #200	; 0xc8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	22c0      	movs	r2, #192	; 0xc0
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f011 fe1b 	bl	801431c <memset>
  if(hrtc->Instance==RTC)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_RTC_MspInit+0x5c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d119      	bne.n	8002724 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	4618      	mov	r0, r3
 800270a:	f006 ffbf 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002714:	f7ff fdb2 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RTC_MspInit+0x60>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RTC_MspInit+0x60>)
 800271e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002724:	bf00      	nop
 8002726:	37c8      	adds	r7, #200	; 0xc8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58004000 	.word	0x58004000
 8002730:	58024400 	.word	0x58024400

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0bc      	sub	sp, #240	; 0xf0
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0318 	add.w	r3, r7, #24
 8002750:	22c0      	movs	r2, #192	; 0xc0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f011 fde1 	bl	801431c <memset>
  if(hspi->Instance==SPI1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <HAL_SPI_MspInit+0x15c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d145      	bne.n	80027f0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002770:	2300      	movs	r3, #0
 8002772:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	4618      	mov	r0, r3
 800277a:	f006 ff87 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002784:	f7ff fd7a 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800278a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278e:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002794:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800279a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800279e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80027c4:	2318      	movs	r3, #24
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027dc:	2305      	movs	r3, #5
 80027de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e6:	4619      	mov	r1, r3
 80027e8:	482b      	ldr	r0, [pc, #172]	; (8002898 <HAL_SPI_MspInit+0x164>)
 80027ea:	f005 fbd7 	bl	8007f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027ee:	e04a      	b.n	8002886 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_SPI_MspInit+0x168>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d145      	bne.n	8002886 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002806:	2300      	movs	r3, #0
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0318 	add.w	r3, r7, #24
 800280e:	4618      	mov	r0, r3
 8002810:	f006 ff3c 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800281a:	f7ff fd2f 	bl	800227c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800285a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800285e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002874:	2305      	movs	r3, #5
 8002876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <HAL_SPI_MspInit+0x164>)
 8002882:	f005 fb8b 	bl	8007f9c <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	37f0      	adds	r7, #240	; 0xf0
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40013000 	.word	0x40013000
 8002894:	58024400 	.word	0x58024400
 8002898:	58020400 	.word	0x58020400
 800289c:	40003800 	.word	0x40003800

080028a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a37      	ldr	r2, [pc, #220]	; (800298c <HAL_TIM_Base_MspInit+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12f      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b8:	4a35      	ldr	r2, [pc, #212]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2105      	movs	r1, #5
 80028d4:	2018      	movs	r0, #24
 80028d6:	f002 f8f7 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80028da:	2018      	movs	r0, #24
 80028dc:	f002 f90e 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2105      	movs	r1, #5
 80028e4:	2019      	movs	r0, #25
 80028e6:	f002 f8ef 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028ea:	2019      	movs	r0, #25
 80028ec:	f002 f906 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2105      	movs	r1, #5
 80028f4:	201a      	movs	r0, #26
 80028f6:	f002 f8e7 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80028fa:	201a      	movs	r0, #26
 80028fc:	f002 f8fe 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2105      	movs	r1, #5
 8002904:	201b      	movs	r0, #27
 8002906:	f002 f8df 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800290a:	201b      	movs	r0, #27
 800290c:	f002 f8f6 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002910:	e038      	b.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d117      	bne.n	800294c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800291e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800292e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	201c      	movs	r0, #28
 8002940:	f002 f8c2 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002944:	201c      	movs	r0, #28
 8002946:	f002 f8d9 	bl	8004afc <HAL_NVIC_EnableIRQ>
}
 800294a:	e01b      	b.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_Base_MspInit+0xf4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d116      	bne.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2105      	movs	r1, #5
 8002978:	201d      	movs	r0, #29
 800297a:	f002 f8a5 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800297e:	201d      	movs	r0, #29
 8002980:	f002 f8bc 	bl	8004afc <HAL_NVIC_EnableIRQ>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010000 	.word	0x40010000
 8002990:	58024400 	.word	0x58024400
 8002994:	40000400 	.word	0x40000400

08002998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_TIM_MspPostInit+0xb8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d120      	bne.n	80029fc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4818      	ldr	r0, [pc, #96]	; (8002a58 <HAL_TIM_MspPostInit+0xc0>)
 80029f6:	f005 fad1 	bl	8007f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029fa:	e024      	b.n	8002a46 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d11f      	bne.n	8002a46 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4806      	ldr	r0, [pc, #24]	; (8002a5c <HAL_TIM_MspPostInit+0xc4>)
 8002a42:	f005 faab 	bl	8007f9c <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	58024400 	.word	0x58024400
 8002a58:	58020000 	.word	0x58020000
 8002a5c:	58020400 	.word	0x58020400

08002a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0ba      	sub	sp, #232	; 0xe8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	22c0      	movs	r2, #192	; 0xc0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f011 fc4b 	bl	801431c <memset>
  if(huart->Instance==USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_UART_MspInit+0xd8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d14e      	bne.n	8002b2e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a90:	f04f 0201 	mov.w	r2, #1
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 fdf0 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ab2:	f7ff fbe3 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002af2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4809      	ldr	r0, [pc, #36]	; (8002b40 <HAL_UART_MspInit+0xe0>)
 8002b1a:	f005 fa3f 	bl	8007f9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2105      	movs	r1, #5
 8002b22:	2025      	movs	r0, #37	; 0x25
 8002b24:	f001 ffd0 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b28:	2025      	movs	r0, #37	; 0x25
 8002b2a:	f001 ffe7 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	37e8      	adds	r7, #232	; 0xe8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	58020000 	.word	0x58020000

08002b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	; 0x40
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d827      	bhi.n	8002ba2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002b52:	2200      	movs	r2, #0
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	2036      	movs	r0, #54	; 0x36
 8002b58:	f001 ffb6 	bl	8004ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b5c:	2036      	movs	r0, #54	; 0x36
 8002b5e:	f001 ffcd 	bl	8004afc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002b62:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_InitTick+0xc4>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b86:	f107 0210 	add.w	r2, r7, #16
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 fd39 	bl	8009608 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_InitTick+0x6a>
 8002ba0:	e001      	b.n	8002ba6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e02b      	b.n	8002bfe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ba6:	f006 fd03 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 8002baa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002bac:	e004      	b.n	8002bb8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bae:	f006 fcff 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <HAL_InitTick+0xcc>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_InitTick+0xd4>)
 8002bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_InitTick+0xd0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002be6:	480b      	ldr	r0, [pc, #44]	; (8002c14 <HAL_InitTick+0xd0>)
 8002be8:	f009 feaf 	bl	800c94a <HAL_TIM_Base_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bf4:	f009 ff98 	bl	800cb28 <HAL_TIM_Base_Start_IT>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	e000      	b.n	8002bfe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3740      	adds	r7, #64	; 0x40
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000090 	.word	0x24000090
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	24000728 	.word	0x24000728
 8002c18:	40001000 	.word	0x40001000

08002c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002c20:	e7fe      	b.n	8002c20 <NMI_Handler+0x4>

08002c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <HardFault_Handler+0x4>

08002c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <MemManage_Handler+0x4>

08002c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <DMA1_Stream0_IRQHandler+0x10>)
 8002c4e:	f003 fe93 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	240001e4 	.word	0x240001e4

08002c5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <DMA1_Stream1_IRQHandler+0x10>)
 8002c62:	f003 fe89 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2400025c 	.word	0x2400025c

08002c70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <DMA1_Stream5_IRQHandler+0x10>)
 8002c76:	f003 fe7f 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	240002e8 	.word	0x240002e8

08002c84 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM1_BRK_IRQHandler+0x10>)
 8002c8a:	f00a fa8f 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	240004e8 	.word	0x240004e8

08002c98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <TIM1_UP_IRQHandler+0x10>)
 8002c9e:	f00a fa85 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	240004e8 	.word	0x240004e8

08002cac <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <TIM1_TRG_COM_IRQHandler+0x10>)
 8002cb2:	f00a fa7b 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	240004e8 	.word	0x240004e8

08002cc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM1_CC_IRQHandler+0x10>)
 8002cc6:	f00a fa71 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	240004e8 	.word	0x240004e8

08002cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM2_IRQHandler+0x10>)
 8002cda:	f00a fa67 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	24000534 	.word	0x24000534

08002ce8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM3_IRQHandler+0x10>)
 8002cee:	f00a fa5d 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	24000580 	.word	0x24000580

08002cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <USART1_IRQHandler+0x10>)
 8002d02:	f00b fc19 	bl	800e538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	240005cc 	.word	0x240005cc

08002d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <TIM6_DAC_IRQHandler+0x20>)
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002d1e:	4804      	ldr	r0, [pc, #16]	; (8002d30 <TIM6_DAC_IRQHandler+0x20>)
 8002d20:	f002 f881 	bl	8004e26 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <TIM6_DAC_IRQHandler+0x24>)
 8002d26:	f00a fa41 	bl	800d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	240002d4 	.word	0x240002d4
 8002d34:	24000728 	.word	0x24000728

08002d38 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <ITM_SendChar+0x48>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <ITM_SendChar+0x48>)
 8002d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <ITM_SendChar+0x4c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <ITM_SendChar+0x4c>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002d5a:	bf00      	nop
 8002d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f8      	beq.n	8002d5c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002d6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	6013      	str	r3, [r2, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000edfc 	.word	0xe000edfc
 8002d84:	e0000e00 	.word	0xe0000e00

08002d88 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e00a      	b.n	8002db0 <_read+0x28>
		*ptr++ = __io_getchar();
 8002d9a:	f3af 8000 	nop.w
 8002d9e:	4601      	mov	r1, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	b2ca      	uxtb	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbf0      	blt.n	8002d9a <_read+0x12>
	}

	return len;
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e009      	b.n	8002de8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60ba      	str	r2, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ffab 	bl	8002d38 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf1      	blt.n	8002dd4 <_write+0x12>
	}
	return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_close>:

int _close(int file) {
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e22:	605a      	str	r2, [r3, #4]
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_isatty>:

int _isatty(int file) {
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <_sbrk+0x64>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <_sbrk+0x68>)
 8002e84:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <_sbrk+0x40>
		errno = ENOMEM;
 8002e94:	f011 f9fa 	bl	801428c <__errno>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea2:	e009      	b.n	8002eb8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <_sbrk+0x64>)
 8002eb4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	24080000 	.word	0x24080000
 8002ec4:	00000400 	.word	0x00000400
 8002ec8:	24000774 	.word	0x24000774
 8002ecc:	240050e0 	.word	0x240050e0

08002ed0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <SystemInit+0xe4>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	4a36      	ldr	r2, [pc, #216]	; (8002fb4 <SystemInit+0xe4>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <SystemInit+0xe8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d807      	bhi.n	8002f00 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <SystemInit+0xe8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 030f 	bic.w	r3, r3, #15
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <SystemInit+0xe8>)
 8002efa:	f043 0307 	orr.w	r3, r3, #7
 8002efe:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <SystemInit+0xec>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <SystemInit+0xec>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <SystemInit+0xec>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <SystemInit+0xec>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4929      	ldr	r1, [pc, #164]	; (8002fbc <SystemInit+0xec>)
 8002f18:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <SystemInit+0xf0>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <SystemInit+0xe8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <SystemInit+0xe8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 030f 	bic.w	r3, r3, #15
 8002f32:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <SystemInit+0xe8>)
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <SystemInit+0xec>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <SystemInit+0xec>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <SystemInit+0xec>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <SystemInit+0xec>)
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <SystemInit+0xf4>)
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <SystemInit+0xec>)
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <SystemInit+0xf8>)
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <SystemInit+0xec>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <SystemInit+0xfc>)
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <SystemInit+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <SystemInit+0xec>)
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <SystemInit+0xfc>)
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <SystemInit+0xec>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <SystemInit+0xec>)
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <SystemInit+0xfc>)
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <SystemInit+0xec>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <SystemInit+0xec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <SystemInit+0xec>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f86:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <SystemInit+0xec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <SystemInit+0x100>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <SystemInit+0x104>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d202      	bcs.n	8002fa2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <SystemInit+0x108>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <SystemInit+0x10c>)
 8002fa4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002fa8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	52002000 	.word	0x52002000
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fc4:	02020200 	.word	0x02020200
 8002fc8:	01ff0000 	.word	0x01ff0000
 8002fcc:	01010280 	.word	0x01010280
 8002fd0:	5c001000 	.word	0x5c001000
 8002fd4:	ffff0000 	.word	0xffff0000
 8002fd8:	51008108 	.word	0x51008108
 8002fdc:	52004000 	.word	0x52004000

08002fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe4:	f7ff ff74 	bl	8002ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f011 f943 	bl	8014298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003012:	f7fd fda1 	bl	8000b58 <main>
  bx  lr
 8003016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800301c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003020:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003024:	0801570c 	.word	0x0801570c
  ldr r2, =_sbss
 8003028:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800302c:	240050dc 	.word	0x240050dc

08003030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC3_IRQHandler>
	...

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f001 fd39 	bl	8004ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003040:	f006 f90c 	bl	800925c <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_Init+0x68>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	4913      	ldr	r1, [pc, #76]	; (80030a0 <HAL_Init+0x6c>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_Init+0x68>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_Init+0x6c>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_Init+0x70>)
 8003076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_Init+0x74>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307e:	2005      	movs	r0, #5
 8003080:	f7ff fd60 	bl	8002b44 <HAL_InitTick>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e002      	b.n	8003094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800308e:	f7ff f8fb 	bl	8002288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024400 	.word	0x58024400
 80030a0:	08015624 	.word	0x08015624
 80030a4:	2400008c 	.word	0x2400008c
 80030a8:	24000088 	.word	0x24000088

080030ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x20>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x24>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_IncTick+0x24>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	24000094 	.word	0x24000094
 80030d0:	24000778 	.word	0x24000778

080030d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetTick+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	24000778 	.word	0x24000778

080030ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_GetREVID+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0c1b      	lsrs	r3, r3, #16
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	5c001000 	.word	0x5c001000

08003104 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	58000400 	.word	0x58000400

08003130 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	611a      	str	r2, [r3, #16]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	431a      	orrs	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	601a      	str	r2, [r3, #0]
  }
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3330      	adds	r3, #48	; 0x30
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	4413      	add	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	211f      	movs	r1, #31
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	f003 011f 	and.w	r1, r3, #31
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f023 0203 	bic.w	r2, r3, #3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60da      	str	r2, [r3, #12]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3314      	adds	r3, #20
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0d1b      	lsrs	r3, r3, #20
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2107      	movs	r1, #7
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0318 	and.w	r3, r3, #24
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003360:	40d9      	lsrs	r1, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	400b      	ands	r3, r1
 8003366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	000fffff 	.word	0x000fffff

08003384 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6093      	str	r3, [r2, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	5fffffc0 	.word	0x5fffffc0

080033c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <LL_ADC_EnableInternalRegulator+0x24>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	6fffffc0 	.word	0x6fffffc0

08003414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003428:	d101      	bne.n	800342e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_ADC_Enable+0x24>)
 800344a:	4013      	ands	r3, r2
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	7fffffc0 	.word	0x7fffffc0

08003464 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <LL_ADC_Disable+0x24>)
 8003472:	4013      	ands	r3, r2
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	7fffffc0 	.word	0x7fffffc0

0800348c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <LL_ADC_IsEnabled+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_ADC_IsEnabled+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d101      	bne.n	80034ca <LL_ADC_IsDisableOngoing+0x18>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <LL_ADC_IsDisableOngoing+0x1a>
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <LL_ADC_REG_StartConversion+0x24>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	7fffffc0 	.word	0x7fffffc0

08003500 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d101      	bne.n	8003518 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d101      	bne.n	800353e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e18f      	b.n	8003886 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe fea5 	bl	80022c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff19 	bl	80033c4 <LL_ADC_IsDeepPowerDownEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff feff 	bl	80033a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff34 	bl	8003414 <LL_ADC_IsInternalRegulatorEnabled>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d114      	bne.n	80035dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff18 	bl	80033ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035bc:	4b87      	ldr	r3, [pc, #540]	; (80037dc <HAL_ADC_Init+0x290>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_ADC_Init+0x294>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035ce:	e002      	b.n	80035d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff17 	bl	8003414 <LL_ADC_IsInternalRegulatorEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff77 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003612:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8129 	bne.w	8003874 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 8125 	bne.w	8003874 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff24 	bl	800348c <LL_ADC_IsEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d136      	bne.n	80036b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a65      	ldr	r2, [pc, #404]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_ADC_Init+0x112>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_ADC_Init+0x29c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_ADC_Init+0x130>
 800365e:	4861      	ldr	r0, [pc, #388]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003660:	f7ff ff14 	bl	800348c <LL_ADC_IsEnabled>
 8003664:	4604      	mov	r4, r0
 8003666:	4860      	ldr	r0, [pc, #384]	; (80037e8 <HAL_ADC_Init+0x29c>)
 8003668:	f7ff ff10 	bl	800348c <LL_ADC_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	4323      	orrs	r3, r4
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_ADC_Init+0x142>
 800367c:	485b      	ldr	r0, [pc, #364]	; (80037ec <HAL_ADC_Init+0x2a0>)
 800367e:	f7ff ff05 	bl	800348c <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a53      	ldr	r2, [pc, #332]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_Init+0x15a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_ADC_Init+0x29c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Init+0x15e>
 80036a6:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_ADC_Init+0x2a4>)
 80036a8:	e000      	b.n	80036ac <HAL_ADC_Init+0x160>
 80036aa:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_ADC_Init+0x2a8>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7ff fd3c 	bl	8003130 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80036b8:	f7ff fd18 	bl	80030ec <HAL_GetREVID>
 80036bc:	4603      	mov	r3, r0
 80036be:	f241 0203 	movw	r2, #4099	; 0x1003
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d914      	bls.n	80036f0 <HAL_ADC_Init+0x1a4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d110      	bne.n	80036f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7d5b      	ldrb	r3, [r3, #21]
 80036d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036e8:	f043 030c 	orr.w	r3, r3, #12
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e00d      	b.n	800370c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7d5b      	ldrb	r3, [r3, #21]
 80036f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003700:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7f1b      	ldrb	r3, [r3, #28]
 8003706:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f1b      	ldrb	r3, [r3, #28]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	3b01      	subs	r3, #1
 800371a:	045b      	lsls	r3, r3, #17
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_ADC_Init+0x2ac>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	430b      	orrs	r3, r1
 8003750:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fed2 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 800375c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fedf 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8003768:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d15f      	bne.n	8003830 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d15c      	bne.n	8003830 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7d1b      	ldrb	r3, [r3, #20]
 800377a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_ADC_Init+0x2b0>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	430b      	orrs	r3, r1
 8003796:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d130      	bne.n	8003804 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_ADC_Init+0x2b4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037b6:	3a01      	subs	r2, #1
 80037b8:	0411      	lsls	r1, r2, #16
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037c4:	4311      	orrs	r1, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ca:	430a      	orrs	r2, r1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	611a      	str	r2, [r3, #16]
 80037d8:	e01c      	b.n	8003814 <HAL_ADC_Init+0x2c8>
 80037da:	bf00      	nop
 80037dc:	24000088 	.word	0x24000088
 80037e0:	053e2d63 	.word	0x053e2d63
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40022100 	.word	0x40022100
 80037ec:	58026000 	.word	0x58026000
 80037f0:	40022300 	.word	0x40022300
 80037f4:	58026300 	.word	0x58026300
 80037f8:	fff0c003 	.word	0xfff0c003
 80037fc:	ffffbffc 	.word	0xffffbffc
 8003800:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fdec 	bl	8004408 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 010f 	bic.w	r1, r3, #15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
 8003850:	e007      	b.n	8003862 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020f 	bic.w	r2, r2, #15
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
 8003872:	e007      	b.n	8003884 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0210 	orr.w	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003884:	7ffb      	ldrb	r3, [r7, #31]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop

08003890 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a55      	ldr	r2, [pc, #340]	; (80039f8 <HAL_ADC_Start_DMA+0x168>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_ADC_Start_DMA+0x20>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_ADC_Start_DMA+0x16c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_Start_DMA+0x24>
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_ADC_Start_DMA+0x170>)
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_Start_DMA+0x26>
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_ADC_Start_DMA+0x174>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fd64 	bl	8003384 <LL_ADC_GetMultimode>
 80038bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fe1c 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808c 	bne.w	80039e8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Start_DMA+0x4e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e087      	b.n	80039ee <HAL_ADC_Start_DMA+0x15e>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d002      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b09      	cmp	r3, #9
 80038f6:	d170      	bne.n	80039da <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fc07 	bl	800410c <ADC_Enable>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d163      	bne.n	80039d0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_ADC_Start_DMA+0x178>)
 800390e:	4013      	ands	r3, r2
 8003910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a37      	ldr	r2, [pc, #220]	; (80039fc <HAL_ADC_Start_DMA+0x16c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d002      	beq.n	8003928 <HAL_ADC_Start_DMA+0x98>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e000      	b.n	800392a <HAL_ADC_Start_DMA+0x9a>
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_ADC_Start_DMA+0x168>)
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	4293      	cmp	r3, r2
 8003930:	d002      	beq.n	8003938 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	f023 0206 	bic.w	r2, r3, #6
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
 800395c:	e002      	b.n	8003964 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_Start_DMA+0x17c>)
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_Start_DMA+0x180>)
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_ADC_Start_DMA+0x184>)
 800397a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	221c      	movs	r2, #28
 8003982:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0210 	orr.w	r2, r2, #16
 800399a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7ff fc89 	bl	80032be <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3340      	adds	r3, #64	; 0x40
 80039b6:	4619      	mov	r1, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f002 f80e 	bl	80059dc <HAL_DMA_Start_IT>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fd85 	bl	80034d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ce:	e00d      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80039d8:	e008      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039e6:	e001      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40022100 	.word	0x40022100
 8003a00:	40022300 	.word	0x40022300
 8003a04:	58026300 	.word	0x58026300
 8003a08:	fffff0fe 	.word	0xfffff0fe
 8003a0c:	080042df 	.word	0x080042df
 8003a10:	080043b7 	.word	0x080043b7
 8003a14:	080043d3 	.word	0x080043d3

08003a18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b0a1      	sub	sp, #132	; 0x84
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_ADC_ConfigChannel+0x1b0>)
 8003a6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x2a>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e32e      	b.n	80040dc <HAL_ADC_ConfigChannel+0x688>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fd38 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8313 	bne.w	80040be <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	db2c      	blt.n	8003afa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x6a>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	e016      	b.n	8003aec <HAL_ADC_ConfigChannel+0x98>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ace:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	e003      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	69d1      	ldr	r1, [r2, #28]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7ff fbad 	bl	8003266 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fcf5 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003b16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd02 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8003b22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80b8 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 80b4 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f7ff fbcf 	bl	80032e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_ADC_ConfigChannel+0x1b4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10b      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x118>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	e01d      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x154>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x13e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	e00a      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x154>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d02c      	beq.n	8003c0c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc0:	f7ff faea 	bl	8003198 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6919      	ldr	r1, [r3, #16]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	7e5b      	ldrb	r3, [r3, #25]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x186>
 8003bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bd8:	e000      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x188>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f7ff fb14 	bl	800320a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	7e1b      	ldrb	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x1a4>
 8003bf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1a6>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7ff faec 	bl	80031d8 <LL_ADC_SetDataRightShift>
 8003c00:	e04c      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x248>
 8003c02:	bf00      	nop
 8003c04:	47ff0000 	.word	0x47ff0000
 8003c08:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d107      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	069b      	lsls	r3, r3, #26
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d107      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c76:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fbf3 	bl	800348c <LL_ADC_IsEnabled>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 8211 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fb3e 	bl	800333c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4aa1      	ldr	r2, [pc, #644]	; (8003f4c <HAL_ADC_ConfigChannel+0x4f8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 812e 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x2a0>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e019      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x2d4>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	bf94      	ite	ls
 8003d22:	2301      	movls	r3, #1
 8003d24:	2300      	movhi	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d079      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x2f4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	069b      	lsls	r3, r3, #26
 8003d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d46:	e015      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x320>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x340>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	3301      	adds	r3, #1
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	e017      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x370>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x396>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	051b      	lsls	r3, r3, #20
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3c8>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e003      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	e07e      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x3e8>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	3301      	adds	r3, #1
 8003e34:	069b      	lsls	r3, r3, #26
 8003e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3a:	e015      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x414>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	069b      	lsls	r3, r3, #26
 8003e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x434>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	e017      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x464>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
  return result;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	ea42 0103 	orr.w	r1, r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x490>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b1e      	subs	r3, #30
 8003edc:	051b      	lsls	r3, r3, #20
 8003ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	e01b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x4c8>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f003 021f 	and.w	r2, r3, #31
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	3b1e      	subs	r3, #30
 8003f16:	051b      	lsls	r3, r3, #20
 8003f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7ff f9de 	bl	80032e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f280 80cf 	bge.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <HAL_ADC_ConfigChannel+0x4fc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_ADC_ConfigChannel+0x4f2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_ADC_ConfigChannel+0x500>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10a      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x508>
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <HAL_ADC_ConfigChannel+0x504>)
 8003f48:	e009      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x50a>
 8003f4a:	bf00      	nop
 8003f4c:	47ff0000 	.word	0x47ff0000
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40022100 	.word	0x40022100
 8003f58:	40022300 	.word	0x40022300
 8003f5c:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f90c 	bl	800317c <LL_ADC_GetCommonPathInternalCh>
 8003f64:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5f      	ldr	r2, [pc, #380]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_ADC_ConfigChannel+0x526>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10e      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x544>
 8003f7a:	485b      	ldr	r0, [pc, #364]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003f7c:	f7ff fa86 	bl	800348c <LL_ADC_IsEnabled>
 8003f80:	4604      	mov	r4, r0
 8003f82:	485a      	ldr	r0, [pc, #360]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003f84:	f7ff fa82 	bl	800348c <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4323      	orrs	r3, r4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e008      	b.n	8003faa <HAL_ADC_ConfigChannel+0x556>
 8003f98:	4855      	ldr	r0, [pc, #340]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f9a:	f7ff fa77 	bl	800348c <LL_ADC_IsEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07d      	beq.n	80040aa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d130      	bne.n	800401a <HAL_ADC_ConfigChannel+0x5c6>
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12b      	bne.n	800401a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f040 8081 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a45      	ldr	r2, [pc, #276]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x58e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a43      	ldr	r2, [pc, #268]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x592>
 8003fe2:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003fe4:	e000      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x594>
 8003fe6:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7ff f8b0 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_ADC_ConfigChannel+0x6a8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	4a40      	ldr	r2, [pc, #256]	; (8004100 <HAL_ADC_ConfigChannel+0x6ac>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800400a:	e002      	b.n	8004012 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f9      	bne.n	800400c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004018:	e05a      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a39      	ldr	r2, [pc, #228]	; (8004104 <HAL_ADC_ConfigChannel+0x6b0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d11e      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x60e>
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d14b      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_ADC_ConfigChannel+0x5f8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x5fc>
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 800404e:	e000      	b.n	8004052 <HAL_ADC_ConfigChannel+0x5fe>
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7ff f87b 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004060:	e036      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_ADC_ConfigChannel+0x6b4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d131      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d12c      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d127      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x640>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x644>
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004096:	e000      	b.n	800409a <HAL_ADC_ConfigChannel+0x646>
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff f857 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
 80040a8:	e012      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040bc:	e008      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3784      	adds	r7, #132	; 0x84
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd90      	pop	{r4, r7, pc}
 80040e4:	58026300 	.word	0x58026300
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40022100 	.word	0x40022100
 80040f0:	58026000 	.word	0x58026000
 80040f4:	cb840000 	.word	0xcb840000
 80040f8:	40022300 	.word	0x40022300
 80040fc:	24000088 	.word	0x24000088
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	c7520000 	.word	0xc7520000
 8004108:	cfb80000 	.word	0xcfb80000

0800410c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff f9b7 	bl	800348c <LL_ADC_IsEnabled>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d16e      	bne.n	8004202 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <ADC_Enable+0x100>)
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f043 0210 	orr.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f043 0201 	orr.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e05a      	b.n	8004204 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f972 	bl	800343c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004158:	f7fe ffbc 	bl	80030d4 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <ADC_Enable+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <ADC_Enable+0x66>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <ADC_Enable+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <ADC_Enable+0x6a>
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <ADC_Enable+0x10c>)
 8004174:	e000      	b.n	8004178 <ADC_Enable+0x6c>
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <ADC_Enable+0x110>)
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f903 	bl	8003384 <LL_ADC_GetMultimode>
 800417e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <ADC_Enable+0x108>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d002      	beq.n	8004190 <ADC_Enable+0x84>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e000      	b.n	8004192 <ADC_Enable+0x86>
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <ADC_Enable+0x104>)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	4293      	cmp	r3, r2
 8004198:	d02c      	beq.n	80041f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d130      	bne.n	8004202 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041a0:	e028      	b.n	80041f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f970 	bl	800348c <LL_ADC_IsEnabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f940 	bl	800343c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041bc:	f7fe ff8a 	bl	80030d4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d914      	bls.n	80041f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d00d      	beq.n	80041f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f043 0210 	orr.w	r2, r3, #16
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e007      	b.n	8004204 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d1cf      	bne.n	80041a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	8000003f 	.word	0x8000003f
 8004210:	40022000 	.word	0x40022000
 8004214:	40022100 	.word	0x40022100
 8004218:	40022300 	.word	0x40022300
 800421c:	58026300 	.word	0x58026300

08004220 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f940 	bl	80034b2 <LL_ADC_IsDisableOngoing>
 8004232:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f927 	bl	800348c <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d047      	beq.n	80042d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d144      	bne.n	80042d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030d 	and.w	r3, r3, #13
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff f901 	bl	8003464 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800426a:	f7fe ff33 	bl	80030d4 <HAL_GetTick>
 800426e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004270:	e029      	b.n	80042c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e023      	b.n	80042d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428e:	f7fe ff21 	bl	80030d4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d914      	bls.n	80042c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f043 0210 	orr.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e007      	b.n	80042d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1dc      	bne.n	800428e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d14b      	bne.n	8004390 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe ff92 	bl	8003240 <LL_ADC_REG_IsTriggerSourceSWStart>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d032      	beq.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12b      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11f      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
 8004354:	e018      	b.n	8004388 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d111      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fb45 	bl	8003a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800438e:	e00e      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fb4f 	bl	8003a40 <HAL_ADC_ErrorCallback>
}
 80043a2:	e004      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff fb31 	bl	8003a2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fb21 	bl	8003a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7a      	ldr	r2, [pc, #488]	; (8004600 <ADC_ConfigureBoostMode+0x1f8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <ADC_ConfigureBoostMode+0x1c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a79      	ldr	r2, [pc, #484]	; (8004604 <ADC_ConfigureBoostMode+0x1fc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <ADC_ConfigureBoostMode+0x30>
 8004424:	4b78      	ldr	r3, [pc, #480]	; (8004608 <ADC_ConfigureBoostMode+0x200>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <ADC_ConfigureBoostMode+0x42>
 8004438:	4b74      	ldr	r3, [pc, #464]	; (800460c <ADC_ConfigureBoostMode+0x204>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01c      	beq.n	8004488 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800444e:	f005 f87f 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 8004452:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800445c:	d010      	beq.n	8004480 <ADC_ConfigureBoostMode+0x78>
 800445e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004462:	d873      	bhi.n	800454c <ADC_ConfigureBoostMode+0x144>
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d002      	beq.n	8004470 <ADC_ConfigureBoostMode+0x68>
 800446a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446e:	d16d      	bne.n	800454c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
        break;
 800447e:	e068      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	60fb      	str	r3, [r7, #12]
        break;
 8004486:	e064      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004488:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	f006 fb06 	bl	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800449e:	d051      	beq.n	8004544 <ADC_ConfigureBoostMode+0x13c>
 80044a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044a4:	d854      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044aa:	d047      	beq.n	800453c <ADC_ConfigureBoostMode+0x134>
 80044ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044b0:	d84e      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044b6:	d03d      	beq.n	8004534 <ADC_ConfigureBoostMode+0x12c>
 80044b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044bc:	d848      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c2:	d033      	beq.n	800452c <ADC_ConfigureBoostMode+0x124>
 80044c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c8:	d842      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ce:	d029      	beq.n	8004524 <ADC_ConfigureBoostMode+0x11c>
 80044d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044d4:	d83c      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044da:	d01a      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044e0:	d836      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044e6:	d014      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044ec:	d830      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f2:	d00e      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d82a      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044fe:	d008      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 8004500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004504:	d824      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 8004506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450a:	d002      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 800450c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004510:	d11e      	bne.n	8004550 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	0c9b      	lsrs	r3, r3, #18
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	60fb      	str	r3, [r7, #12]
        break;
 8004522:	e016      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
        break;
 800452a:	e012      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	60fb      	str	r3, [r7, #12]
        break;
 8004532:	e00e      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	60fb      	str	r3, [r7, #12]
        break;
 800453a:	e00a      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	09db      	lsrs	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
        break;
 8004542:	e006      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	60fb      	str	r3, [r7, #12]
        break;
 800454a:	e002      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
        break;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004550:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004552:	f7fe fdcb 	bl	80030ec <HAL_GetREVID>
 8004556:	4603      	mov	r3, r0
 8004558:	f241 0203 	movw	r2, #4099	; 0x1003
 800455c:	4293      	cmp	r3, r2
 800455e:	d815      	bhi.n	800458c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <ADC_ConfigureBoostMode+0x208>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d908      	bls.n	800457a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004578:	e03e      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004588:	609a      	str	r2, [r3, #8]
}
 800458a:	e035      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <ADC_ConfigureBoostMode+0x20c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d808      	bhi.n	80045ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	e025      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <ADC_ConfigureBoostMode+0x210>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d80a      	bhi.n	80045ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	e016      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <ADC_ConfigureBoostMode+0x214>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d80a      	bhi.n	80045e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	609a      	str	r2, [r3, #8]
}
 80045e6:	e007      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40022000 	.word	0x40022000
 8004604:	40022100 	.word	0x40022100
 8004608:	40022300 	.word	0x40022300
 800460c:	58026300 	.word	0x58026300
 8004610:	01312d00 	.word	0x01312d00
 8004614:	005f5e10 	.word	0x005f5e10
 8004618:	00bebc20 	.word	0x00bebc20
 800461c:	017d7840 	.word	0x017d7840

08004620 <LL_ADC_IsEnabled>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <LL_ADC_IsEnabled+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_ADC_IsEnabled+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <LL_ADC_StartCalibration>:
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <LL_ADC_StartCalibration+0x38>)
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004668:	430a      	orrs	r2, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	3ffeffc0 	.word	0x3ffeffc0

08004684 <LL_ADC_IsCalibrationOnGoing>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004698:	d101      	bne.n	800469e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_REG_IsConversionOngoing>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d101      	bne.n	80046c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e04c      	b.n	800478c <HAL_ADCEx_Calibration_Start+0xb8>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fd90 	bl	8004220 <ADC_Disable>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d135      	bne.n	8004776 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004710:	4013      	ands	r3, r2
 8004712:	f043 0202 	orr.w	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff90 	bl	8004648 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004728:	e014      	b.n	8004754 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d30d      	bcc.n	8004754 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f023 0312 	bic.w	r3, r3, #18
 8004740:	f043 0210 	orr.w	r2, r3, #16
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e01b      	b.n	800478c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff93 	bl	8004684 <LL_ADC_IsCalibrationOnGoing>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e2      	bne.n	800472a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f023 0303 	bic.w	r3, r3, #3
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
 8004774:	e005      	b.n	8004782 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f043 0210 	orr.w	r2, r3, #16
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffffeefd 	.word	0xffffeefd
 8004798:	25c3f800 	.word	0x25c3f800

0800479c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b09f      	sub	sp, #124	; 0x7c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0be      	b.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5c      	ldr	r2, [pc, #368]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d102      	bne.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047d4:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	e001      	b.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09d      	b.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff54 	bl	80046ac <LL_ADC_REG_IsConversionOngoing>
 8004804:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff4e 	bl	80046ac <LL_ADC_REG_IsConversionOngoing>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d17f      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004818:	2b00      	cmp	r3, #0
 800481a:	d17c      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a46      	ldr	r2, [pc, #280]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004830:	4b45      	ldr	r3, [pc, #276]	; (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004832:	e000      	b.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004834:	4b45      	ldr	r3, [pc, #276]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004836:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d039      	beq.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10e      	bne.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004866:	4836      	ldr	r0, [pc, #216]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004868:	f7ff feda 	bl	8004620 <LL_ADC_IsEnabled>
 800486c:	4604      	mov	r4, r0
 800486e:	4835      	ldr	r0, [pc, #212]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004870:	f7ff fed6 	bl	8004620 <LL_ADC_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	4323      	orrs	r3, r4
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004884:	4832      	ldr	r0, [pc, #200]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004886:	f7ff fecb 	bl	8004620 <LL_ADC_IsEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d047      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6811      	ldr	r1, [r2, #0]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	6892      	ldr	r2, [r2, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	431a      	orrs	r2, r3
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048b2:	e03a      	b.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80048d4:	481a      	ldr	r0, [pc, #104]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048d6:	f7ff fea3 	bl	8004620 <LL_ADC_IsEnabled>
 80048da:	4604      	mov	r4, r0
 80048dc:	4819      	ldr	r0, [pc, #100]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048de:	f7ff fe9f 	bl	8004620 <LL_ADC_IsEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4323      	orrs	r3, r4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e008      	b.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80048f2:	4817      	ldr	r0, [pc, #92]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048f4:	f7ff fe94 	bl	8004620 <LL_ADC_IsEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800490e:	4013      	ands	r3, r2
 8004910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004912:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	e009      	b.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004928:	e000      	b.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800492a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004934:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004938:	4618      	mov	r0, r3
 800493a:	377c      	adds	r7, #124	; 0x7c
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	40022000 	.word	0x40022000
 8004944:	40022100 	.word	0x40022100
 8004948:	40022300 	.word	0x40022300
 800494c:	58026300 	.word	0x58026300
 8004950:	58026000 	.word	0x58026000
 8004954:	fffff0e0 	.word	0xfffff0e0

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	05fa0000 	.word	0x05fa0000

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
         );
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff4c 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad6:	f7ff ff63 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004ada:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	6978      	ldr	r0, [r7, #20]
 8004ae2:	f7ff ffb3 	bl	8004a4c <NVIC_EncodePriority>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff82 	bl	80049f8 <__NVIC_SetPriority>
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ff56 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e014      	b.n	8004b54 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd fcdc 	bl	80024f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e046      	b.n	8004bfe <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	795b      	ldrb	r3, [r3, #5]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_DAC_Start+0x20>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e040      	b.n	8004bfe <HAL_DAC_Start+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2201      	movs	r2, #1
 8004b96:	409a      	lsls	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d11d      	bne.n	8004bf0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	e014      	b.n	8004bf0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d107      	bne.n	8004bf0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0202 	orr.w	r2, r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0a2      	b.n	8004d6a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	795b      	ldrb	r3, [r3, #5]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_DAC_Start_DMA+0x24>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e09c      	b.n	8004d6a <HAL_DAC_Start_DMA+0x15e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d129      	bne.n	8004c96 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <HAL_DAC_Start_DMA+0x168>)
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a4a      	ldr	r2, [pc, #296]	; (8004d78 <HAL_DAC_Start_DMA+0x16c>)
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4a49      	ldr	r2, [pc, #292]	; (8004d7c <HAL_DAC_Start_DMA+0x170>)
 8004c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_DAC_Start_DMA+0x6c>
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d005      	beq.n	8004c82 <HAL_DAC_Start_DMA+0x76>
 8004c76:	e009      	b.n	8004c8c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	613b      	str	r3, [r7, #16]
        break;
 8004c80:	e033      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	613b      	str	r3, [r7, #16]
        break;
 8004c8a:	e02e      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3310      	adds	r3, #16
 8004c92:	613b      	str	r3, [r7, #16]
        break;
 8004c94:	e029      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <HAL_DAC_Start_DMA+0x174>)
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_DAC_Start_DMA+0x178>)
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <HAL_DAC_Start_DMA+0x17c>)
 8004cac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_DAC_Start_DMA+0xc0>
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DAC_Start_DMA+0xca>
 8004cca:	e009      	b.n	8004ce0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	613b      	str	r3, [r7, #16]
        break;
 8004cd4:	e009      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	613b      	str	r3, [r7, #16]
        break;
 8004cde:	e004      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	331c      	adds	r3, #28
 8004ce6:	613b      	str	r3, [r7, #16]
        break;
 8004ce8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6898      	ldr	r0, [r3, #8]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	f000 fe67 	bl	80059dc <HAL_DMA_Start_IT>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
 8004d12:	e010      	b.n	8004d36 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68d8      	ldr	r0, [r3, #12]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	f000 fe55 	bl	80059dc <HAL_DMA_Start_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e005      	b.n	8004d68 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	080051fd 	.word	0x080051fd
 8004d78:	0800521f 	.word	0x0800521f
 8004d7c:	0800523b 	.word	0x0800523b
 8004d80:	080052b9 	.word	0x080052b9
 8004d84:	080052db 	.word	0x080052db
 8004d88:	080052f7 	.word	0x080052f7

08004d8c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e03e      	b.n	8004e1e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43da      	mvns	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	400a      	ands	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2201      	movs	r2, #1
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f863 	bl	8005eb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e00c      	b.n	8004e16 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 f855 	bl	8005eb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e14:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01d      	beq.n	8004e84 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f86f 	bl	8004f62 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9ed 	bl	80052a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b087      	sub	sp, #28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e015      	b.n	8004f1a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	3308      	adds	r3, #8
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e004      	b.n	8004f10 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_DAC_ConfigChannel+0x1e>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e12a      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	795b      	ldrb	r3, [r3, #5]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DAC_ConfigChannel+0x2e>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e124      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d17a      	bne.n	80050b0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004fba:	f7fe f88b 	bl	80030d4 <HAL_GetTick>
 8004fbe:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d13d      	bne.n	8005042 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fc6:	e018      	b.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fc8:	f7fe f884 	bl	80030d4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d911      	bls.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	4b86      	ldr	r3, [pc, #536]	; (80051f8 <HAL_DAC_ConfigChannel+0x280>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f043 0208 	orr.w	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0fa      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <HAL_DAC_ConfigChannel+0x280>)
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1df      	bne.n	8004fc8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	6992      	ldr	r2, [r2, #24]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
 8005012:	e020      	b.n	8005056 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005014:	f7fe f85e 	bl	80030d4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	d90f      	bls.n	8005042 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	da0a      	bge.n	8005042 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f043 0208 	orr.w	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2203      	movs	r2, #3
 800503c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0d6      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	dbe3      	blt.n	8005014 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	6992      	ldr	r2, [r2, #24]
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	ea02 0103 	and.w	r1, r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	409a      	lsls	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	21ff      	movs	r1, #255	; 0xff
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	ea02 0103 	and.w	r1, r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d11d      	bne.n	80050f4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	221f      	movs	r2, #31
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2207      	movs	r2, #7
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d102      	bne.n	800511e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
 800511c:	e00f      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d102      	bne.n	800512c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005126:	2301      	movs	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	e008      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005134:	2301      	movs	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
 8005138:	e001      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43da      	mvns	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	400a      	ands	r2, r1
 8005184:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	22c0      	movs	r2, #192	; 0xc0
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	400a      	ands	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80051ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20008000 	.word	0x20008000

080051fc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fe8b 	bl	8004f26 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	711a      	strb	r2, [r3, #4]
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fe84 	bl	8004f3a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fe7a 	bl	8004f4e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	711a      	strb	r2, [r3, #4]
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ffce 	bl	8005268 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	711a      	strb	r2, [r3, #4]
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ffc7 	bl	800527c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff ffbd 	bl	8005290 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	711a      	strb	r2, [r3, #4]
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800532c:	f7fd fed2 	bl	80030d4 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e316      	b.n	800596a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_DMA_Init+0x1b8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a65      	ldr	r2, [pc, #404]	; (80054e0 <HAL_DMA_Init+0x1bc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a63      	ldr	r2, [pc, #396]	; (80054e4 <HAL_DMA_Init+0x1c0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a62      	ldr	r2, [pc, #392]	; (80054e8 <HAL_DMA_Init+0x1c4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_DMA_Init+0x1c8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_DMA_Init+0x1cc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_DMA_Init+0x1d0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5c      	ldr	r2, [pc, #368]	; (80054f8 <HAL_DMA_Init+0x1d4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5a      	ldr	r2, [pc, #360]	; (80054fc <HAL_DMA_Init+0x1d8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_DMA_Init+0x1dc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_DMA_Init+0x1e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a56      	ldr	r2, [pc, #344]	; (8005508 <HAL_DMA_Init+0x1e4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a54      	ldr	r2, [pc, #336]	; (800550c <HAL_DMA_Init+0x1e8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a53      	ldr	r2, [pc, #332]	; (8005510 <HAL_DMA_Init+0x1ec>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a51      	ldr	r2, [pc, #324]	; (8005514 <HAL_DMA_Init+0x1f0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a50      	ldr	r2, [pc, #320]	; (8005518 <HAL_DMA_Init+0x1f4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_DMA_Init+0xbc>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_DMA_Init+0xbe>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 813b 	beq.w	800565e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a37      	ldr	r2, [pc, #220]	; (80054dc <HAL_DMA_Init+0x1b8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d04a      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <HAL_DMA_Init+0x1bc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d045      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a34      	ldr	r2, [pc, #208]	; (80054e4 <HAL_DMA_Init+0x1c0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d040      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a33      	ldr	r2, [pc, #204]	; (80054e8 <HAL_DMA_Init+0x1c4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d03b      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a31      	ldr	r2, [pc, #196]	; (80054ec <HAL_DMA_Init+0x1c8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d036      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <HAL_DMA_Init+0x1cc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d031      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2e      	ldr	r2, [pc, #184]	; (80054f4 <HAL_DMA_Init+0x1d0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02c      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2d      	ldr	r2, [pc, #180]	; (80054f8 <HAL_DMA_Init+0x1d4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d027      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_DMA_Init+0x1d8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d022      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <HAL_DMA_Init+0x1dc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01d      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_DMA_Init+0x1e0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a27      	ldr	r2, [pc, #156]	; (8005508 <HAL_DMA_Init+0x1e4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_DMA_Init+0x1e8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a24      	ldr	r2, [pc, #144]	; (8005510 <HAL_DMA_Init+0x1ec>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_DMA_Init+0x1f0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_DMA_Init+0x1f4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <HAL_DMA_Init+0x186>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e007      	b.n	80054ba <HAL_DMA_Init+0x196>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054ba:	e02f      	b.n	800551c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054bc:	f7fd fe0a 	bl	80030d4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d928      	bls.n	800551c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2203      	movs	r2, #3
 80054d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e246      	b.n	800596a <HAL_DMA_Init+0x646>
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1c8      	bne.n	80054bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_DMA_Init+0x420>)
 8005536:	4013      	ands	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005542:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b04      	cmp	r3, #4
 800556e:	d107      	bne.n	8005580 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005580:	4b71      	ldr	r3, [pc, #452]	; (8005748 <HAL_DMA_Init+0x424>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b71      	ldr	r3, [pc, #452]	; (800574c <HAL_DMA_Init+0x428>)
 8005586:	4013      	ands	r3, r2
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558c:	d328      	bcc.n	80055e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b28      	cmp	r3, #40	; 0x28
 8005594:	d903      	bls.n	800559e <HAL_DMA_Init+0x27a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b2e      	cmp	r3, #46	; 0x2e
 800559c:	d917      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b3e      	cmp	r3, #62	; 0x3e
 80055a4:	d903      	bls.n	80055ae <HAL_DMA_Init+0x28a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b42      	cmp	r3, #66	; 0x42
 80055ac:	d90f      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b46      	cmp	r3, #70	; 0x46
 80055b4:	d903      	bls.n	80055be <HAL_DMA_Init+0x29a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b48      	cmp	r3, #72	; 0x48
 80055bc:	d907      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b4e      	cmp	r3, #78	; 0x4e
 80055c4:	d905      	bls.n	80055d2 <HAL_DMA_Init+0x2ae>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b52      	cmp	r3, #82	; 0x52
 80055cc:	d801      	bhi.n	80055d2 <HAL_DMA_Init+0x2ae>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_DMA_Init+0x2b0>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b04      	cmp	r3, #4
 8005608:	d117      	bne.n	800563a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f002 fb33 	bl	8007c88 <DMA_CheckFifoParam>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e197      	b.n	800596a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f002 fa6e 	bl	8007b24 <DMA_CalcBaseAndBitshift>
 8005648:	4603      	mov	r3, r0
 800564a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	223f      	movs	r2, #63	; 0x3f
 8005656:	409a      	lsls	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	e0cd      	b.n	80057fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <HAL_DMA_Init+0x42c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a39      	ldr	r2, [pc, #228]	; (8005754 <HAL_DMA_Init+0x430>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a38      	ldr	r2, [pc, #224]	; (8005758 <HAL_DMA_Init+0x434>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a36      	ldr	r2, [pc, #216]	; (800575c <HAL_DMA_Init+0x438>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <HAL_DMA_Init+0x43c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a33      	ldr	r2, [pc, #204]	; (8005764 <HAL_DMA_Init+0x440>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a32      	ldr	r2, [pc, #200]	; (8005768 <HAL_DMA_Init+0x444>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a30      	ldr	r2, [pc, #192]	; (800576c <HAL_DMA_Init+0x448>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Init+0x38e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_DMA_Init+0x390>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8097 	beq.w	80057e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_DMA_Init+0x42c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d021      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a22      	ldr	r2, [pc, #136]	; (8005754 <HAL_DMA_Init+0x430>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01c      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a21      	ldr	r2, [pc, #132]	; (8005758 <HAL_DMA_Init+0x434>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d017      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_DMA_Init+0x438>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d012      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_DMA_Init+0x43c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00d      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_DMA_Init+0x440>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d008      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_DMA_Init+0x444>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_DMA_Init+0x448>)
 8005706:	4293      	cmp	r3, r2
 8005708:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_DMA_Init+0x44c>)
 8005726:	4013      	ands	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d020      	beq.n	8005774 <HAL_DMA_Init+0x450>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d102      	bne.n	8005740 <HAL_DMA_Init+0x41c>
 800573a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800573e:	e01a      	b.n	8005776 <HAL_DMA_Init+0x452>
 8005740:	2300      	movs	r3, #0
 8005742:	e018      	b.n	8005776 <HAL_DMA_Init+0x452>
 8005744:	fe10803f 	.word	0xfe10803f
 8005748:	5c001000 	.word	0x5c001000
 800574c:	ffff0000 	.word	0xffff0000
 8005750:	58025408 	.word	0x58025408
 8005754:	5802541c 	.word	0x5802541c
 8005758:	58025430 	.word	0x58025430
 800575c:	58025444 	.word	0x58025444
 8005760:	58025458 	.word	0x58025458
 8005764:	5802546c 	.word	0x5802546c
 8005768:	58025480 	.word	0x58025480
 800576c:	58025494 	.word	0x58025494
 8005770:	fffe000f 	.word	0xfffe000f
 8005774:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800577c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800578c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800579c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b6e      	ldr	r3, [pc, #440]	; (8005974 <HAL_DMA_Init+0x650>)
 80057bc:	4413      	add	r3, r2
 80057be:	4a6e      	ldr	r2, [pc, #440]	; (8005978 <HAL_DMA_Init+0x654>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f9a9 	bl	8007b24 <DMA_CalcBaseAndBitshift>
 80057d2:	4603      	mov	r3, r0
 80057d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2201      	movs	r2, #1
 80057e0:	409a      	lsls	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	e008      	b.n	80057fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0b7      	b.n	800596a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5f      	ldr	r2, [pc, #380]	; (800597c <HAL_DMA_Init+0x658>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d072      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5d      	ldr	r2, [pc, #372]	; (8005980 <HAL_DMA_Init+0x65c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d06d      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5c      	ldr	r2, [pc, #368]	; (8005984 <HAL_DMA_Init+0x660>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d068      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5a      	ldr	r2, [pc, #360]	; (8005988 <HAL_DMA_Init+0x664>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d063      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a59      	ldr	r2, [pc, #356]	; (800598c <HAL_DMA_Init+0x668>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d05e      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_DMA_Init+0x66c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d059      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a56      	ldr	r2, [pc, #344]	; (8005994 <HAL_DMA_Init+0x670>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d054      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a54      	ldr	r2, [pc, #336]	; (8005998 <HAL_DMA_Init+0x674>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04f      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a53      	ldr	r2, [pc, #332]	; (800599c <HAL_DMA_Init+0x678>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a51      	ldr	r2, [pc, #324]	; (80059a0 <HAL_DMA_Init+0x67c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a50      	ldr	r2, [pc, #320]	; (80059a4 <HAL_DMA_Init+0x680>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4e      	ldr	r2, [pc, #312]	; (80059a8 <HAL_DMA_Init+0x684>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4d      	ldr	r2, [pc, #308]	; (80059ac <HAL_DMA_Init+0x688>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4b      	ldr	r2, [pc, #300]	; (80059b0 <HAL_DMA_Init+0x68c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4a      	ldr	r2, [pc, #296]	; (80059b4 <HAL_DMA_Init+0x690>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a48      	ldr	r2, [pc, #288]	; (80059b8 <HAL_DMA_Init+0x694>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a47      	ldr	r2, [pc, #284]	; (80059bc <HAL_DMA_Init+0x698>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a45      	ldr	r2, [pc, #276]	; (80059c0 <HAL_DMA_Init+0x69c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a44      	ldr	r2, [pc, #272]	; (80059c4 <HAL_DMA_Init+0x6a0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_DMA_Init+0x6a4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a41      	ldr	r2, [pc, #260]	; (80059cc <HAL_DMA_Init+0x6a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <HAL_DMA_Init+0x6ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3e      	ldr	r2, [pc, #248]	; (80059d4 <HAL_DMA_Init+0x6b0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3c      	ldr	r2, [pc, #240]	; (80059d8 <HAL_DMA_Init+0x6b4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Init+0x5ca>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_DMA_Init+0x5cc>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d032      	beq.n	800595a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 fa43 	bl	8007d80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d102      	bne.n	8005908 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800591c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_DMA_Init+0x624>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b08      	cmp	r3, #8
 800592c:	d80c      	bhi.n	8005948 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fac0 	bl	8007eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	e008      	b.n	800595a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	a7fdabf8 	.word	0xa7fdabf8
 8005978:	cccccccd 	.word	0xcccccccd
 800597c:	40020010 	.word	0x40020010
 8005980:	40020028 	.word	0x40020028
 8005984:	40020040 	.word	0x40020040
 8005988:	40020058 	.word	0x40020058
 800598c:	40020070 	.word	0x40020070
 8005990:	40020088 	.word	0x40020088
 8005994:	400200a0 	.word	0x400200a0
 8005998:	400200b8 	.word	0x400200b8
 800599c:	40020410 	.word	0x40020410
 80059a0:	40020428 	.word	0x40020428
 80059a4:	40020440 	.word	0x40020440
 80059a8:	40020458 	.word	0x40020458
 80059ac:	40020470 	.word	0x40020470
 80059b0:	40020488 	.word	0x40020488
 80059b4:	400204a0 	.word	0x400204a0
 80059b8:	400204b8 	.word	0x400204b8
 80059bc:	58025408 	.word	0x58025408
 80059c0:	5802541c 	.word	0x5802541c
 80059c4:	58025430 	.word	0x58025430
 80059c8:	58025444 	.word	0x58025444
 80059cc:	58025458 	.word	0x58025458
 80059d0:	5802546c 	.word	0x5802546c
 80059d4:	58025480 	.word	0x58025480
 80059d8:	58025494 	.word	0x58025494

080059dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e226      	b.n	8005e46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_DMA_Start_IT+0x2a>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e21f      	b.n	8005e46 <HAL_DMA_Start_IT+0x46a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f040 820a 	bne.w	8005e30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <HAL_DMA_Start_IT+0x1f4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d04a      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a66      	ldr	r2, [pc, #408]	; (8005bd4 <HAL_DMA_Start_IT+0x1f8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d045      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a65      	ldr	r2, [pc, #404]	; (8005bd8 <HAL_DMA_Start_IT+0x1fc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d040      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a63      	ldr	r2, [pc, #396]	; (8005bdc <HAL_DMA_Start_IT+0x200>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d03b      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a62      	ldr	r2, [pc, #392]	; (8005be0 <HAL_DMA_Start_IT+0x204>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d036      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a60      	ldr	r2, [pc, #384]	; (8005be4 <HAL_DMA_Start_IT+0x208>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d031      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5f      	ldr	r2, [pc, #380]	; (8005be8 <HAL_DMA_Start_IT+0x20c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d02c      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5d      	ldr	r2, [pc, #372]	; (8005bec <HAL_DMA_Start_IT+0x210>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d027      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5c      	ldr	r2, [pc, #368]	; (8005bf0 <HAL_DMA_Start_IT+0x214>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5a      	ldr	r2, [pc, #360]	; (8005bf4 <HAL_DMA_Start_IT+0x218>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01d      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a59      	ldr	r2, [pc, #356]	; (8005bf8 <HAL_DMA_Start_IT+0x21c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a57      	ldr	r2, [pc, #348]	; (8005bfc <HAL_DMA_Start_IT+0x220>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a56      	ldr	r2, [pc, #344]	; (8005c00 <HAL_DMA_Start_IT+0x224>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a54      	ldr	r2, [pc, #336]	; (8005c04 <HAL_DMA_Start_IT+0x228>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a53      	ldr	r2, [pc, #332]	; (8005c08 <HAL_DMA_Start_IT+0x22c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a51      	ldr	r2, [pc, #324]	; (8005c0c <HAL_DMA_Start_IT+0x230>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d108      	bne.n	8005adc <HAL_DMA_Start_IT+0x100>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e007      	b.n	8005aec <HAL_DMA_Start_IT+0x110>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f001 fe6a 	bl	80077cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_DMA_Start_IT+0x1f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d04a      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <HAL_DMA_Start_IT+0x1f8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d045      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a31      	ldr	r2, [pc, #196]	; (8005bd8 <HAL_DMA_Start_IT+0x1fc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d040      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a30      	ldr	r2, [pc, #192]	; (8005bdc <HAL_DMA_Start_IT+0x200>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d03b      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2e      	ldr	r2, [pc, #184]	; (8005be0 <HAL_DMA_Start_IT+0x204>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d036      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2d      	ldr	r2, [pc, #180]	; (8005be4 <HAL_DMA_Start_IT+0x208>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d031      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <HAL_DMA_Start_IT+0x20c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02c      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <HAL_DMA_Start_IT+0x210>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d027      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <HAL_DMA_Start_IT+0x214>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d022      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <HAL_DMA_Start_IT+0x218>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01d      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a25      	ldr	r2, [pc, #148]	; (8005bf8 <HAL_DMA_Start_IT+0x21c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d018      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a24      	ldr	r2, [pc, #144]	; (8005bfc <HAL_DMA_Start_IT+0x220>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <HAL_DMA_Start_IT+0x224>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <HAL_DMA_Start_IT+0x228>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_DMA_Start_IT+0x22c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_DMA_Start_IT+0x230>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_DMA_Start_IT+0x1c0>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_DMA_Start_IT+0x1c2>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d036      	beq.n	8005c10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f023 021e 	bic.w	r2, r3, #30
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0216 	orr.w	r2, r2, #22
 8005bb4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d03e      	beq.n	8005c3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e035      	b.n	8005c3c <HAL_DMA_Start_IT+0x260>
 8005bd0:	40020010 	.word	0x40020010
 8005bd4:	40020028 	.word	0x40020028
 8005bd8:	40020040 	.word	0x40020040
 8005bdc:	40020058 	.word	0x40020058
 8005be0:	40020070 	.word	0x40020070
 8005be4:	40020088 	.word	0x40020088
 8005be8:	400200a0 	.word	0x400200a0
 8005bec:	400200b8 	.word	0x400200b8
 8005bf0:	40020410 	.word	0x40020410
 8005bf4:	40020428 	.word	0x40020428
 8005bf8:	40020440 	.word	0x40020440
 8005bfc:	40020458 	.word	0x40020458
 8005c00:	40020470 	.word	0x40020470
 8005c04:	40020488 	.word	0x40020488
 8005c08:	400204a0 	.word	0x400204a0
 8005c0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 020e 	bic.w	r2, r3, #14
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 020a 	orr.w	r2, r2, #10
 8005c22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0204 	orr.w	r2, r2, #4
 8005c3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a83      	ldr	r2, [pc, #524]	; (8005e50 <HAL_DMA_Start_IT+0x474>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d072      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a82      	ldr	r2, [pc, #520]	; (8005e54 <HAL_DMA_Start_IT+0x478>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d06d      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a80      	ldr	r2, [pc, #512]	; (8005e58 <HAL_DMA_Start_IT+0x47c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d068      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a7f      	ldr	r2, [pc, #508]	; (8005e5c <HAL_DMA_Start_IT+0x480>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d063      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a7d      	ldr	r2, [pc, #500]	; (8005e60 <HAL_DMA_Start_IT+0x484>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d05e      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7c      	ldr	r2, [pc, #496]	; (8005e64 <HAL_DMA_Start_IT+0x488>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d059      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7a      	ldr	r2, [pc, #488]	; (8005e68 <HAL_DMA_Start_IT+0x48c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d054      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a79      	ldr	r2, [pc, #484]	; (8005e6c <HAL_DMA_Start_IT+0x490>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04f      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a77      	ldr	r2, [pc, #476]	; (8005e70 <HAL_DMA_Start_IT+0x494>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d04a      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a76      	ldr	r2, [pc, #472]	; (8005e74 <HAL_DMA_Start_IT+0x498>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d045      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a74      	ldr	r2, [pc, #464]	; (8005e78 <HAL_DMA_Start_IT+0x49c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d040      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a73      	ldr	r2, [pc, #460]	; (8005e7c <HAL_DMA_Start_IT+0x4a0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d03b      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a71      	ldr	r2, [pc, #452]	; (8005e80 <HAL_DMA_Start_IT+0x4a4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d036      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a70      	ldr	r2, [pc, #448]	; (8005e84 <HAL_DMA_Start_IT+0x4a8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6e      	ldr	r2, [pc, #440]	; (8005e88 <HAL_DMA_Start_IT+0x4ac>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02c      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a6d      	ldr	r2, [pc, #436]	; (8005e8c <HAL_DMA_Start_IT+0x4b0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d027      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6b      	ldr	r2, [pc, #428]	; (8005e90 <HAL_DMA_Start_IT+0x4b4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d022      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6a      	ldr	r2, [pc, #424]	; (8005e94 <HAL_DMA_Start_IT+0x4b8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01d      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <HAL_DMA_Start_IT+0x4bc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a67      	ldr	r2, [pc, #412]	; (8005e9c <HAL_DMA_Start_IT+0x4c0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a65      	ldr	r2, [pc, #404]	; (8005ea0 <HAL_DMA_Start_IT+0x4c4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a64      	ldr	r2, [pc, #400]	; (8005ea4 <HAL_DMA_Start_IT+0x4c8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a62      	ldr	r2, [pc, #392]	; (8005ea8 <HAL_DMA_Start_IT+0x4cc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a61      	ldr	r2, [pc, #388]	; (8005eac <HAL_DMA_Start_IT+0x4d0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Start_IT+0x354>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_DMA_Start_IT+0x356>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01a      	beq.n	8005d6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a37      	ldr	r2, [pc, #220]	; (8005e50 <HAL_DMA_Start_IT+0x474>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d04a      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a36      	ldr	r2, [pc, #216]	; (8005e54 <HAL_DMA_Start_IT+0x478>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d045      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a34      	ldr	r2, [pc, #208]	; (8005e58 <HAL_DMA_Start_IT+0x47c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d040      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <HAL_DMA_Start_IT+0x480>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d03b      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <HAL_DMA_Start_IT+0x484>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d036      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_DMA_Start_IT+0x488>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d031      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_DMA_Start_IT+0x48c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d02c      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_DMA_Start_IT+0x490>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d027      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <HAL_DMA_Start_IT+0x494>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <HAL_DMA_Start_IT+0x498>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d01d      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_DMA_Start_IT+0x49c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_DMA_Start_IT+0x4a0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_DMA_Start_IT+0x4a4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <HAL_DMA_Start_IT+0x4a8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_DMA_Start_IT+0x4ac>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_DMA_Start_IT+0x4b0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <HAL_DMA_Start_IT+0x442>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e012      	b.n	8005e44 <HAL_DMA_Start_IT+0x468>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e009      	b.n	8005e44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
 8005e90:	58025408 	.word	0x58025408
 8005e94:	5802541c 	.word	0x5802541c
 8005e98:	58025430 	.word	0x58025430
 8005e9c:	58025444 	.word	0x58025444
 8005ea0:	58025458 	.word	0x58025458
 8005ea4:	5802546c 	.word	0x5802546c
 8005ea8:	58025480 	.word	0x58025480
 8005eac:	58025494 	.word	0x58025494

08005eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005eb8:	f7fd f90c 	bl	80030d4 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e2dc      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d008      	beq.n	8005ee6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e2cd      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a76      	ldr	r2, [pc, #472]	; (80060c4 <HAL_DMA_Abort+0x214>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04a      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a74      	ldr	r2, [pc, #464]	; (80060c8 <HAL_DMA_Abort+0x218>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d045      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a73      	ldr	r2, [pc, #460]	; (80060cc <HAL_DMA_Abort+0x21c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a71      	ldr	r2, [pc, #452]	; (80060d0 <HAL_DMA_Abort+0x220>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d03b      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a70      	ldr	r2, [pc, #448]	; (80060d4 <HAL_DMA_Abort+0x224>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d036      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6e      	ldr	r2, [pc, #440]	; (80060d8 <HAL_DMA_Abort+0x228>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6d      	ldr	r2, [pc, #436]	; (80060dc <HAL_DMA_Abort+0x22c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d02c      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6b      	ldr	r2, [pc, #428]	; (80060e0 <HAL_DMA_Abort+0x230>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6a      	ldr	r2, [pc, #424]	; (80060e4 <HAL_DMA_Abort+0x234>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a68      	ldr	r2, [pc, #416]	; (80060e8 <HAL_DMA_Abort+0x238>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a67      	ldr	r2, [pc, #412]	; (80060ec <HAL_DMA_Abort+0x23c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_DMA_Abort+0x240>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a64      	ldr	r2, [pc, #400]	; (80060f4 <HAL_DMA_Abort+0x244>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a62      	ldr	r2, [pc, #392]	; (80060f8 <HAL_DMA_Abort+0x248>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a61      	ldr	r2, [pc, #388]	; (80060fc <HAL_DMA_Abort+0x24c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <HAL_DMA_Abort+0x250>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_DMA_Abort+0xda>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_DMA_Abort+0xdc>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 021e 	bic.w	r2, r2, #30
 8005f9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	e00a      	b.n	8005fce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 020e 	bic.w	r2, r2, #14
 8005fc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3c      	ldr	r2, [pc, #240]	; (80060c4 <HAL_DMA_Abort+0x214>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d072      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3a      	ldr	r2, [pc, #232]	; (80060c8 <HAL_DMA_Abort+0x218>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d06d      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_DMA_Abort+0x21c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d068      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <HAL_DMA_Abort+0x220>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d063      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <HAL_DMA_Abort+0x224>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d05e      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a34      	ldr	r2, [pc, #208]	; (80060d8 <HAL_DMA_Abort+0x228>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d059      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a33      	ldr	r2, [pc, #204]	; (80060dc <HAL_DMA_Abort+0x22c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d054      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a31      	ldr	r2, [pc, #196]	; (80060e0 <HAL_DMA_Abort+0x230>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04f      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <HAL_DMA_Abort+0x234>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_DMA_Abort+0x238>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_DMA_Abort+0x23c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_DMA_Abort+0x240>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <HAL_DMA_Abort+0x244>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <HAL_DMA_Abort+0x248>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a27      	ldr	r2, [pc, #156]	; (80060fc <HAL_DMA_Abort+0x24c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_DMA_Abort+0x250>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <HAL_DMA_Abort+0x254>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	; (8006108 <HAL_DMA_Abort+0x258>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <HAL_DMA_Abort+0x25c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_DMA_Abort+0x260>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <HAL_DMA_Abort+0x264>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_DMA_Abort+0x268>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_DMA_Abort+0x26c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_DMA_Abort+0x270>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d132      	bne.n	8006124 <HAL_DMA_Abort+0x274>
 80060be:	2301      	movs	r3, #1
 80060c0:	e031      	b.n	8006126 <HAL_DMA_Abort+0x276>
 80060c2:	bf00      	nop
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	58025408 	.word	0x58025408
 8006108:	5802541c 	.word	0x5802541c
 800610c:	58025430 	.word	0x58025430
 8006110:	58025444 	.word	0x58025444
 8006114:	58025458 	.word	0x58025458
 8006118:	5802546c 	.word	0x5802546c
 800611c:	58025480 	.word	0x58025480
 8006120:	58025494 	.word	0x58025494
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6d      	ldr	r2, [pc, #436]	; (80062f4 <HAL_DMA_Abort+0x444>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a6b      	ldr	r2, [pc, #428]	; (80062f8 <HAL_DMA_Abort+0x448>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a6a      	ldr	r2, [pc, #424]	; (80062fc <HAL_DMA_Abort+0x44c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a68      	ldr	r2, [pc, #416]	; (8006300 <HAL_DMA_Abort+0x450>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a67      	ldr	r2, [pc, #412]	; (8006304 <HAL_DMA_Abort+0x454>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a65      	ldr	r2, [pc, #404]	; (8006308 <HAL_DMA_Abort+0x458>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a64      	ldr	r2, [pc, #400]	; (800630c <HAL_DMA_Abort+0x45c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a62      	ldr	r2, [pc, #392]	; (8006310 <HAL_DMA_Abort+0x460>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a61      	ldr	r2, [pc, #388]	; (8006314 <HAL_DMA_Abort+0x464>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_DMA_Abort+0x468>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <HAL_DMA_Abort+0x46c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5c      	ldr	r2, [pc, #368]	; (8006320 <HAL_DMA_Abort+0x470>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a5b      	ldr	r2, [pc, #364]	; (8006324 <HAL_DMA_Abort+0x474>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_DMA_Abort+0x478>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a58      	ldr	r2, [pc, #352]	; (800632c <HAL_DMA_Abort+0x47c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a56      	ldr	r2, [pc, #344]	; (8006330 <HAL_DMA_Abort+0x480>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <HAL_DMA_Abort+0x33c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <HAL_DMA_Abort+0x34c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061fc:	e013      	b.n	8006226 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061fe:	f7fc ff69 	bl	80030d4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b05      	cmp	r3, #5
 800620a:	d90c      	bls.n	8006226 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2203      	movs	r2, #3
 8006216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e12d      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2f      	ldr	r2, [pc, #188]	; (80062f4 <HAL_DMA_Abort+0x444>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d04a      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_DMA_Abort+0x448>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d045      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2c      	ldr	r2, [pc, #176]	; (80062fc <HAL_DMA_Abort+0x44c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d040      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <HAL_DMA_Abort+0x450>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d03b      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <HAL_DMA_Abort+0x454>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d036      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <HAL_DMA_Abort+0x458>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d031      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a26      	ldr	r2, [pc, #152]	; (800630c <HAL_DMA_Abort+0x45c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d02c      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <HAL_DMA_Abort+0x460>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d027      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a23      	ldr	r2, [pc, #140]	; (8006314 <HAL_DMA_Abort+0x464>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d022      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_DMA_Abort+0x468>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_DMA_Abort+0x46c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d018      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_DMA_Abort+0x470>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_DMA_Abort+0x474>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_DMA_Abort+0x478>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_DMA_Abort+0x47c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_DMA_Abort+0x480>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d101      	bne.n	80062d6 <HAL_DMA_Abort+0x426>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_DMA_Abort+0x428>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02b      	beq.n	8006334 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	223f      	movs	r2, #63	; 0x3f
 80062ec:	409a      	lsls	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	e02a      	b.n	800634a <HAL_DMA_Abort+0x49a>
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2201      	movs	r2, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4f      	ldr	r2, [pc, #316]	; (800648c <HAL_DMA_Abort+0x5dc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d072      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a4d      	ldr	r2, [pc, #308]	; (8006490 <HAL_DMA_Abort+0x5e0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d06d      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a4c      	ldr	r2, [pc, #304]	; (8006494 <HAL_DMA_Abort+0x5e4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d068      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_DMA_Abort+0x5e8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d063      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a49      	ldr	r2, [pc, #292]	; (800649c <HAL_DMA_Abort+0x5ec>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d05e      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a47      	ldr	r2, [pc, #284]	; (80064a0 <HAL_DMA_Abort+0x5f0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d059      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <HAL_DMA_Abort+0x5f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d054      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a44      	ldr	r2, [pc, #272]	; (80064a8 <HAL_DMA_Abort+0x5f8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d04f      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a43      	ldr	r2, [pc, #268]	; (80064ac <HAL_DMA_Abort+0x5fc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d04a      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a41      	ldr	r2, [pc, #260]	; (80064b0 <HAL_DMA_Abort+0x600>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d045      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a40      	ldr	r2, [pc, #256]	; (80064b4 <HAL_DMA_Abort+0x604>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d040      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a3e      	ldr	r2, [pc, #248]	; (80064b8 <HAL_DMA_Abort+0x608>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d03b      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <HAL_DMA_Abort+0x60c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d036      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a3b      	ldr	r2, [pc, #236]	; (80064c0 <HAL_DMA_Abort+0x610>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d031      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a3a      	ldr	r2, [pc, #232]	; (80064c4 <HAL_DMA_Abort+0x614>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d02c      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <HAL_DMA_Abort+0x618>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d027      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a37      	ldr	r2, [pc, #220]	; (80064cc <HAL_DMA_Abort+0x61c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_DMA_Abort+0x620>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01d      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_DMA_Abort+0x624>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <HAL_DMA_Abort+0x628>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a31      	ldr	r2, [pc, #196]	; (80064dc <HAL_DMA_Abort+0x62c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <HAL_DMA_Abort+0x630>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2e      	ldr	r2, [pc, #184]	; (80064e4 <HAL_DMA_Abort+0x634>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2c      	ldr	r2, [pc, #176]	; (80064e8 <HAL_DMA_Abort+0x638>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <HAL_DMA_Abort+0x58e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <HAL_DMA_Abort+0x590>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d015      	beq.n	8006470 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800644c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006464:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800646e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40020010 	.word	0x40020010
 8006490:	40020028 	.word	0x40020028
 8006494:	40020040 	.word	0x40020040
 8006498:	40020058 	.word	0x40020058
 800649c:	40020070 	.word	0x40020070
 80064a0:	40020088 	.word	0x40020088
 80064a4:	400200a0 	.word	0x400200a0
 80064a8:	400200b8 	.word	0x400200b8
 80064ac:	40020410 	.word	0x40020410
 80064b0:	40020428 	.word	0x40020428
 80064b4:	40020440 	.word	0x40020440
 80064b8:	40020458 	.word	0x40020458
 80064bc:	40020470 	.word	0x40020470
 80064c0:	40020488 	.word	0x40020488
 80064c4:	400204a0 	.word	0x400204a0
 80064c8:	400204b8 	.word	0x400204b8
 80064cc:	58025408 	.word	0x58025408
 80064d0:	5802541c 	.word	0x5802541c
 80064d4:	58025430 	.word	0x58025430
 80064d8:	58025444 	.word	0x58025444
 80064dc:	58025458 	.word	0x58025458
 80064e0:	5802546c 	.word	0x5802546c
 80064e4:	58025480 	.word	0x58025480
 80064e8:	58025494 	.word	0x58025494

080064ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e237      	b.n	800696e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d004      	beq.n	8006514 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e22c      	b.n	800696e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5c      	ldr	r2, [pc, #368]	; (800668c <HAL_DMA_Abort_IT+0x1a0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04a      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5b      	ldr	r2, [pc, #364]	; (8006690 <HAL_DMA_Abort_IT+0x1a4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d045      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a59      	ldr	r2, [pc, #356]	; (8006694 <HAL_DMA_Abort_IT+0x1a8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d040      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a58      	ldr	r2, [pc, #352]	; (8006698 <HAL_DMA_Abort_IT+0x1ac>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d03b      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a56      	ldr	r2, [pc, #344]	; (800669c <HAL_DMA_Abort_IT+0x1b0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d036      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a55      	ldr	r2, [pc, #340]	; (80066a0 <HAL_DMA_Abort_IT+0x1b4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d031      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_DMA_Abort_IT+0x1b8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02c      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a52      	ldr	r2, [pc, #328]	; (80066a8 <HAL_DMA_Abort_IT+0x1bc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d027      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a50      	ldr	r2, [pc, #320]	; (80066ac <HAL_DMA_Abort_IT+0x1c0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4f      	ldr	r2, [pc, #316]	; (80066b0 <HAL_DMA_Abort_IT+0x1c4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01d      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4d      	ldr	r2, [pc, #308]	; (80066b4 <HAL_DMA_Abort_IT+0x1c8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4c      	ldr	r2, [pc, #304]	; (80066b8 <HAL_DMA_Abort_IT+0x1cc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a4a      	ldr	r2, [pc, #296]	; (80066bc <HAL_DMA_Abort_IT+0x1d0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a49      	ldr	r2, [pc, #292]	; (80066c0 <HAL_DMA_Abort_IT+0x1d4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a47      	ldr	r2, [pc, #284]	; (80066c4 <HAL_DMA_Abort_IT+0x1d8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a46      	ldr	r2, [pc, #280]	; (80066c8 <HAL_DMA_Abort_IT+0x1dc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Abort_IT+0xcc>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_DMA_Abort_IT+0xce>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8086 	beq.w	80066cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	; (800668c <HAL_DMA_Abort_IT+0x1a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04a      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <HAL_DMA_Abort_IT+0x1a4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d045      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <HAL_DMA_Abort_IT+0x1a8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d040      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <HAL_DMA_Abort_IT+0x1ac>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d03b      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a29      	ldr	r2, [pc, #164]	; (800669c <HAL_DMA_Abort_IT+0x1b0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d036      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <HAL_DMA_Abort_IT+0x1b4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d031      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a26      	ldr	r2, [pc, #152]	; (80066a4 <HAL_DMA_Abort_IT+0x1b8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d02c      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <HAL_DMA_Abort_IT+0x1bc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d027      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a23      	ldr	r2, [pc, #140]	; (80066ac <HAL_DMA_Abort_IT+0x1c0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d022      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_DMA_Abort_IT+0x1c4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01d      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <HAL_DMA_Abort_IT+0x1c8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_DMA_Abort_IT+0x1cc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_DMA_Abort_IT+0x1d0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_DMA_Abort_IT+0x1d4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_DMA_Abort_IT+0x1d8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_DMA_Abort_IT+0x1dc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_DMA_Abort_IT+0x18e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e178      	b.n	800696c <HAL_DMA_Abort_IT+0x480>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e16f      	b.n	800696c <HAL_DMA_Abort_IT+0x480>
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020e 	bic.w	r2, r2, #14
 80066da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6c      	ldr	r2, [pc, #432]	; (8006894 <HAL_DMA_Abort_IT+0x3a8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d04a      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6b      	ldr	r2, [pc, #428]	; (8006898 <HAL_DMA_Abort_IT+0x3ac>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d045      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a69      	ldr	r2, [pc, #420]	; (800689c <HAL_DMA_Abort_IT+0x3b0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d040      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a68      	ldr	r2, [pc, #416]	; (80068a0 <HAL_DMA_Abort_IT+0x3b4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d03b      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a66      	ldr	r2, [pc, #408]	; (80068a4 <HAL_DMA_Abort_IT+0x3b8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d036      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a65      	ldr	r2, [pc, #404]	; (80068a8 <HAL_DMA_Abort_IT+0x3bc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d031      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_DMA_Abort_IT+0x3c0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d02c      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a62      	ldr	r2, [pc, #392]	; (80068b0 <HAL_DMA_Abort_IT+0x3c4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d027      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a60      	ldr	r2, [pc, #384]	; (80068b4 <HAL_DMA_Abort_IT+0x3c8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d022      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5f      	ldr	r2, [pc, #380]	; (80068b8 <HAL_DMA_Abort_IT+0x3cc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d01d      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5d      	ldr	r2, [pc, #372]	; (80068bc <HAL_DMA_Abort_IT+0x3d0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d018      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a5c      	ldr	r2, [pc, #368]	; (80068c0 <HAL_DMA_Abort_IT+0x3d4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5a      	ldr	r2, [pc, #360]	; (80068c4 <HAL_DMA_Abort_IT+0x3d8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <HAL_DMA_Abort_IT+0x3dc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d009      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a57      	ldr	r2, [pc, #348]	; (80068cc <HAL_DMA_Abort_IT+0x3e0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_DMA_Abort_IT+0x3e4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <HAL_DMA_Abort_IT+0x2a2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <HAL_DMA_Abort_IT+0x2b2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <HAL_DMA_Abort_IT+0x3a8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d072      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3a      	ldr	r2, [pc, #232]	; (8006898 <HAL_DMA_Abort_IT+0x3ac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d06d      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a39      	ldr	r2, [pc, #228]	; (800689c <HAL_DMA_Abort_IT+0x3b0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d068      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a37      	ldr	r2, [pc, #220]	; (80068a0 <HAL_DMA_Abort_IT+0x3b4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d063      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a36      	ldr	r2, [pc, #216]	; (80068a4 <HAL_DMA_Abort_IT+0x3b8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d05e      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <HAL_DMA_Abort_IT+0x3bc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d059      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a33      	ldr	r2, [pc, #204]	; (80068ac <HAL_DMA_Abort_IT+0x3c0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d054      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a31      	ldr	r2, [pc, #196]	; (80068b0 <HAL_DMA_Abort_IT+0x3c4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d04f      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <HAL_DMA_Abort_IT+0x3c8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d04a      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2e      	ldr	r2, [pc, #184]	; (80068b8 <HAL_DMA_Abort_IT+0x3cc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d045      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_DMA_Abort_IT+0x3d0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d040      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <HAL_DMA_Abort_IT+0x3d4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d03b      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <HAL_DMA_Abort_IT+0x3d8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d036      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <HAL_DMA_Abort_IT+0x3dc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d031      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a27      	ldr	r2, [pc, #156]	; (80068cc <HAL_DMA_Abort_IT+0x3e0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d02c      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <HAL_DMA_Abort_IT+0x3e4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d027      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <HAL_DMA_Abort_IT+0x3e8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d022      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_DMA_Abort_IT+0x3ec>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01d      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	; (80068dc <HAL_DMA_Abort_IT+0x3f0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d018      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_DMA_Abort_IT+0x3f4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <HAL_DMA_Abort_IT+0x3f8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00e      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <HAL_DMA_Abort_IT+0x3fc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <HAL_DMA_Abort_IT+0x400>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <HAL_DMA_Abort_IT+0x404>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d132      	bne.n	80068f4 <HAL_DMA_Abort_IT+0x408>
 800688e:	2301      	movs	r3, #1
 8006890:	e031      	b.n	80068f6 <HAL_DMA_Abort_IT+0x40a>
 8006892:	bf00      	nop
 8006894:	40020010 	.word	0x40020010
 8006898:	40020028 	.word	0x40020028
 800689c:	40020040 	.word	0x40020040
 80068a0:	40020058 	.word	0x40020058
 80068a4:	40020070 	.word	0x40020070
 80068a8:	40020088 	.word	0x40020088
 80068ac:	400200a0 	.word	0x400200a0
 80068b0:	400200b8 	.word	0x400200b8
 80068b4:	40020410 	.word	0x40020410
 80068b8:	40020428 	.word	0x40020428
 80068bc:	40020440 	.word	0x40020440
 80068c0:	40020458 	.word	0x40020458
 80068c4:	40020470 	.word	0x40020470
 80068c8:	40020488 	.word	0x40020488
 80068cc:	400204a0 	.word	0x400204a0
 80068d0:	400204b8 	.word	0x400204b8
 80068d4:	58025408 	.word	0x58025408
 80068d8:	5802541c 	.word	0x5802541c
 80068dc:	58025430 	.word	0x58025430
 80068e0:	58025444 	.word	0x58025444
 80068e4:	58025458 	.word	0x58025458
 80068e8:	5802546c 	.word	0x5802546c
 80068ec:	58025480 	.word	0x58025480
 80068f0:	58025494 	.word	0x58025494
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006908:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2201      	movs	r2, #1
 800691a:	409a      	lsls	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006928:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006940:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800694a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006984:	4b67      	ldr	r3, [pc, #412]	; (8006b24 <HAL_DMA_IRQHandler+0x1ac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a67      	ldr	r2, [pc, #412]	; (8006b28 <HAL_DMA_IRQHandler+0x1b0>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0a9b      	lsrs	r3, r3, #10
 8006990:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a5f      	ldr	r2, [pc, #380]	; (8006b2c <HAL_DMA_IRQHandler+0x1b4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5d      	ldr	r2, [pc, #372]	; (8006b30 <HAL_DMA_IRQHandler+0x1b8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5c      	ldr	r2, [pc, #368]	; (8006b34 <HAL_DMA_IRQHandler+0x1bc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5a      	ldr	r2, [pc, #360]	; (8006b38 <HAL_DMA_IRQHandler+0x1c0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a59      	ldr	r2, [pc, #356]	; (8006b3c <HAL_DMA_IRQHandler+0x1c4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <HAL_DMA_IRQHandler+0x1c8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a56      	ldr	r2, [pc, #344]	; (8006b44 <HAL_DMA_IRQHandler+0x1cc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_DMA_IRQHandler+0x1d0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a53      	ldr	r2, [pc, #332]	; (8006b4c <HAL_DMA_IRQHandler+0x1d4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a51      	ldr	r2, [pc, #324]	; (8006b50 <HAL_DMA_IRQHandler+0x1d8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a50      	ldr	r2, [pc, #320]	; (8006b54 <HAL_DMA_IRQHandler+0x1dc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a4e      	ldr	r2, [pc, #312]	; (8006b58 <HAL_DMA_IRQHandler+0x1e0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a4d      	ldr	r2, [pc, #308]	; (8006b5c <HAL_DMA_IRQHandler+0x1e4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <HAL_DMA_IRQHandler+0x1e8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	; (8006b64 <HAL_DMA_IRQHandler+0x1ec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a48      	ldr	r2, [pc, #288]	; (8006b68 <HAL_DMA_IRQHandler+0x1f0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d101      	bne.n	8006a4e <HAL_DMA_IRQHandler+0xd6>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <HAL_DMA_IRQHandler+0xd8>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 842b 	beq.w	80072ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	2208      	movs	r2, #8
 8006a60:	409a      	lsls	r2, r3
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a2 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2e      	ldr	r2, [pc, #184]	; (8006b2c <HAL_DMA_IRQHandler+0x1b4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04a      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2d      	ldr	r2, [pc, #180]	; (8006b30 <HAL_DMA_IRQHandler+0x1b8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d045      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <HAL_DMA_IRQHandler+0x1bc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d040      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <HAL_DMA_IRQHandler+0x1c0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d03b      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a28      	ldr	r2, [pc, #160]	; (8006b3c <HAL_DMA_IRQHandler+0x1c4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d036      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <HAL_DMA_IRQHandler+0x1c8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d031      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <HAL_DMA_IRQHandler+0x1cc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02c      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a24      	ldr	r2, [pc, #144]	; (8006b48 <HAL_DMA_IRQHandler+0x1d0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d027      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <HAL_DMA_IRQHandler+0x1d4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a21      	ldr	r2, [pc, #132]	; (8006b50 <HAL_DMA_IRQHandler+0x1d8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <HAL_DMA_IRQHandler+0x1dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1e      	ldr	r2, [pc, #120]	; (8006b58 <HAL_DMA_IRQHandler+0x1e0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <HAL_DMA_IRQHandler+0x1e4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <HAL_DMA_IRQHandler+0x1e8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_DMA_IRQHandler+0x1ec>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_DMA_IRQHandler+0x1f0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d12f      	bne.n	8006b6c <HAL_DMA_IRQHandler+0x1f4>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf14      	ite	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	e02e      	b.n	8006b80 <HAL_DMA_IRQHandler+0x208>
 8006b22:	bf00      	nop
 8006b24:	24000088 	.word	0x24000088
 8006b28:	1b4e81b5 	.word	0x1b4e81b5
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d06e      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a69      	ldr	r2, [pc, #420]	; (8006d70 <HAL_DMA_IRQHandler+0x3f8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d04a      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a67      	ldr	r2, [pc, #412]	; (8006d74 <HAL_DMA_IRQHandler+0x3fc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d045      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a66      	ldr	r2, [pc, #408]	; (8006d78 <HAL_DMA_IRQHandler+0x400>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d040      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a64      	ldr	r2, [pc, #400]	; (8006d7c <HAL_DMA_IRQHandler+0x404>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d03b      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a63      	ldr	r2, [pc, #396]	; (8006d80 <HAL_DMA_IRQHandler+0x408>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d036      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a61      	ldr	r2, [pc, #388]	; (8006d84 <HAL_DMA_IRQHandler+0x40c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d031      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a60      	ldr	r2, [pc, #384]	; (8006d88 <HAL_DMA_IRQHandler+0x410>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d02c      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a5e      	ldr	r2, [pc, #376]	; (8006d8c <HAL_DMA_IRQHandler+0x414>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d027      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a5d      	ldr	r2, [pc, #372]	; (8006d90 <HAL_DMA_IRQHandler+0x418>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d022      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a5b      	ldr	r2, [pc, #364]	; (8006d94 <HAL_DMA_IRQHandler+0x41c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01d      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5a      	ldr	r2, [pc, #360]	; (8006d98 <HAL_DMA_IRQHandler+0x420>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d018      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <HAL_DMA_IRQHandler+0x424>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a57      	ldr	r2, [pc, #348]	; (8006da0 <HAL_DMA_IRQHandler+0x428>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <HAL_DMA_IRQHandler+0x42c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a54      	ldr	r2, [pc, #336]	; (8006da8 <HAL_DMA_IRQHandler+0x430>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a52      	ldr	r2, [pc, #328]	; (8006dac <HAL_DMA_IRQHandler+0x434>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10a      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x304>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e003      	b.n	8006c84 <HAL_DMA_IRQHandler+0x30c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0202 	orr.w	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2204      	movs	r2, #4
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 808f 	beq.w	8006dd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_DMA_IRQHandler+0x3f8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <HAL_DMA_IRQHandler+0x3fc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <HAL_DMA_IRQHandler+0x400>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a27      	ldr	r2, [pc, #156]	; (8006d7c <HAL_DMA_IRQHandler+0x404>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_DMA_IRQHandler+0x408>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <HAL_DMA_IRQHandler+0x40c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <HAL_DMA_IRQHandler+0x410>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <HAL_DMA_IRQHandler+0x414>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_DMA_IRQHandler+0x418>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <HAL_DMA_IRQHandler+0x41c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_DMA_IRQHandler+0x420>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_DMA_IRQHandler+0x424>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <HAL_DMA_IRQHandler+0x428>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_DMA_IRQHandler+0x42c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <HAL_DMA_IRQHandler+0x430>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <HAL_DMA_IRQHandler+0x434>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d12a      	bne.n	8006db0 <HAL_DMA_IRQHandler+0x438>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e023      	b.n	8006db8 <HAL_DMA_IRQHandler+0x440>
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	2210      	movs	r2, #16
 8006de2:	409a      	lsls	r2, r3
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a6 	beq.w	8006f3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a85      	ldr	r2, [pc, #532]	; (8007008 <HAL_DMA_IRQHandler+0x690>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a83      	ldr	r2, [pc, #524]	; (800700c <HAL_DMA_IRQHandler+0x694>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a82      	ldr	r2, [pc, #520]	; (8007010 <HAL_DMA_IRQHandler+0x698>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a80      	ldr	r2, [pc, #512]	; (8007014 <HAL_DMA_IRQHandler+0x69c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7f      	ldr	r2, [pc, #508]	; (8007018 <HAL_DMA_IRQHandler+0x6a0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7d      	ldr	r2, [pc, #500]	; (800701c <HAL_DMA_IRQHandler+0x6a4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7c      	ldr	r2, [pc, #496]	; (8007020 <HAL_DMA_IRQHandler+0x6a8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <HAL_DMA_IRQHandler+0x6ac>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a79      	ldr	r2, [pc, #484]	; (8007028 <HAL_DMA_IRQHandler+0x6b0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a77      	ldr	r2, [pc, #476]	; (800702c <HAL_DMA_IRQHandler+0x6b4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a76      	ldr	r2, [pc, #472]	; (8007030 <HAL_DMA_IRQHandler+0x6b8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a74      	ldr	r2, [pc, #464]	; (8007034 <HAL_DMA_IRQHandler+0x6bc>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a73      	ldr	r2, [pc, #460]	; (8007038 <HAL_DMA_IRQHandler+0x6c0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a71      	ldr	r2, [pc, #452]	; (800703c <HAL_DMA_IRQHandler+0x6c4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a70      	ldr	r2, [pc, #448]	; (8007040 <HAL_DMA_IRQHandler+0x6c8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6e      	ldr	r2, [pc, #440]	; (8007044 <HAL_DMA_IRQHandler+0x6cc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_DMA_IRQHandler+0x52c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e009      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x540>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03e      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d108      	bne.n	8006efa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d024      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
 8006ef8:	e01f      	b.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
 8006f0a:	e016      	b.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0208 	bic.w	r2, r2, #8
 8006f28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2220      	movs	r2, #32
 8006f44:	409a      	lsls	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8110 	beq.w	8007170 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <HAL_DMA_IRQHandler+0x690>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d04a      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <HAL_DMA_IRQHandler+0x694>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d045      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <HAL_DMA_IRQHandler+0x698>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d040      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a28      	ldr	r2, [pc, #160]	; (8007014 <HAL_DMA_IRQHandler+0x69c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d03b      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <HAL_DMA_IRQHandler+0x6a0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d036      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a25      	ldr	r2, [pc, #148]	; (800701c <HAL_DMA_IRQHandler+0x6a4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d031      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a23      	ldr	r2, [pc, #140]	; (8007020 <HAL_DMA_IRQHandler+0x6a8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02c      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <HAL_DMA_IRQHandler+0x6ac>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d027      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <HAL_DMA_IRQHandler+0x6b0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_DMA_IRQHandler+0x6b4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_DMA_IRQHandler+0x6b8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <HAL_DMA_IRQHandler+0x6bc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <HAL_DMA_IRQHandler+0x6c0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_DMA_IRQHandler+0x6c4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_DMA_IRQHandler+0x6c8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_DMA_IRQHandler+0x6cc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d12b      	bne.n	8007048 <HAL_DMA_IRQHandler+0x6d0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	e02a      	b.n	800705c <HAL_DMA_IRQHandler+0x6e4>
 8007006:	bf00      	nop
 8007008:	40020010 	.word	0x40020010
 800700c:	40020028 	.word	0x40020028
 8007010:	40020040 	.word	0x40020040
 8007014:	40020058 	.word	0x40020058
 8007018:	40020070 	.word	0x40020070
 800701c:	40020088 	.word	0x40020088
 8007020:	400200a0 	.word	0x400200a0
 8007024:	400200b8 	.word	0x400200b8
 8007028:	40020410 	.word	0x40020410
 800702c:	40020428 	.word	0x40020428
 8007030:	40020440 	.word	0x40020440
 8007034:	40020458 	.word	0x40020458
 8007038:	40020470 	.word	0x40020470
 800703c:	40020488 	.word	0x40020488
 8007040:	400204a0 	.word	0x400204a0
 8007044:	400204b8 	.word	0x400204b8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8087 	beq.w	8007170 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2220      	movs	r2, #32
 800706c:	409a      	lsls	r2, r3
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b04      	cmp	r3, #4
 800707c:	d139      	bne.n	80070f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0216 	bic.w	r2, r2, #22
 800708c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <HAL_DMA_IRQHandler+0x736>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0208 	bic.w	r2, r2, #8
 80070bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	223f      	movs	r2, #63	; 0x3f
 80070c8:	409a      	lsls	r2, r3
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 834a 	beq.w	800777c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
          }
          return;
 80070f0:	e344      	b.n	800777c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	2b00      	cmp	r3, #0
 8007114:	d02c      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	e027      	b.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	e01e      	b.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0210 	bic.w	r2, r2, #16
 800714e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8306 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8088 	beq.w	8007298 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2204      	movs	r2, #4
 800718c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <HAL_DMA_IRQHandler+0xa08>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d04a      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a79      	ldr	r2, [pc, #484]	; (8007384 <HAL_DMA_IRQHandler+0xa0c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d045      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a77      	ldr	r2, [pc, #476]	; (8007388 <HAL_DMA_IRQHandler+0xa10>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d040      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a76      	ldr	r2, [pc, #472]	; (800738c <HAL_DMA_IRQHandler+0xa14>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d03b      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a74      	ldr	r2, [pc, #464]	; (8007390 <HAL_DMA_IRQHandler+0xa18>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d036      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a73      	ldr	r2, [pc, #460]	; (8007394 <HAL_DMA_IRQHandler+0xa1c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d031      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a71      	ldr	r2, [pc, #452]	; (8007398 <HAL_DMA_IRQHandler+0xa20>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d02c      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a70      	ldr	r2, [pc, #448]	; (800739c <HAL_DMA_IRQHandler+0xa24>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d027      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a6e      	ldr	r2, [pc, #440]	; (80073a0 <HAL_DMA_IRQHandler+0xa28>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a6d      	ldr	r2, [pc, #436]	; (80073a4 <HAL_DMA_IRQHandler+0xa2c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d01d      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <HAL_DMA_IRQHandler+0xa30>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6a      	ldr	r2, [pc, #424]	; (80073ac <HAL_DMA_IRQHandler+0xa34>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <HAL_DMA_IRQHandler+0xa38>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a67      	ldr	r2, [pc, #412]	; (80073b4 <HAL_DMA_IRQHandler+0xa3c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a65      	ldr	r2, [pc, #404]	; (80073b8 <HAL_DMA_IRQHandler+0xa40>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <HAL_DMA_IRQHandler+0xa44>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d108      	bne.n	8007242 <HAL_DMA_IRQHandler+0x8ca>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e007      	b.n	8007252 <HAL_DMA_IRQHandler+0x8da>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	429a      	cmp	r2, r3
 800725c:	d307      	bcc.n	800726e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f2      	bne.n	8007252 <HAL_DMA_IRQHandler+0x8da>
 800726c:	e000      	b.n	8007270 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800726e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007286:	e003      	b.n	8007290 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8272 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	e26c      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a43      	ldr	r2, [pc, #268]	; (80073c0 <HAL_DMA_IRQHandler+0xa48>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d022      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a42      	ldr	r2, [pc, #264]	; (80073c4 <HAL_DMA_IRQHandler+0xa4c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d01d      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a40      	ldr	r2, [pc, #256]	; (80073c8 <HAL_DMA_IRQHandler+0xa50>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d018      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a3f      	ldr	r2, [pc, #252]	; (80073cc <HAL_DMA_IRQHandler+0xa54>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d013      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <HAL_DMA_IRQHandler+0xa58>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00e      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3c      	ldr	r2, [pc, #240]	; (80073d4 <HAL_DMA_IRQHandler+0xa5c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d009      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3a      	ldr	r2, [pc, #232]	; (80073d8 <HAL_DMA_IRQHandler+0xa60>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a39      	ldr	r2, [pc, #228]	; (80073dc <HAL_DMA_IRQHandler+0xa64>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d101      	bne.n	8007300 <HAL_DMA_IRQHandler+0x988>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <HAL_DMA_IRQHandler+0x98a>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 823f 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2204      	movs	r2, #4
 800731a:	409a      	lsls	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80cd 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xb48>
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80c7 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2204      	movs	r2, #4
 800733c:	409a      	lsls	r2, r3
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d049      	beq.n	80073e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8210 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007368:	e20a      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8206 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737c:	e200      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
 800737e:	bf00      	nop
 8007380:	40020010 	.word	0x40020010
 8007384:	40020028 	.word	0x40020028
 8007388:	40020040 	.word	0x40020040
 800738c:	40020058 	.word	0x40020058
 8007390:	40020070 	.word	0x40020070
 8007394:	40020088 	.word	0x40020088
 8007398:	400200a0 	.word	0x400200a0
 800739c:	400200b8 	.word	0x400200b8
 80073a0:	40020410 	.word	0x40020410
 80073a4:	40020428 	.word	0x40020428
 80073a8:	40020440 	.word	0x40020440
 80073ac:	40020458 	.word	0x40020458
 80073b0:	40020470 	.word	0x40020470
 80073b4:	40020488 	.word	0x40020488
 80073b8:	400204a0 	.word	0x400204a0
 80073bc:	400204b8 	.word	0x400204b8
 80073c0:	58025408 	.word	0x58025408
 80073c4:	5802541c 	.word	0x5802541c
 80073c8:	58025430 	.word	0x58025430
 80073cc:	58025444 	.word	0x58025444
 80073d0:	58025458 	.word	0x58025458
 80073d4:	5802546c 	.word	0x5802546c
 80073d8:	58025480 	.word	0x58025480
 80073dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d160      	bne.n	80074ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7f      	ldr	r2, [pc, #508]	; (80075ec <HAL_DMA_IRQHandler+0xc74>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7d      	ldr	r2, [pc, #500]	; (80075f0 <HAL_DMA_IRQHandler+0xc78>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7c      	ldr	r2, [pc, #496]	; (80075f4 <HAL_DMA_IRQHandler+0xc7c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <HAL_DMA_IRQHandler+0xc80>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a79      	ldr	r2, [pc, #484]	; (80075fc <HAL_DMA_IRQHandler+0xc84>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a77      	ldr	r2, [pc, #476]	; (8007600 <HAL_DMA_IRQHandler+0xc88>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a76      	ldr	r2, [pc, #472]	; (8007604 <HAL_DMA_IRQHandler+0xc8c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a74      	ldr	r2, [pc, #464]	; (8007608 <HAL_DMA_IRQHandler+0xc90>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a73      	ldr	r2, [pc, #460]	; (800760c <HAL_DMA_IRQHandler+0xc94>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a71      	ldr	r2, [pc, #452]	; (8007610 <HAL_DMA_IRQHandler+0xc98>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a70      	ldr	r2, [pc, #448]	; (8007614 <HAL_DMA_IRQHandler+0xc9c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6e      	ldr	r2, [pc, #440]	; (8007618 <HAL_DMA_IRQHandler+0xca0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6d      	ldr	r2, [pc, #436]	; (800761c <HAL_DMA_IRQHandler+0xca4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6b      	ldr	r2, [pc, #428]	; (8007620 <HAL_DMA_IRQHandler+0xca8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a6a      	ldr	r2, [pc, #424]	; (8007624 <HAL_DMA_IRQHandler+0xcac>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a68      	ldr	r2, [pc, #416]	; (8007628 <HAL_DMA_IRQHandler+0xcb0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d108      	bne.n	800749c <HAL_DMA_IRQHandler+0xb24>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0208 	bic.w	r2, r2, #8
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e007      	b.n	80074ac <HAL_DMA_IRQHandler+0xb34>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0204 	bic.w	r2, r2, #4
 80074aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8165 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074be:	e15f      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2202      	movs	r2, #2
 80074ca:	409a      	lsls	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80c5 	beq.w	8007660 <HAL_DMA_IRQHandler+0xce8>
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80bf 	beq.w	8007660 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2202      	movs	r2, #2
 80074ec:	409a      	lsls	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d018      	beq.n	800752e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 813a 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007518:	e134      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8130 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752c:	e12a      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8089 	bne.w	800764c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <HAL_DMA_IRQHandler+0xc74>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d04a      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <HAL_DMA_IRQHandler+0xc78>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d045      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <HAL_DMA_IRQHandler+0xc7c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d040      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <HAL_DMA_IRQHandler+0xc80>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d03b      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <HAL_DMA_IRQHandler+0xc84>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d036      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a23      	ldr	r2, [pc, #140]	; (8007600 <HAL_DMA_IRQHandler+0xc88>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d031      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a22      	ldr	r2, [pc, #136]	; (8007604 <HAL_DMA_IRQHandler+0xc8c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d02c      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <HAL_DMA_IRQHandler+0xc90>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d027      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <HAL_DMA_IRQHandler+0xc94>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_DMA_IRQHandler+0xc98>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <HAL_DMA_IRQHandler+0xc9c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_DMA_IRQHandler+0xca0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a19      	ldr	r2, [pc, #100]	; (800761c <HAL_DMA_IRQHandler+0xca4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_DMA_IRQHandler+0xca8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a16      	ldr	r2, [pc, #88]	; (8007624 <HAL_DMA_IRQHandler+0xcac>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <HAL_DMA_IRQHandler+0xcb0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d128      	bne.n	800762c <HAL_DMA_IRQHandler+0xcb4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0214 	bic.w	r2, r2, #20
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e027      	b.n	800763c <HAL_DMA_IRQHandler+0xcc4>
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 020a 	bic.w	r2, r2, #10
 800763a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 8097 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800765e:	e091      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2208      	movs	r2, #8
 800766a:	409a      	lsls	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8088 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8082 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a41      	ldr	r2, [pc, #260]	; (800778c <HAL_DMA_IRQHandler+0xe14>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d04a      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <HAL_DMA_IRQHandler+0xe18>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d045      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a3e      	ldr	r2, [pc, #248]	; (8007794 <HAL_DMA_IRQHandler+0xe1c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d040      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a3c      	ldr	r2, [pc, #240]	; (8007798 <HAL_DMA_IRQHandler+0xe20>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d03b      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a3b      	ldr	r2, [pc, #236]	; (800779c <HAL_DMA_IRQHandler+0xe24>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d036      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a39      	ldr	r2, [pc, #228]	; (80077a0 <HAL_DMA_IRQHandler+0xe28>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a38      	ldr	r2, [pc, #224]	; (80077a4 <HAL_DMA_IRQHandler+0xe2c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d02c      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a36      	ldr	r2, [pc, #216]	; (80077a8 <HAL_DMA_IRQHandler+0xe30>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d027      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a35      	ldr	r2, [pc, #212]	; (80077ac <HAL_DMA_IRQHandler+0xe34>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <HAL_DMA_IRQHandler+0xe38>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a32      	ldr	r2, [pc, #200]	; (80077b4 <HAL_DMA_IRQHandler+0xe3c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a30      	ldr	r2, [pc, #192]	; (80077b8 <HAL_DMA_IRQHandler+0xe40>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a2f      	ldr	r2, [pc, #188]	; (80077bc <HAL_DMA_IRQHandler+0xe44>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <HAL_DMA_IRQHandler+0xe48>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2c      	ldr	r2, [pc, #176]	; (80077c4 <HAL_DMA_IRQHandler+0xe4c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <HAL_DMA_IRQHandler+0xe50>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d108      	bne.n	8007734 <HAL_DMA_IRQHandler+0xdbc>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 021c 	bic.w	r2, r2, #28
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e007      	b.n	8007744 <HAL_DMA_IRQHandler+0xdcc>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 020e 	bic.w	r2, r2, #14
 8007742:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	2201      	movs	r2, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
 800777a:	e004      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007784:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007786:	3728      	adds	r7, #40	; 0x28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40020010 	.word	0x40020010
 8007790:	40020028 	.word	0x40020028
 8007794:	40020040 	.word	0x40020040
 8007798:	40020058 	.word	0x40020058
 800779c:	40020070 	.word	0x40020070
 80077a0:	40020088 	.word	0x40020088
 80077a4:	400200a0 	.word	0x400200a0
 80077a8:	400200b8 	.word	0x400200b8
 80077ac:	40020410 	.word	0x40020410
 80077b0:	40020428 	.word	0x40020428
 80077b4:	40020440 	.word	0x40020440
 80077b8:	40020458 	.word	0x40020458
 80077bc:	40020470 	.word	0x40020470
 80077c0:	40020488 	.word	0x40020488
 80077c4:	400204a0 	.word	0x400204a0
 80077c8:	400204b8 	.word	0x400204b8

080077cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a7f      	ldr	r2, [pc, #508]	; (80079e8 <DMA_SetConfig+0x21c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d072      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a7d      	ldr	r2, [pc, #500]	; (80079ec <DMA_SetConfig+0x220>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d06d      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7c      	ldr	r2, [pc, #496]	; (80079f0 <DMA_SetConfig+0x224>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d068      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7a      	ldr	r2, [pc, #488]	; (80079f4 <DMA_SetConfig+0x228>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d063      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a79      	ldr	r2, [pc, #484]	; (80079f8 <DMA_SetConfig+0x22c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d05e      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a77      	ldr	r2, [pc, #476]	; (80079fc <DMA_SetConfig+0x230>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d059      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a76      	ldr	r2, [pc, #472]	; (8007a00 <DMA_SetConfig+0x234>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d054      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a74      	ldr	r2, [pc, #464]	; (8007a04 <DMA_SetConfig+0x238>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d04f      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a73      	ldr	r2, [pc, #460]	; (8007a08 <DMA_SetConfig+0x23c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a71      	ldr	r2, [pc, #452]	; (8007a0c <DMA_SetConfig+0x240>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a70      	ldr	r2, [pc, #448]	; (8007a10 <DMA_SetConfig+0x244>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a6e      	ldr	r2, [pc, #440]	; (8007a14 <DMA_SetConfig+0x248>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6d      	ldr	r2, [pc, #436]	; (8007a18 <DMA_SetConfig+0x24c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6b      	ldr	r2, [pc, #428]	; (8007a1c <DMA_SetConfig+0x250>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6a      	ldr	r2, [pc, #424]	; (8007a20 <DMA_SetConfig+0x254>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a68      	ldr	r2, [pc, #416]	; (8007a24 <DMA_SetConfig+0x258>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a67      	ldr	r2, [pc, #412]	; (8007a28 <DMA_SetConfig+0x25c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a65      	ldr	r2, [pc, #404]	; (8007a2c <DMA_SetConfig+0x260>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a64      	ldr	r2, [pc, #400]	; (8007a30 <DMA_SetConfig+0x264>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a62      	ldr	r2, [pc, #392]	; (8007a34 <DMA_SetConfig+0x268>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a61      	ldr	r2, [pc, #388]	; (8007a38 <DMA_SetConfig+0x26c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5f      	ldr	r2, [pc, #380]	; (8007a3c <DMA_SetConfig+0x270>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a5e      	ldr	r2, [pc, #376]	; (8007a40 <DMA_SetConfig+0x274>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5c      	ldr	r2, [pc, #368]	; (8007a44 <DMA_SetConfig+0x278>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <DMA_SetConfig+0x10e>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <DMA_SetConfig+0x110>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a39      	ldr	r2, [pc, #228]	; (80079e8 <DMA_SetConfig+0x21c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d04a      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a38      	ldr	r2, [pc, #224]	; (80079ec <DMA_SetConfig+0x220>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d045      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a36      	ldr	r2, [pc, #216]	; (80079f0 <DMA_SetConfig+0x224>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d040      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a35      	ldr	r2, [pc, #212]	; (80079f4 <DMA_SetConfig+0x228>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d03b      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <DMA_SetConfig+0x22c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d036      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a32      	ldr	r2, [pc, #200]	; (80079fc <DMA_SetConfig+0x230>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d031      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <DMA_SetConfig+0x234>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d02c      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <DMA_SetConfig+0x238>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d027      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <DMA_SetConfig+0x23c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d022      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a2c      	ldr	r2, [pc, #176]	; (8007a0c <DMA_SetConfig+0x240>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01d      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <DMA_SetConfig+0x244>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d018      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <DMA_SetConfig+0x248>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <DMA_SetConfig+0x24c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00e      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <DMA_SetConfig+0x250>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d009      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <DMA_SetConfig+0x254>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a23      	ldr	r2, [pc, #140]	; (8007a24 <DMA_SetConfig+0x258>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d101      	bne.n	80079a0 <DMA_SetConfig+0x1d4>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <DMA_SetConfig+0x1d6>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d059      	beq.n	8007a5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	223f      	movs	r2, #63	; 0x3f
 80079b0:	409a      	lsls	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d138      	bne.n	8007a48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079e6:	e086      	b.n	8007af6 <DMA_SetConfig+0x32a>
 80079e8:	40020010 	.word	0x40020010
 80079ec:	40020028 	.word	0x40020028
 80079f0:	40020040 	.word	0x40020040
 80079f4:	40020058 	.word	0x40020058
 80079f8:	40020070 	.word	0x40020070
 80079fc:	40020088 	.word	0x40020088
 8007a00:	400200a0 	.word	0x400200a0
 8007a04:	400200b8 	.word	0x400200b8
 8007a08:	40020410 	.word	0x40020410
 8007a0c:	40020428 	.word	0x40020428
 8007a10:	40020440 	.word	0x40020440
 8007a14:	40020458 	.word	0x40020458
 8007a18:	40020470 	.word	0x40020470
 8007a1c:	40020488 	.word	0x40020488
 8007a20:	400204a0 	.word	0x400204a0
 8007a24:	400204b8 	.word	0x400204b8
 8007a28:	58025408 	.word	0x58025408
 8007a2c:	5802541c 	.word	0x5802541c
 8007a30:	58025430 	.word	0x58025430
 8007a34:	58025444 	.word	0x58025444
 8007a38:	58025458 	.word	0x58025458
 8007a3c:	5802546c 	.word	0x5802546c
 8007a40:	58025480 	.word	0x58025480
 8007a44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]
}
 8007a58:	e04d      	b.n	8007af6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a29      	ldr	r2, [pc, #164]	; (8007b04 <DMA_SetConfig+0x338>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d022      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a27      	ldr	r2, [pc, #156]	; (8007b08 <DMA_SetConfig+0x33c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01d      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a26      	ldr	r2, [pc, #152]	; (8007b0c <DMA_SetConfig+0x340>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d018      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a24      	ldr	r2, [pc, #144]	; (8007b10 <DMA_SetConfig+0x344>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <DMA_SetConfig+0x348>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00e      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a21      	ldr	r2, [pc, #132]	; (8007b18 <DMA_SetConfig+0x34c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d009      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a20      	ldr	r2, [pc, #128]	; (8007b1c <DMA_SetConfig+0x350>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d004      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <DMA_SetConfig+0x354>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d101      	bne.n	8007aae <DMA_SetConfig+0x2e2>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <DMA_SetConfig+0x2e4>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2201      	movs	r2, #1
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d108      	bne.n	8007ae6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	60da      	str	r2, [r3, #12]
}
 8007ae4:	e007      	b.n	8007af6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	58025408 	.word	0x58025408
 8007b08:	5802541c 	.word	0x5802541c
 8007b0c:	58025430 	.word	0x58025430
 8007b10:	58025444 	.word	0x58025444
 8007b14:	58025458 	.word	0x58025458
 8007b18:	5802546c 	.word	0x5802546c
 8007b1c:	58025480 	.word	0x58025480
 8007b20:	58025494 	.word	0x58025494

08007b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a42      	ldr	r2, [pc, #264]	; (8007c3c <DMA_CalcBaseAndBitshift+0x118>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d04a      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a41      	ldr	r2, [pc, #260]	; (8007c40 <DMA_CalcBaseAndBitshift+0x11c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d045      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a3f      	ldr	r2, [pc, #252]	; (8007c44 <DMA_CalcBaseAndBitshift+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d040      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3e      	ldr	r2, [pc, #248]	; (8007c48 <DMA_CalcBaseAndBitshift+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d03b      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a3c      	ldr	r2, [pc, #240]	; (8007c4c <DMA_CalcBaseAndBitshift+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d036      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a3b      	ldr	r2, [pc, #236]	; (8007c50 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d031      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a39      	ldr	r2, [pc, #228]	; (8007c54 <DMA_CalcBaseAndBitshift+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02c      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a38      	ldr	r2, [pc, #224]	; (8007c58 <DMA_CalcBaseAndBitshift+0x134>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d027      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a36      	ldr	r2, [pc, #216]	; (8007c5c <DMA_CalcBaseAndBitshift+0x138>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a35      	ldr	r2, [pc, #212]	; (8007c60 <DMA_CalcBaseAndBitshift+0x13c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a33      	ldr	r2, [pc, #204]	; (8007c64 <DMA_CalcBaseAndBitshift+0x140>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	; (8007c68 <DMA_CalcBaseAndBitshift+0x144>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	; (8007c6c <DMA_CalcBaseAndBitshift+0x148>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	; (8007c70 <DMA_CalcBaseAndBitshift+0x14c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	; (8007c74 <DMA_CalcBaseAndBitshift+0x150>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a2c      	ldr	r2, [pc, #176]	; (8007c78 <DMA_CalcBaseAndBitshift+0x154>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <DMA_CalcBaseAndBitshift+0xac>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <DMA_CalcBaseAndBitshift+0xae>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d024      	beq.n	8007c20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	3b10      	subs	r3, #16
 8007bde:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <DMA_CalcBaseAndBitshift+0x158>)
 8007be0:	fba2 2303 	umull	r2, r3, r2, r3
 8007be4:	091b      	lsrs	r3, r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <DMA_CalcBaseAndBitshift+0x15c>)
 8007bf0:	5cd3      	ldrb	r3, [r2, r3]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d908      	bls.n	8007c10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <DMA_CalcBaseAndBitshift+0x160>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0e:	e00d      	b.n	8007c2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <DMA_CalcBaseAndBitshift+0x160>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1e:	e005      	b.n	8007c2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8
 8007c7c:	aaaaaaab 	.word	0xaaaaaaab
 8007c80:	08015634 	.word	0x08015634
 8007c84:	fffffc00 	.word	0xfffffc00

08007c88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d120      	bne.n	8007cde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d858      	bhi.n	8007d56 <DMA_CheckFifoParam+0xce>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <DMA_CheckFifoParam+0x24>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007ccf 	.word	0x08007ccf
 8007cb4:	08007cbd 	.word	0x08007cbd
 8007cb8:	08007d57 	.word	0x08007d57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d048      	beq.n	8007d5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ccc:	e045      	b.n	8007d5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cd6:	d142      	bne.n	8007d5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cdc:	e03f      	b.n	8007d5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d123      	bne.n	8007d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d838      	bhi.n	8007d62 <DMA_CheckFifoParam+0xda>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <DMA_CheckFifoParam+0x70>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d0f 	.word	0x08007d0f
 8007d00:	08007d09 	.word	0x08007d09
 8007d04:	08007d21 	.word	0x08007d21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8007d0c:	e030      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d025      	beq.n	8007d66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d1e:	e022      	b.n	8007d66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d28:	d11f      	bne.n	8007d6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d2e:	e01c      	b.n	8007d6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d902      	bls.n	8007d3e <DMA_CheckFifoParam+0xb6>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d003      	beq.n	8007d44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d3c:	e018      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	73fb      	strb	r3, [r7, #15]
        break;
 8007d42:	e015      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00e      	beq.n	8007d6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
    break;
 8007d54:	e00b      	b.n	8007d6e <DMA_CheckFifoParam+0xe6>
        break;
 8007d56:	bf00      	nop
 8007d58:	e00a      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d5a:	bf00      	nop
 8007d5c:	e008      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d5e:	bf00      	nop
 8007d60:	e006      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d62:	bf00      	nop
 8007d64:	e004      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
    break;
 8007d6e:	bf00      	nop
    }
  }

  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a38      	ldr	r2, [pc, #224]	; (8007e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d022      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a36      	ldr	r2, [pc, #216]	; (8007e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d01d      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a35      	ldr	r2, [pc, #212]	; (8007e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d018      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a33      	ldr	r2, [pc, #204]	; (8007e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d013      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a32      	ldr	r2, [pc, #200]	; (8007e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00e      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a30      	ldr	r2, [pc, #192]	; (8007e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d009      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d004      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d101      	bne.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01a      	beq.n	8007e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	3b08      	subs	r3, #8
 8007df0:	4a28      	ldr	r2, [pc, #160]	; (8007e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	091b      	lsrs	r3, r3, #4
 8007df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2201      	movs	r2, #1
 8007e16:	409a      	lsls	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e1c:	e024      	b.n	8007e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	3b10      	subs	r3, #16
 8007e26:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d806      	bhi.n	8007e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d902      	bls.n	8007e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3308      	adds	r3, #8
 8007e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4b18      	ldr	r3, [pc, #96]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	58025408 	.word	0x58025408
 8007e78:	5802541c 	.word	0x5802541c
 8007e7c:	58025430 	.word	0x58025430
 8007e80:	58025444 	.word	0x58025444
 8007e84:	58025458 	.word	0x58025458
 8007e88:	5802546c 	.word	0x5802546c
 8007e8c:	58025480 	.word	0x58025480
 8007e90:	58025494 	.word	0x58025494
 8007e94:	cccccccd 	.word	0xcccccccd
 8007e98:	16009600 	.word	0x16009600
 8007e9c:	58025880 	.word	0x58025880
 8007ea0:	aaaaaaab 	.word	0xaaaaaaab
 8007ea4:	400204b8 	.word	0x400204b8
 8007ea8:	4002040f 	.word	0x4002040f
 8007eac:	10008200 	.word	0x10008200
 8007eb0:	40020880 	.word	0x40020880

08007eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d04a      	beq.n	8007f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d847      	bhi.n	8007f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a25      	ldr	r2, [pc, #148]	; (8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d022      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d01d      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a22      	ldr	r2, [pc, #136]	; (8007f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d018      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1f      	ldr	r2, [pc, #124]	; (8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00e      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d101      	bne.n	8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f3c:	671a      	str	r2, [r3, #112]	; 0x70
 8007f3e:	e009      	b.n	8007f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	58025408 	.word	0x58025408
 8007f70:	5802541c 	.word	0x5802541c
 8007f74:	58025430 	.word	0x58025430
 8007f78:	58025444 	.word	0x58025444
 8007f7c:	58025458 	.word	0x58025458
 8007f80:	5802546c 	.word	0x5802546c
 8007f84:	58025480 	.word	0x58025480
 8007f88:	58025494 	.word	0x58025494
 8007f8c:	1600963f 	.word	0x1600963f
 8007f90:	58025940 	.word	0x58025940
 8007f94:	1000823f 	.word	0x1000823f
 8007f98:	40020940 	.word	0x40020940

08007f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b089      	sub	sp, #36	; 0x24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007faa:	4b89      	ldr	r3, [pc, #548]	; (80081d0 <HAL_GPIO_Init+0x234>)
 8007fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fae:	e194      	b.n	80082da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8186 	beq.w	80082d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d005      	beq.n	8007fe0 <HAL_GPIO_Init+0x44>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d130      	bne.n	8008042 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	2203      	movs	r2, #3
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	4313      	orrs	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008016:	2201      	movs	r2, #1
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4013      	ands	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	f003 0201 	and.w	r2, r3, #1
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	4313      	orrs	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d017      	beq.n	800807e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2203      	movs	r2, #3
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4313      	orrs	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d123      	bne.n	80080d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	08da      	lsrs	r2, r3, #3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3208      	adds	r2, #8
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	220f      	movs	r2, #15
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	08da      	lsrs	r2, r3, #3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3208      	adds	r2, #8
 80080cc:	69b9      	ldr	r1, [r7, #24]
 80080ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	2203      	movs	r2, #3
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	4013      	ands	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f003 0203 	and.w	r2, r3, #3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80e0 	beq.w	80082d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008114:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <HAL_GPIO_Init+0x238>)
 8008116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800811a:	4a2e      	ldr	r2, [pc, #184]	; (80081d4 <HAL_GPIO_Init+0x238>)
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008124:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <HAL_GPIO_Init+0x238>)
 8008126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008132:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <HAL_GPIO_Init+0x23c>)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	089b      	lsrs	r3, r3, #2
 8008138:	3302      	adds	r3, #2
 800813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	220f      	movs	r2, #15
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4013      	ands	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a20      	ldr	r2, [pc, #128]	; (80081dc <HAL_GPIO_Init+0x240>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d052      	beq.n	8008204 <HAL_GPIO_Init+0x268>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <HAL_GPIO_Init+0x244>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d031      	beq.n	80081ca <HAL_GPIO_Init+0x22e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <HAL_GPIO_Init+0x248>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d02b      	beq.n	80081c6 <HAL_GPIO_Init+0x22a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1d      	ldr	r2, [pc, #116]	; (80081e8 <HAL_GPIO_Init+0x24c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d025      	beq.n	80081c2 <HAL_GPIO_Init+0x226>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <HAL_GPIO_Init+0x250>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01f      	beq.n	80081be <HAL_GPIO_Init+0x222>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <HAL_GPIO_Init+0x254>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d019      	beq.n	80081ba <HAL_GPIO_Init+0x21e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <HAL_GPIO_Init+0x258>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_GPIO_Init+0x21a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a19      	ldr	r2, [pc, #100]	; (80081f8 <HAL_GPIO_Init+0x25c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00d      	beq.n	80081b2 <HAL_GPIO_Init+0x216>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a18      	ldr	r2, [pc, #96]	; (80081fc <HAL_GPIO_Init+0x260>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <HAL_GPIO_Init+0x212>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <HAL_GPIO_Init+0x264>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d101      	bne.n	80081aa <HAL_GPIO_Init+0x20e>
 80081a6:	2309      	movs	r3, #9
 80081a8:	e02d      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081aa:	230a      	movs	r3, #10
 80081ac:	e02b      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ae:	2308      	movs	r3, #8
 80081b0:	e029      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081b2:	2307      	movs	r3, #7
 80081b4:	e027      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081b6:	2306      	movs	r3, #6
 80081b8:	e025      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ba:	2305      	movs	r3, #5
 80081bc:	e023      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081be:	2304      	movs	r3, #4
 80081c0:	e021      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081c2:	2303      	movs	r3, #3
 80081c4:	e01f      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e01d      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e01b      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ce:	bf00      	nop
 80081d0:	58000080 	.word	0x58000080
 80081d4:	58024400 	.word	0x58024400
 80081d8:	58000400 	.word	0x58000400
 80081dc:	58020000 	.word	0x58020000
 80081e0:	58020400 	.word	0x58020400
 80081e4:	58020800 	.word	0x58020800
 80081e8:	58020c00 	.word	0x58020c00
 80081ec:	58021000 	.word	0x58021000
 80081f0:	58021400 	.word	0x58021400
 80081f4:	58021800 	.word	0x58021800
 80081f8:	58021c00 	.word	0x58021c00
 80081fc:	58022000 	.word	0x58022000
 8008200:	58022400 	.word	0x58022400
 8008204:	2300      	movs	r3, #0
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	f002 0203 	and.w	r2, r2, #3
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	4093      	lsls	r3, r2
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	4313      	orrs	r3, r2
 8008214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008216:	4938      	ldr	r1, [pc, #224]	; (80082f8 <HAL_GPIO_Init+0x35c>)
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	3302      	adds	r3, #2
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	43db      	mvns	r3, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4013      	ands	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800824a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	43db      	mvns	r3, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4013      	ands	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	43db      	mvns	r3, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f ae63 	bne.w	8007fb0 <HAL_GPIO_Init+0x14>
  }
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	3724      	adds	r7, #36	; 0x24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	58000400 	.word	0x58000400

080082fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	887b      	ldrh	r3, [r7, #2]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e001      	b.n	800831e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]
 8008338:	4613      	mov	r3, r2
 800833a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800833c:	787b      	ldrb	r3, [r7, #1]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008342:	887a      	ldrh	r2, [r7, #2]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008348:	e003      	b.n	8008352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	041a      	lsls	r2, r3, #16
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	619a      	str	r2, [r3, #24]
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e08b      	b.n	800848a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d106      	bne.n	800838c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fa f938 	bl	80025fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2224      	movs	r2, #36	; 0x24
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0201 	bic.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d107      	bne.n	80083da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	e006      	b.n	80083e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80083e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d108      	bne.n	8008402 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fe:	605a      	str	r2, [r3, #4]
 8008400:	e007      	b.n	8008412 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6859      	ldr	r1, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <HAL_I2C_Init+0x134>)
 800841e:	430b      	orrs	r3, r1
 8008420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691a      	ldr	r2, [r3, #16]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1a      	ldr	r2, [r3, #32]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	02008000 	.word	0x02008000

08008498 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d138      	bne.n	8008520 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e032      	b.n	8008522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2224      	movs	r2, #36	; 0x24
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0201 	orr.w	r2, r2, #1
 800850a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	e000      	b.n	8008522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008520:	2302      	movs	r3, #2
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b20      	cmp	r3, #32
 8008542:	d139      	bne.n	80085b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800854a:	2b01      	cmp	r3, #1
 800854c:	d101      	bne.n	8008552 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800854e:	2302      	movs	r3, #2
 8008550:	e033      	b.n	80085ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2224      	movs	r2, #36	; 0x24
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008580:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	e000      	b.n	80085ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085b8:	2302      	movs	r3, #2
  }
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
	...

080085c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <HAL_PWREx_ConfigSupply+0x70>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d00a      	beq.n	80085f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085dc:	4b16      	ldr	r3, [pc, #88]	; (8008638 <HAL_PWREx_ConfigSupply+0x70>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d001      	beq.n	80085ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e01f      	b.n	800862e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e01d      	b.n	800862e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <HAL_PWREx_ConfigSupply+0x70>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f023 0207 	bic.w	r2, r3, #7
 80085fa:	490f      	ldr	r1, [pc, #60]	; (8008638 <HAL_PWREx_ConfigSupply+0x70>)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008602:	f7fa fd67 	bl	80030d4 <HAL_GetTick>
 8008606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008608:	e009      	b.n	800861e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800860a:	f7fa fd63 	bl	80030d4 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008618:	d901      	bls.n	800861e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e007      	b.n	800862e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <HAL_PWREx_ConfigSupply+0x70>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862a:	d1ee      	bne.n	800860a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	58024800 	.word	0x58024800

0800863c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08c      	sub	sp, #48	; 0x30
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	f000 bc48 	b.w	8008ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 8088 	beq.w	800876e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800865e:	4b99      	ldr	r3, [pc, #612]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008668:	4b96      	ldr	r3, [pc, #600]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	2b10      	cmp	r3, #16
 8008672:	d007      	beq.n	8008684 <HAL_RCC_OscConfig+0x48>
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b18      	cmp	r3, #24
 8008678:	d111      	bne.n	800869e <HAL_RCC_OscConfig+0x62>
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d10c      	bne.n	800869e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008684:	4b8f      	ldr	r3, [pc, #572]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d06d      	beq.n	800876c <HAL_RCC_OscConfig+0x130>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d169      	bne.n	800876c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f000 bc21 	b.w	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a6:	d106      	bne.n	80086b6 <HAL_RCC_OscConfig+0x7a>
 80086a8:	4b86      	ldr	r3, [pc, #536]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a85      	ldr	r2, [pc, #532]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	e02e      	b.n	8008714 <HAL_RCC_OscConfig+0xd8>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10c      	bne.n	80086d8 <HAL_RCC_OscConfig+0x9c>
 80086be:	4b81      	ldr	r3, [pc, #516]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a80      	ldr	r2, [pc, #512]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4b7e      	ldr	r3, [pc, #504]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a7d      	ldr	r2, [pc, #500]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	e01d      	b.n	8008714 <HAL_RCC_OscConfig+0xd8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086e0:	d10c      	bne.n	80086fc <HAL_RCC_OscConfig+0xc0>
 80086e2:	4b78      	ldr	r3, [pc, #480]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a77      	ldr	r2, [pc, #476]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	4b75      	ldr	r3, [pc, #468]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a74      	ldr	r2, [pc, #464]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e00b      	b.n	8008714 <HAL_RCC_OscConfig+0xd8>
 80086fc:	4b71      	ldr	r3, [pc, #452]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a70      	ldr	r2, [pc, #448]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	4b6e      	ldr	r3, [pc, #440]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a6d      	ldr	r2, [pc, #436]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800870e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d013      	beq.n	8008744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871c:	f7fa fcda 	bl	80030d4 <HAL_GetTick>
 8008720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008724:	f7fa fcd6 	bl	80030d4 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b64      	cmp	r3, #100	; 0x64
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e3d4      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008736:	4b63      	ldr	r3, [pc, #396]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0xe8>
 8008742:	e014      	b.n	800876e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fa fcc6 	bl	80030d4 <HAL_GetTick>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800874c:	f7fa fcc2 	bl	80030d4 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b64      	cmp	r3, #100	; 0x64
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e3c0      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800875e:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x110>
 800876a:	e000      	b.n	800876e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80ca 	beq.w	8008910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877c:	4b51      	ldr	r3, [pc, #324]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008786:	4b4f      	ldr	r3, [pc, #316]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <HAL_RCC_OscConfig+0x166>
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2b18      	cmp	r3, #24
 8008796:	d156      	bne.n	8008846 <HAL_RCC_OscConfig+0x20a>
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d151      	bne.n	8008846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087a2:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <HAL_RCC_OscConfig+0x17e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e392      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087ba:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f023 0219 	bic.w	r2, r3, #25
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	493f      	ldr	r1, [pc, #252]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087cc:	f7fa fc82 	bl	80030d4 <HAL_GetTick>
 80087d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087d4:	f7fa fc7e 	bl	80030d4 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e37c      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f2:	f7fa fc7b 	bl	80030ec <HAL_GetREVID>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d817      	bhi.n	8008830 <HAL_RCC_OscConfig+0x1f4>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d108      	bne.n	800881a <HAL_RCC_OscConfig+0x1de>
 8008808:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008810:	4a2c      	ldr	r2, [pc, #176]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008818:	e07a      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881a:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	031b      	lsls	r3, r3, #12
 8008828:	4926      	ldr	r1, [pc, #152]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800882a:	4313      	orrs	r3, r2
 800882c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800882e:	e06f      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	061b      	lsls	r3, r3, #24
 800883e:	4921      	ldr	r1, [pc, #132]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008840:	4313      	orrs	r3, r2
 8008842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008844:	e064      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d047      	beq.n	80088de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800884e:	4b1d      	ldr	r3, [pc, #116]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f023 0219 	bic.w	r2, r3, #25
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	491a      	ldr	r1, [pc, #104]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800885c:	4313      	orrs	r3, r2
 800885e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7fa fc38 	bl	80030d4 <HAL_GetTick>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008868:	f7fa fc34 	bl	80030d4 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e332      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008886:	f7fa fc31 	bl	80030ec <HAL_GetREVID>
 800888a:	4603      	mov	r3, r0
 800888c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008890:	4293      	cmp	r3, r2
 8008892:	d819      	bhi.n	80088c8 <HAL_RCC_OscConfig+0x28c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d108      	bne.n	80088ae <HAL_RCC_OscConfig+0x272>
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088a4:	4a07      	ldr	r2, [pc, #28]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088aa:	6053      	str	r3, [r2, #4]
 80088ac:	e030      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
 80088ae:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	031b      	lsls	r3, r3, #12
 80088bc:	4901      	ldr	r1, [pc, #4]	; (80088c4 <HAL_RCC_OscConfig+0x288>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	604b      	str	r3, [r1, #4]
 80088c2:	e025      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
 80088c4:	58024400 	.word	0x58024400
 80088c8:	4b9a      	ldr	r3, [pc, #616]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	061b      	lsls	r3, r3, #24
 80088d6:	4997      	ldr	r1, [pc, #604]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	604b      	str	r3, [r1, #4]
 80088dc:	e018      	b.n	8008910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088de:	4b95      	ldr	r3, [pc, #596]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a94      	ldr	r2, [pc, #592]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ea:	f7fa fbf3 	bl	80030d4 <HAL_GetTick>
 80088ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088f0:	e008      	b.n	8008904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f2:	f7fa fbef 	bl	80030d4 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e2ed      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008904:	4b8b      	ldr	r3, [pc, #556]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1f0      	bne.n	80088f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 80a9 	beq.w	8008a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800891e:	4b85      	ldr	r3, [pc, #532]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008928:	4b82      	ldr	r3, [pc, #520]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d007      	beq.n	8008944 <HAL_RCC_OscConfig+0x308>
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	2b18      	cmp	r3, #24
 8008938:	d13a      	bne.n	80089b0 <HAL_RCC_OscConfig+0x374>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d135      	bne.n	80089b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008944:	4b7b      	ldr	r3, [pc, #492]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_RCC_OscConfig+0x320>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	2b80      	cmp	r3, #128	; 0x80
 8008956:	d001      	beq.n	800895c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e2c1      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800895c:	f7fa fbc6 	bl	80030ec <HAL_GetREVID>
 8008960:	4603      	mov	r3, r0
 8008962:	f241 0203 	movw	r2, #4099	; 0x1003
 8008966:	4293      	cmp	r3, r2
 8008968:	d817      	bhi.n	800899a <HAL_RCC_OscConfig+0x35e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	2b20      	cmp	r3, #32
 8008970:	d108      	bne.n	8008984 <HAL_RCC_OscConfig+0x348>
 8008972:	4b70      	ldr	r3, [pc, #448]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800897a:	4a6e      	ldr	r2, [pc, #440]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 800897c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008982:	e075      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008984:	4b6b      	ldr	r3, [pc, #428]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	069b      	lsls	r3, r3, #26
 8008992:	4968      	ldr	r1, [pc, #416]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008994:	4313      	orrs	r3, r2
 8008996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008998:	e06a      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800899a:	4b66      	ldr	r3, [pc, #408]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	061b      	lsls	r3, r3, #24
 80089a8:	4962      	ldr	r1, [pc, #392]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ae:	e05f      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d042      	beq.n	8008a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089b8:	4b5e      	ldr	r3, [pc, #376]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a5d      	ldr	r2, [pc, #372]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80089be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c4:	f7fa fb86 	bl	80030d4 <HAL_GetTick>
 80089c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089cc:	f7fa fb82 	bl	80030d4 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e280      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089de:	4b55      	ldr	r3, [pc, #340]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089ea:	f7fa fb7f 	bl	80030ec <HAL_GetREVID>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d817      	bhi.n	8008a28 <HAL_RCC_OscConfig+0x3ec>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d108      	bne.n	8008a12 <HAL_RCC_OscConfig+0x3d6>
 8008a00:	4b4c      	ldr	r3, [pc, #304]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a08:	4a4a      	ldr	r2, [pc, #296]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0e:	6053      	str	r3, [r2, #4]
 8008a10:	e02e      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
 8008a12:	4b48      	ldr	r3, [pc, #288]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	069b      	lsls	r3, r3, #26
 8008a20:	4944      	ldr	r1, [pc, #272]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	604b      	str	r3, [r1, #4]
 8008a26:	e023      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
 8008a28:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	061b      	lsls	r3, r3, #24
 8008a36:	493f      	ldr	r1, [pc, #252]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60cb      	str	r3, [r1, #12]
 8008a3c:	e018      	b.n	8008a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a3e:	4b3d      	ldr	r3, [pc, #244]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a3c      	ldr	r2, [pc, #240]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fa fb43 	bl	80030d4 <HAL_GetTick>
 8008a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a52:	f7fa fb3f 	bl	80030d4 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e23d      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a64:	4b33      	ldr	r3, [pc, #204]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f0      	bne.n	8008a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d036      	beq.n	8008aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d019      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a84:	4b2b      	ldr	r3, [pc, #172]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a88:	4a2a      	ldr	r2, [pc, #168]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a90:	f7fa fb20 	bl	80030d4 <HAL_GetTick>
 8008a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a98:	f7fa fb1c 	bl	80030d4 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e21a      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008aaa:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f0      	beq.n	8008a98 <HAL_RCC_OscConfig+0x45c>
 8008ab6:	e018      	b.n	8008aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac4:	f7fa fb06 	bl	80030d4 <HAL_GetTick>
 8008ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008acc:	f7fa fb02 	bl	80030d4 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e200      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f0      	bne.n	8008acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d039      	beq.n	8008b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01c      	beq.n	8008b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b0a:	f7fa fae3 	bl	80030d4 <HAL_GetTick>
 8008b0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b12:	f7fa fadf 	bl	80030d4 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e1dd      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <HAL_RCC_OscConfig+0x4f8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <HAL_RCC_OscConfig+0x4d6>
 8008b30:	e01b      	b.n	8008b6a <HAL_RCC_OscConfig+0x52e>
 8008b32:	bf00      	nop
 8008b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b38:	4b9b      	ldr	r3, [pc, #620]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a9a      	ldr	r2, [pc, #616]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b44:	f7fa fac6 	bl	80030d4 <HAL_GetTick>
 8008b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b4c:	f7fa fac2 	bl	80030d4 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e1c0      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b5e:	4b92      	ldr	r3, [pc, #584]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 8081 	beq.w	8008c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b78:	4b8c      	ldr	r3, [pc, #560]	; (8008dac <HAL_RCC_OscConfig+0x770>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a8b      	ldr	r2, [pc, #556]	; (8008dac <HAL_RCC_OscConfig+0x770>)
 8008b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b84:	f7fa faa6 	bl	80030d4 <HAL_GetTick>
 8008b88:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8c:	f7fa faa2 	bl	80030d4 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b64      	cmp	r3, #100	; 0x64
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e1a0      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b9e:	4b83      	ldr	r3, [pc, #524]	; (8008dac <HAL_RCC_OscConfig+0x770>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x584>
 8008bb2:	4b7d      	ldr	r3, [pc, #500]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	4a7c      	ldr	r2, [pc, #496]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bb8:	f043 0301 	orr.w	r3, r3, #1
 8008bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbe:	e02d      	b.n	8008c1c <HAL_RCC_OscConfig+0x5e0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10c      	bne.n	8008be2 <HAL_RCC_OscConfig+0x5a6>
 8008bc8:	4b77      	ldr	r3, [pc, #476]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	4a76      	ldr	r2, [pc, #472]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd4:	4b74      	ldr	r3, [pc, #464]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd8:	4a73      	ldr	r2, [pc, #460]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bda:	f023 0304 	bic.w	r3, r3, #4
 8008bde:	6713      	str	r3, [r2, #112]	; 0x70
 8008be0:	e01c      	b.n	8008c1c <HAL_RCC_OscConfig+0x5e0>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	d10c      	bne.n	8008c04 <HAL_RCC_OscConfig+0x5c8>
 8008bea:	4b6f      	ldr	r3, [pc, #444]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	4a6e      	ldr	r2, [pc, #440]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bf0:	f043 0304 	orr.w	r3, r3, #4
 8008bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf6:	4b6c      	ldr	r3, [pc, #432]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfa:	4a6b      	ldr	r2, [pc, #428]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	6713      	str	r3, [r2, #112]	; 0x70
 8008c02:	e00b      	b.n	8008c1c <HAL_RCC_OscConfig+0x5e0>
 8008c04:	4b68      	ldr	r3, [pc, #416]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	4a67      	ldr	r2, [pc, #412]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c0a:	f023 0301 	bic.w	r3, r3, #1
 8008c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c10:	4b65      	ldr	r3, [pc, #404]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c14:	4a64      	ldr	r2, [pc, #400]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c16:	f023 0304 	bic.w	r3, r3, #4
 8008c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d015      	beq.n	8008c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c24:	f7fa fa56 	bl	80030d4 <HAL_GetTick>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c2a:	e00a      	b.n	8008c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2c:	f7fa fa52 	bl	80030d4 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e14e      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c42:	4b59      	ldr	r3, [pc, #356]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0ee      	beq.n	8008c2c <HAL_RCC_OscConfig+0x5f0>
 8008c4e:	e014      	b.n	8008c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c50:	f7fa fa40 	bl	80030d4 <HAL_GetTick>
 8008c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c56:	e00a      	b.n	8008c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c58:	f7fa fa3c 	bl	80030d4 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e138      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c6e:	4b4e      	ldr	r3, [pc, #312]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1ee      	bne.n	8008c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 812d 	beq.w	8008ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c84:	4b48      	ldr	r3, [pc, #288]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c8c:	2b18      	cmp	r3, #24
 8008c8e:	f000 80bd 	beq.w	8008e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	f040 809e 	bne.w	8008dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c9c:	4b42      	ldr	r3, [pc, #264]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a41      	ldr	r2, [pc, #260]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca8:	f7fa fa14 	bl	80030d4 <HAL_GetTick>
 8008cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb0:	f7fa fa10 	bl	80030d4 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e10e      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cc2:	4b39      	ldr	r3, [pc, #228]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f0      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cce:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cd2:	4b37      	ldr	r3, [pc, #220]	; (8008db0 <HAL_RCC_OscConfig+0x774>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008cde:	0112      	lsls	r2, r2, #4
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	4931      	ldr	r1, [pc, #196]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	628b      	str	r3, [r1, #40]	; 0x28
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	3b01      	subs	r3, #1
 8008cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	025b      	lsls	r3, r3, #9
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	3b01      	subs	r3, #1
 8008d04:	041b      	lsls	r3, r3, #16
 8008d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d10:	3b01      	subs	r3, #1
 8008d12:	061b      	lsls	r3, r3, #24
 8008d14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d18:	4923      	ldr	r1, [pc, #140]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d1e:	4b22      	ldr	r3, [pc, #136]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	4a21      	ldr	r2, [pc, #132]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d2a:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d2e:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <HAL_RCC_OscConfig+0x778>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d36:	00d2      	lsls	r2, r2, #3
 8008d38:	491b      	ldr	r1, [pc, #108]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	f023 020c 	bic.w	r2, r3, #12
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	4917      	ldr	r1, [pc, #92]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d50:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	f023 0202 	bic.w	r2, r3, #2
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5c:	4912      	ldr	r1, [pc, #72]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d62:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	4a10      	ldr	r2, [pc, #64]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d6e:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	4a0d      	ldr	r2, [pc, #52]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d86:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	4a07      	ldr	r2, [pc, #28]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d8c:	f043 0301 	orr.w	r3, r3, #1
 8008d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <HAL_RCC_OscConfig+0x76c>)
 8008d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9e:	f7fa f999 	bl	80030d4 <HAL_GetTick>
 8008da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008da4:	e011      	b.n	8008dca <HAL_RCC_OscConfig+0x78e>
 8008da6:	bf00      	nop
 8008da8:	58024400 	.word	0x58024400
 8008dac:	58024800 	.word	0x58024800
 8008db0:	fffffc0c 	.word	0xfffffc0c
 8008db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db8:	f7fa f98c 	bl	80030d4 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e08a      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dca:	4b47      	ldr	r3, [pc, #284]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0x77c>
 8008dd6:	e082      	b.n	8008ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd8:	4b43      	ldr	r3, [pc, #268]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a42      	ldr	r2, [pc, #264]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de4:	f7fa f976 	bl	80030d4 <HAL_GetTick>
 8008de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dea:	e008      	b.n	8008dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dec:	f7fa f972 	bl	80030d4 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d901      	bls.n	8008dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e070      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dfe:	4b3a      	ldr	r3, [pc, #232]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f0      	bne.n	8008dec <HAL_RCC_OscConfig+0x7b0>
 8008e0a:	e068      	b.n	8008ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e0c:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e12:	4b35      	ldr	r3, [pc, #212]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d031      	beq.n	8008e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f003 0203 	and.w	r2, r3, #3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d12a      	bne.n	8008e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	091b      	lsrs	r3, r3, #4
 8008e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d122      	bne.n	8008e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d11a      	bne.n	8008e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	0a5b      	lsrs	r3, r3, #9
 8008e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d111      	bne.n	8008e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d108      	bne.n	8008e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	0e1b      	lsrs	r3, r3, #24
 8008e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d001      	beq.n	8008e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e02b      	b.n	8008ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8c:	08db      	lsrs	r3, r3, #3
 8008e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d01f      	beq.n	8008ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	4a11      	ldr	r2, [pc, #68]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008eaa:	f7fa f913 	bl	80030d4 <HAL_GetTick>
 8008eae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008eb0:	bf00      	nop
 8008eb2:	f7fa f90f 	bl	80030d4 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d0f9      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec2:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <HAL_RCC_OscConfig+0x8b0>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008eca:	00d2      	lsls	r2, r2, #3
 8008ecc:	4906      	ldr	r1, [pc, #24]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	4a04      	ldr	r2, [pc, #16]	; (8008ee8 <HAL_RCC_OscConfig+0x8ac>)
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3730      	adds	r7, #48	; 0x30
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	ffff0007 	.word	0xffff0007

08008ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e19c      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f04:	4b8a      	ldr	r3, [pc, #552]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d910      	bls.n	8008f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f12:	4b87      	ldr	r3, [pc, #540]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f023 020f 	bic.w	r2, r3, #15
 8008f1a:	4985      	ldr	r1, [pc, #532]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f22:	4b83      	ldr	r3, [pc, #524]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d001      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e184      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d010      	beq.n	8008f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	4b7b      	ldr	r3, [pc, #492]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d908      	bls.n	8008f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f50:	4b78      	ldr	r3, [pc, #480]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	4975      	ldr	r1, [pc, #468]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d010      	beq.n	8008f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695a      	ldr	r2, [r3, #20]
 8008f72:	4b70      	ldr	r3, [pc, #448]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d908      	bls.n	8008f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f7e:	4b6d      	ldr	r3, [pc, #436]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	496a      	ldr	r1, [pc, #424]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d010      	beq.n	8008fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699a      	ldr	r2, [r3, #24]
 8008fa0:	4b64      	ldr	r3, [pc, #400]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d908      	bls.n	8008fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fac:	4b61      	ldr	r3, [pc, #388]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	495e      	ldr	r1, [pc, #376]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d010      	beq.n	8008fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69da      	ldr	r2, [r3, #28]
 8008fce:	4b59      	ldr	r3, [pc, #356]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d908      	bls.n	8008fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fda:	4b56      	ldr	r3, [pc, #344]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	4953      	ldr	r1, [pc, #332]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d010      	beq.n	800901a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	4b4d      	ldr	r3, [pc, #308]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	429a      	cmp	r2, r3
 8009006:	d908      	bls.n	800901a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009008:	4b4a      	ldr	r3, [pc, #296]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f023 020f 	bic.w	r2, r3, #15
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	4947      	ldr	r1, [pc, #284]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009016:	4313      	orrs	r3, r2
 8009018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d055      	beq.n	80090d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009026:	4b43      	ldr	r3, [pc, #268]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4940      	ldr	r1, [pc, #256]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009034:	4313      	orrs	r3, r2
 8009036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d107      	bne.n	8009050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009040:	4b3c      	ldr	r3, [pc, #240]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d121      	bne.n	8009090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e0f6      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d107      	bne.n	8009068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009058:	4b36      	ldr	r3, [pc, #216]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d115      	bne.n	8009090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0ea      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009070:	4b30      	ldr	r3, [pc, #192]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e0de      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009080:	4b2c      	ldr	r3, [pc, #176]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0d6      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	f023 0207 	bic.w	r2, r3, #7
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4925      	ldr	r1, [pc, #148]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090a2:	f7fa f817 	bl	80030d4 <HAL_GetTick>
 80090a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090a8:	e00a      	b.n	80090c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090aa:	f7fa f813 	bl	80030d4 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e0be      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c0:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d1eb      	bne.n	80090aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d208      	bcs.n	8009100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ee:	4b11      	ldr	r3, [pc, #68]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f023 020f 	bic.w	r2, r3, #15
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	490e      	ldr	r1, [pc, #56]	; (8009134 <HAL_RCC_ClockConfig+0x244>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009100:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d214      	bcs.n	8009138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f023 020f 	bic.w	r2, r3, #15
 8009116:	4906      	ldr	r1, [pc, #24]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	4313      	orrs	r3, r2
 800911c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	4b04      	ldr	r3, [pc, #16]	; (8009130 <HAL_RCC_ClockConfig+0x240>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d005      	beq.n	8009138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e086      	b.n	800923e <HAL_RCC_ClockConfig+0x34e>
 8009130:	52002000 	.word	0x52002000
 8009134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d010      	beq.n	8009166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	4b3f      	ldr	r3, [pc, #252]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009150:	429a      	cmp	r2, r3
 8009152:	d208      	bcs.n	8009166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009154:	4b3c      	ldr	r3, [pc, #240]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	4939      	ldr	r1, [pc, #228]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009162:	4313      	orrs	r3, r2
 8009164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d010      	beq.n	8009194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695a      	ldr	r2, [r3, #20]
 8009176:	4b34      	ldr	r3, [pc, #208]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800917e:	429a      	cmp	r2, r3
 8009180:	d208      	bcs.n	8009194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009182:	4b31      	ldr	r3, [pc, #196]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	492e      	ldr	r1, [pc, #184]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009190:	4313      	orrs	r3, r2
 8009192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d010      	beq.n	80091c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699a      	ldr	r2, [r3, #24]
 80091a4:	4b28      	ldr	r3, [pc, #160]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d208      	bcs.n	80091c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	4922      	ldr	r1, [pc, #136]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0320 	and.w	r3, r3, #32
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d010      	beq.n	80091f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69da      	ldr	r2, [r3, #28]
 80091d2:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091da:	429a      	cmp	r2, r3
 80091dc:	d208      	bcs.n	80091f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091de:	4b1a      	ldr	r3, [pc, #104]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	4917      	ldr	r1, [pc, #92]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091f0:	f000 f834 	bl	800925c <HAL_RCC_GetSysClockFreq>
 80091f4:	4602      	mov	r2, r0
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	4912      	ldr	r1, [pc, #72]	; (800924c <HAL_RCC_ClockConfig+0x35c>)
 8009202:	5ccb      	ldrb	r3, [r1, r3]
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
 800920c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800920e:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <HAL_RCC_ClockConfig+0x358>)
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	4a0d      	ldr	r2, [pc, #52]	; (800924c <HAL_RCC_ClockConfig+0x35c>)
 8009218:	5cd3      	ldrb	r3, [r2, r3]
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
 8009224:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <HAL_RCC_ClockConfig+0x360>)
 8009226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009228:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <HAL_RCC_ClockConfig+0x364>)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <HAL_RCC_ClockConfig+0x368>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f7f9 fc86 	bl	8002b44 <HAL_InitTick>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400
 800924c:	08015624 	.word	0x08015624
 8009250:	2400008c 	.word	0x2400008c
 8009254:	24000088 	.word	0x24000088
 8009258:	24000090 	.word	0x24000090

0800925c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009262:	4bb3      	ldr	r3, [pc, #716]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800926a:	2b18      	cmp	r3, #24
 800926c:	f200 8155 	bhi.w	800951a <HAL_RCC_GetSysClockFreq+0x2be>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092dd 	.word	0x080092dd
 800927c:	0800951b 	.word	0x0800951b
 8009280:	0800951b 	.word	0x0800951b
 8009284:	0800951b 	.word	0x0800951b
 8009288:	0800951b 	.word	0x0800951b
 800928c:	0800951b 	.word	0x0800951b
 8009290:	0800951b 	.word	0x0800951b
 8009294:	0800951b 	.word	0x0800951b
 8009298:	08009303 	.word	0x08009303
 800929c:	0800951b 	.word	0x0800951b
 80092a0:	0800951b 	.word	0x0800951b
 80092a4:	0800951b 	.word	0x0800951b
 80092a8:	0800951b 	.word	0x0800951b
 80092ac:	0800951b 	.word	0x0800951b
 80092b0:	0800951b 	.word	0x0800951b
 80092b4:	0800951b 	.word	0x0800951b
 80092b8:	08009309 	.word	0x08009309
 80092bc:	0800951b 	.word	0x0800951b
 80092c0:	0800951b 	.word	0x0800951b
 80092c4:	0800951b 	.word	0x0800951b
 80092c8:	0800951b 	.word	0x0800951b
 80092cc:	0800951b 	.word	0x0800951b
 80092d0:	0800951b 	.word	0x0800951b
 80092d4:	0800951b 	.word	0x0800951b
 80092d8:	0800930f 	.word	0x0800930f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092dc:	4b94      	ldr	r3, [pc, #592]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d009      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e8:	4b91      	ldr	r3, [pc, #580]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	08db      	lsrs	r3, r3, #3
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	4a90      	ldr	r2, [pc, #576]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80092fa:	e111      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092fc:	4b8d      	ldr	r3, [pc, #564]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092fe:	61bb      	str	r3, [r7, #24]
      break;
 8009300:	e10e      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009302:	4b8d      	ldr	r3, [pc, #564]	; (8009538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009304:	61bb      	str	r3, [r7, #24]
      break;
 8009306:	e10b      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009308:	4b8c      	ldr	r3, [pc, #560]	; (800953c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800930a:	61bb      	str	r3, [r7, #24]
      break;
 800930c:	e108      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800930e:	4b88      	ldr	r3, [pc, #544]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009318:	4b85      	ldr	r3, [pc, #532]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	091b      	lsrs	r3, r3, #4
 800931e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009324:	4b82      	ldr	r3, [pc, #520]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800932e:	4b80      	ldr	r3, [pc, #512]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	08db      	lsrs	r3, r3, #3
 8009334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	fb02 f303 	mul.w	r3, r2, r3
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80e1 	beq.w	8009514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b02      	cmp	r3, #2
 8009356:	f000 8083 	beq.w	8009460 <HAL_RCC_GetSysClockFreq+0x204>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b02      	cmp	r3, #2
 800935e:	f200 80a1 	bhi.w	80094a4 <HAL_RCC_GetSysClockFreq+0x248>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0x114>
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d056      	beq.n	800941c <HAL_RCC_GetSysClockFreq+0x1c0>
 800936e:	e099      	b.n	80094a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009370:	4b6f      	ldr	r3, [pc, #444]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d02d      	beq.n	80093d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800937c:	4b6c      	ldr	r3, [pc, #432]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	08db      	lsrs	r3, r3, #3
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	4a6b      	ldr	r2, [pc, #428]	; (8009534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a6:	4b62      	ldr	r3, [pc, #392]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093d6:	e087      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ea:	4b51      	ldr	r3, [pc, #324]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80093fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800941a:	e065      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009426:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800942a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942e:	4b40      	ldr	r3, [pc, #256]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009442:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800945e:	e043      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800954c <HAL_RCC_GetSysClockFreq+0x2f0>
 800946e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009482:	ed97 6a02 	vldr	s12, [r7, #8]
 8009486:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800948a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094a2:	e021      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b6:	4b1e      	ldr	r3, [pc, #120]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094e8:	4b11      	ldr	r3, [pc, #68]	; (8009530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	0a5b      	lsrs	r3, r3, #9
 80094ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f2:	3301      	adds	r3, #1
 80094f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009500:	edd7 6a07 	vldr	s13, [r7, #28]
 8009504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950c:	ee17 3a90 	vmov	r3, s15
 8009510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009512:	e005      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	61bb      	str	r3, [r7, #24]
      break;
 8009518:	e002      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800951a:	4b07      	ldr	r3, [pc, #28]	; (8009538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800951c:	61bb      	str	r3, [r7, #24]
      break;
 800951e:	bf00      	nop
  }

  return sysclockfreq;
 8009520:	69bb      	ldr	r3, [r7, #24]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3724      	adds	r7, #36	; 0x24
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	58024400 	.word	0x58024400
 8009534:	03d09000 	.word	0x03d09000
 8009538:	003d0900 	.word	0x003d0900
 800953c:	017d7840 	.word	0x017d7840
 8009540:	46000000 	.word	0x46000000
 8009544:	4c742400 	.word	0x4c742400
 8009548:	4a742400 	.word	0x4a742400
 800954c:	4bbebc20 	.word	0x4bbebc20

08009550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009556:	f7ff fe81 	bl	800925c <HAL_RCC_GetSysClockFreq>
 800955a:	4602      	mov	r2, r0
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	0a1b      	lsrs	r3, r3, #8
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	490f      	ldr	r1, [pc, #60]	; (80095a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009568:	5ccb      	ldrb	r3, [r1, r3]
 800956a:	f003 031f 	and.w	r3, r3, #31
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009574:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	4a09      	ldr	r2, [pc, #36]	; (80095a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800957e:	5cd3      	ldrb	r3, [r2, r3]
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	fa22 f303 	lsr.w	r3, r2, r3
 800958a:	4a07      	ldr	r2, [pc, #28]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800958c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800958e:	4a07      	ldr	r2, [pc, #28]	; (80095ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009594:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009596:	681b      	ldr	r3, [r3, #0]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	58024400 	.word	0x58024400
 80095a4:	08015624 	.word	0x08015624
 80095a8:	2400008c 	.word	0x2400008c
 80095ac:	24000088 	.word	0x24000088

080095b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095b4:	f7ff ffcc 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	4904      	ldr	r1, [pc, #16]	; (80095d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095c6:	5ccb      	ldrb	r3, [r1, r3]
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	58024400 	.word	0x58024400
 80095d8:	08015624 	.word	0x08015624

080095dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095e0:	f7ff ffb6 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 80095e4:	4602      	mov	r2, r0
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	4904      	ldr	r1, [pc, #16]	; (8009604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80095f2:	5ccb      	ldrb	r3, [r1, r3]
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	58024400 	.word	0x58024400
 8009604:	08015624 	.word	0x08015624

08009608 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	223f      	movs	r2, #63	; 0x3f
 8009616:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	f003 0207 	and.w	r2, r3, #7
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009624:	4b17      	ldr	r3, [pc, #92]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009630:	4b14      	ldr	r3, [pc, #80]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800963c:	4b11      	ldr	r3, [pc, #68]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009654:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009660:	4b08      	ldr	r3, [pc, #32]	; (8009684 <HAL_RCC_GetClockConfig+0x7c>)
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <HAL_RCC_GetClockConfig+0x80>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 020f 	and.w	r2, r3, #15
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	601a      	str	r2, [r3, #0]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	58024400 	.word	0x58024400
 8009688:	52002000 	.word	0x52002000

0800968c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800968c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009690:	b0ca      	sub	sp, #296	; 0x128
 8009692:	af00      	add	r7, sp, #0
 8009694:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80096b0:	2500      	movs	r5, #0
 80096b2:	ea54 0305 	orrs.w	r3, r4, r5
 80096b6:	d049      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c2:	d02f      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80096c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c8:	d828      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80096ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ce:	d01a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80096d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096d4:	d822      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80096da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096de:	d007      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096e0:	e01c      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e2:	4bb8      	ldr	r3, [pc, #736]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	4ab7      	ldr	r2, [pc, #732]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096ee:	e01a      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	3308      	adds	r3, #8
 80096f6:	2102      	movs	r1, #2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f002 fb61 	bl	800bdc0 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009704:	e00f      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	3328      	adds	r3, #40	; 0x28
 800970c:	2102      	movs	r1, #2
 800970e:	4618      	mov	r0, r3
 8009710:	f002 fc08 	bl	800bf24 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800972e:	4ba5      	ldr	r3, [pc, #660]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009732:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800973c:	4aa1      	ldr	r2, [pc, #644]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800973e:	430b      	orrs	r3, r1
 8009740:	6513      	str	r3, [r2, #80]	; 0x50
 8009742:	e003      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009758:	f04f 0900 	mov.w	r9, #0
 800975c:	ea58 0309 	orrs.w	r3, r8, r9
 8009760:	d047      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	2b04      	cmp	r3, #4
 800976a:	d82a      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800976c:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	08009789 	.word	0x08009789
 8009778:	08009797 	.word	0x08009797
 800977c:	080097ad 	.word	0x080097ad
 8009780:	080097cb 	.word	0x080097cb
 8009784:	080097cb 	.word	0x080097cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009788:	4b8e      	ldr	r3, [pc, #568]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a8d      	ldr	r2, [pc, #564]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800978e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009794:	e01a      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979a:	3308      	adds	r3, #8
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 fb0e 	bl	800bdc0 <RCCEx_PLL2_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097aa:	e00f      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b0:	3328      	adds	r3, #40	; 0x28
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f002 fbb5 	bl	800bf24 <RCCEx_PLL3_Config>
 80097ba:	4603      	mov	r3, r0
 80097bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097c8:	e000      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80097ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097d4:	4b7b      	ldr	r3, [pc, #492]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d8:	f023 0107 	bic.w	r1, r3, #7
 80097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	4a78      	ldr	r2, [pc, #480]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6513      	str	r3, [r2, #80]	; 0x50
 80097e8:	e003      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80097fe:	f04f 0b00 	mov.w	fp, #0
 8009802:	ea5a 030b 	orrs.w	r3, sl, fp
 8009806:	d04c      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800980e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009812:	d030      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009818:	d829      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800981a:	2bc0      	cmp	r3, #192	; 0xc0
 800981c:	d02d      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800981e:	2bc0      	cmp	r3, #192	; 0xc0
 8009820:	d825      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d018      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d821      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d007      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009832:	e01c      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009834:	4b63      	ldr	r3, [pc, #396]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a62      	ldr	r2, [pc, #392]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800983a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800983e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009840:	e01c      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009846:	3308      	adds	r3, #8
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f002 fab8 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009856:	e011      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	3328      	adds	r3, #40	; 0x28
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f002 fb5f 	bl	800bf24 <RCCEx_PLL3_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800986c:	e006      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009874:	e002      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009876:	bf00      	nop
 8009878:	e000      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800987a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009884:	4b4f      	ldr	r3, [pc, #316]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009892:	4a4c      	ldr	r2, [pc, #304]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009894:	430b      	orrs	r3, r1
 8009896:	6513      	str	r3, [r2, #80]	; 0x50
 8009898:	e003      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800989e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80098ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80098b2:	2300      	movs	r3, #0
 80098b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80098b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d053      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098ce:	d035      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80098d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098d4:	d82e      	bhi.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098da:	d031      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80098dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098e0:	d828      	bhi.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098e6:	d01a      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80098e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ec:	d822      	bhi.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80098f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098f6:	d007      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80098f8:	e01c      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fa:	4b32      	ldr	r3, [pc, #200]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	4a31      	ldr	r2, [pc, #196]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009906:	e01c      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990c:	3308      	adds	r3, #8
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f002 fa55 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800991c:	e011      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009922:	3328      	adds	r3, #40	; 0x28
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f002 fafc 	bl	800bf24 <RCCEx_PLL3_Config>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009932:	e006      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800993a:	e002      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800993c:	bf00      	nop
 800993e:	e000      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10b      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800994a:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800995a:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800995c:	430b      	orrs	r3, r1
 800995e:	6593      	str	r3, [r2, #88]	; 0x58
 8009960:	e003      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009976:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800997a:	2300      	movs	r3, #0
 800997c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009980:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009984:	460b      	mov	r3, r1
 8009986:	4313      	orrs	r3, r2
 8009988:	d056      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009996:	d038      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800999c:	d831      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800999e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099a2:	d034      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80099a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099a8:	d82b      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ae:	d01d      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80099b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b4:	d825      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d006      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80099ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099be:	d00a      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80099c0:	e01f      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099c2:	bf00      	nop
 80099c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c8:	4ba2      	ldr	r3, [pc, #648]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	4aa1      	ldr	r2, [pc, #644]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d4:	e01c      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099da:	3308      	adds	r3, #8
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f002 f9ee 	bl	800bdc0 <RCCEx_PLL2_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099ea:	e011      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f0:	3328      	adds	r3, #40	; 0x28
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f002 fa95 	bl	800bf24 <RCCEx_PLL3_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a00:	e006      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a08:	e002      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a0a:	bf00      	nop
 8009a0c:	e000      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a18:	4b8e      	ldr	r3, [pc, #568]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a28:	4a8a      	ldr	r2, [pc, #552]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d03a      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	2b30      	cmp	r3, #48	; 0x30
 8009a60:	d01f      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009a62:	2b30      	cmp	r3, #48	; 0x30
 8009a64:	d819      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d00c      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d815      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d019      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d111      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a76:	4b77      	ldr	r3, [pc, #476]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	4a76      	ldr	r2, [pc, #472]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a82:	e011      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a88:	3308      	adds	r3, #8
 8009a8a:	2102      	movs	r1, #2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 f997 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa0:	e002      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ab0:	4b68      	ldr	r3, [pc, #416]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009abe:	4a65      	ldr	r2, [pc, #404]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ac4:	e003      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009ada:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ae4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d051      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009af8:	d035      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009afe:	d82e      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b04:	d031      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b0a:	d828      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b10:	d01a      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d822      	bhi.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b20:	d007      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b22:	e01c      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b24:	4b4b      	ldr	r3, [pc, #300]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	4a4a      	ldr	r2, [pc, #296]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b30:	e01c      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	3308      	adds	r3, #8
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 f940 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b46:	e011      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4c:	3328      	adds	r3, #40	; 0x28
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f002 f9e7 	bl	800bf24 <RCCEx_PLL3_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b5c:	e006      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b64:	e002      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b66:	bf00      	nop
 8009b68:	e000      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b74:	4b37      	ldr	r3, [pc, #220]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b82:	4a34      	ldr	r2, [pc, #208]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6513      	str	r3, [r2, #80]	; 0x50
 8009b88:	e003      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ba8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009bac:	460b      	mov	r3, r1
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	d056      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bbc:	d033      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009bbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bc2:	d82c      	bhi.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bc8:	d02f      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009bca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bce:	d826      	bhi.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bd4:	d02b      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bda:	d820      	bhi.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be0:	d012      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be6:	d81a      	bhi.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d022      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf0:	d115      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf6:	3308      	adds	r3, #8
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f002 f8e0 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c06:	e015      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0c:	3328      	adds	r3, #40	; 0x28
 8009c0e:	2101      	movs	r1, #1
 8009c10:	4618      	mov	r0, r3
 8009c12:	f002 f987 	bl	800bf24 <RCCEx_PLL3_Config>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c1c:	e00a      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c24:	e006      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c26:	bf00      	nop
 8009c28:	e004      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c2a:	bf00      	nop
 8009c2c:	e002      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c2e:	bf00      	nop
 8009c30:	e000      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10d      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c3c:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c4a:	4a02      	ldr	r2, [pc, #8]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6513      	str	r3, [r2, #80]	; 0x50
 8009c50:	e006      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c52:	bf00      	nop
 8009c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c70:	2300      	movs	r3, #0
 8009c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	d055      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c8c:	d033      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c92:	d82c      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c98:	d02f      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9e:	d826      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ca4:	d02b      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009ca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009caa:	d820      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb0:	d012      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb6:	d81a      	bhi.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d022      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cc0:	d115      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f002 f878 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cd6:	e015      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cdc:	3328      	adds	r3, #40	; 0x28
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f002 f91f 	bl	800bf24 <RCCEx_PLL3_Config>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cec:	e00a      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cf4:	e006      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cf6:	bf00      	nop
 8009cf8:	e004      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cfa:	bf00      	nop
 8009cfc:	e002      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10b      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d0c:	4ba3      	ldr	r3, [pc, #652]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d10:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d1c:	4a9f      	ldr	r2, [pc, #636]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	6593      	str	r3, [r2, #88]	; 0x58
 8009d22:	e003      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d46:	460b      	mov	r3, r1
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	d037      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d56:	d00e      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5c:	d816      	bhi.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d018      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d66:	d111      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4b8c      	ldr	r3, [pc, #560]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	4a8b      	ldr	r2, [pc, #556]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d74:	e00f      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 f81e 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d8a:	e004      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d92:	e000      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d9e:	4b7f      	ldr	r3, [pc, #508]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dac:	4a7b      	ldr	r2, [pc, #492]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dae:	430b      	orrs	r3, r1
 8009db0:	6513      	str	r3, [r2, #80]	; 0x50
 8009db2:	e003      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	d039      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d81c      	bhi.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e29 	.word	0x08009e29
 8009df0:	08009dfd 	.word	0x08009dfd
 8009df4:	08009e0b 	.word	0x08009e0b
 8009df8:	08009e29 	.word	0x08009e29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfc:	4b67      	ldr	r3, [pc, #412]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	4a66      	ldr	r2, [pc, #408]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e08:	e00f      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0e:	3308      	adds	r3, #8
 8009e10:	2102      	movs	r1, #2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 ffd4 	bl	800bdc0 <RCCEx_PLL2_Config>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e1e:	e004      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e26:	e000      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e32:	4b5a      	ldr	r3, [pc, #360]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	f023 0103 	bic.w	r1, r3, #3
 8009e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e40:	4a56      	ldr	r2, [pc, #344]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e42:	430b      	orrs	r3, r1
 8009e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e46:	e003      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e60:	2300      	movs	r3, #0
 8009e62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	f000 809f 	beq.w	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e72:	4b4b      	ldr	r3, [pc, #300]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a4a      	ldr	r2, [pc, #296]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e7e:	f7f9 f929 	bl	80030d4 <HAL_GetTick>
 8009e82:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e86:	e00b      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e88:	f7f9 f924 	bl	80030d4 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	2b64      	cmp	r3, #100	; 0x64
 8009e96:	d903      	bls.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e9e:	e005      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ea0:	4b3f      	ldr	r3, [pc, #252]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ed      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009eac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d179      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009eb4:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ec0:	4053      	eors	r3, r2
 8009ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d015      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009eca:	4b34      	ldr	r3, [pc, #208]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ed6:	4b31      	ldr	r3, [pc, #196]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eda:	4a30      	ldr	r2, [pc, #192]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ee2:	4b2e      	ldr	r3, [pc, #184]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	4a2d      	ldr	r2, [pc, #180]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009eee:	4a2b      	ldr	r2, [pc, #172]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ef4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f02:	d118      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7f9 f8e6 	bl	80030d4 <HAL_GetTick>
 8009f08:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f0c:	e00d      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f0e:	f7f9 f8e1 	bl	80030d4 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f18:	1ad2      	subs	r2, r2, r3
 8009f1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d903      	bls.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009f28:	e005      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f2a:	4b1c      	ldr	r3, [pc, #112]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0eb      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d129      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f4e:	d10e      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f50:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f60:	091a      	lsrs	r2, r3, #4
 8009f62:	4b10      	ldr	r3, [pc, #64]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	4a0d      	ldr	r2, [pc, #52]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6113      	str	r3, [r2, #16]
 8009f6c:	e005      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009f6e:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f78:	6113      	str	r3, [r2, #16]
 8009f7a:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f8a:	4a04      	ldr	r2, [pc, #16]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f90:	e00e      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009f9a:	e009      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009f9c:	58024400 	.word	0x58024400
 8009fa0:	58024800 	.word	0x58024800
 8009fa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f002 0301 	and.w	r3, r2, #1
 8009fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	f000 8089 	beq.w	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd8:	2b28      	cmp	r3, #40	; 0x28
 8009fda:	d86b      	bhi.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	0800a0bd 	.word	0x0800a0bd
 8009fe8:	0800a0b5 	.word	0x0800a0b5
 8009fec:	0800a0b5 	.word	0x0800a0b5
 8009ff0:	0800a0b5 	.word	0x0800a0b5
 8009ff4:	0800a0b5 	.word	0x0800a0b5
 8009ff8:	0800a0b5 	.word	0x0800a0b5
 8009ffc:	0800a0b5 	.word	0x0800a0b5
 800a000:	0800a0b5 	.word	0x0800a0b5
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a0b5 	.word	0x0800a0b5
 800a00c:	0800a0b5 	.word	0x0800a0b5
 800a010:	0800a0b5 	.word	0x0800a0b5
 800a014:	0800a0b5 	.word	0x0800a0b5
 800a018:	0800a0b5 	.word	0x0800a0b5
 800a01c:	0800a0b5 	.word	0x0800a0b5
 800a020:	0800a0b5 	.word	0x0800a0b5
 800a024:	0800a09f 	.word	0x0800a09f
 800a028:	0800a0b5 	.word	0x0800a0b5
 800a02c:	0800a0b5 	.word	0x0800a0b5
 800a030:	0800a0b5 	.word	0x0800a0b5
 800a034:	0800a0b5 	.word	0x0800a0b5
 800a038:	0800a0b5 	.word	0x0800a0b5
 800a03c:	0800a0b5 	.word	0x0800a0b5
 800a040:	0800a0b5 	.word	0x0800a0b5
 800a044:	0800a0bd 	.word	0x0800a0bd
 800a048:	0800a0b5 	.word	0x0800a0b5
 800a04c:	0800a0b5 	.word	0x0800a0b5
 800a050:	0800a0b5 	.word	0x0800a0b5
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	0800a0b5 	.word	0x0800a0b5
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0b5 	.word	0x0800a0b5
 800a06c:	0800a0b5 	.word	0x0800a0b5
 800a070:	0800a0b5 	.word	0x0800a0b5
 800a074:	0800a0b5 	.word	0x0800a0b5
 800a078:	0800a0b5 	.word	0x0800a0b5
 800a07c:	0800a0b5 	.word	0x0800a0b5
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0bd 	.word	0x0800a0bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a08c:	3308      	adds	r3, #8
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fe95 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a09c:	e00f      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a2:	3328      	adds	r3, #40	; 0x28
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 ff3c 	bl	800bf24 <RCCEx_PLL3_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0b2:	e004      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a0c6:	4bbf      	ldr	r3, [pc, #764]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0d4:	4abb      	ldr	r2, [pc, #748]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	6553      	str	r3, [r2, #84]	; 0x54
 800a0da:	e003      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	f002 0302 	and.w	r3, r2, #2
 800a0f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a0fe:	460b      	mov	r3, r1
 800a100:	4313      	orrs	r3, r2
 800a102:	d041      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a10a:	2b05      	cmp	r3, #5
 800a10c:	d824      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a161 	.word	0x0800a161
 800a118:	0800a12d 	.word	0x0800a12d
 800a11c:	0800a143 	.word	0x0800a143
 800a120:	0800a161 	.word	0x0800a161
 800a124:	0800a161 	.word	0x0800a161
 800a128:	0800a161 	.word	0x0800a161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a130:	3308      	adds	r3, #8
 800a132:	2101      	movs	r1, #1
 800a134:	4618      	mov	r0, r3
 800a136:	f001 fe43 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a140:	e00f      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a146:	3328      	adds	r3, #40	; 0x28
 800a148:	2101      	movs	r1, #1
 800a14a:	4618      	mov	r0, r3
 800a14c:	f001 feea 	bl	800bf24 <RCCEx_PLL3_Config>
 800a150:	4603      	mov	r3, r0
 800a152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a156:	e004      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a15e:	e000      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a16a:	4b96      	ldr	r3, [pc, #600]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16e:	f023 0107 	bic.w	r1, r3, #7
 800a172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a178:	4a92      	ldr	r2, [pc, #584]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a17a:	430b      	orrs	r3, r1
 800a17c:	6553      	str	r3, [r2, #84]	; 0x54
 800a17e:	e003      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f002 0304 	and.w	r3, r2, #4
 800a194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a198:	2300      	movs	r3, #0
 800a19a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a19e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	d044      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d825      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a209 	.word	0x0800a209
 800a1c0:	0800a1d5 	.word	0x0800a1d5
 800a1c4:	0800a1eb 	.word	0x0800a1eb
 800a1c8:	0800a209 	.word	0x0800a209
 800a1cc:	0800a209 	.word	0x0800a209
 800a1d0:	0800a209 	.word	0x0800a209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d8:	3308      	adds	r3, #8
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 fdef 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1e8:	e00f      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ee:	3328      	adds	r3, #40	; 0x28
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f001 fe96 	bl	800bf24 <RCCEx_PLL3_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1fe:	e004      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a206:	e000      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10b      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a212:	4b6c      	ldr	r3, [pc, #432]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a216:	f023 0107 	bic.w	r1, r3, #7
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a222:	4a68      	ldr	r2, [pc, #416]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a224:	430b      	orrs	r3, r1
 800a226:	6593      	str	r3, [r2, #88]	; 0x58
 800a228:	e003      	b.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a22e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f002 0320 	and.w	r3, r2, #32
 800a23e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a242:	2300      	movs	r3, #0
 800a244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a24c:	460b      	mov	r3, r1
 800a24e:	4313      	orrs	r3, r2
 800a250:	d055      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a25e:	d033      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a264:	d82c      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26a:	d02f      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a270:	d826      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a276:	d02b      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a27c:	d820      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a27e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a282:	d012      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a288:	d81a      	bhi.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d022      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a28e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a292:	d115      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a298:	3308      	adds	r3, #8
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f001 fd8f 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2a8:	e015      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ae:	3328      	adds	r3, #40	; 0x28
 800a2b0:	2102      	movs	r1, #2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fe36 	bl	800bf24 <RCCEx_PLL3_Config>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2be:	e00a      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2c6:	e006      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2c8:	bf00      	nop
 800a2ca:	e004      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2cc:	bf00      	nop
 800a2ce:	e002      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2d0:	bf00      	nop
 800a2d2:	e000      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10b      	bne.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2de:	4b39      	ldr	r3, [pc, #228]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ee:	4a35      	ldr	r2, [pc, #212]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	6553      	str	r3, [r2, #84]	; 0x54
 800a2f4:	e003      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a30a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a30e:	2300      	movs	r3, #0
 800a310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a314:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a318:	460b      	mov	r3, r1
 800a31a:	4313      	orrs	r3, r2
 800a31c:	d058      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a32a:	d033      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a32c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a330:	d82c      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a336:	d02f      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33c:	d826      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a33e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a342:	d02b      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a348:	d820      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34e:	d012      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a354:	d81a      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d022      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a35a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a35e:	d115      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a364:	3308      	adds	r3, #8
 800a366:	2100      	movs	r1, #0
 800a368:	4618      	mov	r0, r3
 800a36a:	f001 fd29 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a374:	e015      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37a:	3328      	adds	r3, #40	; 0x28
 800a37c:	2102      	movs	r1, #2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fdd0 	bl	800bf24 <RCCEx_PLL3_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a38a:	e00a      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a392:	e006      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a394:	bf00      	nop
 800a396:	e004      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10e      	bne.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3ba:	4a02      	ldr	r2, [pc, #8]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6593      	str	r3, [r2, #88]	; 0x58
 800a3c0:	e006      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a3c2:	bf00      	nop
 800a3c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a3dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	d055      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3fc:	d033      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a3fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a402:	d82c      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a408:	d02f      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a40a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a40e:	d826      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a410:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a414:	d02b      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a416:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a41a:	d820      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a41c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a420:	d012      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a426:	d81a      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d022      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a430:	d115      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a436:	3308      	adds	r3, #8
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fcc0 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a446:	e015      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44c:	3328      	adds	r3, #40	; 0x28
 800a44e:	2102      	movs	r1, #2
 800a450:	4618      	mov	r0, r3
 800a452:	f001 fd67 	bl	800bf24 <RCCEx_PLL3_Config>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a45c:	e00a      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a464:	e006      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a466:	bf00      	nop
 800a468:	e004      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a46a:	bf00      	nop
 800a46c:	e002      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a46e:	bf00      	nop
 800a470:	e000      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a472:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10b      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a47c:	4ba1      	ldr	r3, [pc, #644]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a480:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a48c:	4a9d      	ldr	r2, [pc, #628]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a48e:	430b      	orrs	r3, r1
 800a490:	6593      	str	r3, [r2, #88]	; 0x58
 800a492:	e003      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f002 0308 	and.w	r3, r2, #8
 800a4a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	d01e      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ce:	3328      	adds	r3, #40	; 0x28
 800a4d0:	2102      	movs	r1, #2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 fd26 	bl	800bf24 <RCCEx_PLL3_Config>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d002      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4e4:	4b87      	ldr	r3, [pc, #540]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4f4:	4a83      	ldr	r2, [pc, #524]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f002 0310 	and.w	r3, r2, #16
 800a506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a50a:	2300      	movs	r3, #0
 800a50c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a510:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a514:	460b      	mov	r3, r1
 800a516:	4313      	orrs	r3, r2
 800a518:	d01e      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a526:	d10c      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52c:	3328      	adds	r3, #40	; 0x28
 800a52e:	2102      	movs	r1, #2
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fcf7 	bl	800bf24 <RCCEx_PLL3_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a542:	4b70      	ldr	r3, [pc, #448]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a552:	4a6c      	ldr	r2, [pc, #432]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a554:	430b      	orrs	r3, r1
 800a556:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a568:	2300      	movs	r3, #0
 800a56a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a56e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a572:	460b      	mov	r3, r1
 800a574:	4313      	orrs	r3, r2
 800a576:	d03e      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a584:	d022      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a58a:	d81b      	bhi.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a594:	d00b      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a596:	e015      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59c:	3308      	adds	r3, #8
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f001 fc0d 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5ac:	e00f      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b2:	3328      	adds	r3, #40	; 0x28
 800a5b4:	2102      	movs	r1, #2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f001 fcb4 	bl	800bf24 <RCCEx_PLL3_Config>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5c2:	e004      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5ca:	e000      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a5d6:	4b4b      	ldr	r3, [pc, #300]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5e6:	4a47      	ldr	r2, [pc, #284]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5e8:	430b      	orrs	r3, r1
 800a5ea:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ec:	e003      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a602:	67bb      	str	r3, [r7, #120]	; 0x78
 800a604:	2300      	movs	r3, #0
 800a606:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a608:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a60c:	460b      	mov	r3, r1
 800a60e:	4313      	orrs	r3, r2
 800a610:	d03b      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a61e:	d01f      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a624:	d818      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a62a:	d003      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a62c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a630:	d007      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a632:	e011      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a634:	4b33      	ldr	r3, [pc, #204]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	4a32      	ldr	r2, [pc, #200]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a640:	e00f      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a646:	3328      	adds	r3, #40	; 0x28
 800a648:	2101      	movs	r1, #1
 800a64a:	4618      	mov	r0, r3
 800a64c:	f001 fc6a 	bl	800bf24 <RCCEx_PLL3_Config>
 800a650:	4603      	mov	r3, r0
 800a652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a656:	e004      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a65e:	e000      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a66a:	4b26      	ldr	r3, [pc, #152]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67a:	4a22      	ldr	r2, [pc, #136]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6553      	str	r3, [r2, #84]	; 0x54
 800a680:	e003      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a696:	673b      	str	r3, [r7, #112]	; 0x70
 800a698:	2300      	movs	r3, #0
 800a69a:	677b      	str	r3, [r7, #116]	; 0x74
 800a69c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	d034      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6b4:	d007      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a6b6:	e011      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b8:	4b12      	ldr	r3, [pc, #72]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	4a11      	ldr	r2, [pc, #68]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6c4:	e00e      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 fb76 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6da:	e003      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10d      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a6ec:	4b05      	ldr	r3, [pc, #20]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6fa:	4a02      	ldr	r2, [pc, #8]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a700:	e006      	b.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a702:	bf00      	nop
 800a704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a70c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a71c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a71e:	2300      	movs	r3, #0
 800a720:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a722:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a726:	460b      	mov	r3, r1
 800a728:	4313      	orrs	r3, r2
 800a72a:	d00c      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a730:	3328      	adds	r3, #40	; 0x28
 800a732:	2102      	movs	r1, #2
 800a734:	4618      	mov	r0, r3
 800a736:	f001 fbf5 	bl	800bf24 <RCCEx_PLL3_Config>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a752:	663b      	str	r3, [r7, #96]	; 0x60
 800a754:	2300      	movs	r3, #0
 800a756:	667b      	str	r3, [r7, #100]	; 0x64
 800a758:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a75c:	460b      	mov	r3, r1
 800a75e:	4313      	orrs	r3, r2
 800a760:	d038      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a76e:	d018      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a774:	d811      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77a:	d014      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a780:	d80b      	bhi.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d011      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78a:	d106      	bne.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78c:	4bc3      	ldr	r3, [pc, #780]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	4ac2      	ldr	r2, [pc, #776]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a798:	e008      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7a0:	e004      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7a2:	bf00      	nop
 800a7a4:	e002      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e000      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10b      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7b4:	4bb9      	ldr	r3, [pc, #740]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c4:	4ab5      	ldr	r2, [pc, #724]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	6553      	str	r3, [r2, #84]	; 0x54
 800a7ca:	e003      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	d009      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a7f0:	4baa      	ldr	r3, [pc, #680]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fe:	4aa7      	ldr	r2, [pc, #668]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a800:	430b      	orrs	r3, r1
 800a802:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a810:	653b      	str	r3, [r7, #80]	; 0x50
 800a812:	2300      	movs	r3, #0
 800a814:	657b      	str	r3, [r7, #84]	; 0x54
 800a816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a81a:	460b      	mov	r3, r1
 800a81c:	4313      	orrs	r3, r2
 800a81e:	d00a      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a820:	4b9e      	ldr	r3, [pc, #632]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a830:	4a9a      	ldr	r2, [pc, #616]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a832:	430b      	orrs	r3, r1
 800a834:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a842:	64bb      	str	r3, [r7, #72]	; 0x48
 800a844:	2300      	movs	r3, #0
 800a846:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a848:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a84c:	460b      	mov	r3, r1
 800a84e:	4313      	orrs	r3, r2
 800a850:	d009      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a852:	4b92      	ldr	r3, [pc, #584]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a856:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a860:	4a8e      	ldr	r2, [pc, #568]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a862:	430b      	orrs	r3, r1
 800a864:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a872:	643b      	str	r3, [r7, #64]	; 0x40
 800a874:	2300      	movs	r3, #0
 800a876:	647b      	str	r3, [r7, #68]	; 0x44
 800a878:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a87c:	460b      	mov	r3, r1
 800a87e:	4313      	orrs	r3, r2
 800a880:	d00e      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a882:	4b86      	ldr	r3, [pc, #536]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	4a85      	ldr	r2, [pc, #532]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a88c:	6113      	str	r3, [r2, #16]
 800a88e:	4b83      	ldr	r3, [pc, #524]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a890:	6919      	ldr	r1, [r3, #16]
 800a892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a89a:	4a80      	ldr	r2, [pc, #512]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	d009      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8bc:	4b77      	ldr	r3, [pc, #476]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ca:	4a74      	ldr	r2, [pc, #464]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a8dc:	633b      	str	r3, [r7, #48]	; 0x30
 800a8de:	2300      	movs	r3, #0
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	d00a      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8ec:	4b6b      	ldr	r3, [pc, #428]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8fc:	4a67      	ldr	r2, [pc, #412]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8fe:	430b      	orrs	r3, r1
 800a900:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	2100      	movs	r1, #0
 800a90c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a914:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a918:	460b      	mov	r3, r1
 800a91a:	4313      	orrs	r3, r2
 800a91c:	d011      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a922:	3308      	adds	r3, #8
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f001 fa4a 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a93e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	2100      	movs	r1, #0
 800a94c:	6239      	str	r1, [r7, #32]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
 800a954:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a958:	460b      	mov	r3, r1
 800a95a:	4313      	orrs	r3, r2
 800a95c:	d011      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a962:	3308      	adds	r3, #8
 800a964:	2101      	movs	r1, #1
 800a966:	4618      	mov	r0, r3
 800a968:	f001 fa2a 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a97e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	2100      	movs	r1, #0
 800a98c:	61b9      	str	r1, [r7, #24]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a998:	460b      	mov	r3, r1
 800a99a:	4313      	orrs	r3, r2
 800a99c:	d011      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fa0a 	bl	800bdc0 <RCCEx_PLL2_Config>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	6139      	str	r1, [r7, #16]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	d011      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e2:	3328      	adds	r3, #40	; 0x28
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 fa9c 	bl	800bf24 <RCCEx_PLL3_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	f003 0310 	and.w	r3, r3, #16
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	d011      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa22:	3328      	adds	r3, #40	; 0x28
 800aa24:	2101      	movs	r1, #1
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 fa7c 	bl	800bf24 <RCCEx_PLL3_Config>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	607b      	str	r3, [r7, #4]
 800aa54:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	d011      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa62:	3328      	adds	r3, #40	; 0x28
 800aa64:	2102      	movs	r1, #2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 fa5c 	bl	800bf24 <RCCEx_PLL3_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aa82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e000      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aa96:	46bd      	mov	sp, r7
 800aa98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa9c:	58024400 	.word	0x58024400

0800aaa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b090      	sub	sp, #64	; 0x40
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aaaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aab2:	430b      	orrs	r3, r1
 800aab4:	f040 8094 	bne.w	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aab8:	4b9e      	ldr	r3, [pc, #632]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	f200 8087 	bhi.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800aae5 	.word	0x0800aae5
 800aad4:	0800ab0d 	.word	0x0800ab0d
 800aad8:	0800ab35 	.word	0x0800ab35
 800aadc:	0800abd1 	.word	0x0800abd1
 800aae0:	0800ab5d 	.word	0x0800ab5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aae4:	4b93      	ldr	r3, [pc, #588]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaf0:	d108      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f001 f810 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab00:	f000 bd45 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab08:	f000 bd41 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab0c:	4b89      	ldr	r3, [pc, #548]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab18:	d108      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab1a:	f107 0318 	add.w	r3, r7, #24
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fd54 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab28:	f000 bd31 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab30:	f000 bd2d 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab34:	4b7f      	ldr	r3, [pc, #508]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab40:	d108      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab42:	f107 030c 	add.w	r3, r7, #12
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fe94 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab50:	f000 bd1d 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab58:	f000 bd19 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab5c:	4b75      	ldr	r3, [pc, #468]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab66:	4b73      	ldr	r3, [pc, #460]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0304 	and.w	r3, r3, #4
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d10c      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ab72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d109      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab78:	4b6e      	ldr	r3, [pc, #440]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	08db      	lsrs	r3, r3, #3
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	4a6d      	ldr	r2, [pc, #436]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8a:	e01f      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab8c:	4b69      	ldr	r3, [pc, #420]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab98:	d106      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba0:	d102      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba2:	4b66      	ldr	r3, [pc, #408]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba6:	e011      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aba8:	4b62      	ldr	r3, [pc, #392]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb4:	d106      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abbc:	d102      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abbe:	4b60      	ldr	r3, [pc, #384]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc2:	e003      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abc8:	f000 bce1 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abcc:	f000 bcdf 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abd0:	4b5c      	ldr	r3, [pc, #368]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd4:	f000 bcdb 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abdc:	f000 bcd7 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800abe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800abe8:	430b      	orrs	r3, r1
 800abea:	f040 80ad 	bne.w	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800abee:	4b51      	ldr	r3, [pc, #324]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800abf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfe:	d056      	beq.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac06:	f200 8090 	bhi.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	2bc0      	cmp	r3, #192	; 0xc0
 800ac0e:	f000 8088 	beq.w	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	2bc0      	cmp	r3, #192	; 0xc0
 800ac16:	f200 8088 	bhi.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	2b80      	cmp	r3, #128	; 0x80
 800ac1e:	d032      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	2b80      	cmp	r3, #128	; 0x80
 800ac24:	f200 8081 	bhi.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d003      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	2b40      	cmp	r3, #64	; 0x40
 800ac32:	d014      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ac34:	e079      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac36:	4b3f      	ldr	r3, [pc, #252]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac42:	d108      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 ff67 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac52:	f000 bc9c 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5a:	f000 bc98 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac5e:	4b35      	ldr	r3, [pc, #212]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac6a:	d108      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac6c:	f107 0318 	add.w	r3, r7, #24
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fcab 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac7a:	f000 bc88 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac82:	f000 bc84 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac86:	4b2b      	ldr	r3, [pc, #172]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac92:	d108      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac94:	f107 030c 	add.w	r3, r7, #12
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fdeb 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca2:	f000 bc74 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acaa:	f000 bc70 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acae:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acb8:	4b1e      	ldr	r3, [pc, #120]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d10c      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800acc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acca:	4b1a      	ldr	r3, [pc, #104]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	08db      	lsrs	r3, r3, #3
 800acd0:	f003 0303 	and.w	r3, r3, #3
 800acd4:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800acd6:	fa22 f303 	lsr.w	r3, r2, r3
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acdc:	e01f      	b.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acde:	4b15      	ldr	r3, [pc, #84]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acea:	d106      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acf2:	d102      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acf4:	4b11      	ldr	r3, [pc, #68]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf8:	e011      	b.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acfa:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad06:	d106      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad0e:	d102      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad14:	e003      	b.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad1a:	f000 bc38 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad1e:	f000 bc36 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad22:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad26:	f000 bc32 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad2e:	f000 bc2e 	b.w	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad32:	bf00      	nop
 800ad34:	58024400 	.word	0x58024400
 800ad38:	03d09000 	.word	0x03d09000
 800ad3c:	003d0900 	.word	0x003d0900
 800ad40:	017d7840 	.word	0x017d7840
 800ad44:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad4c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ad50:	430b      	orrs	r3, r1
 800ad52:	f040 809c 	bne.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ad56:	4b9e      	ldr	r3, [pc, #632]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ad5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad66:	d054      	beq.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad6e:	f200 808b 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad78:	f000 8083 	beq.w	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad82:	f200 8081 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad8c:	d02f      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad94:	d878      	bhi.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ada2:	d012      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ada4:	e070      	b.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ada6:	4b8a      	ldr	r3, [pc, #552]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb2:	d107      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 feaf 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc2:	e3e4      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc8:	e3e1      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adca:	4b81      	ldr	r3, [pc, #516]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add6:	d107      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add8:	f107 0318 	add.w	r3, r7, #24
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fbf5 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade6:	e3d2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adec:	e3cf      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adee:	4b78      	ldr	r3, [pc, #480]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfa:	d107      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fd37 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0a:	e3c0      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae10:	e3bd      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae12:	4b6f      	ldr	r3, [pc, #444]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae1c:	4b6c      	ldr	r3, [pc, #432]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d10c      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ae28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2e:	4b68      	ldr	r3, [pc, #416]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	08db      	lsrs	r3, r3, #3
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	4a66      	ldr	r2, [pc, #408]	; (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae40:	e01e      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae42:	4b63      	ldr	r3, [pc, #396]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4e:	d106      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ae50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae56:	d102      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae58:	4b5f      	ldr	r3, [pc, #380]	; (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae5c:	e010      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae5e:	4b5c      	ldr	r3, [pc, #368]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae6a:	d106      	bne.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae72:	d102      	bne.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae74:	4b59      	ldr	r3, [pc, #356]	; (800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae78:	e002      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae7e:	e386      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae80:	e385      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae82:	4b57      	ldr	r3, [pc, #348]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae86:	e382      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8c:	e37f      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae92:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ae96:	430b      	orrs	r3, r1
 800ae98:	f040 80a7 	bne.w	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ae9c:	4b4c      	ldr	r3, [pc, #304]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aea4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aeac:	d055      	beq.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aeb4:	f200 8096 	bhi.w	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aebe:	f000 8084 	beq.w	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aec8:	f200 808c 	bhi.w	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aed2:	d030      	beq.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeda:	f200 8083 	bhi.w	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aeea:	d012      	beq.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aeec:	e07a      	b.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeee:	4b38      	ldr	r3, [pc, #224]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aefa:	d107      	bne.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aefc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fe0b 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af0a:	e340      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af10:	e33d      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af12:	4b2f      	ldr	r3, [pc, #188]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af1e:	d107      	bne.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af20:	f107 0318 	add.w	r3, r7, #24
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fb51 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2e:	e32e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af34:	e32b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af36:	4b26      	ldr	r3, [pc, #152]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af42:	d107      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af44:	f107 030c 	add.w	r3, r7, #12
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fc93 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af52:	e31c      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af58:	e319      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af5a:	4b1d      	ldr	r3, [pc, #116]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af64:	4b1a      	ldr	r3, [pc, #104]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d10c      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af76:	4b16      	ldr	r3, [pc, #88]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	4a14      	ldr	r2, [pc, #80]	; (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af88:	e01e      	b.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af96:	d106      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800af98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af9e:	d102      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afa0:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa4:	e010      	b.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afa6:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb2:	d106      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800afb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afba:	d102      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc0:	e002      	b.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afc6:	e2e2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afc8:	e2e1      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afce:	e2de      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afd0:	58024400 	.word	0x58024400
 800afd4:	03d09000 	.word	0x03d09000
 800afd8:	003d0900 	.word	0x003d0900
 800afdc:	017d7840 	.word	0x017d7840
 800afe0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe8:	e2d1      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800afea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aff2:	430b      	orrs	r3, r1
 800aff4:	f040 809c 	bne.w	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aff8:	4b93      	ldr	r3, [pc, #588]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800affa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b000:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b008:	d054      	beq.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b010:	f200 808b 	bhi.w	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b01a:	f000 8083 	beq.w	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b024:	f200 8081 	bhi.w	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b02e:	d02f      	beq.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b036:	d878      	bhi.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b044:	d012      	beq.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b046:	e070      	b.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b048:	4b7f      	ldr	r3, [pc, #508]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b054:	d107      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fd5e 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b064:	e293      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b06a:	e290      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b06c:	4b76      	ldr	r3, [pc, #472]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b078:	d107      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 faa4 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b088:	e281      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08e:	e27e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b090:	4b6d      	ldr	r3, [pc, #436]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b09c:	d107      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fbe6 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ac:	e26f      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b2:	e26c      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0b4:	4b64      	ldr	r3, [pc, #400]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0be:	4b62      	ldr	r3, [pc, #392]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d10c      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d109      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0d0:	4b5d      	ldr	r3, [pc, #372]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	08db      	lsrs	r3, r3, #3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	4a5c      	ldr	r2, [pc, #368]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0e2:	e01e      	b.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0e4:	4b58      	ldr	r3, [pc, #352]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f0:	d106      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0f8:	d102      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0fa:	4b55      	ldr	r3, [pc, #340]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fe:	e010      	b.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b100:	4b51      	ldr	r3, [pc, #324]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b10c:	d106      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b114:	d102      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b116:	4b4f      	ldr	r3, [pc, #316]	; (800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b11a:	e002      	b.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b120:	e235      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b122:	e234      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b124:	4b4c      	ldr	r3, [pc, #304]	; (800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b128:	e231      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b12e:	e22e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b134:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b138:	430b      	orrs	r3, r1
 800b13a:	f040 808f 	bne.w	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b13e:	4b42      	ldr	r3, [pc, #264]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b142:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b146:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b14e:	d06b      	beq.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b156:	d874      	bhi.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b15e:	d056      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b166:	d86c      	bhi.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b16e:	d03b      	beq.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b176:	d864      	bhi.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b17e:	d021      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b186:	d85c      	bhi.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d004      	beq.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b194:	d004      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b196:	e054      	b.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b198:	f7fe fa0a 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800b19c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b19e:	e1f6      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1a0:	4b29      	ldr	r3, [pc, #164]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ac:	d107      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ae:	f107 0318 	add.w	r3, r7, #24
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 fa0a 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1bc:	e1e7      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c2:	e1e4      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1c4:	4b20      	ldr	r3, [pc, #128]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d0:	d107      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1d2:	f107 030c 	add.w	r3, r7, #12
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 fb4c 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e0:	e1d5      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e6:	e1d2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1e8:	4b17      	ldr	r3, [pc, #92]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d109      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f4:	4b14      	ldr	r3, [pc, #80]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	08db      	lsrs	r3, r3, #3
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	4a13      	ldr	r2, [pc, #76]	; (800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b200:	fa22 f303 	lsr.w	r3, r2, r3
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b206:	e1c2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20c:	e1bf      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b20e:	4b0e      	ldr	r3, [pc, #56]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21a:	d102      	bne.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b21c:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b220:	e1b5      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b226:	e1b2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b228:	4b07      	ldr	r3, [pc, #28]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b234:	d102      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b236:	4b07      	ldr	r3, [pc, #28]	; (800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b23a:	e1a8      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b240:	e1a5      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b246:	e1a2      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b248:	58024400 	.word	0x58024400
 800b24c:	03d09000 	.word	0x03d09000
 800b250:	003d0900 	.word	0x003d0900
 800b254:	017d7840 	.word	0x017d7840
 800b258:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b25c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b260:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b264:	430b      	orrs	r3, r1
 800b266:	d173      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b268:	4b9c      	ldr	r3, [pc, #624]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b270:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b278:	d02f      	beq.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b280:	d863      	bhi.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28e:	d012      	beq.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b290:	e05b      	b.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b292:	4b92      	ldr	r3, [pc, #584]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b29a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b29e:	d107      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2a0:	f107 0318 	add.w	r3, r7, #24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f991 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ae:	e16e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b4:	e16b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2b6:	4b89      	ldr	r3, [pc, #548]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c2:	d107      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c4:	f107 030c 	add.w	r3, r7, #12
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fad3 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d2:	e15c      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d8:	e159      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2da:	4b80      	ldr	r3, [pc, #512]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2e4:	4b7d      	ldr	r3, [pc, #500]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b04      	cmp	r3, #4
 800b2ee:	d10c      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2f6:	4b79      	ldr	r3, [pc, #484]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	08db      	lsrs	r3, r3, #3
 800b2fc:	f003 0303 	and.w	r3, r3, #3
 800b300:	4a77      	ldr	r2, [pc, #476]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b302:	fa22 f303 	lsr.w	r3, r2, r3
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b308:	e01e      	b.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b30a:	4b74      	ldr	r3, [pc, #464]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b316:	d106      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b31e:	d102      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b320:	4b70      	ldr	r3, [pc, #448]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b324:	e010      	b.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b326:	4b6d      	ldr	r3, [pc, #436]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b332:	d106      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33a:	d102      	bne.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b33c:	4b6a      	ldr	r3, [pc, #424]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b340:	e002      	b.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b346:	e122      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b348:	e121      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b34e:	e11e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b358:	430b      	orrs	r3, r1
 800b35a:	d133      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b35c:	4b5f      	ldr	r3, [pc, #380]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b35e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b372:	d012      	beq.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b374:	e023      	b.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b376:	4b59      	ldr	r3, [pc, #356]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b37e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b382:	d107      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fbc7 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b392:	e0fc      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b398:	e0f9      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b39a:	4b50      	ldr	r3, [pc, #320]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3a6:	d107      	bne.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a8:	f107 0318 	add.w	r3, r7, #24
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 f90d 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b6:	e0ea      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3bc:	e0e7      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c2:	e0e4      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	f040 808d 	bne.w	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b3d2:	4b42      	ldr	r3, [pc, #264]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b3da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3e2:	d06b      	beq.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3ea:	d874      	bhi.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f2:	d056      	beq.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3fa:	d86c      	bhi.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b402:	d03b      	beq.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b40a:	d864      	bhi.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b412:	d021      	beq.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b41a:	d85c      	bhi.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d004      	beq.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b428:	d004      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b42a:	e054      	b.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b42c:	f000 f8b8 	bl	800b5a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b430:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b432:	e0ac      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b434:	4b29      	ldr	r3, [pc, #164]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b43c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b440:	d107      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b442:	f107 0318 	add.w	r3, r7, #24
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f8c0 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b450:	e09d      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b456:	e09a      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b458:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b464:	d107      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b466:	f107 030c 	add.w	r3, r7, #12
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fa02 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b474:	e08b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b47a:	e088      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b47c:	4b17      	ldr	r3, [pc, #92]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b04      	cmp	r3, #4
 800b486:	d109      	bne.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b488:	4b14      	ldr	r3, [pc, #80]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	08db      	lsrs	r3, r3, #3
 800b48e:	f003 0303 	and.w	r3, r3, #3
 800b492:	4a13      	ldr	r2, [pc, #76]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b494:	fa22 f303 	lsr.w	r3, r2, r3
 800b498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b49a:	e078      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4a0:	e075      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ae:	d102      	bne.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b4b0:	4b0c      	ldr	r3, [pc, #48]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4b4:	e06b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ba:	e068      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4bc:	4b07      	ldr	r3, [pc, #28]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4c8:	d102      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b4ca:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ce:	e05e      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d4:	e05b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4da:	e058      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4dc:	58024400 	.word	0x58024400
 800b4e0:	03d09000 	.word	0x03d09000
 800b4e4:	003d0900 	.word	0x003d0900
 800b4e8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	d148      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b4f8:	4b27      	ldr	r3, [pc, #156]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b500:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b508:	d02a      	beq.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b510:	d838      	bhi.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b51e:	d00d      	beq.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b520:	e030      	b.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b522:	4b1d      	ldr	r3, [pc, #116]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b52a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b52e:	d102      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b530:	4b1a      	ldr	r3, [pc, #104]	; (800b59c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b534:	e02b      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53a:	e028      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b53c:	4b16      	ldr	r3, [pc, #88]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b548:	d107      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fae4 	bl	800bb1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b558:	e019      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b55e:	e016      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b56c:	d107      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b56e:	f107 0318 	add.w	r3, r7, #24
 800b572:	4618      	mov	r0, r3
 800b574:	f000 f82a 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57c:	e007      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b582:	e004      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b588:	e001      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b590:	4618      	mov	r0, r3
 800b592:	3740      	adds	r7, #64	; 0x40
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	58024400 	.word	0x58024400
 800b59c:	017d7840 	.word	0x017d7840

0800b5a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5a4:	f7fd ffd4 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	091b      	lsrs	r3, r3, #4
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b5b6:	5ccb      	ldrb	r3, [r1, r3]
 800b5b8:	f003 031f 	and.w	r3, r3, #31
 800b5bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	08015624 	.word	0x08015624

0800b5cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b089      	sub	sp, #36	; 0x24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5d4:	4ba1      	ldr	r3, [pc, #644]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b5de:	4b9f      	ldr	r3, [pc, #636]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e2:	0b1b      	lsrs	r3, r3, #12
 800b5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b5ea:	4b9c      	ldr	r3, [pc, #624]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ee:	091b      	lsrs	r3, r3, #4
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b5f6:	4b99      	ldr	r3, [pc, #612]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fa:	08db      	lsrs	r3, r3, #3
 800b5fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	fb02 f303 	mul.w	r3, r2, r3
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8111 	beq.w	800b83c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	f000 8083 	beq.w	800b728 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b02      	cmp	r3, #2
 800b626:	f200 80a1 	bhi.w	800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d003      	beq.n	800b638 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d056      	beq.n	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b636:	e099      	b.n	800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b638:	4b88      	ldr	r3, [pc, #544]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0320 	and.w	r3, r3, #32
 800b640:	2b00      	cmp	r3, #0
 800b642:	d02d      	beq.n	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b644:	4b85      	ldr	r3, [pc, #532]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	08db      	lsrs	r3, r3, #3
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	4a84      	ldr	r2, [pc, #528]	; (800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b650:	fa22 f303 	lsr.w	r3, r2, r3
 800b654:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	ee07 3a90 	vmov	s15, r3
 800b65c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b66e:	4b7b      	ldr	r3, [pc, #492]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b676:	ee07 3a90 	vmov	s15, r3
 800b67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b67e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b682:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b68e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b69e:	e087      	b.n	800b7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	ee07 3a90 	vmov	s15, r3
 800b6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b868 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b2:	4b6a      	ldr	r3, [pc, #424]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e2:	e065      	b.n	800b7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f6:	4b59      	ldr	r3, [pc, #356]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fe:	ee07 3a90 	vmov	s15, r3
 800b702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b706:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b726:	e043      	b.n	800b7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b732:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73a:	4b48      	ldr	r3, [pc, #288]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76a:	e021      	b.n	800b7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b776:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77e:	4b37      	ldr	r3, [pc, #220]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b792:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7b0:	4b2a      	ldr	r3, [pc, #168]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	0a5b      	lsrs	r3, r3, #9
 800b7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d6:	ee17 2a90 	vmov	r2, s15
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b7de:	4b1f      	ldr	r3, [pc, #124]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b804:	ee17 2a90 	vmov	r2, s15
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b80c:	4b13      	ldr	r3, [pc, #76]	; (800b85c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	0e1b      	lsrs	r3, r3, #24
 800b812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b826:	edd7 6a07 	vldr	s13, [r7, #28]
 800b82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b832:	ee17 2a90 	vmov	r2, s15
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b83a:	e008      	b.n	800b84e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	609a      	str	r2, [r3, #8]
}
 800b84e:	bf00      	nop
 800b850:	3724      	adds	r7, #36	; 0x24
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	58024400 	.word	0x58024400
 800b860:	03d09000 	.word	0x03d09000
 800b864:	46000000 	.word	0x46000000
 800b868:	4c742400 	.word	0x4c742400
 800b86c:	4a742400 	.word	0x4a742400
 800b870:	4bbebc20 	.word	0x4bbebc20

0800b874 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b874:	b480      	push	{r7}
 800b876:	b089      	sub	sp, #36	; 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b87c:	4ba1      	ldr	r3, [pc, #644]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b886:	4b9f      	ldr	r3, [pc, #636]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	0d1b      	lsrs	r3, r3, #20
 800b88c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b890:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b892:	4b9c      	ldr	r3, [pc, #624]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	0a1b      	lsrs	r3, r3, #8
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b89e:	4b99      	ldr	r3, [pc, #612]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a2:	08db      	lsrs	r3, r3, #3
 800b8a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	fb02 f303 	mul.w	r3, r2, r3
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8111 	beq.w	800bae4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	f000 8083 	beq.w	800b9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	f200 80a1 	bhi.w	800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d056      	beq.n	800b98c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8de:	e099      	b.n	800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e0:	4b88      	ldr	r3, [pc, #544]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d02d      	beq.n	800b948 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ec:	4b85      	ldr	r3, [pc, #532]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	08db      	lsrs	r3, r3, #3
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	4a84      	ldr	r2, [pc, #528]	; (800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b916:	4b7b      	ldr	r3, [pc, #492]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b926:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b946:	e087      	b.n	800ba58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b952:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b95a:	4b6a      	ldr	r3, [pc, #424]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b96a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b97a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b98a:	e065      	b.n	800ba58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b996:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99e:	4b59      	ldr	r3, [pc, #356]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ce:	e043      	b.n	800ba58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e2:	4b48      	ldr	r3, [pc, #288]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba12:	e021      	b.n	800ba58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba26:	4b37      	ldr	r3, [pc, #220]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ba58:	4b2a      	ldr	r3, [pc, #168]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	0a5b      	lsrs	r3, r3, #9
 800ba5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba7e:	ee17 2a90 	vmov	r2, s15
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba86:	4b1f      	ldr	r3, [pc, #124]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	0c1b      	lsrs	r3, r3, #16
 800ba8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baac:	ee17 2a90 	vmov	r2, s15
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bab4:	4b13      	ldr	r3, [pc, #76]	; (800bb04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	0e1b      	lsrs	r3, r3, #24
 800baba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bace:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bada:	ee17 2a90 	vmov	r2, s15
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bae2:	e008      	b.n	800baf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	609a      	str	r2, [r3, #8]
}
 800baf6:	bf00      	nop
 800baf8:	3724      	adds	r7, #36	; 0x24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	58024400 	.word	0x58024400
 800bb08:	03d09000 	.word	0x03d09000
 800bb0c:	46000000 	.word	0x46000000
 800bb10:	4c742400 	.word	0x4c742400
 800bb14:	4a742400 	.word	0x4a742400
 800bb18:	4bbebc20 	.word	0x4bbebc20

0800bb1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b089      	sub	sp, #36	; 0x24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb24:	4ba0      	ldr	r3, [pc, #640]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb2e:	4b9e      	ldr	r3, [pc, #632]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	091b      	lsrs	r3, r3, #4
 800bb34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb3a:	4b9b      	ldr	r3, [pc, #620]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb44:	4b98      	ldr	r3, [pc, #608]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb48:	08db      	lsrs	r3, r3, #3
 800bb4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	fb02 f303 	mul.w	r3, r2, r3
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8111 	beq.w	800bd8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	f000 8083 	beq.w	800bc76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	f200 80a1 	bhi.w	800bcba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d056      	beq.n	800bc32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb84:	e099      	b.n	800bcba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb86:	4b88      	ldr	r3, [pc, #544]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d02d      	beq.n	800bbee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb92:	4b85      	ldr	r3, [pc, #532]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	08db      	lsrs	r3, r3, #3
 800bb98:	f003 0303 	and.w	r3, r3, #3
 800bb9c:	4a83      	ldr	r2, [pc, #524]	; (800bdac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800bba2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbbc:	4b7a      	ldr	r3, [pc, #488]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc4:	ee07 3a90 	vmov	s15, r3
 800bbc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbe8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbec:	e087      	b.n	800bcfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	ee07 3a90 	vmov	s15, r3
 800bbf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc00:	4b69      	ldr	r3, [pc, #420]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc08:	ee07 3a90 	vmov	s15, r3
 800bc0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc10:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc14:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc30:	e065      	b.n	800bcfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bdb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc44:	4b58      	ldr	r3, [pc, #352]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4c:	ee07 3a90 	vmov	s15, r3
 800bc50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc54:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc58:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc74:	e043      	b.n	800bcfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	ee07 3a90 	vmov	s15, r3
 800bc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bdbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc88:	4b47      	ldr	r3, [pc, #284]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc98:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcb8:	e021      	b.n	800bcfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bccc:	4b36      	ldr	r3, [pc, #216]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd4:	ee07 3a90 	vmov	s15, r3
 800bcd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcfc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bcfe:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd02:	0a5b      	lsrs	r3, r3, #9
 800bd04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd18:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd24:	ee17 2a90 	vmov	r2, s15
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd2c:	4b1e      	ldr	r3, [pc, #120]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	0c1b      	lsrs	r3, r3, #16
 800bd32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd36:	ee07 3a90 	vmov	s15, r3
 800bd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd46:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd52:	ee17 2a90 	vmov	r2, s15
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5e:	0e1b      	lsrs	r3, r3, #24
 800bd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd74:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd80:	ee17 2a90 	vmov	r2, s15
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd88:	e008      	b.n	800bd9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	609a      	str	r2, [r3, #8]
}
 800bd9c:	bf00      	nop
 800bd9e:	3724      	adds	r7, #36	; 0x24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	58024400 	.word	0x58024400
 800bdac:	03d09000 	.word	0x03d09000
 800bdb0:	46000000 	.word	0x46000000
 800bdb4:	4c742400 	.word	0x4c742400
 800bdb8:	4a742400 	.word	0x4a742400
 800bdbc:	4bbebc20 	.word	0x4bbebc20

0800bdc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdce:	4b53      	ldr	r3, [pc, #332]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd2:	f003 0303 	and.w	r3, r3, #3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d101      	bne.n	800bdde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e099      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bdde:	4b4f      	ldr	r3, [pc, #316]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a4e      	ldr	r2, [pc, #312]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bde4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bde8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdea:	f7f7 f973 	bl	80030d4 <HAL_GetTick>
 800bdee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdf0:	e008      	b.n	800be04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdf2:	f7f7 f96f 	bl	80030d4 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d901      	bls.n	800be04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e086      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be04:	4b45      	ldr	r3, [pc, #276]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1f0      	bne.n	800bdf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be10:	4b42      	ldr	r3, [pc, #264]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	031b      	lsls	r3, r3, #12
 800be1e:	493f      	ldr	r1, [pc, #252]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be20:	4313      	orrs	r3, r2
 800be22:	628b      	str	r3, [r1, #40]	; 0x28
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	3b01      	subs	r3, #1
 800be2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	3b01      	subs	r3, #1
 800be34:	025b      	lsls	r3, r3, #9
 800be36:	b29b      	uxth	r3, r3
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	3b01      	subs	r3, #1
 800be40:	041b      	lsls	r3, r3, #16
 800be42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be46:	431a      	orrs	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	061b      	lsls	r3, r3, #24
 800be50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be54:	4931      	ldr	r1, [pc, #196]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be56:	4313      	orrs	r3, r2
 800be58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be5a:	4b30      	ldr	r3, [pc, #192]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	492d      	ldr	r1, [pc, #180]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be6c:	4b2b      	ldr	r3, [pc, #172]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	f023 0220 	bic.w	r2, r3, #32
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	4928      	ldr	r1, [pc, #160]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be7e:	4b27      	ldr	r3, [pc, #156]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	4a26      	ldr	r2, [pc, #152]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be84:	f023 0310 	bic.w	r3, r3, #16
 800be88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be8e:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <RCCEx_PLL2_Config+0x160>)
 800be90:	4013      	ands	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	69d2      	ldr	r2, [r2, #28]
 800be96:	00d2      	lsls	r2, r2, #3
 800be98:	4920      	ldr	r1, [pc, #128]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be9e:	4b1f      	ldr	r3, [pc, #124]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	4a1e      	ldr	r2, [pc, #120]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bea4:	f043 0310 	orr.w	r3, r3, #16
 800bea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800beb0:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	4a19      	ldr	r2, [pc, #100]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bebc:	e00f      	b.n	800bede <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d106      	bne.n	800bed2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bec4:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec8:	4a14      	ldr	r2, [pc, #80]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800beca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bece:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed0:	e005      	b.n	800bede <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bed2:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	4a11      	ldr	r2, [pc, #68]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bedc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bede:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a0e      	ldr	r2, [pc, #56]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beea:	f7f7 f8f3 	bl	80030d4 <HAL_GetTick>
 800beee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bef0:	e008      	b.n	800bf04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bef2:	f7f7 f8ef 	bl	80030d4 <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e006      	b.n	800bf12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <RCCEx_PLL2_Config+0x15c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0f0      	beq.n	800bef2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	58024400 	.word	0x58024400
 800bf20:	ffff0007 	.word	0xffff0007

0800bf24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf32:	4b53      	ldr	r3, [pc, #332]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d101      	bne.n	800bf42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e099      	b.n	800c076 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf42:	4b4f      	ldr	r3, [pc, #316]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a4e      	ldr	r2, [pc, #312]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf4e:	f7f7 f8c1 	bl	80030d4 <HAL_GetTick>
 800bf52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf54:	e008      	b.n	800bf68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf56:	f7f7 f8bd 	bl	80030d4 <HAL_GetTick>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d901      	bls.n	800bf68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e086      	b.n	800c076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf68:	4b45      	ldr	r3, [pc, #276]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1f0      	bne.n	800bf56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf74:	4b42      	ldr	r3, [pc, #264]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	051b      	lsls	r3, r3, #20
 800bf82:	493f      	ldr	r1, [pc, #252]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	628b      	str	r3, [r1, #40]	; 0x28
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	025b      	lsls	r3, r3, #9
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	041b      	lsls	r3, r3, #16
 800bfa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	061b      	lsls	r3, r3, #24
 800bfb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfb8:	4931      	ldr	r1, [pc, #196]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bfbe:	4b30      	ldr	r3, [pc, #192]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	492d      	ldr	r1, [pc, #180]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfd0:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	4928      	ldr	r1, [pc, #160]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfe2:	4b27      	ldr	r3, [pc, #156]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	4a26      	ldr	r2, [pc, #152]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <RCCEx_PLL3_Config+0x160>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	69d2      	ldr	r2, [r2, #28]
 800bffa:	00d2      	lsls	r2, r2, #3
 800bffc:	4920      	ldr	r1, [pc, #128]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c002:	4b1f      	ldr	r3, [pc, #124]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	4a1e      	ldr	r2, [pc, #120]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	4a19      	ldr	r2, [pc, #100]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c01a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c020:	e00f      	b.n	800c042 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d106      	bne.n	800c036 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c028:	4b15      	ldr	r3, [pc, #84]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4a14      	ldr	r2, [pc, #80]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c02e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c032:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c034:	e005      	b.n	800c042 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c036:	4b12      	ldr	r3, [pc, #72]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	4a11      	ldr	r2, [pc, #68]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c03c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c042:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a0e      	ldr	r2, [pc, #56]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c04e:	f7f7 f841 	bl	80030d4 <HAL_GetTick>
 800c052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c054:	e008      	b.n	800c068 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c056:	f7f7 f83d 	bl	80030d4 <HAL_GetTick>
 800c05a:	4602      	mov	r2, r0
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	2b02      	cmp	r3, #2
 800c062:	d901      	bls.n	800c068 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e006      	b.n	800c076 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <RCCEx_PLL3_Config+0x15c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f0      	beq.n	800c056 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	58024400 	.word	0x58024400
 800c084:	ffff0007 	.word	0xffff0007

0800c088 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d071      	beq.n	800c17e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7f6 fb0e 	bl	80026d0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f003 0310 	and.w	r3, r3, #16
 800c0c6:	2b10      	cmp	r3, #16
 800c0c8:	d050      	beq.n	800c16c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	22ca      	movs	r2, #202	; 0xca
 800c0d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2253      	movs	r2, #83	; 0x53
 800c0d8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa4a 	bl	800c574 <RTC_EnterInitMode>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d124      	bne.n	800c134 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6899      	ldr	r1, [r3, #8]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	4b24      	ldr	r3, [pc, #144]	; (800c188 <HAL_RTC_Init+0x100>)
 800c0f6:	400b      	ands	r3, r1
 800c0f8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6899      	ldr	r1, [r3, #8]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	431a      	orrs	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	430a      	orrs	r2, r1
 800c116:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	0419      	lsls	r1, r3, #16
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fa56 	bl	800c5dc <RTC_ExitInitMode>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d113      	bne.n	800c162 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0203 	bic.w	r2, r2, #3
 800c148:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	69da      	ldr	r2, [r3, #28]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	22ff      	movs	r2, #255	; 0xff
 800c168:	625a      	str	r2, [r3, #36]	; 0x24
 800c16a:	e001      	b.n	800c170 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c170:	7bfb      	ldrb	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	ff8fffbf 	.word	0xff8fffbf

0800c18c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c18c:	b590      	push	{r4, r7, lr}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d101      	bne.n	800c1a6 <HAL_RTC_SetTime+0x1a>
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e089      	b.n	800c2ba <HAL_RTC_SetTime+0x12e>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	22ca      	movs	r2, #202	; 0xca
 800c1bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2253      	movs	r2, #83	; 0x53
 800c1c4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f9d4 	bl	800c574 <RTC_EnterInitMode>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c1d0:	7cfb      	ldrb	r3, [r7, #19]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d161      	bne.n	800c29a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d126      	bne.n	800c22a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d102      	bne.n	800c1f0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fa2f 	bl	800c658 <RTC_ByteToBcd2>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fa28 	bl	800c658 <RTC_ByteToBcd2>
 800c208:	4603      	mov	r3, r0
 800c20a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c20c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	789b      	ldrb	r3, [r3, #2]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fa20 	bl	800c658 <RTC_ByteToBcd2>
 800c218:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c21a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	78db      	ldrb	r3, [r3, #3]
 800c222:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c224:	4313      	orrs	r3, r2
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	e018      	b.n	800c25c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2200      	movs	r2, #0
 800c23c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	785b      	ldrb	r3, [r3, #1]
 800c248:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c24a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c250:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	78db      	ldrb	r3, [r3, #3]
 800c256:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c258:	4313      	orrs	r3, r2
 800c25a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	6979      	ldr	r1, [r7, #20]
 800c262:	4b18      	ldr	r3, [pc, #96]	; (800c2c4 <HAL_RTC_SetTime+0x138>)
 800c264:	400b      	ands	r3, r1
 800c266:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689a      	ldr	r2, [r3, #8]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c276:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6899      	ldr	r1, [r3, #8]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	68da      	ldr	r2, [r3, #12]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	431a      	orrs	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	430a      	orrs	r2, r1
 800c28e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 f9a3 	bl	800c5dc <RTC_ExitInitMode>
 800c296:	4603      	mov	r3, r0
 800c298:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	22ff      	movs	r2, #255	; 0xff
 800c2a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c2a2:	7cfb      	ldrb	r3, [r7, #19]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d103      	bne.n	800c2b0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c2b8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd90      	pop	{r4, r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	007f7f7f 	.word	0x007f7f7f

0800c2c8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	4b22      	ldr	r3, [pc, #136]	; (800c37c <HAL_RTC_GetTime+0xb4>)
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	0c1b      	lsrs	r3, r3, #16
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c302:	b2da      	uxtb	r2, r3
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	0a1b      	lsrs	r3, r3, #8
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c312:	b2da      	uxtb	r2, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c320:	b2da      	uxtb	r2, r3
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	0d9b      	lsrs	r3, r3, #22
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	b2da      	uxtb	r2, r3
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d11a      	bne.n	800c372 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f000 f9a9 	bl	800c698 <RTC_Bcd2ToByte>
 800c346:	4603      	mov	r3, r0
 800c348:	461a      	mov	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	785b      	ldrb	r3, [r3, #1]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f9a0 	bl	800c698 <RTC_Bcd2ToByte>
 800c358:	4603      	mov	r3, r0
 800c35a:	461a      	mov	r2, r3
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	789b      	ldrb	r3, [r3, #2]
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f997 	bl	800c698 <RTC_Bcd2ToByte>
 800c36a:	4603      	mov	r3, r0
 800c36c:	461a      	mov	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	007f7f7f 	.word	0x007f7f7f

0800c380 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <HAL_RTC_SetDate+0x1a>
 800c396:	2302      	movs	r3, #2
 800c398:	e073      	b.n	800c482 <HAL_RTC_SetDate+0x102>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10e      	bne.n	800c3ce <HAL_RTC_SetDate+0x4e>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d008      	beq.n	800c3ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	f023 0310 	bic.w	r3, r3, #16
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	330a      	adds	r3, #10
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d11c      	bne.n	800c40e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	78db      	ldrb	r3, [r3, #3]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f93d 	bl	800c658 <RTC_ByteToBcd2>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	785b      	ldrb	r3, [r3, #1]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 f936 	bl	800c658 <RTC_ByteToBcd2>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	789b      	ldrb	r3, [r3, #2]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f92e 	bl	800c658 <RTC_ByteToBcd2>
 800c3fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c408:	4313      	orrs	r3, r2
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e00e      	b.n	800c42c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	78db      	ldrb	r3, [r3, #3]
 800c412:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	785b      	ldrb	r3, [r3, #1]
 800c418:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c41a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c420:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c428:	4313      	orrs	r3, r2
 800c42a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	22ca      	movs	r2, #202	; 0xca
 800c432:	625a      	str	r2, [r3, #36]	; 0x24
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2253      	movs	r2, #83	; 0x53
 800c43a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 f899 	bl	800c574 <RTC_EnterInitMode>
 800c442:	4603      	mov	r3, r0
 800c444:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c446:	7cfb      	ldrb	r3, [r7, #19]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	6979      	ldr	r1, [r7, #20]
 800c452:	4b0e      	ldr	r3, [pc, #56]	; (800c48c <HAL_RTC_SetDate+0x10c>)
 800c454:	400b      	ands	r3, r1
 800c456:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 f8bf 	bl	800c5dc <RTC_ExitInitMode>
 800c45e:	4603      	mov	r3, r0
 800c460:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	22ff      	movs	r2, #255	; 0xff
 800c468:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c46a:	7cfb      	ldrb	r3, [r7, #19]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d103      	bne.n	800c478 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c480:	7cfb      	ldrb	r3, [r7, #19]


}
 800c482:	4618      	mov	r0, r3
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	bd90      	pop	{r4, r7, pc}
 800c48a:	bf00      	nop
 800c48c:	00ffff3f 	.word	0x00ffff3f

0800c490 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	4b21      	ldr	r3, [pc, #132]	; (800c528 <HAL_RTC_GetDate+0x98>)
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	0c1b      	lsrs	r3, r3, #16
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	0a1b      	lsrs	r3, r3, #8
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f003 031f 	and.w	r3, r3, #31
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	0b5b      	lsrs	r3, r3, #13
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11a      	bne.n	800c51c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	78db      	ldrb	r3, [r3, #3]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f8d4 	bl	800c698 <RTC_Bcd2ToByte>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f8cb 	bl	800c698 <RTC_Bcd2ToByte>
 800c502:	4603      	mov	r3, r0
 800c504:	461a      	mov	r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	789b      	ldrb	r3, [r3, #2]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f8c2 	bl	800c698 <RTC_Bcd2ToByte>
 800c514:	4603      	mov	r3, r0
 800c516:	461a      	mov	r2, r3
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3718      	adds	r7, #24
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	00ffff3f 	.word	0x00ffff3f

0800c52c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a0d      	ldr	r2, [pc, #52]	; (800c570 <HAL_RTC_WaitForSynchro+0x44>)
 800c53a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c53c:	f7f6 fdca 	bl	80030d4 <HAL_GetTick>
 800c540:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c542:	e009      	b.n	800c558 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c544:	f7f6 fdc6 	bl	80030d4 <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c552:	d901      	bls.n	800c558 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e007      	b.n	800c568 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0ee      	beq.n	800c544 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	0003ff5f 	.word	0x0003ff5f

0800c574 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d120      	bne.n	800c5d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c596:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c598:	f7f6 fd9c 	bl	80030d4 <HAL_GetTick>
 800c59c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c59e:	e00d      	b.n	800c5bc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c5a0:	f7f6 fd98 	bl	80030d4 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5ae:	d905      	bls.n	800c5bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2203      	movs	r2, #3
 800c5b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <RTC_EnterInitMode+0x5c>
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d1e7      	bne.n	800c5a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c5e8:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	4a19      	ldr	r2, [pc, #100]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5f2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c5f4:	4b17      	ldr	r3, [pc, #92]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f003 0320 	and.w	r3, r3, #32
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10c      	bne.n	800c61a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff ff93 	bl	800c52c <HAL_RTC_WaitForSynchro>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01e      	beq.n	800c64a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2203      	movs	r2, #3
 800c610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	73fb      	strb	r3, [r7, #15]
 800c618:	e017      	b.n	800c64a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c61a:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	4a0d      	ldr	r2, [pc, #52]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c620:	f023 0320 	bic.w	r3, r3, #32
 800c624:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff ff80 	bl	800c52c <HAL_RTC_WaitForSynchro>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2203      	movs	r2, #3
 800c636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c63a:	2303      	movs	r3, #3
 800c63c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c63e:	4b05      	ldr	r3, [pc, #20]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	4a04      	ldr	r2, [pc, #16]	; (800c654 <RTC_ExitInitMode+0x78>)
 800c644:	f043 0320 	orr.w	r3, r3, #32
 800c648:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	58004000 	.word	0x58004000

0800c658 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c66a:	e005      	b.n	800c678 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c672:	7afb      	ldrb	r3, [r7, #11]
 800c674:	3b0a      	subs	r3, #10
 800c676:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c678:	7afb      	ldrb	r3, [r7, #11]
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	d8f6      	bhi.n	800c66c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	011b      	lsls	r3, r3, #4
 800c684:	b2da      	uxtb	r2, r3
 800c686:	7afb      	ldrb	r3, [r7, #11]
 800c688:	4313      	orrs	r3, r2
 800c68a:	b2db      	uxtb	r3, r3
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	091b      	lsrs	r3, r3, #4
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	0092      	lsls	r2, r2, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	f003 030f 	and.w	r3, r3, #15
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	4413      	add	r3, r2
 800c6be:	b2db      	uxtb	r3, r3
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e10f      	b.n	800c8fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a87      	ldr	r2, [pc, #540]	; (800c908 <HAL_SPI_Init+0x23c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00f      	beq.n	800c70e <HAL_SPI_Init+0x42>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a86      	ldr	r2, [pc, #536]	; (800c90c <HAL_SPI_Init+0x240>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d00a      	beq.n	800c70e <HAL_SPI_Init+0x42>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a84      	ldr	r2, [pc, #528]	; (800c910 <HAL_SPI_Init+0x244>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d005      	beq.n	800c70e <HAL_SPI_Init+0x42>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	2b0f      	cmp	r3, #15
 800c708:	d901      	bls.n	800c70e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e0f7      	b.n	800c8fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f900 	bl	800c914 <SPI_GetPacketSize>
 800c714:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a7b      	ldr	r2, [pc, #492]	; (800c908 <HAL_SPI_Init+0x23c>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00c      	beq.n	800c73a <HAL_SPI_Init+0x6e>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a79      	ldr	r2, [pc, #484]	; (800c90c <HAL_SPI_Init+0x240>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d007      	beq.n	800c73a <HAL_SPI_Init+0x6e>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a78      	ldr	r2, [pc, #480]	; (800c910 <HAL_SPI_Init+0x244>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d002      	beq.n	800c73a <HAL_SPI_Init+0x6e>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b08      	cmp	r3, #8
 800c738:	d811      	bhi.n	800c75e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c73e:	4a72      	ldr	r2, [pc, #456]	; (800c908 <HAL_SPI_Init+0x23c>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d009      	beq.n	800c758 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a70      	ldr	r2, [pc, #448]	; (800c90c <HAL_SPI_Init+0x240>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d004      	beq.n	800c758 <HAL_SPI_Init+0x8c>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a6f      	ldr	r2, [pc, #444]	; (800c910 <HAL_SPI_Init+0x244>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d104      	bne.n	800c762 <HAL_SPI_Init+0x96>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b10      	cmp	r3, #16
 800c75c:	d901      	bls.n	800c762 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e0cd      	b.n	800c8fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7f5 ffdc 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f022 0201 	bic.w	r2, r2, #1
 800c792:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c79e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7a8:	d119      	bne.n	800c7de <HAL_SPI_Init+0x112>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7b2:	d103      	bne.n	800c7bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d008      	beq.n	800c7ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10c      	bne.n	800c7de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c7c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7cc:	d107      	bne.n	800c7de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00f      	beq.n	800c80a <HAL_SPI_Init+0x13e>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	2b06      	cmp	r3, #6
 800c7f0:	d90b      	bls.n	800c80a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	430a      	orrs	r2, r1
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	e007      	b.n	800c81a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c818:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	69da      	ldr	r2, [r3, #28]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c822:	431a      	orrs	r2, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	431a      	orrs	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82c:	ea42 0103 	orr.w	r1, r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68da      	ldr	r2, [r3, #12]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	430a      	orrs	r2, r1
 800c83a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	431a      	orrs	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	431a      	orrs	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	431a      	orrs	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	431a      	orrs	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	431a      	orrs	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c87a:	ea42 0103 	orr.w	r1, r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d113      	bne.n	800c8ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f022 0201 	bic.w	r2, r2, #1
 800c8c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	40013000 	.word	0x40013000
 800c90c:	40003800 	.word	0x40003800
 800c910:	40003c00 	.word	0x40003c00

0800c914 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	095b      	lsrs	r3, r3, #5
 800c922:	3301      	adds	r3, #1
 800c924:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	3301      	adds	r3, #1
 800c92c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	3307      	adds	r3, #7
 800c932:	08db      	lsrs	r3, r3, #3
 800c934:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e049      	b.n	800c9f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7f5 ff95 	bl	80028a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3304      	adds	r3, #4
 800c986:	4619      	mov	r1, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	f000 ff41 	bl	800d810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d001      	beq.n	800ca10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e04c      	b.n	800caaa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a26      	ldr	r2, [pc, #152]	; (800cab8 <HAL_TIM_Base_Start+0xc0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d022      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca2a:	d01d      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a22      	ldr	r2, [pc, #136]	; (800cabc <HAL_TIM_Base_Start+0xc4>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d018      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a21      	ldr	r2, [pc, #132]	; (800cac0 <HAL_TIM_Base_Start+0xc8>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d013      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a1f      	ldr	r2, [pc, #124]	; (800cac4 <HAL_TIM_Base_Start+0xcc>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d00e      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a1e      	ldr	r2, [pc, #120]	; (800cac8 <HAL_TIM_Base_Start+0xd0>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d009      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a1c      	ldr	r2, [pc, #112]	; (800cacc <HAL_TIM_Base_Start+0xd4>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d004      	beq.n	800ca68 <HAL_TIM_Base_Start+0x70>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a1b      	ldr	r2, [pc, #108]	; (800cad0 <HAL_TIM_Base_Start+0xd8>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d115      	bne.n	800ca94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	4b19      	ldr	r3, [pc, #100]	; (800cad4 <HAL_TIM_Base_Start+0xdc>)
 800ca70:	4013      	ands	r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b06      	cmp	r3, #6
 800ca78:	d015      	beq.n	800caa6 <HAL_TIM_Base_Start+0xae>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca80:	d011      	beq.n	800caa6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f042 0201 	orr.w	r2, r2, #1
 800ca90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca92:	e008      	b.n	800caa6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0201 	orr.w	r2, r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	e000      	b.n	800caa8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40000400 	.word	0x40000400
 800cac0:	40000800 	.word	0x40000800
 800cac4:	40000c00 	.word	0x40000c00
 800cac8:	40010400 	.word	0x40010400
 800cacc:	40001800 	.word	0x40001800
 800cad0:	40014000 	.word	0x40014000
 800cad4:	00010007 	.word	0x00010007

0800cad8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6a1a      	ldr	r2, [r3, #32]
 800cae6:	f241 1311 	movw	r3, #4369	; 0x1111
 800caea:	4013      	ands	r3, r2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10f      	bne.n	800cb10 <HAL_TIM_Base_Stop+0x38>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6a1a      	ldr	r2, [r3, #32]
 800caf6:	f240 4344 	movw	r3, #1092	; 0x444
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d107      	bne.n	800cb10 <HAL_TIM_Base_Stop+0x38>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f022 0201 	bic.w	r2, r2, #1
 800cb0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
	...

0800cb28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d001      	beq.n	800cb40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e054      	b.n	800cbea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68da      	ldr	r2, [r3, #12]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f042 0201 	orr.w	r2, r2, #1
 800cb56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a26      	ldr	r2, [pc, #152]	; (800cbf8 <HAL_TIM_Base_Start_IT+0xd0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d022      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb6a:	d01d      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a22      	ldr	r2, [pc, #136]	; (800cbfc <HAL_TIM_Base_Start_IT+0xd4>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d018      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a21      	ldr	r2, [pc, #132]	; (800cc00 <HAL_TIM_Base_Start_IT+0xd8>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d013      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a1f      	ldr	r2, [pc, #124]	; (800cc04 <HAL_TIM_Base_Start_IT+0xdc>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d00e      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a1e      	ldr	r2, [pc, #120]	; (800cc08 <HAL_TIM_Base_Start_IT+0xe0>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d009      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a1c      	ldr	r2, [pc, #112]	; (800cc0c <HAL_TIM_Base_Start_IT+0xe4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d004      	beq.n	800cba8 <HAL_TIM_Base_Start_IT+0x80>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1b      	ldr	r2, [pc, #108]	; (800cc10 <HAL_TIM_Base_Start_IT+0xe8>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d115      	bne.n	800cbd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	689a      	ldr	r2, [r3, #8]
 800cbae:	4b19      	ldr	r3, [pc, #100]	; (800cc14 <HAL_TIM_Base_Start_IT+0xec>)
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b06      	cmp	r3, #6
 800cbb8:	d015      	beq.n	800cbe6 <HAL_TIM_Base_Start_IT+0xbe>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc0:	d011      	beq.n	800cbe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f042 0201 	orr.w	r2, r2, #1
 800cbd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbd2:	e008      	b.n	800cbe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f042 0201 	orr.w	r2, r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	e000      	b.n	800cbe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	40010000 	.word	0x40010000
 800cbfc:	40000400 	.word	0x40000400
 800cc00:	40000800 	.word	0x40000800
 800cc04:	40000c00 	.word	0x40000c00
 800cc08:	40010400 	.word	0x40010400
 800cc0c:	40001800 	.word	0x40001800
 800cc10:	40014000 	.word	0x40014000
 800cc14:	00010007 	.word	0x00010007

0800cc18 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d109      	bne.n	800cc40 <HAL_TIM_OC_Start_IT+0x28>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	bf14      	ite	ne
 800cc38:	2301      	movne	r3, #1
 800cc3a:	2300      	moveq	r3, #0
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	e03c      	b.n	800ccba <HAL_TIM_OC_Start_IT+0xa2>
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b04      	cmp	r3, #4
 800cc44:	d109      	bne.n	800cc5a <HAL_TIM_OC_Start_IT+0x42>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	bf14      	ite	ne
 800cc52:	2301      	movne	r3, #1
 800cc54:	2300      	moveq	r3, #0
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	e02f      	b.n	800ccba <HAL_TIM_OC_Start_IT+0xa2>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b08      	cmp	r3, #8
 800cc5e:	d109      	bne.n	800cc74 <HAL_TIM_OC_Start_IT+0x5c>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	bf14      	ite	ne
 800cc6c:	2301      	movne	r3, #1
 800cc6e:	2300      	moveq	r3, #0
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	e022      	b.n	800ccba <HAL_TIM_OC_Start_IT+0xa2>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b0c      	cmp	r3, #12
 800cc78:	d109      	bne.n	800cc8e <HAL_TIM_OC_Start_IT+0x76>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	bf14      	ite	ne
 800cc86:	2301      	movne	r3, #1
 800cc88:	2300      	moveq	r3, #0
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	e015      	b.n	800ccba <HAL_TIM_OC_Start_IT+0xa2>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b10      	cmp	r3, #16
 800cc92:	d109      	bne.n	800cca8 <HAL_TIM_OC_Start_IT+0x90>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	bf14      	ite	ne
 800cca0:	2301      	movne	r3, #1
 800cca2:	2300      	moveq	r3, #0
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	e008      	b.n	800ccba <HAL_TIM_OC_Start_IT+0xa2>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	bf14      	ite	ne
 800ccb4:	2301      	movne	r3, #1
 800ccb6:	2300      	moveq	r3, #0
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e0ec      	b.n	800ce9c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d104      	bne.n	800ccd2 <HAL_TIM_OC_Start_IT+0xba>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2202      	movs	r2, #2
 800cccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ccd0:	e023      	b.n	800cd1a <HAL_TIM_OC_Start_IT+0x102>
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d104      	bne.n	800cce2 <HAL_TIM_OC_Start_IT+0xca>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2202      	movs	r2, #2
 800ccdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cce0:	e01b      	b.n	800cd1a <HAL_TIM_OC_Start_IT+0x102>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d104      	bne.n	800ccf2 <HAL_TIM_OC_Start_IT+0xda>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2202      	movs	r2, #2
 800ccec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ccf0:	e013      	b.n	800cd1a <HAL_TIM_OC_Start_IT+0x102>
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b0c      	cmp	r3, #12
 800ccf6:	d104      	bne.n	800cd02 <HAL_TIM_OC_Start_IT+0xea>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd00:	e00b      	b.n	800cd1a <HAL_TIM_OC_Start_IT+0x102>
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b10      	cmp	r3, #16
 800cd06:	d104      	bne.n	800cd12 <HAL_TIM_OC_Start_IT+0xfa>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd10:	e003      	b.n	800cd1a <HAL_TIM_OC_Start_IT+0x102>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2202      	movs	r2, #2
 800cd16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b0c      	cmp	r3, #12
 800cd1e:	d841      	bhi.n	800cda4 <HAL_TIM_OC_Start_IT+0x18c>
 800cd20:	a201      	add	r2, pc, #4	; (adr r2, 800cd28 <HAL_TIM_OC_Start_IT+0x110>)
 800cd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd26:	bf00      	nop
 800cd28:	0800cd5d 	.word	0x0800cd5d
 800cd2c:	0800cda5 	.word	0x0800cda5
 800cd30:	0800cda5 	.word	0x0800cda5
 800cd34:	0800cda5 	.word	0x0800cda5
 800cd38:	0800cd6f 	.word	0x0800cd6f
 800cd3c:	0800cda5 	.word	0x0800cda5
 800cd40:	0800cda5 	.word	0x0800cda5
 800cd44:	0800cda5 	.word	0x0800cda5
 800cd48:	0800cd81 	.word	0x0800cd81
 800cd4c:	0800cda5 	.word	0x0800cda5
 800cd50:	0800cda5 	.word	0x0800cda5
 800cd54:	0800cda5 	.word	0x0800cda5
 800cd58:	0800cd93 	.word	0x0800cd93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	68da      	ldr	r2, [r3, #12]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0202 	orr.w	r2, r2, #2
 800cd6a:	60da      	str	r2, [r3, #12]
      break;
 800cd6c:	e01d      	b.n	800cdaa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f042 0204 	orr.w	r2, r2, #4
 800cd7c:	60da      	str	r2, [r3, #12]
      break;
 800cd7e:	e014      	b.n	800cdaa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68da      	ldr	r2, [r3, #12]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f042 0208 	orr.w	r2, r2, #8
 800cd8e:	60da      	str	r2, [r3, #12]
      break;
 800cd90:	e00b      	b.n	800cdaa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68da      	ldr	r2, [r3, #12]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f042 0210 	orr.w	r2, r2, #16
 800cda0:	60da      	str	r2, [r3, #12]
      break;
 800cda2:	e002      	b.n	800cdaa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	73fb      	strb	r3, [r7, #15]
      break;
 800cda8:	bf00      	nop
  }

  if (status == HAL_OK)
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d174      	bne.n	800ce9a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 f943 	bl	800e044 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a38      	ldr	r2, [pc, #224]	; (800cea4 <HAL_TIM_OC_Start_IT+0x28c>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d013      	beq.n	800cdf0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a36      	ldr	r2, [pc, #216]	; (800cea8 <HAL_TIM_OC_Start_IT+0x290>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d00e      	beq.n	800cdf0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a35      	ldr	r2, [pc, #212]	; (800ceac <HAL_TIM_OC_Start_IT+0x294>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d009      	beq.n	800cdf0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a33      	ldr	r2, [pc, #204]	; (800ceb0 <HAL_TIM_OC_Start_IT+0x298>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d004      	beq.n	800cdf0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a32      	ldr	r2, [pc, #200]	; (800ceb4 <HAL_TIM_OC_Start_IT+0x29c>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d101      	bne.n	800cdf4 <HAL_TIM_OC_Start_IT+0x1dc>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e000      	b.n	800cdf6 <HAL_TIM_OC_Start_IT+0x1de>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d007      	beq.n	800ce0a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a25      	ldr	r2, [pc, #148]	; (800cea4 <HAL_TIM_OC_Start_IT+0x28c>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d022      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce1c:	d01d      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a25      	ldr	r2, [pc, #148]	; (800ceb8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d018      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a23      	ldr	r2, [pc, #140]	; (800cebc <HAL_TIM_OC_Start_IT+0x2a4>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d013      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a22      	ldr	r2, [pc, #136]	; (800cec0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00e      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a19      	ldr	r2, [pc, #100]	; (800cea8 <HAL_TIM_OC_Start_IT+0x290>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d009      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a1e      	ldr	r2, [pc, #120]	; (800cec4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d004      	beq.n	800ce5a <HAL_TIM_OC_Start_IT+0x242>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a15      	ldr	r2, [pc, #84]	; (800ceac <HAL_TIM_OC_Start_IT+0x294>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d115      	bne.n	800ce86 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689a      	ldr	r2, [r3, #8]
 800ce60:	4b19      	ldr	r3, [pc, #100]	; (800cec8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ce62:	4013      	ands	r3, r2
 800ce64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b06      	cmp	r3, #6
 800ce6a:	d015      	beq.n	800ce98 <HAL_TIM_OC_Start_IT+0x280>
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce72:	d011      	beq.n	800ce98 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f042 0201 	orr.w	r2, r2, #1
 800ce82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce84:	e008      	b.n	800ce98 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f042 0201 	orr.w	r2, r2, #1
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	e000      	b.n	800ce9a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	40010000 	.word	0x40010000
 800cea8:	40010400 	.word	0x40010400
 800ceac:	40014000 	.word	0x40014000
 800ceb0:	40014400 	.word	0x40014400
 800ceb4:	40014800 	.word	0x40014800
 800ceb8:	40000400 	.word	0x40000400
 800cebc:	40000800 	.word	0x40000800
 800cec0:	40000c00 	.word	0x40000c00
 800cec4:	40001800 	.word	0x40001800
 800cec8:	00010007 	.word	0x00010007

0800cecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e049      	b.n	800cf72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f841 	bl	800cf7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3304      	adds	r3, #4
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	f000 fc80 	bl	800d810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b083      	sub	sp, #12
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf82:	bf00      	nop
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d109      	bne.n	800cfb4 <HAL_TIM_PWM_Start+0x24>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	bf14      	ite	ne
 800cfac:	2301      	movne	r3, #1
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	e03c      	b.n	800d02e <HAL_TIM_PWM_Start+0x9e>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b04      	cmp	r3, #4
 800cfb8:	d109      	bne.n	800cfce <HAL_TIM_PWM_Start+0x3e>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	bf14      	ite	ne
 800cfc6:	2301      	movne	r3, #1
 800cfc8:	2300      	moveq	r3, #0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	e02f      	b.n	800d02e <HAL_TIM_PWM_Start+0x9e>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b08      	cmp	r3, #8
 800cfd2:	d109      	bne.n	800cfe8 <HAL_TIM_PWM_Start+0x58>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	bf14      	ite	ne
 800cfe0:	2301      	movne	r3, #1
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	e022      	b.n	800d02e <HAL_TIM_PWM_Start+0x9e>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b0c      	cmp	r3, #12
 800cfec:	d109      	bne.n	800d002 <HAL_TIM_PWM_Start+0x72>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	bf14      	ite	ne
 800cffa:	2301      	movne	r3, #1
 800cffc:	2300      	moveq	r3, #0
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	e015      	b.n	800d02e <HAL_TIM_PWM_Start+0x9e>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b10      	cmp	r3, #16
 800d006:	d109      	bne.n	800d01c <HAL_TIM_PWM_Start+0x8c>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b01      	cmp	r3, #1
 800d012:	bf14      	ite	ne
 800d014:	2301      	movne	r3, #1
 800d016:	2300      	moveq	r3, #0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	e008      	b.n	800d02e <HAL_TIM_PWM_Start+0x9e>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b01      	cmp	r3, #1
 800d026:	bf14      	ite	ne
 800d028:	2301      	movne	r3, #1
 800d02a:	2300      	moveq	r3, #0
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e0a1      	b.n	800d17a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d104      	bne.n	800d046 <HAL_TIM_PWM_Start+0xb6>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d044:	e023      	b.n	800d08e <HAL_TIM_PWM_Start+0xfe>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b04      	cmp	r3, #4
 800d04a:	d104      	bne.n	800d056 <HAL_TIM_PWM_Start+0xc6>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d054:	e01b      	b.n	800d08e <HAL_TIM_PWM_Start+0xfe>
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	2b08      	cmp	r3, #8
 800d05a:	d104      	bne.n	800d066 <HAL_TIM_PWM_Start+0xd6>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2202      	movs	r2, #2
 800d060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d064:	e013      	b.n	800d08e <HAL_TIM_PWM_Start+0xfe>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b0c      	cmp	r3, #12
 800d06a:	d104      	bne.n	800d076 <HAL_TIM_PWM_Start+0xe6>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d074:	e00b      	b.n	800d08e <HAL_TIM_PWM_Start+0xfe>
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b10      	cmp	r3, #16
 800d07a:	d104      	bne.n	800d086 <HAL_TIM_PWM_Start+0xf6>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2202      	movs	r2, #2
 800d080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d084:	e003      	b.n	800d08e <HAL_TIM_PWM_Start+0xfe>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2202      	movs	r2, #2
 800d08a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2201      	movs	r2, #1
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 ffd4 	bl	800e044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a38      	ldr	r2, [pc, #224]	; (800d184 <HAL_TIM_PWM_Start+0x1f4>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d013      	beq.n	800d0ce <HAL_TIM_PWM_Start+0x13e>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a37      	ldr	r2, [pc, #220]	; (800d188 <HAL_TIM_PWM_Start+0x1f8>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d00e      	beq.n	800d0ce <HAL_TIM_PWM_Start+0x13e>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a35      	ldr	r2, [pc, #212]	; (800d18c <HAL_TIM_PWM_Start+0x1fc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d009      	beq.n	800d0ce <HAL_TIM_PWM_Start+0x13e>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a34      	ldr	r2, [pc, #208]	; (800d190 <HAL_TIM_PWM_Start+0x200>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d004      	beq.n	800d0ce <HAL_TIM_PWM_Start+0x13e>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a32      	ldr	r2, [pc, #200]	; (800d194 <HAL_TIM_PWM_Start+0x204>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d101      	bne.n	800d0d2 <HAL_TIM_PWM_Start+0x142>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <HAL_TIM_PWM_Start+0x144>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d007      	beq.n	800d0e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d0e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a25      	ldr	r2, [pc, #148]	; (800d184 <HAL_TIM_PWM_Start+0x1f4>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d022      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0fa:	d01d      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a25      	ldr	r2, [pc, #148]	; (800d198 <HAL_TIM_PWM_Start+0x208>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d018      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a24      	ldr	r2, [pc, #144]	; (800d19c <HAL_TIM_PWM_Start+0x20c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d013      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a22      	ldr	r2, [pc, #136]	; (800d1a0 <HAL_TIM_PWM_Start+0x210>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00e      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a1a      	ldr	r2, [pc, #104]	; (800d188 <HAL_TIM_PWM_Start+0x1f8>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d009      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <HAL_TIM_PWM_Start+0x214>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d004      	beq.n	800d138 <HAL_TIM_PWM_Start+0x1a8>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a16      	ldr	r2, [pc, #88]	; (800d18c <HAL_TIM_PWM_Start+0x1fc>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d115      	bne.n	800d164 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689a      	ldr	r2, [r3, #8]
 800d13e:	4b1a      	ldr	r3, [pc, #104]	; (800d1a8 <HAL_TIM_PWM_Start+0x218>)
 800d140:	4013      	ands	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b06      	cmp	r3, #6
 800d148:	d015      	beq.n	800d176 <HAL_TIM_PWM_Start+0x1e6>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d150:	d011      	beq.n	800d176 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f042 0201 	orr.w	r2, r2, #1
 800d160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d162:	e008      	b.n	800d176 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f042 0201 	orr.w	r2, r2, #1
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e000      	b.n	800d178 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	40010000 	.word	0x40010000
 800d188:	40010400 	.word	0x40010400
 800d18c:	40014000 	.word	0x40014000
 800d190:	40014400 	.word	0x40014400
 800d194:	40014800 	.word	0x40014800
 800d198:	40000400 	.word	0x40000400
 800d19c:	40000800 	.word	0x40000800
 800d1a0:	40000c00 	.word	0x40000c00
 800d1a4:	40001800 	.word	0x40001800
 800d1a8:	00010007 	.word	0x00010007

0800d1ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d020      	beq.n	800d210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d01b      	beq.n	800d210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f06f 0202 	mvn.w	r2, #2
 800d1e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	f003 0303 	and.w	r3, r3, #3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 faec 	bl	800d7d4 <HAL_TIM_IC_CaptureCallback>
 800d1fc:	e005      	b.n	800d20a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7f3 fa40 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 faef 	bl	800d7e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f003 0304 	and.w	r3, r3, #4
 800d216:	2b00      	cmp	r3, #0
 800d218:	d020      	beq.n	800d25c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f003 0304 	and.w	r3, r3, #4
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01b      	beq.n	800d25c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f06f 0204 	mvn.w	r2, #4
 800d22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2202      	movs	r2, #2
 800d232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fac6 	bl	800d7d4 <HAL_TIM_IC_CaptureCallback>
 800d248:	e005      	b.n	800d256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7f3 fa1a 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fac9 	bl	800d7e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	f003 0308 	and.w	r3, r3, #8
 800d262:	2b00      	cmp	r3, #0
 800d264:	d020      	beq.n	800d2a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f003 0308 	and.w	r3, r3, #8
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01b      	beq.n	800d2a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f06f 0208 	mvn.w	r2, #8
 800d278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2204      	movs	r2, #4
 800d27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 faa0 	bl	800d7d4 <HAL_TIM_IC_CaptureCallback>
 800d294:	e005      	b.n	800d2a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7f3 f9f4 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 faa3 	bl	800d7e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f003 0310 	and.w	r3, r3, #16
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d020      	beq.n	800d2f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f003 0310 	and.w	r3, r3, #16
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01b      	beq.n	800d2f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f06f 0210 	mvn.w	r2, #16
 800d2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2208      	movs	r2, #8
 800d2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69db      	ldr	r3, [r3, #28]
 800d2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa7a 	bl	800d7d4 <HAL_TIM_IC_CaptureCallback>
 800d2e0:	e005      	b.n	800d2ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7f3 f9ce 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fa7d 	bl	800d7e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00c      	beq.n	800d318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	d007      	beq.n	800d318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f06f 0201 	mvn.w	r2, #1
 800d310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7f4 ffa0 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d104      	bne.n	800d32c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00c      	beq.n	800d346 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d332:	2b00      	cmp	r3, #0
 800d334:	d007      	beq.n	800d346 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 ffbb 	bl	800e2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00c      	beq.n	800d36a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d356:	2b00      	cmp	r3, #0
 800d358:	d007      	beq.n	800d36a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 ffb3 	bl	800e2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00c      	beq.n	800d38e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d007      	beq.n	800d38e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fa37 	bl	800d7fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f003 0320 	and.w	r3, r3, #32
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00c      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f06f 0220 	mvn.w	r2, #32
 800d3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 ff7b 	bl	800e2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d101      	bne.n	800d3da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	e0ff      	b.n	800d5da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b14      	cmp	r3, #20
 800d3e6:	f200 80f0 	bhi.w	800d5ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3ea:	a201      	add	r2, pc, #4	; (adr r2, 800d3f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f0:	0800d445 	.word	0x0800d445
 800d3f4:	0800d5cb 	.word	0x0800d5cb
 800d3f8:	0800d5cb 	.word	0x0800d5cb
 800d3fc:	0800d5cb 	.word	0x0800d5cb
 800d400:	0800d485 	.word	0x0800d485
 800d404:	0800d5cb 	.word	0x0800d5cb
 800d408:	0800d5cb 	.word	0x0800d5cb
 800d40c:	0800d5cb 	.word	0x0800d5cb
 800d410:	0800d4c7 	.word	0x0800d4c7
 800d414:	0800d5cb 	.word	0x0800d5cb
 800d418:	0800d5cb 	.word	0x0800d5cb
 800d41c:	0800d5cb 	.word	0x0800d5cb
 800d420:	0800d507 	.word	0x0800d507
 800d424:	0800d5cb 	.word	0x0800d5cb
 800d428:	0800d5cb 	.word	0x0800d5cb
 800d42c:	0800d5cb 	.word	0x0800d5cb
 800d430:	0800d549 	.word	0x0800d549
 800d434:	0800d5cb 	.word	0x0800d5cb
 800d438:	0800d5cb 	.word	0x0800d5cb
 800d43c:	0800d5cb 	.word	0x0800d5cb
 800d440:	0800d589 	.word	0x0800d589
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 fa86 	bl	800d95c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	699a      	ldr	r2, [r3, #24]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f042 0208 	orr.w	r2, r2, #8
 800d45e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	699a      	ldr	r2, [r3, #24]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f022 0204 	bic.w	r2, r2, #4
 800d46e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6999      	ldr	r1, [r3, #24]
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	691a      	ldr	r2, [r3, #16]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	430a      	orrs	r2, r1
 800d480:	619a      	str	r2, [r3, #24]
      break;
 800d482:	e0a5      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	68b9      	ldr	r1, [r7, #8]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 faf6 	bl	800da7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	699a      	ldr	r2, [r3, #24]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d49e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	699a      	ldr	r2, [r3, #24]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6999      	ldr	r1, [r3, #24]
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	021a      	lsls	r2, r3, #8
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	430a      	orrs	r2, r1
 800d4c2:	619a      	str	r2, [r3, #24]
      break;
 800d4c4:	e084      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 fb5f 	bl	800db90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	69da      	ldr	r2, [r3, #28]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f042 0208 	orr.w	r2, r2, #8
 800d4e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	69da      	ldr	r2, [r3, #28]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f022 0204 	bic.w	r2, r2, #4
 800d4f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	69d9      	ldr	r1, [r3, #28]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	691a      	ldr	r2, [r3, #16]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	430a      	orrs	r2, r1
 800d502:	61da      	str	r2, [r3, #28]
      break;
 800d504:	e064      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fbc7 	bl	800dca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	69da      	ldr	r2, [r3, #28]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	69da      	ldr	r2, [r3, #28]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	69d9      	ldr	r1, [r3, #28]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	021a      	lsls	r2, r3, #8
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	61da      	str	r2, [r3, #28]
      break;
 800d546:	e043      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fc10 	bl	800dd74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f042 0208 	orr.w	r2, r2, #8
 800d562:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0204 	bic.w	r2, r2, #4
 800d572:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	691a      	ldr	r2, [r3, #16]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	430a      	orrs	r2, r1
 800d584:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d586:	e023      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68b9      	ldr	r1, [r7, #8]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fc54 	bl	800de3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	021a      	lsls	r2, r3, #8
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5c8:	e002      	b.n	800d5d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	75fb      	strb	r3, [r7, #23]
      break;
 800d5ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop

0800d5e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d101      	bne.n	800d600 <HAL_TIM_ConfigClockSource+0x1c>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e0dc      	b.n	800d7ba <HAL_TIM_ConfigClockSource+0x1d6>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	4b6a      	ldr	r3, [pc, #424]	; (800d7c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a64      	ldr	r2, [pc, #400]	; (800d7c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	f000 80a9 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d63c:	4a62      	ldr	r2, [pc, #392]	; (800d7c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	f200 80ae 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d644:	4a61      	ldr	r2, [pc, #388]	; (800d7cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d646:	4293      	cmp	r3, r2
 800d648:	f000 80a1 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d64c:	4a5f      	ldr	r2, [pc, #380]	; (800d7cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	f200 80a6 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d654:	4a5e      	ldr	r2, [pc, #376]	; (800d7d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d656:	4293      	cmp	r3, r2
 800d658:	f000 8099 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d65c:	4a5c      	ldr	r2, [pc, #368]	; (800d7d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	f200 809e 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d664:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d668:	f000 8091 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d66c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d670:	f200 8096 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d678:	f000 8089 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d67c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d680:	f200 808e 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d688:	d03e      	beq.n	800d708 <HAL_TIM_ConfigClockSource+0x124>
 800d68a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d68e:	f200 8087 	bhi.w	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d696:	f000 8086 	beq.w	800d7a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800d69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d69e:	d87f      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a0:	2b70      	cmp	r3, #112	; 0x70
 800d6a2:	d01a      	beq.n	800d6da <HAL_TIM_ConfigClockSource+0xf6>
 800d6a4:	2b70      	cmp	r3, #112	; 0x70
 800d6a6:	d87b      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a8:	2b60      	cmp	r3, #96	; 0x60
 800d6aa:	d050      	beq.n	800d74e <HAL_TIM_ConfigClockSource+0x16a>
 800d6ac:	2b60      	cmp	r3, #96	; 0x60
 800d6ae:	d877      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b0:	2b50      	cmp	r3, #80	; 0x50
 800d6b2:	d03c      	beq.n	800d72e <HAL_TIM_ConfigClockSource+0x14a>
 800d6b4:	2b50      	cmp	r3, #80	; 0x50
 800d6b6:	d873      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b8:	2b40      	cmp	r3, #64	; 0x40
 800d6ba:	d058      	beq.n	800d76e <HAL_TIM_ConfigClockSource+0x18a>
 800d6bc:	2b40      	cmp	r3, #64	; 0x40
 800d6be:	d86f      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c0:	2b30      	cmp	r3, #48	; 0x30
 800d6c2:	d064      	beq.n	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6c4:	2b30      	cmp	r3, #48	; 0x30
 800d6c6:	d86b      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	d060      	beq.n	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6cc:	2b20      	cmp	r3, #32
 800d6ce:	d867      	bhi.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d05c      	beq.n	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d4:	2b10      	cmp	r3, #16
 800d6d6:	d05a      	beq.n	800d78e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6d8:	e062      	b.n	800d7a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	6899      	ldr	r1, [r3, #8]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f000 fc8b 	bl	800e004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	609a      	str	r2, [r3, #8]
      break;
 800d706:	e04f      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6818      	ldr	r0, [r3, #0]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	6899      	ldr	r1, [r3, #8]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f000 fc74 	bl	800e004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	689a      	ldr	r2, [r3, #8]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d72a:	609a      	str	r2, [r3, #8]
      break;
 800d72c:	e03c      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	6859      	ldr	r1, [r3, #4]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	461a      	mov	r2, r3
 800d73c:	f000 fbe4 	bl	800df08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2150      	movs	r1, #80	; 0x50
 800d746:	4618      	mov	r0, r3
 800d748:	f000 fc3e 	bl	800dfc8 <TIM_ITRx_SetConfig>
      break;
 800d74c:	e02c      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6818      	ldr	r0, [r3, #0]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	6859      	ldr	r1, [r3, #4]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	461a      	mov	r2, r3
 800d75c:	f000 fc03 	bl	800df66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2160      	movs	r1, #96	; 0x60
 800d766:	4618      	mov	r0, r3
 800d768:	f000 fc2e 	bl	800dfc8 <TIM_ITRx_SetConfig>
      break;
 800d76c:	e01c      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	6859      	ldr	r1, [r3, #4]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	461a      	mov	r2, r3
 800d77c:	f000 fbc4 	bl	800df08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2140      	movs	r1, #64	; 0x40
 800d786:	4618      	mov	r0, r3
 800d788:	f000 fc1e 	bl	800dfc8 <TIM_ITRx_SetConfig>
      break;
 800d78c:	e00c      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4619      	mov	r1, r3
 800d798:	4610      	mov	r0, r2
 800d79a:	f000 fc15 	bl	800dfc8 <TIM_ITRx_SetConfig>
      break;
 800d79e:	e003      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7a4:	e000      	b.n	800d7a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	ffceff88 	.word	0xffceff88
 800d7c8:	00100040 	.word	0x00100040
 800d7cc:	00100030 	.word	0x00100030
 800d7d0:	00100020 	.word	0x00100020

0800d7d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a46      	ldr	r2, [pc, #280]	; (800d93c <TIM_Base_SetConfig+0x12c>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d013      	beq.n	800d850 <TIM_Base_SetConfig+0x40>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d82e:	d00f      	beq.n	800d850 <TIM_Base_SetConfig+0x40>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a43      	ldr	r2, [pc, #268]	; (800d940 <TIM_Base_SetConfig+0x130>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d00b      	beq.n	800d850 <TIM_Base_SetConfig+0x40>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a42      	ldr	r2, [pc, #264]	; (800d944 <TIM_Base_SetConfig+0x134>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d007      	beq.n	800d850 <TIM_Base_SetConfig+0x40>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a41      	ldr	r2, [pc, #260]	; (800d948 <TIM_Base_SetConfig+0x138>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d003      	beq.n	800d850 <TIM_Base_SetConfig+0x40>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4a40      	ldr	r2, [pc, #256]	; (800d94c <TIM_Base_SetConfig+0x13c>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d108      	bne.n	800d862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	4313      	orrs	r3, r2
 800d860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a35      	ldr	r2, [pc, #212]	; (800d93c <TIM_Base_SetConfig+0x12c>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d01f      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d870:	d01b      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a32      	ldr	r2, [pc, #200]	; (800d940 <TIM_Base_SetConfig+0x130>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d017      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a31      	ldr	r2, [pc, #196]	; (800d944 <TIM_Base_SetConfig+0x134>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d013      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a30      	ldr	r2, [pc, #192]	; (800d948 <TIM_Base_SetConfig+0x138>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d00f      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a2f      	ldr	r2, [pc, #188]	; (800d94c <TIM_Base_SetConfig+0x13c>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d00b      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a2e      	ldr	r2, [pc, #184]	; (800d950 <TIM_Base_SetConfig+0x140>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d007      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a2d      	ldr	r2, [pc, #180]	; (800d954 <TIM_Base_SetConfig+0x144>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d003      	beq.n	800d8aa <TIM_Base_SetConfig+0x9a>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a2c      	ldr	r2, [pc, #176]	; (800d958 <TIM_Base_SetConfig+0x148>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d108      	bne.n	800d8bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	689a      	ldr	r2, [r3, #8]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a16      	ldr	r2, [pc, #88]	; (800d93c <TIM_Base_SetConfig+0x12c>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00f      	beq.n	800d908 <TIM_Base_SetConfig+0xf8>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a18      	ldr	r2, [pc, #96]	; (800d94c <TIM_Base_SetConfig+0x13c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <TIM_Base_SetConfig+0xf8>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a17      	ldr	r2, [pc, #92]	; (800d950 <TIM_Base_SetConfig+0x140>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d007      	beq.n	800d908 <TIM_Base_SetConfig+0xf8>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a16      	ldr	r2, [pc, #88]	; (800d954 <TIM_Base_SetConfig+0x144>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d003      	beq.n	800d908 <TIM_Base_SetConfig+0xf8>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a15      	ldr	r2, [pc, #84]	; (800d958 <TIM_Base_SetConfig+0x148>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d103      	bne.n	800d910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	691a      	ldr	r2, [r3, #16]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d105      	bne.n	800d92e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	f023 0201 	bic.w	r2, r3, #1
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	611a      	str	r2, [r3, #16]
  }
}
 800d92e:	bf00      	nop
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	40010000 	.word	0x40010000
 800d940:	40000400 	.word	0x40000400
 800d944:	40000800 	.word	0x40000800
 800d948:	40000c00 	.word	0x40000c00
 800d94c:	40010400 	.word	0x40010400
 800d950:	40014000 	.word	0x40014000
 800d954:	40014400 	.word	0x40014400
 800d958:	40014800 	.word	0x40014800

0800d95c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b087      	sub	sp, #28
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	f023 0201 	bic.w	r2, r3, #1
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4b37      	ldr	r3, [pc, #220]	; (800da64 <TIM_OC1_SetConfig+0x108>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 0303 	bic.w	r3, r3, #3
 800d992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f023 0302 	bic.w	r3, r3, #2
 800d9a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a2d      	ldr	r2, [pc, #180]	; (800da68 <TIM_OC1_SetConfig+0x10c>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00f      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x7c>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a2c      	ldr	r2, [pc, #176]	; (800da6c <TIM_OC1_SetConfig+0x110>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d00b      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x7c>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a2b      	ldr	r2, [pc, #172]	; (800da70 <TIM_OC1_SetConfig+0x114>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d007      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x7c>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a2a      	ldr	r2, [pc, #168]	; (800da74 <TIM_OC1_SetConfig+0x118>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d003      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x7c>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a29      	ldr	r2, [pc, #164]	; (800da78 <TIM_OC1_SetConfig+0x11c>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d10c      	bne.n	800d9f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f023 0308 	bic.w	r3, r3, #8
 800d9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f023 0304 	bic.w	r3, r3, #4
 800d9f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a1c      	ldr	r2, [pc, #112]	; (800da68 <TIM_OC1_SetConfig+0x10c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d00f      	beq.n	800da1a <TIM_OC1_SetConfig+0xbe>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a1b      	ldr	r2, [pc, #108]	; (800da6c <TIM_OC1_SetConfig+0x110>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d00b      	beq.n	800da1a <TIM_OC1_SetConfig+0xbe>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a1a      	ldr	r2, [pc, #104]	; (800da70 <TIM_OC1_SetConfig+0x114>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d007      	beq.n	800da1a <TIM_OC1_SetConfig+0xbe>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a19      	ldr	r2, [pc, #100]	; (800da74 <TIM_OC1_SetConfig+0x118>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d003      	beq.n	800da1a <TIM_OC1_SetConfig+0xbe>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a18      	ldr	r2, [pc, #96]	; (800da78 <TIM_OC1_SetConfig+0x11c>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d111      	bne.n	800da3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	695b      	ldr	r3, [r3, #20]
 800da2e:	693a      	ldr	r2, [r7, #16]
 800da30:	4313      	orrs	r3, r2
 800da32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	693a      	ldr	r2, [r7, #16]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	621a      	str	r2, [r3, #32]
}
 800da58:	bf00      	nop
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr
 800da64:	fffeff8f 	.word	0xfffeff8f
 800da68:	40010000 	.word	0x40010000
 800da6c:	40010400 	.word	0x40010400
 800da70:	40014000 	.word	0x40014000
 800da74:	40014400 	.word	0x40014400
 800da78:	40014800 	.word	0x40014800

0800da7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b087      	sub	sp, #28
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	f023 0210 	bic.w	r2, r3, #16
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4b34      	ldr	r3, [pc, #208]	; (800db78 <TIM_OC2_SetConfig+0xfc>)
 800daa8:	4013      	ands	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	021b      	lsls	r3, r3, #8
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f023 0320 	bic.w	r3, r3, #32
 800dac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	011b      	lsls	r3, r3, #4
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a29      	ldr	r2, [pc, #164]	; (800db7c <TIM_OC2_SetConfig+0x100>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d003      	beq.n	800dae4 <TIM_OC2_SetConfig+0x68>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a28      	ldr	r2, [pc, #160]	; (800db80 <TIM_OC2_SetConfig+0x104>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d10d      	bne.n	800db00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	011b      	lsls	r3, r3, #4
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dafe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a1e      	ldr	r2, [pc, #120]	; (800db7c <TIM_OC2_SetConfig+0x100>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d00f      	beq.n	800db28 <TIM_OC2_SetConfig+0xac>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a1d      	ldr	r2, [pc, #116]	; (800db80 <TIM_OC2_SetConfig+0x104>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00b      	beq.n	800db28 <TIM_OC2_SetConfig+0xac>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a1c      	ldr	r2, [pc, #112]	; (800db84 <TIM_OC2_SetConfig+0x108>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d007      	beq.n	800db28 <TIM_OC2_SetConfig+0xac>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a1b      	ldr	r2, [pc, #108]	; (800db88 <TIM_OC2_SetConfig+0x10c>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d003      	beq.n	800db28 <TIM_OC2_SetConfig+0xac>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a1a      	ldr	r2, [pc, #104]	; (800db8c <TIM_OC2_SetConfig+0x110>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d113      	bne.n	800db50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	4313      	orrs	r3, r2
 800db42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	697a      	ldr	r2, [r7, #20]
 800db68:	621a      	str	r2, [r3, #32]
}
 800db6a:	bf00      	nop
 800db6c:	371c      	adds	r7, #28
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	feff8fff 	.word	0xfeff8fff
 800db7c:	40010000 	.word	0x40010000
 800db80:	40010400 	.word	0x40010400
 800db84:	40014000 	.word	0x40014000
 800db88:	40014400 	.word	0x40014400
 800db8c:	40014800 	.word	0x40014800

0800db90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a1b      	ldr	r3, [r3, #32]
 800dba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	4b33      	ldr	r3, [pc, #204]	; (800dc88 <TIM_OC3_SetConfig+0xf8>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f023 0303 	bic.w	r3, r3, #3
 800dbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	021b      	lsls	r3, r3, #8
 800dbe0:	697a      	ldr	r2, [r7, #20]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a28      	ldr	r2, [pc, #160]	; (800dc8c <TIM_OC3_SetConfig+0xfc>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d003      	beq.n	800dbf6 <TIM_OC3_SetConfig+0x66>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a27      	ldr	r2, [pc, #156]	; (800dc90 <TIM_OC3_SetConfig+0x100>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d10d      	bne.n	800dc12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	697a      	ldr	r2, [r7, #20]
 800dc06:	4313      	orrs	r3, r2
 800dc08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a1d      	ldr	r2, [pc, #116]	; (800dc8c <TIM_OC3_SetConfig+0xfc>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00f      	beq.n	800dc3a <TIM_OC3_SetConfig+0xaa>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a1c      	ldr	r2, [pc, #112]	; (800dc90 <TIM_OC3_SetConfig+0x100>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d00b      	beq.n	800dc3a <TIM_OC3_SetConfig+0xaa>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a1b      	ldr	r2, [pc, #108]	; (800dc94 <TIM_OC3_SetConfig+0x104>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d007      	beq.n	800dc3a <TIM_OC3_SetConfig+0xaa>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a1a      	ldr	r2, [pc, #104]	; (800dc98 <TIM_OC3_SetConfig+0x108>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d003      	beq.n	800dc3a <TIM_OC3_SetConfig+0xaa>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a19      	ldr	r2, [pc, #100]	; (800dc9c <TIM_OC3_SetConfig+0x10c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d113      	bne.n	800dc62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	011b      	lsls	r3, r3, #4
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	011b      	lsls	r3, r3, #4
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	621a      	str	r2, [r3, #32]
}
 800dc7c:	bf00      	nop
 800dc7e:	371c      	adds	r7, #28
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	fffeff8f 	.word	0xfffeff8f
 800dc8c:	40010000 	.word	0x40010000
 800dc90:	40010400 	.word	0x40010400
 800dc94:	40014000 	.word	0x40014000
 800dc98:	40014400 	.word	0x40014400
 800dc9c:	40014800 	.word	0x40014800

0800dca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b087      	sub	sp, #28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a1b      	ldr	r3, [r3, #32]
 800dcb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	4b24      	ldr	r3, [pc, #144]	; (800dd5c <TIM_OC4_SetConfig+0xbc>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	021b      	lsls	r3, r3, #8
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	031b      	lsls	r3, r3, #12
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a19      	ldr	r2, [pc, #100]	; (800dd60 <TIM_OC4_SetConfig+0xc0>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d00f      	beq.n	800dd20 <TIM_OC4_SetConfig+0x80>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a18      	ldr	r2, [pc, #96]	; (800dd64 <TIM_OC4_SetConfig+0xc4>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d00b      	beq.n	800dd20 <TIM_OC4_SetConfig+0x80>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a17      	ldr	r2, [pc, #92]	; (800dd68 <TIM_OC4_SetConfig+0xc8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d007      	beq.n	800dd20 <TIM_OC4_SetConfig+0x80>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a16      	ldr	r2, [pc, #88]	; (800dd6c <TIM_OC4_SetConfig+0xcc>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d003      	beq.n	800dd20 <TIM_OC4_SetConfig+0x80>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a15      	ldr	r2, [pc, #84]	; (800dd70 <TIM_OC4_SetConfig+0xd0>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d109      	bne.n	800dd34 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	019b      	lsls	r3, r3, #6
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	685a      	ldr	r2, [r3, #4]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	621a      	str	r2, [r3, #32]
}
 800dd4e:	bf00      	nop
 800dd50:	371c      	adds	r7, #28
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	feff8fff 	.word	0xfeff8fff
 800dd60:	40010000 	.word	0x40010000
 800dd64:	40010400 	.word	0x40010400
 800dd68:	40014000 	.word	0x40014000
 800dd6c:	40014400 	.word	0x40014400
 800dd70:	40014800 	.word	0x40014800

0800dd74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b087      	sub	sp, #28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	4b21      	ldr	r3, [pc, #132]	; (800de24 <TIM_OC5_SetConfig+0xb0>)
 800dda0:	4013      	ands	r3, r2
 800dda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ddb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	041b      	lsls	r3, r3, #16
 800ddbc:	693a      	ldr	r2, [r7, #16]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a18      	ldr	r2, [pc, #96]	; (800de28 <TIM_OC5_SetConfig+0xb4>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00f      	beq.n	800ddea <TIM_OC5_SetConfig+0x76>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a17      	ldr	r2, [pc, #92]	; (800de2c <TIM_OC5_SetConfig+0xb8>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d00b      	beq.n	800ddea <TIM_OC5_SetConfig+0x76>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a16      	ldr	r2, [pc, #88]	; (800de30 <TIM_OC5_SetConfig+0xbc>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d007      	beq.n	800ddea <TIM_OC5_SetConfig+0x76>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a15      	ldr	r2, [pc, #84]	; (800de34 <TIM_OC5_SetConfig+0xc0>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d003      	beq.n	800ddea <TIM_OC5_SetConfig+0x76>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4a14      	ldr	r2, [pc, #80]	; (800de38 <TIM_OC5_SetConfig+0xc4>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d109      	bne.n	800ddfe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	021b      	lsls	r3, r3, #8
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	621a      	str	r2, [r3, #32]
}
 800de18:	bf00      	nop
 800de1a:	371c      	adds	r7, #28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	fffeff8f 	.word	0xfffeff8f
 800de28:	40010000 	.word	0x40010000
 800de2c:	40010400 	.word	0x40010400
 800de30:	40014000 	.word	0x40014000
 800de34:	40014400 	.word	0x40014400
 800de38:	40014800 	.word	0x40014800

0800de3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	4b22      	ldr	r3, [pc, #136]	; (800def0 <TIM_OC6_SetConfig+0xb4>)
 800de68:	4013      	ands	r3, r2
 800de6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	021b      	lsls	r3, r3, #8
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	4313      	orrs	r3, r2
 800de76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	051b      	lsls	r3, r3, #20
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	4313      	orrs	r3, r2
 800de8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a19      	ldr	r2, [pc, #100]	; (800def4 <TIM_OC6_SetConfig+0xb8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00f      	beq.n	800deb4 <TIM_OC6_SetConfig+0x78>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a18      	ldr	r2, [pc, #96]	; (800def8 <TIM_OC6_SetConfig+0xbc>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d00b      	beq.n	800deb4 <TIM_OC6_SetConfig+0x78>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a17      	ldr	r2, [pc, #92]	; (800defc <TIM_OC6_SetConfig+0xc0>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d007      	beq.n	800deb4 <TIM_OC6_SetConfig+0x78>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a16      	ldr	r2, [pc, #88]	; (800df00 <TIM_OC6_SetConfig+0xc4>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d003      	beq.n	800deb4 <TIM_OC6_SetConfig+0x78>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a15      	ldr	r2, [pc, #84]	; (800df04 <TIM_OC6_SetConfig+0xc8>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d109      	bne.n	800dec8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800deba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	029b      	lsls	r3, r3, #10
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	4313      	orrs	r3, r2
 800dec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	697a      	ldr	r2, [r7, #20]
 800decc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	621a      	str	r2, [r3, #32]
}
 800dee2:	bf00      	nop
 800dee4:	371c      	adds	r7, #28
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	feff8fff 	.word	0xfeff8fff
 800def4:	40010000 	.word	0x40010000
 800def8:	40010400 	.word	0x40010400
 800defc:	40014000 	.word	0x40014000
 800df00:	40014400 	.word	0x40014400
 800df04:	40014800 	.word	0x40014800

0800df08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6a1b      	ldr	r3, [r3, #32]
 800df1e:	f023 0201 	bic.w	r2, r3, #1
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	011b      	lsls	r3, r3, #4
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f023 030a 	bic.w	r3, r3, #10
 800df44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	621a      	str	r2, [r3, #32]
}
 800df5a:	bf00      	nop
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df66:	b480      	push	{r7}
 800df68:	b087      	sub	sp, #28
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6a1b      	ldr	r3, [r3, #32]
 800df7c:	f023 0210 	bic.w	r2, r3, #16
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	031b      	lsls	r3, r3, #12
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	4313      	orrs	r3, r2
 800df9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dfa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	011b      	lsls	r3, r3, #4
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	621a      	str	r2, [r3, #32]
}
 800dfba:	bf00      	nop
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
	...

0800dfc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4b09      	ldr	r3, [pc, #36]	; (800e000 <TIM_ITRx_SetConfig+0x38>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfe0:	683a      	ldr	r2, [r7, #0]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	f043 0307 	orr.w	r3, r3, #7
 800dfea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	609a      	str	r2, [r3, #8]
}
 800dff2:	bf00      	nop
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	ffcfff8f 	.word	0xffcfff8f

0800e004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e004:	b480      	push	{r7}
 800e006:	b087      	sub	sp, #28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e01e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	021a      	lsls	r2, r3, #8
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	431a      	orrs	r2, r3
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	4313      	orrs	r3, r2
 800e030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	697a      	ldr	r2, [r7, #20]
 800e036:	609a      	str	r2, [r3, #8]
}
 800e038:	bf00      	nop
 800e03a:	371c      	adds	r7, #28
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e044:	b480      	push	{r7}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f003 031f 	and.w	r3, r3, #31
 800e056:	2201      	movs	r2, #1
 800e058:	fa02 f303 	lsl.w	r3, r2, r3
 800e05c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6a1a      	ldr	r2, [r3, #32]
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	43db      	mvns	r3, r3
 800e066:	401a      	ands	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6a1a      	ldr	r2, [r3, #32]
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	f003 031f 	and.w	r3, r3, #31
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	fa01 f303 	lsl.w	r3, r1, r3
 800e07c:	431a      	orrs	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	621a      	str	r2, [r3, #32]
}
 800e082:	bf00      	nop
 800e084:	371c      	adds	r7, #28
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
	...

0800e090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d101      	bne.n	800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	e06d      	b.n	800e184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a30      	ldr	r2, [pc, #192]	; (800e190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d004      	beq.n	800e0dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a2f      	ldr	r2, [pc, #188]	; (800e194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d108      	bne.n	800e0ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e0e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a20      	ldr	r2, [pc, #128]	; (800e190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d022      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e11a:	d01d      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a1d      	ldr	r2, [pc, #116]	; (800e198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d018      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a1c      	ldr	r2, [pc, #112]	; (800e19c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d013      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a1a      	ldr	r2, [pc, #104]	; (800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d00e      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a15      	ldr	r2, [pc, #84]	; (800e194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d009      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a16      	ldr	r2, [pc, #88]	; (800e1a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d004      	beq.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a15      	ldr	r2, [pc, #84]	; (800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d10c      	bne.n	800e172 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e15e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	4313      	orrs	r3, r2
 800e168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	40010000 	.word	0x40010000
 800e194:	40010400 	.word	0x40010400
 800e198:	40000400 	.word	0x40000400
 800e19c:	40000800 	.word	0x40000800
 800e1a0:	40000c00 	.word	0x40000c00
 800e1a4:	40001800 	.word	0x40001800
 800e1a8:	40014000 	.word	0x40014000

0800e1ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d101      	bne.n	800e1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e065      	b.n	800e294 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4313      	orrs	r3, r2
 800e206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	4313      	orrs	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	4313      	orrs	r3, r2
 800e222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22e:	4313      	orrs	r3, r2
 800e230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	041b      	lsls	r3, r3, #16
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a16      	ldr	r2, [pc, #88]	; (800e2a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d004      	beq.n	800e256 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a14      	ldr	r2, [pc, #80]	; (800e2a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d115      	bne.n	800e282 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	051b      	lsls	r3, r3, #20
 800e262:	4313      	orrs	r3, r2
 800e264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	69db      	ldr	r3, [r3, #28]
 800e270:	4313      	orrs	r3, r2
 800e272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	4313      	orrs	r3, r2
 800e280:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	40010000 	.word	0x40010000
 800e2a4:	40010400 	.word	0x40010400

0800e2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e042      	b.n	800e37c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d106      	bne.n	800e30e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7f4 fba9 	bl	8002a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2224      	movs	r2, #36	; 0x24
 800e312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 0201 	bic.w	r2, r2, #1
 800e324:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f001 fa44 	bl	800f7bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fcd9 	bl	800ecec <UART_SetConfig>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d101      	bne.n	800e344 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e01b      	b.n	800e37c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	689a      	ldr	r2, [r3, #8]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f042 0201 	orr.w	r2, r2, #1
 800e372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 fac3 	bl	800f900 <UART_CheckIdleState>
 800e37a:	4603      	mov	r3, r0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08a      	sub	sp, #40	; 0x28
 800e388:	af02      	add	r7, sp, #8
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	4613      	mov	r3, r2
 800e392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e39a:	2b20      	cmp	r3, #32
 800e39c:	d17b      	bne.n	800e496 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <HAL_UART_Transmit+0x26>
 800e3a4:	88fb      	ldrh	r3, [r7, #6]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e074      	b.n	800e498 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2221      	movs	r2, #33	; 0x21
 800e3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e3be:	f7f4 fe89 	bl	80030d4 <HAL_GetTick>
 800e3c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	88fa      	ldrh	r2, [r7, #6]
 800e3c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	88fa      	ldrh	r2, [r7, #6]
 800e3d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3dc:	d108      	bne.n	800e3f0 <HAL_UART_Transmit+0x6c>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d104      	bne.n	800e3f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	61bb      	str	r3, [r7, #24]
 800e3ee:	e003      	b.n	800e3f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e3f8:	e030      	b.n	800e45c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2200      	movs	r2, #0
 800e402:	2180      	movs	r1, #128	; 0x80
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f001 fb25 	bl	800fa54 <UART_WaitOnFlagUntilTimeout>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2220      	movs	r2, #32
 800e414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	e03d      	b.n	800e498 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10b      	bne.n	800e43a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e430:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	3302      	adds	r3, #2
 800e436:	61bb      	str	r3, [r7, #24]
 800e438:	e007      	b.n	800e44a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	781a      	ldrb	r2, [r3, #0]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	3301      	adds	r3, #1
 800e448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e450:	b29b      	uxth	r3, r3
 800e452:	3b01      	subs	r3, #1
 800e454:	b29a      	uxth	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e462:	b29b      	uxth	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1c8      	bne.n	800e3fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2200      	movs	r2, #0
 800e470:	2140      	movs	r1, #64	; 0x40
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f001 faee 	bl	800fa54 <UART_WaitOnFlagUntilTimeout>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d005      	beq.n	800e48a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2220      	movs	r2, #32
 800e482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e486:	2303      	movs	r3, #3
 800e488:	e006      	b.n	800e498 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2220      	movs	r2, #32
 800e48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	e000      	b.n	800e498 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e496:	2302      	movs	r3, #2
  }
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3720      	adds	r7, #32
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4b4:	2b20      	cmp	r3, #32
 800e4b6:	d137      	bne.n	800e528 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <HAL_UART_Receive_IT+0x24>
 800e4be:	88fb      	ldrh	r3, [r7, #6]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e030      	b.n	800e52a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a18      	ldr	r2, [pc, #96]	; (800e534 <HAL_UART_Receive_IT+0x94>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d01f      	beq.n	800e518 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d018      	beq.n	800e518 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	e853 3f00 	ldrex	r3, [r3]
 800e4f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	623b      	str	r3, [r7, #32]
 800e506:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e508:	69f9      	ldr	r1, [r7, #28]
 800e50a:	6a3a      	ldr	r2, [r7, #32]
 800e50c:	e841 2300 	strex	r3, r2, [r1]
 800e510:	61bb      	str	r3, [r7, #24]
   return(result);
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1e6      	bne.n	800e4e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e518:	88fb      	ldrh	r3, [r7, #6]
 800e51a:	461a      	mov	r2, r3
 800e51c:	68b9      	ldr	r1, [r7, #8]
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f001 fb06 	bl	800fb30 <UART_Start_Receive_IT>
 800e524:	4603      	mov	r3, r0
 800e526:	e000      	b.n	800e52a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e528:	2302      	movs	r3, #2
  }
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3728      	adds	r7, #40	; 0x28
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	58000c00 	.word	0x58000c00

0800e538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b0ba      	sub	sp, #232	; 0xe8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e55e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e562:	f640 030f 	movw	r3, #2063	; 0x80f
 800e566:	4013      	ands	r3, r2
 800e568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e570:	2b00      	cmp	r3, #0
 800e572:	d11b      	bne.n	800e5ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e578:	f003 0320 	and.w	r3, r3, #32
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d015      	beq.n	800e5ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e584:	f003 0320 	and.w	r3, r3, #32
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d105      	bne.n	800e598 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e594:	2b00      	cmp	r3, #0
 800e596:	d009      	beq.n	800e5ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 8377 	beq.w	800ec90 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	4798      	blx	r3
      }
      return;
 800e5aa:	e371      	b.n	800ec90 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f000 8123 	beq.w	800e7fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e5b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e5ba:	4b8d      	ldr	r3, [pc, #564]	; (800e7f0 <HAL_UART_IRQHandler+0x2b8>)
 800e5bc:	4013      	ands	r3, r2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e5c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e5c6:	4b8b      	ldr	r3, [pc, #556]	; (800e7f4 <HAL_UART_IRQHandler+0x2bc>)
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 8116 	beq.w	800e7fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d011      	beq.n	800e600 <HAL_UART_IRQHandler+0xc8>
 800e5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00b      	beq.n	800e600 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f6:	f043 0201 	orr.w	r2, r3, #1
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d011      	beq.n	800e630 <HAL_UART_IRQHandler+0xf8>
 800e60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00b      	beq.n	800e630 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2202      	movs	r2, #2
 800e61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e626:	f043 0204 	orr.w	r2, r3, #4
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d011      	beq.n	800e660 <HAL_UART_IRQHandler+0x128>
 800e63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2204      	movs	r2, #4
 800e64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e656:	f043 0202 	orr.w	r2, r3, #2
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e664:	f003 0308 	and.w	r3, r3, #8
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d017      	beq.n	800e69c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e670:	f003 0320 	and.w	r3, r3, #32
 800e674:	2b00      	cmp	r3, #0
 800e676:	d105      	bne.n	800e684 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e678:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e67c:	4b5c      	ldr	r3, [pc, #368]	; (800e7f0 <HAL_UART_IRQHandler+0x2b8>)
 800e67e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00b      	beq.n	800e69c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2208      	movs	r2, #8
 800e68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e692:	f043 0208 	orr.w	r2, r3, #8
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d012      	beq.n	800e6ce <HAL_UART_IRQHandler+0x196>
 800e6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00c      	beq.n	800e6ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c4:	f043 0220 	orr.w	r2, r3, #32
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 82dd 	beq.w	800ec94 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6de:	f003 0320 	and.w	r3, r3, #32
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d013      	beq.n	800e70e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ea:	f003 0320 	and.w	r3, r3, #32
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d105      	bne.n	800e6fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d007      	beq.n	800e70e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e722:	2b40      	cmp	r3, #64	; 0x40
 800e724:	d005      	beq.n	800e732 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e72a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d054      	beq.n	800e7dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f001 fb1e 	bl	800fd74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e742:	2b40      	cmp	r3, #64	; 0x40
 800e744:	d146      	bne.n	800e7d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3308      	adds	r3, #8
 800e74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e754:	e853 3f00 	ldrex	r3, [r3]
 800e758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e75c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3308      	adds	r3, #8
 800e76e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e77e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e782:	e841 2300 	strex	r3, r2, [r1]
 800e786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e78a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1d9      	bne.n	800e746 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d017      	beq.n	800e7cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a2:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <HAL_UART_IRQHandler+0x2c0>)
 800e7a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7f7 fe9d 	bl	80064ec <HAL_DMA_Abort_IT>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d019      	beq.n	800e7ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ca:	e00f      	b.n	800e7ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 fa77 	bl	800ecc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7d2:	e00b      	b.n	800e7ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fa73 	bl	800ecc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7da:	e007      	b.n	800e7ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fa6f 	bl	800ecc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e7ea:	e253      	b.n	800ec94 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ec:	bf00      	nop
    return;
 800e7ee:	e251      	b.n	800ec94 <HAL_UART_IRQHandler+0x75c>
 800e7f0:	10000001 	.word	0x10000001
 800e7f4:	04000120 	.word	0x04000120
 800e7f8:	0800fe41 	.word	0x0800fe41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e800:	2b01      	cmp	r3, #1
 800e802:	f040 81e7 	bne.w	800ebd4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e80a:	f003 0310 	and.w	r3, r3, #16
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 81e0 	beq.w	800ebd4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e818:	f003 0310 	and.w	r3, r3, #16
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 81d9 	beq.w	800ebd4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2210      	movs	r2, #16
 800e828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e834:	2b40      	cmp	r3, #64	; 0x40
 800e836:	f040 8151 	bne.w	800eadc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a96      	ldr	r2, [pc, #600]	; (800ea9c <HAL_UART_IRQHandler+0x564>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d068      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a93      	ldr	r2, [pc, #588]	; (800eaa0 <HAL_UART_IRQHandler+0x568>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d061      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a91      	ldr	r2, [pc, #580]	; (800eaa4 <HAL_UART_IRQHandler+0x56c>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d05a      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a8e      	ldr	r2, [pc, #568]	; (800eaa8 <HAL_UART_IRQHandler+0x570>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d053      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a8c      	ldr	r2, [pc, #560]	; (800eaac <HAL_UART_IRQHandler+0x574>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d04c      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a89      	ldr	r2, [pc, #548]	; (800eab0 <HAL_UART_IRQHandler+0x578>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d045      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a87      	ldr	r2, [pc, #540]	; (800eab4 <HAL_UART_IRQHandler+0x57c>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d03e      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a84      	ldr	r2, [pc, #528]	; (800eab8 <HAL_UART_IRQHandler+0x580>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d037      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a82      	ldr	r2, [pc, #520]	; (800eabc <HAL_UART_IRQHandler+0x584>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d030      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a7f      	ldr	r2, [pc, #508]	; (800eac0 <HAL_UART_IRQHandler+0x588>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d029      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a7d      	ldr	r2, [pc, #500]	; (800eac4 <HAL_UART_IRQHandler+0x58c>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d022      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a7a      	ldr	r2, [pc, #488]	; (800eac8 <HAL_UART_IRQHandler+0x590>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d01b      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a78      	ldr	r2, [pc, #480]	; (800eacc <HAL_UART_IRQHandler+0x594>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d014      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a75      	ldr	r2, [pc, #468]	; (800ead0 <HAL_UART_IRQHandler+0x598>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00d      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a73      	ldr	r2, [pc, #460]	; (800ead4 <HAL_UART_IRQHandler+0x59c>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d006      	beq.n	800e91a <HAL_UART_IRQHandler+0x3e2>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a70      	ldr	r2, [pc, #448]	; (800ead8 <HAL_UART_IRQHandler+0x5a0>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d106      	bne.n	800e928 <HAL_UART_IRQHandler+0x3f0>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	b29b      	uxth	r3, r3
 800e926:	e005      	b.n	800e934 <HAL_UART_IRQHandler+0x3fc>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	b29b      	uxth	r3, r3
 800e934:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 81ab 	beq.w	800ec98 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e948:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e94c:	429a      	cmp	r2, r3
 800e94e:	f080 81a3 	bcs.w	800ec98 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e968:	f000 8087 	beq.w	800ea7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e978:	e853 3f00 	ldrex	r3, [r3]
 800e97c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	461a      	mov	r2, r3
 800e992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e99a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e9a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e9a6:	e841 2300 	strex	r3, r2, [r1]
 800e9aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e9ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1da      	bne.n	800e96c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3308      	adds	r3, #8
 800e9bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e9c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9c8:	f023 0301 	bic.w	r3, r3, #1
 800e9cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e9da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e9de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e9e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9e6:	e841 2300 	strex	r3, r2, [r1]
 800e9ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e9ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e1      	bne.n	800e9b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3308      	adds	r3, #8
 800e9f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ea02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3308      	adds	r3, #8
 800ea12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ea18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ea24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e3      	bne.n	800e9f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2220      	movs	r2, #32
 800ea2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea40:	e853 3f00 	ldrex	r3, [r3]
 800ea44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea48:	f023 0310 	bic.w	r3, r3, #16
 800ea4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea62:	e841 2300 	strex	r3, r2, [r1]
 800ea66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e4      	bne.n	800ea38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7f7 fa1b 	bl	8005eb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f91d 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea9a:	e0fd      	b.n	800ec98 <HAL_UART_IRQHandler+0x760>
 800ea9c:	40020010 	.word	0x40020010
 800eaa0:	40020028 	.word	0x40020028
 800eaa4:	40020040 	.word	0x40020040
 800eaa8:	40020058 	.word	0x40020058
 800eaac:	40020070 	.word	0x40020070
 800eab0:	40020088 	.word	0x40020088
 800eab4:	400200a0 	.word	0x400200a0
 800eab8:	400200b8 	.word	0x400200b8
 800eabc:	40020410 	.word	0x40020410
 800eac0:	40020428 	.word	0x40020428
 800eac4:	40020440 	.word	0x40020440
 800eac8:	40020458 	.word	0x40020458
 800eacc:	40020470 	.word	0x40020470
 800ead0:	40020488 	.word	0x40020488
 800ead4:	400204a0 	.word	0x400204a0
 800ead8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f000 80cf 	beq.w	800ec9c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eafe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80ca 	beq.w	800ec9c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	461a      	mov	r2, r3
 800eb26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e4      	bne.n	800eb08 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3308      	adds	r3, #8
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb4e:	6a3a      	ldr	r2, [r7, #32]
 800eb50:	4b55      	ldr	r3, [pc, #340]	; (800eca8 <HAL_UART_IRQHandler+0x770>)
 800eb52:	4013      	ands	r3, r2
 800eb54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eb62:	633a      	str	r2, [r7, #48]	; 0x30
 800eb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb6a:	e841 2300 	strex	r3, r2, [r1]
 800eb6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1e3      	bne.n	800eb3e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2220      	movs	r2, #32
 800eb7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	e853 3f00 	ldrex	r3, [r3]
 800eb96:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 0310 	bic.w	r3, r3, #16
 800eb9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ebac:	61fb      	str	r3, [r7, #28]
 800ebae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb0:	69b9      	ldr	r1, [r7, #24]
 800ebb2:	69fa      	ldr	r2, [r7, #28]
 800ebb4:	e841 2300 	strex	r3, r2, [r1]
 800ebb8:	617b      	str	r3, [r7, #20]
   return(result);
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1e4      	bne.n	800eb8a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ebc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ebca:	4619      	mov	r1, r3
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f881 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebd2:	e063      	b.n	800ec9c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ebd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00e      	beq.n	800ebfe <HAL_UART_IRQHandler+0x6c6>
 800ebe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d008      	beq.n	800ebfe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ebf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f001 fe80 	bl	80108fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebfc:	e051      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d014      	beq.n	800ec34 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d105      	bne.n	800ec22 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d008      	beq.n	800ec34 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d03a      	beq.n	800eca0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	4798      	blx	r3
    }
    return;
 800ec32:	e035      	b.n	800eca0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d009      	beq.n	800ec54 <HAL_UART_IRQHandler+0x71c>
 800ec40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d003      	beq.n	800ec54 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f001 f90d 	bl	800fe6c <UART_EndTransmit_IT>
    return;
 800ec52:	e026      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d009      	beq.n	800ec74 <HAL_UART_IRQHandler+0x73c>
 800ec60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d003      	beq.n	800ec74 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f001 fe59 	bl	8010924 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec72:	e016      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d010      	beq.n	800eca2 <HAL_UART_IRQHandler+0x76a>
 800ec80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da0c      	bge.n	800eca2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 fe41 	bl	8010910 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec8e:	e008      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec90:	bf00      	nop
 800ec92:	e006      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
    return;
 800ec94:	bf00      	nop
 800ec96:	e004      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec98:	bf00      	nop
 800ec9a:	e002      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ec9c:	bf00      	nop
 800ec9e:	e000      	b.n	800eca2 <HAL_UART_IRQHandler+0x76a>
    return;
 800eca0:	bf00      	nop
  }
}
 800eca2:	37e8      	adds	r7, #232	; 0xe8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	effffffe 	.word	0xeffffffe

0800ecac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecf0:	b092      	sub	sp, #72	; 0x48
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	689a      	ldr	r2, [r3, #8]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	431a      	orrs	r2, r3
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	69db      	ldr	r3, [r3, #28]
 800ed10:	4313      	orrs	r3, r2
 800ed12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	4bbe      	ldr	r3, [pc, #760]	; (800f014 <UART_SetConfig+0x328>)
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	6812      	ldr	r2, [r2, #0]
 800ed22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	68da      	ldr	r2, [r3, #12]
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4ab3      	ldr	r2, [pc, #716]	; (800f018 <UART_SetConfig+0x32c>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d004      	beq.n	800ed58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed54:	4313      	orrs	r3, r2
 800ed56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	689a      	ldr	r2, [r3, #8]
 800ed5e:	4baf      	ldr	r3, [pc, #700]	; (800f01c <UART_SetConfig+0x330>)
 800ed60:	4013      	ands	r3, r2
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	6812      	ldr	r2, [r2, #0]
 800ed66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed68:	430b      	orrs	r3, r1
 800ed6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed72:	f023 010f 	bic.w	r1, r3, #15
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4aa6      	ldr	r2, [pc, #664]	; (800f020 <UART_SetConfig+0x334>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d177      	bne.n	800ee7c <UART_SetConfig+0x190>
 800ed8c:	4ba5      	ldr	r3, [pc, #660]	; (800f024 <UART_SetConfig+0x338>)
 800ed8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed94:	2b28      	cmp	r3, #40	; 0x28
 800ed96:	d86d      	bhi.n	800ee74 <UART_SetConfig+0x188>
 800ed98:	a201      	add	r2, pc, #4	; (adr r2, 800eda0 <UART_SetConfig+0xb4>)
 800ed9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9e:	bf00      	nop
 800eda0:	0800ee45 	.word	0x0800ee45
 800eda4:	0800ee75 	.word	0x0800ee75
 800eda8:	0800ee75 	.word	0x0800ee75
 800edac:	0800ee75 	.word	0x0800ee75
 800edb0:	0800ee75 	.word	0x0800ee75
 800edb4:	0800ee75 	.word	0x0800ee75
 800edb8:	0800ee75 	.word	0x0800ee75
 800edbc:	0800ee75 	.word	0x0800ee75
 800edc0:	0800ee4d 	.word	0x0800ee4d
 800edc4:	0800ee75 	.word	0x0800ee75
 800edc8:	0800ee75 	.word	0x0800ee75
 800edcc:	0800ee75 	.word	0x0800ee75
 800edd0:	0800ee75 	.word	0x0800ee75
 800edd4:	0800ee75 	.word	0x0800ee75
 800edd8:	0800ee75 	.word	0x0800ee75
 800eddc:	0800ee75 	.word	0x0800ee75
 800ede0:	0800ee55 	.word	0x0800ee55
 800ede4:	0800ee75 	.word	0x0800ee75
 800ede8:	0800ee75 	.word	0x0800ee75
 800edec:	0800ee75 	.word	0x0800ee75
 800edf0:	0800ee75 	.word	0x0800ee75
 800edf4:	0800ee75 	.word	0x0800ee75
 800edf8:	0800ee75 	.word	0x0800ee75
 800edfc:	0800ee75 	.word	0x0800ee75
 800ee00:	0800ee5d 	.word	0x0800ee5d
 800ee04:	0800ee75 	.word	0x0800ee75
 800ee08:	0800ee75 	.word	0x0800ee75
 800ee0c:	0800ee75 	.word	0x0800ee75
 800ee10:	0800ee75 	.word	0x0800ee75
 800ee14:	0800ee75 	.word	0x0800ee75
 800ee18:	0800ee75 	.word	0x0800ee75
 800ee1c:	0800ee75 	.word	0x0800ee75
 800ee20:	0800ee65 	.word	0x0800ee65
 800ee24:	0800ee75 	.word	0x0800ee75
 800ee28:	0800ee75 	.word	0x0800ee75
 800ee2c:	0800ee75 	.word	0x0800ee75
 800ee30:	0800ee75 	.word	0x0800ee75
 800ee34:	0800ee75 	.word	0x0800ee75
 800ee38:	0800ee75 	.word	0x0800ee75
 800ee3c:	0800ee75 	.word	0x0800ee75
 800ee40:	0800ee6d 	.word	0x0800ee6d
 800ee44:	2301      	movs	r3, #1
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4a:	e222      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee4c:	2304      	movs	r3, #4
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee52:	e21e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee54:	2308      	movs	r3, #8
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e21a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee5c:	2310      	movs	r3, #16
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee62:	e216      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee64:	2320      	movs	r3, #32
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e212      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee6c:	2340      	movs	r3, #64	; 0x40
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e20e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee74:	2380      	movs	r3, #128	; 0x80
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e20a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a69      	ldr	r2, [pc, #420]	; (800f028 <UART_SetConfig+0x33c>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d130      	bne.n	800eee8 <UART_SetConfig+0x1fc>
 800ee86:	4b67      	ldr	r3, [pc, #412]	; (800f024 <UART_SetConfig+0x338>)
 800ee88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee8a:	f003 0307 	and.w	r3, r3, #7
 800ee8e:	2b05      	cmp	r3, #5
 800ee90:	d826      	bhi.n	800eee0 <UART_SetConfig+0x1f4>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <UART_SetConfig+0x1ac>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800eeb1 	.word	0x0800eeb1
 800ee9c:	0800eeb9 	.word	0x0800eeb9
 800eea0:	0800eec1 	.word	0x0800eec1
 800eea4:	0800eec9 	.word	0x0800eec9
 800eea8:	0800eed1 	.word	0x0800eed1
 800eeac:	0800eed9 	.word	0x0800eed9
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb6:	e1ec      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eeb8:	2304      	movs	r3, #4
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eebe:	e1e8      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eec0:	2308      	movs	r3, #8
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec6:	e1e4      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eec8:	2310      	movs	r3, #16
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eece:	e1e0      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eed0:	2320      	movs	r3, #32
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e1dc      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eed8:	2340      	movs	r3, #64	; 0x40
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e1d8      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eee0:	2380      	movs	r3, #128	; 0x80
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e1d4      	b.n	800f292 <UART_SetConfig+0x5a6>
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a4f      	ldr	r2, [pc, #316]	; (800f02c <UART_SetConfig+0x340>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d130      	bne.n	800ef54 <UART_SetConfig+0x268>
 800eef2:	4b4c      	ldr	r3, [pc, #304]	; (800f024 <UART_SetConfig+0x338>)
 800eef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eef6:	f003 0307 	and.w	r3, r3, #7
 800eefa:	2b05      	cmp	r3, #5
 800eefc:	d826      	bhi.n	800ef4c <UART_SetConfig+0x260>
 800eefe:	a201      	add	r2, pc, #4	; (adr r2, 800ef04 <UART_SetConfig+0x218>)
 800ef00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef04:	0800ef1d 	.word	0x0800ef1d
 800ef08:	0800ef25 	.word	0x0800ef25
 800ef0c:	0800ef2d 	.word	0x0800ef2d
 800ef10:	0800ef35 	.word	0x0800ef35
 800ef14:	0800ef3d 	.word	0x0800ef3d
 800ef18:	0800ef45 	.word	0x0800ef45
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef22:	e1b6      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef24:	2304      	movs	r3, #4
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2a:	e1b2      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef2c:	2308      	movs	r3, #8
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef32:	e1ae      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef34:	2310      	movs	r3, #16
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3a:	e1aa      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef3c:	2320      	movs	r3, #32
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef42:	e1a6      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e1a2      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef4c:	2380      	movs	r3, #128	; 0x80
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef52:	e19e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a35      	ldr	r2, [pc, #212]	; (800f030 <UART_SetConfig+0x344>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d130      	bne.n	800efc0 <UART_SetConfig+0x2d4>
 800ef5e:	4b31      	ldr	r3, [pc, #196]	; (800f024 <UART_SetConfig+0x338>)
 800ef60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef62:	f003 0307 	and.w	r3, r3, #7
 800ef66:	2b05      	cmp	r3, #5
 800ef68:	d826      	bhi.n	800efb8 <UART_SetConfig+0x2cc>
 800ef6a:	a201      	add	r2, pc, #4	; (adr r2, 800ef70 <UART_SetConfig+0x284>)
 800ef6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef70:	0800ef89 	.word	0x0800ef89
 800ef74:	0800ef91 	.word	0x0800ef91
 800ef78:	0800ef99 	.word	0x0800ef99
 800ef7c:	0800efa1 	.word	0x0800efa1
 800ef80:	0800efa9 	.word	0x0800efa9
 800ef84:	0800efb1 	.word	0x0800efb1
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8e:	e180      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef90:	2304      	movs	r3, #4
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef96:	e17c      	b.n	800f292 <UART_SetConfig+0x5a6>
 800ef98:	2308      	movs	r3, #8
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9e:	e178      	b.n	800f292 <UART_SetConfig+0x5a6>
 800efa0:	2310      	movs	r3, #16
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efa6:	e174      	b.n	800f292 <UART_SetConfig+0x5a6>
 800efa8:	2320      	movs	r3, #32
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efae:	e170      	b.n	800f292 <UART_SetConfig+0x5a6>
 800efb0:	2340      	movs	r3, #64	; 0x40
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efb6:	e16c      	b.n	800f292 <UART_SetConfig+0x5a6>
 800efb8:	2380      	movs	r3, #128	; 0x80
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efbe:	e168      	b.n	800f292 <UART_SetConfig+0x5a6>
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a1b      	ldr	r2, [pc, #108]	; (800f034 <UART_SetConfig+0x348>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d142      	bne.n	800f050 <UART_SetConfig+0x364>
 800efca:	4b16      	ldr	r3, [pc, #88]	; (800f024 <UART_SetConfig+0x338>)
 800efcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efce:	f003 0307 	and.w	r3, r3, #7
 800efd2:	2b05      	cmp	r3, #5
 800efd4:	d838      	bhi.n	800f048 <UART_SetConfig+0x35c>
 800efd6:	a201      	add	r2, pc, #4	; (adr r2, 800efdc <UART_SetConfig+0x2f0>)
 800efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efdc:	0800eff5 	.word	0x0800eff5
 800efe0:	0800effd 	.word	0x0800effd
 800efe4:	0800f005 	.word	0x0800f005
 800efe8:	0800f00d 	.word	0x0800f00d
 800efec:	0800f039 	.word	0x0800f039
 800eff0:	0800f041 	.word	0x0800f041
 800eff4:	2300      	movs	r3, #0
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effa:	e14a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800effc:	2304      	movs	r3, #4
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f002:	e146      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f004:	2308      	movs	r3, #8
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00a:	e142      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f00c:	2310      	movs	r3, #16
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f012:	e13e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f014:	cfff69f3 	.word	0xcfff69f3
 800f018:	58000c00 	.word	0x58000c00
 800f01c:	11fff4ff 	.word	0x11fff4ff
 800f020:	40011000 	.word	0x40011000
 800f024:	58024400 	.word	0x58024400
 800f028:	40004400 	.word	0x40004400
 800f02c:	40004800 	.word	0x40004800
 800f030:	40004c00 	.word	0x40004c00
 800f034:	40005000 	.word	0x40005000
 800f038:	2320      	movs	r3, #32
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e128      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f040:	2340      	movs	r3, #64	; 0x40
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e124      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f048:	2380      	movs	r3, #128	; 0x80
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e120      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4acb      	ldr	r2, [pc, #812]	; (800f384 <UART_SetConfig+0x698>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d176      	bne.n	800f148 <UART_SetConfig+0x45c>
 800f05a:	4bcb      	ldr	r3, [pc, #812]	; (800f388 <UART_SetConfig+0x69c>)
 800f05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f05e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f062:	2b28      	cmp	r3, #40	; 0x28
 800f064:	d86c      	bhi.n	800f140 <UART_SetConfig+0x454>
 800f066:	a201      	add	r2, pc, #4	; (adr r2, 800f06c <UART_SetConfig+0x380>)
 800f068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06c:	0800f111 	.word	0x0800f111
 800f070:	0800f141 	.word	0x0800f141
 800f074:	0800f141 	.word	0x0800f141
 800f078:	0800f141 	.word	0x0800f141
 800f07c:	0800f141 	.word	0x0800f141
 800f080:	0800f141 	.word	0x0800f141
 800f084:	0800f141 	.word	0x0800f141
 800f088:	0800f141 	.word	0x0800f141
 800f08c:	0800f119 	.word	0x0800f119
 800f090:	0800f141 	.word	0x0800f141
 800f094:	0800f141 	.word	0x0800f141
 800f098:	0800f141 	.word	0x0800f141
 800f09c:	0800f141 	.word	0x0800f141
 800f0a0:	0800f141 	.word	0x0800f141
 800f0a4:	0800f141 	.word	0x0800f141
 800f0a8:	0800f141 	.word	0x0800f141
 800f0ac:	0800f121 	.word	0x0800f121
 800f0b0:	0800f141 	.word	0x0800f141
 800f0b4:	0800f141 	.word	0x0800f141
 800f0b8:	0800f141 	.word	0x0800f141
 800f0bc:	0800f141 	.word	0x0800f141
 800f0c0:	0800f141 	.word	0x0800f141
 800f0c4:	0800f141 	.word	0x0800f141
 800f0c8:	0800f141 	.word	0x0800f141
 800f0cc:	0800f129 	.word	0x0800f129
 800f0d0:	0800f141 	.word	0x0800f141
 800f0d4:	0800f141 	.word	0x0800f141
 800f0d8:	0800f141 	.word	0x0800f141
 800f0dc:	0800f141 	.word	0x0800f141
 800f0e0:	0800f141 	.word	0x0800f141
 800f0e4:	0800f141 	.word	0x0800f141
 800f0e8:	0800f141 	.word	0x0800f141
 800f0ec:	0800f131 	.word	0x0800f131
 800f0f0:	0800f141 	.word	0x0800f141
 800f0f4:	0800f141 	.word	0x0800f141
 800f0f8:	0800f141 	.word	0x0800f141
 800f0fc:	0800f141 	.word	0x0800f141
 800f100:	0800f141 	.word	0x0800f141
 800f104:	0800f141 	.word	0x0800f141
 800f108:	0800f141 	.word	0x0800f141
 800f10c:	0800f139 	.word	0x0800f139
 800f110:	2301      	movs	r3, #1
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e0bc      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f118:	2304      	movs	r3, #4
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e0b8      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f120:	2308      	movs	r3, #8
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e0b4      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f128:	2310      	movs	r3, #16
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e0b0      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f130:	2320      	movs	r3, #32
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e0ac      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f138:	2340      	movs	r3, #64	; 0x40
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e0a8      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f140:	2380      	movs	r3, #128	; 0x80
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f146:	e0a4      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a8f      	ldr	r2, [pc, #572]	; (800f38c <UART_SetConfig+0x6a0>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d130      	bne.n	800f1b4 <UART_SetConfig+0x4c8>
 800f152:	4b8d      	ldr	r3, [pc, #564]	; (800f388 <UART_SetConfig+0x69c>)
 800f154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f156:	f003 0307 	and.w	r3, r3, #7
 800f15a:	2b05      	cmp	r3, #5
 800f15c:	d826      	bhi.n	800f1ac <UART_SetConfig+0x4c0>
 800f15e:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <UART_SetConfig+0x478>)
 800f160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f164:	0800f17d 	.word	0x0800f17d
 800f168:	0800f185 	.word	0x0800f185
 800f16c:	0800f18d 	.word	0x0800f18d
 800f170:	0800f195 	.word	0x0800f195
 800f174:	0800f19d 	.word	0x0800f19d
 800f178:	0800f1a5 	.word	0x0800f1a5
 800f17c:	2300      	movs	r3, #0
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f182:	e086      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f184:	2304      	movs	r3, #4
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18a:	e082      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f18c:	2308      	movs	r3, #8
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e07e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f194:	2310      	movs	r3, #16
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19a:	e07a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f19c:	2320      	movs	r3, #32
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e076      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f1a4:	2340      	movs	r3, #64	; 0x40
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1aa:	e072      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f1ac:	2380      	movs	r3, #128	; 0x80
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b2:	e06e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a75      	ldr	r2, [pc, #468]	; (800f390 <UART_SetConfig+0x6a4>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d130      	bne.n	800f220 <UART_SetConfig+0x534>
 800f1be:	4b72      	ldr	r3, [pc, #456]	; (800f388 <UART_SetConfig+0x69c>)
 800f1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1c2:	f003 0307 	and.w	r3, r3, #7
 800f1c6:	2b05      	cmp	r3, #5
 800f1c8:	d826      	bhi.n	800f218 <UART_SetConfig+0x52c>
 800f1ca:	a201      	add	r2, pc, #4	; (adr r2, 800f1d0 <UART_SetConfig+0x4e4>)
 800f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d0:	0800f1e9 	.word	0x0800f1e9
 800f1d4:	0800f1f1 	.word	0x0800f1f1
 800f1d8:	0800f1f9 	.word	0x0800f1f9
 800f1dc:	0800f201 	.word	0x0800f201
 800f1e0:	0800f209 	.word	0x0800f209
 800f1e4:	0800f211 	.word	0x0800f211
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ee:	e050      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f6:	e04c      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f1f8:	2308      	movs	r3, #8
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fe:	e048      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f200:	2310      	movs	r3, #16
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f206:	e044      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f208:	2320      	movs	r3, #32
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20e:	e040      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f210:	2340      	movs	r3, #64	; 0x40
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f216:	e03c      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f218:	2380      	movs	r3, #128	; 0x80
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21e:	e038      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a5b      	ldr	r2, [pc, #364]	; (800f394 <UART_SetConfig+0x6a8>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d130      	bne.n	800f28c <UART_SetConfig+0x5a0>
 800f22a:	4b57      	ldr	r3, [pc, #348]	; (800f388 <UART_SetConfig+0x69c>)
 800f22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f22e:	f003 0307 	and.w	r3, r3, #7
 800f232:	2b05      	cmp	r3, #5
 800f234:	d826      	bhi.n	800f284 <UART_SetConfig+0x598>
 800f236:	a201      	add	r2, pc, #4	; (adr r2, 800f23c <UART_SetConfig+0x550>)
 800f238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23c:	0800f255 	.word	0x0800f255
 800f240:	0800f25d 	.word	0x0800f25d
 800f244:	0800f265 	.word	0x0800f265
 800f248:	0800f26d 	.word	0x0800f26d
 800f24c:	0800f275 	.word	0x0800f275
 800f250:	0800f27d 	.word	0x0800f27d
 800f254:	2302      	movs	r3, #2
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25a:	e01a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f25c:	2304      	movs	r3, #4
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f262:	e016      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f264:	2308      	movs	r3, #8
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26a:	e012      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f26c:	2310      	movs	r3, #16
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f272:	e00e      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f274:	2320      	movs	r3, #32
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27a:	e00a      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f27c:	2340      	movs	r3, #64	; 0x40
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f282:	e006      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f284:	2380      	movs	r3, #128	; 0x80
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28a:	e002      	b.n	800f292 <UART_SetConfig+0x5a6>
 800f28c:	2380      	movs	r3, #128	; 0x80
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a3f      	ldr	r2, [pc, #252]	; (800f394 <UART_SetConfig+0x6a8>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	f040 80f8 	bne.w	800f48e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f29e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2a2:	2b20      	cmp	r3, #32
 800f2a4:	dc46      	bgt.n	800f334 <UART_SetConfig+0x648>
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	f2c0 8082 	blt.w	800f3b0 <UART_SetConfig+0x6c4>
 800f2ac:	3b02      	subs	r3, #2
 800f2ae:	2b1e      	cmp	r3, #30
 800f2b0:	d87e      	bhi.n	800f3b0 <UART_SetConfig+0x6c4>
 800f2b2:	a201      	add	r2, pc, #4	; (adr r2, 800f2b8 <UART_SetConfig+0x5cc>)
 800f2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b8:	0800f33b 	.word	0x0800f33b
 800f2bc:	0800f3b1 	.word	0x0800f3b1
 800f2c0:	0800f343 	.word	0x0800f343
 800f2c4:	0800f3b1 	.word	0x0800f3b1
 800f2c8:	0800f3b1 	.word	0x0800f3b1
 800f2cc:	0800f3b1 	.word	0x0800f3b1
 800f2d0:	0800f353 	.word	0x0800f353
 800f2d4:	0800f3b1 	.word	0x0800f3b1
 800f2d8:	0800f3b1 	.word	0x0800f3b1
 800f2dc:	0800f3b1 	.word	0x0800f3b1
 800f2e0:	0800f3b1 	.word	0x0800f3b1
 800f2e4:	0800f3b1 	.word	0x0800f3b1
 800f2e8:	0800f3b1 	.word	0x0800f3b1
 800f2ec:	0800f3b1 	.word	0x0800f3b1
 800f2f0:	0800f363 	.word	0x0800f363
 800f2f4:	0800f3b1 	.word	0x0800f3b1
 800f2f8:	0800f3b1 	.word	0x0800f3b1
 800f2fc:	0800f3b1 	.word	0x0800f3b1
 800f300:	0800f3b1 	.word	0x0800f3b1
 800f304:	0800f3b1 	.word	0x0800f3b1
 800f308:	0800f3b1 	.word	0x0800f3b1
 800f30c:	0800f3b1 	.word	0x0800f3b1
 800f310:	0800f3b1 	.word	0x0800f3b1
 800f314:	0800f3b1 	.word	0x0800f3b1
 800f318:	0800f3b1 	.word	0x0800f3b1
 800f31c:	0800f3b1 	.word	0x0800f3b1
 800f320:	0800f3b1 	.word	0x0800f3b1
 800f324:	0800f3b1 	.word	0x0800f3b1
 800f328:	0800f3b1 	.word	0x0800f3b1
 800f32c:	0800f3b1 	.word	0x0800f3b1
 800f330:	0800f3a3 	.word	0x0800f3a3
 800f334:	2b40      	cmp	r3, #64	; 0x40
 800f336:	d037      	beq.n	800f3a8 <UART_SetConfig+0x6bc>
 800f338:	e03a      	b.n	800f3b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f33a:	f7fc f931 	bl	800b5a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f33e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f340:	e03c      	b.n	800f3bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f346:	4618      	mov	r0, r3
 800f348:	f7fc f940 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f350:	e034      	b.n	800f3bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f352:	f107 0318 	add.w	r3, r7, #24
 800f356:	4618      	mov	r0, r3
 800f358:	f7fc fa8c 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f360:	e02c      	b.n	800f3bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f362:	4b09      	ldr	r3, [pc, #36]	; (800f388 <UART_SetConfig+0x69c>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f003 0320 	and.w	r3, r3, #32
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d016      	beq.n	800f39c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f36e:	4b06      	ldr	r3, [pc, #24]	; (800f388 <UART_SetConfig+0x69c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	08db      	lsrs	r3, r3, #3
 800f374:	f003 0303 	and.w	r3, r3, #3
 800f378:	4a07      	ldr	r2, [pc, #28]	; (800f398 <UART_SetConfig+0x6ac>)
 800f37a:	fa22 f303 	lsr.w	r3, r2, r3
 800f37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f380:	e01c      	b.n	800f3bc <UART_SetConfig+0x6d0>
 800f382:	bf00      	nop
 800f384:	40011400 	.word	0x40011400
 800f388:	58024400 	.word	0x58024400
 800f38c:	40007800 	.word	0x40007800
 800f390:	40007c00 	.word	0x40007c00
 800f394:	58000c00 	.word	0x58000c00
 800f398:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f39c:	4b9d      	ldr	r3, [pc, #628]	; (800f614 <UART_SetConfig+0x928>)
 800f39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a0:	e00c      	b.n	800f3bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3a2:	4b9d      	ldr	r3, [pc, #628]	; (800f618 <UART_SetConfig+0x92c>)
 800f3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a6:	e009      	b.n	800f3bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ae:	e005      	b.n	800f3bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f3ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 81de 	beq.w	800f780 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c8:	4a94      	ldr	r2, [pc, #592]	; (800f61c <UART_SetConfig+0x930>)
 800f3ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	4613      	mov	r3, r2
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	4413      	add	r3, r2
 800f3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d305      	bcc.n	800f3f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d903      	bls.n	800f3fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3fa:	e1c1      	b.n	800f780 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3fe:	2200      	movs	r2, #0
 800f400:	60bb      	str	r3, [r7, #8]
 800f402:	60fa      	str	r2, [r7, #12]
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f408:	4a84      	ldr	r2, [pc, #528]	; (800f61c <UART_SetConfig+0x930>)
 800f40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	2200      	movs	r2, #0
 800f412:	603b      	str	r3, [r7, #0]
 800f414:	607a      	str	r2, [r7, #4]
 800f416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f41a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f41e:	f7f0 ffaf 	bl	8000380 <__aeabi_uldivmod>
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	4610      	mov	r0, r2
 800f428:	4619      	mov	r1, r3
 800f42a:	f04f 0200 	mov.w	r2, #0
 800f42e:	f04f 0300 	mov.w	r3, #0
 800f432:	020b      	lsls	r3, r1, #8
 800f434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f438:	0202      	lsls	r2, r0, #8
 800f43a:	6979      	ldr	r1, [r7, #20]
 800f43c:	6849      	ldr	r1, [r1, #4]
 800f43e:	0849      	lsrs	r1, r1, #1
 800f440:	2000      	movs	r0, #0
 800f442:	460c      	mov	r4, r1
 800f444:	4605      	mov	r5, r0
 800f446:	eb12 0804 	adds.w	r8, r2, r4
 800f44a:	eb43 0905 	adc.w	r9, r3, r5
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	469a      	mov	sl, r3
 800f456:	4693      	mov	fp, r2
 800f458:	4652      	mov	r2, sl
 800f45a:	465b      	mov	r3, fp
 800f45c:	4640      	mov	r0, r8
 800f45e:	4649      	mov	r1, r9
 800f460:	f7f0 ff8e 	bl	8000380 <__aeabi_uldivmod>
 800f464:	4602      	mov	r2, r0
 800f466:	460b      	mov	r3, r1
 800f468:	4613      	mov	r3, r2
 800f46a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f472:	d308      	bcc.n	800f486 <UART_SetConfig+0x79a>
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f47a:	d204      	bcs.n	800f486 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f482:	60da      	str	r2, [r3, #12]
 800f484:	e17c      	b.n	800f780 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f48c:	e178      	b.n	800f780 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f496:	f040 80c5 	bne.w	800f624 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f49a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f49e:	2b20      	cmp	r3, #32
 800f4a0:	dc48      	bgt.n	800f534 <UART_SetConfig+0x848>
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	db7b      	blt.n	800f59e <UART_SetConfig+0x8b2>
 800f4a6:	2b20      	cmp	r3, #32
 800f4a8:	d879      	bhi.n	800f59e <UART_SetConfig+0x8b2>
 800f4aa:	a201      	add	r2, pc, #4	; (adr r2, 800f4b0 <UART_SetConfig+0x7c4>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f53b 	.word	0x0800f53b
 800f4b4:	0800f543 	.word	0x0800f543
 800f4b8:	0800f59f 	.word	0x0800f59f
 800f4bc:	0800f59f 	.word	0x0800f59f
 800f4c0:	0800f54b 	.word	0x0800f54b
 800f4c4:	0800f59f 	.word	0x0800f59f
 800f4c8:	0800f59f 	.word	0x0800f59f
 800f4cc:	0800f59f 	.word	0x0800f59f
 800f4d0:	0800f55b 	.word	0x0800f55b
 800f4d4:	0800f59f 	.word	0x0800f59f
 800f4d8:	0800f59f 	.word	0x0800f59f
 800f4dc:	0800f59f 	.word	0x0800f59f
 800f4e0:	0800f59f 	.word	0x0800f59f
 800f4e4:	0800f59f 	.word	0x0800f59f
 800f4e8:	0800f59f 	.word	0x0800f59f
 800f4ec:	0800f59f 	.word	0x0800f59f
 800f4f0:	0800f56b 	.word	0x0800f56b
 800f4f4:	0800f59f 	.word	0x0800f59f
 800f4f8:	0800f59f 	.word	0x0800f59f
 800f4fc:	0800f59f 	.word	0x0800f59f
 800f500:	0800f59f 	.word	0x0800f59f
 800f504:	0800f59f 	.word	0x0800f59f
 800f508:	0800f59f 	.word	0x0800f59f
 800f50c:	0800f59f 	.word	0x0800f59f
 800f510:	0800f59f 	.word	0x0800f59f
 800f514:	0800f59f 	.word	0x0800f59f
 800f518:	0800f59f 	.word	0x0800f59f
 800f51c:	0800f59f 	.word	0x0800f59f
 800f520:	0800f59f 	.word	0x0800f59f
 800f524:	0800f59f 	.word	0x0800f59f
 800f528:	0800f59f 	.word	0x0800f59f
 800f52c:	0800f59f 	.word	0x0800f59f
 800f530:	0800f591 	.word	0x0800f591
 800f534:	2b40      	cmp	r3, #64	; 0x40
 800f536:	d02e      	beq.n	800f596 <UART_SetConfig+0x8aa>
 800f538:	e031      	b.n	800f59e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f53a:	f7fa f839 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800f53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f540:	e033      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f542:	f7fa f84b 	bl	80095dc <HAL_RCC_GetPCLK2Freq>
 800f546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f548:	e02f      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fc f83c 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f558:	e027      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f55a:	f107 0318 	add.w	r3, r7, #24
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fc f988 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f568:	e01f      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f56a:	4b2d      	ldr	r3, [pc, #180]	; (800f620 <UART_SetConfig+0x934>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f003 0320 	and.w	r3, r3, #32
 800f572:	2b00      	cmp	r3, #0
 800f574:	d009      	beq.n	800f58a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f576:	4b2a      	ldr	r3, [pc, #168]	; (800f620 <UART_SetConfig+0x934>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	08db      	lsrs	r3, r3, #3
 800f57c:	f003 0303 	and.w	r3, r3, #3
 800f580:	4a24      	ldr	r2, [pc, #144]	; (800f614 <UART_SetConfig+0x928>)
 800f582:	fa22 f303 	lsr.w	r3, r2, r3
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f588:	e00f      	b.n	800f5aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f58a:	4b22      	ldr	r3, [pc, #136]	; (800f614 <UART_SetConfig+0x928>)
 800f58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58e:	e00c      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f590:	4b21      	ldr	r3, [pc, #132]	; (800f618 <UART_SetConfig+0x92c>)
 800f592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f594:	e009      	b.n	800f5aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f59c:	e005      	b.n	800f5aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 80e7 	beq.w	800f780 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b6:	4a19      	ldr	r2, [pc, #100]	; (800f61c <UART_SetConfig+0x930>)
 800f5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5c4:	005a      	lsls	r2, r3, #1
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	085b      	lsrs	r3, r3, #1
 800f5cc:	441a      	add	r2, r3
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	2b0f      	cmp	r3, #15
 800f5dc:	d916      	bls.n	800f60c <UART_SetConfig+0x920>
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5e4:	d212      	bcs.n	800f60c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	f023 030f 	bic.w	r3, r3, #15
 800f5ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f2:	085b      	lsrs	r3, r3, #1
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	f003 0307 	and.w	r3, r3, #7
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5fe:	4313      	orrs	r3, r2
 800f600:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f608:	60da      	str	r2, [r3, #12]
 800f60a:	e0b9      	b.n	800f780 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f60c:	2301      	movs	r3, #1
 800f60e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f612:	e0b5      	b.n	800f780 <UART_SetConfig+0xa94>
 800f614:	03d09000 	.word	0x03d09000
 800f618:	003d0900 	.word	0x003d0900
 800f61c:	0801563c 	.word	0x0801563c
 800f620:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f624:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f628:	2b20      	cmp	r3, #32
 800f62a:	dc49      	bgt.n	800f6c0 <UART_SetConfig+0x9d4>
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	db7c      	blt.n	800f72a <UART_SetConfig+0xa3e>
 800f630:	2b20      	cmp	r3, #32
 800f632:	d87a      	bhi.n	800f72a <UART_SetConfig+0xa3e>
 800f634:	a201      	add	r2, pc, #4	; (adr r2, 800f63c <UART_SetConfig+0x950>)
 800f636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63a:	bf00      	nop
 800f63c:	0800f6c7 	.word	0x0800f6c7
 800f640:	0800f6cf 	.word	0x0800f6cf
 800f644:	0800f72b 	.word	0x0800f72b
 800f648:	0800f72b 	.word	0x0800f72b
 800f64c:	0800f6d7 	.word	0x0800f6d7
 800f650:	0800f72b 	.word	0x0800f72b
 800f654:	0800f72b 	.word	0x0800f72b
 800f658:	0800f72b 	.word	0x0800f72b
 800f65c:	0800f6e7 	.word	0x0800f6e7
 800f660:	0800f72b 	.word	0x0800f72b
 800f664:	0800f72b 	.word	0x0800f72b
 800f668:	0800f72b 	.word	0x0800f72b
 800f66c:	0800f72b 	.word	0x0800f72b
 800f670:	0800f72b 	.word	0x0800f72b
 800f674:	0800f72b 	.word	0x0800f72b
 800f678:	0800f72b 	.word	0x0800f72b
 800f67c:	0800f6f7 	.word	0x0800f6f7
 800f680:	0800f72b 	.word	0x0800f72b
 800f684:	0800f72b 	.word	0x0800f72b
 800f688:	0800f72b 	.word	0x0800f72b
 800f68c:	0800f72b 	.word	0x0800f72b
 800f690:	0800f72b 	.word	0x0800f72b
 800f694:	0800f72b 	.word	0x0800f72b
 800f698:	0800f72b 	.word	0x0800f72b
 800f69c:	0800f72b 	.word	0x0800f72b
 800f6a0:	0800f72b 	.word	0x0800f72b
 800f6a4:	0800f72b 	.word	0x0800f72b
 800f6a8:	0800f72b 	.word	0x0800f72b
 800f6ac:	0800f72b 	.word	0x0800f72b
 800f6b0:	0800f72b 	.word	0x0800f72b
 800f6b4:	0800f72b 	.word	0x0800f72b
 800f6b8:	0800f72b 	.word	0x0800f72b
 800f6bc:	0800f71d 	.word	0x0800f71d
 800f6c0:	2b40      	cmp	r3, #64	; 0x40
 800f6c2:	d02e      	beq.n	800f722 <UART_SetConfig+0xa36>
 800f6c4:	e031      	b.n	800f72a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6c6:	f7f9 ff73 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800f6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6cc:	e033      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6ce:	f7f9 ff85 	bl	80095dc <HAL_RCC_GetPCLK2Freq>
 800f6d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6d4:	e02f      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fb ff76 	bl	800b5cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e4:	e027      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6e6:	f107 0318 	add.w	r3, r7, #24
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fc f8c2 	bl	800b874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6f4:	e01f      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6f6:	4b2d      	ldr	r3, [pc, #180]	; (800f7ac <UART_SetConfig+0xac0>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f003 0320 	and.w	r3, r3, #32
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d009      	beq.n	800f716 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f702:	4b2a      	ldr	r3, [pc, #168]	; (800f7ac <UART_SetConfig+0xac0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	08db      	lsrs	r3, r3, #3
 800f708:	f003 0303 	and.w	r3, r3, #3
 800f70c:	4a28      	ldr	r2, [pc, #160]	; (800f7b0 <UART_SetConfig+0xac4>)
 800f70e:	fa22 f303 	lsr.w	r3, r2, r3
 800f712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f714:	e00f      	b.n	800f736 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f716:	4b26      	ldr	r3, [pc, #152]	; (800f7b0 <UART_SetConfig+0xac4>)
 800f718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f71a:	e00c      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f71c:	4b25      	ldr	r3, [pc, #148]	; (800f7b4 <UART_SetConfig+0xac8>)
 800f71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f720:	e009      	b.n	800f736 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f728:	e005      	b.n	800f736 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f72a:	2300      	movs	r3, #0
 800f72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f734:	bf00      	nop
    }

    if (pclk != 0U)
 800f736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d021      	beq.n	800f780 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	4a1d      	ldr	r2, [pc, #116]	; (800f7b8 <UART_SetConfig+0xacc>)
 800f742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f746:	461a      	mov	r2, r3
 800f748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	085b      	lsrs	r3, r3, #1
 800f754:	441a      	add	r2, r3
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f75e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	2b0f      	cmp	r3, #15
 800f764:	d909      	bls.n	800f77a <UART_SetConfig+0xa8e>
 800f766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f76c:	d205      	bcs.n	800f77a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f770:	b29a      	uxth	r2, r3
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	60da      	str	r2, [r3, #12]
 800f778:	e002      	b.n	800f780 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2201      	movs	r2, #1
 800f784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2200      	movs	r2, #0
 800f794:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2200      	movs	r2, #0
 800f79a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f79c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3748      	adds	r7, #72	; 0x48
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7aa:	bf00      	nop
 800f7ac:	58024400 	.word	0x58024400
 800f7b0:	03d09000 	.word	0x03d09000
 800f7b4:	003d0900 	.word	0x003d0900
 800f7b8:	0801563c 	.word	0x0801563c

0800f7bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7c8:	f003 0308 	and.w	r3, r3, #8
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00a      	beq.n	800f7e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	430a      	orrs	r2, r1
 800f7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	430a      	orrs	r2, r1
 800f806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80c:	f003 0302 	and.w	r3, r3, #2
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00a      	beq.n	800f82a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	430a      	orrs	r2, r1
 800f828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f82e:	f003 0304 	and.w	r3, r3, #4
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00a      	beq.n	800f84c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	430a      	orrs	r2, r1
 800f84a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f850:	f003 0310 	and.w	r3, r3, #16
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00a      	beq.n	800f86e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	430a      	orrs	r2, r1
 800f86c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f872:	f003 0320 	and.w	r3, r3, #32
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	430a      	orrs	r2, r1
 800f88e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d01a      	beq.n	800f8d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	430a      	orrs	r2, r1
 800f8b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8ba:	d10a      	bne.n	800f8d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	430a      	orrs	r2, r1
 800f8d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00a      	beq.n	800f8f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	605a      	str	r2, [r3, #4]
  }
}
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b098      	sub	sp, #96	; 0x60
 800f904:	af02      	add	r7, sp, #8
 800f906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f910:	f7f3 fbe0 	bl	80030d4 <HAL_GetTick>
 800f914:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f003 0308 	and.w	r3, r3, #8
 800f920:	2b08      	cmp	r3, #8
 800f922:	d12f      	bne.n	800f984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f92c:	2200      	movs	r2, #0
 800f92e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 f88e 	bl	800fa54 <UART_WaitOnFlagUntilTimeout>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d022      	beq.n	800f984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	e853 3f00 	ldrex	r3, [r3]
 800f94a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f94e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f952:	653b      	str	r3, [r7, #80]	; 0x50
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95c:	647b      	str	r3, [r7, #68]	; 0x44
 800f95e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f964:	e841 2300 	strex	r3, r2, [r1]
 800f968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e6      	bne.n	800f93e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2220      	movs	r2, #32
 800f974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f980:	2303      	movs	r3, #3
 800f982:	e063      	b.n	800fa4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f003 0304 	and.w	r3, r3, #4
 800f98e:	2b04      	cmp	r3, #4
 800f990:	d149      	bne.n	800fa26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f992:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f99a:	2200      	movs	r2, #0
 800f99c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f857 	bl	800fa54 <UART_WaitOnFlagUntilTimeout>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d03c      	beq.n	800fa26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f9cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e6      	bne.n	800f9ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f023 0301 	bic.w	r3, r3, #1
 800f9f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9fe:	61fa      	str	r2, [r7, #28]
 800fa00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	69b9      	ldr	r1, [r7, #24]
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	617b      	str	r3, [r7, #20]
   return(result);
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e5      	bne.n	800f9de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2220      	movs	r2, #32
 800fa16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa22:	2303      	movs	r3, #3
 800fa24:	e012      	b.n	800fa4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2220      	movs	r2, #32
 800fa2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2220      	movs	r2, #32
 800fa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3758      	adds	r7, #88	; 0x58
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	4613      	mov	r3, r2
 800fa62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa64:	e04f      	b.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa6c:	d04b      	beq.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa6e:	f7f3 fb31 	bl	80030d4 <HAL_GetTick>
 800fa72:	4602      	mov	r2, r0
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	69ba      	ldr	r2, [r7, #24]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d302      	bcc.n	800fa84 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e04e      	b.n	800fb26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f003 0304 	and.w	r3, r3, #4
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d037      	beq.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2b80      	cmp	r3, #128	; 0x80
 800fa9a:	d034      	beq.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b40      	cmp	r3, #64	; 0x40
 800faa0:	d031      	beq.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	f003 0308 	and.w	r3, r3, #8
 800faac:	2b08      	cmp	r3, #8
 800faae:	d110      	bne.n	800fad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2208      	movs	r2, #8
 800fab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 f95b 	bl	800fd74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2208      	movs	r2, #8
 800fac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800face:	2301      	movs	r3, #1
 800fad0:	e029      	b.n	800fb26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fadc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fae0:	d111      	bne.n	800fb06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800faea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f000 f941 	bl	800fd74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2220      	movs	r2, #32
 800faf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fb02:	2303      	movs	r3, #3
 800fb04:	e00f      	b.n	800fb26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	69da      	ldr	r2, [r3, #28]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	4013      	ands	r3, r2
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	bf0c      	ite	eq
 800fb16:	2301      	moveq	r3, #1
 800fb18:	2300      	movne	r3, #0
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d0a0      	beq.n	800fa66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
	...

0800fb30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b0a3      	sub	sp, #140	; 0x8c
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	88fa      	ldrh	r2, [r7, #6]
 800fb48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	88fa      	ldrh	r2, [r7, #6]
 800fb50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb62:	d10e      	bne.n	800fb82 <UART_Start_Receive_IT+0x52>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d105      	bne.n	800fb78 <UART_Start_Receive_IT+0x48>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb76:	e02d      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	22ff      	movs	r2, #255	; 0xff
 800fb7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb80:	e028      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	689b      	ldr	r3, [r3, #8]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10d      	bne.n	800fba6 <UART_Start_Receive_IT+0x76>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d104      	bne.n	800fb9c <UART_Start_Receive_IT+0x6c>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	22ff      	movs	r2, #255	; 0xff
 800fb96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb9a:	e01b      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	227f      	movs	r2, #127	; 0x7f
 800fba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fba4:	e016      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbae:	d10d      	bne.n	800fbcc <UART_Start_Receive_IT+0x9c>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d104      	bne.n	800fbc2 <UART_Start_Receive_IT+0x92>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	227f      	movs	r2, #127	; 0x7f
 800fbbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbc0:	e008      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	223f      	movs	r2, #63	; 0x3f
 800fbc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbca:	e003      	b.n	800fbd4 <UART_Start_Receive_IT+0xa4>
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2222      	movs	r2, #34	; 0x22
 800fbe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3308      	adds	r3, #8
 800fbea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbee:	e853 3f00 	ldrex	r3, [r3]
 800fbf2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fbf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbf6:	f043 0301 	orr.w	r3, r3, #1
 800fbfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3308      	adds	r3, #8
 800fc04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fc08:	673a      	str	r2, [r7, #112]	; 0x70
 800fc0a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc10:	e841 2300 	strex	r3, r2, [r1]
 800fc14:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1e3      	bne.n	800fbe4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc24:	d14f      	bne.n	800fcc6 <UART_Start_Receive_IT+0x196>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc2c:	88fa      	ldrh	r2, [r7, #6]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d349      	bcc.n	800fcc6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc3a:	d107      	bne.n	800fc4c <UART_Start_Receive_IT+0x11c>
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	691b      	ldr	r3, [r3, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d103      	bne.n	800fc4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4a47      	ldr	r2, [pc, #284]	; (800fd64 <UART_Start_Receive_IT+0x234>)
 800fc48:	675a      	str	r2, [r3, #116]	; 0x74
 800fc4a:	e002      	b.n	800fc52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4a46      	ldr	r2, [pc, #280]	; (800fd68 <UART_Start_Receive_IT+0x238>)
 800fc50:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d01a      	beq.n	800fc90 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc62:	e853 3f00 	ldrex	r3, [r3]
 800fc66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	461a      	mov	r2, r3
 800fc78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc7e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc84:	e841 2300 	strex	r3, r2, [r1]
 800fc88:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fc8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1e4      	bne.n	800fc5a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3308      	adds	r3, #8
 800fc96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc9a:	e853 3f00 	ldrex	r3, [r3]
 800fc9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fca6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3308      	adds	r3, #8
 800fcae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcb0:	64ba      	str	r2, [r7, #72]	; 0x48
 800fcb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcb8:	e841 2300 	strex	r3, r2, [r1]
 800fcbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1e5      	bne.n	800fc90 <UART_Start_Receive_IT+0x160>
 800fcc4:	e046      	b.n	800fd54 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcce:	d107      	bne.n	800fce0 <UART_Start_Receive_IT+0x1b0>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	4a24      	ldr	r2, [pc, #144]	; (800fd6c <UART_Start_Receive_IT+0x23c>)
 800fcdc:	675a      	str	r2, [r3, #116]	; 0x74
 800fcde:	e002      	b.n	800fce6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4a23      	ldr	r2, [pc, #140]	; (800fd70 <UART_Start_Receive_IT+0x240>)
 800fce4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d019      	beq.n	800fd22 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf6:	e853 3f00 	ldrex	r3, [r3]
 800fcfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fd02:	677b      	str	r3, [r7, #116]	; 0x74
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd0c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e6      	bne.n	800fcee <UART_Start_Receive_IT+0x1be>
 800fd20:	e018      	b.n	800fd54 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	e853 3f00 	ldrex	r3, [r3]
 800fd2e:	613b      	str	r3, [r7, #16]
   return(result);
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	f043 0320 	orr.w	r3, r3, #32
 800fd36:	67bb      	str	r3, [r7, #120]	; 0x78
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd40:	623b      	str	r3, [r7, #32]
 800fd42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	69f9      	ldr	r1, [r7, #28]
 800fd46:	6a3a      	ldr	r2, [r7, #32]
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e6      	bne.n	800fd22 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	378c      	adds	r7, #140	; 0x8c
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	08010595 	.word	0x08010595
 800fd68:	08010235 	.word	0x08010235
 800fd6c:	0801007d 	.word	0x0801007d
 800fd70:	0800fec5 	.word	0x0800fec5

0800fd74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b095      	sub	sp, #84	; 0x54
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd84:	e853 3f00 	ldrex	r3, [r3]
 800fd88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	461a      	mov	r2, r3
 800fd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9a:	643b      	str	r3, [r7, #64]	; 0x40
 800fd9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fda0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fda2:	e841 2300 	strex	r3, r2, [r1]
 800fda6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1e6      	bne.n	800fd7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3308      	adds	r3, #8
 800fdb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb6:	6a3b      	ldr	r3, [r7, #32]
 800fdb8:	e853 3f00 	ldrex	r3, [r3]
 800fdbc:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdbe:	69fa      	ldr	r2, [r7, #28]
 800fdc0:	4b1e      	ldr	r3, [pc, #120]	; (800fe3c <UART_EndRxTransfer+0xc8>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3308      	adds	r3, #8
 800fdcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fdd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdd6:	e841 2300 	strex	r3, r2, [r1]
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1e5      	bne.n	800fdae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d118      	bne.n	800fe1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	e853 3f00 	ldrex	r3, [r3]
 800fdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	f023 0310 	bic.w	r3, r3, #16
 800fdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	461a      	mov	r2, r3
 800fe06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe08:	61bb      	str	r3, [r7, #24]
 800fe0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0c:	6979      	ldr	r1, [r7, #20]
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	e841 2300 	strex	r3, r2, [r1]
 800fe14:	613b      	str	r3, [r7, #16]
   return(result);
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d1e6      	bne.n	800fdea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fe30:	bf00      	nop
 800fe32:	3754      	adds	r7, #84	; 0x54
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	effffffe 	.word	0xeffffffe

0800fe40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	f7fe ff2e 	bl	800ecc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe64:	bf00      	nop
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b088      	sub	sp, #32
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	e853 3f00 	ldrex	r3, [r3]
 800fe80:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	61bb      	str	r3, [r7, #24]
 800fe94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe96:	6979      	ldr	r1, [r7, #20]
 800fe98:	69ba      	ldr	r2, [r7, #24]
 800fe9a:	e841 2300 	strex	r3, r2, [r1]
 800fe9e:	613b      	str	r3, [r7, #16]
   return(result);
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1e6      	bne.n	800fe74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2220      	movs	r2, #32
 800feaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7fe fef9 	bl	800ecac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feba:	bf00      	nop
 800febc:	3720      	adds	r7, #32
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
	...

0800fec4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b09c      	sub	sp, #112	; 0x70
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fed2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fedc:	2b22      	cmp	r3, #34	; 0x22
 800fede:	f040 80be 	bne.w	801005e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800feec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fef0:	b2d9      	uxtb	r1, r3
 800fef2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fefc:	400a      	ands	r2, r1
 800fefe:	b2d2      	uxtb	r2, r2
 800ff00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	3b01      	subs	r3, #1
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 80a1 	bne.w	801006e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff34:	e853 3f00 	ldrex	r3, [r3]
 800ff38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	461a      	mov	r2, r3
 800ff48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff52:	e841 2300 	strex	r3, r2, [r1]
 800ff56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1e6      	bne.n	800ff2c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3308      	adds	r3, #8
 800ff64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	e853 3f00 	ldrex	r3, [r3]
 800ff6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff70:	f023 0301 	bic.w	r3, r3, #1
 800ff74:	667b      	str	r3, [r7, #100]	; 0x64
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff7e:	647a      	str	r2, [r7, #68]	; 0x44
 800ff80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff86:	e841 2300 	strex	r3, r2, [r1]
 800ff8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1e5      	bne.n	800ff5e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2220      	movs	r2, #32
 800ff96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a33      	ldr	r2, [pc, #204]	; (8010078 <UART_RxISR_8BIT+0x1b4>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d01f      	beq.n	800fff0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d018      	beq.n	800fff0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	623b      	str	r3, [r7, #32]
   return(result);
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ffd2:	663b      	str	r3, [r7, #96]	; 0x60
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffdc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffe4:	e841 2300 	strex	r3, r2, [r1]
 800ffe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1e6      	bne.n	800ffbe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d12e      	bne.n	8010056 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	e853 3f00 	ldrex	r3, [r3]
 801000a:	60fb      	str	r3, [r7, #12]
   return(result);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f023 0310 	bic.w	r3, r3, #16
 8010012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801001c:	61fb      	str	r3, [r7, #28]
 801001e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010020:	69b9      	ldr	r1, [r7, #24]
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	e841 2300 	strex	r3, r2, [r1]
 8010028:	617b      	str	r3, [r7, #20]
   return(result);
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1e6      	bne.n	800fffe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	69db      	ldr	r3, [r3, #28]
 8010036:	f003 0310 	and.w	r3, r3, #16
 801003a:	2b10      	cmp	r3, #16
 801003c:	d103      	bne.n	8010046 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2210      	movs	r2, #16
 8010044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801004c:	4619      	mov	r1, r3
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f7fe fe40 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010054:	e00b      	b.n	801006e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7f0 fb4a 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 801005c:	e007      	b.n	801006e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	699a      	ldr	r2, [r3, #24]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f042 0208 	orr.w	r2, r2, #8
 801006c:	619a      	str	r2, [r3, #24]
}
 801006e:	bf00      	nop
 8010070:	3770      	adds	r7, #112	; 0x70
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	58000c00 	.word	0x58000c00

0801007c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b09c      	sub	sp, #112	; 0x70
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801008a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010094:	2b22      	cmp	r3, #34	; 0x22
 8010096:	f040 80be 	bne.w	8010216 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80100aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80100ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80100b2:	4013      	ands	r3, r2
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100be:	1c9a      	adds	r2, r3, #2
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	3b01      	subs	r3, #1
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100dc:	b29b      	uxth	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f040 80a1 	bne.w	8010226 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ec:	e853 3f00 	ldrex	r3, [r3]
 80100f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80100f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100f8:	667b      	str	r3, [r7, #100]	; 0x64
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010102:	657b      	str	r3, [r7, #84]	; 0x54
 8010104:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801010a:	e841 2300 	strex	r3, r2, [r1]
 801010e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1e6      	bne.n	80100e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3308      	adds	r3, #8
 801011c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801011e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010120:	e853 3f00 	ldrex	r3, [r3]
 8010124:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	f023 0301 	bic.w	r3, r3, #1
 801012c:	663b      	str	r3, [r7, #96]	; 0x60
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	3308      	adds	r3, #8
 8010134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010136:	643a      	str	r2, [r7, #64]	; 0x40
 8010138:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801013c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801013e:	e841 2300 	strex	r3, r2, [r1]
 8010142:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1e5      	bne.n	8010116 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2220      	movs	r2, #32
 801014e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a33      	ldr	r2, [pc, #204]	; (8010230 <UART_RxISR_16BIT+0x1b4>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d01f      	beq.n	80101a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010172:	2b00      	cmp	r3, #0
 8010174:	d018      	beq.n	80101a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	e853 3f00 	ldrex	r3, [r3]
 8010182:	61fb      	str	r3, [r7, #28]
   return(result);
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801018a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010196:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801019a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801019c:	e841 2300 	strex	r3, r2, [r1]
 80101a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1e6      	bne.n	8010176 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d12e      	bne.n	801020e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	e853 3f00 	ldrex	r3, [r3]
 80101c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	f023 0310 	bic.w	r3, r3, #16
 80101ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	461a      	mov	r2, r3
 80101d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101d4:	61bb      	str	r3, [r7, #24]
 80101d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d8:	6979      	ldr	r1, [r7, #20]
 80101da:	69ba      	ldr	r2, [r7, #24]
 80101dc:	e841 2300 	strex	r3, r2, [r1]
 80101e0:	613b      	str	r3, [r7, #16]
   return(result);
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1e6      	bne.n	80101b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	69db      	ldr	r3, [r3, #28]
 80101ee:	f003 0310 	and.w	r3, r3, #16
 80101f2:	2b10      	cmp	r3, #16
 80101f4:	d103      	bne.n	80101fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2210      	movs	r2, #16
 80101fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7fe fd64 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801020c:	e00b      	b.n	8010226 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7f0 fa6e 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 8010214:	e007      	b.n	8010226 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	699a      	ldr	r2, [r3, #24]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f042 0208 	orr.w	r2, r2, #8
 8010224:	619a      	str	r2, [r3, #24]
}
 8010226:	bf00      	nop
 8010228:	3770      	adds	r7, #112	; 0x70
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	58000c00 	.word	0x58000c00

08010234 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b0ac      	sub	sp, #176	; 0xb0
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010242:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	69db      	ldr	r3, [r3, #28]
 801024c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801026a:	2b22      	cmp	r3, #34	; 0x22
 801026c:	f040 8180 	bne.w	8010570 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010276:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801027a:	e123      	b.n	80104c4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010282:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010286:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801028a:	b2d9      	uxtb	r1, r3
 801028c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010290:	b2da      	uxtb	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010296:	400a      	ands	r2, r1
 8010298:	b2d2      	uxtb	r2, r2
 801029a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	3b01      	subs	r3, #1
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	69db      	ldr	r3, [r3, #28]
 80102be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102c6:	f003 0307 	and.w	r3, r3, #7
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d053      	beq.n	8010376 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102d2:	f003 0301 	and.w	r3, r3, #1
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d011      	beq.n	80102fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80102da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00b      	beq.n	80102fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2201      	movs	r2, #1
 80102ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f4:	f043 0201 	orr.w	r2, r3, #1
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010302:	f003 0302 	and.w	r3, r3, #2
 8010306:	2b00      	cmp	r3, #0
 8010308:	d011      	beq.n	801032e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801030a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00b      	beq.n	801032e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2202      	movs	r2, #2
 801031c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010324:	f043 0204 	orr.w	r2, r3, #4
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801032e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010332:	f003 0304 	and.w	r3, r3, #4
 8010336:	2b00      	cmp	r3, #0
 8010338:	d011      	beq.n	801035e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801033a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00b      	beq.n	801035e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2204      	movs	r2, #4
 801034c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010354:	f043 0202 	orr.w	r2, r3, #2
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010364:	2b00      	cmp	r3, #0
 8010366:	d006      	beq.n	8010376 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7fe fca9 	bl	800ecc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801037c:	b29b      	uxth	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 80a0 	bne.w	80104c4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801038a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801038c:	e853 3f00 	ldrex	r3, [r3]
 8010390:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	461a      	mov	r2, r3
 80103a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80103a8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80103ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80103ae:	e841 2300 	strex	r3, r2, [r1]
 80103b2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80103b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1e4      	bne.n	8010384 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c4:	e853 3f00 	ldrex	r3, [r3]
 80103c8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80103ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103cc:	4b6e      	ldr	r3, [pc, #440]	; (8010588 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80103ce:	4013      	ands	r3, r2
 80103d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3308      	adds	r3, #8
 80103da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103de:	66ba      	str	r2, [r7, #104]	; 0x68
 80103e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80103e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80103ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1e3      	bne.n	80103ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2220      	movs	r2, #32
 80103f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a60      	ldr	r2, [pc, #384]	; (801058c <UART_RxISR_8BIT_FIFOEN+0x358>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d021      	beq.n	8010454 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801041a:	2b00      	cmp	r3, #0
 801041c:	d01a      	beq.n	8010454 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010426:	e853 3f00 	ldrex	r3, [r3]
 801042a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801042c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801042e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	461a      	mov	r2, r3
 801043c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010440:	657b      	str	r3, [r7, #84]	; 0x54
 8010442:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801044e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e4      	bne.n	801041e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010458:	2b01      	cmp	r3, #1
 801045a:	d130      	bne.n	80104be <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046a:	e853 3f00 	ldrex	r3, [r3]
 801046e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	f023 0310 	bic.w	r3, r3, #16
 8010476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	461a      	mov	r2, r3
 8010480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010484:	643b      	str	r3, [r7, #64]	; 0x40
 8010486:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801048a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801048c:	e841 2300 	strex	r3, r2, [r1]
 8010490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1e4      	bne.n	8010462 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	69db      	ldr	r3, [r3, #28]
 801049e:	f003 0310 	and.w	r3, r3, #16
 80104a2:	2b10      	cmp	r3, #16
 80104a4:	d103      	bne.n	80104ae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2210      	movs	r2, #16
 80104ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7fe fc0c 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
 80104bc:	e002      	b.n	80104c4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7f0 f916 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d006      	beq.n	80104da <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80104cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104d0:	f003 0320 	and.w	r3, r3, #32
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f47f aed1 	bne.w	801027c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80104e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d049      	beq.n	8010580 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d242      	bcs.n	8010580 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3308      	adds	r3, #8
 8010500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	e853 3f00 	ldrex	r3, [r3]
 8010508:	61fb      	str	r3, [r7, #28]
   return(result);
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3308      	adds	r3, #8
 801051a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801051e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010526:	e841 2300 	strex	r3, r2, [r1]
 801052a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1e3      	bne.n	80104fa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a16      	ldr	r2, [pc, #88]	; (8010590 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010536:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	e853 3f00 	ldrex	r3, [r3]
 8010544:	60bb      	str	r3, [r7, #8]
   return(result);
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	f043 0320 	orr.w	r3, r3, #32
 801054c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801055a:	61bb      	str	r3, [r7, #24]
 801055c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055e:	6979      	ldr	r1, [r7, #20]
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	e841 2300 	strex	r3, r2, [r1]
 8010566:	613b      	str	r3, [r7, #16]
   return(result);
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1e4      	bne.n	8010538 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801056e:	e007      	b.n	8010580 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	699a      	ldr	r2, [r3, #24]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f042 0208 	orr.w	r2, r2, #8
 801057e:	619a      	str	r2, [r3, #24]
}
 8010580:	bf00      	nop
 8010582:	37b0      	adds	r7, #176	; 0xb0
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	effffffe 	.word	0xeffffffe
 801058c:	58000c00 	.word	0x58000c00
 8010590:	0800fec5 	.word	0x0800fec5

08010594 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b0ae      	sub	sp, #184	; 0xb8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	689b      	ldr	r3, [r3, #8]
 80105c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105ca:	2b22      	cmp	r3, #34	; 0x22
 80105cc:	f040 8184 	bne.w	80108d8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105d6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105da:	e127      	b.n	801082c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80105ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80105f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80105f6:	4013      	ands	r3, r2
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010604:	1c9a      	adds	r2, r3, #2
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010610:	b29b      	uxth	r3, r3
 8010612:	3b01      	subs	r3, #1
 8010614:	b29a      	uxth	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801062a:	f003 0307 	and.w	r3, r3, #7
 801062e:	2b00      	cmp	r3, #0
 8010630:	d053      	beq.n	80106da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010636:	f003 0301 	and.w	r3, r3, #1
 801063a:	2b00      	cmp	r3, #0
 801063c:	d011      	beq.n	8010662 <UART_RxISR_16BIT_FIFOEN+0xce>
 801063e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00b      	beq.n	8010662 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2201      	movs	r2, #1
 8010650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010658:	f043 0201 	orr.w	r2, r3, #1
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010662:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010666:	f003 0302 	and.w	r3, r3, #2
 801066a:	2b00      	cmp	r3, #0
 801066c:	d011      	beq.n	8010692 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801066e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00b      	beq.n	8010692 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2202      	movs	r2, #2
 8010680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010688:	f043 0204 	orr.w	r2, r3, #4
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010696:	f003 0304 	and.w	r3, r3, #4
 801069a:	2b00      	cmp	r3, #0
 801069c:	d011      	beq.n	80106c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801069e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106a2:	f003 0301 	and.w	r3, r3, #1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00b      	beq.n	80106c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2204      	movs	r2, #4
 80106b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106b8:	f043 0202 	orr.w	r2, r3, #2
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d006      	beq.n	80106da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7fe faf7 	bl	800ecc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2200      	movs	r2, #0
 80106d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f040 80a2 	bne.w	801082c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106f0:	e853 3f00 	ldrex	r3, [r3]
 80106f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80106f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	461a      	mov	r2, r3
 8010706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801070a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801070e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010716:	e841 2300 	strex	r3, r2, [r1]
 801071a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801071c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1e2      	bne.n	80106e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	3308      	adds	r3, #8
 8010728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801072a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801072c:	e853 3f00 	ldrex	r3, [r3]
 8010730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010732:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010734:	4b6e      	ldr	r3, [pc, #440]	; (80108f0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010736:	4013      	ands	r3, r2
 8010738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	3308      	adds	r3, #8
 8010742:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801074c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801074e:	e841 2300 	strex	r3, r2, [r1]
 8010752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1e3      	bne.n	8010722 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2220      	movs	r2, #32
 801075e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a60      	ldr	r2, [pc, #384]	; (80108f4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d021      	beq.n	80107bc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010782:	2b00      	cmp	r3, #0
 8010784:	d01a      	beq.n	80107bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078e:	e853 3f00 	ldrex	r3, [r3]
 8010792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801079a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	461a      	mov	r2, r3
 80107a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80107aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107b0:	e841 2300 	strex	r3, r2, [r1]
 80107b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1e4      	bne.n	8010786 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d130      	bne.n	8010826 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	e853 3f00 	ldrex	r3, [r3]
 80107d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80107d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107da:	f023 0310 	bic.w	r3, r3, #16
 80107de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107ec:	647b      	str	r3, [r7, #68]	; 0x44
 80107ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107f4:	e841 2300 	strex	r3, r2, [r1]
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1e4      	bne.n	80107ca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	69db      	ldr	r3, [r3, #28]
 8010806:	f003 0310 	and.w	r3, r3, #16
 801080a:	2b10      	cmp	r3, #16
 801080c:	d103      	bne.n	8010816 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2210      	movs	r2, #16
 8010814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801081c:	4619      	mov	r1, r3
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f7fe fa58 	bl	800ecd4 <HAL_UARTEx_RxEventCallback>
 8010824:	e002      	b.n	801082c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ef ff62 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801082c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010830:	2b00      	cmp	r3, #0
 8010832:	d006      	beq.n	8010842 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010838:	f003 0320 	and.w	r3, r3, #32
 801083c:	2b00      	cmp	r3, #0
 801083e:	f47f aecd 	bne.w	80105dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010848:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801084c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010850:	2b00      	cmp	r3, #0
 8010852:	d049      	beq.n	80108e8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801085a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801085e:	429a      	cmp	r2, r3
 8010860:	d242      	bcs.n	80108e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3308      	adds	r3, #8
 8010868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	e853 3f00 	ldrex	r3, [r3]
 8010870:	623b      	str	r3, [r7, #32]
   return(result);
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	3308      	adds	r3, #8
 8010882:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010886:	633a      	str	r2, [r7, #48]	; 0x30
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801088c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801088e:	e841 2300 	strex	r3, r2, [r1]
 8010892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1e3      	bne.n	8010862 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a16      	ldr	r2, [pc, #88]	; (80108f8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801089e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	e853 3f00 	ldrex	r3, [r3]
 80108ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f043 0320 	orr.w	r3, r3, #32
 80108b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	461a      	mov	r2, r3
 80108be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108c2:	61fb      	str	r3, [r7, #28]
 80108c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c6:	69b9      	ldr	r1, [r7, #24]
 80108c8:	69fa      	ldr	r2, [r7, #28]
 80108ca:	e841 2300 	strex	r3, r2, [r1]
 80108ce:	617b      	str	r3, [r7, #20]
   return(result);
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1e4      	bne.n	80108a0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108d6:	e007      	b.n	80108e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	699a      	ldr	r2, [r3, #24]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f042 0208 	orr.w	r2, r2, #8
 80108e6:	619a      	str	r2, [r3, #24]
}
 80108e8:	bf00      	nop
 80108ea:	37b8      	adds	r7, #184	; 0xb8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	effffffe 	.word	0xeffffffe
 80108f4:	58000c00 	.word	0x58000c00
 80108f8:	0801007d 	.word	0x0801007d

080108fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010904:	bf00      	nop
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010946:	2b01      	cmp	r3, #1
 8010948:	d101      	bne.n	801094e <HAL_UARTEx_DisableFifoMode+0x16>
 801094a:	2302      	movs	r3, #2
 801094c:	e027      	b.n	801099e <HAL_UARTEx_DisableFifoMode+0x66>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2201      	movs	r2, #1
 8010952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2224      	movs	r2, #36	; 0x24
 801095a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f022 0201 	bic.w	r2, r2, #1
 8010974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801097c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2220      	movs	r2, #32
 8010990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d101      	bne.n	80109c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80109be:	2302      	movs	r3, #2
 80109c0:	e02d      	b.n	8010a1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2224      	movs	r2, #36	; 0x24
 80109ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0201 	bic.w	r2, r2, #1
 80109e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	683a      	ldr	r2, [r7, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f850 	bl	8010aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2220      	movs	r2, #32
 8010a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}

08010a26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b084      	sub	sp, #16
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
 8010a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d101      	bne.n	8010a3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	e02d      	b.n	8010a9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2224      	movs	r2, #36	; 0x24
 8010a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f022 0201 	bic.w	r2, r2, #1
 8010a64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f812 	bl	8010aa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	68fa      	ldr	r2, [r7, #12]
 8010a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2220      	movs	r2, #32
 8010a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
	...

08010aa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b085      	sub	sp, #20
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d108      	bne.n	8010ac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ac4:	e031      	b.n	8010b2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ac6:	2310      	movs	r3, #16
 8010ac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010aca:	2310      	movs	r3, #16
 8010acc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	0e5b      	lsrs	r3, r3, #25
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	f003 0307 	and.w	r3, r3, #7
 8010adc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	0f5b      	lsrs	r3, r3, #29
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f003 0307 	and.w	r3, r3, #7
 8010aec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010aee:	7bbb      	ldrb	r3, [r7, #14]
 8010af0:	7b3a      	ldrb	r2, [r7, #12]
 8010af2:	4911      	ldr	r1, [pc, #68]	; (8010b38 <UARTEx_SetNbDataToProcess+0x94>)
 8010af4:	5c8a      	ldrb	r2, [r1, r2]
 8010af6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010afa:	7b3a      	ldrb	r2, [r7, #12]
 8010afc:	490f      	ldr	r1, [pc, #60]	; (8010b3c <UARTEx_SetNbDataToProcess+0x98>)
 8010afe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b0c:	7bfb      	ldrb	r3, [r7, #15]
 8010b0e:	7b7a      	ldrb	r2, [r7, #13]
 8010b10:	4909      	ldr	r1, [pc, #36]	; (8010b38 <UARTEx_SetNbDataToProcess+0x94>)
 8010b12:	5c8a      	ldrb	r2, [r1, r2]
 8010b14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b18:	7b7a      	ldrb	r2, [r7, #13]
 8010b1a:	4908      	ldr	r1, [pc, #32]	; (8010b3c <UARTEx_SetNbDataToProcess+0x98>)
 8010b1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b2a:	bf00      	nop
 8010b2c:	3714      	adds	r7, #20
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	08015654 	.word	0x08015654
 8010b3c:	0801565c 	.word	0x0801565c

08010b40 <__NVIC_SetPriority>:
{
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	4603      	mov	r3, r0
 8010b48:	6039      	str	r1, [r7, #0]
 8010b4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	db0a      	blt.n	8010b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	490c      	ldr	r1, [pc, #48]	; (8010b8c <__NVIC_SetPriority+0x4c>)
 8010b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b5e:	0112      	lsls	r2, r2, #4
 8010b60:	b2d2      	uxtb	r2, r2
 8010b62:	440b      	add	r3, r1
 8010b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010b68:	e00a      	b.n	8010b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	4908      	ldr	r1, [pc, #32]	; (8010b90 <__NVIC_SetPriority+0x50>)
 8010b70:	88fb      	ldrh	r3, [r7, #6]
 8010b72:	f003 030f 	and.w	r3, r3, #15
 8010b76:	3b04      	subs	r3, #4
 8010b78:	0112      	lsls	r2, r2, #4
 8010b7a:	b2d2      	uxtb	r2, r2
 8010b7c:	440b      	add	r3, r1
 8010b7e:	761a      	strb	r2, [r3, #24]
}
 8010b80:	bf00      	nop
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	e000e100 	.word	0xe000e100
 8010b90:	e000ed00 	.word	0xe000ed00

08010b94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010b94:	b580      	push	{r7, lr}
 8010b96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010b98:	4b05      	ldr	r3, [pc, #20]	; (8010bb0 <SysTick_Handler+0x1c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010b9c:	f002 fada 	bl	8013154 <xTaskGetSchedulerState>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d001      	beq.n	8010baa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010ba6:	f003 f8f7 	bl	8013d98 <xPortSysTickHandler>
  }
}
 8010baa:	bf00      	nop
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	e000e010 	.word	0xe000e010

08010bb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010bb8:	2100      	movs	r1, #0
 8010bba:	f06f 0004 	mvn.w	r0, #4
 8010bbe:	f7ff ffbf 	bl	8010b40 <__NVIC_SetPriority>
#endif
}
 8010bc2:	bf00      	nop
 8010bc4:	bd80      	pop	{r7, pc}
	...

08010bc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bce:	f3ef 8305 	mrs	r3, IPSR
 8010bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8010bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010bda:	f06f 0305 	mvn.w	r3, #5
 8010bde:	607b      	str	r3, [r7, #4]
 8010be0:	e00c      	b.n	8010bfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010be2:	4b0a      	ldr	r3, [pc, #40]	; (8010c0c <osKernelInitialize+0x44>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d105      	bne.n	8010bf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010bea:	4b08      	ldr	r3, [pc, #32]	; (8010c0c <osKernelInitialize+0x44>)
 8010bec:	2201      	movs	r2, #1
 8010bee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	607b      	str	r3, [r7, #4]
 8010bf4:	e002      	b.n	8010bfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010bfc:	687b      	ldr	r3, [r7, #4]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	2400077c 	.word	0x2400077c

08010c10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c16:	f3ef 8305 	mrs	r3, IPSR
 8010c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8010c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010c22:	f06f 0305 	mvn.w	r3, #5
 8010c26:	607b      	str	r3, [r7, #4]
 8010c28:	e010      	b.n	8010c4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	; (8010c58 <osKernelStart+0x48>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d109      	bne.n	8010c46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010c32:	f7ff ffbf 	bl	8010bb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010c36:	4b08      	ldr	r3, [pc, #32]	; (8010c58 <osKernelStart+0x48>)
 8010c38:	2202      	movs	r2, #2
 8010c3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010c3c:	f001 fda4 	bl	8012788 <vTaskStartScheduler>
      stat = osOK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	607b      	str	r3, [r7, #4]
 8010c44:	e002      	b.n	8010c4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010c4c:	687b      	ldr	r3, [r7, #4]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	2400077c 	.word	0x2400077c

08010c5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b08e      	sub	sp, #56	; 0x38
 8010c60:	af04      	add	r7, sp, #16
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c6c:	f3ef 8305 	mrs	r3, IPSR
 8010c70:	617b      	str	r3, [r7, #20]
  return(result);
 8010c72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d17e      	bne.n	8010d76 <osThreadNew+0x11a>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d07b      	beq.n	8010d76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010c7e:	2380      	movs	r3, #128	; 0x80
 8010c80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010c82:	2318      	movs	r3, #24
 8010c84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010c86:	2300      	movs	r3, #0
 8010c88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d045      	beq.n	8010d22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d002      	beq.n	8010ca4 <osThreadNew+0x48>
        name = attr->name;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d002      	beq.n	8010cb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	699b      	ldr	r3, [r3, #24]
 8010cb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d008      	beq.n	8010cca <osThreadNew+0x6e>
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	2b38      	cmp	r3, #56	; 0x38
 8010cbc:	d805      	bhi.n	8010cca <osThreadNew+0x6e>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <osThreadNew+0x72>
        return (NULL);
 8010cca:	2300      	movs	r3, #0
 8010ccc:	e054      	b.n	8010d78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d003      	beq.n	8010cde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	695b      	ldr	r3, [r3, #20]
 8010cda:	089b      	lsrs	r3, r3, #2
 8010cdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	689b      	ldr	r3, [r3, #8]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00e      	beq.n	8010d04 <osThreadNew+0xa8>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	2b5b      	cmp	r3, #91	; 0x5b
 8010cec:	d90a      	bls.n	8010d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d002      	beq.n	8010d04 <osThreadNew+0xa8>
        mem = 1;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	61bb      	str	r3, [r7, #24]
 8010d02:	e010      	b.n	8010d26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	689b      	ldr	r3, [r3, #8]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10c      	bne.n	8010d26 <osThreadNew+0xca>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d108      	bne.n	8010d26 <osThreadNew+0xca>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d104      	bne.n	8010d26 <osThreadNew+0xca>
          mem = 0;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	61bb      	str	r3, [r7, #24]
 8010d20:	e001      	b.n	8010d26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010d22:	2300      	movs	r3, #0
 8010d24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d110      	bne.n	8010d4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d34:	9202      	str	r2, [sp, #8]
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	6a3a      	ldr	r2, [r7, #32]
 8010d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f001 fb4a 	bl	80123dc <xTaskCreateStatic>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	613b      	str	r3, [r7, #16]
 8010d4c:	e013      	b.n	8010d76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d110      	bne.n	8010d76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	f107 0310 	add.w	r3, r7, #16
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f001 fb95 	bl	8012496 <xTaskCreate>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d001      	beq.n	8010d76 <osThreadNew+0x11a>
            hTask = NULL;
 8010d72:	2300      	movs	r3, #0
 8010d74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010d76:	693b      	ldr	r3, [r7, #16]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3728      	adds	r7, #40	; 0x28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d86:	f3ef 8305 	mrs	r3, IPSR
 8010d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8010d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <osThreadYield+0x1a>
    stat = osErrorISR;
 8010d92:	f06f 0305 	mvn.w	r3, #5
 8010d96:	607b      	str	r3, [r7, #4]
 8010d98:	e009      	b.n	8010dae <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010d9e:	4b07      	ldr	r3, [pc, #28]	; (8010dbc <osThreadYield+0x3c>)
 8010da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010da4:	601a      	str	r2, [r3, #0]
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010dae:	687b      	ldr	r3, [r7, #4]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	e000ed04 	.word	0xe000ed04

08010dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dc8:	f3ef 8305 	mrs	r3, IPSR
 8010dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8010dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d003      	beq.n	8010ddc <osDelay+0x1c>
    stat = osErrorISR;
 8010dd4:	f06f 0305 	mvn.w	r3, #5
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	e007      	b.n	8010dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f001 fc9a 	bl	8012720 <vTaskDelay>
    }
  }

  return (stat);
 8010dec:	68fb      	ldr	r3, [r7, #12]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b086      	sub	sp, #24
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e02:	f3ef 8305 	mrs	r3, IPSR
 8010e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e08:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d12d      	bne.n	8010e6a <osEventFlagsNew+0x74>
    mem = -1;
 8010e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e12:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d015      	beq.n	8010e46 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d006      	beq.n	8010e30 <osEventFlagsNew+0x3a>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	2b1f      	cmp	r3, #31
 8010e28:	d902      	bls.n	8010e30 <osEventFlagsNew+0x3a>
        mem = 1;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	613b      	str	r3, [r7, #16]
 8010e2e:	e00c      	b.n	8010e4a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d108      	bne.n	8010e4a <osEventFlagsNew+0x54>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d104      	bne.n	8010e4a <osEventFlagsNew+0x54>
          mem = 0;
 8010e40:	2300      	movs	r3, #0
 8010e42:	613b      	str	r3, [r7, #16]
 8010e44:	e001      	b.n	8010e4a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d106      	bne.n	8010e5e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 fa3d 	bl	80112d4 <xEventGroupCreateStatic>
 8010e5a:	6178      	str	r0, [r7, #20]
 8010e5c:	e005      	b.n	8010e6a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d102      	bne.n	8010e6a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010e64:	f000 fa6d 	bl	8011342 <xEventGroupCreate>
 8010e68:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010e6a:	697b      	ldr	r3, [r7, #20]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3718      	adds	r7, #24
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d004      	beq.n	8010e92 <osEventFlagsSet+0x1e>
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010e92:	f06f 0303 	mvn.w	r3, #3
 8010e96:	617b      	str	r3, [r7, #20]
 8010e98:	e028      	b.n	8010eec <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e9a:	f3ef 8305 	mrs	r3, IPSR
 8010e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d01d      	beq.n	8010ee2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010eaa:	f107 0308 	add.w	r3, r7, #8
 8010eae:	461a      	mov	r2, r3
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	6938      	ldr	r0, [r7, #16]
 8010eb4:	f000 fbe8 	bl	8011688 <xEventGroupSetBitsFromISR>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d103      	bne.n	8010ec6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010ebe:	f06f 0302 	mvn.w	r3, #2
 8010ec2:	617b      	str	r3, [r7, #20]
 8010ec4:	e012      	b.n	8010eec <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00d      	beq.n	8010eec <osEventFlagsSet+0x78>
 8010ed0:	4b09      	ldr	r3, [pc, #36]	; (8010ef8 <osEventFlagsSet+0x84>)
 8010ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ed6:	601a      	str	r2, [r3, #0]
 8010ed8:	f3bf 8f4f 	dsb	sy
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	e004      	b.n	8010eec <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010ee2:	6839      	ldr	r1, [r7, #0]
 8010ee4:	6938      	ldr	r0, [r7, #16]
 8010ee6:	f000 fb15 	bl	8011514 <xEventGroupSetBits>
 8010eea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010eec:	697b      	ldr	r3, [r7, #20]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3718      	adds	r7, #24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	e000ed04 	.word	0xe000ed04

08010efc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08c      	sub	sp, #48	; 0x30
 8010f00:	af02      	add	r7, sp, #8
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d004      	beq.n	8010f1e <osEventFlagsWait+0x22>
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010f1e:	f06f 0303 	mvn.w	r3, #3
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	e04b      	b.n	8010fbe <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f26:	f3ef 8305 	mrs	r3, IPSR
 8010f2a:	617b      	str	r3, [r7, #20]
  return(result);
 8010f2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d003      	beq.n	8010f3a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8010f32:	f06f 0305 	mvn.w	r3, #5
 8010f36:	61fb      	str	r3, [r7, #28]
 8010f38:	e041      	b.n	8010fbe <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8010f44:	2301      	movs	r3, #1
 8010f46:	627b      	str	r3, [r7, #36]	; 0x24
 8010f48:	e001      	b.n	8010f4e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f003 0302 	and.w	r3, r3, #2
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d002      	beq.n	8010f5e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	623b      	str	r3, [r7, #32]
 8010f5c:	e001      	b.n	8010f62 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f68:	6a3a      	ldr	r2, [r7, #32]
 8010f6a:	68b9      	ldr	r1, [r7, #8]
 8010f6c:	69b8      	ldr	r0, [r7, #24]
 8010f6e:	f000 fa03 	bl	8011378 <xEventGroupWaitBits>
 8010f72:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d010      	beq.n	8010fa0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	4013      	ands	r3, r2
 8010f84:	68ba      	ldr	r2, [r7, #8]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d019      	beq.n	8010fbe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d003      	beq.n	8010f98 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010f90:	f06f 0301 	mvn.w	r3, #1
 8010f94:	61fb      	str	r3, [r7, #28]
 8010f96:	e012      	b.n	8010fbe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010f98:	f06f 0302 	mvn.w	r3, #2
 8010f9c:	61fb      	str	r3, [r7, #28]
 8010f9e:	e00e      	b.n	8010fbe <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d109      	bne.n	8010fbe <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d003      	beq.n	8010fb8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8010fb0:	f06f 0301 	mvn.w	r3, #1
 8010fb4:	61fb      	str	r3, [r7, #28]
 8010fb6:	e002      	b.n	8010fbe <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010fb8:	f06f 0302 	mvn.w	r3, #2
 8010fbc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3728      	adds	r7, #40	; 0x28
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08a      	sub	sp, #40	; 0x28
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fd8:	f3ef 8305 	mrs	r3, IPSR
 8010fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8010fde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d15f      	bne.n	80110a4 <osMessageQueueNew+0xdc>
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d05c      	beq.n	80110a4 <osMessageQueueNew+0xdc>
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d059      	beq.n	80110a4 <osMessageQueueNew+0xdc>
    mem = -1;
 8010ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ff4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d029      	beq.n	8011050 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d012      	beq.n	801102a <osMessageQueueNew+0x62>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	2b4f      	cmp	r3, #79	; 0x4f
 801100a:	d90e      	bls.n	801102a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00a      	beq.n	801102a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	695a      	ldr	r2, [r3, #20]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	68b9      	ldr	r1, [r7, #8]
 801101c:	fb01 f303 	mul.w	r3, r1, r3
 8011020:	429a      	cmp	r2, r3
 8011022:	d302      	bcc.n	801102a <osMessageQueueNew+0x62>
        mem = 1;
 8011024:	2301      	movs	r3, #1
 8011026:	61bb      	str	r3, [r7, #24]
 8011028:	e014      	b.n	8011054 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d110      	bne.n	8011054 <osMessageQueueNew+0x8c>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d10c      	bne.n	8011054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801103e:	2b00      	cmp	r3, #0
 8011040:	d108      	bne.n	8011054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	695b      	ldr	r3, [r3, #20]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d104      	bne.n	8011054 <osMessageQueueNew+0x8c>
          mem = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	61bb      	str	r3, [r7, #24]
 801104e:	e001      	b.n	8011054 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011050:	2300      	movs	r3, #0
 8011052:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	2b01      	cmp	r3, #1
 8011058:	d10b      	bne.n	8011072 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	691a      	ldr	r2, [r3, #16]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	2100      	movs	r1, #0
 8011064:	9100      	str	r1, [sp, #0]
 8011066:	68b9      	ldr	r1, [r7, #8]
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f000 fc3d 	bl	80118e8 <xQueueGenericCreateStatic>
 801106e:	61f8      	str	r0, [r7, #28]
 8011070:	e008      	b.n	8011084 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d105      	bne.n	8011084 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011078:	2200      	movs	r2, #0
 801107a:	68b9      	ldr	r1, [r7, #8]
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	f000 fcab 	bl	80119d8 <xQueueGenericCreate>
 8011082:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d003      	beq.n	8011098 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	617b      	str	r3, [r7, #20]
 8011096:	e001      	b.n	801109c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011098:	2300      	movs	r3, #0
 801109a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801109c:	6979      	ldr	r1, [r7, #20]
 801109e:	69f8      	ldr	r0, [r7, #28]
 80110a0:	f001 f93e 	bl	8012320 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80110a4:	69fb      	ldr	r3, [r7, #28]
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3720      	adds	r7, #32
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	603b      	str	r3, [r7, #0]
 80110bc:	4613      	mov	r3, r2
 80110be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110c8:	f3ef 8305 	mrs	r3, IPSR
 80110cc:	617b      	str	r3, [r7, #20]
  return(result);
 80110ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d028      	beq.n	8011126 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d005      	beq.n	80110e6 <osMessageQueuePut+0x36>
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d002      	beq.n	80110e6 <osMessageQueuePut+0x36>
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d003      	beq.n	80110ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80110e6:	f06f 0303 	mvn.w	r3, #3
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	e038      	b.n	8011160 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80110ee:	2300      	movs	r3, #0
 80110f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80110f2:	f107 0210 	add.w	r2, r7, #16
 80110f6:	2300      	movs	r3, #0
 80110f8:	68b9      	ldr	r1, [r7, #8]
 80110fa:	69b8      	ldr	r0, [r7, #24]
 80110fc:	f000 fdc8 	bl	8011c90 <xQueueGenericSendFromISR>
 8011100:	4603      	mov	r3, r0
 8011102:	2b01      	cmp	r3, #1
 8011104:	d003      	beq.n	801110e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011106:	f06f 0302 	mvn.w	r3, #2
 801110a:	61fb      	str	r3, [r7, #28]
 801110c:	e028      	b.n	8011160 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d025      	beq.n	8011160 <osMessageQueuePut+0xb0>
 8011114:	4b15      	ldr	r3, [pc, #84]	; (801116c <osMessageQueuePut+0xbc>)
 8011116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801111a:	601a      	str	r2, [r3, #0]
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	e01c      	b.n	8011160 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d002      	beq.n	8011132 <osMessageQueuePut+0x82>
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d103      	bne.n	801113a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011132:	f06f 0303 	mvn.w	r3, #3
 8011136:	61fb      	str	r3, [r7, #28]
 8011138:	e012      	b.n	8011160 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801113a:	2300      	movs	r3, #0
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	68b9      	ldr	r1, [r7, #8]
 8011140:	69b8      	ldr	r0, [r7, #24]
 8011142:	f000 fca7 	bl	8011a94 <xQueueGenericSend>
 8011146:	4603      	mov	r3, r0
 8011148:	2b01      	cmp	r3, #1
 801114a:	d009      	beq.n	8011160 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d003      	beq.n	801115a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011152:	f06f 0301 	mvn.w	r3, #1
 8011156:	61fb      	str	r3, [r7, #28]
 8011158:	e002      	b.n	8011160 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801115a:	f06f 0302 	mvn.w	r3, #2
 801115e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011160:	69fb      	ldr	r3, [r7, #28]
}
 8011162:	4618      	mov	r0, r3
 8011164:	3720      	adds	r7, #32
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	e000ed04 	.word	0xe000ed04

08011170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011170:	b580      	push	{r7, lr}
 8011172:	b088      	sub	sp, #32
 8011174:	af00      	add	r7, sp, #0
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
 801117c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011182:	2300      	movs	r3, #0
 8011184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011186:	f3ef 8305 	mrs	r3, IPSR
 801118a:	617b      	str	r3, [r7, #20]
  return(result);
 801118c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801118e:	2b00      	cmp	r3, #0
 8011190:	d028      	beq.n	80111e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d005      	beq.n	80111a4 <osMessageQueueGet+0x34>
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d002      	beq.n	80111a4 <osMessageQueueGet+0x34>
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d003      	beq.n	80111ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80111a4:	f06f 0303 	mvn.w	r3, #3
 80111a8:	61fb      	str	r3, [r7, #28]
 80111aa:	e037      	b.n	801121c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80111ac:	2300      	movs	r3, #0
 80111ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80111b0:	f107 0310 	add.w	r3, r7, #16
 80111b4:	461a      	mov	r2, r3
 80111b6:	68b9      	ldr	r1, [r7, #8]
 80111b8:	69b8      	ldr	r0, [r7, #24]
 80111ba:	f000 fee5 	bl	8011f88 <xQueueReceiveFromISR>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d003      	beq.n	80111cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80111c4:	f06f 0302 	mvn.w	r3, #2
 80111c8:	61fb      	str	r3, [r7, #28]
 80111ca:	e027      	b.n	801121c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d024      	beq.n	801121c <osMessageQueueGet+0xac>
 80111d2:	4b15      	ldr	r3, [pc, #84]	; (8011228 <osMessageQueueGet+0xb8>)
 80111d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	e01b      	b.n	801121c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d002      	beq.n	80111f0 <osMessageQueueGet+0x80>
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d103      	bne.n	80111f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80111f0:	f06f 0303 	mvn.w	r3, #3
 80111f4:	61fb      	str	r3, [r7, #28]
 80111f6:	e011      	b.n	801121c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80111f8:	683a      	ldr	r2, [r7, #0]
 80111fa:	68b9      	ldr	r1, [r7, #8]
 80111fc:	69b8      	ldr	r0, [r7, #24]
 80111fe:	f000 fde3 	bl	8011dc8 <xQueueReceive>
 8011202:	4603      	mov	r3, r0
 8011204:	2b01      	cmp	r3, #1
 8011206:	d009      	beq.n	801121c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d003      	beq.n	8011216 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801120e:	f06f 0301 	mvn.w	r3, #1
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e002      	b.n	801121c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011216:	f06f 0302 	mvn.w	r3, #2
 801121a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801121c:	69fb      	ldr	r3, [r7, #28]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	e000ed04 	.word	0xe000ed04

0801122c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d102      	bne.n	8011244 <osMessageQueueGetCount+0x18>
    count = 0U;
 801123e:	2300      	movs	r3, #0
 8011240:	617b      	str	r3, [r7, #20]
 8011242:	e00e      	b.n	8011262 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011244:	f3ef 8305 	mrs	r3, IPSR
 8011248:	60fb      	str	r3, [r7, #12]
  return(result);
 801124a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801124c:	2b00      	cmp	r3, #0
 801124e:	d004      	beq.n	801125a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011250:	6938      	ldr	r0, [r7, #16]
 8011252:	f000 ff37 	bl	80120c4 <uxQueueMessagesWaitingFromISR>
 8011256:	6178      	str	r0, [r7, #20]
 8011258:	e003      	b.n	8011262 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801125a:	6938      	ldr	r0, [r7, #16]
 801125c:	f000 ff14 	bl	8012088 <uxQueueMessagesWaiting>
 8011260:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011262:	697b      	ldr	r3, [r7, #20]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3718      	adds	r7, #24
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	4a07      	ldr	r2, [pc, #28]	; (8011298 <vApplicationGetIdleTaskMemory+0x2c>)
 801127c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	4a06      	ldr	r2, [pc, #24]	; (801129c <vApplicationGetIdleTaskMemory+0x30>)
 8011282:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2280      	movs	r2, #128	; 0x80
 8011288:	601a      	str	r2, [r3, #0]
}
 801128a:	bf00      	nop
 801128c:	3714      	adds	r7, #20
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	24000780 	.word	0x24000780
 801129c:	240007dc 	.word	0x240007dc

080112a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	4a07      	ldr	r2, [pc, #28]	; (80112cc <vApplicationGetTimerTaskMemory+0x2c>)
 80112b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	4a06      	ldr	r2, [pc, #24]	; (80112d0 <vApplicationGetTimerTaskMemory+0x30>)
 80112b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112be:	601a      	str	r2, [r3, #0]
}
 80112c0:	bf00      	nop
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr
 80112cc:	240009dc 	.word	0x240009dc
 80112d0:	24000a38 	.word	0x24000a38

080112d4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10a      	bne.n	80112f8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e6:	f383 8811 	msr	BASEPRI, r3
 80112ea:	f3bf 8f6f 	isb	sy
 80112ee:	f3bf 8f4f 	dsb	sy
 80112f2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80112f4:	bf00      	nop
 80112f6:	e7fe      	b.n	80112f6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80112f8:	2320      	movs	r3, #32
 80112fa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2b20      	cmp	r3, #32
 8011300:	d00a      	beq.n	8011318 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011306:	f383 8811 	msr	BASEPRI, r3
 801130a:	f3bf 8f6f 	isb	sy
 801130e:	f3bf 8f4f 	dsb	sy
 8011312:	60fb      	str	r3, [r7, #12]
}
 8011314:	bf00      	nop
 8011316:	e7fe      	b.n	8011316 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00a      	beq.n	8011338 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	3304      	adds	r3, #4
 801132c:	4618      	mov	r0, r3
 801132e:	f000 f9bf 	bl	80116b0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	2201      	movs	r2, #1
 8011336:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011338:	697b      	ldr	r3, [r7, #20]
	}
 801133a:	4618      	mov	r0, r3
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011342:	b580      	push	{r7, lr}
 8011344:	b082      	sub	sp, #8
 8011346:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011348:	2020      	movs	r0, #32
 801134a:	f002 fdb5 	bl	8013eb8 <pvPortMalloc>
 801134e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3304      	adds	r3, #4
 8011360:	4618      	mov	r0, r3
 8011362:	f000 f9a5 	bl	80116b0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2200      	movs	r2, #0
 801136a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801136c:	687b      	ldr	r3, [r7, #4]
	}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
	...

08011378 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b090      	sub	sp, #64	; 0x40
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801138a:	2300      	movs	r3, #0
 801138c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801138e:	2300      	movs	r3, #0
 8011390:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d10a      	bne.n	80113ae <xEventGroupWaitBits+0x36>
	__asm volatile
 8011398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	623b      	str	r3, [r7, #32]
}
 80113aa:	bf00      	nop
 80113ac:	e7fe      	b.n	80113ac <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00a      	beq.n	80113ce <xEventGroupWaitBits+0x56>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	61fb      	str	r3, [r7, #28]
}
 80113ca:	bf00      	nop
 80113cc:	e7fe      	b.n	80113cc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10a      	bne.n	80113ea <xEventGroupWaitBits+0x72>
	__asm volatile
 80113d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d8:	f383 8811 	msr	BASEPRI, r3
 80113dc:	f3bf 8f6f 	isb	sy
 80113e0:	f3bf 8f4f 	dsb	sy
 80113e4:	61bb      	str	r3, [r7, #24]
}
 80113e6:	bf00      	nop
 80113e8:	e7fe      	b.n	80113e8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113ea:	f001 feb3 	bl	8013154 <xTaskGetSchedulerState>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d102      	bne.n	80113fa <xEventGroupWaitBits+0x82>
 80113f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <xEventGroupWaitBits+0x86>
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <xEventGroupWaitBits+0x88>
 80113fe:	2300      	movs	r3, #0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d10a      	bne.n	801141a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	617b      	str	r3, [r7, #20]
}
 8011416:	bf00      	nop
 8011418:	e7fe      	b.n	8011418 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801141a:	f001 fa1b 	bl	8012854 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	68b9      	ldr	r1, [r7, #8]
 8011428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801142a:	f000 f90b 	bl	8011644 <prvTestWaitCondition>
 801142e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00e      	beq.n	8011454 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801143a:	2300      	movs	r3, #0
 801143c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d028      	beq.n	8011496 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	43db      	mvns	r3, r3
 801144c:	401a      	ands	r2, r3
 801144e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	e020      	b.n	8011496 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011456:	2b00      	cmp	r3, #0
 8011458:	d104      	bne.n	8011464 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801145e:	2301      	movs	r3, #1
 8011460:	633b      	str	r3, [r7, #48]	; 0x30
 8011462:	e018      	b.n	8011496 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d003      	beq.n	8011472 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011470:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d003      	beq.n	8011480 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801147e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011482:	1d18      	adds	r0, r3, #4
 8011484:	68ba      	ldr	r2, [r7, #8]
 8011486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011488:	4313      	orrs	r3, r2
 801148a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801148c:	4619      	mov	r1, r3
 801148e:	f001 fbd9 	bl	8012c44 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011496:	f001 f9eb 	bl	8012870 <xTaskResumeAll>
 801149a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801149c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d031      	beq.n	8011506 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d107      	bne.n	80114b8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80114a8:	4b19      	ldr	r3, [pc, #100]	; (8011510 <xEventGroupWaitBits+0x198>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80114b8:	f001 fed8 	bl	801326c <uxTaskResetEventItemValue>
 80114bc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80114be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d11a      	bne.n	80114fe <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80114c8:	f002 fbd4 	bl	8013c74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80114cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80114d2:	683a      	ldr	r2, [r7, #0]
 80114d4:	68b9      	ldr	r1, [r7, #8]
 80114d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114d8:	f000 f8b4 	bl	8011644 <prvTestWaitCondition>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d009      	beq.n	80114f6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d006      	beq.n	80114f6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80114e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	43db      	mvns	r3, r3
 80114f0:	401a      	ands	r2, r3
 80114f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80114f6:	2301      	movs	r3, #1
 80114f8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80114fa:	f002 fbeb 	bl	8013cd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80114fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011500:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011504:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011508:	4618      	mov	r0, r3
 801150a:	3740      	adds	r7, #64	; 0x40
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	e000ed04 	.word	0xe000ed04

08011514 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08e      	sub	sp, #56	; 0x38
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801151e:	2300      	movs	r3, #0
 8011520:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d10a      	bne.n	8011546 <xEventGroupSetBits+0x32>
	__asm volatile
 8011530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011534:	f383 8811 	msr	BASEPRI, r3
 8011538:	f3bf 8f6f 	isb	sy
 801153c:	f3bf 8f4f 	dsb	sy
 8011540:	613b      	str	r3, [r7, #16]
}
 8011542:	bf00      	nop
 8011544:	e7fe      	b.n	8011544 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00a      	beq.n	8011566 <xEventGroupSetBits+0x52>
	__asm volatile
 8011550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011554:	f383 8811 	msr	BASEPRI, r3
 8011558:	f3bf 8f6f 	isb	sy
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	60fb      	str	r3, [r7, #12]
}
 8011562:	bf00      	nop
 8011564:	e7fe      	b.n	8011564 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011568:	3304      	adds	r3, #4
 801156a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	3308      	adds	r3, #8
 8011570:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011572:	f001 f96f 	bl	8012854 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	431a      	orrs	r2, r3
 8011584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011586:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011588:	e03c      	b.n	8011604 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011596:	2300      	movs	r3, #0
 8011598:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80115a0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80115a8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d108      	bne.n	80115c6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	4013      	ands	r3, r2
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d00b      	beq.n	80115d8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80115c0:	2301      	movs	r3, #1
 80115c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115c4:	e008      	b.n	80115d8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	4013      	ands	r3, r2
 80115ce:	69ba      	ldr	r2, [r7, #24]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d101      	bne.n	80115d8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80115d4:	2301      	movs	r3, #1
 80115d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d010      	beq.n	8011600 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d003      	beq.n	80115f0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80115e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	4313      	orrs	r3, r2
 80115ee:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80115f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80115f8:	4619      	mov	r1, r3
 80115fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80115fc:	f001 fbee 	bl	8012ddc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011606:	6a3b      	ldr	r3, [r7, #32]
 8011608:	429a      	cmp	r2, r3
 801160a:	d1be      	bne.n	801158a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011612:	43db      	mvns	r3, r3
 8011614:	401a      	ands	r2, r3
 8011616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011618:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801161a:	f001 f929 	bl	8012870 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	681b      	ldr	r3, [r3, #0]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3738      	adds	r7, #56	; 0x38
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b082      	sub	sp, #8
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011634:	6839      	ldr	r1, [r7, #0]
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7ff ff6c 	bl	8011514 <xEventGroupSetBits>
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011644:	b480      	push	{r7}
 8011646:	b087      	sub	sp, #28
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011650:	2300      	movs	r3, #0
 8011652:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d107      	bne.n	801166a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	4013      	ands	r3, r2
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00a      	beq.n	801167a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011664:	2301      	movs	r3, #1
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	e007      	b.n	801167a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	4013      	ands	r3, r2
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	429a      	cmp	r2, r3
 8011674:	d101      	bne.n	801167a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011676:	2301      	movs	r3, #1
 8011678:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801167a:	697b      	ldr	r3, [r7, #20]
}
 801167c:	4618      	mov	r0, r3
 801167e:	371c      	adds	r7, #28
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr

08011688 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	68f9      	ldr	r1, [r7, #12]
 801169a:	4804      	ldr	r0, [pc, #16]	; (80116ac <xEventGroupSetBitsFromISR+0x24>)
 801169c:	f002 f9a0 	bl	80139e0 <xTimerPendFunctionCallFromISR>
 80116a0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80116a2:	697b      	ldr	r3, [r7, #20]
	}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3718      	adds	r7, #24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	0801162b 	.word	0x0801162b

080116b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f103 0208 	add.w	r2, r3, #8
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f103 0208 	add.w	r2, r3, #8
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f103 0208 	add.w	r2, r3, #8
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80116e4:	bf00      	nop
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr

080116f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116fe:	bf00      	nop
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801170a:	b480      	push	{r7}
 801170c:	b085      	sub	sp, #20
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	689a      	ldr	r2, [r3, #8]
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	1c5a      	adds	r2, r3, #1
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	601a      	str	r2, [r3, #0]
}
 8011746:	bf00      	nop
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011752:	b480      	push	{r7}
 8011754:	b085      	sub	sp, #20
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
 801175a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011768:	d103      	bne.n	8011772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	60fb      	str	r3, [r7, #12]
 8011770:	e00c      	b.n	801178c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3308      	adds	r3, #8
 8011776:	60fb      	str	r3, [r7, #12]
 8011778:	e002      	b.n	8011780 <vListInsert+0x2e>
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	60fb      	str	r3, [r7, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	68ba      	ldr	r2, [r7, #8]
 8011788:	429a      	cmp	r2, r3
 801178a:	d2f6      	bcs.n	801177a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	683a      	ldr	r2, [r7, #0]
 801179a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	68fa      	ldr	r2, [r7, #12]
 80117a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	683a      	ldr	r2, [r7, #0]
 80117a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	601a      	str	r2, [r3, #0]
}
 80117b8:	bf00      	nop
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	691b      	ldr	r3, [r3, #16]
 80117d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	6892      	ldr	r2, [r2, #8]
 80117da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	6852      	ldr	r2, [r2, #4]
 80117e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d103      	bne.n	80117f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	689a      	ldr	r2, [r3, #8]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	1e5a      	subs	r2, r3, #1
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3714      	adds	r7, #20
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr

08011818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d10a      	bne.n	8011842 <xQueueGenericReset+0x2a>
	__asm volatile
 801182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011830:	f383 8811 	msr	BASEPRI, r3
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	60bb      	str	r3, [r7, #8]
}
 801183e:	bf00      	nop
 8011840:	e7fe      	b.n	8011840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011842:	f002 fa17 	bl	8013c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801184e:	68f9      	ldr	r1, [r7, #12]
 8011850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011852:	fb01 f303 	mul.w	r3, r1, r3
 8011856:	441a      	add	r2, r3
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2200      	movs	r2, #0
 8011860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011872:	3b01      	subs	r3, #1
 8011874:	68f9      	ldr	r1, [r7, #12]
 8011876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011878:	fb01 f303 	mul.w	r3, r1, r3
 801187c:	441a      	add	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	22ff      	movs	r2, #255	; 0xff
 8011886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	22ff      	movs	r2, #255	; 0xff
 801188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d114      	bne.n	80118c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d01a      	beq.n	80118d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3310      	adds	r3, #16
 80118a4:	4618      	mov	r0, r3
 80118a6:	f001 fa35 	bl	8012d14 <xTaskRemoveFromEventList>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d012      	beq.n	80118d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80118b0:	4b0c      	ldr	r3, [pc, #48]	; (80118e4 <xQueueGenericReset+0xcc>)
 80118b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	f3bf 8f4f 	dsb	sy
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	e009      	b.n	80118d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	3310      	adds	r3, #16
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7ff fef2 	bl	80116b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	3324      	adds	r3, #36	; 0x24
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7ff feed 	bl	80116b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80118d6:	f002 f9fd 	bl	8013cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80118da:	2301      	movs	r3, #1
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	e000ed04 	.word	0xe000ed04

080118e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b08e      	sub	sp, #56	; 0x38
 80118ec:	af02      	add	r7, sp, #8
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
 80118f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10a      	bne.n	8011912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80118fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011900:	f383 8811 	msr	BASEPRI, r3
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801190e:	bf00      	nop
 8011910:	e7fe      	b.n	8011910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	627b      	str	r3, [r7, #36]	; 0x24
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <xQueueGenericCreateStatic+0x52>
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <xQueueGenericCreateStatic+0x56>
 801193a:	2301      	movs	r3, #1
 801193c:	e000      	b.n	8011940 <xQueueGenericCreateStatic+0x58>
 801193e:	2300      	movs	r3, #0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d10a      	bne.n	801195a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011948:	f383 8811 	msr	BASEPRI, r3
 801194c:	f3bf 8f6f 	isb	sy
 8011950:	f3bf 8f4f 	dsb	sy
 8011954:	623b      	str	r3, [r7, #32]
}
 8011956:	bf00      	nop
 8011958:	e7fe      	b.n	8011958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d102      	bne.n	8011966 <xQueueGenericCreateStatic+0x7e>
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <xQueueGenericCreateStatic+0x82>
 8011966:	2301      	movs	r3, #1
 8011968:	e000      	b.n	801196c <xQueueGenericCreateStatic+0x84>
 801196a:	2300      	movs	r3, #0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10a      	bne.n	8011986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	61fb      	str	r3, [r7, #28]
}
 8011982:	bf00      	nop
 8011984:	e7fe      	b.n	8011984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011986:	2350      	movs	r3, #80	; 0x50
 8011988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2b50      	cmp	r3, #80	; 0x50
 801198e:	d00a      	beq.n	80119a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	61bb      	str	r3, [r7, #24]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80119a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80119ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00d      	beq.n	80119ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	2201      	movs	r2, #1
 80119b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80119ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	4613      	mov	r3, r2
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	68b9      	ldr	r1, [r7, #8]
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f000 f83f 	bl	8011a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3730      	adds	r7, #48	; 0x30
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b08a      	sub	sp, #40	; 0x28
 80119dc:	af02      	add	r7, sp, #8
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	4613      	mov	r3, r2
 80119e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d10a      	bne.n	8011a02 <xQueueGenericCreate+0x2a>
	__asm volatile
 80119ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f0:	f383 8811 	msr	BASEPRI, r3
 80119f4:	f3bf 8f6f 	isb	sy
 80119f8:	f3bf 8f4f 	dsb	sy
 80119fc:	613b      	str	r3, [r7, #16]
}
 80119fe:	bf00      	nop
 8011a00:	e7fe      	b.n	8011a00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	68ba      	ldr	r2, [r7, #8]
 8011a06:	fb02 f303 	mul.w	r3, r2, r3
 8011a0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	3350      	adds	r3, #80	; 0x50
 8011a10:	4618      	mov	r0, r3
 8011a12:	f002 fa51 	bl	8013eb8 <pvPortMalloc>
 8011a16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d011      	beq.n	8011a42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	3350      	adds	r3, #80	; 0x50
 8011a26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a30:	79fa      	ldrb	r2, [r7, #7]
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	9300      	str	r3, [sp, #0]
 8011a36:	4613      	mov	r3, r2
 8011a38:	697a      	ldr	r2, [r7, #20]
 8011a3a:	68b9      	ldr	r1, [r7, #8]
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f000 f805 	bl	8011a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a42:	69bb      	ldr	r3, [r7, #24]
	}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3720      	adds	r7, #32
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
 8011a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d103      	bne.n	8011a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	69ba      	ldr	r2, [r7, #24]
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	e002      	b.n	8011a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a7a:	2101      	movs	r1, #1
 8011a7c:	69b8      	ldr	r0, [r7, #24]
 8011a7e:	f7ff fecb 	bl	8011818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	78fa      	ldrb	r2, [r7, #3]
 8011a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011a8a:	bf00      	nop
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
	...

08011a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b08e      	sub	sp, #56	; 0x38
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <xQueueGenericSend+0x32>
	__asm volatile
 8011ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011ac2:	bf00      	nop
 8011ac4:	e7fe      	b.n	8011ac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d103      	bne.n	8011ad4 <xQueueGenericSend+0x40>
 8011acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d101      	bne.n	8011ad8 <xQueueGenericSend+0x44>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e000      	b.n	8011ada <xQueueGenericSend+0x46>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d10a      	bne.n	8011af4 <xQueueGenericSend+0x60>
	__asm volatile
 8011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae2:	f383 8811 	msr	BASEPRI, r3
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011af0:	bf00      	nop
 8011af2:	e7fe      	b.n	8011af2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d103      	bne.n	8011b02 <xQueueGenericSend+0x6e>
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d101      	bne.n	8011b06 <xQueueGenericSend+0x72>
 8011b02:	2301      	movs	r3, #1
 8011b04:	e000      	b.n	8011b08 <xQueueGenericSend+0x74>
 8011b06:	2300      	movs	r3, #0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10a      	bne.n	8011b22 <xQueueGenericSend+0x8e>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	f383 8811 	msr	BASEPRI, r3
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	623b      	str	r3, [r7, #32]
}
 8011b1e:	bf00      	nop
 8011b20:	e7fe      	b.n	8011b20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b22:	f001 fb17 	bl	8013154 <xTaskGetSchedulerState>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d102      	bne.n	8011b32 <xQueueGenericSend+0x9e>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d101      	bne.n	8011b36 <xQueueGenericSend+0xa2>
 8011b32:	2301      	movs	r3, #1
 8011b34:	e000      	b.n	8011b38 <xQueueGenericSend+0xa4>
 8011b36:	2300      	movs	r3, #0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10a      	bne.n	8011b52 <xQueueGenericSend+0xbe>
	__asm volatile
 8011b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b40:	f383 8811 	msr	BASEPRI, r3
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	61fb      	str	r3, [r7, #28]
}
 8011b4e:	bf00      	nop
 8011b50:	e7fe      	b.n	8011b50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b52:	f002 f88f 	bl	8013c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d302      	bcc.n	8011b68 <xQueueGenericSend+0xd4>
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	2b02      	cmp	r3, #2
 8011b66:	d129      	bne.n	8011bbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b68:	683a      	ldr	r2, [r7, #0]
 8011b6a:	68b9      	ldr	r1, [r7, #8]
 8011b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b6e:	f000 fac7 	bl	8012100 <prvCopyDataToQueue>
 8011b72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d010      	beq.n	8011b9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7e:	3324      	adds	r3, #36	; 0x24
 8011b80:	4618      	mov	r0, r3
 8011b82:	f001 f8c7 	bl	8012d14 <xTaskRemoveFromEventList>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d013      	beq.n	8011bb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b8c:	4b3f      	ldr	r3, [pc, #252]	; (8011c8c <xQueueGenericSend+0x1f8>)
 8011b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	e00a      	b.n	8011bb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d007      	beq.n	8011bb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011ba4:	4b39      	ldr	r3, [pc, #228]	; (8011c8c <xQueueGenericSend+0x1f8>)
 8011ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011baa:	601a      	str	r2, [r3, #0]
 8011bac:	f3bf 8f4f 	dsb	sy
 8011bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011bb4:	f002 f88e 	bl	8013cd4 <vPortExitCritical>
				return pdPASS;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e063      	b.n	8011c84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d103      	bne.n	8011bca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011bc2:	f002 f887 	bl	8013cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e05c      	b.n	8011c84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d106      	bne.n	8011bde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011bd0:	f107 0314 	add.w	r3, r7, #20
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f001 f963 	bl	8012ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011bde:	f002 f879 	bl	8013cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011be2:	f000 fe37 	bl	8012854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011be6:	f002 f845 	bl	8013c74 <vPortEnterCritical>
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bf0:	b25b      	sxtb	r3, r3
 8011bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bf6:	d103      	bne.n	8011c00 <xQueueGenericSend+0x16c>
 8011bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c06:	b25b      	sxtb	r3, r3
 8011c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c0c:	d103      	bne.n	8011c16 <xQueueGenericSend+0x182>
 8011c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c10:	2200      	movs	r2, #0
 8011c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c16:	f002 f85d 	bl	8013cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c1a:	1d3a      	adds	r2, r7, #4
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	4611      	mov	r1, r2
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 f952 	bl	8012ecc <xTaskCheckForTimeOut>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d124      	bne.n	8011c78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c30:	f000 fb5e 	bl	80122f0 <prvIsQueueFull>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d018      	beq.n	8011c6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3c:	3310      	adds	r3, #16
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	4611      	mov	r1, r2
 8011c42:	4618      	mov	r0, r3
 8011c44:	f000 ffda 	bl	8012bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c4a:	f000 fae9 	bl	8012220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c4e:	f000 fe0f 	bl	8012870 <xTaskResumeAll>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f47f af7c 	bne.w	8011b52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011c5a:	4b0c      	ldr	r3, [pc, #48]	; (8011c8c <xQueueGenericSend+0x1f8>)
 8011c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	f3bf 8f4f 	dsb	sy
 8011c66:	f3bf 8f6f 	isb	sy
 8011c6a:	e772      	b.n	8011b52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c6e:	f000 fad7 	bl	8012220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c72:	f000 fdfd 	bl	8012870 <xTaskResumeAll>
 8011c76:	e76c      	b.n	8011b52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c7a:	f000 fad1 	bl	8012220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c7e:	f000 fdf7 	bl	8012870 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3738      	adds	r7, #56	; 0x38
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	e000ed04 	.word	0xe000ed04

08011c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b090      	sub	sp, #64	; 0x40
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
 8011c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d10a      	bne.n	8011cbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cac:	f383 8811 	msr	BASEPRI, r3
 8011cb0:	f3bf 8f6f 	isb	sy
 8011cb4:	f3bf 8f4f 	dsb	sy
 8011cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011cba:	bf00      	nop
 8011cbc:	e7fe      	b.n	8011cbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d103      	bne.n	8011ccc <xQueueGenericSendFromISR+0x3c>
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d101      	bne.n	8011cd0 <xQueueGenericSendFromISR+0x40>
 8011ccc:	2301      	movs	r3, #1
 8011cce:	e000      	b.n	8011cd2 <xQueueGenericSendFromISR+0x42>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d10a      	bne.n	8011cec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cda:	f383 8811 	msr	BASEPRI, r3
 8011cde:	f3bf 8f6f 	isb	sy
 8011ce2:	f3bf 8f4f 	dsb	sy
 8011ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ce8:	bf00      	nop
 8011cea:	e7fe      	b.n	8011cea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	2b02      	cmp	r3, #2
 8011cf0:	d103      	bne.n	8011cfa <xQueueGenericSendFromISR+0x6a>
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d101      	bne.n	8011cfe <xQueueGenericSendFromISR+0x6e>
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	e000      	b.n	8011d00 <xQueueGenericSendFromISR+0x70>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10a      	bne.n	8011d1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d08:	f383 8811 	msr	BASEPRI, r3
 8011d0c:	f3bf 8f6f 	isb	sy
 8011d10:	f3bf 8f4f 	dsb	sy
 8011d14:	623b      	str	r3, [r7, #32]
}
 8011d16:	bf00      	nop
 8011d18:	e7fe      	b.n	8011d18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d1a:	f002 f88d 	bl	8013e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8011d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d26:	f383 8811 	msr	BASEPRI, r3
 8011d2a:	f3bf 8f6f 	isb	sy
 8011d2e:	f3bf 8f4f 	dsb	sy
 8011d32:	61fa      	str	r2, [r7, #28]
 8011d34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d302      	bcc.n	8011d4c <xQueueGenericSendFromISR+0xbc>
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	2b02      	cmp	r3, #2
 8011d4a:	d12f      	bne.n	8011dac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	68b9      	ldr	r1, [r7, #8]
 8011d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d62:	f000 f9cd 	bl	8012100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d6e:	d112      	bne.n	8011d96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d016      	beq.n	8011da6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	3324      	adds	r3, #36	; 0x24
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f000 ffc9 	bl	8012d14 <xTaskRemoveFromEventList>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00e      	beq.n	8011da6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00b      	beq.n	8011da6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	e007      	b.n	8011da6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	b25a      	sxtb	r2, r3
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011da6:	2301      	movs	r3, #1
 8011da8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011daa:	e001      	b.n	8011db0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011dba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3740      	adds	r7, #64	; 0x40
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b08c      	sub	sp, #48	; 0x30
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d10a      	bne.n	8011df8 <xQueueReceive+0x30>
	__asm volatile
 8011de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de6:	f383 8811 	msr	BASEPRI, r3
 8011dea:	f3bf 8f6f 	isb	sy
 8011dee:	f3bf 8f4f 	dsb	sy
 8011df2:	623b      	str	r3, [r7, #32]
}
 8011df4:	bf00      	nop
 8011df6:	e7fe      	b.n	8011df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d103      	bne.n	8011e06 <xQueueReceive+0x3e>
 8011dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d101      	bne.n	8011e0a <xQueueReceive+0x42>
 8011e06:	2301      	movs	r3, #1
 8011e08:	e000      	b.n	8011e0c <xQueueReceive+0x44>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10a      	bne.n	8011e26 <xQueueReceive+0x5e>
	__asm volatile
 8011e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e14:	f383 8811 	msr	BASEPRI, r3
 8011e18:	f3bf 8f6f 	isb	sy
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	61fb      	str	r3, [r7, #28]
}
 8011e22:	bf00      	nop
 8011e24:	e7fe      	b.n	8011e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e26:	f001 f995 	bl	8013154 <xTaskGetSchedulerState>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d102      	bne.n	8011e36 <xQueueReceive+0x6e>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d101      	bne.n	8011e3a <xQueueReceive+0x72>
 8011e36:	2301      	movs	r3, #1
 8011e38:	e000      	b.n	8011e3c <xQueueReceive+0x74>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10a      	bne.n	8011e56 <xQueueReceive+0x8e>
	__asm volatile
 8011e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e44:	f383 8811 	msr	BASEPRI, r3
 8011e48:	f3bf 8f6f 	isb	sy
 8011e4c:	f3bf 8f4f 	dsb	sy
 8011e50:	61bb      	str	r3, [r7, #24]
}
 8011e52:	bf00      	nop
 8011e54:	e7fe      	b.n	8011e54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e56:	f001 ff0d 	bl	8013c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d01f      	beq.n	8011ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e66:	68b9      	ldr	r1, [r7, #8]
 8011e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e6a:	f000 f9b3 	bl	80121d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e70:	1e5a      	subs	r2, r3, #1
 8011e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e78:	691b      	ldr	r3, [r3, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00f      	beq.n	8011e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e80:	3310      	adds	r3, #16
 8011e82:	4618      	mov	r0, r3
 8011e84:	f000 ff46 	bl	8012d14 <xTaskRemoveFromEventList>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d007      	beq.n	8011e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011e8e:	4b3d      	ldr	r3, [pc, #244]	; (8011f84 <xQueueReceive+0x1bc>)
 8011e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e94:	601a      	str	r2, [r3, #0]
 8011e96:	f3bf 8f4f 	dsb	sy
 8011e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011e9e:	f001 ff19 	bl	8013cd4 <vPortExitCritical>
				return pdPASS;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	e069      	b.n	8011f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d103      	bne.n	8011eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011eac:	f001 ff12 	bl	8013cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e062      	b.n	8011f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d106      	bne.n	8011ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011eba:	f107 0310 	add.w	r3, r7, #16
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f000 ffee 	bl	8012ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ec8:	f001 ff04 	bl	8013cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ecc:	f000 fcc2 	bl	8012854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ed0:	f001 fed0 	bl	8013c74 <vPortEnterCritical>
 8011ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ee0:	d103      	bne.n	8011eea <xQueueReceive+0x122>
 8011ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ef0:	b25b      	sxtb	r3, r3
 8011ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ef6:	d103      	bne.n	8011f00 <xQueueReceive+0x138>
 8011ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f00:	f001 fee8 	bl	8013cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f04:	1d3a      	adds	r2, r7, #4
 8011f06:	f107 0310 	add.w	r3, r7, #16
 8011f0a:	4611      	mov	r1, r2
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f000 ffdd 	bl	8012ecc <xTaskCheckForTimeOut>
 8011f12:	4603      	mov	r3, r0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d123      	bne.n	8011f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f1a:	f000 f9d3 	bl	80122c4 <prvIsQueueEmpty>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d017      	beq.n	8011f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f26:	3324      	adds	r3, #36	; 0x24
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	4611      	mov	r1, r2
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f000 fe65 	bl	8012bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f34:	f000 f974 	bl	8012220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f38:	f000 fc9a 	bl	8012870 <xTaskResumeAll>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d189      	bne.n	8011e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011f42:	4b10      	ldr	r3, [pc, #64]	; (8011f84 <xQueueReceive+0x1bc>)
 8011f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f48:	601a      	str	r2, [r3, #0]
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	f3bf 8f6f 	isb	sy
 8011f52:	e780      	b.n	8011e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f56:	f000 f963 	bl	8012220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f5a:	f000 fc89 	bl	8012870 <xTaskResumeAll>
 8011f5e:	e77a      	b.n	8011e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f62:	f000 f95d 	bl	8012220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f66:	f000 fc83 	bl	8012870 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f6c:	f000 f9aa 	bl	80122c4 <prvIsQueueEmpty>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f43f af6f 	beq.w	8011e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3730      	adds	r7, #48	; 0x30
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	e000ed04 	.word	0xe000ed04

08011f88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08e      	sub	sp, #56	; 0x38
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d10a      	bne.n	8011fb4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa2:	f383 8811 	msr	BASEPRI, r3
 8011fa6:	f3bf 8f6f 	isb	sy
 8011faa:	f3bf 8f4f 	dsb	sy
 8011fae:	623b      	str	r3, [r7, #32]
}
 8011fb0:	bf00      	nop
 8011fb2:	e7fe      	b.n	8011fb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d103      	bne.n	8011fc2 <xQueueReceiveFromISR+0x3a>
 8011fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d101      	bne.n	8011fc6 <xQueueReceiveFromISR+0x3e>
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	e000      	b.n	8011fc8 <xQueueReceiveFromISR+0x40>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d10a      	bne.n	8011fe2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd0:	f383 8811 	msr	BASEPRI, r3
 8011fd4:	f3bf 8f6f 	isb	sy
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	61fb      	str	r3, [r7, #28]
}
 8011fde:	bf00      	nop
 8011fe0:	e7fe      	b.n	8011fe0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011fe2:	f001 ff29 	bl	8013e38 <vPortValidateInterruptPriority>
	__asm volatile
 8011fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8011fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	61ba      	str	r2, [r7, #24]
 8011ffc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011ffe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012000:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012006:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200a:	2b00      	cmp	r3, #0
 801200c:	d02f      	beq.n	801206e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012018:	68b9      	ldr	r1, [r7, #8]
 801201a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201c:	f000 f8da 	bl	80121d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012022:	1e5a      	subs	r2, r3, #1
 8012024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012026:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012030:	d112      	bne.n	8012058 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d016      	beq.n	8012068 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203c:	3310      	adds	r3, #16
 801203e:	4618      	mov	r0, r3
 8012040:	f000 fe68 	bl	8012d14 <xTaskRemoveFromEventList>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00e      	beq.n	8012068 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00b      	beq.n	8012068 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	601a      	str	r2, [r3, #0]
 8012056:	e007      	b.n	8012068 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801205c:	3301      	adds	r3, #1
 801205e:	b2db      	uxtb	r3, r3
 8012060:	b25a      	sxtb	r2, r3
 8012062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012068:	2301      	movs	r3, #1
 801206a:	637b      	str	r3, [r7, #52]	; 0x34
 801206c:	e001      	b.n	8012072 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801206e:	2300      	movs	r3, #0
 8012070:	637b      	str	r3, [r7, #52]	; 0x34
 8012072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012074:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	f383 8811 	msr	BASEPRI, r3
}
 801207c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012080:	4618      	mov	r0, r3
 8012082:	3738      	adds	r7, #56	; 0x38
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10a      	bne.n	80120ac <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209a:	f383 8811 	msr	BASEPRI, r3
 801209e:	f3bf 8f6f 	isb	sy
 80120a2:	f3bf 8f4f 	dsb	sy
 80120a6:	60bb      	str	r3, [r7, #8]
}
 80120a8:	bf00      	nop
 80120aa:	e7fe      	b.n	80120aa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80120ac:	f001 fde2 	bl	8013c74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80120b6:	f001 fe0d 	bl	8013cd4 <vPortExitCritical>

	return uxReturn;
 80120ba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80120bc:	4618      	mov	r0, r3
 80120be:	3710      	adds	r7, #16
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80120c4:	b480      	push	{r7}
 80120c6:	b087      	sub	sp, #28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d10a      	bne.n	80120ec <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80120d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120da:	f383 8811 	msr	BASEPRI, r3
 80120de:	f3bf 8f6f 	isb	sy
 80120e2:	f3bf 8f4f 	dsb	sy
 80120e6:	60fb      	str	r3, [r7, #12]
}
 80120e8:	bf00      	nop
 80120ea:	e7fe      	b.n	80120ea <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80120f2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80120f4:	4618      	mov	r0, r3
 80120f6:	371c      	adds	r7, #28
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr

08012100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801210c:	2300      	movs	r3, #0
 801210e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10d      	bne.n	801213a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d14d      	bne.n	80121c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	689b      	ldr	r3, [r3, #8]
 801212a:	4618      	mov	r0, r3
 801212c:	f001 f830 	bl	8013190 <xTaskPriorityDisinherit>
 8012130:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2200      	movs	r2, #0
 8012136:	609a      	str	r2, [r3, #8]
 8012138:	e043      	b.n	80121c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d119      	bne.n	8012174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6858      	ldr	r0, [r3, #4]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012148:	461a      	mov	r2, r3
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	f002 f8d8 	bl	8014300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	685a      	ldr	r2, [r3, #4]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012158:	441a      	add	r2, r3
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	685a      	ldr	r2, [r3, #4]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	429a      	cmp	r2, r3
 8012168:	d32b      	bcc.n	80121c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	605a      	str	r2, [r3, #4]
 8012172:	e026      	b.n	80121c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	68d8      	ldr	r0, [r3, #12]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801217c:	461a      	mov	r2, r3
 801217e:	68b9      	ldr	r1, [r7, #8]
 8012180:	f002 f8be 	bl	8014300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	68da      	ldr	r2, [r3, #12]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801218c:	425b      	negs	r3, r3
 801218e:	441a      	add	r2, r3
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68da      	ldr	r2, [r3, #12]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	429a      	cmp	r2, r3
 801219e:	d207      	bcs.n	80121b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	689a      	ldr	r2, [r3, #8]
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a8:	425b      	negs	r3, r3
 80121aa:	441a      	add	r2, r3
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b02      	cmp	r3, #2
 80121b4:	d105      	bne.n	80121c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d002      	beq.n	80121c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	3b01      	subs	r3, #1
 80121c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	1c5a      	adds	r2, r3, #1
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80121ca:	697b      	ldr	r3, [r7, #20]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d018      	beq.n	8012218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	68da      	ldr	r2, [r3, #12]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ee:	441a      	add	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	68da      	ldr	r2, [r3, #12]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d303      	bcc.n	8012208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68d9      	ldr	r1, [r3, #12]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012210:	461a      	mov	r2, r3
 8012212:	6838      	ldr	r0, [r7, #0]
 8012214:	f002 f874 	bl	8014300 <memcpy>
	}
}
 8012218:	bf00      	nop
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012228:	f001 fd24 	bl	8013c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012234:	e011      	b.n	801225a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801223a:	2b00      	cmp	r3, #0
 801223c:	d012      	beq.n	8012264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	3324      	adds	r3, #36	; 0x24
 8012242:	4618      	mov	r0, r3
 8012244:	f000 fd66 	bl	8012d14 <xTaskRemoveFromEventList>
 8012248:	4603      	mov	r3, r0
 801224a:	2b00      	cmp	r3, #0
 801224c:	d001      	beq.n	8012252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801224e:	f000 fe9f 	bl	8012f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012252:	7bfb      	ldrb	r3, [r7, #15]
 8012254:	3b01      	subs	r3, #1
 8012256:	b2db      	uxtb	r3, r3
 8012258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801225e:	2b00      	cmp	r3, #0
 8012260:	dce9      	bgt.n	8012236 <prvUnlockQueue+0x16>
 8012262:	e000      	b.n	8012266 <prvUnlockQueue+0x46>
					break;
 8012264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	22ff      	movs	r2, #255	; 0xff
 801226a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801226e:	f001 fd31 	bl	8013cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012272:	f001 fcff 	bl	8013c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801227c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801227e:	e011      	b.n	80122a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d012      	beq.n	80122ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3310      	adds	r3, #16
 801228c:	4618      	mov	r0, r3
 801228e:	f000 fd41 	bl	8012d14 <xTaskRemoveFromEventList>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012298:	f000 fe7a 	bl	8012f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	3b01      	subs	r3, #1
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80122a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	dce9      	bgt.n	8012280 <prvUnlockQueue+0x60>
 80122ac:	e000      	b.n	80122b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80122ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	22ff      	movs	r2, #255	; 0xff
 80122b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80122b8:	f001 fd0c 	bl	8013cd4 <vPortExitCritical>
}
 80122bc:	bf00      	nop
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80122cc:	f001 fcd2 	bl	8013c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d102      	bne.n	80122de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80122d8:	2301      	movs	r3, #1
 80122da:	60fb      	str	r3, [r7, #12]
 80122dc:	e001      	b.n	80122e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80122de:	2300      	movs	r3, #0
 80122e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80122e2:	f001 fcf7 	bl	8013cd4 <vPortExitCritical>

	return xReturn;
 80122e6:	68fb      	ldr	r3, [r7, #12]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3710      	adds	r7, #16
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80122f8:	f001 fcbc 	bl	8013c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012304:	429a      	cmp	r2, r3
 8012306:	d102      	bne.n	801230e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012308:	2301      	movs	r3, #1
 801230a:	60fb      	str	r3, [r7, #12]
 801230c:	e001      	b.n	8012312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801230e:	2300      	movs	r3, #0
 8012310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012312:	f001 fcdf 	bl	8013cd4 <vPortExitCritical>

	return xReturn;
 8012316:	68fb      	ldr	r3, [r7, #12]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	e014      	b.n	801235a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012330:	4a0f      	ldr	r2, [pc, #60]	; (8012370 <vQueueAddToRegistry+0x50>)
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d10b      	bne.n	8012354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801233c:	490c      	ldr	r1, [pc, #48]	; (8012370 <vQueueAddToRegistry+0x50>)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012346:	4a0a      	ldr	r2, [pc, #40]	; (8012370 <vQueueAddToRegistry+0x50>)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	4413      	add	r3, r2
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012352:	e006      	b.n	8012362 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	3301      	adds	r3, #1
 8012358:	60fb      	str	r3, [r7, #12]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2b07      	cmp	r3, #7
 801235e:	d9e7      	bls.n	8012330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012360:	bf00      	nop
 8012362:	bf00      	nop
 8012364:	3714      	adds	r7, #20
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	24000e38 	.word	0x24000e38

08012374 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012374:	b580      	push	{r7, lr}
 8012376:	b086      	sub	sp, #24
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012384:	f001 fc76 	bl	8013c74 <vPortEnterCritical>
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801238e:	b25b      	sxtb	r3, r3
 8012390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012394:	d103      	bne.n	801239e <vQueueWaitForMessageRestricted+0x2a>
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123a4:	b25b      	sxtb	r3, r3
 80123a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123aa:	d103      	bne.n	80123b4 <vQueueWaitForMessageRestricted+0x40>
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123b4:	f001 fc8e 	bl	8013cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d106      	bne.n	80123ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	3324      	adds	r3, #36	; 0x24
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f000 fc77 	bl	8012cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80123ce:	6978      	ldr	r0, [r7, #20]
 80123d0:	f7ff ff26 	bl	8012220 <prvUnlockQueue>
	}
 80123d4:	bf00      	nop
 80123d6:	3718      	adds	r7, #24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b08e      	sub	sp, #56	; 0x38
 80123e0:	af04      	add	r7, sp, #16
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80123ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d10a      	bne.n	8012406 <xTaskCreateStatic+0x2a>
	__asm volatile
 80123f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f4:	f383 8811 	msr	BASEPRI, r3
 80123f8:	f3bf 8f6f 	isb	sy
 80123fc:	f3bf 8f4f 	dsb	sy
 8012400:	623b      	str	r3, [r7, #32]
}
 8012402:	bf00      	nop
 8012404:	e7fe      	b.n	8012404 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	2b00      	cmp	r3, #0
 801240a:	d10a      	bne.n	8012422 <xTaskCreateStatic+0x46>
	__asm volatile
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	f383 8811 	msr	BASEPRI, r3
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	f3bf 8f4f 	dsb	sy
 801241c:	61fb      	str	r3, [r7, #28]
}
 801241e:	bf00      	nop
 8012420:	e7fe      	b.n	8012420 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012422:	235c      	movs	r3, #92	; 0x5c
 8012424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	2b5c      	cmp	r3, #92	; 0x5c
 801242a:	d00a      	beq.n	8012442 <xTaskCreateStatic+0x66>
	__asm volatile
 801242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012430:	f383 8811 	msr	BASEPRI, r3
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	61bb      	str	r3, [r7, #24]
}
 801243e:	bf00      	nop
 8012440:	e7fe      	b.n	8012440 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012442:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012446:	2b00      	cmp	r3, #0
 8012448:	d01e      	beq.n	8012488 <xTaskCreateStatic+0xac>
 801244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244c:	2b00      	cmp	r3, #0
 801244e:	d01b      	beq.n	8012488 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012458:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245c:	2202      	movs	r2, #2
 801245e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012462:	2300      	movs	r3, #0
 8012464:	9303      	str	r3, [sp, #12]
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	9302      	str	r3, [sp, #8]
 801246a:	f107 0314 	add.w	r3, r7, #20
 801246e:	9301      	str	r3, [sp, #4]
 8012470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	68b9      	ldr	r1, [r7, #8]
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f000 f850 	bl	8012520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012482:	f000 f8dd 	bl	8012640 <prvAddNewTaskToReadyList>
 8012486:	e001      	b.n	801248c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801248c:	697b      	ldr	r3, [r7, #20]
	}
 801248e:	4618      	mov	r0, r3
 8012490:	3728      	adds	r7, #40	; 0x28
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012496:	b580      	push	{r7, lr}
 8012498:	b08c      	sub	sp, #48	; 0x30
 801249a:	af04      	add	r7, sp, #16
 801249c:	60f8      	str	r0, [r7, #12]
 801249e:	60b9      	str	r1, [r7, #8]
 80124a0:	603b      	str	r3, [r7, #0]
 80124a2:	4613      	mov	r3, r2
 80124a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80124a6:	88fb      	ldrh	r3, [r7, #6]
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4618      	mov	r0, r3
 80124ac:	f001 fd04 	bl	8013eb8 <pvPortMalloc>
 80124b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00e      	beq.n	80124d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80124b8:	205c      	movs	r0, #92	; 0x5c
 80124ba:	f001 fcfd 	bl	8013eb8 <pvPortMalloc>
 80124be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d003      	beq.n	80124ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	631a      	str	r2, [r3, #48]	; 0x30
 80124cc:	e005      	b.n	80124da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80124ce:	6978      	ldr	r0, [r7, #20]
 80124d0:	f001 fdbe 	bl	8014050 <vPortFree>
 80124d4:	e001      	b.n	80124da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80124d6:	2300      	movs	r3, #0
 80124d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d017      	beq.n	8012510 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80124e8:	88fa      	ldrh	r2, [r7, #6]
 80124ea:	2300      	movs	r3, #0
 80124ec:	9303      	str	r3, [sp, #12]
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	9302      	str	r3, [sp, #8]
 80124f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f000 f80e 	bl	8012520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012504:	69f8      	ldr	r0, [r7, #28]
 8012506:	f000 f89b 	bl	8012640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801250a:	2301      	movs	r3, #1
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	e002      	b.n	8012516 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012514:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012516:	69bb      	ldr	r3, [r7, #24]
	}
 8012518:	4618      	mov	r0, r3
 801251a:	3720      	adds	r7, #32
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b088      	sub	sp, #32
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
 801252c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012530:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	461a      	mov	r2, r3
 8012538:	21a5      	movs	r1, #165	; 0xa5
 801253a:	f001 feef 	bl	801431c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012542:	6879      	ldr	r1, [r7, #4]
 8012544:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012548:	440b      	add	r3, r1
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	4413      	add	r3, r2
 801254e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	f023 0307 	bic.w	r3, r3, #7
 8012556:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	f003 0307 	and.w	r3, r3, #7
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00a      	beq.n	8012578 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012566:	f383 8811 	msr	BASEPRI, r3
 801256a:	f3bf 8f6f 	isb	sy
 801256e:	f3bf 8f4f 	dsb	sy
 8012572:	617b      	str	r3, [r7, #20]
}
 8012574:	bf00      	nop
 8012576:	e7fe      	b.n	8012576 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d01f      	beq.n	80125be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801257e:	2300      	movs	r3, #0
 8012580:	61fb      	str	r3, [r7, #28]
 8012582:	e012      	b.n	80125aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	4413      	add	r3, r2
 801258a:	7819      	ldrb	r1, [r3, #0]
 801258c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	4413      	add	r3, r2
 8012592:	3334      	adds	r3, #52	; 0x34
 8012594:	460a      	mov	r2, r1
 8012596:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	69fb      	ldr	r3, [r7, #28]
 801259c:	4413      	add	r3, r2
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d006      	beq.n	80125b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	3301      	adds	r3, #1
 80125a8:	61fb      	str	r3, [r7, #28]
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	2b0f      	cmp	r3, #15
 80125ae:	d9e9      	bls.n	8012584 <prvInitialiseNewTask+0x64>
 80125b0:	e000      	b.n	80125b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80125b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b6:	2200      	movs	r2, #0
 80125b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80125bc:	e003      	b.n	80125c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80125be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80125c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c8:	2b37      	cmp	r3, #55	; 0x37
 80125ca:	d901      	bls.n	80125d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80125cc:	2337      	movs	r3, #55	; 0x37
 80125ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80125d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80125d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80125dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125de:	2200      	movs	r2, #0
 80125e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	3304      	adds	r3, #4
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7ff f882 	bl	80116f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80125ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ee:	3318      	adds	r3, #24
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff f87d 	bl	80116f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80125f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012604:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801260a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260e:	2200      	movs	r2, #0
 8012610:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012614:	2200      	movs	r2, #0
 8012616:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801261a:	683a      	ldr	r2, [r7, #0]
 801261c:	68f9      	ldr	r1, [r7, #12]
 801261e:	69b8      	ldr	r0, [r7, #24]
 8012620:	f001 f9fe 	bl	8013a20 <pxPortInitialiseStack>
 8012624:	4602      	mov	r2, r0
 8012626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012628:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012636:	bf00      	nop
 8012638:	3720      	adds	r7, #32
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012648:	f001 fb14 	bl	8013c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801264c:	4b2d      	ldr	r3, [pc, #180]	; (8012704 <prvAddNewTaskToReadyList+0xc4>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	3301      	adds	r3, #1
 8012652:	4a2c      	ldr	r2, [pc, #176]	; (8012704 <prvAddNewTaskToReadyList+0xc4>)
 8012654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012656:	4b2c      	ldr	r3, [pc, #176]	; (8012708 <prvAddNewTaskToReadyList+0xc8>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d109      	bne.n	8012672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801265e:	4a2a      	ldr	r2, [pc, #168]	; (8012708 <prvAddNewTaskToReadyList+0xc8>)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012664:	4b27      	ldr	r3, [pc, #156]	; (8012704 <prvAddNewTaskToReadyList+0xc4>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b01      	cmp	r3, #1
 801266a:	d110      	bne.n	801268e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801266c:	f000 fcb4 	bl	8012fd8 <prvInitialiseTaskLists>
 8012670:	e00d      	b.n	801268e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012672:	4b26      	ldr	r3, [pc, #152]	; (801270c <prvAddNewTaskToReadyList+0xcc>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d109      	bne.n	801268e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801267a:	4b23      	ldr	r3, [pc, #140]	; (8012708 <prvAddNewTaskToReadyList+0xc8>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012684:	429a      	cmp	r2, r3
 8012686:	d802      	bhi.n	801268e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012688:	4a1f      	ldr	r2, [pc, #124]	; (8012708 <prvAddNewTaskToReadyList+0xc8>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801268e:	4b20      	ldr	r3, [pc, #128]	; (8012710 <prvAddNewTaskToReadyList+0xd0>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	3301      	adds	r3, #1
 8012694:	4a1e      	ldr	r2, [pc, #120]	; (8012710 <prvAddNewTaskToReadyList+0xd0>)
 8012696:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012698:	4b1d      	ldr	r3, [pc, #116]	; (8012710 <prvAddNewTaskToReadyList+0xd0>)
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126a4:	4b1b      	ldr	r3, [pc, #108]	; (8012714 <prvAddNewTaskToReadyList+0xd4>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d903      	bls.n	80126b4 <prvAddNewTaskToReadyList+0x74>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b0:	4a18      	ldr	r2, [pc, #96]	; (8012714 <prvAddNewTaskToReadyList+0xd4>)
 80126b2:	6013      	str	r3, [r2, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126b8:	4613      	mov	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	4413      	add	r3, r2
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	4a15      	ldr	r2, [pc, #84]	; (8012718 <prvAddNewTaskToReadyList+0xd8>)
 80126c2:	441a      	add	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	3304      	adds	r3, #4
 80126c8:	4619      	mov	r1, r3
 80126ca:	4610      	mov	r0, r2
 80126cc:	f7ff f81d 	bl	801170a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80126d0:	f001 fb00 	bl	8013cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80126d4:	4b0d      	ldr	r3, [pc, #52]	; (801270c <prvAddNewTaskToReadyList+0xcc>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00e      	beq.n	80126fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80126dc:	4b0a      	ldr	r3, [pc, #40]	; (8012708 <prvAddNewTaskToReadyList+0xc8>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d207      	bcs.n	80126fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80126ea:	4b0c      	ldr	r3, [pc, #48]	; (801271c <prvAddNewTaskToReadyList+0xdc>)
 80126ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126fa:	bf00      	nop
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	2400134c 	.word	0x2400134c
 8012708:	24000e78 	.word	0x24000e78
 801270c:	24001358 	.word	0x24001358
 8012710:	24001368 	.word	0x24001368
 8012714:	24001354 	.word	0x24001354
 8012718:	24000e7c 	.word	0x24000e7c
 801271c:	e000ed04 	.word	0xe000ed04

08012720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012728:	2300      	movs	r3, #0
 801272a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d017      	beq.n	8012762 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012732:	4b13      	ldr	r3, [pc, #76]	; (8012780 <vTaskDelay+0x60>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00a      	beq.n	8012750 <vTaskDelay+0x30>
	__asm volatile
 801273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273e:	f383 8811 	msr	BASEPRI, r3
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	f3bf 8f4f 	dsb	sy
 801274a:	60bb      	str	r3, [r7, #8]
}
 801274c:	bf00      	nop
 801274e:	e7fe      	b.n	801274e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012750:	f000 f880 	bl	8012854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012754:	2100      	movs	r1, #0
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 fda0 	bl	801329c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801275c:	f000 f888 	bl	8012870 <xTaskResumeAll>
 8012760:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d107      	bne.n	8012778 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012768:	4b06      	ldr	r3, [pc, #24]	; (8012784 <vTaskDelay+0x64>)
 801276a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801276e:	601a      	str	r2, [r3, #0]
 8012770:	f3bf 8f4f 	dsb	sy
 8012774:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012778:	bf00      	nop
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	24001374 	.word	0x24001374
 8012784:	e000ed04 	.word	0xe000ed04

08012788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08a      	sub	sp, #40	; 0x28
 801278c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801278e:	2300      	movs	r3, #0
 8012790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012792:	2300      	movs	r3, #0
 8012794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012796:	463a      	mov	r2, r7
 8012798:	1d39      	adds	r1, r7, #4
 801279a:	f107 0308 	add.w	r3, r7, #8
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fe fd64 	bl	801126c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	68ba      	ldr	r2, [r7, #8]
 80127aa:	9202      	str	r2, [sp, #8]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	2300      	movs	r3, #0
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	2300      	movs	r3, #0
 80127b4:	460a      	mov	r2, r1
 80127b6:	4921      	ldr	r1, [pc, #132]	; (801283c <vTaskStartScheduler+0xb4>)
 80127b8:	4821      	ldr	r0, [pc, #132]	; (8012840 <vTaskStartScheduler+0xb8>)
 80127ba:	f7ff fe0f 	bl	80123dc <xTaskCreateStatic>
 80127be:	4603      	mov	r3, r0
 80127c0:	4a20      	ldr	r2, [pc, #128]	; (8012844 <vTaskStartScheduler+0xbc>)
 80127c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80127c4:	4b1f      	ldr	r3, [pc, #124]	; (8012844 <vTaskStartScheduler+0xbc>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d002      	beq.n	80127d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80127cc:	2301      	movs	r3, #1
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	e001      	b.n	80127d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d102      	bne.n	80127e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80127dc:	f000 fdb2 	bl	8013344 <xTimerCreateTimerTask>
 80127e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d116      	bne.n	8012816 <vTaskStartScheduler+0x8e>
	__asm volatile
 80127e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ec:	f383 8811 	msr	BASEPRI, r3
 80127f0:	f3bf 8f6f 	isb	sy
 80127f4:	f3bf 8f4f 	dsb	sy
 80127f8:	613b      	str	r3, [r7, #16]
}
 80127fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127fc:	4b12      	ldr	r3, [pc, #72]	; (8012848 <vTaskStartScheduler+0xc0>)
 80127fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012804:	4b11      	ldr	r3, [pc, #68]	; (801284c <vTaskStartScheduler+0xc4>)
 8012806:	2201      	movs	r2, #1
 8012808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <vTaskStartScheduler+0xc8>)
 801280c:	2200      	movs	r2, #0
 801280e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012810:	f001 f98e 	bl	8013b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012814:	e00e      	b.n	8012834 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801281c:	d10a      	bne.n	8012834 <vTaskStartScheduler+0xac>
	__asm volatile
 801281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	60fb      	str	r3, [r7, #12]
}
 8012830:	bf00      	nop
 8012832:	e7fe      	b.n	8012832 <vTaskStartScheduler+0xaa>
}
 8012834:	bf00      	nop
 8012836:	3718      	adds	r7, #24
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	08015558 	.word	0x08015558
 8012840:	08012fa9 	.word	0x08012fa9
 8012844:	24001370 	.word	0x24001370
 8012848:	2400136c 	.word	0x2400136c
 801284c:	24001358 	.word	0x24001358
 8012850:	24001350 	.word	0x24001350

08012854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012854:	b480      	push	{r7}
 8012856:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012858:	4b04      	ldr	r3, [pc, #16]	; (801286c <vTaskSuspendAll+0x18>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3301      	adds	r3, #1
 801285e:	4a03      	ldr	r2, [pc, #12]	; (801286c <vTaskSuspendAll+0x18>)
 8012860:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012862:	bf00      	nop
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	24001374 	.word	0x24001374

08012870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012876:	2300      	movs	r3, #0
 8012878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801287a:	2300      	movs	r3, #0
 801287c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801287e:	4b42      	ldr	r3, [pc, #264]	; (8012988 <xTaskResumeAll+0x118>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d10a      	bne.n	801289c <xTaskResumeAll+0x2c>
	__asm volatile
 8012886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288a:	f383 8811 	msr	BASEPRI, r3
 801288e:	f3bf 8f6f 	isb	sy
 8012892:	f3bf 8f4f 	dsb	sy
 8012896:	603b      	str	r3, [r7, #0]
}
 8012898:	bf00      	nop
 801289a:	e7fe      	b.n	801289a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801289c:	f001 f9ea 	bl	8013c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128a0:	4b39      	ldr	r3, [pc, #228]	; (8012988 <xTaskResumeAll+0x118>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	3b01      	subs	r3, #1
 80128a6:	4a38      	ldr	r2, [pc, #224]	; (8012988 <xTaskResumeAll+0x118>)
 80128a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128aa:	4b37      	ldr	r3, [pc, #220]	; (8012988 <xTaskResumeAll+0x118>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d162      	bne.n	8012978 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80128b2:	4b36      	ldr	r3, [pc, #216]	; (801298c <xTaskResumeAll+0x11c>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d05e      	beq.n	8012978 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128ba:	e02f      	b.n	801291c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128bc:	4b34      	ldr	r3, [pc, #208]	; (8012990 <xTaskResumeAll+0x120>)
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	3318      	adds	r3, #24
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7fe ff7b 	bl	80117c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	3304      	adds	r3, #4
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fe ff76 	bl	80117c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128dc:	4b2d      	ldr	r3, [pc, #180]	; (8012994 <xTaskResumeAll+0x124>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d903      	bls.n	80128ec <xTaskResumeAll+0x7c>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e8:	4a2a      	ldr	r2, [pc, #168]	; (8012994 <xTaskResumeAll+0x124>)
 80128ea:	6013      	str	r3, [r2, #0]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f0:	4613      	mov	r3, r2
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	4413      	add	r3, r2
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	4a27      	ldr	r2, [pc, #156]	; (8012998 <xTaskResumeAll+0x128>)
 80128fa:	441a      	add	r2, r3
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3304      	adds	r3, #4
 8012900:	4619      	mov	r1, r3
 8012902:	4610      	mov	r0, r2
 8012904:	f7fe ff01 	bl	801170a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801290c:	4b23      	ldr	r3, [pc, #140]	; (801299c <xTaskResumeAll+0x12c>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012912:	429a      	cmp	r2, r3
 8012914:	d302      	bcc.n	801291c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012916:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <xTaskResumeAll+0x130>)
 8012918:	2201      	movs	r2, #1
 801291a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801291c:	4b1c      	ldr	r3, [pc, #112]	; (8012990 <xTaskResumeAll+0x120>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1cb      	bne.n	80128bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d001      	beq.n	801292e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801292a:	f000 fbf3 	bl	8013114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801292e:	4b1d      	ldr	r3, [pc, #116]	; (80129a4 <xTaskResumeAll+0x134>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d010      	beq.n	801295c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801293a:	f000 f847 	bl	80129cc <xTaskIncrementTick>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012944:	4b16      	ldr	r3, [pc, #88]	; (80129a0 <xTaskResumeAll+0x130>)
 8012946:	2201      	movs	r2, #1
 8012948:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3b01      	subs	r3, #1
 801294e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1f1      	bne.n	801293a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012956:	4b13      	ldr	r3, [pc, #76]	; (80129a4 <xTaskResumeAll+0x134>)
 8012958:	2200      	movs	r2, #0
 801295a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801295c:	4b10      	ldr	r3, [pc, #64]	; (80129a0 <xTaskResumeAll+0x130>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d009      	beq.n	8012978 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012964:	2301      	movs	r3, #1
 8012966:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012968:	4b0f      	ldr	r3, [pc, #60]	; (80129a8 <xTaskResumeAll+0x138>)
 801296a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801296e:	601a      	str	r2, [r3, #0]
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012978:	f001 f9ac 	bl	8013cd4 <vPortExitCritical>

	return xAlreadyYielded;
 801297c:	68bb      	ldr	r3, [r7, #8]
}
 801297e:	4618      	mov	r0, r3
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	24001374 	.word	0x24001374
 801298c:	2400134c 	.word	0x2400134c
 8012990:	2400130c 	.word	0x2400130c
 8012994:	24001354 	.word	0x24001354
 8012998:	24000e7c 	.word	0x24000e7c
 801299c:	24000e78 	.word	0x24000e78
 80129a0:	24001360 	.word	0x24001360
 80129a4:	2400135c 	.word	0x2400135c
 80129a8:	e000ed04 	.word	0xe000ed04

080129ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80129b2:	4b05      	ldr	r3, [pc, #20]	; (80129c8 <xTaskGetTickCount+0x1c>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80129b8:	687b      	ldr	r3, [r7, #4]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	370c      	adds	r7, #12
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	24001350 	.word	0x24001350

080129cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80129d2:	2300      	movs	r3, #0
 80129d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d6:	4b4f      	ldr	r3, [pc, #316]	; (8012b14 <xTaskIncrementTick+0x148>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 808f 	bne.w	8012afe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80129e0:	4b4d      	ldr	r3, [pc, #308]	; (8012b18 <xTaskIncrementTick+0x14c>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3301      	adds	r3, #1
 80129e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80129e8:	4a4b      	ldr	r2, [pc, #300]	; (8012b18 <xTaskIncrementTick+0x14c>)
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d120      	bne.n	8012a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80129f4:	4b49      	ldr	r3, [pc, #292]	; (8012b1c <xTaskIncrementTick+0x150>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00a      	beq.n	8012a14 <xTaskIncrementTick+0x48>
	__asm volatile
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	603b      	str	r3, [r7, #0]
}
 8012a10:	bf00      	nop
 8012a12:	e7fe      	b.n	8012a12 <xTaskIncrementTick+0x46>
 8012a14:	4b41      	ldr	r3, [pc, #260]	; (8012b1c <xTaskIncrementTick+0x150>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	60fb      	str	r3, [r7, #12]
 8012a1a:	4b41      	ldr	r3, [pc, #260]	; (8012b20 <xTaskIncrementTick+0x154>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	4a3f      	ldr	r2, [pc, #252]	; (8012b1c <xTaskIncrementTick+0x150>)
 8012a20:	6013      	str	r3, [r2, #0]
 8012a22:	4a3f      	ldr	r2, [pc, #252]	; (8012b20 <xTaskIncrementTick+0x154>)
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	6013      	str	r3, [r2, #0]
 8012a28:	4b3e      	ldr	r3, [pc, #248]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	4a3d      	ldr	r2, [pc, #244]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a30:	6013      	str	r3, [r2, #0]
 8012a32:	f000 fb6f 	bl	8013114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a36:	4b3c      	ldr	r3, [pc, #240]	; (8012b28 <xTaskIncrementTick+0x15c>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	693a      	ldr	r2, [r7, #16]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d349      	bcc.n	8012ad4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a40:	4b36      	ldr	r3, [pc, #216]	; (8012b1c <xTaskIncrementTick+0x150>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d104      	bne.n	8012a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a4a:	4b37      	ldr	r3, [pc, #220]	; (8012b28 <xTaskIncrementTick+0x15c>)
 8012a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a50:	601a      	str	r2, [r3, #0]
					break;
 8012a52:	e03f      	b.n	8012ad4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a54:	4b31      	ldr	r3, [pc, #196]	; (8012b1c <xTaskIncrementTick+0x150>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d203      	bcs.n	8012a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a6c:	4a2e      	ldr	r2, [pc, #184]	; (8012b28 <xTaskIncrementTick+0x15c>)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012a72:	e02f      	b.n	8012ad4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	3304      	adds	r3, #4
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fe fea3 	bl	80117c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d004      	beq.n	8012a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	3318      	adds	r3, #24
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fe fe9a 	bl	80117c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a94:	4b25      	ldr	r3, [pc, #148]	; (8012b2c <xTaskIncrementTick+0x160>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d903      	bls.n	8012aa4 <xTaskIncrementTick+0xd8>
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa0:	4a22      	ldr	r2, [pc, #136]	; (8012b2c <xTaskIncrementTick+0x160>)
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	4413      	add	r3, r2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4a1f      	ldr	r2, [pc, #124]	; (8012b30 <xTaskIncrementTick+0x164>)
 8012ab2:	441a      	add	r2, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	3304      	adds	r3, #4
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7fe fe25 	bl	801170a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac4:	4b1b      	ldr	r3, [pc, #108]	; (8012b34 <xTaskIncrementTick+0x168>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d3b8      	bcc.n	8012a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ad2:	e7b5      	b.n	8012a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ad4:	4b17      	ldr	r3, [pc, #92]	; (8012b34 <xTaskIncrementTick+0x168>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ada:	4915      	ldr	r1, [pc, #84]	; (8012b30 <xTaskIncrementTick+0x164>)
 8012adc:	4613      	mov	r3, r2
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4413      	add	r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	440b      	add	r3, r1
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d901      	bls.n	8012af0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012aec:	2301      	movs	r3, #1
 8012aee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012af0:	4b11      	ldr	r3, [pc, #68]	; (8012b38 <xTaskIncrementTick+0x16c>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d007      	beq.n	8012b08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012af8:	2301      	movs	r3, #1
 8012afa:	617b      	str	r3, [r7, #20]
 8012afc:	e004      	b.n	8012b08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012afe:	4b0f      	ldr	r3, [pc, #60]	; (8012b3c <xTaskIncrementTick+0x170>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	3301      	adds	r3, #1
 8012b04:	4a0d      	ldr	r2, [pc, #52]	; (8012b3c <xTaskIncrementTick+0x170>)
 8012b06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012b08:	697b      	ldr	r3, [r7, #20]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3718      	adds	r7, #24
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	24001374 	.word	0x24001374
 8012b18:	24001350 	.word	0x24001350
 8012b1c:	24001304 	.word	0x24001304
 8012b20:	24001308 	.word	0x24001308
 8012b24:	24001364 	.word	0x24001364
 8012b28:	2400136c 	.word	0x2400136c
 8012b2c:	24001354 	.word	0x24001354
 8012b30:	24000e7c 	.word	0x24000e7c
 8012b34:	24000e78 	.word	0x24000e78
 8012b38:	24001360 	.word	0x24001360
 8012b3c:	2400135c 	.word	0x2400135c

08012b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012b46:	4b28      	ldr	r3, [pc, #160]	; (8012be8 <vTaskSwitchContext+0xa8>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d003      	beq.n	8012b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b4e:	4b27      	ldr	r3, [pc, #156]	; (8012bec <vTaskSwitchContext+0xac>)
 8012b50:	2201      	movs	r2, #1
 8012b52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b54:	e041      	b.n	8012bda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012b56:	4b25      	ldr	r3, [pc, #148]	; (8012bec <vTaskSwitchContext+0xac>)
 8012b58:	2200      	movs	r2, #0
 8012b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b5c:	4b24      	ldr	r3, [pc, #144]	; (8012bf0 <vTaskSwitchContext+0xb0>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	60fb      	str	r3, [r7, #12]
 8012b62:	e010      	b.n	8012b86 <vTaskSwitchContext+0x46>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d10a      	bne.n	8012b80 <vTaskSwitchContext+0x40>
	__asm volatile
 8012b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6e:	f383 8811 	msr	BASEPRI, r3
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	607b      	str	r3, [r7, #4]
}
 8012b7c:	bf00      	nop
 8012b7e:	e7fe      	b.n	8012b7e <vTaskSwitchContext+0x3e>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	3b01      	subs	r3, #1
 8012b84:	60fb      	str	r3, [r7, #12]
 8012b86:	491b      	ldr	r1, [pc, #108]	; (8012bf4 <vTaskSwitchContext+0xb4>)
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	009b      	lsls	r3, r3, #2
 8012b8e:	4413      	add	r3, r2
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	440b      	add	r3, r1
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d0e4      	beq.n	8012b64 <vTaskSwitchContext+0x24>
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	4613      	mov	r3, r2
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	4413      	add	r3, r2
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	4a13      	ldr	r2, [pc, #76]	; (8012bf4 <vTaskSwitchContext+0xb4>)
 8012ba6:	4413      	add	r3, r2
 8012ba8:	60bb      	str	r3, [r7, #8]
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	685a      	ldr	r2, [r3, #4]
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	605a      	str	r2, [r3, #4]
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	685a      	ldr	r2, [r3, #4]
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	3308      	adds	r3, #8
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d104      	bne.n	8012bca <vTaskSwitchContext+0x8a>
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	685a      	ldr	r2, [r3, #4]
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	605a      	str	r2, [r3, #4]
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	4a09      	ldr	r2, [pc, #36]	; (8012bf8 <vTaskSwitchContext+0xb8>)
 8012bd2:	6013      	str	r3, [r2, #0]
 8012bd4:	4a06      	ldr	r2, [pc, #24]	; (8012bf0 <vTaskSwitchContext+0xb0>)
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	6013      	str	r3, [r2, #0]
}
 8012bda:	bf00      	nop
 8012bdc:	3714      	adds	r7, #20
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop
 8012be8:	24001374 	.word	0x24001374
 8012bec:	24001360 	.word	0x24001360
 8012bf0:	24001354 	.word	0x24001354
 8012bf4:	24000e7c 	.word	0x24000e7c
 8012bf8:	24000e78 	.word	0x24000e78

08012bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d10a      	bne.n	8012c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c10:	f383 8811 	msr	BASEPRI, r3
 8012c14:	f3bf 8f6f 	isb	sy
 8012c18:	f3bf 8f4f 	dsb	sy
 8012c1c:	60fb      	str	r3, [r7, #12]
}
 8012c1e:	bf00      	nop
 8012c20:	e7fe      	b.n	8012c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c22:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <vTaskPlaceOnEventList+0x44>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	3318      	adds	r3, #24
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7fe fd91 	bl	8011752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c30:	2101      	movs	r1, #1
 8012c32:	6838      	ldr	r0, [r7, #0]
 8012c34:	f000 fb32 	bl	801329c <prvAddCurrentTaskToDelayedList>
}
 8012c38:	bf00      	nop
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	24000e78 	.word	0x24000e78

08012c44 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10a      	bne.n	8012c6c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5a:	f383 8811 	msr	BASEPRI, r3
 8012c5e:	f3bf 8f6f 	isb	sy
 8012c62:	f3bf 8f4f 	dsb	sy
 8012c66:	617b      	str	r3, [r7, #20]
}
 8012c68:	bf00      	nop
 8012c6a:	e7fe      	b.n	8012c6a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012c6c:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d10a      	bne.n	8012c8a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	613b      	str	r3, [r7, #16]
}
 8012c86:	bf00      	nop
 8012c88:	e7fe      	b.n	8012c88 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012c8a:	4b0b      	ldr	r3, [pc, #44]	; (8012cb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012c94:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c96:	4b08      	ldr	r3, [pc, #32]	; (8012cb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3318      	adds	r3, #24
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7fe fd33 	bl	801170a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 faf8 	bl	801329c <prvAddCurrentTaskToDelayedList>
}
 8012cac:	bf00      	nop
 8012cae:	3718      	adds	r7, #24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	24001374 	.word	0x24001374
 8012cb8:	24000e78 	.word	0x24000e78

08012cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b086      	sub	sp, #24
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d10a      	bne.n	8012ce4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd2:	f383 8811 	msr	BASEPRI, r3
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	617b      	str	r3, [r7, #20]
}
 8012ce0:	bf00      	nop
 8012ce2:	e7fe      	b.n	8012ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ce4:	4b0a      	ldr	r3, [pc, #40]	; (8012d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	3318      	adds	r3, #24
 8012cea:	4619      	mov	r1, r3
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	f7fe fd0c 	bl	801170a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d002      	beq.n	8012cfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	68b8      	ldr	r0, [r7, #8]
 8012d02:	f000 facb 	bl	801329c <prvAddCurrentTaskToDelayedList>
	}
 8012d06:	bf00      	nop
 8012d08:	3718      	adds	r7, #24
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	24000e78 	.word	0x24000e78

08012d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	68db      	ldr	r3, [r3, #12]
 8012d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10a      	bne.n	8012d40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2e:	f383 8811 	msr	BASEPRI, r3
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	60fb      	str	r3, [r7, #12]
}
 8012d3c:	bf00      	nop
 8012d3e:	e7fe      	b.n	8012d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	3318      	adds	r3, #24
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fe fd3d 	bl	80117c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d4a:	4b1e      	ldr	r3, [pc, #120]	; (8012dc4 <xTaskRemoveFromEventList+0xb0>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d11d      	bne.n	8012d8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	3304      	adds	r3, #4
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe fd34 	bl	80117c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d60:	4b19      	ldr	r3, [pc, #100]	; (8012dc8 <xTaskRemoveFromEventList+0xb4>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d903      	bls.n	8012d70 <xTaskRemoveFromEventList+0x5c>
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6c:	4a16      	ldr	r2, [pc, #88]	; (8012dc8 <xTaskRemoveFromEventList+0xb4>)
 8012d6e:	6013      	str	r3, [r2, #0]
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d74:	4613      	mov	r3, r2
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4413      	add	r3, r2
 8012d7a:	009b      	lsls	r3, r3, #2
 8012d7c:	4a13      	ldr	r2, [pc, #76]	; (8012dcc <xTaskRemoveFromEventList+0xb8>)
 8012d7e:	441a      	add	r2, r3
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	3304      	adds	r3, #4
 8012d84:	4619      	mov	r1, r3
 8012d86:	4610      	mov	r0, r2
 8012d88:	f7fe fcbf 	bl	801170a <vListInsertEnd>
 8012d8c:	e005      	b.n	8012d9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	3318      	adds	r3, #24
 8012d92:	4619      	mov	r1, r3
 8012d94:	480e      	ldr	r0, [pc, #56]	; (8012dd0 <xTaskRemoveFromEventList+0xbc>)
 8012d96:	f7fe fcb8 	bl	801170a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	; (8012dd4 <xTaskRemoveFromEventList+0xc0>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d905      	bls.n	8012db4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012da8:	2301      	movs	r3, #1
 8012daa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012dac:	4b0a      	ldr	r3, [pc, #40]	; (8012dd8 <xTaskRemoveFromEventList+0xc4>)
 8012dae:	2201      	movs	r2, #1
 8012db0:	601a      	str	r2, [r3, #0]
 8012db2:	e001      	b.n	8012db8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012db4:	2300      	movs	r3, #0
 8012db6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012db8:	697b      	ldr	r3, [r7, #20]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	24001374 	.word	0x24001374
 8012dc8:	24001354 	.word	0x24001354
 8012dcc:	24000e7c 	.word	0x24000e7c
 8012dd0:	2400130c 	.word	0x2400130c
 8012dd4:	24000e78 	.word	0x24000e78
 8012dd8:	24001360 	.word	0x24001360

08012ddc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b086      	sub	sp, #24
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012de6:	4b29      	ldr	r3, [pc, #164]	; (8012e8c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d10a      	bne.n	8012e04 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df2:	f383 8811 	msr	BASEPRI, r3
 8012df6:	f3bf 8f6f 	isb	sy
 8012dfa:	f3bf 8f4f 	dsb	sy
 8012dfe:	613b      	str	r3, [r7, #16]
}
 8012e00:	bf00      	nop
 8012e02:	e7fe      	b.n	8012e02 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d10a      	bne.n	8012e30 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1e:	f383 8811 	msr	BASEPRI, r3
 8012e22:	f3bf 8f6f 	isb	sy
 8012e26:	f3bf 8f4f 	dsb	sy
 8012e2a:	60fb      	str	r3, [r7, #12]
}
 8012e2c:	bf00      	nop
 8012e2e:	e7fe      	b.n	8012e2e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7fe fcc7 	bl	80117c4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	3304      	adds	r3, #4
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fcc2 	bl	80117c4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e44:	4b12      	ldr	r3, [pc, #72]	; (8012e90 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d903      	bls.n	8012e54 <vTaskRemoveFromUnorderedEventList+0x78>
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e50:	4a0f      	ldr	r2, [pc, #60]	; (8012e90 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e58:	4613      	mov	r3, r2
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4413      	add	r3, r2
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	4a0c      	ldr	r2, [pc, #48]	; (8012e94 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012e62:	441a      	add	r2, r3
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	3304      	adds	r3, #4
 8012e68:	4619      	mov	r1, r3
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	f7fe fc4d 	bl	801170a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e74:	4b08      	ldr	r3, [pc, #32]	; (8012e98 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d902      	bls.n	8012e84 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012e7e:	4b07      	ldr	r3, [pc, #28]	; (8012e9c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012e80:	2201      	movs	r2, #1
 8012e82:	601a      	str	r2, [r3, #0]
	}
}
 8012e84:	bf00      	nop
 8012e86:	3718      	adds	r7, #24
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	24001374 	.word	0x24001374
 8012e90:	24001354 	.word	0x24001354
 8012e94:	24000e7c 	.word	0x24000e7c
 8012e98:	24000e78 	.word	0x24000e78
 8012e9c:	24001360 	.word	0x24001360

08012ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ea8:	4b06      	ldr	r3, [pc, #24]	; (8012ec4 <vTaskInternalSetTimeOutState+0x24>)
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <vTaskInternalSetTimeOutState+0x28>)
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	605a      	str	r2, [r3, #4]
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr
 8012ec4:	24001364 	.word	0x24001364
 8012ec8:	24001350 	.word	0x24001350

08012ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b088      	sub	sp, #32
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d10a      	bne.n	8012ef2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee0:	f383 8811 	msr	BASEPRI, r3
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	f3bf 8f4f 	dsb	sy
 8012eec:	613b      	str	r3, [r7, #16]
}
 8012eee:	bf00      	nop
 8012ef0:	e7fe      	b.n	8012ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	60fb      	str	r3, [r7, #12]
}
 8012f0a:	bf00      	nop
 8012f0c:	e7fe      	b.n	8012f0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012f0e:	f000 feb1 	bl	8013c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f12:	4b1d      	ldr	r3, [pc, #116]	; (8012f88 <xTaskCheckForTimeOut+0xbc>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	69ba      	ldr	r2, [r7, #24]
 8012f1e:	1ad3      	subs	r3, r2, r3
 8012f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f2a:	d102      	bne.n	8012f32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	61fb      	str	r3, [r7, #28]
 8012f30:	e023      	b.n	8012f7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	4b15      	ldr	r3, [pc, #84]	; (8012f8c <xTaskCheckForTimeOut+0xc0>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d007      	beq.n	8012f4e <xTaskCheckForTimeOut+0x82>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	69ba      	ldr	r2, [r7, #24]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d302      	bcc.n	8012f4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	61fb      	str	r3, [r7, #28]
 8012f4c:	e015      	b.n	8012f7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	697a      	ldr	r2, [r7, #20]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d20b      	bcs.n	8012f70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	1ad2      	subs	r2, r2, r3
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7ff ff9b 	bl	8012ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	61fb      	str	r3, [r7, #28]
 8012f6e:	e004      	b.n	8012f7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012f76:	2301      	movs	r3, #1
 8012f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012f7a:	f000 feab 	bl	8013cd4 <vPortExitCritical>

	return xReturn;
 8012f7e:	69fb      	ldr	r3, [r7, #28]
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3720      	adds	r7, #32
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	24001350 	.word	0x24001350
 8012f8c:	24001364 	.word	0x24001364

08012f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012f90:	b480      	push	{r7}
 8012f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012f94:	4b03      	ldr	r3, [pc, #12]	; (8012fa4 <vTaskMissedYield+0x14>)
 8012f96:	2201      	movs	r2, #1
 8012f98:	601a      	str	r2, [r3, #0]
}
 8012f9a:	bf00      	nop
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr
 8012fa4:	24001360 	.word	0x24001360

08012fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012fb0:	f000 f852 	bl	8013058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012fb4:	4b06      	ldr	r3, [pc, #24]	; (8012fd0 <prvIdleTask+0x28>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d9f9      	bls.n	8012fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012fbc:	4b05      	ldr	r3, [pc, #20]	; (8012fd4 <prvIdleTask+0x2c>)
 8012fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fc2:	601a      	str	r2, [r3, #0]
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012fcc:	e7f0      	b.n	8012fb0 <prvIdleTask+0x8>
 8012fce:	bf00      	nop
 8012fd0:	24000e7c 	.word	0x24000e7c
 8012fd4:	e000ed04 	.word	0xe000ed04

08012fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012fde:	2300      	movs	r3, #0
 8012fe0:	607b      	str	r3, [r7, #4]
 8012fe2:	e00c      	b.n	8012ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	4413      	add	r3, r2
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	4a12      	ldr	r2, [pc, #72]	; (8013038 <prvInitialiseTaskLists+0x60>)
 8012ff0:	4413      	add	r3, r2
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fe fb5c 	bl	80116b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	607b      	str	r3, [r7, #4]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2b37      	cmp	r3, #55	; 0x37
 8013002:	d9ef      	bls.n	8012fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013004:	480d      	ldr	r0, [pc, #52]	; (801303c <prvInitialiseTaskLists+0x64>)
 8013006:	f7fe fb53 	bl	80116b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801300a:	480d      	ldr	r0, [pc, #52]	; (8013040 <prvInitialiseTaskLists+0x68>)
 801300c:	f7fe fb50 	bl	80116b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013010:	480c      	ldr	r0, [pc, #48]	; (8013044 <prvInitialiseTaskLists+0x6c>)
 8013012:	f7fe fb4d 	bl	80116b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013016:	480c      	ldr	r0, [pc, #48]	; (8013048 <prvInitialiseTaskLists+0x70>)
 8013018:	f7fe fb4a 	bl	80116b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801301c:	480b      	ldr	r0, [pc, #44]	; (801304c <prvInitialiseTaskLists+0x74>)
 801301e:	f7fe fb47 	bl	80116b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013022:	4b0b      	ldr	r3, [pc, #44]	; (8013050 <prvInitialiseTaskLists+0x78>)
 8013024:	4a05      	ldr	r2, [pc, #20]	; (801303c <prvInitialiseTaskLists+0x64>)
 8013026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013028:	4b0a      	ldr	r3, [pc, #40]	; (8013054 <prvInitialiseTaskLists+0x7c>)
 801302a:	4a05      	ldr	r2, [pc, #20]	; (8013040 <prvInitialiseTaskLists+0x68>)
 801302c:	601a      	str	r2, [r3, #0]
}
 801302e:	bf00      	nop
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	24000e7c 	.word	0x24000e7c
 801303c:	240012dc 	.word	0x240012dc
 8013040:	240012f0 	.word	0x240012f0
 8013044:	2400130c 	.word	0x2400130c
 8013048:	24001320 	.word	0x24001320
 801304c:	24001338 	.word	0x24001338
 8013050:	24001304 	.word	0x24001304
 8013054:	24001308 	.word	0x24001308

08013058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801305e:	e019      	b.n	8013094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013060:	f000 fe08 	bl	8013c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013064:	4b10      	ldr	r3, [pc, #64]	; (80130a8 <prvCheckTasksWaitingTermination+0x50>)
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	68db      	ldr	r3, [r3, #12]
 801306a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	3304      	adds	r3, #4
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe fba7 	bl	80117c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013076:	4b0d      	ldr	r3, [pc, #52]	; (80130ac <prvCheckTasksWaitingTermination+0x54>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	3b01      	subs	r3, #1
 801307c:	4a0b      	ldr	r2, [pc, #44]	; (80130ac <prvCheckTasksWaitingTermination+0x54>)
 801307e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013080:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <prvCheckTasksWaitingTermination+0x58>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	3b01      	subs	r3, #1
 8013086:	4a0a      	ldr	r2, [pc, #40]	; (80130b0 <prvCheckTasksWaitingTermination+0x58>)
 8013088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801308a:	f000 fe23 	bl	8013cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 f810 	bl	80130b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013094:	4b06      	ldr	r3, [pc, #24]	; (80130b0 <prvCheckTasksWaitingTermination+0x58>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d1e1      	bne.n	8013060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801309c:	bf00      	nop
 801309e:	bf00      	nop
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	24001320 	.word	0x24001320
 80130ac:	2400134c 	.word	0x2400134c
 80130b0:	24001334 	.word	0x24001334

080130b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d108      	bne.n	80130d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ca:	4618      	mov	r0, r3
 80130cc:	f000 ffc0 	bl	8014050 <vPortFree>
				vPortFree( pxTCB );
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 ffbd 	bl	8014050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80130d6:	e018      	b.n	801310a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d103      	bne.n	80130ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 ffb4 	bl	8014050 <vPortFree>
	}
 80130e8:	e00f      	b.n	801310a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d00a      	beq.n	801310a <prvDeleteTCB+0x56>
	__asm volatile
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	f383 8811 	msr	BASEPRI, r3
 80130fc:	f3bf 8f6f 	isb	sy
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	60fb      	str	r3, [r7, #12]
}
 8013106:	bf00      	nop
 8013108:	e7fe      	b.n	8013108 <prvDeleteTCB+0x54>
	}
 801310a:	bf00      	nop
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
	...

08013114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801311a:	4b0c      	ldr	r3, [pc, #48]	; (801314c <prvResetNextTaskUnblockTime+0x38>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d104      	bne.n	801312e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013124:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <prvResetNextTaskUnblockTime+0x3c>)
 8013126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801312a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801312c:	e008      	b.n	8013140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801312e:	4b07      	ldr	r3, [pc, #28]	; (801314c <prvResetNextTaskUnblockTime+0x38>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	4a04      	ldr	r2, [pc, #16]	; (8013150 <prvResetNextTaskUnblockTime+0x3c>)
 801313e:	6013      	str	r3, [r2, #0]
}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr
 801314c:	24001304 	.word	0x24001304
 8013150:	2400136c 	.word	0x2400136c

08013154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013154:	b480      	push	{r7}
 8013156:	b083      	sub	sp, #12
 8013158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801315a:	4b0b      	ldr	r3, [pc, #44]	; (8013188 <xTaskGetSchedulerState+0x34>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d102      	bne.n	8013168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013162:	2301      	movs	r3, #1
 8013164:	607b      	str	r3, [r7, #4]
 8013166:	e008      	b.n	801317a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013168:	4b08      	ldr	r3, [pc, #32]	; (801318c <xTaskGetSchedulerState+0x38>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d102      	bne.n	8013176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013170:	2302      	movs	r3, #2
 8013172:	607b      	str	r3, [r7, #4]
 8013174:	e001      	b.n	801317a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013176:	2300      	movs	r3, #0
 8013178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801317a:	687b      	ldr	r3, [r7, #4]
	}
 801317c:	4618      	mov	r0, r3
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	24001358 	.word	0x24001358
 801318c:	24001374 	.word	0x24001374

08013190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801319c:	2300      	movs	r3, #0
 801319e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d056      	beq.n	8013254 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80131a6:	4b2e      	ldr	r3, [pc, #184]	; (8013260 <xTaskPriorityDisinherit+0xd0>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	693a      	ldr	r2, [r7, #16]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d00a      	beq.n	80131c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80131b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b4:	f383 8811 	msr	BASEPRI, r3
 80131b8:	f3bf 8f6f 	isb	sy
 80131bc:	f3bf 8f4f 	dsb	sy
 80131c0:	60fb      	str	r3, [r7, #12]
}
 80131c2:	bf00      	nop
 80131c4:	e7fe      	b.n	80131c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d10a      	bne.n	80131e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80131ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d2:	f383 8811 	msr	BASEPRI, r3
 80131d6:	f3bf 8f6f 	isb	sy
 80131da:	f3bf 8f4f 	dsb	sy
 80131de:	60bb      	str	r3, [r7, #8]
}
 80131e0:	bf00      	nop
 80131e2:	e7fe      	b.n	80131e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131e8:	1e5a      	subs	r2, r3, #1
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d02c      	beq.n	8013254 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d128      	bne.n	8013254 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	3304      	adds	r3, #4
 8013206:	4618      	mov	r0, r3
 8013208:	f7fe fadc 	bl	80117c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013218:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013224:	4b0f      	ldr	r3, [pc, #60]	; (8013264 <xTaskPriorityDisinherit+0xd4>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	429a      	cmp	r2, r3
 801322a:	d903      	bls.n	8013234 <xTaskPriorityDisinherit+0xa4>
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013230:	4a0c      	ldr	r2, [pc, #48]	; (8013264 <xTaskPriorityDisinherit+0xd4>)
 8013232:	6013      	str	r3, [r2, #0]
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013238:	4613      	mov	r3, r2
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	4413      	add	r3, r2
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	4a09      	ldr	r2, [pc, #36]	; (8013268 <xTaskPriorityDisinherit+0xd8>)
 8013242:	441a      	add	r2, r3
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	3304      	adds	r3, #4
 8013248:	4619      	mov	r1, r3
 801324a:	4610      	mov	r0, r2
 801324c:	f7fe fa5d 	bl	801170a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013250:	2301      	movs	r3, #1
 8013252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013254:	697b      	ldr	r3, [r7, #20]
	}
 8013256:	4618      	mov	r0, r3
 8013258:	3718      	adds	r7, #24
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	24000e78 	.word	0x24000e78
 8013264:	24001354 	.word	0x24001354
 8013268:	24000e7c 	.word	0x24000e7c

0801326c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8013272:	4b09      	ldr	r3, [pc, #36]	; (8013298 <uxTaskResetEventItemValue+0x2c>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	699b      	ldr	r3, [r3, #24]
 8013278:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801327a:	4b07      	ldr	r3, [pc, #28]	; (8013298 <uxTaskResetEventItemValue+0x2c>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013280:	4b05      	ldr	r3, [pc, #20]	; (8013298 <uxTaskResetEventItemValue+0x2c>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013288:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801328a:	687b      	ldr	r3, [r7, #4]
}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	24000e78 	.word	0x24000e78

0801329c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80132a6:	4b21      	ldr	r3, [pc, #132]	; (801332c <prvAddCurrentTaskToDelayedList+0x90>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132ac:	4b20      	ldr	r3, [pc, #128]	; (8013330 <prvAddCurrentTaskToDelayedList+0x94>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3304      	adds	r3, #4
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fe fa86 	bl	80117c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132be:	d10a      	bne.n	80132d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d007      	beq.n	80132d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132c6:	4b1a      	ldr	r3, [pc, #104]	; (8013330 <prvAddCurrentTaskToDelayedList+0x94>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	3304      	adds	r3, #4
 80132cc:	4619      	mov	r1, r3
 80132ce:	4819      	ldr	r0, [pc, #100]	; (8013334 <prvAddCurrentTaskToDelayedList+0x98>)
 80132d0:	f7fe fa1b 	bl	801170a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80132d4:	e026      	b.n	8013324 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80132d6:	68fa      	ldr	r2, [r7, #12]
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	4413      	add	r3, r2
 80132dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80132de:	4b14      	ldr	r3, [pc, #80]	; (8013330 <prvAddCurrentTaskToDelayedList+0x94>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	68ba      	ldr	r2, [r7, #8]
 80132e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d209      	bcs.n	8013302 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132ee:	4b12      	ldr	r3, [pc, #72]	; (8013338 <prvAddCurrentTaskToDelayedList+0x9c>)
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	4b0f      	ldr	r3, [pc, #60]	; (8013330 <prvAddCurrentTaskToDelayedList+0x94>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	3304      	adds	r3, #4
 80132f8:	4619      	mov	r1, r3
 80132fa:	4610      	mov	r0, r2
 80132fc:	f7fe fa29 	bl	8011752 <vListInsert>
}
 8013300:	e010      	b.n	8013324 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013302:	4b0e      	ldr	r3, [pc, #56]	; (801333c <prvAddCurrentTaskToDelayedList+0xa0>)
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	4b0a      	ldr	r3, [pc, #40]	; (8013330 <prvAddCurrentTaskToDelayedList+0x94>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3304      	adds	r3, #4
 801330c:	4619      	mov	r1, r3
 801330e:	4610      	mov	r0, r2
 8013310:	f7fe fa1f 	bl	8011752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013314:	4b0a      	ldr	r3, [pc, #40]	; (8013340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	429a      	cmp	r2, r3
 801331c:	d202      	bcs.n	8013324 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801331e:	4a08      	ldr	r2, [pc, #32]	; (8013340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	6013      	str	r3, [r2, #0]
}
 8013324:	bf00      	nop
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	24001350 	.word	0x24001350
 8013330:	24000e78 	.word	0x24000e78
 8013334:	24001338 	.word	0x24001338
 8013338:	24001308 	.word	0x24001308
 801333c:	24001304 	.word	0x24001304
 8013340:	2400136c 	.word	0x2400136c

08013344 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b08a      	sub	sp, #40	; 0x28
 8013348:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801334a:	2300      	movs	r3, #0
 801334c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801334e:	f000 fb07 	bl	8013960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013352:	4b1c      	ldr	r3, [pc, #112]	; (80133c4 <xTimerCreateTimerTask+0x80>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d021      	beq.n	801339e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801335a:	2300      	movs	r3, #0
 801335c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801335e:	2300      	movs	r3, #0
 8013360:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013362:	1d3a      	adds	r2, r7, #4
 8013364:	f107 0108 	add.w	r1, r7, #8
 8013368:	f107 030c 	add.w	r3, r7, #12
 801336c:	4618      	mov	r0, r3
 801336e:	f7fd ff97 	bl	80112a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013372:	6879      	ldr	r1, [r7, #4]
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	68fa      	ldr	r2, [r7, #12]
 8013378:	9202      	str	r2, [sp, #8]
 801337a:	9301      	str	r3, [sp, #4]
 801337c:	2302      	movs	r3, #2
 801337e:	9300      	str	r3, [sp, #0]
 8013380:	2300      	movs	r3, #0
 8013382:	460a      	mov	r2, r1
 8013384:	4910      	ldr	r1, [pc, #64]	; (80133c8 <xTimerCreateTimerTask+0x84>)
 8013386:	4811      	ldr	r0, [pc, #68]	; (80133cc <xTimerCreateTimerTask+0x88>)
 8013388:	f7ff f828 	bl	80123dc <xTaskCreateStatic>
 801338c:	4603      	mov	r3, r0
 801338e:	4a10      	ldr	r2, [pc, #64]	; (80133d0 <xTimerCreateTimerTask+0x8c>)
 8013390:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013392:	4b0f      	ldr	r3, [pc, #60]	; (80133d0 <xTimerCreateTimerTask+0x8c>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d001      	beq.n	801339e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801339a:	2301      	movs	r3, #1
 801339c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	613b      	str	r3, [r7, #16]
}
 80133b6:	bf00      	nop
 80133b8:	e7fe      	b.n	80133b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80133ba:	697b      	ldr	r3, [r7, #20]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3718      	adds	r7, #24
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	240013a8 	.word	0x240013a8
 80133c8:	08015560 	.word	0x08015560
 80133cc:	08013509 	.word	0x08013509
 80133d0:	240013ac 	.word	0x240013ac

080133d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08a      	sub	sp, #40	; 0x28
 80133d8:	af00      	add	r7, sp, #0
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80133e2:	2300      	movs	r3, #0
 80133e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d10a      	bne.n	8013402 <xTimerGenericCommand+0x2e>
	__asm volatile
 80133ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f0:	f383 8811 	msr	BASEPRI, r3
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	f3bf 8f4f 	dsb	sy
 80133fc:	623b      	str	r3, [r7, #32]
}
 80133fe:	bf00      	nop
 8013400:	e7fe      	b.n	8013400 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013402:	4b1a      	ldr	r3, [pc, #104]	; (801346c <xTimerGenericCommand+0x98>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d02a      	beq.n	8013460 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	2b05      	cmp	r3, #5
 801341a:	dc18      	bgt.n	801344e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801341c:	f7ff fe9a 	bl	8013154 <xTaskGetSchedulerState>
 8013420:	4603      	mov	r3, r0
 8013422:	2b02      	cmp	r3, #2
 8013424:	d109      	bne.n	801343a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013426:	4b11      	ldr	r3, [pc, #68]	; (801346c <xTimerGenericCommand+0x98>)
 8013428:	6818      	ldr	r0, [r3, #0]
 801342a:	f107 0110 	add.w	r1, r7, #16
 801342e:	2300      	movs	r3, #0
 8013430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013432:	f7fe fb2f 	bl	8011a94 <xQueueGenericSend>
 8013436:	6278      	str	r0, [r7, #36]	; 0x24
 8013438:	e012      	b.n	8013460 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801343a:	4b0c      	ldr	r3, [pc, #48]	; (801346c <xTimerGenericCommand+0x98>)
 801343c:	6818      	ldr	r0, [r3, #0]
 801343e:	f107 0110 	add.w	r1, r7, #16
 8013442:	2300      	movs	r3, #0
 8013444:	2200      	movs	r2, #0
 8013446:	f7fe fb25 	bl	8011a94 <xQueueGenericSend>
 801344a:	6278      	str	r0, [r7, #36]	; 0x24
 801344c:	e008      	b.n	8013460 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801344e:	4b07      	ldr	r3, [pc, #28]	; (801346c <xTimerGenericCommand+0x98>)
 8013450:	6818      	ldr	r0, [r3, #0]
 8013452:	f107 0110 	add.w	r1, r7, #16
 8013456:	2300      	movs	r3, #0
 8013458:	683a      	ldr	r2, [r7, #0]
 801345a:	f7fe fc19 	bl	8011c90 <xQueueGenericSendFromISR>
 801345e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013462:	4618      	mov	r0, r3
 8013464:	3728      	adds	r7, #40	; 0x28
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	240013a8 	.word	0x240013a8

08013470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b088      	sub	sp, #32
 8013474:	af02      	add	r7, sp, #8
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801347a:	4b22      	ldr	r3, [pc, #136]	; (8013504 <prvProcessExpiredTimer+0x94>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	3304      	adds	r3, #4
 8013488:	4618      	mov	r0, r3
 801348a:	f7fe f99b 	bl	80117c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013494:	f003 0304 	and.w	r3, r3, #4
 8013498:	2b00      	cmp	r3, #0
 801349a:	d022      	beq.n	80134e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	699a      	ldr	r2, [r3, #24]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	18d1      	adds	r1, r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	683a      	ldr	r2, [r7, #0]
 80134a8:	6978      	ldr	r0, [r7, #20]
 80134aa:	f000 f8d1 	bl	8013650 <prvInsertTimerInActiveList>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d01f      	beq.n	80134f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80134b4:	2300      	movs	r3, #0
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	2300      	movs	r3, #0
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	2100      	movs	r1, #0
 80134be:	6978      	ldr	r0, [r7, #20]
 80134c0:	f7ff ff88 	bl	80133d4 <xTimerGenericCommand>
 80134c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d113      	bne.n	80134f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80134cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d0:	f383 8811 	msr	BASEPRI, r3
 80134d4:	f3bf 8f6f 	isb	sy
 80134d8:	f3bf 8f4f 	dsb	sy
 80134dc:	60fb      	str	r3, [r7, #12]
}
 80134de:	bf00      	nop
 80134e0:	e7fe      	b.n	80134e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e8:	f023 0301 	bic.w	r3, r3, #1
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	6a1b      	ldr	r3, [r3, #32]
 80134f8:	6978      	ldr	r0, [r7, #20]
 80134fa:	4798      	blx	r3
}
 80134fc:	bf00      	nop
 80134fe:	3718      	adds	r7, #24
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	240013a0 	.word	0x240013a0

08013508 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013510:	f107 0308 	add.w	r3, r7, #8
 8013514:	4618      	mov	r0, r3
 8013516:	f000 f857 	bl	80135c8 <prvGetNextExpireTime>
 801351a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	4619      	mov	r1, r3
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f000 f803 	bl	801352c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013526:	f000 f8d5 	bl	80136d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801352a:	e7f1      	b.n	8013510 <prvTimerTask+0x8>

0801352c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013536:	f7ff f98d 	bl	8012854 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801353a:	f107 0308 	add.w	r3, r7, #8
 801353e:	4618      	mov	r0, r3
 8013540:	f000 f866 	bl	8013610 <prvSampleTimeNow>
 8013544:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d130      	bne.n	80135ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10a      	bne.n	8013568 <prvProcessTimerOrBlockTask+0x3c>
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	429a      	cmp	r2, r3
 8013558:	d806      	bhi.n	8013568 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801355a:	f7ff f989 	bl	8012870 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801355e:	68f9      	ldr	r1, [r7, #12]
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f7ff ff85 	bl	8013470 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013566:	e024      	b.n	80135b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d008      	beq.n	8013580 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801356e:	4b13      	ldr	r3, [pc, #76]	; (80135bc <prvProcessTimerOrBlockTask+0x90>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <prvProcessTimerOrBlockTask+0x50>
 8013578:	2301      	movs	r3, #1
 801357a:	e000      	b.n	801357e <prvProcessTimerOrBlockTask+0x52>
 801357c:	2300      	movs	r3, #0
 801357e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013580:	4b0f      	ldr	r3, [pc, #60]	; (80135c0 <prvProcessTimerOrBlockTask+0x94>)
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	683a      	ldr	r2, [r7, #0]
 801358c:	4619      	mov	r1, r3
 801358e:	f7fe fef1 	bl	8012374 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013592:	f7ff f96d 	bl	8012870 <xTaskResumeAll>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10a      	bne.n	80135b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801359c:	4b09      	ldr	r3, [pc, #36]	; (80135c4 <prvProcessTimerOrBlockTask+0x98>)
 801359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	f3bf 8f4f 	dsb	sy
 80135a8:	f3bf 8f6f 	isb	sy
}
 80135ac:	e001      	b.n	80135b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80135ae:	f7ff f95f 	bl	8012870 <xTaskResumeAll>
}
 80135b2:	bf00      	nop
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	240013a4 	.word	0x240013a4
 80135c0:	240013a8 	.word	0x240013a8
 80135c4:	e000ed04 	.word	0xe000ed04

080135c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80135d0:	4b0e      	ldr	r3, [pc, #56]	; (801360c <prvGetNextExpireTime+0x44>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d101      	bne.n	80135de <prvGetNextExpireTime+0x16>
 80135da:	2201      	movs	r2, #1
 80135dc:	e000      	b.n	80135e0 <prvGetNextExpireTime+0x18>
 80135de:	2200      	movs	r2, #0
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d105      	bne.n	80135f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135ec:	4b07      	ldr	r3, [pc, #28]	; (801360c <prvGetNextExpireTime+0x44>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	60fb      	str	r3, [r7, #12]
 80135f6:	e001      	b.n	80135fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80135f8:	2300      	movs	r3, #0
 80135fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80135fc:	68fb      	ldr	r3, [r7, #12]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3714      	adds	r7, #20
 8013602:	46bd      	mov	sp, r7
 8013604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013608:	4770      	bx	lr
 801360a:	bf00      	nop
 801360c:	240013a0 	.word	0x240013a0

08013610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013618:	f7ff f9c8 	bl	80129ac <xTaskGetTickCount>
 801361c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801361e:	4b0b      	ldr	r3, [pc, #44]	; (801364c <prvSampleTimeNow+0x3c>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	429a      	cmp	r2, r3
 8013626:	d205      	bcs.n	8013634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013628:	f000 f936 	bl	8013898 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2201      	movs	r2, #1
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	e002      	b.n	801363a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801363a:	4a04      	ldr	r2, [pc, #16]	; (801364c <prvSampleTimeNow+0x3c>)
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013640:	68fb      	ldr	r3, [r7, #12]
}
 8013642:	4618      	mov	r0, r3
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	240013b0 	.word	0x240013b0

08013650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b086      	sub	sp, #24
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
 801365c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801365e:	2300      	movs	r3, #0
 8013660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801366e:	68ba      	ldr	r2, [r7, #8]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	429a      	cmp	r2, r3
 8013674:	d812      	bhi.n	801369c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	1ad2      	subs	r2, r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	699b      	ldr	r3, [r3, #24]
 8013680:	429a      	cmp	r2, r3
 8013682:	d302      	bcc.n	801368a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013684:	2301      	movs	r3, #1
 8013686:	617b      	str	r3, [r7, #20]
 8013688:	e01b      	b.n	80136c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801368a:	4b10      	ldr	r3, [pc, #64]	; (80136cc <prvInsertTimerInActiveList+0x7c>)
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	3304      	adds	r3, #4
 8013692:	4619      	mov	r1, r3
 8013694:	4610      	mov	r0, r2
 8013696:	f7fe f85c 	bl	8011752 <vListInsert>
 801369a:	e012      	b.n	80136c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d206      	bcs.n	80136b2 <prvInsertTimerInActiveList+0x62>
 80136a4:	68ba      	ldr	r2, [r7, #8]
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d302      	bcc.n	80136b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80136ac:	2301      	movs	r3, #1
 80136ae:	617b      	str	r3, [r7, #20]
 80136b0:	e007      	b.n	80136c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80136b2:	4b07      	ldr	r3, [pc, #28]	; (80136d0 <prvInsertTimerInActiveList+0x80>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	3304      	adds	r3, #4
 80136ba:	4619      	mov	r1, r3
 80136bc:	4610      	mov	r0, r2
 80136be:	f7fe f848 	bl	8011752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80136c2:	697b      	ldr	r3, [r7, #20]
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3718      	adds	r7, #24
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	240013a4 	.word	0x240013a4
 80136d0:	240013a0 	.word	0x240013a0

080136d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b08e      	sub	sp, #56	; 0x38
 80136d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136da:	e0ca      	b.n	8013872 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	da18      	bge.n	8013714 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80136e2:	1d3b      	adds	r3, r7, #4
 80136e4:	3304      	adds	r3, #4
 80136e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80136e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10a      	bne.n	8013704 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80136ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	61fb      	str	r3, [r7, #28]
}
 8013700:	bf00      	nop
 8013702:	e7fe      	b.n	8013702 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801370a:	6850      	ldr	r0, [r2, #4]
 801370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801370e:	6892      	ldr	r2, [r2, #8]
 8013710:	4611      	mov	r1, r2
 8013712:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	f2c0 80aa 	blt.w	8013870 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013722:	695b      	ldr	r3, [r3, #20]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d004      	beq.n	8013732 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372a:	3304      	adds	r3, #4
 801372c:	4618      	mov	r0, r3
 801372e:	f7fe f849 	bl	80117c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013732:	463b      	mov	r3, r7
 8013734:	4618      	mov	r0, r3
 8013736:	f7ff ff6b 	bl	8013610 <prvSampleTimeNow>
 801373a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b09      	cmp	r3, #9
 8013740:	f200 8097 	bhi.w	8013872 <prvProcessReceivedCommands+0x19e>
 8013744:	a201      	add	r2, pc, #4	; (adr r2, 801374c <prvProcessReceivedCommands+0x78>)
 8013746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801374a:	bf00      	nop
 801374c:	08013775 	.word	0x08013775
 8013750:	08013775 	.word	0x08013775
 8013754:	08013775 	.word	0x08013775
 8013758:	080137e9 	.word	0x080137e9
 801375c:	080137fd 	.word	0x080137fd
 8013760:	08013847 	.word	0x08013847
 8013764:	08013775 	.word	0x08013775
 8013768:	08013775 	.word	0x08013775
 801376c:	080137e9 	.word	0x080137e9
 8013770:	080137fd 	.word	0x080137fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801377a:	f043 0301 	orr.w	r3, r3, #1
 801377e:	b2da      	uxtb	r2, r3
 8013780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013786:	68ba      	ldr	r2, [r7, #8]
 8013788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	18d1      	adds	r1, r2, r3
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013794:	f7ff ff5c 	bl	8013650 <prvInsertTimerInActiveList>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	d069      	beq.n	8013872 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a0:	6a1b      	ldr	r3, [r3, #32]
 80137a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80137a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137ac:	f003 0304 	and.w	r3, r3, #4
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d05e      	beq.n	8013872 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80137b4:	68ba      	ldr	r2, [r7, #8]
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	699b      	ldr	r3, [r3, #24]
 80137ba:	441a      	add	r2, r3
 80137bc:	2300      	movs	r3, #0
 80137be:	9300      	str	r3, [sp, #0]
 80137c0:	2300      	movs	r3, #0
 80137c2:	2100      	movs	r1, #0
 80137c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137c6:	f7ff fe05 	bl	80133d4 <xTimerGenericCommand>
 80137ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80137cc:	6a3b      	ldr	r3, [r7, #32]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d14f      	bne.n	8013872 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80137d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d6:	f383 8811 	msr	BASEPRI, r3
 80137da:	f3bf 8f6f 	isb	sy
 80137de:	f3bf 8f4f 	dsb	sy
 80137e2:	61bb      	str	r3, [r7, #24]
}
 80137e4:	bf00      	nop
 80137e6:	e7fe      	b.n	80137e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137ee:	f023 0301 	bic.w	r3, r3, #1
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80137fa:	e03a      	b.n	8013872 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80137fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013802:	f043 0301 	orr.w	r3, r3, #1
 8013806:	b2da      	uxtb	r2, r3
 8013808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801380a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013812:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10a      	bne.n	8013832 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	617b      	str	r3, [r7, #20]
}
 801382e:	bf00      	nop
 8013830:	e7fe      	b.n	8013830 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	699a      	ldr	r2, [r3, #24]
 8013836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013838:	18d1      	adds	r1, r2, r3
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801383e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013840:	f7ff ff06 	bl	8013650 <prvInsertTimerInActiveList>
					break;
 8013844:	e015      	b.n	8013872 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801384c:	f003 0302 	and.w	r3, r3, #2
 8013850:	2b00      	cmp	r3, #0
 8013852:	d103      	bne.n	801385c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013856:	f000 fbfb 	bl	8014050 <vPortFree>
 801385a:	e00a      	b.n	8013872 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013862:	f023 0301 	bic.w	r3, r3, #1
 8013866:	b2da      	uxtb	r2, r3
 8013868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801386e:	e000      	b.n	8013872 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013870:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013872:	4b08      	ldr	r3, [pc, #32]	; (8013894 <prvProcessReceivedCommands+0x1c0>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	1d39      	adds	r1, r7, #4
 8013878:	2200      	movs	r2, #0
 801387a:	4618      	mov	r0, r3
 801387c:	f7fe faa4 	bl	8011dc8 <xQueueReceive>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	f47f af2a 	bne.w	80136dc <prvProcessReceivedCommands+0x8>
	}
}
 8013888:	bf00      	nop
 801388a:	bf00      	nop
 801388c:	3730      	adds	r7, #48	; 0x30
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	240013a8 	.word	0x240013a8

08013898 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b088      	sub	sp, #32
 801389c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801389e:	e048      	b.n	8013932 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80138a0:	4b2d      	ldr	r3, [pc, #180]	; (8013958 <prvSwitchTimerLists+0xc0>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	68db      	ldr	r3, [r3, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138aa:	4b2b      	ldr	r3, [pc, #172]	; (8013958 <prvSwitchTimerLists+0xc0>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	3304      	adds	r3, #4
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fd ff83 	bl	80117c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	6a1b      	ldr	r3, [r3, #32]
 80138c2:	68f8      	ldr	r0, [r7, #12]
 80138c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138cc:	f003 0304 	and.w	r3, r3, #4
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d02e      	beq.n	8013932 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	693a      	ldr	r2, [r7, #16]
 80138da:	4413      	add	r3, r2
 80138dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d90e      	bls.n	8013904 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	68ba      	ldr	r2, [r7, #8]
 80138ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138f2:	4b19      	ldr	r3, [pc, #100]	; (8013958 <prvSwitchTimerLists+0xc0>)
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	3304      	adds	r3, #4
 80138fa:	4619      	mov	r1, r3
 80138fc:	4610      	mov	r0, r2
 80138fe:	f7fd ff28 	bl	8011752 <vListInsert>
 8013902:	e016      	b.n	8013932 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013904:	2300      	movs	r3, #0
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	2300      	movs	r3, #0
 801390a:	693a      	ldr	r2, [r7, #16]
 801390c:	2100      	movs	r1, #0
 801390e:	68f8      	ldr	r0, [r7, #12]
 8013910:	f7ff fd60 	bl	80133d4 <xTimerGenericCommand>
 8013914:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d10a      	bne.n	8013932 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	603b      	str	r3, [r7, #0]
}
 801392e:	bf00      	nop
 8013930:	e7fe      	b.n	8013930 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013932:	4b09      	ldr	r3, [pc, #36]	; (8013958 <prvSwitchTimerLists+0xc0>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d1b1      	bne.n	80138a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801393c:	4b06      	ldr	r3, [pc, #24]	; (8013958 <prvSwitchTimerLists+0xc0>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013942:	4b06      	ldr	r3, [pc, #24]	; (801395c <prvSwitchTimerLists+0xc4>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4a04      	ldr	r2, [pc, #16]	; (8013958 <prvSwitchTimerLists+0xc0>)
 8013948:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801394a:	4a04      	ldr	r2, [pc, #16]	; (801395c <prvSwitchTimerLists+0xc4>)
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	6013      	str	r3, [r2, #0]
}
 8013950:	bf00      	nop
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	240013a0 	.word	0x240013a0
 801395c:	240013a4 	.word	0x240013a4

08013960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013966:	f000 f985 	bl	8013c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801396a:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <prvCheckForValidListAndQueue+0x60>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d120      	bne.n	80139b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013972:	4814      	ldr	r0, [pc, #80]	; (80139c4 <prvCheckForValidListAndQueue+0x64>)
 8013974:	f7fd fe9c 	bl	80116b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013978:	4813      	ldr	r0, [pc, #76]	; (80139c8 <prvCheckForValidListAndQueue+0x68>)
 801397a:	f7fd fe99 	bl	80116b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801397e:	4b13      	ldr	r3, [pc, #76]	; (80139cc <prvCheckForValidListAndQueue+0x6c>)
 8013980:	4a10      	ldr	r2, [pc, #64]	; (80139c4 <prvCheckForValidListAndQueue+0x64>)
 8013982:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013984:	4b12      	ldr	r3, [pc, #72]	; (80139d0 <prvCheckForValidListAndQueue+0x70>)
 8013986:	4a10      	ldr	r2, [pc, #64]	; (80139c8 <prvCheckForValidListAndQueue+0x68>)
 8013988:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801398a:	2300      	movs	r3, #0
 801398c:	9300      	str	r3, [sp, #0]
 801398e:	4b11      	ldr	r3, [pc, #68]	; (80139d4 <prvCheckForValidListAndQueue+0x74>)
 8013990:	4a11      	ldr	r2, [pc, #68]	; (80139d8 <prvCheckForValidListAndQueue+0x78>)
 8013992:	2110      	movs	r1, #16
 8013994:	200a      	movs	r0, #10
 8013996:	f7fd ffa7 	bl	80118e8 <xQueueGenericCreateStatic>
 801399a:	4603      	mov	r3, r0
 801399c:	4a08      	ldr	r2, [pc, #32]	; (80139c0 <prvCheckForValidListAndQueue+0x60>)
 801399e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80139a0:	4b07      	ldr	r3, [pc, #28]	; (80139c0 <prvCheckForValidListAndQueue+0x60>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d005      	beq.n	80139b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80139a8:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <prvCheckForValidListAndQueue+0x60>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	490b      	ldr	r1, [pc, #44]	; (80139dc <prvCheckForValidListAndQueue+0x7c>)
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fe fcb6 	bl	8012320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80139b4:	f000 f98e 	bl	8013cd4 <vPortExitCritical>
}
 80139b8:	bf00      	nop
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	240013a8 	.word	0x240013a8
 80139c4:	24001378 	.word	0x24001378
 80139c8:	2400138c 	.word	0x2400138c
 80139cc:	240013a0 	.word	0x240013a0
 80139d0:	240013a4 	.word	0x240013a4
 80139d4:	24001454 	.word	0x24001454
 80139d8:	240013b4 	.word	0x240013b4
 80139dc:	08015568 	.word	0x08015568

080139e0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b08a      	sub	sp, #40	; 0x28
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	607a      	str	r2, [r7, #4]
 80139ec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80139ee:	f06f 0301 	mvn.w	r3, #1
 80139f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013a00:	4b06      	ldr	r3, [pc, #24]	; (8013a1c <xTimerPendFunctionCallFromISR+0x3c>)
 8013a02:	6818      	ldr	r0, [r3, #0]
 8013a04:	f107 0114 	add.w	r1, r7, #20
 8013a08:	2300      	movs	r3, #0
 8013a0a:	683a      	ldr	r2, [r7, #0]
 8013a0c:	f7fe f940 	bl	8011c90 <xQueueGenericSendFromISR>
 8013a10:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3728      	adds	r7, #40	; 0x28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	240013a8 	.word	0x240013a8

08013a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013a20:	b480      	push	{r7}
 8013a22:	b085      	sub	sp, #20
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3b04      	subs	r3, #4
 8013a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	3b04      	subs	r3, #4
 8013a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	f023 0201 	bic.w	r2, r3, #1
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	3b04      	subs	r3, #4
 8013a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013a50:	4a0c      	ldr	r2, [pc, #48]	; (8013a84 <pxPortInitialiseStack+0x64>)
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	3b14      	subs	r3, #20
 8013a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	3b04      	subs	r3, #4
 8013a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f06f 0202 	mvn.w	r2, #2
 8013a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	3b20      	subs	r3, #32
 8013a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013a76:	68fb      	ldr	r3, [r7, #12]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3714      	adds	r7, #20
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr
 8013a84:	08013a89 	.word	0x08013a89

08013a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013a92:	4b12      	ldr	r3, [pc, #72]	; (8013adc <prvTaskExitError+0x54>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a9a:	d00a      	beq.n	8013ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8013a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa0:	f383 8811 	msr	BASEPRI, r3
 8013aa4:	f3bf 8f6f 	isb	sy
 8013aa8:	f3bf 8f4f 	dsb	sy
 8013aac:	60fb      	str	r3, [r7, #12]
}
 8013aae:	bf00      	nop
 8013ab0:	e7fe      	b.n	8013ab0 <prvTaskExitError+0x28>
	__asm volatile
 8013ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab6:	f383 8811 	msr	BASEPRI, r3
 8013aba:	f3bf 8f6f 	isb	sy
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	60bb      	str	r3, [r7, #8]
}
 8013ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ac6:	bf00      	nop
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d0fc      	beq.n	8013ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013ace:	bf00      	nop
 8013ad0:	bf00      	nop
 8013ad2:	3714      	adds	r7, #20
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr
 8013adc:	24000098 	.word	0x24000098

08013ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013ae0:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <pxCurrentTCBConst2>)
 8013ae2:	6819      	ldr	r1, [r3, #0]
 8013ae4:	6808      	ldr	r0, [r1, #0]
 8013ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aea:	f380 8809 	msr	PSP, r0
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f04f 0000 	mov.w	r0, #0
 8013af6:	f380 8811 	msr	BASEPRI, r0
 8013afa:	4770      	bx	lr
 8013afc:	f3af 8000 	nop.w

08013b00 <pxCurrentTCBConst2>:
 8013b00:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013b04:	bf00      	nop
 8013b06:	bf00      	nop

08013b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013b08:	4808      	ldr	r0, [pc, #32]	; (8013b2c <prvPortStartFirstTask+0x24>)
 8013b0a:	6800      	ldr	r0, [r0, #0]
 8013b0c:	6800      	ldr	r0, [r0, #0]
 8013b0e:	f380 8808 	msr	MSP, r0
 8013b12:	f04f 0000 	mov.w	r0, #0
 8013b16:	f380 8814 	msr	CONTROL, r0
 8013b1a:	b662      	cpsie	i
 8013b1c:	b661      	cpsie	f
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	f3bf 8f6f 	isb	sy
 8013b26:	df00      	svc	0
 8013b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013b2a:	bf00      	nop
 8013b2c:	e000ed08 	.word	0xe000ed08

08013b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b086      	sub	sp, #24
 8013b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013b36:	4b46      	ldr	r3, [pc, #280]	; (8013c50 <xPortStartScheduler+0x120>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	4a46      	ldr	r2, [pc, #280]	; (8013c54 <xPortStartScheduler+0x124>)
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	d10a      	bne.n	8013b56 <xPortStartScheduler+0x26>
	__asm volatile
 8013b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b44:	f383 8811 	msr	BASEPRI, r3
 8013b48:	f3bf 8f6f 	isb	sy
 8013b4c:	f3bf 8f4f 	dsb	sy
 8013b50:	613b      	str	r3, [r7, #16]
}
 8013b52:	bf00      	nop
 8013b54:	e7fe      	b.n	8013b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013b56:	4b3e      	ldr	r3, [pc, #248]	; (8013c50 <xPortStartScheduler+0x120>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	4a3f      	ldr	r2, [pc, #252]	; (8013c58 <xPortStartScheduler+0x128>)
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d10a      	bne.n	8013b76 <xPortStartScheduler+0x46>
	__asm volatile
 8013b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b64:	f383 8811 	msr	BASEPRI, r3
 8013b68:	f3bf 8f6f 	isb	sy
 8013b6c:	f3bf 8f4f 	dsb	sy
 8013b70:	60fb      	str	r3, [r7, #12]
}
 8013b72:	bf00      	nop
 8013b74:	e7fe      	b.n	8013b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013b76:	4b39      	ldr	r3, [pc, #228]	; (8013c5c <xPortStartScheduler+0x12c>)
 8013b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	22ff      	movs	r2, #255	; 0xff
 8013b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013b90:	78fb      	ldrb	r3, [r7, #3]
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013b98:	b2da      	uxtb	r2, r3
 8013b9a:	4b31      	ldr	r3, [pc, #196]	; (8013c60 <xPortStartScheduler+0x130>)
 8013b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013b9e:	4b31      	ldr	r3, [pc, #196]	; (8013c64 <xPortStartScheduler+0x134>)
 8013ba0:	2207      	movs	r2, #7
 8013ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013ba4:	e009      	b.n	8013bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013ba6:	4b2f      	ldr	r3, [pc, #188]	; (8013c64 <xPortStartScheduler+0x134>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	3b01      	subs	r3, #1
 8013bac:	4a2d      	ldr	r2, [pc, #180]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013bb0:	78fb      	ldrb	r3, [r7, #3]
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013bba:	78fb      	ldrb	r3, [r7, #3]
 8013bbc:	b2db      	uxtb	r3, r3
 8013bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bc2:	2b80      	cmp	r3, #128	; 0x80
 8013bc4:	d0ef      	beq.n	8013ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013bc6:	4b27      	ldr	r3, [pc, #156]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f1c3 0307 	rsb	r3, r3, #7
 8013bce:	2b04      	cmp	r3, #4
 8013bd0:	d00a      	beq.n	8013be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8013bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd6:	f383 8811 	msr	BASEPRI, r3
 8013bda:	f3bf 8f6f 	isb	sy
 8013bde:	f3bf 8f4f 	dsb	sy
 8013be2:	60bb      	str	r3, [r7, #8]
}
 8013be4:	bf00      	nop
 8013be6:	e7fe      	b.n	8013be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013be8:	4b1e      	ldr	r3, [pc, #120]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	021b      	lsls	r3, r3, #8
 8013bee:	4a1d      	ldr	r2, [pc, #116]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013bf2:	4b1c      	ldr	r3, [pc, #112]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013bfa:	4a1a      	ldr	r2, [pc, #104]	; (8013c64 <xPortStartScheduler+0x134>)
 8013bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	b2da      	uxtb	r2, r3
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013c06:	4b18      	ldr	r3, [pc, #96]	; (8013c68 <xPortStartScheduler+0x138>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a17      	ldr	r2, [pc, #92]	; (8013c68 <xPortStartScheduler+0x138>)
 8013c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013c12:	4b15      	ldr	r3, [pc, #84]	; (8013c68 <xPortStartScheduler+0x138>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4a14      	ldr	r2, [pc, #80]	; (8013c68 <xPortStartScheduler+0x138>)
 8013c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013c1e:	f000 f8dd 	bl	8013ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013c22:	4b12      	ldr	r3, [pc, #72]	; (8013c6c <xPortStartScheduler+0x13c>)
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013c28:	f000 f8fc 	bl	8013e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013c2c:	4b10      	ldr	r3, [pc, #64]	; (8013c70 <xPortStartScheduler+0x140>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	4a0f      	ldr	r2, [pc, #60]	; (8013c70 <xPortStartScheduler+0x140>)
 8013c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013c38:	f7ff ff66 	bl	8013b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013c3c:	f7fe ff80 	bl	8012b40 <vTaskSwitchContext>
	prvTaskExitError();
 8013c40:	f7ff ff22 	bl	8013a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3718      	adds	r7, #24
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	e000ed00 	.word	0xe000ed00
 8013c54:	410fc271 	.word	0x410fc271
 8013c58:	410fc270 	.word	0x410fc270
 8013c5c:	e000e400 	.word	0xe000e400
 8013c60:	240014a4 	.word	0x240014a4
 8013c64:	240014a8 	.word	0x240014a8
 8013c68:	e000ed20 	.word	0xe000ed20
 8013c6c:	24000098 	.word	0x24000098
 8013c70:	e000ef34 	.word	0xe000ef34

08013c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
	__asm volatile
 8013c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	607b      	str	r3, [r7, #4]
}
 8013c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013c8e:	4b0f      	ldr	r3, [pc, #60]	; (8013ccc <vPortEnterCritical+0x58>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	3301      	adds	r3, #1
 8013c94:	4a0d      	ldr	r2, [pc, #52]	; (8013ccc <vPortEnterCritical+0x58>)
 8013c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013c98:	4b0c      	ldr	r3, [pc, #48]	; (8013ccc <vPortEnterCritical+0x58>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	d10f      	bne.n	8013cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013ca0:	4b0b      	ldr	r3, [pc, #44]	; (8013cd0 <vPortEnterCritical+0x5c>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d00a      	beq.n	8013cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8013caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cae:	f383 8811 	msr	BASEPRI, r3
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	f3bf 8f4f 	dsb	sy
 8013cba:	603b      	str	r3, [r7, #0]
}
 8013cbc:	bf00      	nop
 8013cbe:	e7fe      	b.n	8013cbe <vPortEnterCritical+0x4a>
	}
}
 8013cc0:	bf00      	nop
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	24000098 	.word	0x24000098
 8013cd0:	e000ed04 	.word	0xe000ed04

08013cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b083      	sub	sp, #12
 8013cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013cda:	4b12      	ldr	r3, [pc, #72]	; (8013d24 <vPortExitCritical+0x50>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10a      	bne.n	8013cf8 <vPortExitCritical+0x24>
	__asm volatile
 8013ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce6:	f383 8811 	msr	BASEPRI, r3
 8013cea:	f3bf 8f6f 	isb	sy
 8013cee:	f3bf 8f4f 	dsb	sy
 8013cf2:	607b      	str	r3, [r7, #4]
}
 8013cf4:	bf00      	nop
 8013cf6:	e7fe      	b.n	8013cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013cf8:	4b0a      	ldr	r3, [pc, #40]	; (8013d24 <vPortExitCritical+0x50>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	4a09      	ldr	r2, [pc, #36]	; (8013d24 <vPortExitCritical+0x50>)
 8013d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013d02:	4b08      	ldr	r3, [pc, #32]	; (8013d24 <vPortExitCritical+0x50>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d105      	bne.n	8013d16 <vPortExitCritical+0x42>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	f383 8811 	msr	BASEPRI, r3
}
 8013d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013d16:	bf00      	nop
 8013d18:	370c      	adds	r7, #12
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	24000098 	.word	0x24000098
	...

08013d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013d30:	f3ef 8009 	mrs	r0, PSP
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	4b15      	ldr	r3, [pc, #84]	; (8013d90 <pxCurrentTCBConst>)
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	f01e 0f10 	tst.w	lr, #16
 8013d40:	bf08      	it	eq
 8013d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4a:	6010      	str	r0, [r2, #0]
 8013d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013d54:	f380 8811 	msr	BASEPRI, r0
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f7fe feee 	bl	8012b40 <vTaskSwitchContext>
 8013d64:	f04f 0000 	mov.w	r0, #0
 8013d68:	f380 8811 	msr	BASEPRI, r0
 8013d6c:	bc09      	pop	{r0, r3}
 8013d6e:	6819      	ldr	r1, [r3, #0]
 8013d70:	6808      	ldr	r0, [r1, #0]
 8013d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d76:	f01e 0f10 	tst.w	lr, #16
 8013d7a:	bf08      	it	eq
 8013d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013d80:	f380 8809 	msr	PSP, r0
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop
 8013d8c:	f3af 8000 	nop.w

08013d90 <pxCurrentTCBConst>:
 8013d90:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013d94:	bf00      	nop
 8013d96:	bf00      	nop

08013d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8013d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da2:	f383 8811 	msr	BASEPRI, r3
 8013da6:	f3bf 8f6f 	isb	sy
 8013daa:	f3bf 8f4f 	dsb	sy
 8013dae:	607b      	str	r3, [r7, #4]
}
 8013db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013db2:	f7fe fe0b 	bl	80129cc <xTaskIncrementTick>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d003      	beq.n	8013dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013dbc:	4b06      	ldr	r3, [pc, #24]	; (8013dd8 <xPortSysTickHandler+0x40>)
 8013dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dc2:	601a      	str	r2, [r3, #0]
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	f383 8811 	msr	BASEPRI, r3
}
 8013dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	e000ed04 	.word	0xe000ed04

08013ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013ddc:	b480      	push	{r7}
 8013dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013de0:	4b0b      	ldr	r3, [pc, #44]	; (8013e10 <vPortSetupTimerInterrupt+0x34>)
 8013de2:	2200      	movs	r2, #0
 8013de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013de6:	4b0b      	ldr	r3, [pc, #44]	; (8013e14 <vPortSetupTimerInterrupt+0x38>)
 8013de8:	2200      	movs	r2, #0
 8013dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013dec:	4b0a      	ldr	r3, [pc, #40]	; (8013e18 <vPortSetupTimerInterrupt+0x3c>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a0a      	ldr	r2, [pc, #40]	; (8013e1c <vPortSetupTimerInterrupt+0x40>)
 8013df2:	fba2 2303 	umull	r2, r3, r2, r3
 8013df6:	099b      	lsrs	r3, r3, #6
 8013df8:	4a09      	ldr	r2, [pc, #36]	; (8013e20 <vPortSetupTimerInterrupt+0x44>)
 8013dfa:	3b01      	subs	r3, #1
 8013dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013dfe:	4b04      	ldr	r3, [pc, #16]	; (8013e10 <vPortSetupTimerInterrupt+0x34>)
 8013e00:	2207      	movs	r2, #7
 8013e02:	601a      	str	r2, [r3, #0]
}
 8013e04:	bf00      	nop
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop
 8013e10:	e000e010 	.word	0xe000e010
 8013e14:	e000e018 	.word	0xe000e018
 8013e18:	24000088 	.word	0x24000088
 8013e1c:	10624dd3 	.word	0x10624dd3
 8013e20:	e000e014 	.word	0xe000e014

08013e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013e34 <vPortEnableVFP+0x10>
 8013e28:	6801      	ldr	r1, [r0, #0]
 8013e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013e2e:	6001      	str	r1, [r0, #0]
 8013e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013e32:	bf00      	nop
 8013e34:	e000ed88 	.word	0xe000ed88

08013e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013e38:	b480      	push	{r7}
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013e3e:	f3ef 8305 	mrs	r3, IPSR
 8013e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	2b0f      	cmp	r3, #15
 8013e48:	d914      	bls.n	8013e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013e4a:	4a17      	ldr	r2, [pc, #92]	; (8013ea8 <vPortValidateInterruptPriority+0x70>)
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	4413      	add	r3, r2
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013e54:	4b15      	ldr	r3, [pc, #84]	; (8013eac <vPortValidateInterruptPriority+0x74>)
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	7afa      	ldrb	r2, [r7, #11]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d20a      	bcs.n	8013e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e62:	f383 8811 	msr	BASEPRI, r3
 8013e66:	f3bf 8f6f 	isb	sy
 8013e6a:	f3bf 8f4f 	dsb	sy
 8013e6e:	607b      	str	r3, [r7, #4]
}
 8013e70:	bf00      	nop
 8013e72:	e7fe      	b.n	8013e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013e74:	4b0e      	ldr	r3, [pc, #56]	; (8013eb0 <vPortValidateInterruptPriority+0x78>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013e7c:	4b0d      	ldr	r3, [pc, #52]	; (8013eb4 <vPortValidateInterruptPriority+0x7c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d90a      	bls.n	8013e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e88:	f383 8811 	msr	BASEPRI, r3
 8013e8c:	f3bf 8f6f 	isb	sy
 8013e90:	f3bf 8f4f 	dsb	sy
 8013e94:	603b      	str	r3, [r7, #0]
}
 8013e96:	bf00      	nop
 8013e98:	e7fe      	b.n	8013e98 <vPortValidateInterruptPriority+0x60>
	}
 8013e9a:	bf00      	nop
 8013e9c:	3714      	adds	r7, #20
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop
 8013ea8:	e000e3f0 	.word	0xe000e3f0
 8013eac:	240014a4 	.word	0x240014a4
 8013eb0:	e000ed0c 	.word	0xe000ed0c
 8013eb4:	240014a8 	.word	0x240014a8

08013eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08a      	sub	sp, #40	; 0x28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013ec4:	f7fe fcc6 	bl	8012854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013ec8:	4b5b      	ldr	r3, [pc, #364]	; (8014038 <pvPortMalloc+0x180>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d101      	bne.n	8013ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013ed0:	f000 f920 	bl	8014114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013ed4:	4b59      	ldr	r3, [pc, #356]	; (801403c <pvPortMalloc+0x184>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	4013      	ands	r3, r2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f040 8093 	bne.w	8014008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d01d      	beq.n	8013f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013ee8:	2208      	movs	r2, #8
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4413      	add	r3, r2
 8013eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f003 0307 	and.w	r3, r3, #7
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d014      	beq.n	8013f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f023 0307 	bic.w	r3, r3, #7
 8013f00:	3308      	adds	r3, #8
 8013f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f003 0307 	and.w	r3, r3, #7
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00a      	beq.n	8013f24 <pvPortMalloc+0x6c>
	__asm volatile
 8013f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f12:	f383 8811 	msr	BASEPRI, r3
 8013f16:	f3bf 8f6f 	isb	sy
 8013f1a:	f3bf 8f4f 	dsb	sy
 8013f1e:	617b      	str	r3, [r7, #20]
}
 8013f20:	bf00      	nop
 8013f22:	e7fe      	b.n	8013f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d06e      	beq.n	8014008 <pvPortMalloc+0x150>
 8013f2a:	4b45      	ldr	r3, [pc, #276]	; (8014040 <pvPortMalloc+0x188>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d869      	bhi.n	8014008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013f34:	4b43      	ldr	r3, [pc, #268]	; (8014044 <pvPortMalloc+0x18c>)
 8013f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013f38:	4b42      	ldr	r3, [pc, #264]	; (8014044 <pvPortMalloc+0x18c>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f3e:	e004      	b.n	8013f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d903      	bls.n	8013f5c <pvPortMalloc+0xa4>
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1f1      	bne.n	8013f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013f5c:	4b36      	ldr	r3, [pc, #216]	; (8014038 <pvPortMalloc+0x180>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d050      	beq.n	8014008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013f66:	6a3b      	ldr	r3, [r7, #32]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2208      	movs	r2, #8
 8013f6c:	4413      	add	r3, r2
 8013f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	6a3b      	ldr	r3, [r7, #32]
 8013f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7a:	685a      	ldr	r2, [r3, #4]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	1ad2      	subs	r2, r2, r3
 8013f80:	2308      	movs	r3, #8
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d91f      	bls.n	8013fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	f003 0307 	and.w	r3, r3, #7
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00a      	beq.n	8013fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8013f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	613b      	str	r3, [r7, #16]
}
 8013fac:	bf00      	nop
 8013fae:	e7fe      	b.n	8013fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb2:	685a      	ldr	r2, [r3, #4]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	1ad2      	subs	r2, r2, r3
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013fc2:	69b8      	ldr	r0, [r7, #24]
 8013fc4:	f000 f908 	bl	80141d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013fc8:	4b1d      	ldr	r3, [pc, #116]	; (8014040 <pvPortMalloc+0x188>)
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	4a1b      	ldr	r2, [pc, #108]	; (8014040 <pvPortMalloc+0x188>)
 8013fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013fd6:	4b1a      	ldr	r3, [pc, #104]	; (8014040 <pvPortMalloc+0x188>)
 8013fd8:	681a      	ldr	r2, [r3, #0]
 8013fda:	4b1b      	ldr	r3, [pc, #108]	; (8014048 <pvPortMalloc+0x190>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d203      	bcs.n	8013fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013fe2:	4b17      	ldr	r3, [pc, #92]	; (8014040 <pvPortMalloc+0x188>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	4a18      	ldr	r2, [pc, #96]	; (8014048 <pvPortMalloc+0x190>)
 8013fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fec:	685a      	ldr	r2, [r3, #4]
 8013fee:	4b13      	ldr	r3, [pc, #76]	; (801403c <pvPortMalloc+0x184>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	431a      	orrs	r2, r3
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013ffe:	4b13      	ldr	r3, [pc, #76]	; (801404c <pvPortMalloc+0x194>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	3301      	adds	r3, #1
 8014004:	4a11      	ldr	r2, [pc, #68]	; (801404c <pvPortMalloc+0x194>)
 8014006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014008:	f7fe fc32 	bl	8012870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	f003 0307 	and.w	r3, r3, #7
 8014012:	2b00      	cmp	r3, #0
 8014014:	d00a      	beq.n	801402c <pvPortMalloc+0x174>
	__asm volatile
 8014016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401a:	f383 8811 	msr	BASEPRI, r3
 801401e:	f3bf 8f6f 	isb	sy
 8014022:	f3bf 8f4f 	dsb	sy
 8014026:	60fb      	str	r3, [r7, #12]
}
 8014028:	bf00      	nop
 801402a:	e7fe      	b.n	801402a <pvPortMalloc+0x172>
	return pvReturn;
 801402c:	69fb      	ldr	r3, [r7, #28]
}
 801402e:	4618      	mov	r0, r3
 8014030:	3728      	adds	r7, #40	; 0x28
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	240050b4 	.word	0x240050b4
 801403c:	240050c8 	.word	0x240050c8
 8014040:	240050b8 	.word	0x240050b8
 8014044:	240050ac 	.word	0x240050ac
 8014048:	240050bc 	.word	0x240050bc
 801404c:	240050c0 	.word	0x240050c0

08014050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d04d      	beq.n	80140fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014062:	2308      	movs	r3, #8
 8014064:	425b      	negs	r3, r3
 8014066:	697a      	ldr	r2, [r7, #20]
 8014068:	4413      	add	r3, r2
 801406a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	685a      	ldr	r2, [r3, #4]
 8014074:	4b24      	ldr	r3, [pc, #144]	; (8014108 <vPortFree+0xb8>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4013      	ands	r3, r2
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10a      	bne.n	8014094 <vPortFree+0x44>
	__asm volatile
 801407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014082:	f383 8811 	msr	BASEPRI, r3
 8014086:	f3bf 8f6f 	isb	sy
 801408a:	f3bf 8f4f 	dsb	sy
 801408e:	60fb      	str	r3, [r7, #12]
}
 8014090:	bf00      	nop
 8014092:	e7fe      	b.n	8014092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d00a      	beq.n	80140b2 <vPortFree+0x62>
	__asm volatile
 801409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a0:	f383 8811 	msr	BASEPRI, r3
 80140a4:	f3bf 8f6f 	isb	sy
 80140a8:	f3bf 8f4f 	dsb	sy
 80140ac:	60bb      	str	r3, [r7, #8]
}
 80140ae:	bf00      	nop
 80140b0:	e7fe      	b.n	80140b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	685a      	ldr	r2, [r3, #4]
 80140b6:	4b14      	ldr	r3, [pc, #80]	; (8014108 <vPortFree+0xb8>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	4013      	ands	r3, r2
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d01e      	beq.n	80140fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d11a      	bne.n	80140fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	685a      	ldr	r2, [r3, #4]
 80140cc:	4b0e      	ldr	r3, [pc, #56]	; (8014108 <vPortFree+0xb8>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	43db      	mvns	r3, r3
 80140d2:	401a      	ands	r2, r3
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80140d8:	f7fe fbbc 	bl	8012854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	685a      	ldr	r2, [r3, #4]
 80140e0:	4b0a      	ldr	r3, [pc, #40]	; (801410c <vPortFree+0xbc>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4413      	add	r3, r2
 80140e6:	4a09      	ldr	r2, [pc, #36]	; (801410c <vPortFree+0xbc>)
 80140e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80140ea:	6938      	ldr	r0, [r7, #16]
 80140ec:	f000 f874 	bl	80141d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80140f0:	4b07      	ldr	r3, [pc, #28]	; (8014110 <vPortFree+0xc0>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	3301      	adds	r3, #1
 80140f6:	4a06      	ldr	r2, [pc, #24]	; (8014110 <vPortFree+0xc0>)
 80140f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80140fa:	f7fe fbb9 	bl	8012870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80140fe:	bf00      	nop
 8014100:	3718      	adds	r7, #24
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	240050c8 	.word	0x240050c8
 801410c:	240050b8 	.word	0x240050b8
 8014110:	240050c4 	.word	0x240050c4

08014114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801411a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801411e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014120:	4b27      	ldr	r3, [pc, #156]	; (80141c0 <prvHeapInit+0xac>)
 8014122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	f003 0307 	and.w	r3, r3, #7
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00c      	beq.n	8014148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	3307      	adds	r3, #7
 8014132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f023 0307 	bic.w	r3, r3, #7
 801413a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	4a1f      	ldr	r2, [pc, #124]	; (80141c0 <prvHeapInit+0xac>)
 8014144:	4413      	add	r3, r2
 8014146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801414c:	4a1d      	ldr	r2, [pc, #116]	; (80141c4 <prvHeapInit+0xb0>)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014152:	4b1c      	ldr	r3, [pc, #112]	; (80141c4 <prvHeapInit+0xb0>)
 8014154:	2200      	movs	r2, #0
 8014156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	4413      	add	r3, r2
 801415e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014160:	2208      	movs	r2, #8
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	1a9b      	subs	r3, r3, r2
 8014166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f023 0307 	bic.w	r3, r3, #7
 801416e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	4a15      	ldr	r2, [pc, #84]	; (80141c8 <prvHeapInit+0xb4>)
 8014174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014176:	4b14      	ldr	r3, [pc, #80]	; (80141c8 <prvHeapInit+0xb4>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2200      	movs	r2, #0
 801417c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801417e:	4b12      	ldr	r3, [pc, #72]	; (80141c8 <prvHeapInit+0xb4>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	2200      	movs	r2, #0
 8014184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	1ad2      	subs	r2, r2, r3
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014194:	4b0c      	ldr	r3, [pc, #48]	; (80141c8 <prvHeapInit+0xb4>)
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	4a0a      	ldr	r2, [pc, #40]	; (80141cc <prvHeapInit+0xb8>)
 80141a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	4a09      	ldr	r2, [pc, #36]	; (80141d0 <prvHeapInit+0xbc>)
 80141aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80141ac:	4b09      	ldr	r3, [pc, #36]	; (80141d4 <prvHeapInit+0xc0>)
 80141ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80141b2:	601a      	str	r2, [r3, #0]
}
 80141b4:	bf00      	nop
 80141b6:	3714      	adds	r7, #20
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr
 80141c0:	240014ac 	.word	0x240014ac
 80141c4:	240050ac 	.word	0x240050ac
 80141c8:	240050b4 	.word	0x240050b4
 80141cc:	240050bc 	.word	0x240050bc
 80141d0:	240050b8 	.word	0x240050b8
 80141d4:	240050c8 	.word	0x240050c8

080141d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80141e0:	4b28      	ldr	r3, [pc, #160]	; (8014284 <prvInsertBlockIntoFreeList+0xac>)
 80141e2:	60fb      	str	r3, [r7, #12]
 80141e4:	e002      	b.n	80141ec <prvInsertBlockIntoFreeList+0x14>
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	60fb      	str	r3, [r7, #12]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	687a      	ldr	r2, [r7, #4]
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d8f7      	bhi.n	80141e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	68ba      	ldr	r2, [r7, #8]
 8014200:	4413      	add	r3, r2
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	429a      	cmp	r2, r3
 8014206:	d108      	bne.n	801421a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	685a      	ldr	r2, [r3, #4]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	441a      	add	r2, r3
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	68ba      	ldr	r2, [r7, #8]
 8014224:	441a      	add	r2, r3
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	429a      	cmp	r2, r3
 801422c:	d118      	bne.n	8014260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	4b15      	ldr	r3, [pc, #84]	; (8014288 <prvInsertBlockIntoFreeList+0xb0>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	429a      	cmp	r2, r3
 8014238:	d00d      	beq.n	8014256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	685a      	ldr	r2, [r3, #4]
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	441a      	add	r2, r3
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	601a      	str	r2, [r3, #0]
 8014254:	e008      	b.n	8014268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014256:	4b0c      	ldr	r3, [pc, #48]	; (8014288 <prvInsertBlockIntoFreeList+0xb0>)
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	601a      	str	r2, [r3, #0]
 801425e:	e003      	b.n	8014268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014268:	68fa      	ldr	r2, [r7, #12]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	429a      	cmp	r2, r3
 801426e:	d002      	beq.n	8014276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014276:	bf00      	nop
 8014278:	3714      	adds	r7, #20
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	240050ac 	.word	0x240050ac
 8014288:	240050b4 	.word	0x240050b4

0801428c <__errno>:
 801428c:	4b01      	ldr	r3, [pc, #4]	; (8014294 <__errno+0x8>)
 801428e:	6818      	ldr	r0, [r3, #0]
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop
 8014294:	2400009c 	.word	0x2400009c

08014298 <__libc_init_array>:
 8014298:	b570      	push	{r4, r5, r6, lr}
 801429a:	4d0d      	ldr	r5, [pc, #52]	; (80142d0 <__libc_init_array+0x38>)
 801429c:	4c0d      	ldr	r4, [pc, #52]	; (80142d4 <__libc_init_array+0x3c>)
 801429e:	1b64      	subs	r4, r4, r5
 80142a0:	10a4      	asrs	r4, r4, #2
 80142a2:	2600      	movs	r6, #0
 80142a4:	42a6      	cmp	r6, r4
 80142a6:	d109      	bne.n	80142bc <__libc_init_array+0x24>
 80142a8:	4d0b      	ldr	r5, [pc, #44]	; (80142d8 <__libc_init_array+0x40>)
 80142aa:	4c0c      	ldr	r4, [pc, #48]	; (80142dc <__libc_init_array+0x44>)
 80142ac:	f001 f842 	bl	8015334 <_init>
 80142b0:	1b64      	subs	r4, r4, r5
 80142b2:	10a4      	asrs	r4, r4, #2
 80142b4:	2600      	movs	r6, #0
 80142b6:	42a6      	cmp	r6, r4
 80142b8:	d105      	bne.n	80142c6 <__libc_init_array+0x2e>
 80142ba:	bd70      	pop	{r4, r5, r6, pc}
 80142bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80142c0:	4798      	blx	r3
 80142c2:	3601      	adds	r6, #1
 80142c4:	e7ee      	b.n	80142a4 <__libc_init_array+0xc>
 80142c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80142ca:	4798      	blx	r3
 80142cc:	3601      	adds	r6, #1
 80142ce:	e7f2      	b.n	80142b6 <__libc_init_array+0x1e>
 80142d0:	08015704 	.word	0x08015704
 80142d4:	08015704 	.word	0x08015704
 80142d8:	08015704 	.word	0x08015704
 80142dc:	08015708 	.word	0x08015708

080142e0 <malloc>:
 80142e0:	4b02      	ldr	r3, [pc, #8]	; (80142ec <malloc+0xc>)
 80142e2:	4601      	mov	r1, r0
 80142e4:	6818      	ldr	r0, [r3, #0]
 80142e6:	f000 b88d 	b.w	8014404 <_malloc_r>
 80142ea:	bf00      	nop
 80142ec:	2400009c 	.word	0x2400009c

080142f0 <free>:
 80142f0:	4b02      	ldr	r3, [pc, #8]	; (80142fc <free+0xc>)
 80142f2:	4601      	mov	r1, r0
 80142f4:	6818      	ldr	r0, [r3, #0]
 80142f6:	f000 b819 	b.w	801432c <_free_r>
 80142fa:	bf00      	nop
 80142fc:	2400009c 	.word	0x2400009c

08014300 <memcpy>:
 8014300:	440a      	add	r2, r1
 8014302:	4291      	cmp	r1, r2
 8014304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014308:	d100      	bne.n	801430c <memcpy+0xc>
 801430a:	4770      	bx	lr
 801430c:	b510      	push	{r4, lr}
 801430e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014316:	4291      	cmp	r1, r2
 8014318:	d1f9      	bne.n	801430e <memcpy+0xe>
 801431a:	bd10      	pop	{r4, pc}

0801431c <memset>:
 801431c:	4402      	add	r2, r0
 801431e:	4603      	mov	r3, r0
 8014320:	4293      	cmp	r3, r2
 8014322:	d100      	bne.n	8014326 <memset+0xa>
 8014324:	4770      	bx	lr
 8014326:	f803 1b01 	strb.w	r1, [r3], #1
 801432a:	e7f9      	b.n	8014320 <memset+0x4>

0801432c <_free_r>:
 801432c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801432e:	2900      	cmp	r1, #0
 8014330:	d044      	beq.n	80143bc <_free_r+0x90>
 8014332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014336:	9001      	str	r0, [sp, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	f1a1 0404 	sub.w	r4, r1, #4
 801433e:	bfb8      	it	lt
 8014340:	18e4      	addlt	r4, r4, r3
 8014342:	f000 fc51 	bl	8014be8 <__malloc_lock>
 8014346:	4a1e      	ldr	r2, [pc, #120]	; (80143c0 <_free_r+0x94>)
 8014348:	9801      	ldr	r0, [sp, #4]
 801434a:	6813      	ldr	r3, [r2, #0]
 801434c:	b933      	cbnz	r3, 801435c <_free_r+0x30>
 801434e:	6063      	str	r3, [r4, #4]
 8014350:	6014      	str	r4, [r2, #0]
 8014352:	b003      	add	sp, #12
 8014354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014358:	f000 bc4c 	b.w	8014bf4 <__malloc_unlock>
 801435c:	42a3      	cmp	r3, r4
 801435e:	d908      	bls.n	8014372 <_free_r+0x46>
 8014360:	6825      	ldr	r5, [r4, #0]
 8014362:	1961      	adds	r1, r4, r5
 8014364:	428b      	cmp	r3, r1
 8014366:	bf01      	itttt	eq
 8014368:	6819      	ldreq	r1, [r3, #0]
 801436a:	685b      	ldreq	r3, [r3, #4]
 801436c:	1949      	addeq	r1, r1, r5
 801436e:	6021      	streq	r1, [r4, #0]
 8014370:	e7ed      	b.n	801434e <_free_r+0x22>
 8014372:	461a      	mov	r2, r3
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	b10b      	cbz	r3, 801437c <_free_r+0x50>
 8014378:	42a3      	cmp	r3, r4
 801437a:	d9fa      	bls.n	8014372 <_free_r+0x46>
 801437c:	6811      	ldr	r1, [r2, #0]
 801437e:	1855      	adds	r5, r2, r1
 8014380:	42a5      	cmp	r5, r4
 8014382:	d10b      	bne.n	801439c <_free_r+0x70>
 8014384:	6824      	ldr	r4, [r4, #0]
 8014386:	4421      	add	r1, r4
 8014388:	1854      	adds	r4, r2, r1
 801438a:	42a3      	cmp	r3, r4
 801438c:	6011      	str	r1, [r2, #0]
 801438e:	d1e0      	bne.n	8014352 <_free_r+0x26>
 8014390:	681c      	ldr	r4, [r3, #0]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	6053      	str	r3, [r2, #4]
 8014396:	4421      	add	r1, r4
 8014398:	6011      	str	r1, [r2, #0]
 801439a:	e7da      	b.n	8014352 <_free_r+0x26>
 801439c:	d902      	bls.n	80143a4 <_free_r+0x78>
 801439e:	230c      	movs	r3, #12
 80143a0:	6003      	str	r3, [r0, #0]
 80143a2:	e7d6      	b.n	8014352 <_free_r+0x26>
 80143a4:	6825      	ldr	r5, [r4, #0]
 80143a6:	1961      	adds	r1, r4, r5
 80143a8:	428b      	cmp	r3, r1
 80143aa:	bf04      	itt	eq
 80143ac:	6819      	ldreq	r1, [r3, #0]
 80143ae:	685b      	ldreq	r3, [r3, #4]
 80143b0:	6063      	str	r3, [r4, #4]
 80143b2:	bf04      	itt	eq
 80143b4:	1949      	addeq	r1, r1, r5
 80143b6:	6021      	streq	r1, [r4, #0]
 80143b8:	6054      	str	r4, [r2, #4]
 80143ba:	e7ca      	b.n	8014352 <_free_r+0x26>
 80143bc:	b003      	add	sp, #12
 80143be:	bd30      	pop	{r4, r5, pc}
 80143c0:	240050cc 	.word	0x240050cc

080143c4 <sbrk_aligned>:
 80143c4:	b570      	push	{r4, r5, r6, lr}
 80143c6:	4e0e      	ldr	r6, [pc, #56]	; (8014400 <sbrk_aligned+0x3c>)
 80143c8:	460c      	mov	r4, r1
 80143ca:	6831      	ldr	r1, [r6, #0]
 80143cc:	4605      	mov	r5, r0
 80143ce:	b911      	cbnz	r1, 80143d6 <sbrk_aligned+0x12>
 80143d0:	f000 f91a 	bl	8014608 <_sbrk_r>
 80143d4:	6030      	str	r0, [r6, #0]
 80143d6:	4621      	mov	r1, r4
 80143d8:	4628      	mov	r0, r5
 80143da:	f000 f915 	bl	8014608 <_sbrk_r>
 80143de:	1c43      	adds	r3, r0, #1
 80143e0:	d00a      	beq.n	80143f8 <sbrk_aligned+0x34>
 80143e2:	1cc4      	adds	r4, r0, #3
 80143e4:	f024 0403 	bic.w	r4, r4, #3
 80143e8:	42a0      	cmp	r0, r4
 80143ea:	d007      	beq.n	80143fc <sbrk_aligned+0x38>
 80143ec:	1a21      	subs	r1, r4, r0
 80143ee:	4628      	mov	r0, r5
 80143f0:	f000 f90a 	bl	8014608 <_sbrk_r>
 80143f4:	3001      	adds	r0, #1
 80143f6:	d101      	bne.n	80143fc <sbrk_aligned+0x38>
 80143f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80143fc:	4620      	mov	r0, r4
 80143fe:	bd70      	pop	{r4, r5, r6, pc}
 8014400:	240050d0 	.word	0x240050d0

08014404 <_malloc_r>:
 8014404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014408:	1ccd      	adds	r5, r1, #3
 801440a:	f025 0503 	bic.w	r5, r5, #3
 801440e:	3508      	adds	r5, #8
 8014410:	2d0c      	cmp	r5, #12
 8014412:	bf38      	it	cc
 8014414:	250c      	movcc	r5, #12
 8014416:	2d00      	cmp	r5, #0
 8014418:	4607      	mov	r7, r0
 801441a:	db01      	blt.n	8014420 <_malloc_r+0x1c>
 801441c:	42a9      	cmp	r1, r5
 801441e:	d905      	bls.n	801442c <_malloc_r+0x28>
 8014420:	230c      	movs	r3, #12
 8014422:	603b      	str	r3, [r7, #0]
 8014424:	2600      	movs	r6, #0
 8014426:	4630      	mov	r0, r6
 8014428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801442c:	4e2e      	ldr	r6, [pc, #184]	; (80144e8 <_malloc_r+0xe4>)
 801442e:	f000 fbdb 	bl	8014be8 <__malloc_lock>
 8014432:	6833      	ldr	r3, [r6, #0]
 8014434:	461c      	mov	r4, r3
 8014436:	bb34      	cbnz	r4, 8014486 <_malloc_r+0x82>
 8014438:	4629      	mov	r1, r5
 801443a:	4638      	mov	r0, r7
 801443c:	f7ff ffc2 	bl	80143c4 <sbrk_aligned>
 8014440:	1c43      	adds	r3, r0, #1
 8014442:	4604      	mov	r4, r0
 8014444:	d14d      	bne.n	80144e2 <_malloc_r+0xde>
 8014446:	6834      	ldr	r4, [r6, #0]
 8014448:	4626      	mov	r6, r4
 801444a:	2e00      	cmp	r6, #0
 801444c:	d140      	bne.n	80144d0 <_malloc_r+0xcc>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	4631      	mov	r1, r6
 8014452:	4638      	mov	r0, r7
 8014454:	eb04 0803 	add.w	r8, r4, r3
 8014458:	f000 f8d6 	bl	8014608 <_sbrk_r>
 801445c:	4580      	cmp	r8, r0
 801445e:	d13a      	bne.n	80144d6 <_malloc_r+0xd2>
 8014460:	6821      	ldr	r1, [r4, #0]
 8014462:	3503      	adds	r5, #3
 8014464:	1a6d      	subs	r5, r5, r1
 8014466:	f025 0503 	bic.w	r5, r5, #3
 801446a:	3508      	adds	r5, #8
 801446c:	2d0c      	cmp	r5, #12
 801446e:	bf38      	it	cc
 8014470:	250c      	movcc	r5, #12
 8014472:	4629      	mov	r1, r5
 8014474:	4638      	mov	r0, r7
 8014476:	f7ff ffa5 	bl	80143c4 <sbrk_aligned>
 801447a:	3001      	adds	r0, #1
 801447c:	d02b      	beq.n	80144d6 <_malloc_r+0xd2>
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	442b      	add	r3, r5
 8014482:	6023      	str	r3, [r4, #0]
 8014484:	e00e      	b.n	80144a4 <_malloc_r+0xa0>
 8014486:	6822      	ldr	r2, [r4, #0]
 8014488:	1b52      	subs	r2, r2, r5
 801448a:	d41e      	bmi.n	80144ca <_malloc_r+0xc6>
 801448c:	2a0b      	cmp	r2, #11
 801448e:	d916      	bls.n	80144be <_malloc_r+0xba>
 8014490:	1961      	adds	r1, r4, r5
 8014492:	42a3      	cmp	r3, r4
 8014494:	6025      	str	r5, [r4, #0]
 8014496:	bf18      	it	ne
 8014498:	6059      	strne	r1, [r3, #4]
 801449a:	6863      	ldr	r3, [r4, #4]
 801449c:	bf08      	it	eq
 801449e:	6031      	streq	r1, [r6, #0]
 80144a0:	5162      	str	r2, [r4, r5]
 80144a2:	604b      	str	r3, [r1, #4]
 80144a4:	4638      	mov	r0, r7
 80144a6:	f104 060b 	add.w	r6, r4, #11
 80144aa:	f000 fba3 	bl	8014bf4 <__malloc_unlock>
 80144ae:	f026 0607 	bic.w	r6, r6, #7
 80144b2:	1d23      	adds	r3, r4, #4
 80144b4:	1af2      	subs	r2, r6, r3
 80144b6:	d0b6      	beq.n	8014426 <_malloc_r+0x22>
 80144b8:	1b9b      	subs	r3, r3, r6
 80144ba:	50a3      	str	r3, [r4, r2]
 80144bc:	e7b3      	b.n	8014426 <_malloc_r+0x22>
 80144be:	6862      	ldr	r2, [r4, #4]
 80144c0:	42a3      	cmp	r3, r4
 80144c2:	bf0c      	ite	eq
 80144c4:	6032      	streq	r2, [r6, #0]
 80144c6:	605a      	strne	r2, [r3, #4]
 80144c8:	e7ec      	b.n	80144a4 <_malloc_r+0xa0>
 80144ca:	4623      	mov	r3, r4
 80144cc:	6864      	ldr	r4, [r4, #4]
 80144ce:	e7b2      	b.n	8014436 <_malloc_r+0x32>
 80144d0:	4634      	mov	r4, r6
 80144d2:	6876      	ldr	r6, [r6, #4]
 80144d4:	e7b9      	b.n	801444a <_malloc_r+0x46>
 80144d6:	230c      	movs	r3, #12
 80144d8:	603b      	str	r3, [r7, #0]
 80144da:	4638      	mov	r0, r7
 80144dc:	f000 fb8a 	bl	8014bf4 <__malloc_unlock>
 80144e0:	e7a1      	b.n	8014426 <_malloc_r+0x22>
 80144e2:	6025      	str	r5, [r4, #0]
 80144e4:	e7de      	b.n	80144a4 <_malloc_r+0xa0>
 80144e6:	bf00      	nop
 80144e8:	240050cc 	.word	0x240050cc

080144ec <iprintf>:
 80144ec:	b40f      	push	{r0, r1, r2, r3}
 80144ee:	4b0a      	ldr	r3, [pc, #40]	; (8014518 <iprintf+0x2c>)
 80144f0:	b513      	push	{r0, r1, r4, lr}
 80144f2:	681c      	ldr	r4, [r3, #0]
 80144f4:	b124      	cbz	r4, 8014500 <iprintf+0x14>
 80144f6:	69a3      	ldr	r3, [r4, #24]
 80144f8:	b913      	cbnz	r3, 8014500 <iprintf+0x14>
 80144fa:	4620      	mov	r0, r4
 80144fc:	f000 fa6e 	bl	80149dc <__sinit>
 8014500:	ab05      	add	r3, sp, #20
 8014502:	9a04      	ldr	r2, [sp, #16]
 8014504:	68a1      	ldr	r1, [r4, #8]
 8014506:	9301      	str	r3, [sp, #4]
 8014508:	4620      	mov	r0, r4
 801450a:	f000 fba3 	bl	8014c54 <_vfiprintf_r>
 801450e:	b002      	add	sp, #8
 8014510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014514:	b004      	add	sp, #16
 8014516:	4770      	bx	lr
 8014518:	2400009c 	.word	0x2400009c

0801451c <_puts_r>:
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	460e      	mov	r6, r1
 8014520:	4605      	mov	r5, r0
 8014522:	b118      	cbz	r0, 801452c <_puts_r+0x10>
 8014524:	6983      	ldr	r3, [r0, #24]
 8014526:	b90b      	cbnz	r3, 801452c <_puts_r+0x10>
 8014528:	f000 fa58 	bl	80149dc <__sinit>
 801452c:	69ab      	ldr	r3, [r5, #24]
 801452e:	68ac      	ldr	r4, [r5, #8]
 8014530:	b913      	cbnz	r3, 8014538 <_puts_r+0x1c>
 8014532:	4628      	mov	r0, r5
 8014534:	f000 fa52 	bl	80149dc <__sinit>
 8014538:	4b2c      	ldr	r3, [pc, #176]	; (80145ec <_puts_r+0xd0>)
 801453a:	429c      	cmp	r4, r3
 801453c:	d120      	bne.n	8014580 <_puts_r+0x64>
 801453e:	686c      	ldr	r4, [r5, #4]
 8014540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014542:	07db      	lsls	r3, r3, #31
 8014544:	d405      	bmi.n	8014552 <_puts_r+0x36>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	0598      	lsls	r0, r3, #22
 801454a:	d402      	bmi.n	8014552 <_puts_r+0x36>
 801454c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801454e:	f000 fae3 	bl	8014b18 <__retarget_lock_acquire_recursive>
 8014552:	89a3      	ldrh	r3, [r4, #12]
 8014554:	0719      	lsls	r1, r3, #28
 8014556:	d51d      	bpl.n	8014594 <_puts_r+0x78>
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	b1db      	cbz	r3, 8014594 <_puts_r+0x78>
 801455c:	3e01      	subs	r6, #1
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014564:	3b01      	subs	r3, #1
 8014566:	60a3      	str	r3, [r4, #8]
 8014568:	bb39      	cbnz	r1, 80145ba <_puts_r+0x9e>
 801456a:	2b00      	cmp	r3, #0
 801456c:	da38      	bge.n	80145e0 <_puts_r+0xc4>
 801456e:	4622      	mov	r2, r4
 8014570:	210a      	movs	r1, #10
 8014572:	4628      	mov	r0, r5
 8014574:	f000 f858 	bl	8014628 <__swbuf_r>
 8014578:	3001      	adds	r0, #1
 801457a:	d011      	beq.n	80145a0 <_puts_r+0x84>
 801457c:	250a      	movs	r5, #10
 801457e:	e011      	b.n	80145a4 <_puts_r+0x88>
 8014580:	4b1b      	ldr	r3, [pc, #108]	; (80145f0 <_puts_r+0xd4>)
 8014582:	429c      	cmp	r4, r3
 8014584:	d101      	bne.n	801458a <_puts_r+0x6e>
 8014586:	68ac      	ldr	r4, [r5, #8]
 8014588:	e7da      	b.n	8014540 <_puts_r+0x24>
 801458a:	4b1a      	ldr	r3, [pc, #104]	; (80145f4 <_puts_r+0xd8>)
 801458c:	429c      	cmp	r4, r3
 801458e:	bf08      	it	eq
 8014590:	68ec      	ldreq	r4, [r5, #12]
 8014592:	e7d5      	b.n	8014540 <_puts_r+0x24>
 8014594:	4621      	mov	r1, r4
 8014596:	4628      	mov	r0, r5
 8014598:	f000 f898 	bl	80146cc <__swsetup_r>
 801459c:	2800      	cmp	r0, #0
 801459e:	d0dd      	beq.n	801455c <_puts_r+0x40>
 80145a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80145a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145a6:	07da      	lsls	r2, r3, #31
 80145a8:	d405      	bmi.n	80145b6 <_puts_r+0x9a>
 80145aa:	89a3      	ldrh	r3, [r4, #12]
 80145ac:	059b      	lsls	r3, r3, #22
 80145ae:	d402      	bmi.n	80145b6 <_puts_r+0x9a>
 80145b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145b2:	f000 fab2 	bl	8014b1a <__retarget_lock_release_recursive>
 80145b6:	4628      	mov	r0, r5
 80145b8:	bd70      	pop	{r4, r5, r6, pc}
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	da04      	bge.n	80145c8 <_puts_r+0xac>
 80145be:	69a2      	ldr	r2, [r4, #24]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	dc06      	bgt.n	80145d2 <_puts_r+0xb6>
 80145c4:	290a      	cmp	r1, #10
 80145c6:	d004      	beq.n	80145d2 <_puts_r+0xb6>
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	1c5a      	adds	r2, r3, #1
 80145cc:	6022      	str	r2, [r4, #0]
 80145ce:	7019      	strb	r1, [r3, #0]
 80145d0:	e7c5      	b.n	801455e <_puts_r+0x42>
 80145d2:	4622      	mov	r2, r4
 80145d4:	4628      	mov	r0, r5
 80145d6:	f000 f827 	bl	8014628 <__swbuf_r>
 80145da:	3001      	adds	r0, #1
 80145dc:	d1bf      	bne.n	801455e <_puts_r+0x42>
 80145de:	e7df      	b.n	80145a0 <_puts_r+0x84>
 80145e0:	6823      	ldr	r3, [r4, #0]
 80145e2:	250a      	movs	r5, #10
 80145e4:	1c5a      	adds	r2, r3, #1
 80145e6:	6022      	str	r2, [r4, #0]
 80145e8:	701d      	strb	r5, [r3, #0]
 80145ea:	e7db      	b.n	80145a4 <_puts_r+0x88>
 80145ec:	08015688 	.word	0x08015688
 80145f0:	080156a8 	.word	0x080156a8
 80145f4:	08015668 	.word	0x08015668

080145f8 <puts>:
 80145f8:	4b02      	ldr	r3, [pc, #8]	; (8014604 <puts+0xc>)
 80145fa:	4601      	mov	r1, r0
 80145fc:	6818      	ldr	r0, [r3, #0]
 80145fe:	f7ff bf8d 	b.w	801451c <_puts_r>
 8014602:	bf00      	nop
 8014604:	2400009c 	.word	0x2400009c

08014608 <_sbrk_r>:
 8014608:	b538      	push	{r3, r4, r5, lr}
 801460a:	4d06      	ldr	r5, [pc, #24]	; (8014624 <_sbrk_r+0x1c>)
 801460c:	2300      	movs	r3, #0
 801460e:	4604      	mov	r4, r0
 8014610:	4608      	mov	r0, r1
 8014612:	602b      	str	r3, [r5, #0]
 8014614:	f7ee fc26 	bl	8002e64 <_sbrk>
 8014618:	1c43      	adds	r3, r0, #1
 801461a:	d102      	bne.n	8014622 <_sbrk_r+0x1a>
 801461c:	682b      	ldr	r3, [r5, #0]
 801461e:	b103      	cbz	r3, 8014622 <_sbrk_r+0x1a>
 8014620:	6023      	str	r3, [r4, #0]
 8014622:	bd38      	pop	{r3, r4, r5, pc}
 8014624:	240050d8 	.word	0x240050d8

08014628 <__swbuf_r>:
 8014628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462a:	460e      	mov	r6, r1
 801462c:	4614      	mov	r4, r2
 801462e:	4605      	mov	r5, r0
 8014630:	b118      	cbz	r0, 801463a <__swbuf_r+0x12>
 8014632:	6983      	ldr	r3, [r0, #24]
 8014634:	b90b      	cbnz	r3, 801463a <__swbuf_r+0x12>
 8014636:	f000 f9d1 	bl	80149dc <__sinit>
 801463a:	4b21      	ldr	r3, [pc, #132]	; (80146c0 <__swbuf_r+0x98>)
 801463c:	429c      	cmp	r4, r3
 801463e:	d12b      	bne.n	8014698 <__swbuf_r+0x70>
 8014640:	686c      	ldr	r4, [r5, #4]
 8014642:	69a3      	ldr	r3, [r4, #24]
 8014644:	60a3      	str	r3, [r4, #8]
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	071a      	lsls	r2, r3, #28
 801464a:	d52f      	bpl.n	80146ac <__swbuf_r+0x84>
 801464c:	6923      	ldr	r3, [r4, #16]
 801464e:	b36b      	cbz	r3, 80146ac <__swbuf_r+0x84>
 8014650:	6923      	ldr	r3, [r4, #16]
 8014652:	6820      	ldr	r0, [r4, #0]
 8014654:	1ac0      	subs	r0, r0, r3
 8014656:	6963      	ldr	r3, [r4, #20]
 8014658:	b2f6      	uxtb	r6, r6
 801465a:	4283      	cmp	r3, r0
 801465c:	4637      	mov	r7, r6
 801465e:	dc04      	bgt.n	801466a <__swbuf_r+0x42>
 8014660:	4621      	mov	r1, r4
 8014662:	4628      	mov	r0, r5
 8014664:	f000 f926 	bl	80148b4 <_fflush_r>
 8014668:	bb30      	cbnz	r0, 80146b8 <__swbuf_r+0x90>
 801466a:	68a3      	ldr	r3, [r4, #8]
 801466c:	3b01      	subs	r3, #1
 801466e:	60a3      	str	r3, [r4, #8]
 8014670:	6823      	ldr	r3, [r4, #0]
 8014672:	1c5a      	adds	r2, r3, #1
 8014674:	6022      	str	r2, [r4, #0]
 8014676:	701e      	strb	r6, [r3, #0]
 8014678:	6963      	ldr	r3, [r4, #20]
 801467a:	3001      	adds	r0, #1
 801467c:	4283      	cmp	r3, r0
 801467e:	d004      	beq.n	801468a <__swbuf_r+0x62>
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	07db      	lsls	r3, r3, #31
 8014684:	d506      	bpl.n	8014694 <__swbuf_r+0x6c>
 8014686:	2e0a      	cmp	r6, #10
 8014688:	d104      	bne.n	8014694 <__swbuf_r+0x6c>
 801468a:	4621      	mov	r1, r4
 801468c:	4628      	mov	r0, r5
 801468e:	f000 f911 	bl	80148b4 <_fflush_r>
 8014692:	b988      	cbnz	r0, 80146b8 <__swbuf_r+0x90>
 8014694:	4638      	mov	r0, r7
 8014696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014698:	4b0a      	ldr	r3, [pc, #40]	; (80146c4 <__swbuf_r+0x9c>)
 801469a:	429c      	cmp	r4, r3
 801469c:	d101      	bne.n	80146a2 <__swbuf_r+0x7a>
 801469e:	68ac      	ldr	r4, [r5, #8]
 80146a0:	e7cf      	b.n	8014642 <__swbuf_r+0x1a>
 80146a2:	4b09      	ldr	r3, [pc, #36]	; (80146c8 <__swbuf_r+0xa0>)
 80146a4:	429c      	cmp	r4, r3
 80146a6:	bf08      	it	eq
 80146a8:	68ec      	ldreq	r4, [r5, #12]
 80146aa:	e7ca      	b.n	8014642 <__swbuf_r+0x1a>
 80146ac:	4621      	mov	r1, r4
 80146ae:	4628      	mov	r0, r5
 80146b0:	f000 f80c 	bl	80146cc <__swsetup_r>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d0cb      	beq.n	8014650 <__swbuf_r+0x28>
 80146b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80146bc:	e7ea      	b.n	8014694 <__swbuf_r+0x6c>
 80146be:	bf00      	nop
 80146c0:	08015688 	.word	0x08015688
 80146c4:	080156a8 	.word	0x080156a8
 80146c8:	08015668 	.word	0x08015668

080146cc <__swsetup_r>:
 80146cc:	4b32      	ldr	r3, [pc, #200]	; (8014798 <__swsetup_r+0xcc>)
 80146ce:	b570      	push	{r4, r5, r6, lr}
 80146d0:	681d      	ldr	r5, [r3, #0]
 80146d2:	4606      	mov	r6, r0
 80146d4:	460c      	mov	r4, r1
 80146d6:	b125      	cbz	r5, 80146e2 <__swsetup_r+0x16>
 80146d8:	69ab      	ldr	r3, [r5, #24]
 80146da:	b913      	cbnz	r3, 80146e2 <__swsetup_r+0x16>
 80146dc:	4628      	mov	r0, r5
 80146de:	f000 f97d 	bl	80149dc <__sinit>
 80146e2:	4b2e      	ldr	r3, [pc, #184]	; (801479c <__swsetup_r+0xd0>)
 80146e4:	429c      	cmp	r4, r3
 80146e6:	d10f      	bne.n	8014708 <__swsetup_r+0x3c>
 80146e8:	686c      	ldr	r4, [r5, #4]
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146f0:	0719      	lsls	r1, r3, #28
 80146f2:	d42c      	bmi.n	801474e <__swsetup_r+0x82>
 80146f4:	06dd      	lsls	r5, r3, #27
 80146f6:	d411      	bmi.n	801471c <__swsetup_r+0x50>
 80146f8:	2309      	movs	r3, #9
 80146fa:	6033      	str	r3, [r6, #0]
 80146fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014706:	e03e      	b.n	8014786 <__swsetup_r+0xba>
 8014708:	4b25      	ldr	r3, [pc, #148]	; (80147a0 <__swsetup_r+0xd4>)
 801470a:	429c      	cmp	r4, r3
 801470c:	d101      	bne.n	8014712 <__swsetup_r+0x46>
 801470e:	68ac      	ldr	r4, [r5, #8]
 8014710:	e7eb      	b.n	80146ea <__swsetup_r+0x1e>
 8014712:	4b24      	ldr	r3, [pc, #144]	; (80147a4 <__swsetup_r+0xd8>)
 8014714:	429c      	cmp	r4, r3
 8014716:	bf08      	it	eq
 8014718:	68ec      	ldreq	r4, [r5, #12]
 801471a:	e7e6      	b.n	80146ea <__swsetup_r+0x1e>
 801471c:	0758      	lsls	r0, r3, #29
 801471e:	d512      	bpl.n	8014746 <__swsetup_r+0x7a>
 8014720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014722:	b141      	cbz	r1, 8014736 <__swsetup_r+0x6a>
 8014724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014728:	4299      	cmp	r1, r3
 801472a:	d002      	beq.n	8014732 <__swsetup_r+0x66>
 801472c:	4630      	mov	r0, r6
 801472e:	f7ff fdfd 	bl	801432c <_free_r>
 8014732:	2300      	movs	r3, #0
 8014734:	6363      	str	r3, [r4, #52]	; 0x34
 8014736:	89a3      	ldrh	r3, [r4, #12]
 8014738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801473c:	81a3      	strh	r3, [r4, #12]
 801473e:	2300      	movs	r3, #0
 8014740:	6063      	str	r3, [r4, #4]
 8014742:	6923      	ldr	r3, [r4, #16]
 8014744:	6023      	str	r3, [r4, #0]
 8014746:	89a3      	ldrh	r3, [r4, #12]
 8014748:	f043 0308 	orr.w	r3, r3, #8
 801474c:	81a3      	strh	r3, [r4, #12]
 801474e:	6923      	ldr	r3, [r4, #16]
 8014750:	b94b      	cbnz	r3, 8014766 <__swsetup_r+0x9a>
 8014752:	89a3      	ldrh	r3, [r4, #12]
 8014754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801475c:	d003      	beq.n	8014766 <__swsetup_r+0x9a>
 801475e:	4621      	mov	r1, r4
 8014760:	4630      	mov	r0, r6
 8014762:	f000 fa01 	bl	8014b68 <__smakebuf_r>
 8014766:	89a0      	ldrh	r0, [r4, #12]
 8014768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801476c:	f010 0301 	ands.w	r3, r0, #1
 8014770:	d00a      	beq.n	8014788 <__swsetup_r+0xbc>
 8014772:	2300      	movs	r3, #0
 8014774:	60a3      	str	r3, [r4, #8]
 8014776:	6963      	ldr	r3, [r4, #20]
 8014778:	425b      	negs	r3, r3
 801477a:	61a3      	str	r3, [r4, #24]
 801477c:	6923      	ldr	r3, [r4, #16]
 801477e:	b943      	cbnz	r3, 8014792 <__swsetup_r+0xc6>
 8014780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014784:	d1ba      	bne.n	80146fc <__swsetup_r+0x30>
 8014786:	bd70      	pop	{r4, r5, r6, pc}
 8014788:	0781      	lsls	r1, r0, #30
 801478a:	bf58      	it	pl
 801478c:	6963      	ldrpl	r3, [r4, #20]
 801478e:	60a3      	str	r3, [r4, #8]
 8014790:	e7f4      	b.n	801477c <__swsetup_r+0xb0>
 8014792:	2000      	movs	r0, #0
 8014794:	e7f7      	b.n	8014786 <__swsetup_r+0xba>
 8014796:	bf00      	nop
 8014798:	2400009c 	.word	0x2400009c
 801479c:	08015688 	.word	0x08015688
 80147a0:	080156a8 	.word	0x080156a8
 80147a4:	08015668 	.word	0x08015668

080147a8 <__sflush_r>:
 80147a8:	898a      	ldrh	r2, [r1, #12]
 80147aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ae:	4605      	mov	r5, r0
 80147b0:	0710      	lsls	r0, r2, #28
 80147b2:	460c      	mov	r4, r1
 80147b4:	d458      	bmi.n	8014868 <__sflush_r+0xc0>
 80147b6:	684b      	ldr	r3, [r1, #4]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	dc05      	bgt.n	80147c8 <__sflush_r+0x20>
 80147bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80147be:	2b00      	cmp	r3, #0
 80147c0:	dc02      	bgt.n	80147c8 <__sflush_r+0x20>
 80147c2:	2000      	movs	r0, #0
 80147c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147ca:	2e00      	cmp	r6, #0
 80147cc:	d0f9      	beq.n	80147c2 <__sflush_r+0x1a>
 80147ce:	2300      	movs	r3, #0
 80147d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80147d4:	682f      	ldr	r7, [r5, #0]
 80147d6:	602b      	str	r3, [r5, #0]
 80147d8:	d032      	beq.n	8014840 <__sflush_r+0x98>
 80147da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80147dc:	89a3      	ldrh	r3, [r4, #12]
 80147de:	075a      	lsls	r2, r3, #29
 80147e0:	d505      	bpl.n	80147ee <__sflush_r+0x46>
 80147e2:	6863      	ldr	r3, [r4, #4]
 80147e4:	1ac0      	subs	r0, r0, r3
 80147e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147e8:	b10b      	cbz	r3, 80147ee <__sflush_r+0x46>
 80147ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147ec:	1ac0      	subs	r0, r0, r3
 80147ee:	2300      	movs	r3, #0
 80147f0:	4602      	mov	r2, r0
 80147f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147f4:	6a21      	ldr	r1, [r4, #32]
 80147f6:	4628      	mov	r0, r5
 80147f8:	47b0      	blx	r6
 80147fa:	1c43      	adds	r3, r0, #1
 80147fc:	89a3      	ldrh	r3, [r4, #12]
 80147fe:	d106      	bne.n	801480e <__sflush_r+0x66>
 8014800:	6829      	ldr	r1, [r5, #0]
 8014802:	291d      	cmp	r1, #29
 8014804:	d82c      	bhi.n	8014860 <__sflush_r+0xb8>
 8014806:	4a2a      	ldr	r2, [pc, #168]	; (80148b0 <__sflush_r+0x108>)
 8014808:	40ca      	lsrs	r2, r1
 801480a:	07d6      	lsls	r6, r2, #31
 801480c:	d528      	bpl.n	8014860 <__sflush_r+0xb8>
 801480e:	2200      	movs	r2, #0
 8014810:	6062      	str	r2, [r4, #4]
 8014812:	04d9      	lsls	r1, r3, #19
 8014814:	6922      	ldr	r2, [r4, #16]
 8014816:	6022      	str	r2, [r4, #0]
 8014818:	d504      	bpl.n	8014824 <__sflush_r+0x7c>
 801481a:	1c42      	adds	r2, r0, #1
 801481c:	d101      	bne.n	8014822 <__sflush_r+0x7a>
 801481e:	682b      	ldr	r3, [r5, #0]
 8014820:	b903      	cbnz	r3, 8014824 <__sflush_r+0x7c>
 8014822:	6560      	str	r0, [r4, #84]	; 0x54
 8014824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014826:	602f      	str	r7, [r5, #0]
 8014828:	2900      	cmp	r1, #0
 801482a:	d0ca      	beq.n	80147c2 <__sflush_r+0x1a>
 801482c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014830:	4299      	cmp	r1, r3
 8014832:	d002      	beq.n	801483a <__sflush_r+0x92>
 8014834:	4628      	mov	r0, r5
 8014836:	f7ff fd79 	bl	801432c <_free_r>
 801483a:	2000      	movs	r0, #0
 801483c:	6360      	str	r0, [r4, #52]	; 0x34
 801483e:	e7c1      	b.n	80147c4 <__sflush_r+0x1c>
 8014840:	6a21      	ldr	r1, [r4, #32]
 8014842:	2301      	movs	r3, #1
 8014844:	4628      	mov	r0, r5
 8014846:	47b0      	blx	r6
 8014848:	1c41      	adds	r1, r0, #1
 801484a:	d1c7      	bne.n	80147dc <__sflush_r+0x34>
 801484c:	682b      	ldr	r3, [r5, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d0c4      	beq.n	80147dc <__sflush_r+0x34>
 8014852:	2b1d      	cmp	r3, #29
 8014854:	d001      	beq.n	801485a <__sflush_r+0xb2>
 8014856:	2b16      	cmp	r3, #22
 8014858:	d101      	bne.n	801485e <__sflush_r+0xb6>
 801485a:	602f      	str	r7, [r5, #0]
 801485c:	e7b1      	b.n	80147c2 <__sflush_r+0x1a>
 801485e:	89a3      	ldrh	r3, [r4, #12]
 8014860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014864:	81a3      	strh	r3, [r4, #12]
 8014866:	e7ad      	b.n	80147c4 <__sflush_r+0x1c>
 8014868:	690f      	ldr	r7, [r1, #16]
 801486a:	2f00      	cmp	r7, #0
 801486c:	d0a9      	beq.n	80147c2 <__sflush_r+0x1a>
 801486e:	0793      	lsls	r3, r2, #30
 8014870:	680e      	ldr	r6, [r1, #0]
 8014872:	bf08      	it	eq
 8014874:	694b      	ldreq	r3, [r1, #20]
 8014876:	600f      	str	r7, [r1, #0]
 8014878:	bf18      	it	ne
 801487a:	2300      	movne	r3, #0
 801487c:	eba6 0807 	sub.w	r8, r6, r7
 8014880:	608b      	str	r3, [r1, #8]
 8014882:	f1b8 0f00 	cmp.w	r8, #0
 8014886:	dd9c      	ble.n	80147c2 <__sflush_r+0x1a>
 8014888:	6a21      	ldr	r1, [r4, #32]
 801488a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801488c:	4643      	mov	r3, r8
 801488e:	463a      	mov	r2, r7
 8014890:	4628      	mov	r0, r5
 8014892:	47b0      	blx	r6
 8014894:	2800      	cmp	r0, #0
 8014896:	dc06      	bgt.n	80148a6 <__sflush_r+0xfe>
 8014898:	89a3      	ldrh	r3, [r4, #12]
 801489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801489e:	81a3      	strh	r3, [r4, #12]
 80148a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148a4:	e78e      	b.n	80147c4 <__sflush_r+0x1c>
 80148a6:	4407      	add	r7, r0
 80148a8:	eba8 0800 	sub.w	r8, r8, r0
 80148ac:	e7e9      	b.n	8014882 <__sflush_r+0xda>
 80148ae:	bf00      	nop
 80148b0:	20400001 	.word	0x20400001

080148b4 <_fflush_r>:
 80148b4:	b538      	push	{r3, r4, r5, lr}
 80148b6:	690b      	ldr	r3, [r1, #16]
 80148b8:	4605      	mov	r5, r0
 80148ba:	460c      	mov	r4, r1
 80148bc:	b913      	cbnz	r3, 80148c4 <_fflush_r+0x10>
 80148be:	2500      	movs	r5, #0
 80148c0:	4628      	mov	r0, r5
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
 80148c4:	b118      	cbz	r0, 80148ce <_fflush_r+0x1a>
 80148c6:	6983      	ldr	r3, [r0, #24]
 80148c8:	b90b      	cbnz	r3, 80148ce <_fflush_r+0x1a>
 80148ca:	f000 f887 	bl	80149dc <__sinit>
 80148ce:	4b14      	ldr	r3, [pc, #80]	; (8014920 <_fflush_r+0x6c>)
 80148d0:	429c      	cmp	r4, r3
 80148d2:	d11b      	bne.n	801490c <_fflush_r+0x58>
 80148d4:	686c      	ldr	r4, [r5, #4]
 80148d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d0ef      	beq.n	80148be <_fflush_r+0xa>
 80148de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80148e0:	07d0      	lsls	r0, r2, #31
 80148e2:	d404      	bmi.n	80148ee <_fflush_r+0x3a>
 80148e4:	0599      	lsls	r1, r3, #22
 80148e6:	d402      	bmi.n	80148ee <_fflush_r+0x3a>
 80148e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148ea:	f000 f915 	bl	8014b18 <__retarget_lock_acquire_recursive>
 80148ee:	4628      	mov	r0, r5
 80148f0:	4621      	mov	r1, r4
 80148f2:	f7ff ff59 	bl	80147a8 <__sflush_r>
 80148f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80148f8:	07da      	lsls	r2, r3, #31
 80148fa:	4605      	mov	r5, r0
 80148fc:	d4e0      	bmi.n	80148c0 <_fflush_r+0xc>
 80148fe:	89a3      	ldrh	r3, [r4, #12]
 8014900:	059b      	lsls	r3, r3, #22
 8014902:	d4dd      	bmi.n	80148c0 <_fflush_r+0xc>
 8014904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014906:	f000 f908 	bl	8014b1a <__retarget_lock_release_recursive>
 801490a:	e7d9      	b.n	80148c0 <_fflush_r+0xc>
 801490c:	4b05      	ldr	r3, [pc, #20]	; (8014924 <_fflush_r+0x70>)
 801490e:	429c      	cmp	r4, r3
 8014910:	d101      	bne.n	8014916 <_fflush_r+0x62>
 8014912:	68ac      	ldr	r4, [r5, #8]
 8014914:	e7df      	b.n	80148d6 <_fflush_r+0x22>
 8014916:	4b04      	ldr	r3, [pc, #16]	; (8014928 <_fflush_r+0x74>)
 8014918:	429c      	cmp	r4, r3
 801491a:	bf08      	it	eq
 801491c:	68ec      	ldreq	r4, [r5, #12]
 801491e:	e7da      	b.n	80148d6 <_fflush_r+0x22>
 8014920:	08015688 	.word	0x08015688
 8014924:	080156a8 	.word	0x080156a8
 8014928:	08015668 	.word	0x08015668

0801492c <std>:
 801492c:	2300      	movs	r3, #0
 801492e:	b510      	push	{r4, lr}
 8014930:	4604      	mov	r4, r0
 8014932:	e9c0 3300 	strd	r3, r3, [r0]
 8014936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801493a:	6083      	str	r3, [r0, #8]
 801493c:	8181      	strh	r1, [r0, #12]
 801493e:	6643      	str	r3, [r0, #100]	; 0x64
 8014940:	81c2      	strh	r2, [r0, #14]
 8014942:	6183      	str	r3, [r0, #24]
 8014944:	4619      	mov	r1, r3
 8014946:	2208      	movs	r2, #8
 8014948:	305c      	adds	r0, #92	; 0x5c
 801494a:	f7ff fce7 	bl	801431c <memset>
 801494e:	4b05      	ldr	r3, [pc, #20]	; (8014964 <std+0x38>)
 8014950:	6263      	str	r3, [r4, #36]	; 0x24
 8014952:	4b05      	ldr	r3, [pc, #20]	; (8014968 <std+0x3c>)
 8014954:	62a3      	str	r3, [r4, #40]	; 0x28
 8014956:	4b05      	ldr	r3, [pc, #20]	; (801496c <std+0x40>)
 8014958:	62e3      	str	r3, [r4, #44]	; 0x2c
 801495a:	4b05      	ldr	r3, [pc, #20]	; (8014970 <std+0x44>)
 801495c:	6224      	str	r4, [r4, #32]
 801495e:	6323      	str	r3, [r4, #48]	; 0x30
 8014960:	bd10      	pop	{r4, pc}
 8014962:	bf00      	nop
 8014964:	080151dd 	.word	0x080151dd
 8014968:	080151ff 	.word	0x080151ff
 801496c:	08015237 	.word	0x08015237
 8014970:	0801525b 	.word	0x0801525b

08014974 <_cleanup_r>:
 8014974:	4901      	ldr	r1, [pc, #4]	; (801497c <_cleanup_r+0x8>)
 8014976:	f000 b8af 	b.w	8014ad8 <_fwalk_reent>
 801497a:	bf00      	nop
 801497c:	080148b5 	.word	0x080148b5

08014980 <__sfmoreglue>:
 8014980:	b570      	push	{r4, r5, r6, lr}
 8014982:	2268      	movs	r2, #104	; 0x68
 8014984:	1e4d      	subs	r5, r1, #1
 8014986:	4355      	muls	r5, r2
 8014988:	460e      	mov	r6, r1
 801498a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801498e:	f7ff fd39 	bl	8014404 <_malloc_r>
 8014992:	4604      	mov	r4, r0
 8014994:	b140      	cbz	r0, 80149a8 <__sfmoreglue+0x28>
 8014996:	2100      	movs	r1, #0
 8014998:	e9c0 1600 	strd	r1, r6, [r0]
 801499c:	300c      	adds	r0, #12
 801499e:	60a0      	str	r0, [r4, #8]
 80149a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80149a4:	f7ff fcba 	bl	801431c <memset>
 80149a8:	4620      	mov	r0, r4
 80149aa:	bd70      	pop	{r4, r5, r6, pc}

080149ac <__sfp_lock_acquire>:
 80149ac:	4801      	ldr	r0, [pc, #4]	; (80149b4 <__sfp_lock_acquire+0x8>)
 80149ae:	f000 b8b3 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 80149b2:	bf00      	nop
 80149b4:	240050d5 	.word	0x240050d5

080149b8 <__sfp_lock_release>:
 80149b8:	4801      	ldr	r0, [pc, #4]	; (80149c0 <__sfp_lock_release+0x8>)
 80149ba:	f000 b8ae 	b.w	8014b1a <__retarget_lock_release_recursive>
 80149be:	bf00      	nop
 80149c0:	240050d5 	.word	0x240050d5

080149c4 <__sinit_lock_acquire>:
 80149c4:	4801      	ldr	r0, [pc, #4]	; (80149cc <__sinit_lock_acquire+0x8>)
 80149c6:	f000 b8a7 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 80149ca:	bf00      	nop
 80149cc:	240050d6 	.word	0x240050d6

080149d0 <__sinit_lock_release>:
 80149d0:	4801      	ldr	r0, [pc, #4]	; (80149d8 <__sinit_lock_release+0x8>)
 80149d2:	f000 b8a2 	b.w	8014b1a <__retarget_lock_release_recursive>
 80149d6:	bf00      	nop
 80149d8:	240050d6 	.word	0x240050d6

080149dc <__sinit>:
 80149dc:	b510      	push	{r4, lr}
 80149de:	4604      	mov	r4, r0
 80149e0:	f7ff fff0 	bl	80149c4 <__sinit_lock_acquire>
 80149e4:	69a3      	ldr	r3, [r4, #24]
 80149e6:	b11b      	cbz	r3, 80149f0 <__sinit+0x14>
 80149e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149ec:	f7ff bff0 	b.w	80149d0 <__sinit_lock_release>
 80149f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80149f4:	6523      	str	r3, [r4, #80]	; 0x50
 80149f6:	4b13      	ldr	r3, [pc, #76]	; (8014a44 <__sinit+0x68>)
 80149f8:	4a13      	ldr	r2, [pc, #76]	; (8014a48 <__sinit+0x6c>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80149fe:	42a3      	cmp	r3, r4
 8014a00:	bf04      	itt	eq
 8014a02:	2301      	moveq	r3, #1
 8014a04:	61a3      	streq	r3, [r4, #24]
 8014a06:	4620      	mov	r0, r4
 8014a08:	f000 f820 	bl	8014a4c <__sfp>
 8014a0c:	6060      	str	r0, [r4, #4]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f000 f81c 	bl	8014a4c <__sfp>
 8014a14:	60a0      	str	r0, [r4, #8]
 8014a16:	4620      	mov	r0, r4
 8014a18:	f000 f818 	bl	8014a4c <__sfp>
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	60e0      	str	r0, [r4, #12]
 8014a20:	2104      	movs	r1, #4
 8014a22:	6860      	ldr	r0, [r4, #4]
 8014a24:	f7ff ff82 	bl	801492c <std>
 8014a28:	68a0      	ldr	r0, [r4, #8]
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	2109      	movs	r1, #9
 8014a2e:	f7ff ff7d 	bl	801492c <std>
 8014a32:	68e0      	ldr	r0, [r4, #12]
 8014a34:	2202      	movs	r2, #2
 8014a36:	2112      	movs	r1, #18
 8014a38:	f7ff ff78 	bl	801492c <std>
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	61a3      	str	r3, [r4, #24]
 8014a40:	e7d2      	b.n	80149e8 <__sinit+0xc>
 8014a42:	bf00      	nop
 8014a44:	08015664 	.word	0x08015664
 8014a48:	08014975 	.word	0x08014975

08014a4c <__sfp>:
 8014a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4e:	4607      	mov	r7, r0
 8014a50:	f7ff ffac 	bl	80149ac <__sfp_lock_acquire>
 8014a54:	4b1e      	ldr	r3, [pc, #120]	; (8014ad0 <__sfp+0x84>)
 8014a56:	681e      	ldr	r6, [r3, #0]
 8014a58:	69b3      	ldr	r3, [r6, #24]
 8014a5a:	b913      	cbnz	r3, 8014a62 <__sfp+0x16>
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7ff ffbd 	bl	80149dc <__sinit>
 8014a62:	3648      	adds	r6, #72	; 0x48
 8014a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a68:	3b01      	subs	r3, #1
 8014a6a:	d503      	bpl.n	8014a74 <__sfp+0x28>
 8014a6c:	6833      	ldr	r3, [r6, #0]
 8014a6e:	b30b      	cbz	r3, 8014ab4 <__sfp+0x68>
 8014a70:	6836      	ldr	r6, [r6, #0]
 8014a72:	e7f7      	b.n	8014a64 <__sfp+0x18>
 8014a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a78:	b9d5      	cbnz	r5, 8014ab0 <__sfp+0x64>
 8014a7a:	4b16      	ldr	r3, [pc, #88]	; (8014ad4 <__sfp+0x88>)
 8014a7c:	60e3      	str	r3, [r4, #12]
 8014a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a82:	6665      	str	r5, [r4, #100]	; 0x64
 8014a84:	f000 f847 	bl	8014b16 <__retarget_lock_init_recursive>
 8014a88:	f7ff ff96 	bl	80149b8 <__sfp_lock_release>
 8014a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a94:	6025      	str	r5, [r4, #0]
 8014a96:	61a5      	str	r5, [r4, #24]
 8014a98:	2208      	movs	r2, #8
 8014a9a:	4629      	mov	r1, r5
 8014a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014aa0:	f7ff fc3c 	bl	801431c <memset>
 8014aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014aac:	4620      	mov	r0, r4
 8014aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ab0:	3468      	adds	r4, #104	; 0x68
 8014ab2:	e7d9      	b.n	8014a68 <__sfp+0x1c>
 8014ab4:	2104      	movs	r1, #4
 8014ab6:	4638      	mov	r0, r7
 8014ab8:	f7ff ff62 	bl	8014980 <__sfmoreglue>
 8014abc:	4604      	mov	r4, r0
 8014abe:	6030      	str	r0, [r6, #0]
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d1d5      	bne.n	8014a70 <__sfp+0x24>
 8014ac4:	f7ff ff78 	bl	80149b8 <__sfp_lock_release>
 8014ac8:	230c      	movs	r3, #12
 8014aca:	603b      	str	r3, [r7, #0]
 8014acc:	e7ee      	b.n	8014aac <__sfp+0x60>
 8014ace:	bf00      	nop
 8014ad0:	08015664 	.word	0x08015664
 8014ad4:	ffff0001 	.word	0xffff0001

08014ad8 <_fwalk_reent>:
 8014ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014adc:	4606      	mov	r6, r0
 8014ade:	4688      	mov	r8, r1
 8014ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ae4:	2700      	movs	r7, #0
 8014ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014aea:	f1b9 0901 	subs.w	r9, r9, #1
 8014aee:	d505      	bpl.n	8014afc <_fwalk_reent+0x24>
 8014af0:	6824      	ldr	r4, [r4, #0]
 8014af2:	2c00      	cmp	r4, #0
 8014af4:	d1f7      	bne.n	8014ae6 <_fwalk_reent+0xe>
 8014af6:	4638      	mov	r0, r7
 8014af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afc:	89ab      	ldrh	r3, [r5, #12]
 8014afe:	2b01      	cmp	r3, #1
 8014b00:	d907      	bls.n	8014b12 <_fwalk_reent+0x3a>
 8014b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b06:	3301      	adds	r3, #1
 8014b08:	d003      	beq.n	8014b12 <_fwalk_reent+0x3a>
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	47c0      	blx	r8
 8014b10:	4307      	orrs	r7, r0
 8014b12:	3568      	adds	r5, #104	; 0x68
 8014b14:	e7e9      	b.n	8014aea <_fwalk_reent+0x12>

08014b16 <__retarget_lock_init_recursive>:
 8014b16:	4770      	bx	lr

08014b18 <__retarget_lock_acquire_recursive>:
 8014b18:	4770      	bx	lr

08014b1a <__retarget_lock_release_recursive>:
 8014b1a:	4770      	bx	lr

08014b1c <__swhatbuf_r>:
 8014b1c:	b570      	push	{r4, r5, r6, lr}
 8014b1e:	460e      	mov	r6, r1
 8014b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b24:	2900      	cmp	r1, #0
 8014b26:	b096      	sub	sp, #88	; 0x58
 8014b28:	4614      	mov	r4, r2
 8014b2a:	461d      	mov	r5, r3
 8014b2c:	da08      	bge.n	8014b40 <__swhatbuf_r+0x24>
 8014b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	602a      	str	r2, [r5, #0]
 8014b36:	061a      	lsls	r2, r3, #24
 8014b38:	d410      	bmi.n	8014b5c <__swhatbuf_r+0x40>
 8014b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b3e:	e00e      	b.n	8014b5e <__swhatbuf_r+0x42>
 8014b40:	466a      	mov	r2, sp
 8014b42:	f000 fbb1 	bl	80152a8 <_fstat_r>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	dbf1      	blt.n	8014b2e <__swhatbuf_r+0x12>
 8014b4a:	9a01      	ldr	r2, [sp, #4]
 8014b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b54:	425a      	negs	r2, r3
 8014b56:	415a      	adcs	r2, r3
 8014b58:	602a      	str	r2, [r5, #0]
 8014b5a:	e7ee      	b.n	8014b3a <__swhatbuf_r+0x1e>
 8014b5c:	2340      	movs	r3, #64	; 0x40
 8014b5e:	2000      	movs	r0, #0
 8014b60:	6023      	str	r3, [r4, #0]
 8014b62:	b016      	add	sp, #88	; 0x58
 8014b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08014b68 <__smakebuf_r>:
 8014b68:	898b      	ldrh	r3, [r1, #12]
 8014b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b6c:	079d      	lsls	r5, r3, #30
 8014b6e:	4606      	mov	r6, r0
 8014b70:	460c      	mov	r4, r1
 8014b72:	d507      	bpl.n	8014b84 <__smakebuf_r+0x1c>
 8014b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	6123      	str	r3, [r4, #16]
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	6163      	str	r3, [r4, #20]
 8014b80:	b002      	add	sp, #8
 8014b82:	bd70      	pop	{r4, r5, r6, pc}
 8014b84:	ab01      	add	r3, sp, #4
 8014b86:	466a      	mov	r2, sp
 8014b88:	f7ff ffc8 	bl	8014b1c <__swhatbuf_r>
 8014b8c:	9900      	ldr	r1, [sp, #0]
 8014b8e:	4605      	mov	r5, r0
 8014b90:	4630      	mov	r0, r6
 8014b92:	f7ff fc37 	bl	8014404 <_malloc_r>
 8014b96:	b948      	cbnz	r0, 8014bac <__smakebuf_r+0x44>
 8014b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b9c:	059a      	lsls	r2, r3, #22
 8014b9e:	d4ef      	bmi.n	8014b80 <__smakebuf_r+0x18>
 8014ba0:	f023 0303 	bic.w	r3, r3, #3
 8014ba4:	f043 0302 	orr.w	r3, r3, #2
 8014ba8:	81a3      	strh	r3, [r4, #12]
 8014baa:	e7e3      	b.n	8014b74 <__smakebuf_r+0xc>
 8014bac:	4b0d      	ldr	r3, [pc, #52]	; (8014be4 <__smakebuf_r+0x7c>)
 8014bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bb0:	89a3      	ldrh	r3, [r4, #12]
 8014bb2:	6020      	str	r0, [r4, #0]
 8014bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bb8:	81a3      	strh	r3, [r4, #12]
 8014bba:	9b00      	ldr	r3, [sp, #0]
 8014bbc:	6163      	str	r3, [r4, #20]
 8014bbe:	9b01      	ldr	r3, [sp, #4]
 8014bc0:	6120      	str	r0, [r4, #16]
 8014bc2:	b15b      	cbz	r3, 8014bdc <__smakebuf_r+0x74>
 8014bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f000 fb7f 	bl	80152cc <_isatty_r>
 8014bce:	b128      	cbz	r0, 8014bdc <__smakebuf_r+0x74>
 8014bd0:	89a3      	ldrh	r3, [r4, #12]
 8014bd2:	f023 0303 	bic.w	r3, r3, #3
 8014bd6:	f043 0301 	orr.w	r3, r3, #1
 8014bda:	81a3      	strh	r3, [r4, #12]
 8014bdc:	89a0      	ldrh	r0, [r4, #12]
 8014bde:	4305      	orrs	r5, r0
 8014be0:	81a5      	strh	r5, [r4, #12]
 8014be2:	e7cd      	b.n	8014b80 <__smakebuf_r+0x18>
 8014be4:	08014975 	.word	0x08014975

08014be8 <__malloc_lock>:
 8014be8:	4801      	ldr	r0, [pc, #4]	; (8014bf0 <__malloc_lock+0x8>)
 8014bea:	f7ff bf95 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 8014bee:	bf00      	nop
 8014bf0:	240050d4 	.word	0x240050d4

08014bf4 <__malloc_unlock>:
 8014bf4:	4801      	ldr	r0, [pc, #4]	; (8014bfc <__malloc_unlock+0x8>)
 8014bf6:	f7ff bf90 	b.w	8014b1a <__retarget_lock_release_recursive>
 8014bfa:	bf00      	nop
 8014bfc:	240050d4 	.word	0x240050d4

08014c00 <__sfputc_r>:
 8014c00:	6893      	ldr	r3, [r2, #8]
 8014c02:	3b01      	subs	r3, #1
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	b410      	push	{r4}
 8014c08:	6093      	str	r3, [r2, #8]
 8014c0a:	da08      	bge.n	8014c1e <__sfputc_r+0x1e>
 8014c0c:	6994      	ldr	r4, [r2, #24]
 8014c0e:	42a3      	cmp	r3, r4
 8014c10:	db01      	blt.n	8014c16 <__sfputc_r+0x16>
 8014c12:	290a      	cmp	r1, #10
 8014c14:	d103      	bne.n	8014c1e <__sfputc_r+0x1e>
 8014c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c1a:	f7ff bd05 	b.w	8014628 <__swbuf_r>
 8014c1e:	6813      	ldr	r3, [r2, #0]
 8014c20:	1c58      	adds	r0, r3, #1
 8014c22:	6010      	str	r0, [r2, #0]
 8014c24:	7019      	strb	r1, [r3, #0]
 8014c26:	4608      	mov	r0, r1
 8014c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c2c:	4770      	bx	lr

08014c2e <__sfputs_r>:
 8014c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c30:	4606      	mov	r6, r0
 8014c32:	460f      	mov	r7, r1
 8014c34:	4614      	mov	r4, r2
 8014c36:	18d5      	adds	r5, r2, r3
 8014c38:	42ac      	cmp	r4, r5
 8014c3a:	d101      	bne.n	8014c40 <__sfputs_r+0x12>
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	e007      	b.n	8014c50 <__sfputs_r+0x22>
 8014c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c44:	463a      	mov	r2, r7
 8014c46:	4630      	mov	r0, r6
 8014c48:	f7ff ffda 	bl	8014c00 <__sfputc_r>
 8014c4c:	1c43      	adds	r3, r0, #1
 8014c4e:	d1f3      	bne.n	8014c38 <__sfputs_r+0xa>
 8014c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c54 <_vfiprintf_r>:
 8014c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c58:	460d      	mov	r5, r1
 8014c5a:	b09d      	sub	sp, #116	; 0x74
 8014c5c:	4614      	mov	r4, r2
 8014c5e:	4698      	mov	r8, r3
 8014c60:	4606      	mov	r6, r0
 8014c62:	b118      	cbz	r0, 8014c6c <_vfiprintf_r+0x18>
 8014c64:	6983      	ldr	r3, [r0, #24]
 8014c66:	b90b      	cbnz	r3, 8014c6c <_vfiprintf_r+0x18>
 8014c68:	f7ff feb8 	bl	80149dc <__sinit>
 8014c6c:	4b89      	ldr	r3, [pc, #548]	; (8014e94 <_vfiprintf_r+0x240>)
 8014c6e:	429d      	cmp	r5, r3
 8014c70:	d11b      	bne.n	8014caa <_vfiprintf_r+0x56>
 8014c72:	6875      	ldr	r5, [r6, #4]
 8014c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c76:	07d9      	lsls	r1, r3, #31
 8014c78:	d405      	bmi.n	8014c86 <_vfiprintf_r+0x32>
 8014c7a:	89ab      	ldrh	r3, [r5, #12]
 8014c7c:	059a      	lsls	r2, r3, #22
 8014c7e:	d402      	bmi.n	8014c86 <_vfiprintf_r+0x32>
 8014c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c82:	f7ff ff49 	bl	8014b18 <__retarget_lock_acquire_recursive>
 8014c86:	89ab      	ldrh	r3, [r5, #12]
 8014c88:	071b      	lsls	r3, r3, #28
 8014c8a:	d501      	bpl.n	8014c90 <_vfiprintf_r+0x3c>
 8014c8c:	692b      	ldr	r3, [r5, #16]
 8014c8e:	b9eb      	cbnz	r3, 8014ccc <_vfiprintf_r+0x78>
 8014c90:	4629      	mov	r1, r5
 8014c92:	4630      	mov	r0, r6
 8014c94:	f7ff fd1a 	bl	80146cc <__swsetup_r>
 8014c98:	b1c0      	cbz	r0, 8014ccc <_vfiprintf_r+0x78>
 8014c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c9c:	07dc      	lsls	r4, r3, #31
 8014c9e:	d50e      	bpl.n	8014cbe <_vfiprintf_r+0x6a>
 8014ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ca4:	b01d      	add	sp, #116	; 0x74
 8014ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014caa:	4b7b      	ldr	r3, [pc, #492]	; (8014e98 <_vfiprintf_r+0x244>)
 8014cac:	429d      	cmp	r5, r3
 8014cae:	d101      	bne.n	8014cb4 <_vfiprintf_r+0x60>
 8014cb0:	68b5      	ldr	r5, [r6, #8]
 8014cb2:	e7df      	b.n	8014c74 <_vfiprintf_r+0x20>
 8014cb4:	4b79      	ldr	r3, [pc, #484]	; (8014e9c <_vfiprintf_r+0x248>)
 8014cb6:	429d      	cmp	r5, r3
 8014cb8:	bf08      	it	eq
 8014cba:	68f5      	ldreq	r5, [r6, #12]
 8014cbc:	e7da      	b.n	8014c74 <_vfiprintf_r+0x20>
 8014cbe:	89ab      	ldrh	r3, [r5, #12]
 8014cc0:	0598      	lsls	r0, r3, #22
 8014cc2:	d4ed      	bmi.n	8014ca0 <_vfiprintf_r+0x4c>
 8014cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cc6:	f7ff ff28 	bl	8014b1a <__retarget_lock_release_recursive>
 8014cca:	e7e9      	b.n	8014ca0 <_vfiprintf_r+0x4c>
 8014ccc:	2300      	movs	r3, #0
 8014cce:	9309      	str	r3, [sp, #36]	; 0x24
 8014cd0:	2320      	movs	r3, #32
 8014cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cda:	2330      	movs	r3, #48	; 0x30
 8014cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ea0 <_vfiprintf_r+0x24c>
 8014ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ce4:	f04f 0901 	mov.w	r9, #1
 8014ce8:	4623      	mov	r3, r4
 8014cea:	469a      	mov	sl, r3
 8014cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cf0:	b10a      	cbz	r2, 8014cf6 <_vfiprintf_r+0xa2>
 8014cf2:	2a25      	cmp	r2, #37	; 0x25
 8014cf4:	d1f9      	bne.n	8014cea <_vfiprintf_r+0x96>
 8014cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8014cfa:	d00b      	beq.n	8014d14 <_vfiprintf_r+0xc0>
 8014cfc:	465b      	mov	r3, fp
 8014cfe:	4622      	mov	r2, r4
 8014d00:	4629      	mov	r1, r5
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7ff ff93 	bl	8014c2e <__sfputs_r>
 8014d08:	3001      	adds	r0, #1
 8014d0a:	f000 80aa 	beq.w	8014e62 <_vfiprintf_r+0x20e>
 8014d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d10:	445a      	add	r2, fp
 8014d12:	9209      	str	r2, [sp, #36]	; 0x24
 8014d14:	f89a 3000 	ldrb.w	r3, [sl]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f000 80a2 	beq.w	8014e62 <_vfiprintf_r+0x20e>
 8014d1e:	2300      	movs	r3, #0
 8014d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d28:	f10a 0a01 	add.w	sl, sl, #1
 8014d2c:	9304      	str	r3, [sp, #16]
 8014d2e:	9307      	str	r3, [sp, #28]
 8014d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d34:	931a      	str	r3, [sp, #104]	; 0x68
 8014d36:	4654      	mov	r4, sl
 8014d38:	2205      	movs	r2, #5
 8014d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d3e:	4858      	ldr	r0, [pc, #352]	; (8014ea0 <_vfiprintf_r+0x24c>)
 8014d40:	f7eb face 	bl	80002e0 <memchr>
 8014d44:	9a04      	ldr	r2, [sp, #16]
 8014d46:	b9d8      	cbnz	r0, 8014d80 <_vfiprintf_r+0x12c>
 8014d48:	06d1      	lsls	r1, r2, #27
 8014d4a:	bf44      	itt	mi
 8014d4c:	2320      	movmi	r3, #32
 8014d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d52:	0713      	lsls	r3, r2, #28
 8014d54:	bf44      	itt	mi
 8014d56:	232b      	movmi	r3, #43	; 0x2b
 8014d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d60:	2b2a      	cmp	r3, #42	; 0x2a
 8014d62:	d015      	beq.n	8014d90 <_vfiprintf_r+0x13c>
 8014d64:	9a07      	ldr	r2, [sp, #28]
 8014d66:	4654      	mov	r4, sl
 8014d68:	2000      	movs	r0, #0
 8014d6a:	f04f 0c0a 	mov.w	ip, #10
 8014d6e:	4621      	mov	r1, r4
 8014d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d74:	3b30      	subs	r3, #48	; 0x30
 8014d76:	2b09      	cmp	r3, #9
 8014d78:	d94e      	bls.n	8014e18 <_vfiprintf_r+0x1c4>
 8014d7a:	b1b0      	cbz	r0, 8014daa <_vfiprintf_r+0x156>
 8014d7c:	9207      	str	r2, [sp, #28]
 8014d7e:	e014      	b.n	8014daa <_vfiprintf_r+0x156>
 8014d80:	eba0 0308 	sub.w	r3, r0, r8
 8014d84:	fa09 f303 	lsl.w	r3, r9, r3
 8014d88:	4313      	orrs	r3, r2
 8014d8a:	9304      	str	r3, [sp, #16]
 8014d8c:	46a2      	mov	sl, r4
 8014d8e:	e7d2      	b.n	8014d36 <_vfiprintf_r+0xe2>
 8014d90:	9b03      	ldr	r3, [sp, #12]
 8014d92:	1d19      	adds	r1, r3, #4
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	9103      	str	r1, [sp, #12]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	bfbb      	ittet	lt
 8014d9c:	425b      	neglt	r3, r3
 8014d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8014da2:	9307      	strge	r3, [sp, #28]
 8014da4:	9307      	strlt	r3, [sp, #28]
 8014da6:	bfb8      	it	lt
 8014da8:	9204      	strlt	r2, [sp, #16]
 8014daa:	7823      	ldrb	r3, [r4, #0]
 8014dac:	2b2e      	cmp	r3, #46	; 0x2e
 8014dae:	d10c      	bne.n	8014dca <_vfiprintf_r+0x176>
 8014db0:	7863      	ldrb	r3, [r4, #1]
 8014db2:	2b2a      	cmp	r3, #42	; 0x2a
 8014db4:	d135      	bne.n	8014e22 <_vfiprintf_r+0x1ce>
 8014db6:	9b03      	ldr	r3, [sp, #12]
 8014db8:	1d1a      	adds	r2, r3, #4
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	9203      	str	r2, [sp, #12]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	bfb8      	it	lt
 8014dc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014dc6:	3402      	adds	r4, #2
 8014dc8:	9305      	str	r3, [sp, #20]
 8014dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014eb0 <_vfiprintf_r+0x25c>
 8014dce:	7821      	ldrb	r1, [r4, #0]
 8014dd0:	2203      	movs	r2, #3
 8014dd2:	4650      	mov	r0, sl
 8014dd4:	f7eb fa84 	bl	80002e0 <memchr>
 8014dd8:	b140      	cbz	r0, 8014dec <_vfiprintf_r+0x198>
 8014dda:	2340      	movs	r3, #64	; 0x40
 8014ddc:	eba0 000a 	sub.w	r0, r0, sl
 8014de0:	fa03 f000 	lsl.w	r0, r3, r0
 8014de4:	9b04      	ldr	r3, [sp, #16]
 8014de6:	4303      	orrs	r3, r0
 8014de8:	3401      	adds	r4, #1
 8014dea:	9304      	str	r3, [sp, #16]
 8014dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014df0:	482c      	ldr	r0, [pc, #176]	; (8014ea4 <_vfiprintf_r+0x250>)
 8014df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014df6:	2206      	movs	r2, #6
 8014df8:	f7eb fa72 	bl	80002e0 <memchr>
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d03f      	beq.n	8014e80 <_vfiprintf_r+0x22c>
 8014e00:	4b29      	ldr	r3, [pc, #164]	; (8014ea8 <_vfiprintf_r+0x254>)
 8014e02:	bb1b      	cbnz	r3, 8014e4c <_vfiprintf_r+0x1f8>
 8014e04:	9b03      	ldr	r3, [sp, #12]
 8014e06:	3307      	adds	r3, #7
 8014e08:	f023 0307 	bic.w	r3, r3, #7
 8014e0c:	3308      	adds	r3, #8
 8014e0e:	9303      	str	r3, [sp, #12]
 8014e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e12:	443b      	add	r3, r7
 8014e14:	9309      	str	r3, [sp, #36]	; 0x24
 8014e16:	e767      	b.n	8014ce8 <_vfiprintf_r+0x94>
 8014e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e1c:	460c      	mov	r4, r1
 8014e1e:	2001      	movs	r0, #1
 8014e20:	e7a5      	b.n	8014d6e <_vfiprintf_r+0x11a>
 8014e22:	2300      	movs	r3, #0
 8014e24:	3401      	adds	r4, #1
 8014e26:	9305      	str	r3, [sp, #20]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	f04f 0c0a 	mov.w	ip, #10
 8014e2e:	4620      	mov	r0, r4
 8014e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e34:	3a30      	subs	r2, #48	; 0x30
 8014e36:	2a09      	cmp	r2, #9
 8014e38:	d903      	bls.n	8014e42 <_vfiprintf_r+0x1ee>
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d0c5      	beq.n	8014dca <_vfiprintf_r+0x176>
 8014e3e:	9105      	str	r1, [sp, #20]
 8014e40:	e7c3      	b.n	8014dca <_vfiprintf_r+0x176>
 8014e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e46:	4604      	mov	r4, r0
 8014e48:	2301      	movs	r3, #1
 8014e4a:	e7f0      	b.n	8014e2e <_vfiprintf_r+0x1da>
 8014e4c:	ab03      	add	r3, sp, #12
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	462a      	mov	r2, r5
 8014e52:	4b16      	ldr	r3, [pc, #88]	; (8014eac <_vfiprintf_r+0x258>)
 8014e54:	a904      	add	r1, sp, #16
 8014e56:	4630      	mov	r0, r6
 8014e58:	f3af 8000 	nop.w
 8014e5c:	4607      	mov	r7, r0
 8014e5e:	1c78      	adds	r0, r7, #1
 8014e60:	d1d6      	bne.n	8014e10 <_vfiprintf_r+0x1bc>
 8014e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e64:	07d9      	lsls	r1, r3, #31
 8014e66:	d405      	bmi.n	8014e74 <_vfiprintf_r+0x220>
 8014e68:	89ab      	ldrh	r3, [r5, #12]
 8014e6a:	059a      	lsls	r2, r3, #22
 8014e6c:	d402      	bmi.n	8014e74 <_vfiprintf_r+0x220>
 8014e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e70:	f7ff fe53 	bl	8014b1a <__retarget_lock_release_recursive>
 8014e74:	89ab      	ldrh	r3, [r5, #12]
 8014e76:	065b      	lsls	r3, r3, #25
 8014e78:	f53f af12 	bmi.w	8014ca0 <_vfiprintf_r+0x4c>
 8014e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e7e:	e711      	b.n	8014ca4 <_vfiprintf_r+0x50>
 8014e80:	ab03      	add	r3, sp, #12
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	462a      	mov	r2, r5
 8014e86:	4b09      	ldr	r3, [pc, #36]	; (8014eac <_vfiprintf_r+0x258>)
 8014e88:	a904      	add	r1, sp, #16
 8014e8a:	4630      	mov	r0, r6
 8014e8c:	f000 f880 	bl	8014f90 <_printf_i>
 8014e90:	e7e4      	b.n	8014e5c <_vfiprintf_r+0x208>
 8014e92:	bf00      	nop
 8014e94:	08015688 	.word	0x08015688
 8014e98:	080156a8 	.word	0x080156a8
 8014e9c:	08015668 	.word	0x08015668
 8014ea0:	080156c8 	.word	0x080156c8
 8014ea4:	080156d2 	.word	0x080156d2
 8014ea8:	00000000 	.word	0x00000000
 8014eac:	08014c2f 	.word	0x08014c2f
 8014eb0:	080156ce 	.word	0x080156ce

08014eb4 <_printf_common>:
 8014eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb8:	4616      	mov	r6, r2
 8014eba:	4699      	mov	r9, r3
 8014ebc:	688a      	ldr	r2, [r1, #8]
 8014ebe:	690b      	ldr	r3, [r1, #16]
 8014ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	bfb8      	it	lt
 8014ec8:	4613      	movlt	r3, r2
 8014eca:	6033      	str	r3, [r6, #0]
 8014ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ed0:	4607      	mov	r7, r0
 8014ed2:	460c      	mov	r4, r1
 8014ed4:	b10a      	cbz	r2, 8014eda <_printf_common+0x26>
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	6033      	str	r3, [r6, #0]
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	0699      	lsls	r1, r3, #26
 8014ede:	bf42      	ittt	mi
 8014ee0:	6833      	ldrmi	r3, [r6, #0]
 8014ee2:	3302      	addmi	r3, #2
 8014ee4:	6033      	strmi	r3, [r6, #0]
 8014ee6:	6825      	ldr	r5, [r4, #0]
 8014ee8:	f015 0506 	ands.w	r5, r5, #6
 8014eec:	d106      	bne.n	8014efc <_printf_common+0x48>
 8014eee:	f104 0a19 	add.w	sl, r4, #25
 8014ef2:	68e3      	ldr	r3, [r4, #12]
 8014ef4:	6832      	ldr	r2, [r6, #0]
 8014ef6:	1a9b      	subs	r3, r3, r2
 8014ef8:	42ab      	cmp	r3, r5
 8014efa:	dc26      	bgt.n	8014f4a <_printf_common+0x96>
 8014efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f00:	1e13      	subs	r3, r2, #0
 8014f02:	6822      	ldr	r2, [r4, #0]
 8014f04:	bf18      	it	ne
 8014f06:	2301      	movne	r3, #1
 8014f08:	0692      	lsls	r2, r2, #26
 8014f0a:	d42b      	bmi.n	8014f64 <_printf_common+0xb0>
 8014f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f10:	4649      	mov	r1, r9
 8014f12:	4638      	mov	r0, r7
 8014f14:	47c0      	blx	r8
 8014f16:	3001      	adds	r0, #1
 8014f18:	d01e      	beq.n	8014f58 <_printf_common+0xa4>
 8014f1a:	6823      	ldr	r3, [r4, #0]
 8014f1c:	68e5      	ldr	r5, [r4, #12]
 8014f1e:	6832      	ldr	r2, [r6, #0]
 8014f20:	f003 0306 	and.w	r3, r3, #6
 8014f24:	2b04      	cmp	r3, #4
 8014f26:	bf08      	it	eq
 8014f28:	1aad      	subeq	r5, r5, r2
 8014f2a:	68a3      	ldr	r3, [r4, #8]
 8014f2c:	6922      	ldr	r2, [r4, #16]
 8014f2e:	bf0c      	ite	eq
 8014f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f34:	2500      	movne	r5, #0
 8014f36:	4293      	cmp	r3, r2
 8014f38:	bfc4      	itt	gt
 8014f3a:	1a9b      	subgt	r3, r3, r2
 8014f3c:	18ed      	addgt	r5, r5, r3
 8014f3e:	2600      	movs	r6, #0
 8014f40:	341a      	adds	r4, #26
 8014f42:	42b5      	cmp	r5, r6
 8014f44:	d11a      	bne.n	8014f7c <_printf_common+0xc8>
 8014f46:	2000      	movs	r0, #0
 8014f48:	e008      	b.n	8014f5c <_printf_common+0xa8>
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	4652      	mov	r2, sl
 8014f4e:	4649      	mov	r1, r9
 8014f50:	4638      	mov	r0, r7
 8014f52:	47c0      	blx	r8
 8014f54:	3001      	adds	r0, #1
 8014f56:	d103      	bne.n	8014f60 <_printf_common+0xac>
 8014f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f60:	3501      	adds	r5, #1
 8014f62:	e7c6      	b.n	8014ef2 <_printf_common+0x3e>
 8014f64:	18e1      	adds	r1, r4, r3
 8014f66:	1c5a      	adds	r2, r3, #1
 8014f68:	2030      	movs	r0, #48	; 0x30
 8014f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f6e:	4422      	add	r2, r4
 8014f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f78:	3302      	adds	r3, #2
 8014f7a:	e7c7      	b.n	8014f0c <_printf_common+0x58>
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	4622      	mov	r2, r4
 8014f80:	4649      	mov	r1, r9
 8014f82:	4638      	mov	r0, r7
 8014f84:	47c0      	blx	r8
 8014f86:	3001      	adds	r0, #1
 8014f88:	d0e6      	beq.n	8014f58 <_printf_common+0xa4>
 8014f8a:	3601      	adds	r6, #1
 8014f8c:	e7d9      	b.n	8014f42 <_printf_common+0x8e>
	...

08014f90 <_printf_i>:
 8014f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f94:	7e0f      	ldrb	r7, [r1, #24]
 8014f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f98:	2f78      	cmp	r7, #120	; 0x78
 8014f9a:	4691      	mov	r9, r2
 8014f9c:	4680      	mov	r8, r0
 8014f9e:	460c      	mov	r4, r1
 8014fa0:	469a      	mov	sl, r3
 8014fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014fa6:	d807      	bhi.n	8014fb8 <_printf_i+0x28>
 8014fa8:	2f62      	cmp	r7, #98	; 0x62
 8014faa:	d80a      	bhi.n	8014fc2 <_printf_i+0x32>
 8014fac:	2f00      	cmp	r7, #0
 8014fae:	f000 80d8 	beq.w	8015162 <_printf_i+0x1d2>
 8014fb2:	2f58      	cmp	r7, #88	; 0x58
 8014fb4:	f000 80a3 	beq.w	80150fe <_printf_i+0x16e>
 8014fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fc0:	e03a      	b.n	8015038 <_printf_i+0xa8>
 8014fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fc6:	2b15      	cmp	r3, #21
 8014fc8:	d8f6      	bhi.n	8014fb8 <_printf_i+0x28>
 8014fca:	a101      	add	r1, pc, #4	; (adr r1, 8014fd0 <_printf_i+0x40>)
 8014fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014fd0:	08015029 	.word	0x08015029
 8014fd4:	0801503d 	.word	0x0801503d
 8014fd8:	08014fb9 	.word	0x08014fb9
 8014fdc:	08014fb9 	.word	0x08014fb9
 8014fe0:	08014fb9 	.word	0x08014fb9
 8014fe4:	08014fb9 	.word	0x08014fb9
 8014fe8:	0801503d 	.word	0x0801503d
 8014fec:	08014fb9 	.word	0x08014fb9
 8014ff0:	08014fb9 	.word	0x08014fb9
 8014ff4:	08014fb9 	.word	0x08014fb9
 8014ff8:	08014fb9 	.word	0x08014fb9
 8014ffc:	08015149 	.word	0x08015149
 8015000:	0801506d 	.word	0x0801506d
 8015004:	0801512b 	.word	0x0801512b
 8015008:	08014fb9 	.word	0x08014fb9
 801500c:	08014fb9 	.word	0x08014fb9
 8015010:	0801516b 	.word	0x0801516b
 8015014:	08014fb9 	.word	0x08014fb9
 8015018:	0801506d 	.word	0x0801506d
 801501c:	08014fb9 	.word	0x08014fb9
 8015020:	08014fb9 	.word	0x08014fb9
 8015024:	08015133 	.word	0x08015133
 8015028:	682b      	ldr	r3, [r5, #0]
 801502a:	1d1a      	adds	r2, r3, #4
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	602a      	str	r2, [r5, #0]
 8015030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015038:	2301      	movs	r3, #1
 801503a:	e0a3      	b.n	8015184 <_printf_i+0x1f4>
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	6829      	ldr	r1, [r5, #0]
 8015040:	0606      	lsls	r6, r0, #24
 8015042:	f101 0304 	add.w	r3, r1, #4
 8015046:	d50a      	bpl.n	801505e <_printf_i+0xce>
 8015048:	680e      	ldr	r6, [r1, #0]
 801504a:	602b      	str	r3, [r5, #0]
 801504c:	2e00      	cmp	r6, #0
 801504e:	da03      	bge.n	8015058 <_printf_i+0xc8>
 8015050:	232d      	movs	r3, #45	; 0x2d
 8015052:	4276      	negs	r6, r6
 8015054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015058:	485e      	ldr	r0, [pc, #376]	; (80151d4 <_printf_i+0x244>)
 801505a:	230a      	movs	r3, #10
 801505c:	e019      	b.n	8015092 <_printf_i+0x102>
 801505e:	680e      	ldr	r6, [r1, #0]
 8015060:	602b      	str	r3, [r5, #0]
 8015062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015066:	bf18      	it	ne
 8015068:	b236      	sxthne	r6, r6
 801506a:	e7ef      	b.n	801504c <_printf_i+0xbc>
 801506c:	682b      	ldr	r3, [r5, #0]
 801506e:	6820      	ldr	r0, [r4, #0]
 8015070:	1d19      	adds	r1, r3, #4
 8015072:	6029      	str	r1, [r5, #0]
 8015074:	0601      	lsls	r1, r0, #24
 8015076:	d501      	bpl.n	801507c <_printf_i+0xec>
 8015078:	681e      	ldr	r6, [r3, #0]
 801507a:	e002      	b.n	8015082 <_printf_i+0xf2>
 801507c:	0646      	lsls	r6, r0, #25
 801507e:	d5fb      	bpl.n	8015078 <_printf_i+0xe8>
 8015080:	881e      	ldrh	r6, [r3, #0]
 8015082:	4854      	ldr	r0, [pc, #336]	; (80151d4 <_printf_i+0x244>)
 8015084:	2f6f      	cmp	r7, #111	; 0x6f
 8015086:	bf0c      	ite	eq
 8015088:	2308      	moveq	r3, #8
 801508a:	230a      	movne	r3, #10
 801508c:	2100      	movs	r1, #0
 801508e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015092:	6865      	ldr	r5, [r4, #4]
 8015094:	60a5      	str	r5, [r4, #8]
 8015096:	2d00      	cmp	r5, #0
 8015098:	bfa2      	ittt	ge
 801509a:	6821      	ldrge	r1, [r4, #0]
 801509c:	f021 0104 	bicge.w	r1, r1, #4
 80150a0:	6021      	strge	r1, [r4, #0]
 80150a2:	b90e      	cbnz	r6, 80150a8 <_printf_i+0x118>
 80150a4:	2d00      	cmp	r5, #0
 80150a6:	d04d      	beq.n	8015144 <_printf_i+0x1b4>
 80150a8:	4615      	mov	r5, r2
 80150aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80150ae:	fb03 6711 	mls	r7, r3, r1, r6
 80150b2:	5dc7      	ldrb	r7, [r0, r7]
 80150b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80150b8:	4637      	mov	r7, r6
 80150ba:	42bb      	cmp	r3, r7
 80150bc:	460e      	mov	r6, r1
 80150be:	d9f4      	bls.n	80150aa <_printf_i+0x11a>
 80150c0:	2b08      	cmp	r3, #8
 80150c2:	d10b      	bne.n	80150dc <_printf_i+0x14c>
 80150c4:	6823      	ldr	r3, [r4, #0]
 80150c6:	07de      	lsls	r6, r3, #31
 80150c8:	d508      	bpl.n	80150dc <_printf_i+0x14c>
 80150ca:	6923      	ldr	r3, [r4, #16]
 80150cc:	6861      	ldr	r1, [r4, #4]
 80150ce:	4299      	cmp	r1, r3
 80150d0:	bfde      	ittt	le
 80150d2:	2330      	movle	r3, #48	; 0x30
 80150d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80150dc:	1b52      	subs	r2, r2, r5
 80150de:	6122      	str	r2, [r4, #16]
 80150e0:	f8cd a000 	str.w	sl, [sp]
 80150e4:	464b      	mov	r3, r9
 80150e6:	aa03      	add	r2, sp, #12
 80150e8:	4621      	mov	r1, r4
 80150ea:	4640      	mov	r0, r8
 80150ec:	f7ff fee2 	bl	8014eb4 <_printf_common>
 80150f0:	3001      	adds	r0, #1
 80150f2:	d14c      	bne.n	801518e <_printf_i+0x1fe>
 80150f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150f8:	b004      	add	sp, #16
 80150fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150fe:	4835      	ldr	r0, [pc, #212]	; (80151d4 <_printf_i+0x244>)
 8015100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015104:	6829      	ldr	r1, [r5, #0]
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	f851 6b04 	ldr.w	r6, [r1], #4
 801510c:	6029      	str	r1, [r5, #0]
 801510e:	061d      	lsls	r5, r3, #24
 8015110:	d514      	bpl.n	801513c <_printf_i+0x1ac>
 8015112:	07df      	lsls	r7, r3, #31
 8015114:	bf44      	itt	mi
 8015116:	f043 0320 	orrmi.w	r3, r3, #32
 801511a:	6023      	strmi	r3, [r4, #0]
 801511c:	b91e      	cbnz	r6, 8015126 <_printf_i+0x196>
 801511e:	6823      	ldr	r3, [r4, #0]
 8015120:	f023 0320 	bic.w	r3, r3, #32
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	2310      	movs	r3, #16
 8015128:	e7b0      	b.n	801508c <_printf_i+0xfc>
 801512a:	6823      	ldr	r3, [r4, #0]
 801512c:	f043 0320 	orr.w	r3, r3, #32
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	2378      	movs	r3, #120	; 0x78
 8015134:	4828      	ldr	r0, [pc, #160]	; (80151d8 <_printf_i+0x248>)
 8015136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801513a:	e7e3      	b.n	8015104 <_printf_i+0x174>
 801513c:	0659      	lsls	r1, r3, #25
 801513e:	bf48      	it	mi
 8015140:	b2b6      	uxthmi	r6, r6
 8015142:	e7e6      	b.n	8015112 <_printf_i+0x182>
 8015144:	4615      	mov	r5, r2
 8015146:	e7bb      	b.n	80150c0 <_printf_i+0x130>
 8015148:	682b      	ldr	r3, [r5, #0]
 801514a:	6826      	ldr	r6, [r4, #0]
 801514c:	6961      	ldr	r1, [r4, #20]
 801514e:	1d18      	adds	r0, r3, #4
 8015150:	6028      	str	r0, [r5, #0]
 8015152:	0635      	lsls	r5, r6, #24
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	d501      	bpl.n	801515c <_printf_i+0x1cc>
 8015158:	6019      	str	r1, [r3, #0]
 801515a:	e002      	b.n	8015162 <_printf_i+0x1d2>
 801515c:	0670      	lsls	r0, r6, #25
 801515e:	d5fb      	bpl.n	8015158 <_printf_i+0x1c8>
 8015160:	8019      	strh	r1, [r3, #0]
 8015162:	2300      	movs	r3, #0
 8015164:	6123      	str	r3, [r4, #16]
 8015166:	4615      	mov	r5, r2
 8015168:	e7ba      	b.n	80150e0 <_printf_i+0x150>
 801516a:	682b      	ldr	r3, [r5, #0]
 801516c:	1d1a      	adds	r2, r3, #4
 801516e:	602a      	str	r2, [r5, #0]
 8015170:	681d      	ldr	r5, [r3, #0]
 8015172:	6862      	ldr	r2, [r4, #4]
 8015174:	2100      	movs	r1, #0
 8015176:	4628      	mov	r0, r5
 8015178:	f7eb f8b2 	bl	80002e0 <memchr>
 801517c:	b108      	cbz	r0, 8015182 <_printf_i+0x1f2>
 801517e:	1b40      	subs	r0, r0, r5
 8015180:	6060      	str	r0, [r4, #4]
 8015182:	6863      	ldr	r3, [r4, #4]
 8015184:	6123      	str	r3, [r4, #16]
 8015186:	2300      	movs	r3, #0
 8015188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801518c:	e7a8      	b.n	80150e0 <_printf_i+0x150>
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	462a      	mov	r2, r5
 8015192:	4649      	mov	r1, r9
 8015194:	4640      	mov	r0, r8
 8015196:	47d0      	blx	sl
 8015198:	3001      	adds	r0, #1
 801519a:	d0ab      	beq.n	80150f4 <_printf_i+0x164>
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	079b      	lsls	r3, r3, #30
 80151a0:	d413      	bmi.n	80151ca <_printf_i+0x23a>
 80151a2:	68e0      	ldr	r0, [r4, #12]
 80151a4:	9b03      	ldr	r3, [sp, #12]
 80151a6:	4298      	cmp	r0, r3
 80151a8:	bfb8      	it	lt
 80151aa:	4618      	movlt	r0, r3
 80151ac:	e7a4      	b.n	80150f8 <_printf_i+0x168>
 80151ae:	2301      	movs	r3, #1
 80151b0:	4632      	mov	r2, r6
 80151b2:	4649      	mov	r1, r9
 80151b4:	4640      	mov	r0, r8
 80151b6:	47d0      	blx	sl
 80151b8:	3001      	adds	r0, #1
 80151ba:	d09b      	beq.n	80150f4 <_printf_i+0x164>
 80151bc:	3501      	adds	r5, #1
 80151be:	68e3      	ldr	r3, [r4, #12]
 80151c0:	9903      	ldr	r1, [sp, #12]
 80151c2:	1a5b      	subs	r3, r3, r1
 80151c4:	42ab      	cmp	r3, r5
 80151c6:	dcf2      	bgt.n	80151ae <_printf_i+0x21e>
 80151c8:	e7eb      	b.n	80151a2 <_printf_i+0x212>
 80151ca:	2500      	movs	r5, #0
 80151cc:	f104 0619 	add.w	r6, r4, #25
 80151d0:	e7f5      	b.n	80151be <_printf_i+0x22e>
 80151d2:	bf00      	nop
 80151d4:	080156d9 	.word	0x080156d9
 80151d8:	080156ea 	.word	0x080156ea

080151dc <__sread>:
 80151dc:	b510      	push	{r4, lr}
 80151de:	460c      	mov	r4, r1
 80151e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151e4:	f000 f894 	bl	8015310 <_read_r>
 80151e8:	2800      	cmp	r0, #0
 80151ea:	bfab      	itete	ge
 80151ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80151ee:	89a3      	ldrhlt	r3, [r4, #12]
 80151f0:	181b      	addge	r3, r3, r0
 80151f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80151f6:	bfac      	ite	ge
 80151f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80151fa:	81a3      	strhlt	r3, [r4, #12]
 80151fc:	bd10      	pop	{r4, pc}

080151fe <__swrite>:
 80151fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015202:	461f      	mov	r7, r3
 8015204:	898b      	ldrh	r3, [r1, #12]
 8015206:	05db      	lsls	r3, r3, #23
 8015208:	4605      	mov	r5, r0
 801520a:	460c      	mov	r4, r1
 801520c:	4616      	mov	r6, r2
 801520e:	d505      	bpl.n	801521c <__swrite+0x1e>
 8015210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015214:	2302      	movs	r3, #2
 8015216:	2200      	movs	r2, #0
 8015218:	f000 f868 	bl	80152ec <_lseek_r>
 801521c:	89a3      	ldrh	r3, [r4, #12]
 801521e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015226:	81a3      	strh	r3, [r4, #12]
 8015228:	4632      	mov	r2, r6
 801522a:	463b      	mov	r3, r7
 801522c:	4628      	mov	r0, r5
 801522e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015232:	f000 b817 	b.w	8015264 <_write_r>

08015236 <__sseek>:
 8015236:	b510      	push	{r4, lr}
 8015238:	460c      	mov	r4, r1
 801523a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801523e:	f000 f855 	bl	80152ec <_lseek_r>
 8015242:	1c43      	adds	r3, r0, #1
 8015244:	89a3      	ldrh	r3, [r4, #12]
 8015246:	bf15      	itete	ne
 8015248:	6560      	strne	r0, [r4, #84]	; 0x54
 801524a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801524e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015252:	81a3      	strheq	r3, [r4, #12]
 8015254:	bf18      	it	ne
 8015256:	81a3      	strhne	r3, [r4, #12]
 8015258:	bd10      	pop	{r4, pc}

0801525a <__sclose>:
 801525a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801525e:	f000 b813 	b.w	8015288 <_close_r>
	...

08015264 <_write_r>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	4d07      	ldr	r5, [pc, #28]	; (8015284 <_write_r+0x20>)
 8015268:	4604      	mov	r4, r0
 801526a:	4608      	mov	r0, r1
 801526c:	4611      	mov	r1, r2
 801526e:	2200      	movs	r2, #0
 8015270:	602a      	str	r2, [r5, #0]
 8015272:	461a      	mov	r2, r3
 8015274:	f7ed fda5 	bl	8002dc2 <_write>
 8015278:	1c43      	adds	r3, r0, #1
 801527a:	d102      	bne.n	8015282 <_write_r+0x1e>
 801527c:	682b      	ldr	r3, [r5, #0]
 801527e:	b103      	cbz	r3, 8015282 <_write_r+0x1e>
 8015280:	6023      	str	r3, [r4, #0]
 8015282:	bd38      	pop	{r3, r4, r5, pc}
 8015284:	240050d8 	.word	0x240050d8

08015288 <_close_r>:
 8015288:	b538      	push	{r3, r4, r5, lr}
 801528a:	4d06      	ldr	r5, [pc, #24]	; (80152a4 <_close_r+0x1c>)
 801528c:	2300      	movs	r3, #0
 801528e:	4604      	mov	r4, r0
 8015290:	4608      	mov	r0, r1
 8015292:	602b      	str	r3, [r5, #0]
 8015294:	f7ed fdb1 	bl	8002dfa <_close>
 8015298:	1c43      	adds	r3, r0, #1
 801529a:	d102      	bne.n	80152a2 <_close_r+0x1a>
 801529c:	682b      	ldr	r3, [r5, #0]
 801529e:	b103      	cbz	r3, 80152a2 <_close_r+0x1a>
 80152a0:	6023      	str	r3, [r4, #0]
 80152a2:	bd38      	pop	{r3, r4, r5, pc}
 80152a4:	240050d8 	.word	0x240050d8

080152a8 <_fstat_r>:
 80152a8:	b538      	push	{r3, r4, r5, lr}
 80152aa:	4d07      	ldr	r5, [pc, #28]	; (80152c8 <_fstat_r+0x20>)
 80152ac:	2300      	movs	r3, #0
 80152ae:	4604      	mov	r4, r0
 80152b0:	4608      	mov	r0, r1
 80152b2:	4611      	mov	r1, r2
 80152b4:	602b      	str	r3, [r5, #0]
 80152b6:	f7ed fdac 	bl	8002e12 <_fstat>
 80152ba:	1c43      	adds	r3, r0, #1
 80152bc:	d102      	bne.n	80152c4 <_fstat_r+0x1c>
 80152be:	682b      	ldr	r3, [r5, #0]
 80152c0:	b103      	cbz	r3, 80152c4 <_fstat_r+0x1c>
 80152c2:	6023      	str	r3, [r4, #0]
 80152c4:	bd38      	pop	{r3, r4, r5, pc}
 80152c6:	bf00      	nop
 80152c8:	240050d8 	.word	0x240050d8

080152cc <_isatty_r>:
 80152cc:	b538      	push	{r3, r4, r5, lr}
 80152ce:	4d06      	ldr	r5, [pc, #24]	; (80152e8 <_isatty_r+0x1c>)
 80152d0:	2300      	movs	r3, #0
 80152d2:	4604      	mov	r4, r0
 80152d4:	4608      	mov	r0, r1
 80152d6:	602b      	str	r3, [r5, #0]
 80152d8:	f7ed fdab 	bl	8002e32 <_isatty>
 80152dc:	1c43      	adds	r3, r0, #1
 80152de:	d102      	bne.n	80152e6 <_isatty_r+0x1a>
 80152e0:	682b      	ldr	r3, [r5, #0]
 80152e2:	b103      	cbz	r3, 80152e6 <_isatty_r+0x1a>
 80152e4:	6023      	str	r3, [r4, #0]
 80152e6:	bd38      	pop	{r3, r4, r5, pc}
 80152e8:	240050d8 	.word	0x240050d8

080152ec <_lseek_r>:
 80152ec:	b538      	push	{r3, r4, r5, lr}
 80152ee:	4d07      	ldr	r5, [pc, #28]	; (801530c <_lseek_r+0x20>)
 80152f0:	4604      	mov	r4, r0
 80152f2:	4608      	mov	r0, r1
 80152f4:	4611      	mov	r1, r2
 80152f6:	2200      	movs	r2, #0
 80152f8:	602a      	str	r2, [r5, #0]
 80152fa:	461a      	mov	r2, r3
 80152fc:	f7ed fda4 	bl	8002e48 <_lseek>
 8015300:	1c43      	adds	r3, r0, #1
 8015302:	d102      	bne.n	801530a <_lseek_r+0x1e>
 8015304:	682b      	ldr	r3, [r5, #0]
 8015306:	b103      	cbz	r3, 801530a <_lseek_r+0x1e>
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	bd38      	pop	{r3, r4, r5, pc}
 801530c:	240050d8 	.word	0x240050d8

08015310 <_read_r>:
 8015310:	b538      	push	{r3, r4, r5, lr}
 8015312:	4d07      	ldr	r5, [pc, #28]	; (8015330 <_read_r+0x20>)
 8015314:	4604      	mov	r4, r0
 8015316:	4608      	mov	r0, r1
 8015318:	4611      	mov	r1, r2
 801531a:	2200      	movs	r2, #0
 801531c:	602a      	str	r2, [r5, #0]
 801531e:	461a      	mov	r2, r3
 8015320:	f7ed fd32 	bl	8002d88 <_read>
 8015324:	1c43      	adds	r3, r0, #1
 8015326:	d102      	bne.n	801532e <_read_r+0x1e>
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	b103      	cbz	r3, 801532e <_read_r+0x1e>
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	240050d8 	.word	0x240050d8

08015334 <_init>:
 8015334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015336:	bf00      	nop
 8015338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801533a:	bc08      	pop	{r3}
 801533c:	469e      	mov	lr, r3
 801533e:	4770      	bx	lr

08015340 <_fini>:
 8015340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015342:	bf00      	nop
 8015344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015346:	bc08      	pop	{r3}
 8015348:	469e      	mov	lr, r3
 801534a:	4770      	bx	lr
