
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c50  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08013ef0  08013ef0  00023ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014354  08014354  00024354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801435c  0801435c  0002435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014360  08014360  00024360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08014364  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005490  24000080  080143e0  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005510  080143e0  00035510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039d60  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007061  00000000  00000000  00069e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002850  00000000  00000000  00070e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002568  00000000  00000000  000736c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043db0  00000000  00000000  00075c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b937  00000000  00000000  000b99d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194bb4  00000000  00000000  000f530f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00289ec3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b008  00000000  00000000  00289f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013ed8 	.word	0x08013ed8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08013ed8 	.word	0x08013ed8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f002 ffab 	bl	80035c4 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 ffd6 	bl	8001624 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f003 fdce 	bl	8004224 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f000 ffc9 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 f927 	bl	8003908 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f000 ffb0 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 f919 	bl	8003908 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f000 ffa2 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 f90b 	bl	8003908 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f000 ff94 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 f8fd 	bl	8003908 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f000 ff86 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 f8ee 	bl	8003908 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f000 ff77 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 f8df 	bl	8003908 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f000 ff68 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 f8d0 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f000 ff59 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 f8c1 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f000 ff4a 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 f8b2 	bl	8003908 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f000 ff3b 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 f8a3 	bl	8003908 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f000 ff2c 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 f894 	bl	8003908 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f000 ff1d 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400009c 	.word	0x2400009c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 fe93 	bl	80035c4 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 febe 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 f81c 	bl	8003908 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f000 fea5 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 f80e 	bl	8003908 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f000 fe97 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 f800 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f000 fe89 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f002 fff2 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f000 fe7b 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000100 	.word	0x24000100
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f006 fdda 	bl	80075b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f006 fdce 	bl	80075b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f006 fdc2 	bl	80075b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f003 ff61 	bl	800493c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f000 fdd0 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 fbce 	bl	8003280 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 fbc8 	bl	8003280 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f003 ff01 	bl	800493c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f000 fd70 	bl	8001624 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000164 	.word	0x24000164
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	240001dc 	.word	0x240001dc
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f012 fc9d 	bl	80134cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f003 fd01 	bl	80045a0 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f000 fd3e 	bl	8001624 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f003 fd6e 	bl	80046a4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 fd29 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000254 	.word	0x24000254
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f006 fcad 	bl	80075b4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f003 fe4c 	bl	800493c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 fcbb 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f003 fc46 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f003 fc5d 	bl	8004584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000268 	.word	0x24000268
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f003 fc1d 	bl	8004550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f003 fc34 	bl	8004584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f003 fc15 	bl	8004550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 fc2c 	bl	8004584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f003 fc0d 	bl	8004550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f003 fc24 	bl	8004584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f003 fc05 	bl	8004550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f003 fc1c 	bl	8004584 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <error_protocol>:

osMessageQueueId_t mid_MsgQueue;


// Public Functions
void error_protocol(VOLTAGE_RAIL_NAME failed_rail) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]

	packet_t error_packet;
	uint8_t *buffer = (uint8_t*) malloc(
 8000d62:	2003      	movs	r0, #3
 8000d64:	f012 fb94 	bl	8013490 <malloc>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	61fb      	str	r3, [r7, #28]
	ERROR_PACKET_DATA_SIZE * sizeof(uint8_t));

	buffer[0] = ERROR_SYNC;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	22dd      	movs	r2, #221	; 0xdd
 8000d70:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERROR_SYNC;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3301      	adds	r3, #1
 8000d76:	22dd      	movs	r2, #221	; 0xdd
 8000d78:	701a      	strb	r2, [r3, #0]
	buffer[2] = failed_rail;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	701a      	strb	r2, [r3, #0]

	error_packet = create_packet(buffer, ERROR_PACKET_DATA_SIZE);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2203      	movs	r2, #3
 8000d86:	69f9      	ldr	r1, [r7, #28]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fcb3 	bl	80016f4 <create_packet>
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	463a      	mov	r2, r7
 8000d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d98:	e883 0003 	stmia.w	r3, {r0, r1}
	osMessageQueuePut(mid_MsgQueue, &error_packet, 0U, 0U);
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <error_protocol+0x64>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f107 0114 	add.w	r1, r7, #20
 8000da4:	2300      	movs	r3, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	f00f fade 	bl	8010368 <osMessageQueuePut>

	free(buffer);
 8000dac:	69f8      	ldr	r0, [r7, #28]
 8000dae:	f012 fb77 	bl	80134a0 <free>
	//vTaskSuspendAll();
	//TODO: Shutdown
}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	240002e0 	.word	0x240002e0

08000dc0 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <vApplicationTickHook+0x18>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <vApplicationTickHook+0x18>)
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	240002e8 	.word	0x240002e8

08000ddc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_FREERTOS_Init+0xa8>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_FREERTOS_Init+0xac>)
 8000de6:	f00f f947 	bl	8010078 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_FREERTOS_Init+0xb0>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <MX_FREERTOS_Init+0xb4>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_FREERTOS_Init+0xb8>)
 8000df6:	f00f f93f 	bl	8010078 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <MX_FREERTOS_Init+0xbc>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <MX_FREERTOS_Init+0xc0>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <MX_FREERTOS_Init+0xc4>)
 8000e06:	f00f f937 	bl	8010078 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <MX_FREERTOS_Init+0xc8>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_FREERTOS_Init+0xcc>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_FREERTOS_Init+0xd0>)
 8000e16:	f00f f92f 	bl	8010078 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <MX_FREERTOS_Init+0xd4>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000e20:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <MX_FREERTOS_Init+0xd8>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <MX_FREERTOS_Init+0xdc>)
 8000e26:	f00f f927 	bl	8010078 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_FREERTOS_Init+0xe0>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000e30:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <MX_FREERTOS_Init+0xe4>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <MX_FREERTOS_Init+0xe8>)
 8000e36:	f00f f91f 	bl	8010078 <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <MX_FREERTOS_Init+0xec>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <MX_FREERTOS_Init+0xf0>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <MX_FREERTOS_Init+0xf4>)
 8000e46:	f00f f917 	bl	8010078 <osThreadNew>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_FREERTOS_Init+0xf8>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_FREERTOS_Init+0xfc>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4821      	ldr	r0, [pc, #132]	; (8000edc <MX_FREERTOS_Init+0x100>)
 8000e56:	f00f f90f 	bl	8010078 <osThreadNew>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <MX_FREERTOS_Init+0x104>)
 8000e5e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <MX_FREERTOS_Init+0x108>)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <MX_FREERTOS_Init+0x10c>)
 8000e66:	f00f f907 	bl	8010078 <osThreadNew>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <MX_FREERTOS_Init+0x110>)
 8000e6e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <MX_FREERTOS_Init+0x114>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <MX_FREERTOS_Init+0x118>)
 8000e76:	f00f f8ff 	bl	8010078 <osThreadNew>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <MX_FREERTOS_Init+0x11c>)
 8000e7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08014148 	.word	0x08014148
 8000e88:	08000efd 	.word	0x08000efd
 8000e8c:	240002ec 	.word	0x240002ec
 8000e90:	0801416c 	.word	0x0801416c
 8000e94:	08000f25 	.word	0x08000f25
 8000e98:	240002f0 	.word	0x240002f0
 8000e9c:	08014190 	.word	0x08014190
 8000ea0:	08000f4d 	.word	0x08000f4d
 8000ea4:	240002f4 	.word	0x240002f4
 8000ea8:	080141b4 	.word	0x080141b4
 8000eac:	08000f75 	.word	0x08000f75
 8000eb0:	240002f8 	.word	0x240002f8
 8000eb4:	080141d8 	.word	0x080141d8
 8000eb8:	08000f85 	.word	0x08000f85
 8000ebc:	240002fc 	.word	0x240002fc
 8000ec0:	080141fc 	.word	0x080141fc
 8000ec4:	08000f95 	.word	0x08000f95
 8000ec8:	24000300 	.word	0x24000300
 8000ecc:	08014220 	.word	0x08014220
 8000ed0:	0800104d 	.word	0x0800104d
 8000ed4:	24000304 	.word	0x24000304
 8000ed8:	08014244 	.word	0x08014244
 8000edc:	08001129 	.word	0x08001129
 8000ee0:	24000308 	.word	0x24000308
 8000ee4:	08014268 	.word	0x08014268
 8000ee8:	08001139 	.word	0x08001139
 8000eec:	2400030c 	.word	0x2400030c
 8000ef0:	0801428c 	.word	0x0801428c
 8000ef4:	08001149 	.word	0x08001149
 8000ef8:	24000310 	.word	0x24000310

08000efc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <PMT_init+0x24>)
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	f00f f9c4 	bl	801029c <osEventFlagsWait>
		osWaitForever);
		sample_pmt();
 8000f14:	f000 fc10 	bl	8001738 <sample_pmt>
		osThreadYield();
 8000f18:	f00f f940 	bl	801019c <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8000f1c:	e7f2      	b.n	8000f04 <PMT_init+0x8>
 8000f1e:	bf00      	nop
 8000f20:	240002e4 	.word	0x240002e4

08000f24 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <ERPA_init+0x24>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	f00f f9b0 	bl	801029c <osEventFlagsWait>
		osWaitForever);
		sample_erpa();
 8000f3c:	f000 fc76 	bl	800182c <sample_erpa>
		osThreadYield();
 8000f40:	f00f f92c 	bl	801019c <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8000f44:	e7f2      	b.n	8000f2c <ERPA_init+0x8>
 8000f46:	bf00      	nop
 8000f48:	240002e4 	.word	0x240002e4

08000f4c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HK_init+0x24>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	f00f f99c 	bl	801029c <osEventFlagsWait>
		osWaitForever);
		sample_hk();
 8000f64:	f000 fd04 	bl	8001970 <sample_hk>
		osThreadYield();
 8000f68:	f00f f918 	bl	801019c <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8000f6c:	e7f2      	b.n	8000f54 <HK_init+0x8>
 8000f6e:	bf00      	nop
 8000f70:	240002e4 	.word	0x240002e4

08000f74 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f00f f92d 	bl	80101dc <osDelay>
 8000f82:	e7fb      	b.n	8000f7c <AUTOINIT_init+0x8>

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f00f f925 	bl	80101dc <osDelay>
 8000f92:	e7fb      	b.n	8000f8c <AUTODEINIT_init+0x8>

08000f94 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];
	packet_t msg;
	uint32_t total_size = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <UART_TX_init+0xa8>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f107 0108 	add.w	r1, r7, #8
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f00f fa39 	bl	8010428 <osMessageQueueGet>
 8000fb6:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d11c      	bne.n	8000ff8 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fca:	d215      	bcs.n	8000ff8 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <UART_TX_init+0xac>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	89ba      	ldrh	r2, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f012 fa6a 	bl	80134b0 <memcpy>
					free(msg.array);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f012 fa5e 	bl	80134a0 <free>
					total_size += msg.size;
 8000fe4:	89bb      	ldrh	r3, [r7, #12]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4413      	add	r3, r2
 8000fec:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f240 32b1 	movw	r2, #945	; 0x3b1
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d808      	bhi.n	800100a <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <UART_TX_init+0xa8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00f fa71 	bl	80104e4 <osMessageQueueGetCount>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1cd      	bne.n	8000fa4 <UART_TX_init+0x10>
 8001008:	e000      	b.n	800100c <UART_TX_init+0x78>
						break;
 800100a:	bf00      	nop

		if (total_size > 0) {
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d010      	beq.n	8001034 <UART_TX_init+0xa0>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	b29b      	uxth	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	4909      	ldr	r1, [pc, #36]	; (8001040 <UART_TX_init+0xac>)
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <UART_TX_init+0xb0>)
 800101c:	f00d f980 	bl	800e320 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001020:	e001      	b.n	8001026 <UART_TX_init+0x92>
				osThreadYield();
 8001022:	f00f f8bb 	bl	801019c <osThreadYield>
			while (tx_flag == 0) {
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <UART_TX_init+0xb4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <UART_TX_init+0xb4>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8001034:	f00f f8b2 	bl	801019c <osThreadYield>
		total_size = 0;
 8001038:	e7b2      	b.n	8000fa0 <UART_TX_init+0xc>
 800103a:	bf00      	nop
 800103c:	240002e0 	.word	0x240002e0
 8001040:	24000314 	.word	0x24000314
 8001044:	240009ec 	.word	0x240009ec
 8001048:	24000000 	.word	0x24000000

0800104c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <Voltage_Monitor_init+0xd8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105c:	2200      	movs	r2, #0
 800105e:	2108      	movs	r1, #8
 8001060:	f00f f91c 	bl	801029c <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001064:	f001 ffca 	bl	8002ffc <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001068:	f002 f86e 	bl	8003148 <get_rail_monitor>
 800106c:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e052      	b.n	800111a <Voltage_Monitor_init+0xce>
			if (rail_monitor_ptr[i].is_enabled){
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	461a      	mov	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d044      	beq.n	8001114 <Voltage_Monitor_init+0xc8>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	8898      	ldrh	r0, [r3, #4]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	461a      	mov	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	891b      	ldrh	r3, [r3, #8]
 80010ae:	4619      	mov	r1, r3
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4413      	add	r3, r2
 80010c0:	88db      	ldrh	r3, [r3, #6]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f002 f828 	bl	8003118 <in_range>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d122      	bne.n	8001114 <Voltage_Monitor_init+0xc8>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	785a      	ldrb	r2, [r3, #1]
 80010e0:	3201      	adds	r2, #1
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	705a      	strb	r2, [r3, #1]
					// If that rails' error count is at 3, proceed with error protocol for that rail
					if (rail_monitor_ptr[i].error_count == 3) {
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	461a      	mov	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d10b      	bne.n	8001114 <Voltage_Monitor_init+0xc8>
						error_protocol(rail_monitor_ptr[i].name);
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe22 	bl	8000d58 <error_protocol>
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b11      	cmp	r3, #17
 800111e:	dda9      	ble.n	8001074 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001120:	e798      	b.n	8001054 <Voltage_Monitor_init+0x8>
 8001122:	bf00      	nop
 8001124:	240002e4 	.word	0x240002e4

08001128 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f00f f853 	bl	80101dc <osDelay>
 8001136:	e7fb      	b.n	8001130 <STOP_init+0x8>

08001138 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f00f f84b 	bl	80101dc <osDelay>
 8001146:	e7fb      	b.n	8001140 <Science_init+0x8>

08001148 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f00f f843 	bl	80101dc <osDelay>
 8001156:	e7fb      	b.n	8001150 <Idle_init+0x8>

08001158 <HAL_UART_TxCpltCallback>:
  /* USER CODE END Idle_init */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_UART_TxCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	24000000 	.word	0x24000000

08001178 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <MX_GPIO_Init+0xe8>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <MX_GPIO_Init+0xe8>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_GPIO_Init+0xe8>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <MX_GPIO_Init+0xec>)
 800120e:	f006 fb99 	bl	8007944 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2164      	movs	r1, #100	; 0x64
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_GPIO_Init+0xf0>)
 8001218:	f006 fb94 	bl	8007944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800121c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001220:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0xec>)
 8001236:	f006 f9bd 	bl	80075b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001242:	2302      	movs	r3, #2
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_GPIO_Init+0xf0>)
 8001252:	f006 f9af 	bl	80075b4 <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	58024400 	.word	0x58024400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020400 	.word	0x58020400

0800126c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MX_I2C1_Init+0x7c>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_I2C1_Init+0x80>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_I2C1_Init+0x78>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_I2C1_Init+0x78>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x78>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_I2C1_Init+0x78>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x78>)
 80012a8:	f006 fb66 	bl	8007978 <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 f9b7 	bl	8001624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <MX_I2C1_Init+0x78>)
 80012ba:	f007 f8ad 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 f9ae 	bl	8001624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_I2C1_Init+0x78>)
 80012cc:	f007 f8ef 	bl	80084ae <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f9a5 	bl	8001624 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f007 f934 	bl	8008548 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	240006fc 	.word	0x240006fc
 80012e8:	40005400 	.word	0x40005400
 80012ec:	0020081f 	.word	0x0020081f

080012f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ba      	sub	sp, #232	; 0xe8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f012 f8db 	bl	80134cc <memset>
  if(i2cHandle->Instance==I2C1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_I2C_MspInit+0xc8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d146      	bne.n	80013ae <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001320:	f04f 0208 	mov.w	r2, #8
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f008 f98c 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001342:	f000 f96f 	bl	8001624 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137e:	2304      	movs	r3, #4
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_I2C_MspInit+0xd0>)
 800138c:	f006 f912 	bl	80075b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 8001392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800139c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_I2C_MspInit+0xcc>)
 80013a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	37e8      	adds	r7, #232	; 0xe8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40005400 	.word	0x40005400
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020400 	.word	0x58020400

080013c4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d106      	bne.n	80013e2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f00e ff1a 	bl	8010214 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80013e0:	e023      	b.n	800142a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2102      	movs	r1, #2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00e ff0f 	bl	8010214 <osEventFlagsSet>
}
 80013f6:	e018      	b.n	800142a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d111      	bne.n	8001424 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2108      	movs	r1, #8
 8001406:	4618      	mov	r0, r3
 8001408:	f00e ff04 	bl	8010214 <osEventFlagsSet>
		if (HK_ENABLED){
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(event_flags, HK_FLAG_ID);
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2104      	movs	r1, #4
 800141c:	4618      	mov	r0, r3
 800141e:	f00e fef9 	bl	8010214 <osEventFlagsSet>
}
 8001422:	e002      	b.n	800142a <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001426:	f012 f9a7 	bl	8013778 <puts>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000908 	.word	0x24000908
 8001438:	240002e4 	.word	0x240002e4
 800143c:	24000954 	.word	0x24000954
 8001440:	240009a0 	.word	0x240009a0
 8001444:	24000750 	.word	0x24000750
 8001448:	08013f78 	.word	0x08013f78

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f001 feae 	bl	80031b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f824 	bl	80014a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001458:	f000 f8a2 	bl	80015a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fe8c 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f7ff fc42 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001464:	f001 fb14 	bl	8002a90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001468:	f001 fcda 	bl	8002e20 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800146c:	f7ff fefe 	bl	800126c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001470:	f000 fe66 	bl	8002140 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001474:	f001 fa96 	bl	80029a4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001478:	f001 f9e6 	bl	8002848 <MX_TIM1_Init>
  MX_ADC3_Init();
 800147c:	f7ff f9d4 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001480:	f7ff f8b0 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001484:	f7ff fb7c 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001488:	f000 fe02 	bl	8002090 <MX_SPI1_Init>
  MX_RTC_Init();
 800148c:	f000 fc2c 	bl	8001ce8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001490:	f00e fda8 	bl	800ffe4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001494:	f7ff fca2 	bl	8000ddc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001498:	f00e fdc8 	bl	801002c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800149c:	e7fe      	b.n	800149c <main+0x50>
	...

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09c      	sub	sp, #112	; 0x70
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	224c      	movs	r2, #76	; 0x4c
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f012 f80c 	bl	80134cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2220      	movs	r2, #32
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f012 f806 	bl	80134cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f007 f865 	bl	8008590 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <SystemClock_Config+0xf8>)
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	4a32      	ldr	r2, [pc, #200]	; (8001598 <SystemClock_Config+0xf8>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <SystemClock_Config+0xf8>)
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <SystemClock_Config+0xfc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e8:	4a2c      	ldr	r2, [pc, #176]	; (800159c <SystemClock_Config+0xfc>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <SystemClock_Config+0xfc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014fc:	bf00      	nop
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <SystemClock_Config+0xfc>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800150a:	d1f8      	bne.n	80014fe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800150c:	2303      	movs	r3, #3
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001516:	2309      	movs	r3, #9
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	2302      	movs	r3, #2
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001526:	2304      	movs	r3, #4
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800152a:	2320      	movs	r3, #32
 800152c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001536:	2302      	movs	r3, #2
 8001538:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800153a:	2308      	movs	r3, #8
 800153c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800153e:	2300      	movs	r3, #0
 8001540:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4618      	mov	r0, r3
 800154c:	f007 f85a 	bl	8008604 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001556:	f000 f865 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	233f      	movs	r3, #63	; 0x3f
 800155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2303      	movs	r3, #3
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2101      	movs	r1, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f007 fc9a 	bl	8008eb8 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800158a:	f000 f84b 	bl	8001624 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3770      	adds	r7, #112	; 0x70
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	58000400 	.word	0x58000400
 800159c:	58024800 	.word	0x58024800

080015a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0b0      	sub	sp, #192	; 0xc0
 80015a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	22c0      	movs	r2, #192	; 0xc0
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f011 ff8d 	bl	80134cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015be:	2304      	movs	r3, #4
 80015c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80015c2:	2320      	movs	r3, #32
 80015c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80015c6:	2308      	movs	r3, #8
 80015c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f008 f834 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80015f2:	f000 f817 	bl	8001624 <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	37c0      	adds	r7, #192	; 0xc0
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001612:	f001 fe09 	bl	8003228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40001000 	.word	0x40001000

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <get_current_step>:
uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;


uint8_t get_current_step() {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <get_current_step+0xc0>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001642:	4293      	cmp	r3, r2
 8001644:	d04a      	beq.n	80016dc <get_current_step+0xac>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164c:	da48      	bge.n	80016e0 <get_current_step+0xb0>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001654:	4293      	cmp	r3, r2
 8001656:	d03f      	beq.n	80016d8 <get_current_step+0xa8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800165e:	4293      	cmp	r3, r2
 8001660:	dc3e      	bgt.n	80016e0 <get_current_step+0xb0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001668:	4293      	cmp	r3, r2
 800166a:	d033      	beq.n	80016d4 <get_current_step+0xa4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8001672:	da35      	bge.n	80016e0 <get_current_step+0xb0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800167a:	4293      	cmp	r3, r2
 800167c:	d028      	beq.n	80016d0 <get_current_step+0xa0>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8001684:	4293      	cmp	r3, r2
 8001686:	dc2b      	bgt.n	80016e0 <get_current_step+0xb0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f240 7245 	movw	r2, #1861	; 0x745
 800168e:	4293      	cmp	r3, r2
 8001690:	d01c      	beq.n	80016cc <get_current_step+0x9c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f240 7245 	movw	r2, #1861	; 0x745
 8001698:	4293      	cmp	r3, r2
 800169a:	dc21      	bgt.n	80016e0 <get_current_step+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d010      	beq.n	80016c8 <get_current_step+0x98>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80016ac:	4293      	cmp	r3, r2
 80016ae:	dc17      	bgt.n	80016e0 <get_current_step+0xb0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <get_current_step+0x90>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80016bc:	d002      	beq.n	80016c4 <get_current_step+0x94>
 80016be:	e00f      	b.n	80016e0 <get_current_step+0xb0>
	case 0:
		return 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e00e      	b.n	80016e2 <get_current_step+0xb2>
	case 620:
		return 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e00c      	b.n	80016e2 <get_current_step+0xb2>
	case 1241:
		return 2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	e00a      	b.n	80016e2 <get_current_step+0xb2>
	case 1861:
		return 3;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e008      	b.n	80016e2 <get_current_step+0xb2>
	case 2482:
		return 4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	e006      	b.n	80016e2 <get_current_step+0xb2>
	case 3103:
		return 5;
 80016d4:	2305      	movs	r3, #5
 80016d6:	e004      	b.n	80016e2 <get_current_step+0xb2>
	case 3723:
		return 6;
 80016d8:	2306      	movs	r3, #6
 80016da:	e002      	b.n	80016e2 <get_current_step+0xb2>
	case 4095:
		return 7;
 80016dc:	2307      	movs	r3, #7
 80016de:	e000      	b.n	80016e2 <get_current_step+0xb2>
	default:
		return -1;
 80016e0:	23ff      	movs	r3, #255	; 0xff
	}
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40007400 	.word	0x40007400

080016f4 <create_packet>:

packet_t create_packet(const uint8_t *data, uint16_t size) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4618      	mov	r0, r3
 8001706:	f011 fec3 	bl	8013490 <malloc>
 800170a:	4603      	mov	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	88fa      	ldrh	r2, [r7, #6]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f011 fecb 	bl	80134b0 <memcpy>
	packet.size = size;
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	e893 0003 	ldmia.w	r3, {r0, r1}
 800172a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800173e:	bf00      	nop
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	4836      	ldr	r0, [pc, #216]	; (8001820 <sample_pmt+0xe8>)
 8001746:	f006 f8e5 	bl	8007914 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f7      	bne.n	8001740 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8001750:	200a      	movs	r0, #10
 8001752:	f011 fe9d 	bl	8013490 <malloc>
 8001756:	4603      	mov	r3, r0
 8001758:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800175a:	2002      	movs	r0, #2
 800175c:	f011 fe98 	bl	8013490 <malloc>
 8001760:	4603      	mov	r3, r0
 8001762:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8001764:	2004      	movs	r0, #4
 8001766:	f011 fe93 	bl	8013490 <malloc>
 800176a:	4603      	mov	r3, r0
 800176c:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f001 fabc 	bl	8002cec <get_uptime>

	receive_pmt_spi(pmt_spi);
 8001774:	6938      	ldr	r0, [r7, #16]
 8001776:	f000 fb87 	bl	8001e88 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	22bb      	movs	r2, #187	; 0xbb
 800177e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	22bb      	movs	r2, #187	; 0xbb
 8001786:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <sample_pmt+0xec>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29a      	uxth	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3302      	adds	r3, #2
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <sample_pmt+0xec>)
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3303      	adds	r3, #3
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3304      	adds	r3, #4
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3305      	adds	r3, #5
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	7852      	ldrb	r2, [r2, #1]
 80017b6:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3306      	adds	r3, #6
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3307      	adds	r3, #7
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	7852      	ldrb	r2, [r2, #1]
 80017ca:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3308      	adds	r3, #8
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	7892      	ldrb	r2, [r2, #2]
 80017d4:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3309      	adds	r3, #9
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	78d2      	ldrb	r2, [r2, #3]
 80017de:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	220a      	movs	r2, #10
 80017e4:	6979      	ldr	r1, [r7, #20]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff84 	bl	80016f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <sample_pmt+0xf0>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	1d39      	adds	r1, r7, #4
 80017f2:	2300      	movs	r3, #0
 80017f4:	2200      	movs	r2, #0
 80017f6:	f00e fdb7 	bl	8010368 <osMessageQueuePut>
	pmt_seq++;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <sample_pmt+0xec>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <sample_pmt+0xec>)
 8001804:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f011 fe4a 	bl	80134a0 <free>
	free(pmt_spi);
 800180c:	6938      	ldr	r0, [r7, #16]
 800180e:	f011 fe47 	bl	80134a0 <free>
	free(uptime);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f011 fe44 	bl	80134a0 <free>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58020000 	.word	0x58020000
 8001824:	24000752 	.word	0x24000752
 8001828:	240002e0 	.word	0x240002e0

0800182c <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001832:	bf00      	nop
 8001834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001838:	484a      	ldr	r0, [pc, #296]	; (8001964 <sample_erpa+0x138>)
 800183a:	f006 f86b 	bl	8007914 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f7      	bne.n	8001834 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001844:	200e      	movs	r0, #14
 8001846:	f011 fe23 	bl	8013490 <malloc>
 800184a:	4603      	mov	r3, r0
 800184c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800184e:	2002      	movs	r0, #2
 8001850:	f011 fe1e 	bl	8013490 <malloc>
 8001854:	4603      	mov	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8001858:	2002      	movs	r0, #2
 800185a:	f011 fe19 	bl	8013490 <malloc>
 800185e:	4603      	mov	r3, r0
 8001860:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8001862:	2004      	movs	r0, #4
 8001864:	f011 fe14 	bl	8013490 <malloc>
 8001868:	4603      	mov	r3, r0
 800186a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800186c:	23ff      	movs	r3, #255	; 0xff
 800186e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8001870:	6938      	ldr	r0, [r7, #16]
 8001872:	f001 fa3b 	bl	8002cec <get_uptime>
	sweep_step = get_current_step();
 8001876:	f7ff fedb 	bl	8001630 <get_current_step>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f000 fb26 	bl	8001ed0 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8001884:	6978      	ldr	r0, [r7, #20]
 8001886:	f000 fb47 	bl	8001f18 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	22aa      	movs	r2, #170	; 0xaa
 800188e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	22aa      	movs	r2, #170	; 0xaa
 8001896:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <sample_erpa+0x13c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0c1a      	lsrs	r2, r3, #16
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <sample_erpa+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0a1a      	lsrs	r2, r3, #8
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3303      	adds	r3, #3
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <sample_erpa+0x13c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3305      	adds	r3, #5
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3306      	adds	r3, #6
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3307      	adds	r3, #7
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3308      	adds	r3, #8
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3309      	adds	r3, #9
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	7852      	ldrb	r2, [r2, #1]
 80018f6:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	330a      	adds	r3, #10
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	330b      	adds	r3, #11
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	7852      	ldrb	r2, [r2, #1]
 800190a:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	330c      	adds	r3, #12
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	7892      	ldrb	r2, [r2, #2]
 8001914:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	330d      	adds	r3, #13
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	78d2      	ldrb	r2, [r2, #3]
 800191e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	220e      	movs	r2, #14
 8001924:	69f9      	ldr	r1, [r7, #28]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fee4 	bl	80016f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <sample_erpa+0x140>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	1d39      	adds	r1, r7, #4
 8001932:	2300      	movs	r3, #0
 8001934:	2200      	movs	r2, #0
 8001936:	f00e fd17 	bl	8010368 <osMessageQueuePut>
	erpa_seq++;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <sample_erpa+0x13c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a09      	ldr	r2, [pc, #36]	; (8001968 <sample_erpa+0x13c>)
 8001942:	6013      	str	r3, [r2, #0]
	free(buffer);
 8001944:	69f8      	ldr	r0, [r7, #28]
 8001946:	f011 fdab 	bl	80134a0 <free>
	free(erpa_spi);
 800194a:	69b8      	ldr	r0, [r7, #24]
 800194c:	f011 fda8 	bl	80134a0 <free>
	free(erpa_adc);
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f011 fda5 	bl	80134a0 <free>
	free(uptime);
 8001956:	6938      	ldr	r0, [r7, #16]
 8001958:	f011 fda2 	bl	80134a0 <free>
}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	58020400 	.word	0x58020400
 8001968:	24000754 	.word	0x24000754
 800196c:	240002e0 	.word	0x240002e0

08001970 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8001976:	2036      	movs	r0, #54	; 0x36
 8001978:	f011 fd8a 	bl	8013490 <malloc>
 800197c:	4603      	mov	r3, r0
 800197e:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8001980:	200a      	movs	r0, #10
 8001982:	f011 fd85 	bl	8013490 <malloc>
 8001986:	4603      	mov	r3, r0
 8001988:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800198a:	2004      	movs	r0, #4
 800198c:	f011 fd80 	bl	8013490 <malloc>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f001 f9a9 	bl	8002cec <get_uptime>
	get_timestamp(timestamp);
 800199a:	6938      	ldr	r0, [r7, #16]
 800199c:	f001 f9f0 	bl	8002d80 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 80019a0:	f001 fbd2 	bl	8003148 <get_rail_monitor>
 80019a4:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	22cc      	movs	r2, #204	; 0xcc
 80019aa:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	22cc      	movs	r2, #204	; 0xcc
 80019b2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80019b4:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <sample_hk+0x2cc>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3302      	adds	r3, #2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <sample_hk+0x2cc>)
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3303      	adds	r3, #3
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3304      	adds	r3, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	889a      	ldrh	r2, [r3, #4]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3305      	adds	r3, #5
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	330a      	adds	r3, #10
 80019f0:	889b      	ldrh	r3, [r3, #4]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3306      	adds	r3, #6
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	330a      	adds	r3, #10
 8001a02:	889a      	ldrh	r2, [r3, #4]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3307      	adds	r3, #7
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3314      	adds	r3, #20
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3314      	adds	r3, #20
 8001a22:	889a      	ldrh	r2, [r3, #4]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3309      	adds	r3, #9
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	331e      	adds	r3, #30
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	330a      	adds	r3, #10
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	331e      	adds	r3, #30
 8001a42:	889a      	ldrh	r2, [r3, #4]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	330b      	adds	r3, #11
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3328      	adds	r3, #40	; 0x28
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3328      	adds	r3, #40	; 0x28
 8001a62:	889a      	ldrh	r2, [r3, #4]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	330d      	adds	r3, #13
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3332      	adds	r3, #50	; 0x32
 8001a70:	889b      	ldrh	r3, [r3, #4]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	330e      	adds	r3, #14
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3332      	adds	r3, #50	; 0x32
 8001a82:	889a      	ldrh	r2, [r3, #4]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	330f      	adds	r3, #15
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	333c      	adds	r3, #60	; 0x3c
 8001a90:	889b      	ldrh	r3, [r3, #4]
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3310      	adds	r3, #16
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	333c      	adds	r3, #60	; 0x3c
 8001aa2:	889a      	ldrh	r2, [r3, #4]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3311      	adds	r3, #17
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3346      	adds	r3, #70	; 0x46
 8001ab0:	889b      	ldrh	r3, [r3, #4]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3312      	adds	r3, #18
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3346      	adds	r3, #70	; 0x46
 8001ac2:	889a      	ldrh	r2, [r3, #4]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3313      	adds	r3, #19
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3350      	adds	r3, #80	; 0x50
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3314      	adds	r3, #20
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3350      	adds	r3, #80	; 0x50
 8001ae2:	889a      	ldrh	r2, [r3, #4]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3315      	adds	r3, #21
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	335a      	adds	r3, #90	; 0x5a
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3316      	adds	r3, #22
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	335a      	adds	r3, #90	; 0x5a
 8001b02:	889a      	ldrh	r2, [r3, #4]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3317      	adds	r3, #23
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3364      	adds	r3, #100	; 0x64
 8001b10:	889b      	ldrh	r3, [r3, #4]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3364      	adds	r3, #100	; 0x64
 8001b22:	889a      	ldrh	r2, [r3, #4]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3319      	adds	r3, #25
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	336e      	adds	r3, #110	; 0x6e
 8001b30:	889b      	ldrh	r3, [r3, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	331a      	adds	r3, #26
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	336e      	adds	r3, #110	; 0x6e
 8001b42:	889a      	ldrh	r2, [r3, #4]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	331b      	adds	r3, #27
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	3378      	adds	r3, #120	; 0x78
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	331c      	adds	r3, #28
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3378      	adds	r3, #120	; 0x78
 8001b62:	889a      	ldrh	r2, [r3, #4]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	331d      	adds	r3, #29
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3382      	adds	r3, #130	; 0x82
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	331e      	adds	r3, #30
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3382      	adds	r3, #130	; 0x82
 8001b82:	889a      	ldrh	r2, [r3, #4]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	331f      	adds	r3, #31
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	338c      	adds	r3, #140	; 0x8c
 8001b90:	889b      	ldrh	r3, [r3, #4]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3320      	adds	r3, #32
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	338c      	adds	r3, #140	; 0x8c
 8001ba2:	889a      	ldrh	r2, [r3, #4]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3321      	adds	r3, #33	; 0x21
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3396      	adds	r3, #150	; 0x96
 8001bb0:	889b      	ldrh	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3322      	adds	r3, #34	; 0x22
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3396      	adds	r3, #150	; 0x96
 8001bc2:	889a      	ldrh	r2, [r3, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3323      	adds	r3, #35	; 0x23
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	33a0      	adds	r3, #160	; 0xa0
 8001bd0:	889b      	ldrh	r3, [r3, #4]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3324      	adds	r3, #36	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	33a0      	adds	r3, #160	; 0xa0
 8001be2:	889a      	ldrh	r2, [r3, #4]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3325      	adds	r3, #37	; 0x25
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	33aa      	adds	r3, #170	; 0xaa
 8001bf0:	889b      	ldrh	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3326      	adds	r3, #38	; 0x26
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	33aa      	adds	r3, #170	; 0xaa
 8001c02:	889a      	ldrh	r2, [r3, #4]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3327      	adds	r3, #39	; 0x27
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3328      	adds	r3, #40	; 0x28
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3329      	adds	r3, #41	; 0x29
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	7852      	ldrb	r2, [r2, #1]
 8001c1e:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	332a      	adds	r3, #42	; 0x2a
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	7892      	ldrb	r2, [r2, #2]
 8001c28:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	332b      	adds	r3, #43	; 0x2b
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	78d2      	ldrb	r2, [r2, #3]
 8001c32:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	332c      	adds	r3, #44	; 0x2c
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	e001      	b.n	8001c40 <sample_hk+0x2d0>
 8001c3c:	24000758 	.word	0x24000758
 8001c40:	7912      	ldrb	r2, [r2, #4]
 8001c42:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	332d      	adds	r3, #45	; 0x2d
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	7952      	ldrb	r2, [r2, #5]
 8001c4c:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	332e      	adds	r3, #46	; 0x2e
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	7992      	ldrb	r2, [r2, #6]
 8001c56:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	332f      	adds	r3, #47	; 0x2f
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	79d2      	ldrb	r2, [r2, #7]
 8001c60:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3330      	adds	r3, #48	; 0x30
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	7a12      	ldrb	r2, [r2, #8]
 8001c6a:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3331      	adds	r3, #49	; 0x31
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	7a52      	ldrb	r2, [r2, #9]
 8001c74:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3332      	adds	r3, #50	; 0x32
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3333      	adds	r3, #51	; 0x33
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	7852      	ldrb	r2, [r2, #1]
 8001c88:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3334      	adds	r3, #52	; 0x34
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	7892      	ldrb	r2, [r2, #2]
 8001c92:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3335      	adds	r3, #53	; 0x35
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	78d2      	ldrb	r2, [r2, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2236      	movs	r2, #54	; 0x36
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fd25 	bl	80016f4 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <sample_hk+0x370>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	4639      	mov	r1, r7
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f00e fb58 	bl	8010368 <osMessageQueuePut>
	hk_seq++;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <sample_hk+0x374>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <sample_hk+0x374>)
 8001cc2:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8001cc4:	6978      	ldr	r0, [r7, #20]
 8001cc6:	f011 fbeb 	bl	80134a0 <free>
	free(timestamp);
 8001cca:	6938      	ldr	r0, [r7, #16]
 8001ccc:	f011 fbe8 	bl	80134a0 <free>
	free(uptime);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f011 fbe5 	bl	80134a0 <free>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	240002e0 	.word	0x240002e0
 8001ce4:	24000758 	.word	0x24000758

08001ce8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <MX_RTC_Init+0xb8>)
 8001d04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d0e:	2263      	movs	r2, #99	; 0x63
 8001d10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d14:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d32:	481a      	ldr	r0, [pc, #104]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d34:	f00a f98c 	bl	800c050 <HAL_RTC_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d3e:	f7ff fc71 	bl	8001624 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480f      	ldr	r0, [pc, #60]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d5e:	f00a f9f9 	bl	800c154 <HAL_RTC_SetTime>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001d68:	f7ff fc5c 	bl	8001624 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d70:	2301      	movs	r3, #1
 8001d72:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_RTC_Init+0xb4>)
 8001d84:	f00a fae0 	bl	800c348 <HAL_RTC_SetDate>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001d8e:	f7ff fc49 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2400075c 	.word	0x2400075c
 8001da0:	58004000 	.word	0x58004000

08001da4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0b2      	sub	sp, #200	; 0xc8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	22c0      	movs	r2, #192	; 0xc0
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f011 fb89 	bl	80134cc <memset>
  if(rtcHandle->Instance==RTC)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_RTC_MspInit+0x5c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d118      	bne.n	8001df6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_RTC_MspInit+0x60>)
 8001dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f007 fc3a 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001de6:	f7ff fc1d 	bl	8001624 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RTC_MspInit+0x64>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_RTC_MspInit+0x64>)
 8001df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001df6:	bf00      	nop
 8001df8:	37c8      	adds	r7, #200	; 0xc8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	58004000 	.word	0x58004000
 8001e04:	00019300 	.word	0x00019300
 8001e08:	58024400 	.word	0x58024400

08001e0c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e16:	2300      	movs	r3, #0
 8001e18:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <poll_i2c_sensor+0x78>)
 8001e2c:	f005 fe40 	bl	8007ab0 <HAL_I2C_Master_Transmit>
 8001e30:	4603      	mov	r3, r0
 8001e32:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <poll_i2c_sensor+0x34>
		Error_Handler();
 8001e3a:	f7ff fbf3 	bl	8001624 <Error_Handler>
 8001e3e:	e01b      	b.n	8001e78 <poll_i2c_sensor+0x6c>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	b299      	uxth	r1, r3
 8001e44:	f107 0208 	add.w	r2, r7, #8
 8001e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <poll_i2c_sensor+0x78>)
 8001e52:	f005 ff45 	bl	8007ce0 <HAL_I2C_Master_Receive>
 8001e56:	4603      	mov	r3, r0
 8001e58:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <poll_i2c_sensor+0x5a>
			Error_Handler();
 8001e60:	f7ff fbe0 	bl	8001624 <Error_Handler>
 8001e64:	e008      	b.n	8001e78 <poll_i2c_sensor+0x6c>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e66:	7a3b      	ldrb	r3, [r7, #8]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e70:	7a7a      	ldrb	r2, [r7, #9]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	10db      	asrs	r3, r3, #3
 8001e76:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	240006fc 	.word	0x240006fc

08001e88 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e90:	f107 010c 	add.w	r1, r7, #12
 8001e94:	2301      	movs	r3, #1
 8001e96:	2201      	movs	r2, #1
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <receive_pmt_spi+0x44>)
 8001e9a:	f00a fd1f 	bl	800c8dc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <receive_pmt_spi+0x44>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <receive_pmt_spi+0x44>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7bba      	ldrb	r2, [r7, #14]
 8001eba:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	701a      	strb	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	240007a8 	.word	0x240007a8

08001ed0 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001ed8:	f107 010c 	add.w	r1, r7, #12
 8001edc:	2364      	movs	r3, #100	; 0x64
 8001ede:	2201      	movs	r2, #1
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <receive_erpa_spi+0x44>)
 8001ee2:	f00a fcfb 	bl	800c8dc <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
 8001eec:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <receive_erpa_spi+0x44>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <receive_erpa_spi+0x44>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7bba      	ldrb	r2, [r7, #14]
 8001f02:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	24000830 	.word	0x24000830

08001f18 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <receive_erpa_adc+0x20>)
 8001f22:	885b      	ldrh	r3, [r3, #2]
 8001f24:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	89fa      	ldrh	r2, [r7, #14]
 8001f2a:	801a      	strh	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	24000780 	.word	0x24000780

08001f3c <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f44:	2390      	movs	r3, #144	; 0x90
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff60 	bl	8001e0c <poll_i2c_sensor>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f50:	2394      	movs	r3, #148	; 0x94
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff5a 	bl	8001e0c <poll_i2c_sensor>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f5c:	2392      	movs	r3, #146	; 0x92
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff54 	bl	8001e0c <poll_i2c_sensor>
 8001f64:	4603      	mov	r3, r0
 8001f66:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f68:	2396      	movs	r3, #150	; 0x96
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff4e 	bl	8001e0c <poll_i2c_sensor>
 8001f70:	4603      	mov	r3, r0
 8001f72:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	89fa      	ldrh	r2, [r7, #14]
 8001f78:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	89ba      	ldrh	r2, [r7, #12]
 8001f80:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	897a      	ldrh	r2, [r7, #10]
 8001f88:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3306      	adds	r3, #6
 8001f8e:	893a      	ldrh	r2, [r7, #8]
 8001f90:	801a      	strh	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <receive_hk_adc1+0xa0>)
 8001fa6:	8a9b      	ldrh	r3, [r3, #20]
 8001fa8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <receive_hk_adc1+0xa0>)
 8001fac:	8a1b      	ldrh	r3, [r3, #16]
 8001fae:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <receive_hk_adc1+0xa0>)
 8001fb2:	899b      	ldrh	r3, [r3, #12]
 8001fb4:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <receive_hk_adc1+0xa0>)
 8001fb8:	8a5b      	ldrh	r3, [r3, #18]
 8001fba:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	; (800203c <receive_hk_adc1+0xa0>)
 8001fbe:	889b      	ldrh	r3, [r3, #4]
 8001fc0:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <receive_hk_adc1+0xa0>)
 8001fc4:	88db      	ldrh	r3, [r3, #6]
 8001fc6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <receive_hk_adc1+0xa0>)
 8001fca:	89db      	ldrh	r3, [r3, #14]
 8001fcc:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <receive_hk_adc1+0xa0>)
 8001fd0:	891b      	ldrh	r3, [r3, #8]
 8001fd2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <receive_hk_adc1+0xa0>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <receive_hk_adc1+0xa0>)
 8001fdc:	895b      	ldrh	r3, [r3, #10]
 8001fde:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8bfa      	ldrh	r2, [r7, #30]
 8001fe4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	8bba      	ldrh	r2, [r7, #28]
 8001fec:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	8b7a      	ldrh	r2, [r7, #26]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	8b3a      	ldrh	r2, [r7, #24]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3308      	adds	r3, #8
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	330a      	adds	r3, #10
 800200a:	8aba      	ldrh	r2, [r7, #20]
 800200c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	330c      	adds	r3, #12
 8002012:	8a7a      	ldrh	r2, [r7, #18]
 8002014:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	330e      	adds	r3, #14
 800201a:	8a3a      	ldrh	r2, [r7, #16]
 800201c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3310      	adds	r3, #16
 8002022:	89fa      	ldrh	r2, [r7, #14]
 8002024:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3312      	adds	r3, #18
 800202a:	89ba      	ldrh	r2, [r7, #12]
 800202c:	801a      	strh	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	24000780 	.word	0x24000780

08002040 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <receive_hk_adc3+0x4c>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <receive_hk_adc3+0x4c>)
 8002050:	885b      	ldrh	r3, [r3, #2]
 8002052:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <receive_hk_adc3+0x4c>)
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <receive_hk_adc3+0x4c>)
 800205c:	88db      	ldrh	r3, [r3, #6]
 800205e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	89fa      	ldrh	r2, [r7, #14]
 8002064:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3302      	adds	r3, #2
 800206a:	89ba      	ldrh	r2, [r7, #12]
 800206c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	897a      	ldrh	r2, [r7, #10]
 8002074:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3306      	adds	r3, #6
 800207a:	893a      	ldrh	r2, [r7, #8]
 800207c:	801a      	strh	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	240007a0 	.word	0x240007a0

08002090 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002096:	4a29      	ldr	r2, [pc, #164]	; (800213c <MX_SPI1_Init+0xac>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <MX_SPI1_Init+0xa8>)
 800209c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020ac:	220f      	movs	r2, #15
 80020ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020c6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80020ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_SPI1_Init+0xa8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002100:	2200      	movs	r2, #0
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002106:	2200      	movs	r2, #0
 8002108:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_SPI1_Init+0xa8>)
 800210c:	2200      	movs	r2, #0
 800210e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002112:	2200      	movs	r2, #0
 8002114:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002118:	2200      	movs	r2, #0
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_SPI1_Init+0xa8>)
 800211e:	2200      	movs	r2, #0
 8002120:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002124:	f00a fab6 	bl	800c694 <HAL_SPI_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800212e:	f7ff fa79 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	240007a8 	.word	0x240007a8
 800213c:	40013000 	.word	0x40013000

08002140 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002146:	4a29      	ldr	r2, [pc, #164]	; (80021ec <MX_SPI2_Init+0xac>)
 8002148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800214a:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800214c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002154:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002158:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800215c:	220f      	movs	r2, #15
 800215e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800216e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002172:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002176:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800217a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002190:	2200      	movs	r2, #0
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_SPI2_Init+0xa8>)
 8002196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_SPI2_Init+0xa8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_SPI2_Init+0xa8>)
 80021d4:	f00a fa5e 	bl	800c694 <HAL_SPI_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80021de:	f7ff fa21 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24000830 	.word	0x24000830
 80021ec:	40003800 	.word	0x40003800

080021f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0bc      	sub	sp, #240	; 0xf0
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	22c0      	movs	r2, #192	; 0xc0
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f011 f95b 	bl	80134cc <memset>
  if(spiHandle->Instance==SPI1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_SPI_MspInit+0x15c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d145      	bne.n	80022ac <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800222c:	2300      	movs	r3, #0
 800222e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	4618      	mov	r0, r3
 8002236:	f007 fa0d 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002240:	f7ff f9f0 	bl	8001624 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_SPI_MspInit+0x160>)
 8002246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224a:	4a41      	ldr	r2, [pc, #260]	; (8002350 <HAL_SPI_MspInit+0x160>)
 800224c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002250:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002254:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_SPI_MspInit+0x160>)
 8002256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800225a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_SPI_MspInit+0x160>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_SPI_MspInit+0x160>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_SPI_MspInit+0x160>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002280:	2318      	movs	r3, #24
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002298:	2305      	movs	r3, #5
 800229a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a2:	4619      	mov	r1, r3
 80022a4:	482b      	ldr	r0, [pc, #172]	; (8002354 <HAL_SPI_MspInit+0x164>)
 80022a6:	f005 f985 	bl	80075b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022aa:	e04a      	b.n	8002342 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a29      	ldr	r2, [pc, #164]	; (8002358 <HAL_SPI_MspInit+0x168>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d145      	bne.n	8002342 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f007 f9c2 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80022d6:	f7ff f9a5 	bl	8001624 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_SPI_MspInit+0x160>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_SPI_MspInit+0x160>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_SPI_MspInit+0x160>)
 80022ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_SPI_MspInit+0x160>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_SPI_MspInit+0x160>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_SPI_MspInit+0x160>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002316:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002330:	2305      	movs	r3, #5
 8002332:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_SPI_MspInit+0x164>)
 800233e:	f005 f939 	bl	80075b4 <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	37f0      	adds	r7, #240	; 0xf0
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40013000 	.word	0x40013000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020400 	.word	0x58020400
 8002358:	40003800 	.word	0x40003800

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_MspInit+0x38>)
 8002364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_MspInit+0x38>)
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_MspInit+0x38>)
 8002374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	210f      	movs	r1, #15
 8002384:	f06f 0001 	mvn.w	r0, #1
 8002388:	f002 f8e2 	bl	8004550 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400

08002398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b090      	sub	sp, #64	; 0x40
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	d827      	bhi.n	80023f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80023a6:	2200      	movs	r2, #0
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	2036      	movs	r0, #54	; 0x36
 80023ac:	f002 f8d0 	bl	8004550 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b0:	2036      	movs	r0, #54	; 0x36
 80023b2:	f002 f8e7 	bl	8004584 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023b6:	4a29      	ldr	r2, [pc, #164]	; (800245c <HAL_InitTick+0xc4>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_InitTick+0xc8>)
 80023be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c2:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_InitTick+0xc8>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_InitTick+0xc8>)
 80023ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023da:	f107 0210 	add.w	r2, r7, #16
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f007 f8f3 	bl	80095d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_InitTick+0x6a>
 80023f4:	e001      	b.n	80023fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e02b      	b.n	8002452 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023fa:	f007 f8bd 	bl	8009578 <HAL_RCC_GetPCLK1Freq>
 80023fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002400:	e004      	b.n	800240c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002402:	f007 f8b9 	bl	8009578 <HAL_RCC_GetPCLK1Freq>
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_InitTick+0xcc>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	3b01      	subs	r3, #1
 8002418:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_InitTick+0xd0>)
 800241c:	4a13      	ldr	r2, [pc, #76]	; (800246c <HAL_InitTick+0xd4>)
 800241e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_InitTick+0xd0>)
 8002422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002426:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_InitTick+0xd0>)
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_InitTick+0xd0>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_InitTick+0xd0>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800243a:	480b      	ldr	r0, [pc, #44]	; (8002468 <HAL_InitTick+0xd0>)
 800243c:	f00a fd7b 	bl	800cf36 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <HAL_InitTick+0xd0>)
 8002448:	f00a fdcc 	bl	800cfe4 <HAL_TIM_Base_Start_IT>
 800244c:	4603      	mov	r3, r0
 800244e:	e000      	b.n	8002452 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	3740      	adds	r7, #64	; 0x40
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2400000c 	.word	0x2400000c
 8002460:	58024400 	.word	0x58024400
 8002464:	431bde83 	.word	0x431bde83
 8002468:	240008b8 	.word	0x240008b8
 800246c:	40001000 	.word	0x40001000

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Stream0_IRQHandler+0x10>)
 80024a2:	f003 fd75 	bl	8005f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	24000164 	.word	0x24000164

080024b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Stream1_IRQHandler+0x10>)
 80024b6:	f003 fd6b 	bl	8005f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	240001dc 	.word	0x240001dc

080024c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Stream2_IRQHandler+0x10>)
 80024ca:	f003 fd61 	bl	8005f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	24000a80 	.word	0x24000a80

080024d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA1_Stream5_IRQHandler+0x10>)
 80024de:	f003 fd57 	bl	8005f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	24000268 	.word	0x24000268

080024ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM1_BRK_IRQHandler+0x10>)
 80024f2:	f00a fe50 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	24000908 	.word	0x24000908

08002500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM1_UP_IRQHandler+0x10>)
 8002506:	f00a fe46 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	24000908 	.word	0x24000908

08002514 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM1_TRG_COM_IRQHandler+0x10>)
 800251a:	f00a fe3c 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	24000908 	.word	0x24000908

08002528 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM1_CC_IRQHandler+0x10>)
 800252e:	f00a fe32 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	24000908 	.word	0x24000908

0800253c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM2_IRQHandler+0x10>)
 8002542:	f00a fe28 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24000954 	.word	0x24000954

08002550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM3_IRQHandler+0x10>)
 8002556:	f00a fe1e 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	240009a0 	.word	0x240009a0

08002564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <USART1_IRQHandler+0x10>)
 800256a:	f00b ff59 	bl	800e420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240009ec 	.word	0x240009ec

08002578 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <TIM6_DAC_IRQHandler+0x20>)
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <TIM6_DAC_IRQHandler+0x20>)
 8002588:	f002 f82c 	bl	80045e4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <TIM6_DAC_IRQHandler+0x24>)
 800258e:	f00a fe02 	bl	800d196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	24000254 	.word	0x24000254
 800259c:	240008b8 	.word	0x240008b8

080025a0 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <ITM_SendChar+0x48>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <ITM_SendChar+0x48>)
 80025b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <ITM_SendChar+0x4c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <ITM_SendChar+0x4c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80025c2:	bf00      	nop
 80025c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f8      	beq.n	80025c4 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80025d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	6013      	str	r3, [r2, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000edfc 	.word	0xe000edfc
 80025ec:	e0000e00 	.word	0xe0000e00

080025f0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
	}

	return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e009      	b.n	8002650 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ffab 	bl	80025a0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <_write+0x12>
	}
	return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_close>:

int _close(int file) {
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_fstat>:

int _fstat(int file, struct stat *st) {
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268a:	605a      	str	r2, [r3, #4]
	return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file) {
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
		errno = ENOMEM;
 80026fc:	f010 fe9e 	bl	801343c <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	24080000 	.word	0x24080000
 800272c:	00000400 	.word	0x00000400
 8002730:	24000904 	.word	0x24000904
 8002734:	24005510 	.word	0x24005510

08002738 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <SystemInit+0xe4>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <SystemInit+0xe4>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <SystemInit+0xe8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	2b06      	cmp	r3, #6
 8002756:	d807      	bhi.n	8002768 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <SystemInit+0xe8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 030f 	bic.w	r3, r3, #15
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <SystemInit+0xe8>)
 8002762:	f043 0307 	orr.w	r3, r3, #7
 8002766:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <SystemInit+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <SystemInit+0xec>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <SystemInit+0xec>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4929      	ldr	r1, [pc, #164]	; (8002824 <SystemInit+0xec>)
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <SystemInit+0xf0>)
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <SystemInit+0xe8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <SystemInit+0xe8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <SystemInit+0xe8>)
 800279c:	f043 0307 	orr.w	r3, r3, #7
 80027a0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <SystemInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <SystemInit+0xec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <SystemInit+0xec>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <SystemInit+0xec>)
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <SystemInit+0xf4>)
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <SystemInit+0xec>)
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <SystemInit+0xf8>)
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <SystemInit+0xec>)
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <SystemInit+0xfc>)
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <SystemInit+0xec>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <SystemInit+0xec>)
 80027ce:	4a19      	ldr	r2, [pc, #100]	; (8002834 <SystemInit+0xfc>)
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <SystemInit+0xec>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SystemInit+0xec>)
 80027da:	4a16      	ldr	r2, [pc, #88]	; (8002834 <SystemInit+0xfc>)
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <SystemInit+0xec>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <SystemInit+0xec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <SystemInit+0xec>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <SystemInit+0xec>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <SystemInit+0x100>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <SystemInit+0x104>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002802:	d202      	bcs.n	800280a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <SystemInit+0x108>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <SystemInit+0x10c>)
 800280c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002810:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	52002000 	.word	0x52002000
 8002824:	58024400 	.word	0x58024400
 8002828:	eaf6ed7f 	.word	0xeaf6ed7f
 800282c:	02020200 	.word	0x02020200
 8002830:	01ff0000 	.word	0x01ff0000
 8002834:	01010280 	.word	0x01010280
 8002838:	5c001000 	.word	0x5c001000
 800283c:	ffff0000 	.word	0xffff0000
 8002840:	51008108 	.word	0x51008108
 8002844:	52004000 	.word	0x52004000

08002848 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b09a      	sub	sp, #104	; 0x68
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
 8002878:	615a      	str	r2, [r3, #20]
 800287a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	222c      	movs	r2, #44	; 0x2c
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f010 fe22 	bl	80134cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <MX_TIM1_Init+0x154>)
 800288a:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <MX_TIM1_Init+0x158>)
 800288c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <MX_TIM1_Init+0x154>)
 8002890:	2231      	movs	r2, #49	; 0x31
 8002892:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <MX_TIM1_Init+0x154>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <MX_TIM1_Init+0x154>)
 800289c:	f24f 4223 	movw	r2, #62499	; 0xf423
 80028a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <MX_TIM1_Init+0x154>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028a8:	4b3c      	ldr	r3, [pc, #240]	; (800299c <MX_TIM1_Init+0x154>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <MX_TIM1_Init+0x154>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028b4:	4839      	ldr	r0, [pc, #228]	; (800299c <MX_TIM1_Init+0x154>)
 80028b6:	f00a fb3e 	bl	800cf36 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80028c0:	f7fe feb0 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028ce:	4619      	mov	r1, r3
 80028d0:	4832      	ldr	r0, [pc, #200]	; (800299c <MX_TIM1_Init+0x154>)
 80028d2:	f00a fe7b 	bl	800d5cc <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80028dc:	f7fe fea2 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028e0:	482e      	ldr	r0, [pc, #184]	; (800299c <MX_TIM1_Init+0x154>)
 80028e2:	f00a fbf7 	bl	800d0d4 <HAL_TIM_PWM_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80028ec:	f7fe fe9a 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002900:	4619      	mov	r1, r3
 8002902:	4826      	ldr	r0, [pc, #152]	; (800299c <MX_TIM1_Init+0x154>)
 8002904:	f00b fb92 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800290e:	f7fe fe89 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002912:	2360      	movs	r3, #96	; 0x60
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8002916:	f240 13df 	movw	r3, #479	; 0x1df
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291c:	2300      	movs	r3, #0
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002934:	2200      	movs	r2, #0
 8002936:	4619      	mov	r1, r3
 8002938:	4818      	ldr	r0, [pc, #96]	; (800299c <MX_TIM1_Init+0x154>)
 800293a:	f00a fd33 	bl	800d3a4 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002944:	f7fe fe6e 	bl	8001624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <MX_TIM1_Init+0x154>)
 800297e:	f00b fbe3 	bl	800e148 <HAL_TIMEx_ConfigBreakDeadTime>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002988:	f7fe fe4c 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800298c:	4803      	ldr	r0, [pc, #12]	; (800299c <MX_TIM1_Init+0x154>)
 800298e:	f000 f949 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 8002992:	bf00      	nop
 8002994:	3768      	adds	r7, #104	; 0x68
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	24000908 	.word	0x24000908
 80029a0:	40010000 	.word	0x40010000

080029a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c4:	463b      	mov	r3, r7
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029e0:	2231      	movs	r2, #49	; 0x31
 80029e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80029ea:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029ec:	f640 4234 	movw	r2, #3124	; 0xc34
 80029f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <MX_TIM2_Init+0xe8>)
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029fe:	4823      	ldr	r0, [pc, #140]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a00:	f00a fa99 	bl	800cf36 <HAL_TIM_Base_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a0a:	f7fe fe0b 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	481c      	ldr	r0, [pc, #112]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a1c:	f00a fdd6 	bl	800d5cc <HAL_TIM_ConfigClockSource>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a26:	f7fe fdfd 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a2a:	4818      	ldr	r0, [pc, #96]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a2c:	f00a fb52 	bl	800d0d4 <HAL_TIM_PWM_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a36:	f7fe fdf5 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4810      	ldr	r0, [pc, #64]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a4a:	f00b faef 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a54:	f7fe fde6 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a58:	2360      	movs	r3, #96	; 0x60
 8002a5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a70:	f00a fc98 	bl	800d3a4 <HAL_TIM_PWM_ConfigChannel>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a7a:	f7fe fdd3 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a7e:	4803      	ldr	r0, [pc, #12]	; (8002a8c <MX_TIM2_Init+0xe8>)
 8002a80:	f000 f8d0 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 8002a84:	bf00      	nop
 8002a86:	3738      	adds	r7, #56	; 0x38
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	24000954 	.word	0x24000954

08002a90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <MX_TIM3_Init+0x98>)
 8002ab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ab6:	2263      	movs	r2, #99	; 0x63
 8002ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ac2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ad6:	f00a fa2e 	bl	800cf36 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ae0:	f7fe fda0 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002af2:	f00a fd6b 	bl	800d5cc <HAL_TIM_ConfigClockSource>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002afc:	f7fe fd92 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002b0e:	f00b fa8d 	bl	800e02c <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b18:	f7fe fd84 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	240009a0 	.word	0x240009a0
 8002b28:	40000400 	.word	0x40000400

08002b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <HAL_TIM_Base_MspInit+0xec>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d12f      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2105      	movs	r1, #5
 8002b60:	2018      	movs	r0, #24
 8002b62:	f001 fcf5 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002b66:	2018      	movs	r0, #24
 8002b68:	f001 fd0c 	bl	8004584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2105      	movs	r1, #5
 8002b70:	2019      	movs	r0, #25
 8002b72:	f001 fced 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002b76:	2019      	movs	r0, #25
 8002b78:	f001 fd04 	bl	8004584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2105      	movs	r1, #5
 8002b80:	201a      	movs	r0, #26
 8002b82:	f001 fce5 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002b86:	201a      	movs	r0, #26
 8002b88:	f001 fcfc 	bl	8004584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2105      	movs	r1, #5
 8002b90:	201b      	movs	r0, #27
 8002b92:	f001 fcdd 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b96:	201b      	movs	r0, #27
 8002b98:	f001 fcf4 	bl	8004584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b9c:	e038      	b.n	8002c10 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d117      	bne.n	8002bd8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2105      	movs	r1, #5
 8002bca:	201c      	movs	r0, #28
 8002bcc:	f001 fcc0 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd0:	201c      	movs	r0, #28
 8002bd2:	f001 fcd7 	bl	8004584 <HAL_NVIC_EnableIRQ>
}
 8002bd6:	e01b      	b.n	8002c10 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_TIM_Base_MspInit+0xf4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d116      	bne.n	8002c10 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_TIM_Base_MspInit+0xf0>)
 8002bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2105      	movs	r1, #5
 8002c04:	201d      	movs	r0, #29
 8002c06:	f001 fca3 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	f001 fcba 	bl	8004584 <HAL_NVIC_EnableIRQ>
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	40000400 	.word	0x40000400

08002c24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_TIM_MspPostInit+0xb8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d120      	bne.n	8002c88 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4818      	ldr	r0, [pc, #96]	; (8002ce4 <HAL_TIM_MspPostInit+0xc0>)
 8002c82:	f004 fc97 	bl	80075b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c86:	e024      	b.n	8002cd2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d11f      	bne.n	8002cd2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_TIM_MspPostInit+0xbc>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <HAL_TIM_MspPostInit+0xc4>)
 8002cce:	f004 fc71 	bl	80075b4 <HAL_GPIO_Init>
}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58020000 	.word	0x58020000
 8002ce8:	58020400 	.word	0x58020400

08002cec <get_uptime>:
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
}


void get_uptime(uint8_t *buffer) {
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <get_uptime+0x88>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <get_uptime+0x8c>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <get_uptime+0x88>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d005      	beq.n	8002d1a <get_uptime+0x2e>
		ms = uptime_millis;
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <get_uptime+0x88>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <get_uptime+0x8c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d20:	fb03 f202 	mul.w	r2, r3, r2
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <get_uptime+0x8c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4914      	ldr	r1, [pc, #80]	; (8002d7c <get_uptime+0x90>)
 8002d2c:	fba1 1303 	umull	r1, r3, r1, r3
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	0e1b      	lsrs	r3, r3, #24
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0c1a      	lsrs	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0a1a      	lsrs	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3303      	adds	r3, #3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	240002e8 	.word	0x240002e8
 8002d78:	e000e010 	.word	0xe000e010
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <get_timestamp>:



void get_timestamp(uint8_t *buffer) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4821      	ldr	r0, [pc, #132]	; (8002e18 <get_timestamp+0x98>)
 8002d92:	f009 fa7d 	bl	800c290 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481e      	ldr	r0, [pc, #120]	; (8002e18 <get_timestamp+0x98>)
 8002da0:	f009 fb5a 	bl	800c458 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2264      	movs	r2, #100	; 0x64
 8002da8:	fb03 f202 	mul.w	r2, r3, r2
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <get_timestamp+0x9c>)
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	7b7a      	ldrb	r2, [r7, #13]
 8002dbe:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	7bba      	ldrb	r2, [r7, #14]
 8002dc6:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3303      	adds	r3, #3
 8002dcc:	7c3a      	ldrb	r2, [r7, #16]
 8002dce:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	7c7a      	ldrb	r2, [r7, #17]
 8002dd6:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3305      	adds	r3, #5
 8002ddc:	7cba      	ldrb	r2, [r7, #18]
 8002dde:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	0e1a      	lsrs	r2, r3, #24
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3306      	adds	r3, #6
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	0c1a      	lsrs	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3307      	adds	r3, #7
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	0a1a      	lsrs	r2, r3, #8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3309      	adds	r3, #9
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2400075c 	.word	0x2400075c
 8002e1c:	000f4240 	.word	0x000f4240

08002e20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e26:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <MX_USART1_UART_Init+0x94>)
 8002e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e2c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e46:	220c      	movs	r2, #12
 8002e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e68:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e6a:	f00b fa09 	bl	800e280 <HAL_UART_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e74:	f7fe fbd6 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e7c:	f00c ffa3 	bl	800fdc6 <HAL_UARTEx_SetTxFifoThreshold>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e86:	f7fe fbcd 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e8e:	f00c ffd8 	bl	800fe42 <HAL_UARTEx_SetRxFifoThreshold>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e98:	f7fe fbc4 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <MX_USART1_UART_Init+0x90>)
 8002e9e:	f00c ff59 	bl	800fd54 <HAL_UARTEx_DisableFifoMode>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ea8:	f7fe fbbc 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	240009ec 	.word	0x240009ec
 8002eb4:	40011000 	.word	0x40011000

08002eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0ba      	sub	sp, #232	; 0xe8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	22c0      	movs	r2, #192	; 0xc0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f010 faf7 	bl	80134cc <memset>
  if(uartHandle->Instance==USART1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_UART_MspInit+0x130>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d17b      	bne.n	8002fe0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ee8:	f04f 0201 	mov.w	r2, #1
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002ef4:	2318      	movs	r3, #24
 8002ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fba8 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f0a:	f7fe fb8b 	bl	8001624 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f14:	4a35      	ldr	r2, [pc, #212]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f32:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_UART_MspInit+0x134>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f64:	2307      	movs	r3, #7
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	481f      	ldr	r0, [pc, #124]	; (8002ff0 <HAL_UART_MspInit+0x138>)
 8002f72:	f004 fb1f 	bl	80075b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002f76:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_UART_MspInit+0x140>)
 8002f7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f7e:	222a      	movs	r2, #42	; 0x2a
 8002f80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f84:	2240      	movs	r2, #64	; 0x40
 8002f86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f94:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fb4:	480f      	ldr	r0, [pc, #60]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002fb6:	f001 fcc1 	bl	800493c <HAL_DMA_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002fc0:	f7fe fb30 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_UART_MspInit+0x13c>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	2025      	movs	r0, #37	; 0x25
 8002fd6:	f001 fabb 	bl	8004550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fda:	2025      	movs	r0, #37	; 0x25
 8002fdc:	f001 fad2 	bl	8004584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	37e8      	adds	r7, #232	; 0xe8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	58024400 	.word	0x58024400
 8002ff0:	58020000 	.word	0x58020000
 8002ff4:	24000a80 	.word	0x24000a80
 8002ff8:	40020040 	.word	0x40020040

08002ffc <set_rail_monitor>:
	status = 1;

	return status;
}

uint8_t set_rail_monitor() {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8003006:	2014      	movs	r0, #20
 8003008:	f010 fa42 	bl	8013490 <malloc>
 800300c:	4603      	mov	r3, r0
 800300e:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8003010:	2008      	movs	r0, #8
 8003012:	f010 fa3d 	bl	8013490 <malloc>
 8003016:	4603      	mov	r3, r0
 8003018:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800301a:	2008      	movs	r0, #8
 800301c:	f010 fa38 	bl	8013490 <malloc>
 8003020:	4603      	mov	r3, r0
 8003022:	603b      	str	r3, [r7, #0]

	receive_hk_i2c(hk_i2c);
 8003024:	6838      	ldr	r0, [r7, #0]
 8003026:	f7fe ff89 	bl	8001f3c <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 800302a:	68b8      	ldr	r0, [r7, #8]
 800302c:	f7fe ffb6 	bl	8001f9c <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff f805 	bl	8002040 <receive_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	885a      	ldrh	r2, [r3, #2]
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <set_rail_monitor+0x118>)
 800303c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <set_rail_monitor+0x118>)
 8003044:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304c:	b29a      	uxth	r2, r3
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <set_rail_monitor+0x118>)
 8003050:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3302      	adds	r3, #2
 8003056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <set_rail_monitor+0x118>)
 800305e:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	3304      	adds	r3, #4
 8003064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003068:	b29a      	uxth	r2, r3
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <set_rail_monitor+0x118>)
 800306c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3306      	adds	r3, #6
 8003072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003076:	b29a      	uxth	r2, r3
 8003078:	4b26      	ldr	r3, [pc, #152]	; (8003114 <set_rail_monitor+0x118>)
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <set_rail_monitor+0x118>)
 8003082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	885a      	ldrh	r2, [r3, #2]
 800308a:	4b22      	ldr	r3, [pc, #136]	; (8003114 <set_rail_monitor+0x118>)
 800308c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	889a      	ldrh	r2, [r3, #4]
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <set_rail_monitor+0x118>)
 8003096:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	88da      	ldrh	r2, [r3, #6]
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <set_rail_monitor+0x118>)
 80030a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	899a      	ldrh	r2, [r3, #12]
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <set_rail_monitor+0x118>)
 80030aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	88da      	ldrh	r2, [r3, #6]
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <set_rail_monitor+0x118>)
 80030b4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	889a      	ldrh	r2, [r3, #4]
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <set_rail_monitor+0x118>)
 80030be:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	89da      	ldrh	r2, [r3, #14]
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <set_rail_monitor+0x118>)
 80030c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	8a1a      	ldrh	r2, [r3, #16]
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <set_rail_monitor+0x118>)
 80030d2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	891a      	ldrh	r2, [r3, #8]
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <set_rail_monitor+0x118>)
 80030dc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	895a      	ldrh	r2, [r3, #10]
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <set_rail_monitor+0x118>)
 80030e6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	8a5a      	ldrh	r2, [r3, #18]
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <set_rail_monitor+0x118>)
 80030f0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 80030f4:	68b8      	ldr	r0, [r7, #8]
 80030f6:	f010 f9d3 	bl	80134a0 <free>
	free(hk_adc3);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f010 f9d0 	bl	80134a0 <free>
	free(hk_i2c);
 8003100:	6838      	ldr	r0, [r7, #0]
 8003102:	f010 f9cd 	bl	80134a0 <free>

	status = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]

	return status;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	24000af8 	.word	0x24000af8

08003118 <in_range>:
 * @param min The minimum value of the range (inclusive).
 * @param max The maximum value of the range (inclusive).
 *
 * @return int Returns 1 if the value is within the range, otherwise 0.
 */
uint8_t in_range(uint16_t raw, int min, int max) {
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003126:	89fb      	ldrh	r3, [r7, #14]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	db05      	blt.n	800313a <in_range+0x22>
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	dc01      	bgt.n	800313a <in_range+0x22>
		return 1;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <in_range+0x24>
	}
	return 0;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
	return rail_monitor;
 800314c:	4b02      	ldr	r3, [pc, #8]	; (8003158 <get_rail_monitor+0x10>)
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	24000af8 	.word	0x24000af8

0800315c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800315c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003160:	f7ff faea 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003166:	490d      	ldr	r1, [pc, #52]	; (800319c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800316c:	e002      	b.n	8003174 <LoopCopyDataInit>

0800316e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003172:	3304      	adds	r3, #4

08003174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003178:	d3f9      	bcc.n	800316e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800317c:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003180:	e001      	b.n	8003186 <LoopFillZerobss>

08003182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003184:	3204      	adds	r2, #4

08003186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003188:	d3fb      	bcc.n	8003182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800318a:	f010 f95d 	bl	8013448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318e:	f7fe f95d 	bl	800144c <main>
  bx  lr
 8003192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003194:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003198:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800319c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80031a0:	08014364 	.word	0x08014364
  ldr r2, =_sbss
 80031a4:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80031a8:	24005510 	.word	0x24005510

080031ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC3_IRQHandler>
	...

080031b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b6:	2003      	movs	r0, #3
 80031b8:	f001 f9bf 	bl	800453a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031bc:	f006 f832 	bl	8009224 <HAL_RCC_GetSysClockFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_Init+0x68>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	4913      	ldr	r1, [pc, #76]	; (800321c <HAL_Init+0x6c>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_Init+0x68>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_Init+0x6c>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_Init+0x70>)
 80031f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_Init+0x74>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031fa:	2005      	movs	r0, #5
 80031fc:	f7ff f8cc 	bl	8002398 <HAL_InitTick>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e002      	b.n	8003210 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800320a:	f7ff f8a7 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58024400 	.word	0x58024400
 800321c:	080142b0 	.word	0x080142b0
 8003220:	24000008 	.word	0x24000008
 8003224:	24000004 	.word	0x24000004

08003228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_IncTick+0x20>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_IncTick+0x24>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4413      	add	r3, r2
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <HAL_IncTick+0x24>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	24000010 	.word	0x24000010
 800324c:	24000bac 	.word	0x24000bac

08003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return uwTick;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_GetTick+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	24000bac 	.word	0x24000bac

08003268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_GetREVID+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0c1b      	lsrs	r3, r3, #16
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	5c001000 	.word	0x5c001000

08003280 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	58000400 	.word	0x58000400

080032ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	611a      	str	r2, [r3, #16]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3360      	adds	r3, #96	; 0x60
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
  }
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3330      	adds	r3, #48	; 0x30
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	4413      	add	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	211f      	movs	r1, #31
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	f003 011f 	and.w	r1, r3, #31
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	431a      	orrs	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3314      	adds	r3, #20
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	0e5b      	lsrs	r3, r3, #25
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	0d1b      	lsrs	r3, r3, #20
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2107      	movs	r1, #7
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	401a      	ands	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0318 	and.w	r3, r3, #24
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003490:	40d9      	lsrs	r1, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	400b      	ands	r3, r1
 8003496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800349a:	431a      	orrs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	000fffff 	.word	0x000fffff

080034b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6093      	str	r3, [r2, #8]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	5fffffc0 	.word	0x5fffffc0

080034d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ec:	d101      	bne.n	80034f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <LL_ADC_EnableInternalRegulator+0x24>)
 800350e:	4013      	ands	r3, r2
 8003510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	6fffffc0 	.word	0x6fffffc0

08003528 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353c:	d101      	bne.n	8003542 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <LL_ADC_IsEnabled+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_IsEnabled+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d101      	bne.n	800358e <LL_ADC_REG_IsConversionOngoing+0x18>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d101      	bne.n	80035b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e18f      	b.n	80038fe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd f9ad 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff67 	bl	80034d8 <LL_ADC_IsDeepPowerDownEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff4d 	bl	80034b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ff82 	bl	8003528 <LL_ADC_IsInternalRegulatorEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ff66 	bl	8003500 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003634:	4b87      	ldr	r3, [pc, #540]	; (8003854 <HAL_ADC_Init+0x290>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	4a87      	ldr	r2, [pc, #540]	; (8003858 <HAL_ADC_Init+0x294>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	3301      	adds	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003646:	e002      	b.n	800364e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff65 	bl	8003528 <LL_ADC_IsInternalRegulatorEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10d      	bne.n	8003680 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0210 	orr.w	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff76 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 800368a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8129 	bne.w	80038ec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 8125 	bne.w	80038ec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff4a 	bl	8003550 <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d136      	bne.n	8003730 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a65      	ldr	r2, [pc, #404]	; (800385c <HAL_ADC_Init+0x298>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_Init+0x112>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_ADC_Init+0x29c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10e      	bne.n	80036f4 <HAL_ADC_Init+0x130>
 80036d6:	4861      	ldr	r0, [pc, #388]	; (800385c <HAL_ADC_Init+0x298>)
 80036d8:	f7ff ff3a 	bl	8003550 <LL_ADC_IsEnabled>
 80036dc:	4604      	mov	r4, r0
 80036de:	4860      	ldr	r0, [pc, #384]	; (8003860 <HAL_ADC_Init+0x29c>)
 80036e0:	f7ff ff36 	bl	8003550 <LL_ADC_IsEnabled>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4323      	orrs	r3, r4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e008      	b.n	8003706 <HAL_ADC_Init+0x142>
 80036f4:	485b      	ldr	r0, [pc, #364]	; (8003864 <HAL_ADC_Init+0x2a0>)
 80036f6:	f7ff ff2b 	bl	8003550 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d012      	beq.n	8003730 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a53      	ldr	r2, [pc, #332]	; (800385c <HAL_ADC_Init+0x298>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_ADC_Init+0x15a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_ADC_Init+0x29c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Init+0x15e>
 800371e:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_ADC_Init+0x2a4>)
 8003720:	e000      	b.n	8003724 <HAL_ADC_Init+0x160>
 8003722:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_ADC_Init+0x2a8>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f7ff fdbe 	bl	80032ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003730:	f7ff fd9a 	bl	8003268 <HAL_GetREVID>
 8003734:	4603      	mov	r3, r0
 8003736:	f241 0203 	movw	r2, #4099	; 0x1003
 800373a:	4293      	cmp	r3, r2
 800373c:	d914      	bls.n	8003768 <HAL_ADC_Init+0x1a4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b10      	cmp	r3, #16
 8003744:	d110      	bne.n	8003768 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7d5b      	ldrb	r3, [r3, #21]
 800374a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003750:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003756:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7f1b      	ldrb	r3, [r3, #28]
 800375c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800375e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003760:	f043 030c 	orr.w	r3, r3, #12
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	e00d      	b.n	8003784 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7d5b      	ldrb	r3, [r3, #21]
 800376c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003772:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003778:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7f1b      	ldrb	r3, [r3, #28]
 800377e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7f1b      	ldrb	r3, [r3, #28]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	3b01      	subs	r3, #1
 8003792:	045b      	lsls	r3, r3, #17
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_ADC_Init+0x2ac>)
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fed1 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 80037d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fede 	bl	800359c <LL_ADC_INJ_IsConversionOngoing>
 80037e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d15f      	bne.n	80038a8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d15c      	bne.n	80038a8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7d1b      	ldrb	r3, [r3, #20]
 80037f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_ADC_Init+0x2b0>)
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	430b      	orrs	r3, r1
 800380e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003816:	2b01      	cmp	r3, #1
 8003818:	d130      	bne.n	800387c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_ADC_Init+0x2b4>)
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800382e:	3a01      	subs	r2, #1
 8003830:	0411      	lsls	r1, r2, #16
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800383c:	4311      	orrs	r1, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003842:	430a      	orrs	r2, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	611a      	str	r2, [r3, #16]
 8003850:	e01c      	b.n	800388c <HAL_ADC_Init+0x2c8>
 8003852:	bf00      	nop
 8003854:	24000004 	.word	0x24000004
 8003858:	053e2d63 	.word	0x053e2d63
 800385c:	40022000 	.word	0x40022000
 8003860:	40022100 	.word	0x40022100
 8003864:	58026000 	.word	0x58026000
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300
 8003870:	fff0c003 	.word	0xfff0c003
 8003874:	ffffbffc 	.word	0xffffbffc
 8003878:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fb8c 	bl	8003fc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10c      	bne.n	80038ca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f023 010f 	bic.w	r1, r3, #15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
 80038c8:	e007      	b.n	80038da <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 020f 	bic.w	r2, r2, #15
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ea:	e007      	b.n	80038fc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f043 0210 	orr.w	r2, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}
 8003906:	bf00      	nop

08003908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b0a1      	sub	sp, #132	; 0x84
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a65      	ldr	r2, [pc, #404]	; (8003ab8 <HAL_ADC_ConfigChannel+0x1b0>)
 8003922:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x2a>
 800392e:	2302      	movs	r3, #2
 8003930:	e32e      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x688>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fe19 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 8313 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db2c      	blt.n	80039ae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x6a>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	e016      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x98>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003982:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800398a:	2320      	movs	r3, #32
 800398c:	e003      	b.n	8003996 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800398e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2201      	movs	r2, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	69d1      	ldr	r1, [r2, #28]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	430b      	orrs	r3, r1
 80039ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7ff fcfe 	bl	80033bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fdd6 	bl	8003576 <LL_ADC_REG_IsConversionOngoing>
 80039ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fde3 	bl	800359c <LL_ADC_INJ_IsConversionOngoing>
 80039d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 80b8 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80b4 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f7ff fd0d 	bl	8003414 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_ADC_ConfigChannel+0x1b4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x118>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	e01d      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x154>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x13e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	e00a      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x154>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d02c      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a74:	f7ff fc4e 	bl	8003314 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6919      	ldr	r1, [r3, #16]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	7e5b      	ldrb	r3, [r3, #25]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x186>
 8003a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a8c:	e000      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x188>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f7ff fc78 	bl	8003386 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6919      	ldr	r1, [r3, #16]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	7e1b      	ldrb	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1a4>
 8003aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_ConfigChannel+0x1a6>
 8003aac:	2300      	movs	r3, #0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7ff fc50 	bl	8003354 <LL_ADC_SetDataRightShift>
 8003ab4:	e04c      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x248>
 8003ab6:	bf00      	nop
 8003ab8:	47ff0000 	.word	0x47ff0000
 8003abc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	069b      	lsls	r3, r3, #26
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	069b      	lsls	r3, r3, #26
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b06:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	069b      	lsls	r3, r3, #26
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b2a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	069b      	lsls	r3, r3, #26
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fcfb 	bl	8003550 <LL_ADC_IsEnabled>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 8211 	bne.w	8003f84 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f7ff fc7c 	bl	800346c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4aa1      	ldr	r2, [pc, #644]	; (8003e00 <HAL_ADC_ConfigChannel+0x4f8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f040 812e 	bne.w	8003ddc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x2a0>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	3301      	adds	r3, #1
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	bf94      	ite	ls
 8003ba0:	2301      	movls	r3, #1
 8003ba2:	2300      	movhi	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e019      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x2d4>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e003      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2b09      	cmp	r3, #9
 8003bd4:	bf94      	ite	ls
 8003bd6:	2301      	movls	r3, #1
 8003bd8:	2300      	movhi	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d079      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x2f4>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	069b      	lsls	r3, r3, #26
 8003bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bfa:	e015      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x320>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003c14:	2320      	movs	r3, #32
 8003c16:	e003      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	069b      	lsls	r3, r3, #26
 8003c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d109      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x340>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	e017      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x370>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	e003      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	ea42 0103 	orr.w	r1, r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x396>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	051b      	lsls	r3, r3, #20
 8003c9c:	e018      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x3c8>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	e003      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	e07e      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x3e8>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	069b      	lsls	r3, r3, #26
 8003cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cee:	e015      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x414>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003d08:	2320      	movs	r3, #32
 8003d0a:	e003      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	069b      	lsls	r3, r3, #26
 8003d18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x434>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	e017      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x464>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	61bb      	str	r3, [r7, #24]
  return result;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e003      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	ea42 0103 	orr.w	r1, r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x490>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	3301      	adds	r3, #1
 8003d84:	f003 021f 	and.w	r2, r3, #31
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b1e      	subs	r3, #30
 8003d90:	051b      	lsls	r3, r3, #20
 8003d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d96:	e01b      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x4c8>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	60fb      	str	r3, [r7, #12]
  return result;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003db0:	2320      	movs	r3, #32
 8003db2:	e003      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f003 021f 	and.w	r2, r3, #31
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b1e      	subs	r3, #30
 8003dca:	051b      	lsls	r3, r3, #20
 8003dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7ff fb1c 	bl	8003414 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f280 80cf 	bge.w	8003f84 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a06      	ldr	r2, [pc, #24]	; (8003e04 <HAL_ADC_ConfigChannel+0x4fc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0x4f2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_ADC_ConfigChannel+0x500>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10a      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x508>
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_ADC_ConfigChannel+0x504>)
 8003dfc:	e009      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x50a>
 8003dfe:	bf00      	nop
 8003e00:	47ff0000 	.word	0x47ff0000
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40022100 	.word	0x40022100
 8003e0c:	40022300 	.word	0x40022300
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_ADC_ConfigChannel+0x690>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fa70 	bl	80032f8 <LL_ADC_GetCommonPathInternalCh>
 8003e18:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <HAL_ADC_ConfigChannel+0x694>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x526>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <HAL_ADC_ConfigChannel+0x698>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10e      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x544>
 8003e2e:	485b      	ldr	r0, [pc, #364]	; (8003f9c <HAL_ADC_ConfigChannel+0x694>)
 8003e30:	f7ff fb8e 	bl	8003550 <LL_ADC_IsEnabled>
 8003e34:	4604      	mov	r4, r0
 8003e36:	485a      	ldr	r0, [pc, #360]	; (8003fa0 <HAL_ADC_ConfigChannel+0x698>)
 8003e38:	f7ff fb8a 	bl	8003550 <LL_ADC_IsEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e008      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x556>
 8003e4c:	4855      	ldr	r0, [pc, #340]	; (8003fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8003e4e:	f7ff fb7f 	bl	8003550 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d07d      	beq.n	8003f5e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_ADC_ConfigChannel+0x6a0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d130      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x5c6>
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d12b      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4a      	ldr	r2, [pc, #296]	; (8003fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 8081 	bne.w	8003f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <HAL_ADC_ConfigChannel+0x694>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_ADC_ConfigChannel+0x58e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a43      	ldr	r2, [pc, #268]	; (8003fa0 <HAL_ADC_ConfigChannel+0x698>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x592>
 8003e96:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_ADC_ConfigChannel+0x6a4>)
 8003e98:	e000      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x594>
 8003e9a:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <HAL_ADC_ConfigChannel+0x690>)
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff fa14 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_ADC_ConfigChannel+0x6a8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <HAL_ADC_ConfigChannel+0x6ac>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	3301      	adds	r3, #1
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ebe:	e002      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ecc:	e05a      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d11e      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x60e>
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d119      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d14b      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <HAL_ADC_ConfigChannel+0x694>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x5f8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_ADC_ConfigChannel+0x698>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x5fc>
 8003f00:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <HAL_ADC_ConfigChannel+0x6a4>)
 8003f02:	e000      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x5fe>
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_ADC_ConfigChannel+0x690>)
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7ff f9df 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f14:	e036      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <HAL_ADC_ConfigChannel+0x6b4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d131      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12c      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_ADC_ConfigChannel+0x69c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d127      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_ADC_ConfigChannel+0x694>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0x640>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_ADC_ConfigChannel+0x698>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x644>
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_ADC_ConfigChannel+0x6a4>)
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x646>
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_ADC_ConfigChannel+0x690>)
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7ff f9bb 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
 8003f5c:	e012      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f70:	e008      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f043 0220 	orr.w	r2, r3, #32
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3784      	adds	r7, #132	; 0x84
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	58026300 	.word	0x58026300
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40022100 	.word	0x40022100
 8003fa4:	58026000 	.word	0x58026000
 8003fa8:	cb840000 	.word	0xcb840000
 8003fac:	40022300 	.word	0x40022300
 8003fb0:	24000004 	.word	0x24000004
 8003fb4:	053e2d63 	.word	0x053e2d63
 8003fb8:	c7520000 	.word	0xc7520000
 8003fbc:	cfb80000 	.word	0xcfb80000

08003fc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	; (80041b8 <ADC_ConfigureBoostMode+0x1f8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <ADC_ConfigureBoostMode+0x1c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a79      	ldr	r2, [pc, #484]	; (80041bc <ADC_ConfigureBoostMode+0x1fc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d109      	bne.n	8003ff0 <ADC_ConfigureBoostMode+0x30>
 8003fdc:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <ADC_ConfigureBoostMode+0x200>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <ADC_ConfigureBoostMode+0x42>
 8003ff0:	4b74      	ldr	r3, [pc, #464]	; (80041c4 <ADC_ConfigureBoostMode+0x204>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01c      	beq.n	8004040 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004006:	f005 fa87 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800400a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004014:	d010      	beq.n	8004038 <ADC_ConfigureBoostMode+0x78>
 8004016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800401a:	d873      	bhi.n	8004104 <ADC_ConfigureBoostMode+0x144>
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d002      	beq.n	8004028 <ADC_ConfigureBoostMode+0x68>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004026:	d16d      	bne.n	8004104 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e068      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	60fb      	str	r3, [r7, #12]
        break;
 800403e:	e064      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004040:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f006 fd0e 	bl	800aa68 <HAL_RCCEx_GetPeriphCLKFreq>
 800404c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004056:	d051      	beq.n	80040fc <ADC_ConfigureBoostMode+0x13c>
 8004058:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800405c:	d854      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800405e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004062:	d047      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x134>
 8004064:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004068:	d84e      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800406a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800406e:	d03d      	beq.n	80040ec <ADC_ConfigureBoostMode+0x12c>
 8004070:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004074:	d848      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 8004076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800407a:	d033      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x124>
 800407c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004080:	d842      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 8004082:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004086:	d029      	beq.n	80040dc <ADC_ConfigureBoostMode+0x11c>
 8004088:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800408c:	d83c      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800408e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004092:	d01a      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 8004094:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004098:	d836      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 800409a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800409e:	d014      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040a4:	d830      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040aa:	d00e      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b0:	d82a      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b6:	d008      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040bc:	d824      	bhi.n	8004108 <ADC_ConfigureBoostMode+0x148>
 80040be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c2:	d002      	beq.n	80040ca <ADC_ConfigureBoostMode+0x10a>
 80040c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040c8:	d11e      	bne.n	8004108 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e016      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e012      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e00e      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	60fb      	str	r3, [r7, #12]
        break;
 80040f2:	e00a      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	09db      	lsrs	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
        break;
 80040fa:	e006      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	60fb      	str	r3, [r7, #12]
        break;
 8004102:	e002      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004108:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800410a:	f7ff f8ad 	bl	8003268 <HAL_GetREVID>
 800410e:	4603      	mov	r3, r0
 8004110:	f241 0203 	movw	r2, #4099	; 0x1003
 8004114:	4293      	cmp	r3, r2
 8004116:	d815      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <ADC_ConfigureBoostMode+0x208>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d908      	bls.n	8004132 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004130:	e03e      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	e035      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <ADC_ConfigureBoostMode+0x20c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d808      	bhi.n	8004164 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004160:	609a      	str	r2, [r3, #8]
}
 8004162:	e025      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <ADC_ConfigureBoostMode+0x210>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d80a      	bhi.n	8004182 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	e016      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <ADC_ConfigureBoostMode+0x214>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d80a      	bhi.n	80041a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419c:	609a      	str	r2, [r3, #8]
}
 800419e:	e007      	b.n	80041b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40022100 	.word	0x40022100
 80041c0:	40022300 	.word	0x40022300
 80041c4:	58026300 	.word	0x58026300
 80041c8:	01312d00 	.word	0x01312d00
 80041cc:	005f5e10 	.word	0x005f5e10
 80041d0:	00bebc20 	.word	0x00bebc20
 80041d4:	017d7840 	.word	0x017d7840

080041d8 <LL_ADC_IsEnabled>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <LL_ADC_IsEnabled+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_ADC_IsEnabled+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_REG_IsConversionOngoing>:
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d101      	bne.n	8004216 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b09f      	sub	sp, #124	; 0x7c
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800423e:	2302      	movs	r3, #2
 8004240:	e0be      	b.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800424e:	2300      	movs	r3, #0
 8004250:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d102      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800425c:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	e001      	b.n	8004266 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e09d      	b.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ffb9 	bl	80041fe <LL_ADC_REG_IsConversionOngoing>
 800428c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ffb3 	bl	80041fe <LL_ADC_REG_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d17f      	bne.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800429e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d17c      	bne.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a47      	ldr	r2, [pc, #284]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a46      	ldr	r2, [pc, #280]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042ba:	e000      	b.n	80042be <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d039      	beq.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10e      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042ee:	4836      	ldr	r0, [pc, #216]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042f0:	f7ff ff72 	bl	80041d8 <LL_ADC_IsEnabled>
 80042f4:	4604      	mov	r4, r0
 80042f6:	4835      	ldr	r0, [pc, #212]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042f8:	f7ff ff6e 	bl	80041d8 <LL_ADC_IsEnabled>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4323      	orrs	r3, r4
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e008      	b.n	800431e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800430c:	4832      	ldr	r0, [pc, #200]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800430e:	f7ff ff63 	bl	80041d8 <LL_ADC_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d047      	beq.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004328:	4013      	ands	r3, r2
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	430a      	orrs	r2, r1
 8004334:	431a      	orrs	r2, r3
 8004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004338:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800433a:	e03a      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d10e      	bne.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800435c:	481a      	ldr	r0, [pc, #104]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800435e:	f7ff ff3b 	bl	80041d8 <LL_ADC_IsEnabled>
 8004362:	4604      	mov	r4, r0
 8004364:	4819      	ldr	r0, [pc, #100]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004366:	f7ff ff37 	bl	80041d8 <LL_ADC_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	4323      	orrs	r3, r4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e008      	b.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800437a:	4817      	ldr	r0, [pc, #92]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800437c:	f7ff ff2c 	bl	80041d8 <LL_ADC_IsEnabled>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004396:	4013      	ands	r3, r2
 8004398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800439a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800439c:	e009      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80043b0:	e000      	b.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	377c      	adds	r7, #124	; 0x7c
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40022100 	.word	0x40022100
 80043d0:	40022300 	.word	0x40022300
 80043d4:	58026300 	.word	0x58026300
 80043d8:	58026000 	.word	0x58026000
 80043dc:	fffff0e0 	.word	0xfffff0e0

080043e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <__NVIC_SetPriorityGrouping+0x40>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <__NVIC_SetPriorityGrouping+0x44>)
 800440a:	4313      	orrs	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800440e:	4a04      	ldr	r2, [pc, #16]	; (8004420 <__NVIC_SetPriorityGrouping+0x40>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	60d3      	str	r3, [r2, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000ed00 	.word	0xe000ed00
 8004424:	05fa0000 	.word	0x05fa0000

08004428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <__NVIC_GetPriorityGrouping+0x18>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0307 	and.w	r3, r3, #7
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800444e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004452:	2b00      	cmp	r3, #0
 8004454:	db0b      	blt.n	800446e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	f003 021f 	and.w	r2, r3, #31
 800445c:	4907      	ldr	r1, [pc, #28]	; (800447c <__NVIC_EnableIRQ+0x38>)
 800445e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2001      	movs	r0, #1
 8004466:	fa00 f202 	lsl.w	r2, r0, r2
 800446a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e100 	.word	0xe000e100

08004480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800448c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	db0a      	blt.n	80044aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	490c      	ldr	r1, [pc, #48]	; (80044cc <__NVIC_SetPriority+0x4c>)
 800449a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800449e:	0112      	lsls	r2, r2, #4
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	440b      	add	r3, r1
 80044a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a8:	e00a      	b.n	80044c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	4908      	ldr	r1, [pc, #32]	; (80044d0 <__NVIC_SetPriority+0x50>)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	3b04      	subs	r3, #4
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	440b      	add	r3, r1
 80044be:	761a      	strb	r2, [r3, #24]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000e100 	.word	0xe000e100
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f1c3 0307 	rsb	r3, r3, #7
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	bf28      	it	cs
 80044f2:	2304      	movcs	r3, #4
 80044f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3304      	adds	r3, #4
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d902      	bls.n	8004504 <NVIC_EncodePriority+0x30>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3b03      	subs	r3, #3
 8004502:	e000      	b.n	8004506 <NVIC_EncodePriority+0x32>
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	401a      	ands	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800451c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	43d9      	mvns	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	4313      	orrs	r3, r2
         );
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff4c 	bl	80043e0 <__NVIC_SetPriorityGrouping>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800455e:	f7ff ff63 	bl	8004428 <__NVIC_GetPriorityGrouping>
 8004562:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f7ff ffb3 	bl	80044d4 <NVIC_EncodePriority>
 800456e:	4602      	mov	r2, r0
 8004570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff82 	bl	8004480 <__NVIC_SetPriority>
}
 800457c:	bf00      	nop
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff56 	bl	8004444 <__NVIC_EnableIRQ>
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e014      	b.n	80045dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fb0e 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d018      	beq.n	8004642 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2204      	movs	r2, #4
 8004614:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800462a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800463a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f827 	bl	8004690 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01d      	beq.n	8004688 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f043 0202 	orr.w	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004670:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f950 	bl	8004928 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_DAC_ConfigChannel+0x1e>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e12a      	b.n	800491c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	795b      	ldrb	r3, [r3, #5]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_DAC_ConfigChannel+0x2e>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e124      	b.n	800491c <HAL_DAC_ConfigChannel+0x278>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d17a      	bne.n	80047dc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80046e6:	f7fe fdb3 	bl	8003250 <HAL_GetTick>
 80046ea:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13d      	bne.n	800476e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046f2:	e018      	b.n	8004726 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046f4:	f7fe fdac 	bl	8003250 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d911      	bls.n	8004726 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004708:	4b86      	ldr	r3, [pc, #536]	; (8004924 <HAL_DAC_ConfigChannel+0x280>)
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f043 0208 	orr.w	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2203      	movs	r2, #3
 8004720:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0fa      	b.n	800491c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472c:	4b7d      	ldr	r3, [pc, #500]	; (8004924 <HAL_DAC_ConfigChannel+0x280>)
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1df      	bne.n	80046f4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	6992      	ldr	r2, [r2, #24]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
 800473e:	e020      	b.n	8004782 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004740:	f7fe fd86 	bl	8003250 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d90f      	bls.n	800476e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	da0a      	bge.n	800476e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f043 0208 	orr.w	r2, r3, #8
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2203      	movs	r2, #3
 8004768:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0d6      	b.n	800491c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	dbe3      	blt.n	8004740 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	6992      	ldr	r2, [r2, #24]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	ea02 0103 	and.w	r1, r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	21ff      	movs	r1, #255	; 0xff
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	ea02 0103 	and.w	r1, r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a1a      	ldr	r2, [r3, #32]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	409a      	lsls	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d11d      	bne.n	8004820 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	221f      	movs	r2, #31
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2207      	movs	r2, #7
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e00f      	b.n	800486a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d102      	bne.n	8004858 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004852:	2301      	movs	r3, #1
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e008      	b.n	800486a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004860:	2301      	movs	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	e001      	b.n	800486a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	22c0      	movs	r2, #192	; 0xc0
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	400a      	ands	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800491c:	4618      	mov	r0, r3
 800491e:	3728      	adds	r7, #40	; 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20008000 	.word	0x20008000

08004928 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7fe fc84 	bl	8003250 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e316      	b.n	8004f82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a66      	ldr	r2, [pc, #408]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a65      	ldr	r2, [pc, #404]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a63      	ldr	r2, [pc, #396]	; (8004afc <HAL_DMA_Init+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a62      	ldr	r2, [pc, #392]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5a      	ldr	r2, [pc, #360]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a59      	ldr	r2, [pc, #356]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a54      	ldr	r2, [pc, #336]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a53      	ldr	r2, [pc, #332]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a51      	ldr	r2, [pc, #324]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_DMA_Init+0xbc>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_DMA_Init+0xbe>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 813b 	beq.w	8004c76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a34      	ldr	r2, [pc, #208]	; (8004afc <HAL_DMA_Init+0x1c0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a33      	ldr	r2, [pc, #204]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a31      	ldr	r2, [pc, #196]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <HAL_DMA_Init+0x186>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_DMA_Init+0x196>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad2:	e02f      	b.n	8004b34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad4:	f7fe fbbc 	bl	8003250 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d928      	bls.n	8004b34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e246      	b.n	8004f82 <HAL_DMA_Init+0x646>
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c8      	bne.n	8004ad4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4b83      	ldr	r3, [pc, #524]	; (8004d5c <HAL_DMA_Init+0x420>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d107      	bne.n	8004b98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4313      	orrs	r3, r2
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b98:	4b71      	ldr	r3, [pc, #452]	; (8004d60 <HAL_DMA_Init+0x424>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b71      	ldr	r3, [pc, #452]	; (8004d64 <HAL_DMA_Init+0x428>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba4:	d328      	bcc.n	8004bf8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b28      	cmp	r3, #40	; 0x28
 8004bac:	d903      	bls.n	8004bb6 <HAL_DMA_Init+0x27a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d917      	bls.n	8004be6 <HAL_DMA_Init+0x2aa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b3e      	cmp	r3, #62	; 0x3e
 8004bbc:	d903      	bls.n	8004bc6 <HAL_DMA_Init+0x28a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b42      	cmp	r3, #66	; 0x42
 8004bc4:	d90f      	bls.n	8004be6 <HAL_DMA_Init+0x2aa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b46      	cmp	r3, #70	; 0x46
 8004bcc:	d903      	bls.n	8004bd6 <HAL_DMA_Init+0x29a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b48      	cmp	r3, #72	; 0x48
 8004bd4:	d907      	bls.n	8004be6 <HAL_DMA_Init+0x2aa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b4e      	cmp	r3, #78	; 0x4e
 8004bdc:	d905      	bls.n	8004bea <HAL_DMA_Init+0x2ae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b52      	cmp	r3, #82	; 0x52
 8004be4:	d801      	bhi.n	8004bea <HAL_DMA_Init+0x2ae>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_DMA_Init+0x2b0>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d117      	bne.n	8004c52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f002 fb33 	bl	80072a0 <DMA_CheckFifoParam>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e197      	b.n	8004f82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f002 fa6e 	bl	800713c <DMA_CalcBaseAndBitshift>
 8004c60:	4603      	mov	r3, r0
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	223f      	movs	r2, #63	; 0x3f
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e0cd      	b.n	8004e12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_DMA_Init+0x42c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a39      	ldr	r2, [pc, #228]	; (8004d6c <HAL_DMA_Init+0x430>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a38      	ldr	r2, [pc, #224]	; (8004d70 <HAL_DMA_Init+0x434>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d018      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a36      	ldr	r2, [pc, #216]	; (8004d74 <HAL_DMA_Init+0x438>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a35      	ldr	r2, [pc, #212]	; (8004d78 <HAL_DMA_Init+0x43c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a33      	ldr	r2, [pc, #204]	; (8004d7c <HAL_DMA_Init+0x440>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a32      	ldr	r2, [pc, #200]	; (8004d80 <HAL_DMA_Init+0x444>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_DMA_Init+0x38a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <HAL_DMA_Init+0x448>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_DMA_Init+0x38e>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_DMA_Init+0x390>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8097 	beq.w	8004e00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <HAL_DMA_Init+0x42c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d021      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <HAL_DMA_Init+0x430>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01c      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_DMA_Init+0x434>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d017      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <HAL_DMA_Init+0x438>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d012      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_DMA_Init+0x43c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00d      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_DMA_Init+0x440>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d008      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_DMA_Init+0x444>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <HAL_DMA_Init+0x3e4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	; (8004d84 <HAL_DMA_Init+0x448>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_DMA_Init+0x44c>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d020      	beq.n	8004d8c <HAL_DMA_Init+0x450>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d102      	bne.n	8004d58 <HAL_DMA_Init+0x41c>
 8004d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d56:	e01a      	b.n	8004d8e <HAL_DMA_Init+0x452>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e018      	b.n	8004d8e <HAL_DMA_Init+0x452>
 8004d5c:	fe10803f 	.word	0xfe10803f
 8004d60:	5c001000 	.word	0x5c001000
 8004d64:	ffff0000 	.word	0xffff0000
 8004d68:	58025408 	.word	0x58025408
 8004d6c:	5802541c 	.word	0x5802541c
 8004d70:	58025430 	.word	0x58025430
 8004d74:	58025444 	.word	0x58025444
 8004d78:	58025458 	.word	0x58025458
 8004d7c:	5802546c 	.word	0x5802546c
 8004d80:	58025480 	.word	0x58025480
 8004d84:	58025494 	.word	0x58025494
 8004d88:	fffe000f 	.word	0xfffe000f
 8004d8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004dbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <HAL_DMA_Init+0x650>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a6e      	ldr	r2, [pc, #440]	; (8004f90 <HAL_DMA_Init+0x654>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f002 f9a9 	bl	800713c <DMA_CalcBaseAndBitshift>
 8004dea:	4603      	mov	r3, r0
 8004dec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2201      	movs	r2, #1
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e008      	b.n	8004e12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0b7      	b.n	8004f82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5f      	ldr	r2, [pc, #380]	; (8004f94 <HAL_DMA_Init+0x658>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d072      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5d      	ldr	r2, [pc, #372]	; (8004f98 <HAL_DMA_Init+0x65c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d06d      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5c      	ldr	r2, [pc, #368]	; (8004f9c <HAL_DMA_Init+0x660>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d068      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a5a      	ldr	r2, [pc, #360]	; (8004fa0 <HAL_DMA_Init+0x664>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d063      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a59      	ldr	r2, [pc, #356]	; (8004fa4 <HAL_DMA_Init+0x668>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d05e      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a57      	ldr	r2, [pc, #348]	; (8004fa8 <HAL_DMA_Init+0x66c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d059      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a56      	ldr	r2, [pc, #344]	; (8004fac <HAL_DMA_Init+0x670>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d054      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a54      	ldr	r2, [pc, #336]	; (8004fb0 <HAL_DMA_Init+0x674>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d04f      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a53      	ldr	r2, [pc, #332]	; (8004fb4 <HAL_DMA_Init+0x678>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04a      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a51      	ldr	r2, [pc, #324]	; (8004fb8 <HAL_DMA_Init+0x67c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d045      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a50      	ldr	r2, [pc, #320]	; (8004fbc <HAL_DMA_Init+0x680>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d040      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <HAL_DMA_Init+0x684>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d03b      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a4d      	ldr	r2, [pc, #308]	; (8004fc4 <HAL_DMA_Init+0x688>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d036      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_DMA_Init+0x68c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a4a      	ldr	r2, [pc, #296]	; (8004fcc <HAL_DMA_Init+0x690>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d02c      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <HAL_DMA_Init+0x694>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a47      	ldr	r2, [pc, #284]	; (8004fd4 <HAL_DMA_Init+0x698>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a45      	ldr	r2, [pc, #276]	; (8004fd8 <HAL_DMA_Init+0x69c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a44      	ldr	r2, [pc, #272]	; (8004fdc <HAL_DMA_Init+0x6a0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a42      	ldr	r2, [pc, #264]	; (8004fe0 <HAL_DMA_Init+0x6a4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a41      	ldr	r2, [pc, #260]	; (8004fe4 <HAL_DMA_Init+0x6a8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3f      	ldr	r2, [pc, #252]	; (8004fe8 <HAL_DMA_Init+0x6ac>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <HAL_DMA_Init+0x6b0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <HAL_DMA_Init+0x6b4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <HAL_DMA_Init+0x5ca>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_DMA_Init+0x5cc>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d032      	beq.n	8004f72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 fa43 	bl	8007398 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d102      	bne.n	8004f20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d010      	beq.n	8004f60 <HAL_DMA_Init+0x624>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d80c      	bhi.n	8004f60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f002 fac0 	bl	80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e008      	b.n	8004f72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	a7fdabf8 	.word	0xa7fdabf8
 8004f90:	cccccccd 	.word	0xcccccccd
 8004f94:	40020010 	.word	0x40020010
 8004f98:	40020028 	.word	0x40020028
 8004f9c:	40020040 	.word	0x40020040
 8004fa0:	40020058 	.word	0x40020058
 8004fa4:	40020070 	.word	0x40020070
 8004fa8:	40020088 	.word	0x40020088
 8004fac:	400200a0 	.word	0x400200a0
 8004fb0:	400200b8 	.word	0x400200b8
 8004fb4:	40020410 	.word	0x40020410
 8004fb8:	40020428 	.word	0x40020428
 8004fbc:	40020440 	.word	0x40020440
 8004fc0:	40020458 	.word	0x40020458
 8004fc4:	40020470 	.word	0x40020470
 8004fc8:	40020488 	.word	0x40020488
 8004fcc:	400204a0 	.word	0x400204a0
 8004fd0:	400204b8 	.word	0x400204b8
 8004fd4:	58025408 	.word	0x58025408
 8004fd8:	5802541c 	.word	0x5802541c
 8004fdc:	58025430 	.word	0x58025430
 8004fe0:	58025444 	.word	0x58025444
 8004fe4:	58025458 	.word	0x58025458
 8004fe8:	5802546c 	.word	0x5802546c
 8004fec:	58025480 	.word	0x58025480
 8004ff0:	58025494 	.word	0x58025494

08004ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e226      	b.n	800545e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_DMA_Start_IT+0x2a>
 800501a:	2302      	movs	r3, #2
 800501c:	e21f      	b.n	800545e <HAL_DMA_Start_IT+0x46a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 820a 	bne.w	8005448 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a68      	ldr	r2, [pc, #416]	; (80051e8 <HAL_DMA_Start_IT+0x1f4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d04a      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a66      	ldr	r2, [pc, #408]	; (80051ec <HAL_DMA_Start_IT+0x1f8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d045      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a65      	ldr	r2, [pc, #404]	; (80051f0 <HAL_DMA_Start_IT+0x1fc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d040      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a63      	ldr	r2, [pc, #396]	; (80051f4 <HAL_DMA_Start_IT+0x200>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d03b      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a62      	ldr	r2, [pc, #392]	; (80051f8 <HAL_DMA_Start_IT+0x204>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d036      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a60      	ldr	r2, [pc, #384]	; (80051fc <HAL_DMA_Start_IT+0x208>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d031      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5f      	ldr	r2, [pc, #380]	; (8005200 <HAL_DMA_Start_IT+0x20c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d02c      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5d      	ldr	r2, [pc, #372]	; (8005204 <HAL_DMA_Start_IT+0x210>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d027      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_DMA_Start_IT+0x214>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d022      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5a      	ldr	r2, [pc, #360]	; (800520c <HAL_DMA_Start_IT+0x218>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01d      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a59      	ldr	r2, [pc, #356]	; (8005210 <HAL_DMA_Start_IT+0x21c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d018      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a57      	ldr	r2, [pc, #348]	; (8005214 <HAL_DMA_Start_IT+0x220>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a56      	ldr	r2, [pc, #344]	; (8005218 <HAL_DMA_Start_IT+0x224>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a54      	ldr	r2, [pc, #336]	; (800521c <HAL_DMA_Start_IT+0x228>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a53      	ldr	r2, [pc, #332]	; (8005220 <HAL_DMA_Start_IT+0x22c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_DMA_Start_IT+0xee>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a51      	ldr	r2, [pc, #324]	; (8005224 <HAL_DMA_Start_IT+0x230>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d108      	bne.n	80050f4 <HAL_DMA_Start_IT+0x100>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e007      	b.n	8005104 <HAL_DMA_Start_IT+0x110>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f001 fe6a 	bl	8006de4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_DMA_Start_IT+0x1f4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d04a      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a33      	ldr	r2, [pc, #204]	; (80051ec <HAL_DMA_Start_IT+0x1f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d045      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a31      	ldr	r2, [pc, #196]	; (80051f0 <HAL_DMA_Start_IT+0x1fc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d040      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_DMA_Start_IT+0x200>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d03b      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <HAL_DMA_Start_IT+0x204>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d036      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_DMA_Start_IT+0x208>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d031      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <HAL_DMA_Start_IT+0x20c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d02c      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_DMA_Start_IT+0x210>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d027      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a28      	ldr	r2, [pc, #160]	; (8005208 <HAL_DMA_Start_IT+0x214>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a27      	ldr	r2, [pc, #156]	; (800520c <HAL_DMA_Start_IT+0x218>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01d      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a25      	ldr	r2, [pc, #148]	; (8005210 <HAL_DMA_Start_IT+0x21c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a24      	ldr	r2, [pc, #144]	; (8005214 <HAL_DMA_Start_IT+0x220>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_DMA_Start_IT+0x224>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_DMA_Start_IT+0x228>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <HAL_DMA_Start_IT+0x22c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_DMA_Start_IT+0x1bc>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_DMA_Start_IT+0x230>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_DMA_Start_IT+0x1c0>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_DMA_Start_IT+0x1c2>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d036      	beq.n	8005228 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 021e 	bic.w	r2, r3, #30
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0216 	orr.w	r2, r2, #22
 80051cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03e      	beq.n	8005254 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0208 	orr.w	r2, r2, #8
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e035      	b.n	8005254 <HAL_DMA_Start_IT+0x260>
 80051e8:	40020010 	.word	0x40020010
 80051ec:	40020028 	.word	0x40020028
 80051f0:	40020040 	.word	0x40020040
 80051f4:	40020058 	.word	0x40020058
 80051f8:	40020070 	.word	0x40020070
 80051fc:	40020088 	.word	0x40020088
 8005200:	400200a0 	.word	0x400200a0
 8005204:	400200b8 	.word	0x400200b8
 8005208:	40020410 	.word	0x40020410
 800520c:	40020428 	.word	0x40020428
 8005210:	40020440 	.word	0x40020440
 8005214:	40020458 	.word	0x40020458
 8005218:	40020470 	.word	0x40020470
 800521c:	40020488 	.word	0x40020488
 8005220:	400204a0 	.word	0x400204a0
 8005224:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 020e 	bic.w	r2, r3, #14
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 020a 	orr.w	r2, r2, #10
 800523a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0204 	orr.w	r2, r2, #4
 8005252:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a83      	ldr	r2, [pc, #524]	; (8005468 <HAL_DMA_Start_IT+0x474>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d072      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a82      	ldr	r2, [pc, #520]	; (800546c <HAL_DMA_Start_IT+0x478>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d06d      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a80      	ldr	r2, [pc, #512]	; (8005470 <HAL_DMA_Start_IT+0x47c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d068      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7f      	ldr	r2, [pc, #508]	; (8005474 <HAL_DMA_Start_IT+0x480>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d063      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a7d      	ldr	r2, [pc, #500]	; (8005478 <HAL_DMA_Start_IT+0x484>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d05e      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a7c      	ldr	r2, [pc, #496]	; (800547c <HAL_DMA_Start_IT+0x488>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d059      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a7a      	ldr	r2, [pc, #488]	; (8005480 <HAL_DMA_Start_IT+0x48c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d054      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a79      	ldr	r2, [pc, #484]	; (8005484 <HAL_DMA_Start_IT+0x490>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04f      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a77      	ldr	r2, [pc, #476]	; (8005488 <HAL_DMA_Start_IT+0x494>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04a      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a76      	ldr	r2, [pc, #472]	; (800548c <HAL_DMA_Start_IT+0x498>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d045      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a74      	ldr	r2, [pc, #464]	; (8005490 <HAL_DMA_Start_IT+0x49c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d040      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a73      	ldr	r2, [pc, #460]	; (8005494 <HAL_DMA_Start_IT+0x4a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d03b      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a71      	ldr	r2, [pc, #452]	; (8005498 <HAL_DMA_Start_IT+0x4a4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d036      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a70      	ldr	r2, [pc, #448]	; (800549c <HAL_DMA_Start_IT+0x4a8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d031      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6e      	ldr	r2, [pc, #440]	; (80054a0 <HAL_DMA_Start_IT+0x4ac>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02c      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6d      	ldr	r2, [pc, #436]	; (80054a4 <HAL_DMA_Start_IT+0x4b0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d027      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6b      	ldr	r2, [pc, #428]	; (80054a8 <HAL_DMA_Start_IT+0x4b4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d022      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a6a      	ldr	r2, [pc, #424]	; (80054ac <HAL_DMA_Start_IT+0x4b8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d01d      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	; (80054b0 <HAL_DMA_Start_IT+0x4bc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d018      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a67      	ldr	r2, [pc, #412]	; (80054b4 <HAL_DMA_Start_IT+0x4c0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_DMA_Start_IT+0x4c4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a64      	ldr	r2, [pc, #400]	; (80054bc <HAL_DMA_Start_IT+0x4c8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a62      	ldr	r2, [pc, #392]	; (80054c0 <HAL_DMA_Start_IT+0x4cc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_DMA_Start_IT+0x350>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <HAL_DMA_Start_IT+0x4d0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_DMA_Start_IT+0x354>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_DMA_Start_IT+0x356>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01a      	beq.n	8005384 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005382:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a37      	ldr	r2, [pc, #220]	; (8005468 <HAL_DMA_Start_IT+0x474>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a36      	ldr	r2, [pc, #216]	; (800546c <HAL_DMA_Start_IT+0x478>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a34      	ldr	r2, [pc, #208]	; (8005470 <HAL_DMA_Start_IT+0x47c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a33      	ldr	r2, [pc, #204]	; (8005474 <HAL_DMA_Start_IT+0x480>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a31      	ldr	r2, [pc, #196]	; (8005478 <HAL_DMA_Start_IT+0x484>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a30      	ldr	r2, [pc, #192]	; (800547c <HAL_DMA_Start_IT+0x488>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <HAL_DMA_Start_IT+0x48c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <HAL_DMA_Start_IT+0x490>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_DMA_Start_IT+0x494>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2a      	ldr	r2, [pc, #168]	; (800548c <HAL_DMA_Start_IT+0x498>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a28      	ldr	r2, [pc, #160]	; (8005490 <HAL_DMA_Start_IT+0x49c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a27      	ldr	r2, [pc, #156]	; (8005494 <HAL_DMA_Start_IT+0x4a0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a25      	ldr	r2, [pc, #148]	; (8005498 <HAL_DMA_Start_IT+0x4a4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a24      	ldr	r2, [pc, #144]	; (800549c <HAL_DMA_Start_IT+0x4a8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_DMA_Start_IT+0x4ac>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_Start_IT+0x430>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <HAL_DMA_Start_IT+0x4b0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d108      	bne.n	8005436 <HAL_DMA_Start_IT+0x442>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e012      	b.n	800545c <HAL_DMA_Start_IT+0x468>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e009      	b.n	800545c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	58025408 	.word	0x58025408
 80054ac:	5802541c 	.word	0x5802541c
 80054b0:	58025430 	.word	0x58025430
 80054b4:	58025444 	.word	0x58025444
 80054b8:	58025458 	.word	0x58025458
 80054bc:	5802546c 	.word	0x5802546c
 80054c0:	58025480 	.word	0x58025480
 80054c4:	58025494 	.word	0x58025494

080054c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7fd febe 	bl	8003250 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e2dc      	b.n	8005a9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d008      	beq.n	80054fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e2cd      	b.n	8005a9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a76      	ldr	r2, [pc, #472]	; (80056dc <HAL_DMA_Abort+0x214>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04a      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a74      	ldr	r2, [pc, #464]	; (80056e0 <HAL_DMA_Abort+0x218>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_DMA_Abort+0x21c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d040      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a71      	ldr	r2, [pc, #452]	; (80056e8 <HAL_DMA_Abort+0x220>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03b      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a70      	ldr	r2, [pc, #448]	; (80056ec <HAL_DMA_Abort+0x224>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d036      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6e      	ldr	r2, [pc, #440]	; (80056f0 <HAL_DMA_Abort+0x228>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d031      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6d      	ldr	r2, [pc, #436]	; (80056f4 <HAL_DMA_Abort+0x22c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02c      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6b      	ldr	r2, [pc, #428]	; (80056f8 <HAL_DMA_Abort+0x230>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d027      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6a      	ldr	r2, [pc, #424]	; (80056fc <HAL_DMA_Abort+0x234>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a68      	ldr	r2, [pc, #416]	; (8005700 <HAL_DMA_Abort+0x238>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01d      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a67      	ldr	r2, [pc, #412]	; (8005704 <HAL_DMA_Abort+0x23c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a65      	ldr	r2, [pc, #404]	; (8005708 <HAL_DMA_Abort+0x240>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a64      	ldr	r2, [pc, #400]	; (800570c <HAL_DMA_Abort+0x244>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a62      	ldr	r2, [pc, #392]	; (8005710 <HAL_DMA_Abort+0x248>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a61      	ldr	r2, [pc, #388]	; (8005714 <HAL_DMA_Abort+0x24c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_DMA_Abort+0xd6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5f      	ldr	r2, [pc, #380]	; (8005718 <HAL_DMA_Abort+0x250>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <HAL_DMA_Abort+0xda>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <HAL_DMA_Abort+0xdc>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 021e 	bic.w	r2, r2, #30
 80055b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e00a      	b.n	80055e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 020e 	bic.w	r2, r2, #14
 80055de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <HAL_DMA_Abort+0x214>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d072      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3a      	ldr	r2, [pc, #232]	; (80056e0 <HAL_DMA_Abort+0x218>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d06d      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <HAL_DMA_Abort+0x21c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d068      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a37      	ldr	r2, [pc, #220]	; (80056e8 <HAL_DMA_Abort+0x220>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d063      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a36      	ldr	r2, [pc, #216]	; (80056ec <HAL_DMA_Abort+0x224>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d05e      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <HAL_DMA_Abort+0x228>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d059      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	; (80056f4 <HAL_DMA_Abort+0x22c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d054      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a31      	ldr	r2, [pc, #196]	; (80056f8 <HAL_DMA_Abort+0x230>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04f      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a30      	ldr	r2, [pc, #192]	; (80056fc <HAL_DMA_Abort+0x234>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d04a      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_DMA_Abort+0x238>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d045      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <HAL_DMA_Abort+0x23c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d040      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2b      	ldr	r2, [pc, #172]	; (8005708 <HAL_DMA_Abort+0x240>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d03b      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <HAL_DMA_Abort+0x244>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d036      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <HAL_DMA_Abort+0x248>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d031      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a27      	ldr	r2, [pc, #156]	; (8005714 <HAL_DMA_Abort+0x24c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d02c      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a25      	ldr	r2, [pc, #148]	; (8005718 <HAL_DMA_Abort+0x250>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d027      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a24      	ldr	r2, [pc, #144]	; (800571c <HAL_DMA_Abort+0x254>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d022      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_DMA_Abort+0x258>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01d      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_DMA_Abort+0x25c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d018      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_DMA_Abort+0x260>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_DMA_Abort+0x264>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00e      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_DMA_Abort+0x268>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d009      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_DMA_Abort+0x26c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_DMA_Abort+0x20e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_DMA_Abort+0x270>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d132      	bne.n	800573c <HAL_DMA_Abort+0x274>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e031      	b.n	800573e <HAL_DMA_Abort+0x276>
 80056da:	bf00      	nop
 80056dc:	40020010 	.word	0x40020010
 80056e0:	40020028 	.word	0x40020028
 80056e4:	40020040 	.word	0x40020040
 80056e8:	40020058 	.word	0x40020058
 80056ec:	40020070 	.word	0x40020070
 80056f0:	40020088 	.word	0x40020088
 80056f4:	400200a0 	.word	0x400200a0
 80056f8:	400200b8 	.word	0x400200b8
 80056fc:	40020410 	.word	0x40020410
 8005700:	40020428 	.word	0x40020428
 8005704:	40020440 	.word	0x40020440
 8005708:	40020458 	.word	0x40020458
 800570c:	40020470 	.word	0x40020470
 8005710:	40020488 	.word	0x40020488
 8005714:	400204a0 	.word	0x400204a0
 8005718:	400204b8 	.word	0x400204b8
 800571c:	58025408 	.word	0x58025408
 8005720:	5802541c 	.word	0x5802541c
 8005724:	58025430 	.word	0x58025430
 8005728:	58025444 	.word	0x58025444
 800572c:	58025458 	.word	0x58025458
 8005730:	5802546c 	.word	0x5802546c
 8005734:	58025480 	.word	0x58025480
 8005738:	58025494 	.word	0x58025494
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005750:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6d      	ldr	r2, [pc, #436]	; (800590c <HAL_DMA_Abort+0x444>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d04a      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a6b      	ldr	r2, [pc, #428]	; (8005910 <HAL_DMA_Abort+0x448>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d045      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6a      	ldr	r2, [pc, #424]	; (8005914 <HAL_DMA_Abort+0x44c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d040      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a68      	ldr	r2, [pc, #416]	; (8005918 <HAL_DMA_Abort+0x450>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d03b      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a67      	ldr	r2, [pc, #412]	; (800591c <HAL_DMA_Abort+0x454>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d036      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a65      	ldr	r2, [pc, #404]	; (8005920 <HAL_DMA_Abort+0x458>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d031      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a64      	ldr	r2, [pc, #400]	; (8005924 <HAL_DMA_Abort+0x45c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d02c      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a62      	ldr	r2, [pc, #392]	; (8005928 <HAL_DMA_Abort+0x460>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d027      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a61      	ldr	r2, [pc, #388]	; (800592c <HAL_DMA_Abort+0x464>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d022      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5f      	ldr	r2, [pc, #380]	; (8005930 <HAL_DMA_Abort+0x468>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01d      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a5e      	ldr	r2, [pc, #376]	; (8005934 <HAL_DMA_Abort+0x46c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d018      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a5c      	ldr	r2, [pc, #368]	; (8005938 <HAL_DMA_Abort+0x470>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a5b      	ldr	r2, [pc, #364]	; (800593c <HAL_DMA_Abort+0x474>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a59      	ldr	r2, [pc, #356]	; (8005940 <HAL_DMA_Abort+0x478>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a58      	ldr	r2, [pc, #352]	; (8005944 <HAL_DMA_Abort+0x47c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_DMA_Abort+0x32a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a56      	ldr	r2, [pc, #344]	; (8005948 <HAL_DMA_Abort+0x480>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <HAL_DMA_Abort+0x33c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e007      	b.n	8005814 <HAL_DMA_Abort+0x34c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005814:	e013      	b.n	800583e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005816:	f7fd fd1b 	bl	8003250 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b05      	cmp	r3, #5
 8005822:	d90c      	bls.n	800583e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2203      	movs	r2, #3
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e12d      	b.n	8005a9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e5      	bne.n	8005816 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_DMA_Abort+0x444>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2d      	ldr	r2, [pc, #180]	; (8005910 <HAL_DMA_Abort+0x448>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <HAL_DMA_Abort+0x44c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <HAL_DMA_Abort+0x450>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <HAL_DMA_Abort+0x454>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <HAL_DMA_Abort+0x458>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <HAL_DMA_Abort+0x45c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a24      	ldr	r2, [pc, #144]	; (8005928 <HAL_DMA_Abort+0x460>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a23      	ldr	r2, [pc, #140]	; (800592c <HAL_DMA_Abort+0x464>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a21      	ldr	r2, [pc, #132]	; (8005930 <HAL_DMA_Abort+0x468>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a20      	ldr	r2, [pc, #128]	; (8005934 <HAL_DMA_Abort+0x46c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <HAL_DMA_Abort+0x470>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1d      	ldr	r2, [pc, #116]	; (800593c <HAL_DMA_Abort+0x474>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <HAL_DMA_Abort+0x478>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <HAL_DMA_Abort+0x47c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Abort+0x422>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_DMA_Abort+0x480>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Abort+0x426>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_DMA_Abort+0x428>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02b      	beq.n	800594c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	223f      	movs	r2, #63	; 0x3f
 8005904:	409a      	lsls	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	e02a      	b.n	8005962 <HAL_DMA_Abort+0x49a>
 800590c:	40020010 	.word	0x40020010
 8005910:	40020028 	.word	0x40020028
 8005914:	40020040 	.word	0x40020040
 8005918:	40020058 	.word	0x40020058
 800591c:	40020070 	.word	0x40020070
 8005920:	40020088 	.word	0x40020088
 8005924:	400200a0 	.word	0x400200a0
 8005928:	400200b8 	.word	0x400200b8
 800592c:	40020410 	.word	0x40020410
 8005930:	40020428 	.word	0x40020428
 8005934:	40020440 	.word	0x40020440
 8005938:	40020458 	.word	0x40020458
 800593c:	40020470 	.word	0x40020470
 8005940:	40020488 	.word	0x40020488
 8005944:	400204a0 	.word	0x400204a0
 8005948:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2201      	movs	r2, #1
 800595c:	409a      	lsls	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <HAL_DMA_Abort+0x5dc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d072      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a4d      	ldr	r2, [pc, #308]	; (8005aa8 <HAL_DMA_Abort+0x5e0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d06d      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4c      	ldr	r2, [pc, #304]	; (8005aac <HAL_DMA_Abort+0x5e4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d068      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4a      	ldr	r2, [pc, #296]	; (8005ab0 <HAL_DMA_Abort+0x5e8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d063      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a49      	ldr	r2, [pc, #292]	; (8005ab4 <HAL_DMA_Abort+0x5ec>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d05e      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a47      	ldr	r2, [pc, #284]	; (8005ab8 <HAL_DMA_Abort+0x5f0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d059      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a46      	ldr	r2, [pc, #280]	; (8005abc <HAL_DMA_Abort+0x5f4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d054      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a44      	ldr	r2, [pc, #272]	; (8005ac0 <HAL_DMA_Abort+0x5f8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04f      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a43      	ldr	r2, [pc, #268]	; (8005ac4 <HAL_DMA_Abort+0x5fc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d04a      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a41      	ldr	r2, [pc, #260]	; (8005ac8 <HAL_DMA_Abort+0x600>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d045      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <HAL_DMA_Abort+0x604>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d040      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	; (8005ad0 <HAL_DMA_Abort+0x608>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d03b      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3d      	ldr	r2, [pc, #244]	; (8005ad4 <HAL_DMA_Abort+0x60c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d036      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <HAL_DMA_Abort+0x610>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d031      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <HAL_DMA_Abort+0x614>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d02c      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a38      	ldr	r2, [pc, #224]	; (8005ae0 <HAL_DMA_Abort+0x618>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d027      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <HAL_DMA_Abort+0x61c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a35      	ldr	r2, [pc, #212]	; (8005ae8 <HAL_DMA_Abort+0x620>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_DMA_Abort+0x624>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a32      	ldr	r2, [pc, #200]	; (8005af0 <HAL_DMA_Abort+0x628>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a31      	ldr	r2, [pc, #196]	; (8005af4 <HAL_DMA_Abort+0x62c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <HAL_DMA_Abort+0x630>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <HAL_DMA_Abort+0x634>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_DMA_Abort+0x58a>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2c      	ldr	r2, [pc, #176]	; (8005b00 <HAL_DMA_Abort+0x638>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA_Abort+0x58e>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_DMA_Abort+0x590>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8
 8005ae4:	58025408 	.word	0x58025408
 8005ae8:	5802541c 	.word	0x5802541c
 8005aec:	58025430 	.word	0x58025430
 8005af0:	58025444 	.word	0x58025444
 8005af4:	58025458 	.word	0x58025458
 8005af8:	5802546c 	.word	0x5802546c
 8005afc:	58025480 	.word	0x58025480
 8005b00:	58025494 	.word	0x58025494

08005b04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e237      	b.n	8005f86 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e22c      	b.n	8005f86 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5c      	ldr	r2, [pc, #368]	; (8005ca4 <HAL_DMA_Abort_IT+0x1a0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ca8 <HAL_DMA_Abort_IT+0x1a4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d045      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a59      	ldr	r2, [pc, #356]	; (8005cac <HAL_DMA_Abort_IT+0x1a8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d040      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HAL_DMA_Abort_IT+0x1ac>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d03b      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a56      	ldr	r2, [pc, #344]	; (8005cb4 <HAL_DMA_Abort_IT+0x1b0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d036      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a55      	ldr	r2, [pc, #340]	; (8005cb8 <HAL_DMA_Abort_IT+0x1b4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d031      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a53      	ldr	r2, [pc, #332]	; (8005cbc <HAL_DMA_Abort_IT+0x1b8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d02c      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a52      	ldr	r2, [pc, #328]	; (8005cc0 <HAL_DMA_Abort_IT+0x1bc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d027      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a50      	ldr	r2, [pc, #320]	; (8005cc4 <HAL_DMA_Abort_IT+0x1c0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a4f      	ldr	r2, [pc, #316]	; (8005cc8 <HAL_DMA_Abort_IT+0x1c4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a4d      	ldr	r2, [pc, #308]	; (8005ccc <HAL_DMA_Abort_IT+0x1c8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4c      	ldr	r2, [pc, #304]	; (8005cd0 <HAL_DMA_Abort_IT+0x1cc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <HAL_DMA_Abort_IT+0x1d0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_DMA_Abort_IT+0x1d4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a47      	ldr	r2, [pc, #284]	; (8005cdc <HAL_DMA_Abort_IT+0x1d8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_Abort_IT+0xc8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a46      	ldr	r2, [pc, #280]	; (8005ce0 <HAL_DMA_Abort_IT+0x1dc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA_Abort_IT+0xcc>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_DMA_Abort_IT+0xce>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8086 	beq.w	8005ce4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	; (8005ca4 <HAL_DMA_Abort_IT+0x1a0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04a      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2e      	ldr	r2, [pc, #184]	; (8005ca8 <HAL_DMA_Abort_IT+0x1a4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d045      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_DMA_Abort_IT+0x1a8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d040      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_DMA_Abort_IT+0x1ac>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d03b      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <HAL_DMA_Abort_IT+0x1b0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <HAL_DMA_Abort_IT+0x1b4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <HAL_DMA_Abort_IT+0x1b8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_DMA_Abort_IT+0x1bc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d027      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <HAL_DMA_Abort_IT+0x1c0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d022      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <HAL_DMA_Abort_IT+0x1c4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01d      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <HAL_DMA_Abort_IT+0x1c8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_DMA_Abort_IT+0x1cc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_DMA_Abort_IT+0x1d0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_DMA_Abort_IT+0x1d4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <HAL_DMA_Abort_IT+0x1d8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x17c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_DMA_Abort_IT+0x1dc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <HAL_DMA_Abort_IT+0x18e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e178      	b.n	8005f84 <HAL_DMA_Abort_IT+0x480>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e16f      	b.n	8005f84 <HAL_DMA_Abort_IT+0x480>
 8005ca4:	40020010 	.word	0x40020010
 8005ca8:	40020028 	.word	0x40020028
 8005cac:	40020040 	.word	0x40020040
 8005cb0:	40020058 	.word	0x40020058
 8005cb4:	40020070 	.word	0x40020070
 8005cb8:	40020088 	.word	0x40020088
 8005cbc:	400200a0 	.word	0x400200a0
 8005cc0:	400200b8 	.word	0x400200b8
 8005cc4:	40020410 	.word	0x40020410
 8005cc8:	40020428 	.word	0x40020428
 8005ccc:	40020440 	.word	0x40020440
 8005cd0:	40020458 	.word	0x40020458
 8005cd4:	40020470 	.word	0x40020470
 8005cd8:	40020488 	.word	0x40020488
 8005cdc:	400204a0 	.word	0x400204a0
 8005ce0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 020e 	bic.w	r2, r2, #14
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a6c      	ldr	r2, [pc, #432]	; (8005eac <HAL_DMA_Abort_IT+0x3a8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d04a      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6b      	ldr	r2, [pc, #428]	; (8005eb0 <HAL_DMA_Abort_IT+0x3ac>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d045      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a69      	ldr	r2, [pc, #420]	; (8005eb4 <HAL_DMA_Abort_IT+0x3b0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d040      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_DMA_Abort_IT+0x3b4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d03b      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a66      	ldr	r2, [pc, #408]	; (8005ebc <HAL_DMA_Abort_IT+0x3b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d036      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <HAL_DMA_Abort_IT+0x3bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d031      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a63      	ldr	r2, [pc, #396]	; (8005ec4 <HAL_DMA_Abort_IT+0x3c0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d02c      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <HAL_DMA_Abort_IT+0x3c4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d027      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a60      	ldr	r2, [pc, #384]	; (8005ecc <HAL_DMA_Abort_IT+0x3c8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d022      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a5f      	ldr	r2, [pc, #380]	; (8005ed0 <HAL_DMA_Abort_IT+0x3cc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d01d      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a5d      	ldr	r2, [pc, #372]	; (8005ed4 <HAL_DMA_Abort_IT+0x3d0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d018      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a5c      	ldr	r2, [pc, #368]	; (8005ed8 <HAL_DMA_Abort_IT+0x3d4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5a      	ldr	r2, [pc, #360]	; (8005edc <HAL_DMA_Abort_IT+0x3d8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a59      	ldr	r2, [pc, #356]	; (8005ee0 <HAL_DMA_Abort_IT+0x3dc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a57      	ldr	r2, [pc, #348]	; (8005ee4 <HAL_DMA_Abort_IT+0x3e0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x290>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a56      	ldr	r2, [pc, #344]	; (8005ee8 <HAL_DMA_Abort_IT+0x3e4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <HAL_DMA_Abort_IT+0x2a2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e007      	b.n	8005db6 <HAL_DMA_Abort_IT+0x2b2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a3c      	ldr	r2, [pc, #240]	; (8005eac <HAL_DMA_Abort_IT+0x3a8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d072      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3a      	ldr	r2, [pc, #232]	; (8005eb0 <HAL_DMA_Abort_IT+0x3ac>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d06d      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a39      	ldr	r2, [pc, #228]	; (8005eb4 <HAL_DMA_Abort_IT+0x3b0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d068      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a37      	ldr	r2, [pc, #220]	; (8005eb8 <HAL_DMA_Abort_IT+0x3b4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d063      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a36      	ldr	r2, [pc, #216]	; (8005ebc <HAL_DMA_Abort_IT+0x3b8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d05e      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a34      	ldr	r2, [pc, #208]	; (8005ec0 <HAL_DMA_Abort_IT+0x3bc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d059      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a33      	ldr	r2, [pc, #204]	; (8005ec4 <HAL_DMA_Abort_IT+0x3c0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d054      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a31      	ldr	r2, [pc, #196]	; (8005ec8 <HAL_DMA_Abort_IT+0x3c4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d04f      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a30      	ldr	r2, [pc, #192]	; (8005ecc <HAL_DMA_Abort_IT+0x3c8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d04a      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2e      	ldr	r2, [pc, #184]	; (8005ed0 <HAL_DMA_Abort_IT+0x3cc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d045      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <HAL_DMA_Abort_IT+0x3d0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d040      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2b      	ldr	r2, [pc, #172]	; (8005ed8 <HAL_DMA_Abort_IT+0x3d4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d03b      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <HAL_DMA_Abort_IT+0x3d8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d036      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <HAL_DMA_Abort_IT+0x3dc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d031      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <HAL_DMA_Abort_IT+0x3e0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d02c      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <HAL_DMA_Abort_IT+0x3e4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d027      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	; (8005eec <HAL_DMA_Abort_IT+0x3e8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_DMA_Abort_IT+0x3ec>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01d      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_DMA_Abort_IT+0x3f0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_DMA_Abort_IT+0x3f4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <HAL_DMA_Abort_IT+0x3f8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_DMA_Abort_IT+0x3fc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_DMA_Abort_IT+0x400>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_DMA_Abort_IT+0x3a2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_DMA_Abort_IT+0x404>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d132      	bne.n	8005f0c <HAL_DMA_Abort_IT+0x408>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e031      	b.n	8005f0e <HAL_DMA_Abort_IT+0x40a>
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	58025408 	.word	0x58025408
 8005ef0:	5802541c 	.word	0x5802541c
 8005ef4:	58025430 	.word	0x58025430
 8005ef8:	58025444 	.word	0x58025444
 8005efc:	58025458 	.word	0x58025458
 8005f00:	5802546c 	.word	0x5802546c
 8005f04:	58025480 	.word	0x58025480
 8005f08:	58025494 	.word	0x58025494
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d028      	beq.n	8005f64 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f20:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f40:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f58:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f62:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop

08005f90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f9c:	4b67      	ldr	r3, [pc, #412]	; (800613c <HAL_DMA_IRQHandler+0x1ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a67      	ldr	r2, [pc, #412]	; (8006140 <HAL_DMA_IRQHandler+0x1b0>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	0a9b      	lsrs	r3, r3, #10
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a5f      	ldr	r2, [pc, #380]	; (8006144 <HAL_DMA_IRQHandler+0x1b4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d04a      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a5d      	ldr	r2, [pc, #372]	; (8006148 <HAL_DMA_IRQHandler+0x1b8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d045      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a5c      	ldr	r2, [pc, #368]	; (800614c <HAL_DMA_IRQHandler+0x1bc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d040      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a5a      	ldr	r2, [pc, #360]	; (8006150 <HAL_DMA_IRQHandler+0x1c0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d03b      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a59      	ldr	r2, [pc, #356]	; (8006154 <HAL_DMA_IRQHandler+0x1c4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d036      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a57      	ldr	r2, [pc, #348]	; (8006158 <HAL_DMA_IRQHandler+0x1c8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d031      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a56      	ldr	r2, [pc, #344]	; (800615c <HAL_DMA_IRQHandler+0x1cc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d02c      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a54      	ldr	r2, [pc, #336]	; (8006160 <HAL_DMA_IRQHandler+0x1d0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d027      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a53      	ldr	r2, [pc, #332]	; (8006164 <HAL_DMA_IRQHandler+0x1d4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d022      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a51      	ldr	r2, [pc, #324]	; (8006168 <HAL_DMA_IRQHandler+0x1d8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01d      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a50      	ldr	r2, [pc, #320]	; (800616c <HAL_DMA_IRQHandler+0x1dc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d018      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a4e      	ldr	r2, [pc, #312]	; (8006170 <HAL_DMA_IRQHandler+0x1e0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a4d      	ldr	r2, [pc, #308]	; (8006174 <HAL_DMA_IRQHandler+0x1e4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00e      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a4b      	ldr	r2, [pc, #300]	; (8006178 <HAL_DMA_IRQHandler+0x1e8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a4a      	ldr	r2, [pc, #296]	; (800617c <HAL_DMA_IRQHandler+0x1ec>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_DMA_IRQHandler+0xd2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a48      	ldr	r2, [pc, #288]	; (8006180 <HAL_DMA_IRQHandler+0x1f0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <HAL_DMA_IRQHandler+0xd6>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <HAL_DMA_IRQHandler+0xd8>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 842b 	beq.w	80068c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2208      	movs	r2, #8
 8006078:	409a      	lsls	r2, r3
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 80a2 	beq.w	80061c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2e      	ldr	r2, [pc, #184]	; (8006144 <HAL_DMA_IRQHandler+0x1b4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d04a      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2d      	ldr	r2, [pc, #180]	; (8006148 <HAL_DMA_IRQHandler+0x1b8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d045      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2b      	ldr	r2, [pc, #172]	; (800614c <HAL_DMA_IRQHandler+0x1bc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d040      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <HAL_DMA_IRQHandler+0x1c0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d03b      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a28      	ldr	r2, [pc, #160]	; (8006154 <HAL_DMA_IRQHandler+0x1c4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a27      	ldr	r2, [pc, #156]	; (8006158 <HAL_DMA_IRQHandler+0x1c8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d031      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a25      	ldr	r2, [pc, #148]	; (800615c <HAL_DMA_IRQHandler+0x1cc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d02c      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a24      	ldr	r2, [pc, #144]	; (8006160 <HAL_DMA_IRQHandler+0x1d0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d027      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a22      	ldr	r2, [pc, #136]	; (8006164 <HAL_DMA_IRQHandler+0x1d4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d022      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a21      	ldr	r2, [pc, #132]	; (8006168 <HAL_DMA_IRQHandler+0x1d8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d01d      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1f      	ldr	r2, [pc, #124]	; (800616c <HAL_DMA_IRQHandler+0x1dc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d018      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <HAL_DMA_IRQHandler+0x1e0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <HAL_DMA_IRQHandler+0x1e4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <HAL_DMA_IRQHandler+0x1e8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d009      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <HAL_DMA_IRQHandler+0x1ec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_DMA_IRQHandler+0x194>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a18      	ldr	r2, [pc, #96]	; (8006180 <HAL_DMA_IRQHandler+0x1f0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d12f      	bne.n	8006184 <HAL_DMA_IRQHandler+0x1f4>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	bf14      	ite	ne
 8006132:	2301      	movne	r3, #1
 8006134:	2300      	moveq	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	e02e      	b.n	8006198 <HAL_DMA_IRQHandler+0x208>
 800613a:	bf00      	nop
 800613c:	24000004 	.word	0x24000004
 8006140:	1b4e81b5 	.word	0x1b4e81b5
 8006144:	40020010 	.word	0x40020010
 8006148:	40020028 	.word	0x40020028
 800614c:	40020040 	.word	0x40020040
 8006150:	40020058 	.word	0x40020058
 8006154:	40020070 	.word	0x40020070
 8006158:	40020088 	.word	0x40020088
 800615c:	400200a0 	.word	0x400200a0
 8006160:	400200b8 	.word	0x400200b8
 8006164:	40020410 	.word	0x40020410
 8006168:	40020428 	.word	0x40020428
 800616c:	40020440 	.word	0x40020440
 8006170:	40020458 	.word	0x40020458
 8006174:	40020470 	.word	0x40020470
 8006178:	40020488 	.word	0x40020488
 800617c:	400204a0 	.word	0x400204a0
 8006180:	400204b8 	.word	0x400204b8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d015      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0204 	bic.w	r2, r2, #4
 80061aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2208      	movs	r2, #8
 80061b6:	409a      	lsls	r2, r3
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06e      	beq.n	80062bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a69      	ldr	r2, [pc, #420]	; (8006388 <HAL_DMA_IRQHandler+0x3f8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a67      	ldr	r2, [pc, #412]	; (800638c <HAL_DMA_IRQHandler+0x3fc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a66      	ldr	r2, [pc, #408]	; (8006390 <HAL_DMA_IRQHandler+0x400>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a64      	ldr	r2, [pc, #400]	; (8006394 <HAL_DMA_IRQHandler+0x404>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a63      	ldr	r2, [pc, #396]	; (8006398 <HAL_DMA_IRQHandler+0x408>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a61      	ldr	r2, [pc, #388]	; (800639c <HAL_DMA_IRQHandler+0x40c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a60      	ldr	r2, [pc, #384]	; (80063a0 <HAL_DMA_IRQHandler+0x410>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5e      	ldr	r2, [pc, #376]	; (80063a4 <HAL_DMA_IRQHandler+0x414>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a5d      	ldr	r2, [pc, #372]	; (80063a8 <HAL_DMA_IRQHandler+0x418>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5b      	ldr	r2, [pc, #364]	; (80063ac <HAL_DMA_IRQHandler+0x41c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a5a      	ldr	r2, [pc, #360]	; (80063b0 <HAL_DMA_IRQHandler+0x420>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <HAL_DMA_IRQHandler+0x424>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a57      	ldr	r2, [pc, #348]	; (80063b8 <HAL_DMA_IRQHandler+0x428>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a55      	ldr	r2, [pc, #340]	; (80063bc <HAL_DMA_IRQHandler+0x42c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a54      	ldr	r2, [pc, #336]	; (80063c0 <HAL_DMA_IRQHandler+0x430>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_IRQHandler+0x2ee>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a52      	ldr	r2, [pc, #328]	; (80063c4 <HAL_DMA_IRQHandler+0x434>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10a      	bne.n	8006294 <HAL_DMA_IRQHandler+0x304>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e003      	b.n	800629c <HAL_DMA_IRQHandler+0x30c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2201      	movs	r2, #1
 80062aa:	409a      	lsls	r2, r3
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	f043 0202 	orr.w	r2, r3, #2
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2204      	movs	r2, #4
 80062c6:	409a      	lsls	r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 808f 	beq.w	80063f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_DMA_IRQHandler+0x3f8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <HAL_DMA_IRQHandler+0x3fc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a29      	ldr	r2, [pc, #164]	; (8006390 <HAL_DMA_IRQHandler+0x400>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a27      	ldr	r2, [pc, #156]	; (8006394 <HAL_DMA_IRQHandler+0x404>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a26      	ldr	r2, [pc, #152]	; (8006398 <HAL_DMA_IRQHandler+0x408>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a24      	ldr	r2, [pc, #144]	; (800639c <HAL_DMA_IRQHandler+0x40c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a23      	ldr	r2, [pc, #140]	; (80063a0 <HAL_DMA_IRQHandler+0x410>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_DMA_IRQHandler+0x414>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <HAL_DMA_IRQHandler+0x418>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <HAL_DMA_IRQHandler+0x41c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <HAL_DMA_IRQHandler+0x420>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <HAL_DMA_IRQHandler+0x424>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_DMA_IRQHandler+0x428>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <HAL_DMA_IRQHandler+0x42c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <HAL_DMA_IRQHandler+0x430>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_IRQHandler+0x3e2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <HAL_DMA_IRQHandler+0x434>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d12a      	bne.n	80063c8 <HAL_DMA_IRQHandler+0x438>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e023      	b.n	80063d0 <HAL_DMA_IRQHandler+0x440>
 8006388:	40020010 	.word	0x40020010
 800638c:	40020028 	.word	0x40020028
 8006390:	40020040 	.word	0x40020040
 8006394:	40020058 	.word	0x40020058
 8006398:	40020070 	.word	0x40020070
 800639c:	40020088 	.word	0x40020088
 80063a0:	400200a0 	.word	0x400200a0
 80063a4:	400200b8 	.word	0x400200b8
 80063a8:	40020410 	.word	0x40020410
 80063ac:	40020428 	.word	0x40020428
 80063b0:	40020440 	.word	0x40020440
 80063b4:	40020458 	.word	0x40020458
 80063b8:	40020470 	.word	0x40020470
 80063bc:	40020488 	.word	0x40020488
 80063c0:	400204a0 	.word	0x400204a0
 80063c4:	400204b8 	.word	0x400204b8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2204      	movs	r2, #4
 80063de:	409a      	lsls	r2, r3
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	f043 0204 	orr.w	r2, r3, #4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	2210      	movs	r2, #16
 80063fa:	409a      	lsls	r2, r3
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80a6 	beq.w	8006552 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a85      	ldr	r2, [pc, #532]	; (8006620 <HAL_DMA_IRQHandler+0x690>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d04a      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a83      	ldr	r2, [pc, #524]	; (8006624 <HAL_DMA_IRQHandler+0x694>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d045      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a82      	ldr	r2, [pc, #520]	; (8006628 <HAL_DMA_IRQHandler+0x698>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d040      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a80      	ldr	r2, [pc, #512]	; (800662c <HAL_DMA_IRQHandler+0x69c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d03b      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a7f      	ldr	r2, [pc, #508]	; (8006630 <HAL_DMA_IRQHandler+0x6a0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d036      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a7d      	ldr	r2, [pc, #500]	; (8006634 <HAL_DMA_IRQHandler+0x6a4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d031      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a7c      	ldr	r2, [pc, #496]	; (8006638 <HAL_DMA_IRQHandler+0x6a8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d02c      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a7a      	ldr	r2, [pc, #488]	; (800663c <HAL_DMA_IRQHandler+0x6ac>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d027      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a79      	ldr	r2, [pc, #484]	; (8006640 <HAL_DMA_IRQHandler+0x6b0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d022      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a77      	ldr	r2, [pc, #476]	; (8006644 <HAL_DMA_IRQHandler+0x6b4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01d      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a76      	ldr	r2, [pc, #472]	; (8006648 <HAL_DMA_IRQHandler+0x6b8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d018      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a74      	ldr	r2, [pc, #464]	; (800664c <HAL_DMA_IRQHandler+0x6bc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a73      	ldr	r2, [pc, #460]	; (8006650 <HAL_DMA_IRQHandler+0x6c0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a71      	ldr	r2, [pc, #452]	; (8006654 <HAL_DMA_IRQHandler+0x6c4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a70      	ldr	r2, [pc, #448]	; (8006658 <HAL_DMA_IRQHandler+0x6c8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x516>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a6e      	ldr	r2, [pc, #440]	; (800665c <HAL_DMA_IRQHandler+0x6cc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10a      	bne.n	80064bc <HAL_DMA_IRQHandler+0x52c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e009      	b.n	80064d0 <HAL_DMA_IRQHandler+0x540>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d03e      	beq.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2210      	movs	r2, #16
 80064de:	409a      	lsls	r2, r3
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d108      	bne.n	8006512 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d024      	beq.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
 8006510:	e01f      	b.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01b      	beq.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	e016      	b.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0208 	bic.w	r2, r2, #8
 8006540:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2220      	movs	r2, #32
 800655c:	409a      	lsls	r2, r3
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8110 	beq.w	8006788 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <HAL_DMA_IRQHandler+0x690>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d04a      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2b      	ldr	r2, [pc, #172]	; (8006624 <HAL_DMA_IRQHandler+0x694>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d045      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a29      	ldr	r2, [pc, #164]	; (8006628 <HAL_DMA_IRQHandler+0x698>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d040      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <HAL_DMA_IRQHandler+0x69c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d03b      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a26      	ldr	r2, [pc, #152]	; (8006630 <HAL_DMA_IRQHandler+0x6a0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d036      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <HAL_DMA_IRQHandler+0x6a4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d031      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a23      	ldr	r2, [pc, #140]	; (8006638 <HAL_DMA_IRQHandler+0x6a8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d02c      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a22      	ldr	r2, [pc, #136]	; (800663c <HAL_DMA_IRQHandler+0x6ac>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d027      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a20      	ldr	r2, [pc, #128]	; (8006640 <HAL_DMA_IRQHandler+0x6b0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d022      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <HAL_DMA_IRQHandler+0x6b4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01d      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_DMA_IRQHandler+0x6b8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1c      	ldr	r2, [pc, #112]	; (800664c <HAL_DMA_IRQHandler+0x6bc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1a      	ldr	r2, [pc, #104]	; (8006650 <HAL_DMA_IRQHandler+0x6c0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a19      	ldr	r2, [pc, #100]	; (8006654 <HAL_DMA_IRQHandler+0x6c4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a17      	ldr	r2, [pc, #92]	; (8006658 <HAL_DMA_IRQHandler+0x6c8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_DMA_IRQHandler+0x678>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a16      	ldr	r2, [pc, #88]	; (800665c <HAL_DMA_IRQHandler+0x6cc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d12b      	bne.n	8006660 <HAL_DMA_IRQHandler+0x6d0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b00      	cmp	r3, #0
 8006614:	bf14      	ite	ne
 8006616:	2301      	movne	r3, #1
 8006618:	2300      	moveq	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	e02a      	b.n	8006674 <HAL_DMA_IRQHandler+0x6e4>
 800661e:	bf00      	nop
 8006620:	40020010 	.word	0x40020010
 8006624:	40020028 	.word	0x40020028
 8006628:	40020040 	.word	0x40020040
 800662c:	40020058 	.word	0x40020058
 8006630:	40020070 	.word	0x40020070
 8006634:	40020088 	.word	0x40020088
 8006638:	400200a0 	.word	0x400200a0
 800663c:	400200b8 	.word	0x400200b8
 8006640:	40020410 	.word	0x40020410
 8006644:	40020428 	.word	0x40020428
 8006648:	40020440 	.word	0x40020440
 800664c:	40020458 	.word	0x40020458
 8006650:	40020470 	.word	0x40020470
 8006654:	40020488 	.word	0x40020488
 8006658:	400204a0 	.word	0x400204a0
 800665c:	400204b8 	.word	0x400204b8
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	bf14      	ite	ne
 800666e:	2301      	movne	r3, #1
 8006670:	2300      	moveq	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8087 	beq.w	8006788 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2220      	movs	r2, #32
 8006684:	409a      	lsls	r2, r3
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b04      	cmp	r3, #4
 8006694:	d139      	bne.n	800670a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0216 	bic.w	r2, r2, #22
 80066a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d103      	bne.n	80066c6 <HAL_DMA_IRQHandler+0x736>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0208 	bic.w	r2, r2, #8
 80066d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	223f      	movs	r2, #63	; 0x3f
 80066e0:	409a      	lsls	r2, r3
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 834a 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
          }
          return;
 8006708:	e344      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d108      	bne.n	8006738 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02c      	beq.n	8006788 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	e027      	b.n	8006788 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d023      	beq.n	8006788 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
 8006748:	e01e      	b.n	8006788 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0210 	bic.w	r2, r2, #16
 8006766:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8306 	beq.w	8006d9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8088 	beq.w	80068b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2204      	movs	r2, #4
 80067a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a7a      	ldr	r2, [pc, #488]	; (8006998 <HAL_DMA_IRQHandler+0xa08>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d04a      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a79      	ldr	r2, [pc, #484]	; (800699c <HAL_DMA_IRQHandler+0xa0c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d045      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a77      	ldr	r2, [pc, #476]	; (80069a0 <HAL_DMA_IRQHandler+0xa10>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d040      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a76      	ldr	r2, [pc, #472]	; (80069a4 <HAL_DMA_IRQHandler+0xa14>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d03b      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a74      	ldr	r2, [pc, #464]	; (80069a8 <HAL_DMA_IRQHandler+0xa18>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d036      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a73      	ldr	r2, [pc, #460]	; (80069ac <HAL_DMA_IRQHandler+0xa1c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d031      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a71      	ldr	r2, [pc, #452]	; (80069b0 <HAL_DMA_IRQHandler+0xa20>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d02c      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a70      	ldr	r2, [pc, #448]	; (80069b4 <HAL_DMA_IRQHandler+0xa24>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d027      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6e      	ldr	r2, [pc, #440]	; (80069b8 <HAL_DMA_IRQHandler+0xa28>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6d      	ldr	r2, [pc, #436]	; (80069bc <HAL_DMA_IRQHandler+0xa2c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d01d      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <HAL_DMA_IRQHandler+0xa30>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6a      	ldr	r2, [pc, #424]	; (80069c4 <HAL_DMA_IRQHandler+0xa34>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a68      	ldr	r2, [pc, #416]	; (80069c8 <HAL_DMA_IRQHandler+0xa38>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a67      	ldr	r2, [pc, #412]	; (80069cc <HAL_DMA_IRQHandler+0xa3c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a65      	ldr	r2, [pc, #404]	; (80069d0 <HAL_DMA_IRQHandler+0xa40>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_DMA_IRQHandler+0x8b8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a64      	ldr	r2, [pc, #400]	; (80069d4 <HAL_DMA_IRQHandler+0xa44>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d108      	bne.n	800685a <HAL_DMA_IRQHandler+0x8ca>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e007      	b.n	800686a <HAL_DMA_IRQHandler+0x8da>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	429a      	cmp	r2, r3
 8006874:	d307      	bcc.n	8006886 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f2      	bne.n	800686a <HAL_DMA_IRQHandler+0x8da>
 8006884:	e000      	b.n	8006888 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006886:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2203      	movs	r2, #3
 800689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800689e:	e003      	b.n	80068a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8272 	beq.w	8006d9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	e26c      	b.n	8006d9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a43      	ldr	r2, [pc, #268]	; (80069d8 <HAL_DMA_IRQHandler+0xa48>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a42      	ldr	r2, [pc, #264]	; (80069dc <HAL_DMA_IRQHandler+0xa4c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d01d      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <HAL_DMA_IRQHandler+0xa50>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3f      	ldr	r2, [pc, #252]	; (80069e4 <HAL_DMA_IRQHandler+0xa54>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3d      	ldr	r2, [pc, #244]	; (80069e8 <HAL_DMA_IRQHandler+0xa58>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a3c      	ldr	r2, [pc, #240]	; (80069ec <HAL_DMA_IRQHandler+0xa5c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a3a      	ldr	r2, [pc, #232]	; (80069f0 <HAL_DMA_IRQHandler+0xa60>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_DMA_IRQHandler+0x984>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a39      	ldr	r2, [pc, #228]	; (80069f4 <HAL_DMA_IRQHandler+0xa64>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d101      	bne.n	8006918 <HAL_DMA_IRQHandler+0x988>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_DMA_IRQHandler+0x98a>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 823f 	beq.w	8006d9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2204      	movs	r2, #4
 8006932:	409a      	lsls	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80cd 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xb48>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80c7 	beq.w	8006ad8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2204      	movs	r2, #4
 8006954:	409a      	lsls	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d049      	beq.n	80069f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8210 	beq.w	8006d98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006980:	e20a      	b.n	8006d98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8206 	beq.w	8006d98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006994:	e200      	b.n	8006d98 <HAL_DMA_IRQHandler+0xe08>
 8006996:	bf00      	nop
 8006998:	40020010 	.word	0x40020010
 800699c:	40020028 	.word	0x40020028
 80069a0:	40020040 	.word	0x40020040
 80069a4:	40020058 	.word	0x40020058
 80069a8:	40020070 	.word	0x40020070
 80069ac:	40020088 	.word	0x40020088
 80069b0:	400200a0 	.word	0x400200a0
 80069b4:	400200b8 	.word	0x400200b8
 80069b8:	40020410 	.word	0x40020410
 80069bc:	40020428 	.word	0x40020428
 80069c0:	40020440 	.word	0x40020440
 80069c4:	40020458 	.word	0x40020458
 80069c8:	40020470 	.word	0x40020470
 80069cc:	40020488 	.word	0x40020488
 80069d0:	400204a0 	.word	0x400204a0
 80069d4:	400204b8 	.word	0x400204b8
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d160      	bne.n	8006ac4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7f      	ldr	r2, [pc, #508]	; (8006c04 <HAL_DMA_IRQHandler+0xc74>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d04a      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7d      	ldr	r2, [pc, #500]	; (8006c08 <HAL_DMA_IRQHandler+0xc78>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d045      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a7c      	ldr	r2, [pc, #496]	; (8006c0c <HAL_DMA_IRQHandler+0xc7c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d040      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a7a      	ldr	r2, [pc, #488]	; (8006c10 <HAL_DMA_IRQHandler+0xc80>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d03b      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a79      	ldr	r2, [pc, #484]	; (8006c14 <HAL_DMA_IRQHandler+0xc84>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d036      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a77      	ldr	r2, [pc, #476]	; (8006c18 <HAL_DMA_IRQHandler+0xc88>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d031      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a76      	ldr	r2, [pc, #472]	; (8006c1c <HAL_DMA_IRQHandler+0xc8c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d02c      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a74      	ldr	r2, [pc, #464]	; (8006c20 <HAL_DMA_IRQHandler+0xc90>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d027      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a73      	ldr	r2, [pc, #460]	; (8006c24 <HAL_DMA_IRQHandler+0xc94>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a71      	ldr	r2, [pc, #452]	; (8006c28 <HAL_DMA_IRQHandler+0xc98>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a70      	ldr	r2, [pc, #448]	; (8006c2c <HAL_DMA_IRQHandler+0xc9c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_DMA_IRQHandler+0xca0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6d      	ldr	r2, [pc, #436]	; (8006c34 <HAL_DMA_IRQHandler+0xca4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6b      	ldr	r2, [pc, #428]	; (8006c38 <HAL_DMA_IRQHandler+0xca8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6a      	ldr	r2, [pc, #424]	; (8006c3c <HAL_DMA_IRQHandler+0xcac>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_DMA_IRQHandler+0xb12>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a68      	ldr	r2, [pc, #416]	; (8006c40 <HAL_DMA_IRQHandler+0xcb0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0xb24>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0208 	bic.w	r2, r2, #8
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e007      	b.n	8006ac4 <HAL_DMA_IRQHandler+0xb34>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0204 	bic.w	r2, r2, #4
 8006ac2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8165 	beq.w	8006d98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad6:	e15f      	b.n	8006d98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 80c5 	beq.w	8006c78 <HAL_DMA_IRQHandler+0xce8>
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80bf 	beq.w	8006c78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2202      	movs	r2, #2
 8006b04:	409a      	lsls	r2, r3
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 813a 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b30:	e134      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8130 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b44:	e12a      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8089 	bne.w	8006c64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2b      	ldr	r2, [pc, #172]	; (8006c04 <HAL_DMA_IRQHandler+0xc74>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d04a      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <HAL_DMA_IRQHandler+0xc78>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d045      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <HAL_DMA_IRQHandler+0xc7c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d040      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <HAL_DMA_IRQHandler+0xc80>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d03b      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <HAL_DMA_IRQHandler+0xc84>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d036      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <HAL_DMA_IRQHandler+0xc88>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <HAL_DMA_IRQHandler+0xc8c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02c      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a20      	ldr	r2, [pc, #128]	; (8006c20 <HAL_DMA_IRQHandler+0xc90>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d027      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1f      	ldr	r2, [pc, #124]	; (8006c24 <HAL_DMA_IRQHandler+0xc94>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <HAL_DMA_IRQHandler+0xc98>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <HAL_DMA_IRQHandler+0xc9c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <HAL_DMA_IRQHandler+0xca0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_DMA_IRQHandler+0xca4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_DMA_IRQHandler+0xca8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <HAL_DMA_IRQHandler+0xcac>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xc62>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <HAL_DMA_IRQHandler+0xcb0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d128      	bne.n	8006c44 <HAL_DMA_IRQHandler+0xcb4>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0214 	bic.w	r2, r2, #20
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e027      	b.n	8006c54 <HAL_DMA_IRQHandler+0xcc4>
 8006c04:	40020010 	.word	0x40020010
 8006c08:	40020028 	.word	0x40020028
 8006c0c:	40020040 	.word	0x40020040
 8006c10:	40020058 	.word	0x40020058
 8006c14:	40020070 	.word	0x40020070
 8006c18:	40020088 	.word	0x40020088
 8006c1c:	400200a0 	.word	0x400200a0
 8006c20:	400200b8 	.word	0x400200b8
 8006c24:	40020410 	.word	0x40020410
 8006c28:	40020428 	.word	0x40020428
 8006c2c:	40020440 	.word	0x40020440
 8006c30:	40020458 	.word	0x40020458
 8006c34:	40020470 	.word	0x40020470
 8006c38:	40020488 	.word	0x40020488
 8006c3c:	400204a0 	.word	0x400204a0
 8006c40:	400204b8 	.word	0x400204b8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 020a 	bic.w	r2, r2, #10
 8006c52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8097 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c76:	e091      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2208      	movs	r2, #8
 8006c82:	409a      	lsls	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8088 	beq.w	8006d9e <HAL_DMA_IRQHandler+0xe0e>
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8082 	beq.w	8006d9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a41      	ldr	r2, [pc, #260]	; (8006da4 <HAL_DMA_IRQHandler+0xe14>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d04a      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <HAL_DMA_IRQHandler+0xe18>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d045      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3e      	ldr	r2, [pc, #248]	; (8006dac <HAL_DMA_IRQHandler+0xe1c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d040      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3c      	ldr	r2, [pc, #240]	; (8006db0 <HAL_DMA_IRQHandler+0xe20>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d03b      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a3b      	ldr	r2, [pc, #236]	; (8006db4 <HAL_DMA_IRQHandler+0xe24>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d036      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a39      	ldr	r2, [pc, #228]	; (8006db8 <HAL_DMA_IRQHandler+0xe28>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d031      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a38      	ldr	r2, [pc, #224]	; (8006dbc <HAL_DMA_IRQHandler+0xe2c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d02c      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a36      	ldr	r2, [pc, #216]	; (8006dc0 <HAL_DMA_IRQHandler+0xe30>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d027      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <HAL_DMA_IRQHandler+0xe34>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d022      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <HAL_DMA_IRQHandler+0xe38>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01d      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <HAL_DMA_IRQHandler+0xe3c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d018      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a30      	ldr	r2, [pc, #192]	; (8006dd0 <HAL_DMA_IRQHandler+0xe40>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <HAL_DMA_IRQHandler+0xe44>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2d      	ldr	r2, [pc, #180]	; (8006dd8 <HAL_DMA_IRQHandler+0xe48>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d009      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_DMA_IRQHandler+0xe4c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <HAL_DMA_IRQHandler+0xdaa>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <HAL_DMA_IRQHandler+0xe50>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <HAL_DMA_IRQHandler+0xdbc>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 021c 	bic.w	r2, r2, #28
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e007      	b.n	8006d5c <HAL_DMA_IRQHandler+0xdcc>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 020e 	bic.w	r2, r2, #14
 8006d5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2201      	movs	r2, #1
 8006d66:	409a      	lsls	r2, r3
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	e004      	b.n	8006d9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d94:	bf00      	nop
 8006d96:	e002      	b.n	8006d9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d9e:	3728      	adds	r7, #40	; 0x28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40020010 	.word	0x40020010
 8006da8:	40020028 	.word	0x40020028
 8006dac:	40020040 	.word	0x40020040
 8006db0:	40020058 	.word	0x40020058
 8006db4:	40020070 	.word	0x40020070
 8006db8:	40020088 	.word	0x40020088
 8006dbc:	400200a0 	.word	0x400200a0
 8006dc0:	400200b8 	.word	0x400200b8
 8006dc4:	40020410 	.word	0x40020410
 8006dc8:	40020428 	.word	0x40020428
 8006dcc:	40020440 	.word	0x40020440
 8006dd0:	40020458 	.word	0x40020458
 8006dd4:	40020470 	.word	0x40020470
 8006dd8:	40020488 	.word	0x40020488
 8006ddc:	400204a0 	.word	0x400204a0
 8006de0:	400204b8 	.word	0x400204b8

08006de4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a7f      	ldr	r2, [pc, #508]	; (8007000 <DMA_SetConfig+0x21c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d072      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a7d      	ldr	r2, [pc, #500]	; (8007004 <DMA_SetConfig+0x220>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d06d      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7c      	ldr	r2, [pc, #496]	; (8007008 <DMA_SetConfig+0x224>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d068      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7a      	ldr	r2, [pc, #488]	; (800700c <DMA_SetConfig+0x228>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d063      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a79      	ldr	r2, [pc, #484]	; (8007010 <DMA_SetConfig+0x22c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d05e      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a77      	ldr	r2, [pc, #476]	; (8007014 <DMA_SetConfig+0x230>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d059      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a76      	ldr	r2, [pc, #472]	; (8007018 <DMA_SetConfig+0x234>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d054      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a74      	ldr	r2, [pc, #464]	; (800701c <DMA_SetConfig+0x238>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d04f      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a73      	ldr	r2, [pc, #460]	; (8007020 <DMA_SetConfig+0x23c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a71      	ldr	r2, [pc, #452]	; (8007024 <DMA_SetConfig+0x240>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a70      	ldr	r2, [pc, #448]	; (8007028 <DMA_SetConfig+0x244>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a6e      	ldr	r2, [pc, #440]	; (800702c <DMA_SetConfig+0x248>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a6d      	ldr	r2, [pc, #436]	; (8007030 <DMA_SetConfig+0x24c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a6b      	ldr	r2, [pc, #428]	; (8007034 <DMA_SetConfig+0x250>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6a      	ldr	r2, [pc, #424]	; (8007038 <DMA_SetConfig+0x254>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a68      	ldr	r2, [pc, #416]	; (800703c <DMA_SetConfig+0x258>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a67      	ldr	r2, [pc, #412]	; (8007040 <DMA_SetConfig+0x25c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a65      	ldr	r2, [pc, #404]	; (8007044 <DMA_SetConfig+0x260>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a64      	ldr	r2, [pc, #400]	; (8007048 <DMA_SetConfig+0x264>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a62      	ldr	r2, [pc, #392]	; (800704c <DMA_SetConfig+0x268>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a61      	ldr	r2, [pc, #388]	; (8007050 <DMA_SetConfig+0x26c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a5f      	ldr	r2, [pc, #380]	; (8007054 <DMA_SetConfig+0x270>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a5e      	ldr	r2, [pc, #376]	; (8007058 <DMA_SetConfig+0x274>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <DMA_SetConfig+0x10a>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a5c      	ldr	r2, [pc, #368]	; (800705c <DMA_SetConfig+0x278>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d101      	bne.n	8006ef2 <DMA_SetConfig+0x10e>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <DMA_SetConfig+0x110>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00d      	beq.n	8006f14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a39      	ldr	r2, [pc, #228]	; (8007000 <DMA_SetConfig+0x21c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d04a      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a38      	ldr	r2, [pc, #224]	; (8007004 <DMA_SetConfig+0x220>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d045      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a36      	ldr	r2, [pc, #216]	; (8007008 <DMA_SetConfig+0x224>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d040      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a35      	ldr	r2, [pc, #212]	; (800700c <DMA_SetConfig+0x228>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d03b      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a33      	ldr	r2, [pc, #204]	; (8007010 <DMA_SetConfig+0x22c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d036      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a32      	ldr	r2, [pc, #200]	; (8007014 <DMA_SetConfig+0x230>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d031      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a30      	ldr	r2, [pc, #192]	; (8007018 <DMA_SetConfig+0x234>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d02c      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2f      	ldr	r2, [pc, #188]	; (800701c <DMA_SetConfig+0x238>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d027      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <DMA_SetConfig+0x23c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d022      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <DMA_SetConfig+0x240>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d01d      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <DMA_SetConfig+0x244>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d018      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a29      	ldr	r2, [pc, #164]	; (800702c <DMA_SetConfig+0x248>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a27      	ldr	r2, [pc, #156]	; (8007030 <DMA_SetConfig+0x24c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00e      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a26      	ldr	r2, [pc, #152]	; (8007034 <DMA_SetConfig+0x250>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <DMA_SetConfig+0x254>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <DMA_SetConfig+0x1d0>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <DMA_SetConfig+0x258>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d101      	bne.n	8006fb8 <DMA_SetConfig+0x1d4>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <DMA_SetConfig+0x1d6>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d059      	beq.n	8007072 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	223f      	movs	r2, #63	; 0x3f
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fdc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d138      	bne.n	8007060 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ffe:	e086      	b.n	800710e <DMA_SetConfig+0x32a>
 8007000:	40020010 	.word	0x40020010
 8007004:	40020028 	.word	0x40020028
 8007008:	40020040 	.word	0x40020040
 800700c:	40020058 	.word	0x40020058
 8007010:	40020070 	.word	0x40020070
 8007014:	40020088 	.word	0x40020088
 8007018:	400200a0 	.word	0x400200a0
 800701c:	400200b8 	.word	0x400200b8
 8007020:	40020410 	.word	0x40020410
 8007024:	40020428 	.word	0x40020428
 8007028:	40020440 	.word	0x40020440
 800702c:	40020458 	.word	0x40020458
 8007030:	40020470 	.word	0x40020470
 8007034:	40020488 	.word	0x40020488
 8007038:	400204a0 	.word	0x400204a0
 800703c:	400204b8 	.word	0x400204b8
 8007040:	58025408 	.word	0x58025408
 8007044:	5802541c 	.word	0x5802541c
 8007048:	58025430 	.word	0x58025430
 800704c:	58025444 	.word	0x58025444
 8007050:	58025458 	.word	0x58025458
 8007054:	5802546c 	.word	0x5802546c
 8007058:	58025480 	.word	0x58025480
 800705c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]
}
 8007070:	e04d      	b.n	800710e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a29      	ldr	r2, [pc, #164]	; (800711c <DMA_SetConfig+0x338>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d022      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a27      	ldr	r2, [pc, #156]	; (8007120 <DMA_SetConfig+0x33c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01d      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a26      	ldr	r2, [pc, #152]	; (8007124 <DMA_SetConfig+0x340>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a24      	ldr	r2, [pc, #144]	; (8007128 <DMA_SetConfig+0x344>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a23      	ldr	r2, [pc, #140]	; (800712c <DMA_SetConfig+0x348>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a21      	ldr	r2, [pc, #132]	; (8007130 <DMA_SetConfig+0x34c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a20      	ldr	r2, [pc, #128]	; (8007134 <DMA_SetConfig+0x350>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <DMA_SetConfig+0x2de>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <DMA_SetConfig+0x354>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d101      	bne.n	80070c6 <DMA_SetConfig+0x2e2>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <DMA_SetConfig+0x2e4>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	2201      	movs	r2, #1
 80070d6:	409a      	lsls	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d108      	bne.n	80070fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	60da      	str	r2, [r3, #12]
}
 80070fc:	e007      	b.n	800710e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	58025408 	.word	0x58025408
 8007120:	5802541c 	.word	0x5802541c
 8007124:	58025430 	.word	0x58025430
 8007128:	58025444 	.word	0x58025444
 800712c:	58025458 	.word	0x58025458
 8007130:	5802546c 	.word	0x5802546c
 8007134:	58025480 	.word	0x58025480
 8007138:	58025494 	.word	0x58025494

0800713c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a42      	ldr	r2, [pc, #264]	; (8007254 <DMA_CalcBaseAndBitshift+0x118>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d04a      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a41      	ldr	r2, [pc, #260]	; (8007258 <DMA_CalcBaseAndBitshift+0x11c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d045      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3f      	ldr	r2, [pc, #252]	; (800725c <DMA_CalcBaseAndBitshift+0x120>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d040      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3e      	ldr	r2, [pc, #248]	; (8007260 <DMA_CalcBaseAndBitshift+0x124>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d03b      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <DMA_CalcBaseAndBitshift+0x128>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d036      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <DMA_CalcBaseAndBitshift+0x12c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d031      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a39      	ldr	r2, [pc, #228]	; (800726c <DMA_CalcBaseAndBitshift+0x130>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d02c      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a38      	ldr	r2, [pc, #224]	; (8007270 <DMA_CalcBaseAndBitshift+0x134>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d027      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a36      	ldr	r2, [pc, #216]	; (8007274 <DMA_CalcBaseAndBitshift+0x138>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d022      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a35      	ldr	r2, [pc, #212]	; (8007278 <DMA_CalcBaseAndBitshift+0x13c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d01d      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a33      	ldr	r2, [pc, #204]	; (800727c <DMA_CalcBaseAndBitshift+0x140>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d018      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a32      	ldr	r2, [pc, #200]	; (8007280 <DMA_CalcBaseAndBitshift+0x144>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d013      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a30      	ldr	r2, [pc, #192]	; (8007284 <DMA_CalcBaseAndBitshift+0x148>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00e      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2f      	ldr	r2, [pc, #188]	; (8007288 <DMA_CalcBaseAndBitshift+0x14c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d009      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2d      	ldr	r2, [pc, #180]	; (800728c <DMA_CalcBaseAndBitshift+0x150>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <DMA_CalcBaseAndBitshift+0xa8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <DMA_CalcBaseAndBitshift+0x154>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d101      	bne.n	80071e8 <DMA_CalcBaseAndBitshift+0xac>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <DMA_CalcBaseAndBitshift+0xae>
 80071e8:	2300      	movs	r3, #0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d024      	beq.n	8007238 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	3b10      	subs	r3, #16
 80071f6:	4a27      	ldr	r2, [pc, #156]	; (8007294 <DMA_CalcBaseAndBitshift+0x158>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	4a24      	ldr	r2, [pc, #144]	; (8007298 <DMA_CalcBaseAndBitshift+0x15c>)
 8007208:	5cd3      	ldrb	r3, [r2, r3]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d908      	bls.n	8007228 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	4b1f      	ldr	r3, [pc, #124]	; (800729c <DMA_CalcBaseAndBitshift+0x160>)
 800721e:	4013      	ands	r3, r2
 8007220:	1d1a      	adds	r2, r3, #4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	659a      	str	r2, [r3, #88]	; 0x58
 8007226:	e00d      	b.n	8007244 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	4b1b      	ldr	r3, [pc, #108]	; (800729c <DMA_CalcBaseAndBitshift+0x160>)
 8007230:	4013      	ands	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6593      	str	r3, [r2, #88]	; 0x58
 8007236:	e005      	b.n	8007244 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40020010 	.word	0x40020010
 8007258:	40020028 	.word	0x40020028
 800725c:	40020040 	.word	0x40020040
 8007260:	40020058 	.word	0x40020058
 8007264:	40020070 	.word	0x40020070
 8007268:	40020088 	.word	0x40020088
 800726c:	400200a0 	.word	0x400200a0
 8007270:	400200b8 	.word	0x400200b8
 8007274:	40020410 	.word	0x40020410
 8007278:	40020428 	.word	0x40020428
 800727c:	40020440 	.word	0x40020440
 8007280:	40020458 	.word	0x40020458
 8007284:	40020470 	.word	0x40020470
 8007288:	40020488 	.word	0x40020488
 800728c:	400204a0 	.word	0x400204a0
 8007290:	400204b8 	.word	0x400204b8
 8007294:	aaaaaaab 	.word	0xaaaaaaab
 8007298:	080142c0 	.word	0x080142c0
 800729c:	fffffc00 	.word	0xfffffc00

080072a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d120      	bne.n	80072f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d858      	bhi.n	800736e <DMA_CheckFifoParam+0xce>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <DMA_CheckFifoParam+0x24>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e7 	.word	0x080072e7
 80072cc:	080072d5 	.word	0x080072d5
 80072d0:	0800736f 	.word	0x0800736f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d048      	beq.n	8007372 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072e4:	e045      	b.n	8007372 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072ee:	d142      	bne.n	8007376 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072f4:	e03f      	b.n	8007376 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	d123      	bne.n	8007348 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	2b03      	cmp	r3, #3
 8007306:	d838      	bhi.n	800737a <DMA_CheckFifoParam+0xda>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <DMA_CheckFifoParam+0x70>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007321 	.word	0x08007321
 8007314:	08007327 	.word	0x08007327
 8007318:	08007321 	.word	0x08007321
 800731c:	08007339 	.word	0x08007339
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	73fb      	strb	r3, [r7, #15]
        break;
 8007324:	e030      	b.n	8007388 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d025      	beq.n	800737e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007336:	e022      	b.n	800737e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007340:	d11f      	bne.n	8007382 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007346:	e01c      	b.n	8007382 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	2b02      	cmp	r3, #2
 800734e:	d902      	bls.n	8007356 <DMA_CheckFifoParam+0xb6>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d003      	beq.n	800735c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007354:	e018      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	73fb      	strb	r3, [r7, #15]
        break;
 800735a:	e015      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
    break;
 800736c:	e00b      	b.n	8007386 <DMA_CheckFifoParam+0xe6>
        break;
 800736e:	bf00      	nop
 8007370:	e00a      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        break;
 8007372:	bf00      	nop
 8007374:	e008      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        break;
 8007376:	bf00      	nop
 8007378:	e006      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        break;
 800737a:	bf00      	nop
 800737c:	e004      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        break;
 800737e:	bf00      	nop
 8007380:	e002      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
        break;
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <DMA_CheckFifoParam+0xe8>
    break;
 8007386:	bf00      	nop
    }
  }

  return status;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop

08007398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a38      	ldr	r2, [pc, #224]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d022      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a36      	ldr	r2, [pc, #216]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01d      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a35      	ldr	r2, [pc, #212]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d018      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a33      	ldr	r2, [pc, #204]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a32      	ldr	r2, [pc, #200]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00e      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a30      	ldr	r2, [pc, #192]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d009      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2f      	ldr	r2, [pc, #188]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2d      	ldr	r2, [pc, #180]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3b08      	subs	r3, #8
 8007408:	4a28      	ldr	r2, [pc, #160]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	091b      	lsrs	r3, r3, #4
 8007410:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007424:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007434:	e024      	b.n	8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	3b10      	subs	r3, #16
 800743e:	4a1e      	ldr	r2, [pc, #120]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007440:	fba2 2303 	umull	r2, r3, r2, r3
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a1c      	ldr	r2, [pc, #112]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d806      	bhi.n	800745e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4a1b      	ldr	r2, [pc, #108]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d902      	bls.n	800745e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3308      	adds	r3, #8
 800745c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a16      	ldr	r2, [pc, #88]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007470:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	2201      	movs	r2, #1
 800747a:	409a      	lsls	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	58025408 	.word	0x58025408
 8007490:	5802541c 	.word	0x5802541c
 8007494:	58025430 	.word	0x58025430
 8007498:	58025444 	.word	0x58025444
 800749c:	58025458 	.word	0x58025458
 80074a0:	5802546c 	.word	0x5802546c
 80074a4:	58025480 	.word	0x58025480
 80074a8:	58025494 	.word	0x58025494
 80074ac:	cccccccd 	.word	0xcccccccd
 80074b0:	16009600 	.word	0x16009600
 80074b4:	58025880 	.word	0x58025880
 80074b8:	aaaaaaab 	.word	0xaaaaaaab
 80074bc:	400204b8 	.word	0x400204b8
 80074c0:	4002040f 	.word	0x4002040f
 80074c4:	10008200 	.word	0x10008200
 80074c8:	40020880 	.word	0x40020880

080074cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04a      	beq.n	8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d847      	bhi.n	8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d022      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a24      	ldr	r2, [pc, #144]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d01d      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a22      	ldr	r2, [pc, #136]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d018      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a21      	ldr	r2, [pc, #132]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00e      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d009      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d004      	beq.n	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d101      	bne.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800753c:	2300      	movs	r3, #0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007554:	671a      	str	r2, [r3, #112]	; 0x70
 8007556:	e009      	b.n	800756c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800756a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3b01      	subs	r3, #1
 8007570:	2201      	movs	r2, #1
 8007572:	409a      	lsls	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	58025408 	.word	0x58025408
 8007588:	5802541c 	.word	0x5802541c
 800758c:	58025430 	.word	0x58025430
 8007590:	58025444 	.word	0x58025444
 8007594:	58025458 	.word	0x58025458
 8007598:	5802546c 	.word	0x5802546c
 800759c:	58025480 	.word	0x58025480
 80075a0:	58025494 	.word	0x58025494
 80075a4:	1600963f 	.word	0x1600963f
 80075a8:	58025940 	.word	0x58025940
 80075ac:	1000823f 	.word	0x1000823f
 80075b0:	40020940 	.word	0x40020940

080075b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	; 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075c2:	4b89      	ldr	r3, [pc, #548]	; (80077e8 <HAL_GPIO_Init+0x234>)
 80075c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075c6:	e194      	b.n	80078f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	2101      	movs	r1, #1
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	fa01 f303 	lsl.w	r3, r1, r3
 80075d4:	4013      	ands	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 8186 	beq.w	80078ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d005      	beq.n	80075f8 <HAL_GPIO_Init+0x44>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d130      	bne.n	800765a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800762e:	2201      	movs	r2, #1
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43db      	mvns	r3, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4013      	ands	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	f003 0201 	and.w	r2, r3, #1
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4313      	orrs	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d017      	beq.n	8007696 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	2203      	movs	r2, #3
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43db      	mvns	r3, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4013      	ands	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	4313      	orrs	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d123      	bne.n	80076ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	08da      	lsrs	r2, r3, #3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3208      	adds	r2, #8
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	220f      	movs	r2, #15
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4013      	ands	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	08da      	lsrs	r2, r3, #3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3208      	adds	r2, #8
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	2203      	movs	r2, #3
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	43db      	mvns	r3, r3
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	4013      	ands	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f003 0203 	and.w	r2, r3, #3
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4313      	orrs	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80e0 	beq.w	80078ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800772c:	4b2f      	ldr	r3, [pc, #188]	; (80077ec <HAL_GPIO_Init+0x238>)
 800772e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007732:	4a2e      	ldr	r2, [pc, #184]	; (80077ec <HAL_GPIO_Init+0x238>)
 8007734:	f043 0302 	orr.w	r3, r3, #2
 8007738:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <HAL_GPIO_Init+0x238>)
 800773e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800774a:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <HAL_GPIO_Init+0x23c>)
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	089b      	lsrs	r3, r3, #2
 8007750:	3302      	adds	r3, #2
 8007752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	220f      	movs	r2, #15
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43db      	mvns	r3, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	4013      	ands	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <HAL_GPIO_Init+0x240>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d052      	beq.n	800781c <HAL_GPIO_Init+0x268>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <HAL_GPIO_Init+0x244>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d031      	beq.n	80077e2 <HAL_GPIO_Init+0x22e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <HAL_GPIO_Init+0x248>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d02b      	beq.n	80077de <HAL_GPIO_Init+0x22a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <HAL_GPIO_Init+0x24c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d025      	beq.n	80077da <HAL_GPIO_Init+0x226>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <HAL_GPIO_Init+0x250>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d01f      	beq.n	80077d6 <HAL_GPIO_Init+0x222>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <HAL_GPIO_Init+0x254>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d019      	beq.n	80077d2 <HAL_GPIO_Init+0x21e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <HAL_GPIO_Init+0x258>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <HAL_GPIO_Init+0x21a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_GPIO_Init+0x25c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00d      	beq.n	80077ca <HAL_GPIO_Init+0x216>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_GPIO_Init+0x260>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d007      	beq.n	80077c6 <HAL_GPIO_Init+0x212>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_GPIO_Init+0x264>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <HAL_GPIO_Init+0x20e>
 80077be:	2309      	movs	r3, #9
 80077c0:	e02d      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077c2:	230a      	movs	r3, #10
 80077c4:	e02b      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077c6:	2308      	movs	r3, #8
 80077c8:	e029      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077ca:	2307      	movs	r3, #7
 80077cc:	e027      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077ce:	2306      	movs	r3, #6
 80077d0:	e025      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077d2:	2305      	movs	r3, #5
 80077d4:	e023      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077d6:	2304      	movs	r3, #4
 80077d8:	e021      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077da:	2303      	movs	r3, #3
 80077dc:	e01f      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077de:	2302      	movs	r3, #2
 80077e0:	e01d      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e01b      	b.n	800781e <HAL_GPIO_Init+0x26a>
 80077e6:	bf00      	nop
 80077e8:	58000080 	.word	0x58000080
 80077ec:	58024400 	.word	0x58024400
 80077f0:	58000400 	.word	0x58000400
 80077f4:	58020000 	.word	0x58020000
 80077f8:	58020400 	.word	0x58020400
 80077fc:	58020800 	.word	0x58020800
 8007800:	58020c00 	.word	0x58020c00
 8007804:	58021000 	.word	0x58021000
 8007808:	58021400 	.word	0x58021400
 800780c:	58021800 	.word	0x58021800
 8007810:	58021c00 	.word	0x58021c00
 8007814:	58022000 	.word	0x58022000
 8007818:	58022400 	.word	0x58022400
 800781c:	2300      	movs	r3, #0
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	f002 0203 	and.w	r2, r2, #3
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	4093      	lsls	r3, r2
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800782e:	4938      	ldr	r1, [pc, #224]	; (8007910 <HAL_GPIO_Init+0x35c>)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	3302      	adds	r3, #2
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800783c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	43db      	mvns	r3, r3
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	43db      	mvns	r3, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	43db      	mvns	r3, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	4013      	ands	r3, r2
 80078d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	3301      	adds	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f47f ae63 	bne.w	80075c8 <HAL_GPIO_Init+0x14>
  }
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	3724      	adds	r7, #36	; 0x24
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	58000400 	.word	0x58000400

08007914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	887b      	ldrh	r3, [r7, #2]
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
 8007930:	e001      	b.n	8007936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	807b      	strh	r3, [r7, #2]
 8007950:	4613      	mov	r3, r2
 8007952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007954:	787b      	ldrb	r3, [r7, #1]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800795a:	887a      	ldrh	r2, [r7, #2]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007960:	e003      	b.n	800796a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007962:	887b      	ldrh	r3, [r7, #2]
 8007964:	041a      	lsls	r2, r3, #16
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	619a      	str	r2, [r3, #24]
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e08b      	b.n	8007aa2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7f9 fca6 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	; 0x24
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	e006      	b.n	8007a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80079fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d108      	bne.n	8007a1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a16:	605a      	str	r2, [r3, #4]
 8007a18:	e007      	b.n	8007a2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <HAL_I2C_Init+0x134>)
 8007a36:	430b      	orrs	r3, r1
 8007a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69d9      	ldr	r1, [r3, #28]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	02008000 	.word	0x02008000

08007ab0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	817b      	strh	r3, [r7, #10]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	f040 80fd 	bne.w	8007ccc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_I2C_Master_Transmit+0x30>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e0f6      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ae8:	f7fb fbb2 	bl	8003250 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2319      	movs	r3, #25
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fa0a 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e0e1      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2221      	movs	r2, #33	; 0x21
 8007b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2210      	movs	r2, #16
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	893a      	ldrh	r2, [r7, #8]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2bff      	cmp	r3, #255	; 0xff
 8007b3a:	d906      	bls.n	8007b4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	22ff      	movs	r2, #255	; 0xff
 8007b40:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e007      	b.n	8007b5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d024      	beq.n	8007bac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	3301      	adds	r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	4b4e      	ldr	r3, [pc, #312]	; (8007cd8 <HAL_I2C_Master_Transmit+0x228>)
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fc05 	bl	80083b4 <I2C_TransferConfig>
 8007baa:	e066      	b.n	8007c7a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	8979      	ldrh	r1, [r7, #10]
 8007bb4:	4b48      	ldr	r3, [pc, #288]	; (8007cd8 <HAL_I2C_Master_Transmit+0x228>)
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fbfa 	bl	80083b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007bc0:	e05b      	b.n	8007c7a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	6a39      	ldr	r1, [r7, #32]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f9fd 	bl	8007fc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e07b      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d034      	beq.n	8007c7a <HAL_I2C_Master_Transmit+0x1ca>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d130      	bne.n	8007c7a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2180      	movs	r1, #128	; 0x80
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f976 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e04d      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2bff      	cmp	r3, #255	; 0xff
 8007c3a:	d90e      	bls.n	8007c5a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	22ff      	movs	r2, #255	; 0xff
 8007c40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	8979      	ldrh	r1, [r7, #10]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fbae 	bl	80083b4 <I2C_TransferConfig>
 8007c58:	e00f      	b.n	8007c7a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	8979      	ldrh	r1, [r7, #10]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fb9d 	bl	80083b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d19e      	bne.n	8007bc2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	6a39      	ldr	r1, [r7, #32]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f9e3 	bl	8008054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e01a      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6859      	ldr	r1, [r3, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <HAL_I2C_Master_Transmit+0x22c>)
 8007cac:	400b      	ands	r3, r1
 8007cae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	80002000 	.word	0x80002000
 8007cdc:	fe00e800 	.word	0xfe00e800

08007ce0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	817b      	strh	r3, [r7, #10]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	f040 80db 	bne.w	8007eb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_I2C_Master_Receive+0x30>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e0d4      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d18:	f7fb fa9a 	bl	8003250 <HAL_GetTick>
 8007d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	2319      	movs	r3, #25
 8007d24:	2201      	movs	r2, #1
 8007d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f8f2 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e0bf      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2222      	movs	r2, #34	; 0x22
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2210      	movs	r2, #16
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	893a      	ldrh	r2, [r7, #8]
 8007d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2bff      	cmp	r3, #255	; 0xff
 8007d6a:	d90e      	bls.n	8007d8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	8979      	ldrh	r1, [r7, #10]
 8007d7a:	4b52      	ldr	r3, [pc, #328]	; (8007ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 fb16 	bl	80083b4 <I2C_TransferConfig>
 8007d88:	e06d      	b.n	8007e66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	8979      	ldrh	r1, [r7, #10]
 8007d9c:	4b49      	ldr	r3, [pc, #292]	; (8007ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fb05 	bl	80083b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007daa:	e05c      	b.n	8007e66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	6a39      	ldr	r1, [r7, #32]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f993 	bl	80080dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e07c      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d034      	beq.n	8007e66 <HAL_I2C_Master_Receive+0x186>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d130      	bne.n	8007e66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2180      	movs	r1, #128	; 0x80
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f880 	bl	8007f14 <I2C_WaitOnFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e04d      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2bff      	cmp	r3, #255	; 0xff
 8007e26:	d90e      	bls.n	8007e46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	22ff      	movs	r2, #255	; 0xff
 8007e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	8979      	ldrh	r1, [r7, #10]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 fab8 	bl	80083b4 <I2C_TransferConfig>
 8007e44:	e00f      	b.n	8007e66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	8979      	ldrh	r1, [r7, #10]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 faa7 	bl	80083b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d19d      	bne.n	8007dac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	6a39      	ldr	r1, [r7, #32]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f8ed 	bl	8008054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e01a      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6859      	ldr	r1, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <HAL_I2C_Master_Receive+0x1e8>)
 8007e98:	400b      	ands	r3, r1
 8007e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	80002400 	.word	0x80002400
 8007ec8:	fe00e800 	.word	0xfe00e800

08007ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d103      	bne.n	8007eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d007      	beq.n	8007f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	619a      	str	r2, [r3, #24]
  }
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f24:	e03b      	b.n	8007f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f962 	bl	80081f4 <I2C_IsErrorOccurred>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e041      	b.n	8007fbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f40:	d02d      	beq.n	8007f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f42:	f7fb f985 	bl	8003250 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d122      	bne.n	8007f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	4013      	ands	r3, r2
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d113      	bne.n	8007f9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	f043 0220 	orr.w	r2, r3, #32
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e00f      	b.n	8007fbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	bf0c      	ite	eq
 8007fae:	2301      	moveq	r3, #1
 8007fb0:	2300      	movne	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d0b4      	beq.n	8007f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fd2:	e033      	b.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f90b 	bl	80081f4 <I2C_IsErrorOccurred>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e031      	b.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fee:	d025      	beq.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff0:	f7fb f92e 	bl	8003250 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d302      	bcc.n	8008006 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d11a      	bne.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d013      	beq.n	800803c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	f043 0220 	orr.w	r2, r3, #32
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e007      	b.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b02      	cmp	r3, #2
 8008048:	d1c4      	bne.n	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008060:	e02f      	b.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f8c4 	bl	80081f4 <I2C_IsErrorOccurred>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e02d      	b.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008076:	f7fb f8eb 	bl	8003250 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d302      	bcc.n	800808c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11a      	bne.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b20      	cmp	r3, #32
 8008098:	d013      	beq.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809e:	f043 0220 	orr.w	r2, r3, #32
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e007      	b.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d1c8      	bne.n	8008062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080ec:	e071      	b.n	80081d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 f87e 	bl	80081f4 <I2C_IsErrorOccurred>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b20      	cmp	r3, #32
 800810e:	d13b      	bne.n	8008188 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d138      	bne.n	8008188 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b04      	cmp	r3, #4
 8008122:	d105      	bne.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b10      	cmp	r3, #16
 800813c:	d121      	bne.n	8008182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2210      	movs	r2, #16
 8008144:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2204      	movs	r2, #4
 800814a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2220      	movs	r2, #32
 8008152:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008160:	400b      	ands	r3, r1
 8008162:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
 8008180:	e002      	b.n	8008188 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008188:	f7fb f862 	bl	8003250 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	429a      	cmp	r2, r3
 8008196:	d302      	bcc.n	800819e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d119      	bne.n	80081d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d116      	bne.n	80081d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d00f      	beq.n	80081d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b6:	f043 0220 	orr.w	r2, r3, #32
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d002      	beq.n	80081e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d083      	beq.n	80080ee <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	fe00e800 	.word	0xfe00e800

080081f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08a      	sub	sp, #40	; 0x28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d068      	beq.n	80082f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2210      	movs	r2, #16
 8008226:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008228:	e049      	b.n	80082be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008230:	d045      	beq.n	80082be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fb f80d 	bl	8003250 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <I2C_IsErrorOccurred+0x54>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13a      	bne.n	80082be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008252:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800825a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	d121      	bne.n	80082b0 <I2C_IsErrorOccurred+0xbc>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008272:	d01d      	beq.n	80082b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008274:	7cfb      	ldrb	r3, [r7, #19]
 8008276:	2b20      	cmp	r3, #32
 8008278:	d01a      	beq.n	80082b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008288:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800828a:	f7fa ffe1 	bl	8003250 <HAL_GetTick>
 800828e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008290:	e00e      	b.n	80082b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008292:	f7fa ffdd 	bl	8003250 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b19      	cmp	r3, #25
 800829e:	d907      	bls.n	80082b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	f043 0320 	orr.w	r3, r3, #32
 80082a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80082ae:	e006      	b.n	80082be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d1e9      	bne.n	8008292 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d003      	beq.n	80082d4 <I2C_IsErrorOccurred+0xe0>
 80082cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0aa      	beq.n	800822a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2220      	movs	r2, #32
 80082e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f043 0304 	orr.w	r3, r3, #4
 80082ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01c      	beq.n	80083a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fdaf 	bl	8007ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <I2C_IsErrorOccurred+0x1bc>)
 800837a:	400b      	ands	r3, r1
 800837c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	431a      	orrs	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80083a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3728      	adds	r7, #40	; 0x28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	fe00e800 	.word	0xfe00e800

080083b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	817b      	strh	r3, [r7, #10]
 80083c2:	4613      	mov	r3, r2
 80083c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083c6:	897b      	ldrh	r3, [r7, #10]
 80083c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083cc:	7a7b      	ldrb	r3, [r7, #9]
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	4313      	orrs	r3, r2
 80083de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	0d5b      	lsrs	r3, r3, #21
 80083ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083f2:	4b08      	ldr	r3, [pc, #32]	; (8008414 <I2C_TransferConfig+0x60>)
 80083f4:	430b      	orrs	r3, r1
 80083f6:	43db      	mvns	r3, r3
 80083f8:	ea02 0103 	and.w	r1, r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	03ff63ff 	.word	0x03ff63ff

08008418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b20      	cmp	r3, #32
 800842c:	d138      	bne.n	80084a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008438:	2302      	movs	r3, #2
 800843a:	e032      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	; 0x24
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d139      	bne.n	8008538 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e033      	b.n	800853a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	; 0x24
 80084de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008500:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008538:	2302      	movs	r3, #2
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008558:	f043 0302 	orr.w	r3, r3, #2
 800855c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800856e:	4b07      	ldr	r3, [pc, #28]	; (800858c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	4906      	ldr	r1, [pc, #24]	; (800858c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4313      	orrs	r3, r2
 8008578:	604b      	str	r3, [r1, #4]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
 800858c:	58000400 	.word	0x58000400

08008590 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_PWREx_ConfigSupply+0x70>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d00a      	beq.n	80085ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <HAL_PWREx_ConfigSupply+0x70>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d001      	beq.n	80085b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e01f      	b.n	80085f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e01d      	b.n	80085f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80085ba:	4b11      	ldr	r3, [pc, #68]	; (8008600 <HAL_PWREx_ConfigSupply+0x70>)
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f023 0207 	bic.w	r2, r3, #7
 80085c2:	490f      	ldr	r1, [pc, #60]	; (8008600 <HAL_PWREx_ConfigSupply+0x70>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80085ca:	f7fa fe41 	bl	8003250 <HAL_GetTick>
 80085ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085d0:	e009      	b.n	80085e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085d2:	f7fa fe3d 	bl	8003250 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085e0:	d901      	bls.n	80085e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e007      	b.n	80085f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_PWREx_ConfigSupply+0x70>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f2:	d1ee      	bne.n	80085d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	58024800 	.word	0x58024800

08008604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08c      	sub	sp, #48	; 0x30
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f000 bc48 	b.w	8008ea8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8088 	beq.w	8008736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008626:	4b99      	ldr	r3, [pc, #612]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008630:	4b96      	ldr	r3, [pc, #600]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	2b10      	cmp	r3, #16
 800863a:	d007      	beq.n	800864c <HAL_RCC_OscConfig+0x48>
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	2b18      	cmp	r3, #24
 8008640:	d111      	bne.n	8008666 <HAL_RCC_OscConfig+0x62>
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	f003 0303 	and.w	r3, r3, #3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d10c      	bne.n	8008666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800864c:	4b8f      	ldr	r3, [pc, #572]	; (800888c <HAL_RCC_OscConfig+0x288>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d06d      	beq.n	8008734 <HAL_RCC_OscConfig+0x130>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d169      	bne.n	8008734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f000 bc21 	b.w	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866e:	d106      	bne.n	800867e <HAL_RCC_OscConfig+0x7a>
 8008670:	4b86      	ldr	r3, [pc, #536]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a85      	ldr	r2, [pc, #532]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e02e      	b.n	80086dc <HAL_RCC_OscConfig+0xd8>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10c      	bne.n	80086a0 <HAL_RCC_OscConfig+0x9c>
 8008686:	4b81      	ldr	r3, [pc, #516]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a80      	ldr	r2, [pc, #512]	; (800888c <HAL_RCC_OscConfig+0x288>)
 800868c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	4b7e      	ldr	r3, [pc, #504]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a7d      	ldr	r2, [pc, #500]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e01d      	b.n	80086dc <HAL_RCC_OscConfig+0xd8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a8:	d10c      	bne.n	80086c4 <HAL_RCC_OscConfig+0xc0>
 80086aa:	4b78      	ldr	r3, [pc, #480]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a77      	ldr	r2, [pc, #476]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	4b75      	ldr	r3, [pc, #468]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a74      	ldr	r2, [pc, #464]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	e00b      	b.n	80086dc <HAL_RCC_OscConfig+0xd8>
 80086c4:	4b71      	ldr	r3, [pc, #452]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a70      	ldr	r2, [pc, #448]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	4b6e      	ldr	r3, [pc, #440]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a6d      	ldr	r2, [pc, #436]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80086d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d013      	beq.n	800870c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fa fdb4 	bl	8003250 <HAL_GetTick>
 80086e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fa fdb0 	bl	8003250 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	; 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e3d4      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086fe:	4b63      	ldr	r3, [pc, #396]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0f0      	beq.n	80086ec <HAL_RCC_OscConfig+0xe8>
 800870a:	e014      	b.n	8008736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fa fda0 	bl	8003250 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008714:	f7fa fd9c 	bl	8003250 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b64      	cmp	r3, #100	; 0x64
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e3c0      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008726:	4b59      	ldr	r3, [pc, #356]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x110>
 8008732:	e000      	b.n	8008736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80ca 	beq.w	80088d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008744:	4b51      	ldr	r3, [pc, #324]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800874e:	4b4f      	ldr	r3, [pc, #316]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_RCC_OscConfig+0x166>
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	2b18      	cmp	r3, #24
 800875e:	d156      	bne.n	800880e <HAL_RCC_OscConfig+0x20a>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d151      	bne.n	800880e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800876a:	4b48      	ldr	r3, [pc, #288]	; (800888c <HAL_RCC_OscConfig+0x288>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <HAL_RCC_OscConfig+0x17e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e392      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008782:	4b42      	ldr	r3, [pc, #264]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f023 0219 	bic.w	r2, r3, #25
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	493f      	ldr	r1, [pc, #252]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008790:	4313      	orrs	r3, r2
 8008792:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008794:	f7fa fd5c 	bl	8003250 <HAL_GetTick>
 8008798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800879c:	f7fa fd58 	bl	8003250 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e37c      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087ae:	4b37      	ldr	r3, [pc, #220]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ba:	f7fa fd55 	bl	8003268 <HAL_GetREVID>
 80087be:	4603      	mov	r3, r0
 80087c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d817      	bhi.n	80087f8 <HAL_RCC_OscConfig+0x1f4>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b40      	cmp	r3, #64	; 0x40
 80087ce:	d108      	bne.n	80087e2 <HAL_RCC_OscConfig+0x1de>
 80087d0:	4b2e      	ldr	r3, [pc, #184]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087d8:	4a2c      	ldr	r2, [pc, #176]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087e0:	e07a      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087e2:	4b2a      	ldr	r3, [pc, #168]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	031b      	lsls	r3, r3, #12
 80087f0:	4926      	ldr	r1, [pc, #152]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087f6:	e06f      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f8:	4b24      	ldr	r3, [pc, #144]	; (800888c <HAL_RCC_OscConfig+0x288>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	4921      	ldr	r1, [pc, #132]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008808:	4313      	orrs	r3, r2
 800880a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800880c:	e064      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d047      	beq.n	80088a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f023 0219 	bic.w	r2, r3, #25
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	491a      	ldr	r1, [pc, #104]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008824:	4313      	orrs	r3, r2
 8008826:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fa fd12 	bl	8003250 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008830:	f7fa fd0e 	bl	8003250 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e332      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008842:	4b12      	ldr	r3, [pc, #72]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f0      	beq.n	8008830 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800884e:	f7fa fd0b 	bl	8003268 <HAL_GetREVID>
 8008852:	4603      	mov	r3, r0
 8008854:	f241 0203 	movw	r2, #4099	; 0x1003
 8008858:	4293      	cmp	r3, r2
 800885a:	d819      	bhi.n	8008890 <HAL_RCC_OscConfig+0x28c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b40      	cmp	r3, #64	; 0x40
 8008862:	d108      	bne.n	8008876 <HAL_RCC_OscConfig+0x272>
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800886c:	4a07      	ldr	r2, [pc, #28]	; (800888c <HAL_RCC_OscConfig+0x288>)
 800886e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	e030      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	031b      	lsls	r3, r3, #12
 8008884:	4901      	ldr	r1, [pc, #4]	; (800888c <HAL_RCC_OscConfig+0x288>)
 8008886:	4313      	orrs	r3, r2
 8008888:	604b      	str	r3, [r1, #4]
 800888a:	e025      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
 800888c:	58024400 	.word	0x58024400
 8008890:	4b9a      	ldr	r3, [pc, #616]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	4997      	ldr	r1, [pc, #604]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	604b      	str	r3, [r1, #4]
 80088a4:	e018      	b.n	80088d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088a6:	4b95      	ldr	r3, [pc, #596]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a94      	ldr	r2, [pc, #592]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fa fccd 	bl	8003250 <HAL_GetTick>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ba:	f7fa fcc9 	bl	8003250 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e2ed      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088cc:	4b8b      	ldr	r3, [pc, #556]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f0      	bne.n	80088ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80a9 	beq.w	8008a38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e6:	4b85      	ldr	r3, [pc, #532]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088f0:	4b82      	ldr	r3, [pc, #520]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d007      	beq.n	800890c <HAL_RCC_OscConfig+0x308>
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b18      	cmp	r3, #24
 8008900:	d13a      	bne.n	8008978 <HAL_RCC_OscConfig+0x374>
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d135      	bne.n	8008978 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800890c:	4b7b      	ldr	r3, [pc, #492]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <HAL_RCC_OscConfig+0x320>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d001      	beq.n	8008924 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e2c1      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008924:	f7fa fca0 	bl	8003268 <HAL_GetREVID>
 8008928:	4603      	mov	r3, r0
 800892a:	f241 0203 	movw	r2, #4099	; 0x1003
 800892e:	4293      	cmp	r3, r2
 8008930:	d817      	bhi.n	8008962 <HAL_RCC_OscConfig+0x35e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	2b20      	cmp	r3, #32
 8008938:	d108      	bne.n	800894c <HAL_RCC_OscConfig+0x348>
 800893a:	4b70      	ldr	r3, [pc, #448]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008942:	4a6e      	ldr	r2, [pc, #440]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008948:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800894a:	e075      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800894c:	4b6b      	ldr	r3, [pc, #428]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	069b      	lsls	r3, r3, #26
 800895a:	4968      	ldr	r1, [pc, #416]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 800895c:	4313      	orrs	r3, r2
 800895e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008960:	e06a      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008962:	4b66      	ldr	r3, [pc, #408]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	061b      	lsls	r3, r3, #24
 8008970:	4962      	ldr	r1, [pc, #392]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008972:	4313      	orrs	r3, r2
 8008974:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008976:	e05f      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d042      	beq.n	8008a06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008980:	4b5e      	ldr	r3, [pc, #376]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a5d      	ldr	r2, [pc, #372]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fa fc60 	bl	8003250 <HAL_GetTick>
 8008990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008994:	f7fa fc5c 	bl	8003250 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e280      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089a6:	4b55      	ldr	r3, [pc, #340]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089b2:	f7fa fc59 	bl	8003268 <HAL_GetREVID>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80089bc:	4293      	cmp	r3, r2
 80089be:	d817      	bhi.n	80089f0 <HAL_RCC_OscConfig+0x3ec>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d108      	bne.n	80089da <HAL_RCC_OscConfig+0x3d6>
 80089c8:	4b4c      	ldr	r3, [pc, #304]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089d0:	4a4a      	ldr	r2, [pc, #296]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d6:	6053      	str	r3, [r2, #4]
 80089d8:	e02e      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
 80089da:	4b48      	ldr	r3, [pc, #288]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	069b      	lsls	r3, r3, #26
 80089e8:	4944      	ldr	r1, [pc, #272]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	604b      	str	r3, [r1, #4]
 80089ee:	e023      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
 80089f0:	4b42      	ldr	r3, [pc, #264]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	493f      	ldr	r1, [pc, #252]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60cb      	str	r3, [r1, #12]
 8008a04:	e018      	b.n	8008a38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a06:	4b3d      	ldr	r3, [pc, #244]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a3c      	ldr	r2, [pc, #240]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a12:	f7fa fc1d 	bl	8003250 <HAL_GetTick>
 8008a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a18:	e008      	b.n	8008a2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a1a:	f7fa fc19 	bl	8003250 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e23d      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a2c:	4b33      	ldr	r3, [pc, #204]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f0      	bne.n	8008a1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d036      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d019      	beq.n	8008a80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a4c:	4b2b      	ldr	r3, [pc, #172]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a50:	4a2a      	ldr	r2, [pc, #168]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a52:	f043 0301 	orr.w	r3, r3, #1
 8008a56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a58:	f7fa fbfa 	bl	8003250 <HAL_GetTick>
 8008a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a60:	f7fa fbf6 	bl	8003250 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e21a      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a72:	4b22      	ldr	r3, [pc, #136]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f0      	beq.n	8008a60 <HAL_RCC_OscConfig+0x45c>
 8008a7e:	e018      	b.n	8008ab2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a80:	4b1e      	ldr	r3, [pc, #120]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a84:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008a86:	f023 0301 	bic.w	r3, r3, #1
 8008a8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a8c:	f7fa fbe0 	bl	8003250 <HAL_GetTick>
 8008a90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a94:	f7fa fbdc 	bl	8003250 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e200      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008aa6:	4b15      	ldr	r3, [pc, #84]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f0      	bne.n	8008a94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d039      	beq.n	8008b32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d01c      	beq.n	8008b00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a0c      	ldr	r2, [pc, #48]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ad0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ad2:	f7fa fbbd 	bl	8003250 <HAL_GetTick>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ada:	f7fa fbb9 	bl	8003250 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e1dd      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008aec:	4b03      	ldr	r3, [pc, #12]	; (8008afc <HAL_RCC_OscConfig+0x4f8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0x4d6>
 8008af8:	e01b      	b.n	8008b32 <HAL_RCC_OscConfig+0x52e>
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b00:	4b9b      	ldr	r3, [pc, #620]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a9a      	ldr	r2, [pc, #616]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b0c:	f7fa fba0 	bl	8003250 <HAL_GetTick>
 8008b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b12:	e008      	b.n	8008b26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b14:	f7fa fb9c 	bl	8003250 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e1c0      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b26:	4b92      	ldr	r3, [pc, #584]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f0      	bne.n	8008b14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0304 	and.w	r3, r3, #4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 8081 	beq.w	8008c42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b40:	4b8c      	ldr	r3, [pc, #560]	; (8008d74 <HAL_RCC_OscConfig+0x770>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a8b      	ldr	r2, [pc, #556]	; (8008d74 <HAL_RCC_OscConfig+0x770>)
 8008b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b4c:	f7fa fb80 	bl	8003250 <HAL_GetTick>
 8008b50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b54:	f7fa fb7c 	bl	8003250 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b64      	cmp	r3, #100	; 0x64
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e1a0      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b66:	4b83      	ldr	r3, [pc, #524]	; (8008d74 <HAL_RCC_OscConfig+0x770>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f0      	beq.n	8008b54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d106      	bne.n	8008b88 <HAL_RCC_OscConfig+0x584>
 8008b7a:	4b7d      	ldr	r3, [pc, #500]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7e:	4a7c      	ldr	r2, [pc, #496]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b80:	f043 0301 	orr.w	r3, r3, #1
 8008b84:	6713      	str	r3, [r2, #112]	; 0x70
 8008b86:	e02d      	b.n	8008be4 <HAL_RCC_OscConfig+0x5e0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <HAL_RCC_OscConfig+0x5a6>
 8008b90:	4b77      	ldr	r3, [pc, #476]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b94:	4a76      	ldr	r2, [pc, #472]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b9c:	4b74      	ldr	r3, [pc, #464]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba0:	4a73      	ldr	r2, [pc, #460]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008ba2:	f023 0304 	bic.w	r3, r3, #4
 8008ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba8:	e01c      	b.n	8008be4 <HAL_RCC_OscConfig+0x5e0>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d10c      	bne.n	8008bcc <HAL_RCC_OscConfig+0x5c8>
 8008bb2:	4b6f      	ldr	r3, [pc, #444]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	4a6e      	ldr	r2, [pc, #440]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bb8:	f043 0304 	orr.w	r3, r3, #4
 8008bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbe:	4b6c      	ldr	r3, [pc, #432]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	4a6b      	ldr	r2, [pc, #428]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bca:	e00b      	b.n	8008be4 <HAL_RCC_OscConfig+0x5e0>
 8008bcc:	4b68      	ldr	r3, [pc, #416]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	4a67      	ldr	r2, [pc, #412]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd8:	4b65      	ldr	r3, [pc, #404]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bdc:	4a64      	ldr	r2, [pc, #400]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008bde:	f023 0304 	bic.w	r3, r3, #4
 8008be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d015      	beq.n	8008c18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bec:	f7fa fb30 	bl	8003250 <HAL_GetTick>
 8008bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bf2:	e00a      	b.n	8008c0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf4:	f7fa fb2c 	bl	8003250 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e14e      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c0a:	4b59      	ldr	r3, [pc, #356]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0ee      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x5f0>
 8008c16:	e014      	b.n	8008c42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c18:	f7fa fb1a 	bl	8003250 <HAL_GetTick>
 8008c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c1e:	e00a      	b.n	8008c36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c20:	f7fa fb16 	bl	8003250 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e138      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c36:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1ee      	bne.n	8008c20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 812d 	beq.w	8008ea6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c4c:	4b48      	ldr	r3, [pc, #288]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c54:	2b18      	cmp	r3, #24
 8008c56:	f000 80bd 	beq.w	8008dd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	f040 809e 	bne.w	8008da0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c64:	4b42      	ldr	r3, [pc, #264]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a41      	ldr	r2, [pc, #260]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c70:	f7fa faee 	bl	8003250 <HAL_GetTick>
 8008c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c76:	e008      	b.n	8008c8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c78:	f7fa faea 	bl	8003250 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e10e      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c8a:	4b39      	ldr	r3, [pc, #228]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f0      	bne.n	8008c78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c96:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9a:	4b37      	ldr	r3, [pc, #220]	; (8008d78 <HAL_RCC_OscConfig+0x774>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ca6:	0112      	lsls	r2, r2, #4
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	4931      	ldr	r1, [pc, #196]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	628b      	str	r3, [r1, #40]	; 0x28
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	025b      	lsls	r3, r3, #9
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	041b      	lsls	r3, r3, #16
 8008cce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	061b      	lsls	r3, r3, #24
 8008cdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ce0:	4923      	ldr	r1, [pc, #140]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ce6:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	4a21      	ldr	r2, [pc, #132]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cf2:	4b1f      	ldr	r3, [pc, #124]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf6:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <HAL_RCC_OscConfig+0x778>)
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008cfe:	00d2      	lsls	r2, r2, #3
 8008d00:	491b      	ldr	r1, [pc, #108]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d06:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f023 020c 	bic.w	r2, r3, #12
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	4917      	ldr	r1, [pc, #92]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d18:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	f023 0202 	bic.w	r2, r3, #2
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d24:	4912      	ldr	r1, [pc, #72]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d2a:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	4a10      	ldr	r2, [pc, #64]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d36:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d4e:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d54:	f043 0301 	orr.w	r3, r3, #1
 8008d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <HAL_RCC_OscConfig+0x76c>)
 8008d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d66:	f7fa fa73 	bl	8003250 <HAL_GetTick>
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d6c:	e011      	b.n	8008d92 <HAL_RCC_OscConfig+0x78e>
 8008d6e:	bf00      	nop
 8008d70:	58024400 	.word	0x58024400
 8008d74:	58024800 	.word	0x58024800
 8008d78:	fffffc0c 	.word	0xfffffc0c
 8008d7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d80:	f7fa fa66 	bl	8003250 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e08a      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d92:	4b47      	ldr	r3, [pc, #284]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0f0      	beq.n	8008d80 <HAL_RCC_OscConfig+0x77c>
 8008d9e:	e082      	b.n	8008ea6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da0:	4b43      	ldr	r3, [pc, #268]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a42      	ldr	r2, [pc, #264]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7fa fa50 	bl	8003250 <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db4:	f7fa fa4c 	bl	8003250 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e070      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dc6:	4b3a      	ldr	r3, [pc, #232]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f0      	bne.n	8008db4 <HAL_RCC_OscConfig+0x7b0>
 8008dd2:	e068      	b.n	8008ea6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008dd4:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dda:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d031      	beq.n	8008e4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f003 0203 	and.w	r2, r3, #3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d12a      	bne.n	8008e4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	091b      	lsrs	r3, r3, #4
 8008dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d122      	bne.n	8008e4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d11a      	bne.n	8008e4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	0a5b      	lsrs	r3, r3, #9
 8008e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d111      	bne.n	8008e4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0c1b      	lsrs	r3, r3, #16
 8008e2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d108      	bne.n	8008e4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	0e1b      	lsrs	r3, r3, #24
 8008e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d001      	beq.n	8008e50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e02b      	b.n	8008ea8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008e50:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	08db      	lsrs	r3, r3, #3
 8008e56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d01f      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e6c:	f023 0301 	bic.w	r3, r3, #1
 8008e70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e72:	f7fa f9ed 	bl	8003250 <HAL_GetTick>
 8008e76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e78:	bf00      	nop
 8008e7a:	f7fa f9e9 	bl	8003250 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d0f9      	beq.n	8008e7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e86:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e8a:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <HAL_RCC_OscConfig+0x8b0>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e92:	00d2      	lsls	r2, r2, #3
 8008e94:	4906      	ldr	r1, [pc, #24]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	4a04      	ldr	r2, [pc, #16]	; (8008eb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3730      	adds	r7, #48	; 0x30
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	ffff0007 	.word	0xffff0007

08008eb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e19c      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ecc:	4b8a      	ldr	r3, [pc, #552]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d910      	bls.n	8008efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eda:	4b87      	ldr	r3, [pc, #540]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f023 020f 	bic.w	r2, r3, #15
 8008ee2:	4985      	ldr	r1, [pc, #532]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eea:	4b83      	ldr	r3, [pc, #524]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 030f 	and.w	r3, r3, #15
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d001      	beq.n	8008efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e184      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	4b7b      	ldr	r3, [pc, #492]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d908      	bls.n	8008f2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f18:	4b78      	ldr	r3, [pc, #480]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4975      	ldr	r1, [pc, #468]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	4b70      	ldr	r3, [pc, #448]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d908      	bls.n	8008f58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f46:	4b6d      	ldr	r3, [pc, #436]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	496a      	ldr	r1, [pc, #424]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	4b64      	ldr	r3, [pc, #400]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d908      	bls.n	8008f86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f74:	4b61      	ldr	r3, [pc, #388]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	495e      	ldr	r1, [pc, #376]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	4b59      	ldr	r3, [pc, #356]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d908      	bls.n	8008fb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fa2:	4b56      	ldr	r3, [pc, #344]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	4953      	ldr	r1, [pc, #332]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d010      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d908      	bls.n	8008fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd0:	4b4a      	ldr	r3, [pc, #296]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f023 020f 	bic.w	r2, r3, #15
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4947      	ldr	r1, [pc, #284]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d055      	beq.n	800909a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008fee:	4b43      	ldr	r3, [pc, #268]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	4940      	ldr	r1, [pc, #256]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d107      	bne.n	8009018 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009008:	4b3c      	ldr	r3, [pc, #240]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d121      	bne.n	8009058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0f6      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d107      	bne.n	8009030 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009020:	4b36      	ldr	r3, [pc, #216]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d115      	bne.n	8009058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e0ea      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d107      	bne.n	8009048 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009038:	4b30      	ldr	r3, [pc, #192]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d109      	bne.n	8009058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0de      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009048:	4b2c      	ldr	r3, [pc, #176]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0d6      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009058:	4b28      	ldr	r3, [pc, #160]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f023 0207 	bic.w	r2, r3, #7
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4925      	ldr	r1, [pc, #148]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 8009066:	4313      	orrs	r3, r2
 8009068:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800906a:	f7fa f8f1 	bl	8003250 <HAL_GetTick>
 800906e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009070:	e00a      	b.n	8009088 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009072:	f7fa f8ed 	bl	8003250 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009080:	4293      	cmp	r3, r2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e0be      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	429a      	cmp	r2, r3
 8009098:	d1eb      	bne.n	8009072 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d208      	bcs.n	80090c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090b6:	4b11      	ldr	r3, [pc, #68]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f023 020f 	bic.w	r2, r3, #15
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	490e      	ldr	r1, [pc, #56]	; (80090fc <HAL_RCC_ClockConfig+0x244>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c8:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d214      	bcs.n	8009100 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d6:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f023 020f 	bic.w	r2, r3, #15
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e6:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <HAL_RCC_ClockConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d005      	beq.n	8009100 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e086      	b.n	8009206 <HAL_RCC_ClockConfig+0x34e>
 80090f8:	52002000 	.word	0x52002000
 80090fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	4b3f      	ldr	r3, [pc, #252]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009118:	429a      	cmp	r2, r3
 800911a:	d208      	bcs.n	800912e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800911c:	4b3c      	ldr	r3, [pc, #240]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	4939      	ldr	r1, [pc, #228]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800912a:	4313      	orrs	r3, r2
 800912c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	695a      	ldr	r2, [r3, #20]
 800913e:	4b34      	ldr	r3, [pc, #208]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009146:	429a      	cmp	r2, r3
 8009148:	d208      	bcs.n	800915c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800914a:	4b31      	ldr	r3, [pc, #196]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	492e      	ldr	r1, [pc, #184]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 8009158:	4313      	orrs	r3, r2
 800915a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	699a      	ldr	r2, [r3, #24]
 800916c:	4b28      	ldr	r3, [pc, #160]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009174:	429a      	cmp	r2, r3
 8009176:	d208      	bcs.n	800918a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	4922      	ldr	r1, [pc, #136]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 8009186:	4313      	orrs	r3, r2
 8009188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d010      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69da      	ldr	r2, [r3, #28]
 800919a:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d208      	bcs.n	80091b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091a6:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	4917      	ldr	r1, [pc, #92]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80091b8:	f000 f834 	bl	8009224 <HAL_RCC_GetSysClockFreq>
 80091bc:	4602      	mov	r2, r0
 80091be:	4b14      	ldr	r3, [pc, #80]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	4912      	ldr	r1, [pc, #72]	; (8009214 <HAL_RCC_ClockConfig+0x35c>)
 80091ca:	5ccb      	ldrb	r3, [r1, r3]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
 80091d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091d6:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <HAL_RCC_ClockConfig+0x358>)
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	4a0d      	ldr	r2, [pc, #52]	; (8009214 <HAL_RCC_ClockConfig+0x35c>)
 80091e0:	5cd3      	ldrb	r3, [r2, r3]
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	4a0a      	ldr	r2, [pc, #40]	; (8009218 <HAL_RCC_ClockConfig+0x360>)
 80091ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091f0:	4a0a      	ldr	r2, [pc, #40]	; (800921c <HAL_RCC_ClockConfig+0x364>)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80091f6:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <HAL_RCC_ClockConfig+0x368>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f9 f8cc 	bl	8002398 <HAL_InitTick>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	58024400 	.word	0x58024400
 8009214:	080142b0 	.word	0x080142b0
 8009218:	24000008 	.word	0x24000008
 800921c:	24000004 	.word	0x24000004
 8009220:	2400000c 	.word	0x2400000c

08009224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009224:	b480      	push	{r7}
 8009226:	b089      	sub	sp, #36	; 0x24
 8009228:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800922a:	4bb3      	ldr	r3, [pc, #716]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009232:	2b18      	cmp	r3, #24
 8009234:	f200 8155 	bhi.w	80094e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <HAL_RCC_GetSysClockFreq+0x1c>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	080092a5 	.word	0x080092a5
 8009244:	080094e3 	.word	0x080094e3
 8009248:	080094e3 	.word	0x080094e3
 800924c:	080094e3 	.word	0x080094e3
 8009250:	080094e3 	.word	0x080094e3
 8009254:	080094e3 	.word	0x080094e3
 8009258:	080094e3 	.word	0x080094e3
 800925c:	080094e3 	.word	0x080094e3
 8009260:	080092cb 	.word	0x080092cb
 8009264:	080094e3 	.word	0x080094e3
 8009268:	080094e3 	.word	0x080094e3
 800926c:	080094e3 	.word	0x080094e3
 8009270:	080094e3 	.word	0x080094e3
 8009274:	080094e3 	.word	0x080094e3
 8009278:	080094e3 	.word	0x080094e3
 800927c:	080094e3 	.word	0x080094e3
 8009280:	080092d1 	.word	0x080092d1
 8009284:	080094e3 	.word	0x080094e3
 8009288:	080094e3 	.word	0x080094e3
 800928c:	080094e3 	.word	0x080094e3
 8009290:	080094e3 	.word	0x080094e3
 8009294:	080094e3 	.word	0x080094e3
 8009298:	080094e3 	.word	0x080094e3
 800929c:	080094e3 	.word	0x080094e3
 80092a0:	080092d7 	.word	0x080092d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a4:	4b94      	ldr	r3, [pc, #592]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b0:	4b91      	ldr	r3, [pc, #580]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	4a90      	ldr	r2, [pc, #576]	; (80094fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80092c2:	e111      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80092c4:	4b8d      	ldr	r3, [pc, #564]	; (80094fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092c6:	61bb      	str	r3, [r7, #24]
      break;
 80092c8:	e10e      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80092ca:	4b8d      	ldr	r3, [pc, #564]	; (8009500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092cc:	61bb      	str	r3, [r7, #24]
      break;
 80092ce:	e10b      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80092d0:	4b8c      	ldr	r3, [pc, #560]	; (8009504 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80092d2:	61bb      	str	r3, [r7, #24]
      break;
 80092d4:	e108      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092d6:	4b88      	ldr	r3, [pc, #544]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80092e0:	4b85      	ldr	r3, [pc, #532]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	091b      	lsrs	r3, r3, #4
 80092e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80092ec:	4b82      	ldr	r3, [pc, #520]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092f6:	4b80      	ldr	r3, [pc, #512]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	08db      	lsrs	r3, r3, #3
 80092fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80e1 	beq.w	80094dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b02      	cmp	r3, #2
 800931e:	f000 8083 	beq.w	8009428 <HAL_RCC_GetSysClockFreq+0x204>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b02      	cmp	r3, #2
 8009326:	f200 80a1 	bhi.w	800946c <HAL_RCC_GetSysClockFreq+0x248>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_RCC_GetSysClockFreq+0x114>
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d056      	beq.n	80093e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009336:	e099      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009338:	4b6f      	ldr	r3, [pc, #444]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d02d      	beq.n	80093a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009344:	4b6c      	ldr	r3, [pc, #432]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	08db      	lsrs	r3, r3, #3
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	4a6b      	ldr	r2, [pc, #428]	; (80094fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009350:	fa22 f303 	lsr.w	r3, r2, r3
 8009354:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b62      	ldr	r3, [pc, #392]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009382:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800939e:	e087      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800950c <HAL_RCC_GetSysClockFreq+0x2e8>
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b51      	ldr	r3, [pc, #324]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80093c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009508 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093e2:	e065      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009510 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b40      	ldr	r3, [pc, #256]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a02 	vldr	s12, [r7, #8]
 800940a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009508 <HAL_RCC_GetSysClockFreq+0x2e4>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009426:	e043      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009514 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b2f      	ldr	r3, [pc, #188]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a02 	vldr	s12, [r7, #8]
 800944e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800946a:	e021      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009510 <HAL_RCC_GetSysClockFreq+0x2ec>
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b1e      	ldr	r3, [pc, #120]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009492:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094b0:	4b11      	ldr	r3, [pc, #68]	; (80094f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	0a5b      	lsrs	r3, r3, #9
 80094b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ba:	3301      	adds	r3, #1
 80094bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d4:	ee17 3a90 	vmov	r3, s15
 80094d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80094da:	e005      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	61bb      	str	r3, [r7, #24]
      break;
 80094e0:	e002      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094e4:	61bb      	str	r3, [r7, #24]
      break;
 80094e6:	bf00      	nop
  }

  return sysclockfreq;
 80094e8:	69bb      	ldr	r3, [r7, #24]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3724      	adds	r7, #36	; 0x24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	58024400 	.word	0x58024400
 80094fc:	03d09000 	.word	0x03d09000
 8009500:	003d0900 	.word	0x003d0900
 8009504:	017d7840 	.word	0x017d7840
 8009508:	46000000 	.word	0x46000000
 800950c:	4c742400 	.word	0x4c742400
 8009510:	4a742400 	.word	0x4a742400
 8009514:	4bbebc20 	.word	0x4bbebc20

08009518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800951e:	f7ff fe81 	bl	8009224 <HAL_RCC_GetSysClockFreq>
 8009522:	4602      	mov	r2, r0
 8009524:	4b10      	ldr	r3, [pc, #64]	; (8009568 <HAL_RCC_GetHCLKFreq+0x50>)
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	490f      	ldr	r1, [pc, #60]	; (800956c <HAL_RCC_GetHCLKFreq+0x54>)
 8009530:	5ccb      	ldrb	r3, [r1, r3]
 8009532:	f003 031f 	and.w	r3, r3, #31
 8009536:	fa22 f303 	lsr.w	r3, r2, r3
 800953a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <HAL_RCC_GetHCLKFreq+0x50>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	4a09      	ldr	r2, [pc, #36]	; (800956c <HAL_RCC_GetHCLKFreq+0x54>)
 8009546:	5cd3      	ldrb	r3, [r2, r3]
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	fa22 f303 	lsr.w	r3, r2, r3
 8009552:	4a07      	ldr	r2, [pc, #28]	; (8009570 <HAL_RCC_GetHCLKFreq+0x58>)
 8009554:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009556:	4a07      	ldr	r2, [pc, #28]	; (8009574 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <HAL_RCC_GetHCLKFreq+0x58>)
 800955e:	681b      	ldr	r3, [r3, #0]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	58024400 	.word	0x58024400
 800956c:	080142b0 	.word	0x080142b0
 8009570:	24000008 	.word	0x24000008
 8009574:	24000004 	.word	0x24000004

08009578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800957c:	f7ff ffcc 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 8009580:	4602      	mov	r2, r0
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	091b      	lsrs	r3, r3, #4
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	4904      	ldr	r1, [pc, #16]	; (80095a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800958e:	5ccb      	ldrb	r3, [r1, r3]
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009598:	4618      	mov	r0, r3
 800959a:	bd80      	pop	{r7, pc}
 800959c:	58024400 	.word	0x58024400
 80095a0:	080142b0 	.word	0x080142b0

080095a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095a8:	f7ff ffb6 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 80095ac:	4602      	mov	r2, r0
 80095ae:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	f003 0307 	and.w	r3, r3, #7
 80095b8:	4904      	ldr	r1, [pc, #16]	; (80095cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80095ba:	5ccb      	ldrb	r3, [r1, r3]
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	58024400 	.word	0x58024400
 80095cc:	080142b0 	.word	0x080142b0

080095d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	223f      	movs	r2, #63	; 0x3f
 80095de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80095e0:	4b1a      	ldr	r3, [pc, #104]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f003 0207 	and.w	r2, r3, #7
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80095f8:	4b14      	ldr	r3, [pc, #80]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800961c:	4b0b      	ldr	r3, [pc, #44]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009628:	4b08      	ldr	r3, [pc, #32]	; (800964c <HAL_RCC_GetClockConfig+0x7c>)
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <HAL_RCC_GetClockConfig+0x80>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	601a      	str	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	58024400 	.word	0x58024400
 8009650:	52002000 	.word	0x52002000

08009654 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009658:	b0ca      	sub	sp, #296	; 0x128
 800965a:	af00      	add	r7, sp, #0
 800965c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009660:	2300      	movs	r3, #0
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009666:	2300      	movs	r3, #0
 8009668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800966c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009678:	2500      	movs	r5, #0
 800967a:	ea54 0305 	orrs.w	r3, r4, r5
 800967e:	d049      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800968a:	d02f      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800968c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009690:	d828      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009696:	d01a      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800969c:	d822      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80096a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096a6:	d007      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096a8:	e01c      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096aa:	4bb8      	ldr	r3, [pc, #736]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	4ab7      	ldr	r2, [pc, #732]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096b6:	e01a      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	3308      	adds	r3, #8
 80096be:	2102      	movs	r1, #2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f002 fb61 	bl	800bd88 <RCCEx_PLL2_Config>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096cc:	e00f      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d2:	3328      	adds	r3, #40	; 0x28
 80096d4:	2102      	movs	r1, #2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 fc08 	bl	800beec <RCCEx_PLL3_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096e2:	e004      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ea:	e000      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096f6:	4ba5      	ldr	r3, [pc, #660]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009704:	4aa1      	ldr	r2, [pc, #644]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009706:	430b      	orrs	r3, r1
 8009708:	6513      	str	r3, [r2, #80]	; 0x50
 800970a:	e003      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009720:	f04f 0900 	mov.w	r9, #0
 8009724:	ea58 0309 	orrs.w	r3, r8, r9
 8009728:	d047      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009730:	2b04      	cmp	r3, #4
 8009732:	d82a      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	08009751 	.word	0x08009751
 8009740:	0800975f 	.word	0x0800975f
 8009744:	08009775 	.word	0x08009775
 8009748:	08009793 	.word	0x08009793
 800974c:	08009793 	.word	0x08009793
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009750:	4b8e      	ldr	r3, [pc, #568]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	4a8d      	ldr	r2, [pc, #564]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800975a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800975c:	e01a      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009762:	3308      	adds	r3, #8
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f002 fb0e 	bl	800bd88 <RCCEx_PLL2_Config>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009772:	e00f      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009778:	3328      	adds	r3, #40	; 0x28
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f002 fbb5 	bl	800beec <RCCEx_PLL3_Config>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009788:	e004      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009790:	e000      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800979c:	4b7b      	ldr	r3, [pc, #492]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	f023 0107 	bic.w	r1, r3, #7
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	4a78      	ldr	r2, [pc, #480]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ac:	430b      	orrs	r3, r1
 80097ae:	6513      	str	r3, [r2, #80]	; 0x50
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80097c6:	f04f 0b00 	mov.w	fp, #0
 80097ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80097ce:	d04c      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097da:	d030      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e0:	d829      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097e2:	2bc0      	cmp	r3, #192	; 0xc0
 80097e4:	d02d      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097e6:	2bc0      	cmp	r3, #192	; 0xc0
 80097e8:	d825      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d018      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d821      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d007      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80097fa:	e01c      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fc:	4b63      	ldr	r3, [pc, #396]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	4a62      	ldr	r2, [pc, #392]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009808:	e01c      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	3308      	adds	r3, #8
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fab8 	bl	800bd88 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800981e:	e011      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009824:	3328      	adds	r3, #40	; 0x28
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f002 fb5f 	bl	800beec <RCCEx_PLL3_Config>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009834:	e006      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800984c:	4b4f      	ldr	r3, [pc, #316]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009850:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985a:	4a4c      	ldr	r2, [pc, #304]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800985c:	430b      	orrs	r3, r1
 800985e:	6513      	str	r3, [r2, #80]	; 0x50
 8009860:	e003      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009876:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800987a:	2300      	movs	r3, #0
 800987c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009880:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009884:	460b      	mov	r3, r1
 8009886:	4313      	orrs	r3, r2
 8009888:	d053      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009896:	d035      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800989c:	d82e      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800989e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a2:	d031      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80098a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098a8:	d828      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ae:	d01a      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80098b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b4:	d822      	bhi.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80098ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098be:	d007      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80098c0:	e01c      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c2:	4b32      	ldr	r3, [pc, #200]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	4a31      	ldr	r2, [pc, #196]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ce:	e01c      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	3308      	adds	r3, #8
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f002 fa55 	bl	800bd88 <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098e4:	e011      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ea:	3328      	adds	r3, #40	; 0x28
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f002 fafc 	bl	800beec <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098fa:	e006      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009902:	e002      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800990a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009912:	4b1e      	ldr	r3, [pc, #120]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800991a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009922:	4a1a      	ldr	r2, [pc, #104]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009924:	430b      	orrs	r3, r1
 8009926:	6593      	str	r3, [r2, #88]	; 0x58
 8009928:	e003      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800993e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009948:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800994c:	460b      	mov	r3, r1
 800994e:	4313      	orrs	r3, r2
 8009950:	d056      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800995a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800995e:	d038      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009964:	d831      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800996a:	d034      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800996c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009970:	d82b      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009976:	d01d      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800997c:	d825      	bhi.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009986:	d00a      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009988:	e01f      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4ba2      	ldr	r3, [pc, #648]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4aa1      	ldr	r2, [pc, #644]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800999c:	e01c      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	3308      	adds	r3, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f002 f9ee 	bl	800bd88 <RCCEx_PLL2_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099b2:	e011      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b8:	3328      	adds	r3, #40	; 0x28
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f002 fa95 	bl	800beec <RCCEx_PLL3_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099c8:	e006      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80099d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80099e0:	4b8e      	ldr	r3, [pc, #568]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099f0:	4a8a      	ldr	r2, [pc, #552]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099f2:	430b      	orrs	r3, r1
 80099f4:	6593      	str	r3, [r2, #88]	; 0x58
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a10:	2300      	movs	r3, #0
 8009a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d03a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	2b30      	cmp	r3, #48	; 0x30
 8009a28:	d01f      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009a2a:	2b30      	cmp	r3, #48	; 0x30
 8009a2c:	d819      	bhi.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	d00c      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d815      	bhi.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d019      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d111      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3e:	4b77      	ldr	r3, [pc, #476]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	4a76      	ldr	r2, [pc, #472]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a4a:	e011      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a50:	3308      	adds	r3, #8
 8009a52:	2102      	movs	r1, #2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f002 f997 	bl	800bd88 <RCCEx_PLL2_Config>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a60:	e006      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a68:	e002      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a78:	4b68      	ldr	r3, [pc, #416]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	4a65      	ldr	r2, [pc, #404]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a8c:	e003      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009aac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	d051      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac0:	d035      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac6:	d82e      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009acc:	d031      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ad2:	d828      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d01a      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	d822      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	d007      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009aea:	e01c      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aec:	4b4b      	ldr	r3, [pc, #300]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	4a4a      	ldr	r2, [pc, #296]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009af8:	e01c      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afe:	3308      	adds	r3, #8
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 f940 	bl	800bd88 <RCCEx_PLL2_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b0e:	e011      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b14:	3328      	adds	r3, #40	; 0x28
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f002 f9e7 	bl	800beec <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b24:	e006      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b3c:	4b37      	ldr	r3, [pc, #220]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b40:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4a:	4a34      	ldr	r2, [pc, #208]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009b74:	460b      	mov	r3, r1
 8009b76:	4313      	orrs	r3, r2
 8009b78:	d056      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b84:	d033      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009b86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b8a:	d82c      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b90:	d02f      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b96:	d826      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009b98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b9c:	d02b      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009b9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ba2:	d820      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba8:	d012      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bae:	d81a      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d022      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb8:	d115      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f8e0 	bl	800bd88 <RCCEx_PLL2_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009bce:	e015      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	3328      	adds	r3, #40	; 0x28
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 f987 	bl	800beec <RCCEx_PLL3_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009be4:	e00a      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bee:	bf00      	nop
 8009bf0:	e004      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bf2:	bf00      	nop
 8009bf4:	e002      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bf6:	bf00      	nop
 8009bf8:	e000      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10d      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c12:	4a02      	ldr	r2, [pc, #8]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c14:	430b      	orrs	r3, r1
 8009c16:	6513      	str	r3, [r2, #80]	; 0x50
 8009c18:	e006      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c1a:	bf00      	nop
 8009c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d055      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c54:	d033      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5a:	d82c      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d02f      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c66:	d826      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c6c:	d02b      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c72:	d820      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c78:	d012      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d81a      	bhi.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d022      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c88:	d115      	bne.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2101      	movs	r1, #1
 8009c92:	4618      	mov	r0, r3
 8009c94:	f002 f878 	bl	800bd88 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c9e:	e015      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca4:	3328      	adds	r3, #40	; 0x28
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f002 f91f 	bl	800beec <RCCEx_PLL3_Config>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cb4:	e00a      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cbc:	e006      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cbe:	bf00      	nop
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10b      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cd4:	4ba3      	ldr	r3, [pc, #652]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ce4:	4a9f      	ldr	r2, [pc, #636]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8009cea:	e003      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d037      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d1e:	d00e      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d24:	d816      	bhi.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d018      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d2e:	d111      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d30:	4b8c      	ldr	r3, [pc, #560]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a8b      	ldr	r2, [pc, #556]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d3c:	e00f      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d42:	3308      	adds	r3, #8
 8009d44:	2101      	movs	r1, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	f002 f81e 	bl	800bd88 <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d52:	e004      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d5a:	e000      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d66:	4b7f      	ldr	r3, [pc, #508]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	4a7b      	ldr	r2, [pc, #492]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d76:	430b      	orrs	r3, r1
 8009d78:	6513      	str	r3, [r2, #80]	; 0x50
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d039      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d81c      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009dae:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009df1 	.word	0x08009df1
 8009db8:	08009dc5 	.word	0x08009dc5
 8009dbc:	08009dd3 	.word	0x08009dd3
 8009dc0:	08009df1 	.word	0x08009df1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc4:	4b67      	ldr	r3, [pc, #412]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a66      	ldr	r2, [pc, #408]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009dd0:	e00f      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	2102      	movs	r1, #2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 ffd4 	bl	800bd88 <RCCEx_PLL2_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009de6:	e004      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dee:	e000      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009dfa:	4b5a      	ldr	r3, [pc, #360]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfe:	f023 0103 	bic.w	r1, r3, #3
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e08:	4a56      	ldr	r2, [pc, #344]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e0e:	e003      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f000 809f 	beq.w	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e3a:	4b4b      	ldr	r3, [pc, #300]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a4a      	ldr	r2, [pc, #296]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e46:	f7f9 fa03 	bl	8003250 <HAL_GetTick>
 8009e4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e4e:	e00b      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e50:	f7f9 f9fe 	bl	8003250 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b64      	cmp	r3, #100	; 0x64
 8009e5e:	d903      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e66:	e005      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e68:	4b3f      	ldr	r3, [pc, #252]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0ed      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d179      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009e7c:	4b39      	ldr	r3, [pc, #228]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e88:	4053      	eors	r3, r2
 8009e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d015      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e92:	4b34      	ldr	r3, [pc, #208]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e9e:	4b31      	ldr	r3, [pc, #196]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	4a30      	ldr	r2, [pc, #192]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009eaa:	4b2e      	ldr	r3, [pc, #184]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eae:	4a2d      	ldr	r2, [pc, #180]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009eb6:	4a2b      	ldr	r2, [pc, #172]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ebc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eca:	d118      	bne.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7f9 f9c0 	bl	8003250 <HAL_GetTick>
 8009ed0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ed4:	e00d      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed6:	f7f9 f9bb 	bl	8003250 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ee0:	1ad2      	subs	r2, r2, r3
 8009ee2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d903      	bls.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ef0:	e005      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0eb      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d129      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f16:	d10e      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f28:	091a      	lsrs	r2, r3, #4
 8009f2a:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	4a0d      	ldr	r2, [pc, #52]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6113      	str	r3, [r2, #16]
 8009f34:	e005      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f40:	6113      	str	r3, [r2, #16]
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f52:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f54:	430b      	orrs	r3, r1
 8009f56:	6713      	str	r3, [r2, #112]	; 0x70
 8009f58:	e00e      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009f62:	e009      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009f64:	58024400 	.word	0x58024400
 8009f68:	58024800 	.word	0x58024800
 8009f6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f002 0301 	and.w	r3, r2, #1
 8009f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f000 8089 	beq.w	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa0:	2b28      	cmp	r3, #40	; 0x28
 8009fa2:	d86b      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009fa4:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	0800a085 	.word	0x0800a085
 8009fb0:	0800a07d 	.word	0x0800a07d
 8009fb4:	0800a07d 	.word	0x0800a07d
 8009fb8:	0800a07d 	.word	0x0800a07d
 8009fbc:	0800a07d 	.word	0x0800a07d
 8009fc0:	0800a07d 	.word	0x0800a07d
 8009fc4:	0800a07d 	.word	0x0800a07d
 8009fc8:	0800a07d 	.word	0x0800a07d
 8009fcc:	0800a051 	.word	0x0800a051
 8009fd0:	0800a07d 	.word	0x0800a07d
 8009fd4:	0800a07d 	.word	0x0800a07d
 8009fd8:	0800a07d 	.word	0x0800a07d
 8009fdc:	0800a07d 	.word	0x0800a07d
 8009fe0:	0800a07d 	.word	0x0800a07d
 8009fe4:	0800a07d 	.word	0x0800a07d
 8009fe8:	0800a07d 	.word	0x0800a07d
 8009fec:	0800a067 	.word	0x0800a067
 8009ff0:	0800a07d 	.word	0x0800a07d
 8009ff4:	0800a07d 	.word	0x0800a07d
 8009ff8:	0800a07d 	.word	0x0800a07d
 8009ffc:	0800a07d 	.word	0x0800a07d
 800a000:	0800a07d 	.word	0x0800a07d
 800a004:	0800a07d 	.word	0x0800a07d
 800a008:	0800a07d 	.word	0x0800a07d
 800a00c:	0800a085 	.word	0x0800a085
 800a010:	0800a07d 	.word	0x0800a07d
 800a014:	0800a07d 	.word	0x0800a07d
 800a018:	0800a07d 	.word	0x0800a07d
 800a01c:	0800a07d 	.word	0x0800a07d
 800a020:	0800a07d 	.word	0x0800a07d
 800a024:	0800a07d 	.word	0x0800a07d
 800a028:	0800a07d 	.word	0x0800a07d
 800a02c:	0800a085 	.word	0x0800a085
 800a030:	0800a07d 	.word	0x0800a07d
 800a034:	0800a07d 	.word	0x0800a07d
 800a038:	0800a07d 	.word	0x0800a07d
 800a03c:	0800a07d 	.word	0x0800a07d
 800a040:	0800a07d 	.word	0x0800a07d
 800a044:	0800a07d 	.word	0x0800a07d
 800a048:	0800a07d 	.word	0x0800a07d
 800a04c:	0800a085 	.word	0x0800a085
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a054:	3308      	adds	r3, #8
 800a056:	2101      	movs	r1, #1
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fe95 	bl	800bd88 <RCCEx_PLL2_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a064:	e00f      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06a:	3328      	adds	r3, #40	; 0x28
 800a06c:	2101      	movs	r1, #1
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 ff3c 	bl	800beec <RCCEx_PLL3_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a07a:	e004      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a082:	e000      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a08e:	4bbf      	ldr	r3, [pc, #764]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a092:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09c:	4abb      	ldr	r2, [pc, #748]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6553      	str	r3, [r2, #84]	; 0x54
 800a0a2:	e003      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f002 0302 	and.w	r3, r2, #2
 800a0b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	d041      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d824      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a129 	.word	0x0800a129
 800a0e0:	0800a0f5 	.word	0x0800a0f5
 800a0e4:	0800a10b 	.word	0x0800a10b
 800a0e8:	0800a129 	.word	0x0800a129
 800a0ec:	0800a129 	.word	0x0800a129
 800a0f0:	0800a129 	.word	0x0800a129
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fe43 	bl	800bd88 <RCCEx_PLL2_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a108:	e00f      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a10e:	3328      	adds	r3, #40	; 0x28
 800a110:	2101      	movs	r1, #1
 800a112:	4618      	mov	r0, r3
 800a114:	f001 feea 	bl	800beec <RCCEx_PLL3_Config>
 800a118:	4603      	mov	r3, r0
 800a11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a11e:	e004      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a126:	e000      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a132:	4b96      	ldr	r3, [pc, #600]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	f023 0107 	bic.w	r1, r3, #7
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a140:	4a92      	ldr	r2, [pc, #584]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a142:	430b      	orrs	r3, r1
 800a144:	6553      	str	r3, [r2, #84]	; 0x54
 800a146:	e003      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f002 0304 	and.w	r3, r2, #4
 800a15c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a166:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d044      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d825      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a1d1 	.word	0x0800a1d1
 800a188:	0800a19d 	.word	0x0800a19d
 800a18c:	0800a1b3 	.word	0x0800a1b3
 800a190:	0800a1d1 	.word	0x0800a1d1
 800a194:	0800a1d1 	.word	0x0800a1d1
 800a198:	0800a1d1 	.word	0x0800a1d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 fdef 	bl	800bd88 <RCCEx_PLL2_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1b0:	e00f      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	3328      	adds	r3, #40	; 0x28
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 fe96 	bl	800beec <RCCEx_PLL3_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e004      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1ce:	e000      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a1da:	4b6c      	ldr	r3, [pc, #432]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1de:	f023 0107 	bic.w	r1, r3, #7
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ea:	4a68      	ldr	r2, [pc, #416]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a1f0:	e003      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f002 0320 	and.w	r3, r2, #32
 800a206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a20a:	2300      	movs	r3, #0
 800a20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a214:	460b      	mov	r3, r1
 800a216:	4313      	orrs	r3, r2
 800a218:	d055      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a226:	d033      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a22c:	d82c      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a232:	d02f      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a238:	d826      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a23a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a23e:	d02b      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a244:	d820      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a24a:	d012      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a250:	d81a      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d022      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a25a:	d115      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	3308      	adds	r3, #8
 800a262:	2100      	movs	r1, #0
 800a264:	4618      	mov	r0, r3
 800a266:	f001 fd8f 	bl	800bd88 <RCCEx_PLL2_Config>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a270:	e015      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	3328      	adds	r3, #40	; 0x28
 800a278:	2102      	movs	r1, #2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fe36 	bl	800beec <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a286:	e00a      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a28e:	e006      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a290:	bf00      	nop
 800a292:	e004      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a294:	bf00      	nop
 800a296:	e002      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a298:	bf00      	nop
 800a29a:	e000      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2a6:	4b39      	ldr	r3, [pc, #228]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b6:	4a35      	ldr	r2, [pc, #212]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	6553      	str	r3, [r2, #84]	; 0x54
 800a2bc:	e003      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a2d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	d058      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f2:	d033      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a2f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f8:	d82c      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fe:	d02f      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a304:	d826      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a30a:	d02b      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a30c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a310:	d820      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a316:	d012      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31c:	d81a      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d022      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a326:	d115      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32c:	3308      	adds	r3, #8
 800a32e:	2100      	movs	r1, #0
 800a330:	4618      	mov	r0, r3
 800a332:	f001 fd29 	bl	800bd88 <RCCEx_PLL2_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a33c:	e015      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a342:	3328      	adds	r3, #40	; 0x28
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 fdd0 	bl	800beec <RCCEx_PLL3_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a352:	e00a      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a35a:	e006      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a35c:	bf00      	nop
 800a35e:	e004      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a360:	bf00      	nop
 800a362:	e002      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a364:	bf00      	nop
 800a366:	e000      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a36a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10e      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a372:	4b06      	ldr	r3, [pc, #24]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a376:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a382:	4a02      	ldr	r2, [pc, #8]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a384:	430b      	orrs	r3, r1
 800a386:	6593      	str	r3, [r2, #88]	; 0x58
 800a388:	e006      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a38a:	bf00      	nop
 800a38c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a3a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d055      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a3c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3c4:	d033      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a3c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3ca:	d82c      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d0:	d02f      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a3d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d6:	d826      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3dc:	d02b      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a3de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3e2:	d820      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e8:	d012      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a3ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ee:	d81a      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d022      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a3f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f8:	d115      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	3308      	adds	r3, #8
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f001 fcc0 	bl	800bd88 <RCCEx_PLL2_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a40e:	e015      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a414:	3328      	adds	r3, #40	; 0x28
 800a416:	2102      	movs	r1, #2
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 fd67 	bl	800beec <RCCEx_PLL3_Config>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a424:	e00a      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a42c:	e006      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a42e:	bf00      	nop
 800a430:	e004      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a432:	bf00      	nop
 800a434:	e002      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a436:	bf00      	nop
 800a438:	e000      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a444:	4ba1      	ldr	r3, [pc, #644]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a448:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a454:	4a9d      	ldr	r2, [pc, #628]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a456:	430b      	orrs	r3, r1
 800a458:	6593      	str	r3, [r2, #88]	; 0x58
 800a45a:	e003      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f002 0308 	and.w	r3, r2, #8
 800a470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a474:	2300      	movs	r3, #0
 800a476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a47a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a47e:	460b      	mov	r3, r1
 800a480:	4313      	orrs	r3, r2
 800a482:	d01e      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a490:	d10c      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a496:	3328      	adds	r3, #40	; 0x28
 800a498:	2102      	movs	r1, #2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 fd26 	bl	800beec <RCCEx_PLL3_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4ac:	4b87      	ldr	r3, [pc, #540]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	4a83      	ldr	r2, [pc, #524]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f002 0310 	and.w	r3, r2, #16
 800a4ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a4d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	d01e      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	d10c      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f4:	3328      	adds	r3, #40	; 0x28
 800a4f6:	2102      	movs	r1, #2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f001 fcf7 	bl	800beec <RCCEx_PLL3_Config>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a50a:	4b70      	ldr	r3, [pc, #448]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a51a:	4a6c      	ldr	r2, [pc, #432]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a52c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a530:	2300      	movs	r3, #0
 800a532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a536:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a53a:	460b      	mov	r3, r1
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d03e      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d022      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a552:	d81b      	bhi.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55c:	d00b      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a55e:	e015      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a564:	3308      	adds	r3, #8
 800a566:	2100      	movs	r1, #0
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 fc0d 	bl	800bd88 <RCCEx_PLL2_Config>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a574:	e00f      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57a:	3328      	adds	r3, #40	; 0x28
 800a57c:	2102      	movs	r1, #2
 800a57e:	4618      	mov	r0, r3
 800a580:	f001 fcb4 	bl	800beec <RCCEx_PLL3_Config>
 800a584:	4603      	mov	r3, r0
 800a586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a58a:	e004      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a592:	e000      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a594:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10b      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a59e:	4b4b      	ldr	r3, [pc, #300]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5ae:	4a47      	ldr	r2, [pc, #284]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a5b4:	e003      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a5ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	d03b      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5e6:	d01f      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a5e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5ec:	d818      	bhi.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f2:	d003      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a5f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5f8:	d007      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a5fa:	e011      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5fc:	4b33      	ldr	r3, [pc, #204]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4a32      	ldr	r2, [pc, #200]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a608:	e00f      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60e:	3328      	adds	r3, #40	; 0x28
 800a610:	2101      	movs	r1, #1
 800a612:	4618      	mov	r0, r3
 800a614:	f001 fc6a 	bl	800beec <RCCEx_PLL3_Config>
 800a618:	4603      	mov	r3, r0
 800a61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a61e:	e004      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a626:	e000      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a632:	4b26      	ldr	r3, [pc, #152]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a636:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a642:	4a22      	ldr	r2, [pc, #136]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a644:	430b      	orrs	r3, r1
 800a646:	6553      	str	r3, [r2, #84]	; 0x54
 800a648:	e003      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a64e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a65e:	673b      	str	r3, [r7, #112]	; 0x70
 800a660:	2300      	movs	r3, #0
 800a662:	677b      	str	r3, [r7, #116]	; 0x74
 800a664:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a668:	460b      	mov	r3, r1
 800a66a:	4313      	orrs	r3, r2
 800a66c:	d034      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67c:	d007      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a67e:	e011      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a680:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a11      	ldr	r2, [pc, #68]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a68c:	e00e      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a692:	3308      	adds	r3, #8
 800a694:	2102      	movs	r1, #2
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fb76 	bl	800bd88 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6a2:	e003      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10d      	bne.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a6b4:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c2:	4a02      	ldr	r2, [pc, #8]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6c8:	e006      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a6ca:	bf00      	nop
 800a6cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a6e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	d00c      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	3328      	adds	r3, #40	; 0x28
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 fbf5 	bl	800beec <RCCEx_PLL3_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a71a:	663b      	str	r3, [r7, #96]	; 0x60
 800a71c:	2300      	movs	r3, #0
 800a71e:	667b      	str	r3, [r7, #100]	; 0x64
 800a720:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a724:	460b      	mov	r3, r1
 800a726:	4313      	orrs	r3, r2
 800a728:	d038      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a736:	d018      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a73c:	d811      	bhi.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a742:	d014      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a748:	d80b      	bhi.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a752:	d106      	bne.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a754:	4bc3      	ldr	r3, [pc, #780]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4ac2      	ldr	r2, [pc, #776]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a760:	e008      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a768:	e004      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a76a:	bf00      	nop
 800a76c:	e002      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a76e:	bf00      	nop
 800a770:	e000      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a772:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a77c:	4bb9      	ldr	r3, [pc, #740]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78c:	4ab5      	ldr	r2, [pc, #724]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a78e:	430b      	orrs	r3, r1
 800a790:	6553      	str	r3, [r2, #84]	; 0x54
 800a792:	e003      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d009      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a7b8:	4baa      	ldr	r3, [pc, #680]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c6:	4aa7      	ldr	r2, [pc, #668]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a7d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a7da:	2300      	movs	r3, #0
 800a7dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a7de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	d00a      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a7e8:	4b9e      	ldr	r3, [pc, #632]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7f8:	4a9a      	ldr	r2, [pc, #616]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a80a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a80c:	2300      	movs	r3, #0
 800a80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a810:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a814:	460b      	mov	r3, r1
 800a816:	4313      	orrs	r3, r2
 800a818:	d009      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a81a:	4b92      	ldr	r3, [pc, #584]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a828:	4a8e      	ldr	r2, [pc, #568]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a82a:	430b      	orrs	r3, r1
 800a82c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a83a:	643b      	str	r3, [r7, #64]	; 0x40
 800a83c:	2300      	movs	r3, #0
 800a83e:	647b      	str	r3, [r7, #68]	; 0x44
 800a840:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a844:	460b      	mov	r3, r1
 800a846:	4313      	orrs	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a84a:	4b86      	ldr	r3, [pc, #536]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4a85      	ldr	r2, [pc, #532]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a854:	6113      	str	r3, [r2, #16]
 800a856:	4b83      	ldr	r3, [pc, #524]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a858:	6919      	ldr	r1, [r3, #16]
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a862:	4a80      	ldr	r2, [pc, #512]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a864:	430b      	orrs	r3, r1
 800a866:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a874:	63bb      	str	r3, [r7, #56]	; 0x38
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a87e:	460b      	mov	r3, r1
 800a880:	4313      	orrs	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a884:	4b77      	ldr	r3, [pc, #476]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a892:	4a74      	ldr	r2, [pc, #464]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a894:	430b      	orrs	r3, r1
 800a896:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a8a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d00a      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8b4:	4b6b      	ldr	r3, [pc, #428]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8c4:	4a67      	ldr	r2, [pc, #412]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	d011      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f001 fa4a 	bl	800bd88 <RCCEx_PLL2_Config>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	2100      	movs	r1, #0
 800a914:	6239      	str	r1, [r7, #32]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
 800a91c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a920:	460b      	mov	r3, r1
 800a922:	4313      	orrs	r3, r2
 800a924:	d011      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92a:	3308      	adds	r3, #8
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f001 fa2a 	bl	800bd88 <RCCEx_PLL2_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	2100      	movs	r1, #0
 800a954:	61b9      	str	r1, [r7, #24]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d011      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96a:	3308      	adds	r3, #8
 800a96c:	2102      	movs	r1, #2
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 fa0a 	bl	800bd88 <RCCEx_PLL2_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	2100      	movs	r1, #0
 800a994:	6139      	str	r1, [r7, #16]
 800a996:	f003 0308 	and.w	r3, r3, #8
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	d011      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	3328      	adds	r3, #40	; 0x28
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f001 fa9c 	bl	800beec <RCCEx_PLL3_Config>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	d011      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ea:	3328      	adds	r3, #40	; 0x28
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fa7c 	bl	800beec <RCCEx_PLL3_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	2100      	movs	r1, #0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	607b      	str	r3, [r7, #4]
 800aa1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d011      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	3328      	adds	r3, #40	; 0x28
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 fa5c 	bl	800beec <RCCEx_PLL3_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aa4a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa64:	58024400 	.word	0x58024400

0800aa68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b090      	sub	sp, #64	; 0x40
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aa72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	f040 8094 	bne.w	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aa80:	4b9e      	ldr	r3, [pc, #632]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	f200 8087 	bhi.w	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aa92:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aad5 	.word	0x0800aad5
 800aaa0:	0800aafd 	.word	0x0800aafd
 800aaa4:	0800ab99 	.word	0x0800ab99
 800aaa8:	0800ab25 	.word	0x0800ab25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaac:	4b93      	ldr	r3, [pc, #588]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab8:	d108      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 f810 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac8:	f000 bd45 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad0:	f000 bd41 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad4:	4b89      	ldr	r3, [pc, #548]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aadc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae0:	d108      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae2:	f107 0318 	add.w	r3, r7, #24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fd54 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf0:	f000 bd31 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf8:	f000 bd2d 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aafc:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab08:	d108      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab0a:	f107 030c 	add.w	r3, r7, #12
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fe94 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	f000 bd1d 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab20:	f000 bd19 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab24:	4b75      	ldr	r3, [pc, #468]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab2e:	4b73      	ldr	r3, [pc, #460]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	d10c      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ab3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d109      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab40:	4b6e      	ldr	r3, [pc, #440]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	08db      	lsrs	r3, r3, #3
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	4a6d      	ldr	r2, [pc, #436]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab52:	e01f      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab54:	4b69      	ldr	r3, [pc, #420]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab60:	d106      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab68:	d102      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab6a:	4b66      	ldr	r3, [pc, #408]	; (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab6e:	e011      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab70:	4b62      	ldr	r3, [pc, #392]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab7c:	d106      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab84:	d102      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab86:	4b60      	ldr	r3, [pc, #384]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ab88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8a:	e003      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab90:	f000 bce1 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab94:	f000 bcdf 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab98:	4b5c      	ldr	r3, [pc, #368]	; (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9c:	f000 bcdb 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba4:	f000 bcd7 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800abb0:	430b      	orrs	r3, r1
 800abb2:	f040 80ad 	bne.w	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800abb6:	4b51      	ldr	r3, [pc, #324]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800abbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc6:	d056      	beq.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abce:	f200 8090 	bhi.w	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	2bc0      	cmp	r3, #192	; 0xc0
 800abd6:	f000 8088 	beq.w	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	2bc0      	cmp	r3, #192	; 0xc0
 800abde:	f200 8088 	bhi.w	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	2b80      	cmp	r3, #128	; 0x80
 800abe6:	d032      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	2b80      	cmp	r3, #128	; 0x80
 800abec:	f200 8081 	bhi.w	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	2b40      	cmp	r3, #64	; 0x40
 800abfa:	d014      	beq.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800abfc:	e079      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abfe:	4b3f      	ldr	r3, [pc, #252]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac0a:	d108      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 ff67 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac1a:	f000 bc9c 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac22:	f000 bc98 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac26:	4b35      	ldr	r3, [pc, #212]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac32:	d108      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac34:	f107 0318 	add.w	r3, r7, #24
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fcab 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac42:	f000 bc88 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4a:	f000 bc84 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4e:	4b2b      	ldr	r3, [pc, #172]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d108      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fdeb 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6a:	f000 bc74 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac72:	f000 bc70 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac80:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b04      	cmp	r3, #4
 800ac8a:	d10c      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d109      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac92:	4b1a      	ldr	r3, [pc, #104]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a18      	ldr	r2, [pc, #96]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca4:	e01f      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb2:	d106      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800acb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acba:	d102      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc0:	e011      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acc2:	4b0e      	ldr	r3, [pc, #56]	; (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acce:	d106      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd6:	d102      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acd8:	4b0b      	ldr	r3, [pc, #44]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acdc:	e003      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ace2:	f000 bc38 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ace6:	f000 bc36 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acea:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acee:	f000 bc32 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf6:	f000 bc2e 	b.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acfa:	bf00      	nop
 800acfc:	58024400 	.word	0x58024400
 800ad00:	03d09000 	.word	0x03d09000
 800ad04:	003d0900 	.word	0x003d0900
 800ad08:	017d7840 	.word	0x017d7840
 800ad0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad14:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	f040 809c 	bne.w	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ad1e:	4b9e      	ldr	r3, [pc, #632]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ad26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad2e:	d054      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad36:	f200 808b 	bhi.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad40:	f000 8083 	beq.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad4a:	f200 8081 	bhi.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad54:	d02f      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad5c:	d878      	bhi.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad6a:	d012      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ad6c:	e070      	b.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad6e:	4b8a      	ldr	r3, [pc, #552]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 feaf 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8a:	e3e4      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad90:	e3e1      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad92:	4b81      	ldr	r3, [pc, #516]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada0:	f107 0318 	add.w	r3, r7, #24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fbf5 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adae:	e3d2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb4:	e3cf      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adb6:	4b78      	ldr	r3, [pc, #480]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc2:	d107      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fd37 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add2:	e3c0      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add8:	e3bd      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adda:	4b6f      	ldr	r3, [pc, #444]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800addc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ade4:	4b6c      	ldr	r3, [pc, #432]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b04      	cmp	r3, #4
 800adee:	d10c      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adf6:	4b68      	ldr	r3, [pc, #416]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	08db      	lsrs	r3, r3, #3
 800adfc:	f003 0303 	and.w	r3, r3, #3
 800ae00:	4a66      	ldr	r2, [pc, #408]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae02:	fa22 f303 	lsr.w	r3, r2, r3
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae08:	e01e      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae0a:	4b63      	ldr	r3, [pc, #396]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae16:	d106      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae1e:	d102      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae20:	4b5f      	ldr	r3, [pc, #380]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae24:	e010      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae26:	4b5c      	ldr	r3, [pc, #368]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae32:	d106      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3a:	d102      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae3c:	4b59      	ldr	r3, [pc, #356]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae40:	e002      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae46:	e386      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae48:	e385      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae4a:	4b57      	ldr	r3, [pc, #348]	; (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4e:	e382      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae54:	e37f      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae5a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	f040 80a7 	bne.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ae64:	4b4c      	ldr	r3, [pc, #304]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ae6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae74:	d055      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae7c:	f200 8096 	bhi.w	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae86:	f000 8084 	beq.w	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae90:	f200 808c 	bhi.w	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae9a:	d030      	beq.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aea2:	f200 8083 	bhi.w	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aeb2:	d012      	beq.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aeb4:	e07a      	b.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeb6:	4b38      	ldr	r3, [pc, #224]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec2:	d107      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fe0b 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed2:	e340      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed8:	e33d      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeda:	4b2f      	ldr	r3, [pc, #188]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aee6:	d107      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee8:	f107 0318 	add.w	r3, r7, #24
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fb51 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aef6:	e32e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aefc:	e32b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aefe:	4b26      	ldr	r3, [pc, #152]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af0a:	d107      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af0c:	f107 030c 	add.w	r3, r7, #12
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fc93 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af1a:	e31c      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af20:	e319      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af22:	4b1d      	ldr	r3, [pc, #116]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af2c:	4b1a      	ldr	r3, [pc, #104]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b04      	cmp	r3, #4
 800af36:	d10c      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800af38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d109      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af3e:	4b16      	ldr	r3, [pc, #88]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	08db      	lsrs	r3, r3, #3
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	4a14      	ldr	r2, [pc, #80]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af4a:	fa22 f303 	lsr.w	r3, r2, r3
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af50:	e01e      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af52:	4b11      	ldr	r3, [pc, #68]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5e:	d106      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800af60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af66:	d102      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af68:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800af6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6c:	e010      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af7a:	d106      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800af7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af82:	d102      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af84:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af88:	e002      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af8e:	e2e2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af90:	e2e1      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af92:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af96:	e2de      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af98:	58024400 	.word	0x58024400
 800af9c:	03d09000 	.word	0x03d09000
 800afa0:	003d0900 	.word	0x003d0900
 800afa4:	017d7840 	.word	0x017d7840
 800afa8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb0:	e2d1      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800afb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800afba:	430b      	orrs	r3, r1
 800afbc:	f040 809c 	bne.w	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800afc0:	4b93      	ldr	r3, [pc, #588]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800afc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afd0:	d054      	beq.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afd8:	f200 808b 	bhi.w	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afe2:	f000 8083 	beq.w	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afec:	f200 8081 	bhi.w	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aff6:	d02f      	beq.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800affe:	d878      	bhi.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b00c:	d012      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b00e:	e070      	b.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b010:	4b7f      	ldr	r3, [pc, #508]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b01c:	d107      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b01e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fd5e 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b02c:	e293      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b032:	e290      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b034:	4b76      	ldr	r3, [pc, #472]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b03c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b040:	d107      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b042:	f107 0318 	add.w	r3, r7, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f000 faa4 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b050:	e281      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b056:	e27e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b058:	4b6d      	ldr	r3, [pc, #436]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b064:	d107      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b066:	f107 030c 	add.w	r3, r7, #12
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fbe6 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b074:	e26f      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b07a:	e26c      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b07c:	4b64      	ldr	r3, [pc, #400]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b07e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b084:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b086:	4b62      	ldr	r3, [pc, #392]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0304 	and.w	r3, r3, #4
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d10c      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b098:	4b5d      	ldr	r3, [pc, #372]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	08db      	lsrs	r3, r3, #3
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	4a5c      	ldr	r2, [pc, #368]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0aa:	e01e      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0ac:	4b58      	ldr	r3, [pc, #352]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b8:	d106      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0c0:	d102      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0c2:	4b55      	ldr	r3, [pc, #340]	; (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c6:	e010      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0c8:	4b51      	ldr	r3, [pc, #324]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0d4:	d106      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0dc:	d102      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0de:	4b4f      	ldr	r3, [pc, #316]	; (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0e2:	e002      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0e8:	e235      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0ea:	e234      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0ec:	4b4c      	ldr	r3, [pc, #304]	; (800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f0:	e231      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f6:	e22e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b100:	430b      	orrs	r3, r1
 800b102:	f040 808f 	bne.w	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b106:	4b42      	ldr	r3, [pc, #264]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b10a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b10e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b116:	d06b      	beq.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b11e:	d874      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b126:	d056      	beq.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b12e:	d86c      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b136:	d03b      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b13e:	d864      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b146:	d021      	beq.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b14e:	d85c      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b15c:	d004      	beq.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b15e:	e054      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b160:	f7fe fa0a 	bl	8009578 <HAL_RCC_GetPCLK1Freq>
 800b164:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b166:	e1f6      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b168:	4b29      	ldr	r3, [pc, #164]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b174:	d107      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b176:	f107 0318 	add.w	r3, r7, #24
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fa0a 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b184:	e1e7      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18a:	e1e4      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b18c:	4b20      	ldr	r3, [pc, #128]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b198:	d107      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fb4c 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a8:	e1d5      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ae:	e1d2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1b0:	4b17      	ldr	r3, [pc, #92]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	2b04      	cmp	r3, #4
 800b1ba:	d109      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1bc:	4b14      	ldr	r3, [pc, #80]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	08db      	lsrs	r3, r3, #3
 800b1c2:	f003 0303 	and.w	r3, r3, #3
 800b1c6:	4a13      	ldr	r2, [pc, #76]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ce:	e1c2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1d4:	e1bf      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e2:	d102      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e8:	e1b5      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ee:	e1b2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1fc:	d102      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b1fe:	4b07      	ldr	r3, [pc, #28]	; (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b202:	e1a8      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b208:	e1a5      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20e:	e1a2      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b210:	58024400 	.word	0x58024400
 800b214:	03d09000 	.word	0x03d09000
 800b218:	003d0900 	.word	0x003d0900
 800b21c:	017d7840 	.word	0x017d7840
 800b220:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b228:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b22c:	430b      	orrs	r3, r1
 800b22e:	d173      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b230:	4b9c      	ldr	r3, [pc, #624]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b238:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b240:	d02f      	beq.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b248:	d863      	bhi.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b256:	d012      	beq.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b258:	e05b      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b25a:	4b92      	ldr	r3, [pc, #584]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b266:	d107      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b268:	f107 0318 	add.w	r3, r7, #24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 f991 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b276:	e16e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b27c:	e16b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b27e:	4b89      	ldr	r3, [pc, #548]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28a:	d107      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fad3 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29a:	e15c      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2a0:	e159      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2a2:	4b80      	ldr	r3, [pc, #512]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ac:	4b7d      	ldr	r3, [pc, #500]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d10c      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d109      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2be:	4b79      	ldr	r3, [pc, #484]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	08db      	lsrs	r3, r3, #3
 800b2c4:	f003 0303 	and.w	r3, r3, #3
 800b2c8:	4a77      	ldr	r2, [pc, #476]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2d0:	e01e      	b.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2d2:	4b74      	ldr	r3, [pc, #464]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2de:	d106      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2e6:	d102      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2e8:	4b70      	ldr	r3, [pc, #448]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ec:	e010      	b.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2ee:	4b6d      	ldr	r3, [pc, #436]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2fa:	d106      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b302:	d102      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b304:	4b6a      	ldr	r3, [pc, #424]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b308:	e002      	b.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b30e:	e122      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b310:	e121      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b316:	e11e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b31c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b320:	430b      	orrs	r3, r1
 800b322:	d133      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b324:	4b5f      	ldr	r3, [pc, #380]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b32c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33a:	d012      	beq.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b33c:	e023      	b.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b33e:	4b59      	ldr	r3, [pc, #356]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b34a:	d107      	bne.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b34c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b350:	4618      	mov	r0, r3
 800b352:	f000 fbc7 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b35a:	e0fc      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b360:	e0f9      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b362:	4b50      	ldr	r3, [pc, #320]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b36a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b36e:	d107      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b370:	f107 0318 	add.w	r3, r7, #24
 800b374:	4618      	mov	r0, r3
 800b376:	f000 f90d 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b37e:	e0ea      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b384:	e0e7      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38a:	e0e4      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b390:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b394:	430b      	orrs	r3, r1
 800b396:	f040 808d 	bne.w	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b39a:	4b42      	ldr	r3, [pc, #264]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b3a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3aa:	d06b      	beq.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3b2:	d874      	bhi.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ba:	d056      	beq.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c2:	d86c      	bhi.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3ca:	d03b      	beq.n	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3d2:	d864      	bhi.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3da:	d021      	beq.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e2:	d85c      	bhi.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d004      	beq.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f0:	d004      	beq.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b3f2:	e054      	b.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b3f4:	f000 f8b8 	bl	800b568 <HAL_RCCEx_GetD3PCLK1Freq>
 800b3f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3fa:	e0ac      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3fc:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b408:	d107      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b40a:	f107 0318 	add.w	r3, r7, #24
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f8c0 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b418:	e09d      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b41e:	e09a      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b420:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b42c:	d107      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b42e:	f107 030c 	add.w	r3, r7, #12
 800b432:	4618      	mov	r0, r3
 800b434:	f000 fa02 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43c:	e08b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b442:	e088      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b444:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d109      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b450:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	08db      	lsrs	r3, r3, #3
 800b456:	f003 0303 	and.w	r3, r3, #3
 800b45a:	4a13      	ldr	r2, [pc, #76]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b45c:	fa22 f303 	lsr.w	r3, r2, r3
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b462:	e078      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b468:	e075      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b46a:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b476:	d102      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b478:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47c:	e06b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b482:	e068      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b48c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b490:	d102      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b492:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b496:	e05e      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b49c:	e05b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4a2:	e058      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	03d09000 	.word	0x03d09000
 800b4ac:	003d0900 	.word	0x003d0900
 800b4b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b4bc:	430b      	orrs	r3, r1
 800b4be:	d148      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b4c0:	4b27      	ldr	r3, [pc, #156]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4d0:	d02a      	beq.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4d8:	d838      	bhi.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d004      	beq.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4e6:	d00d      	beq.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b4e8:	e030      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f6:	d102      	bne.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b4f8:	4b1a      	ldr	r3, [pc, #104]	; (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4fc:	e02b      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b502:	e028      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b504:	4b16      	ldr	r3, [pc, #88]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b50c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b510:	d107      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b516:	4618      	mov	r0, r3
 800b518:	f000 fae4 	bl	800bae4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b520:	e019      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b526:	e016      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b534:	d107      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b536:	f107 0318 	add.w	r3, r7, #24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f82a 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b544:	e007      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b54a:	e004      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b550:	e001      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3740      	adds	r7, #64	; 0x40
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	58024400 	.word	0x58024400
 800b564:	017d7840 	.word	0x017d7840

0800b568 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b56c:	f7fd ffd4 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800b570:	4602      	mov	r2, r0
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	091b      	lsrs	r3, r3, #4
 800b578:	f003 0307 	and.w	r3, r3, #7
 800b57c:	4904      	ldr	r1, [pc, #16]	; (800b590 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b57e:	5ccb      	ldrb	r3, [r1, r3]
 800b580:	f003 031f 	and.w	r3, r3, #31
 800b584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b588:	4618      	mov	r0, r3
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	58024400 	.word	0x58024400
 800b590:	080142b0 	.word	0x080142b0

0800b594 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b594:	b480      	push	{r7}
 800b596:	b089      	sub	sp, #36	; 0x24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b59c:	4ba1      	ldr	r3, [pc, #644]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b5a6:	4b9f      	ldr	r3, [pc, #636]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5aa:	0b1b      	lsrs	r3, r3, #12
 800b5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b5b2:	4b9c      	ldr	r3, [pc, #624]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	091b      	lsrs	r3, r3, #4
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b5be:	4b99      	ldr	r3, [pc, #612]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c2:	08db      	lsrs	r3, r3, #3
 800b5c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	fb02 f303 	mul.w	r3, r2, r3
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 8111 	beq.w	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	f000 8083 	beq.w	800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	f200 80a1 	bhi.w	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d056      	beq.n	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b5fe:	e099      	b.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b600:	4b88      	ldr	r3, [pc, #544]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d02d      	beq.n	800b668 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b60c:	4b85      	ldr	r3, [pc, #532]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	08db      	lsrs	r3, r3, #3
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	4a84      	ldr	r2, [pc, #528]	; (800b828 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b618:	fa22 f303 	lsr.w	r3, r2, r3
 800b61c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	ee07 3a90 	vmov	s15, r3
 800b624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b636:	4b7b      	ldr	r3, [pc, #492]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b646:	ed97 6a03 	vldr	s12, [r7, #12]
 800b64a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b666:	e087      	b.n	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b830 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67a:	4b6a      	ldr	r3, [pc, #424]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b68e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6aa:	e065      	b.n	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6be:	4b59      	ldr	r3, [pc, #356]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ee:	e043      	b.n	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b702:	4b48      	ldr	r3, [pc, #288]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b712:	ed97 6a03 	vldr	s12, [r7, #12]
 800b716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b732:	e021      	b.n	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b746:	4b37      	ldr	r3, [pc, #220]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b756:	ed97 6a03 	vldr	s12, [r7, #12]
 800b75a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b82c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b776:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b778:	4b2a      	ldr	r3, [pc, #168]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	0a5b      	lsrs	r3, r3, #9
 800b77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b78e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b792:	edd7 6a07 	vldr	s13, [r7, #28]
 800b796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79e:	ee17 2a90 	vmov	r2, s15
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b7a6:	4b1f      	ldr	r3, [pc, #124]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	0c1b      	lsrs	r3, r3, #16
 800b7ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b0:	ee07 3a90 	vmov	s15, r3
 800b7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7cc:	ee17 2a90 	vmov	r2, s15
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b7d4:	4b13      	ldr	r3, [pc, #76]	; (800b824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d8:	0e1b      	lsrs	r3, r3, #24
 800b7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fa:	ee17 2a90 	vmov	r2, s15
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b802:	e008      	b.n	800b816 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	609a      	str	r2, [r3, #8]
}
 800b816:	bf00      	nop
 800b818:	3724      	adds	r7, #36	; 0x24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	58024400 	.word	0x58024400
 800b828:	03d09000 	.word	0x03d09000
 800b82c:	46000000 	.word	0x46000000
 800b830:	4c742400 	.word	0x4c742400
 800b834:	4a742400 	.word	0x4a742400
 800b838:	4bbebc20 	.word	0x4bbebc20

0800b83c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b089      	sub	sp, #36	; 0x24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b844:	4ba1      	ldr	r3, [pc, #644]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b848:	f003 0303 	and.w	r3, r3, #3
 800b84c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b84e:	4b9f      	ldr	r3, [pc, #636]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	0d1b      	lsrs	r3, r3, #20
 800b854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b858:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b85a:	4b9c      	ldr	r3, [pc, #624]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b866:	4b99      	ldr	r3, [pc, #612]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86a:	08db      	lsrs	r3, r3, #3
 800b86c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	ee07 3a90 	vmov	s15, r3
 800b87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 8111 	beq.w	800baac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	f000 8083 	beq.w	800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	2b02      	cmp	r3, #2
 800b896:	f200 80a1 	bhi.w	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d056      	beq.n	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8a6:	e099      	b.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8a8:	4b88      	ldr	r3, [pc, #544]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d02d      	beq.n	800b910 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8b4:	4b85      	ldr	r3, [pc, #532]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	08db      	lsrs	r3, r3, #3
 800b8ba:	f003 0303 	and.w	r3, r3, #3
 800b8be:	4a84      	ldr	r2, [pc, #528]	; (800bad0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b8c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	ee07 3a90 	vmov	s15, r3
 800b8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b7b      	ldr	r3, [pc, #492]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b90e:	e087      	b.n	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bad8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b6a      	ldr	r3, [pc, #424]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	e065      	b.n	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800badc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b966:	4b59      	ldr	r3, [pc, #356]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b976:	ed97 6a03 	vldr	s12, [r7, #12]
 800b97a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b996:	e043      	b.n	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9aa:	4b48      	ldr	r3, [pc, #288]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9da:	e021      	b.n	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800badc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ee:	4b37      	ldr	r3, [pc, #220]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f6:	ee07 3a90 	vmov	s15, r3
 800b9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ba20:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	0a5b      	lsrs	r3, r3, #9
 800ba26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba46:	ee17 2a90 	vmov	r2, s15
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba4e:	4b1f      	ldr	r3, [pc, #124]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	0c1b      	lsrs	r3, r3, #16
 800ba54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba58:	ee07 3a90 	vmov	s15, r3
 800ba5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba74:	ee17 2a90 	vmov	r2, s15
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ba7c:	4b13      	ldr	r3, [pc, #76]	; (800bacc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	0e1b      	lsrs	r3, r3, #24
 800ba82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa2:	ee17 2a90 	vmov	r2, s15
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800baaa:	e008      	b.n	800babe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	609a      	str	r2, [r3, #8]
}
 800babe:	bf00      	nop
 800bac0:	3724      	adds	r7, #36	; 0x24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	58024400 	.word	0x58024400
 800bad0:	03d09000 	.word	0x03d09000
 800bad4:	46000000 	.word	0x46000000
 800bad8:	4c742400 	.word	0x4c742400
 800badc:	4a742400 	.word	0x4a742400
 800bae0:	4bbebc20 	.word	0x4bbebc20

0800bae4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b089      	sub	sp, #36	; 0x24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baec:	4ba0      	ldr	r3, [pc, #640]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf0:	f003 0303 	and.w	r3, r3, #3
 800baf4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800baf6:	4b9e      	ldr	r3, [pc, #632]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	091b      	lsrs	r3, r3, #4
 800bafc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb02:	4b9b      	ldr	r3, [pc, #620]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb0c:	4b98      	ldr	r3, [pc, #608]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb10:	08db      	lsrs	r3, r3, #3
 800bb12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 8111 	beq.w	800bd52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	f000 8083 	beq.w	800bc3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	f200 80a1 	bhi.w	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d056      	beq.n	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb4c:	e099      	b.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb4e:	4b88      	ldr	r3, [pc, #544]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d02d      	beq.n	800bbb6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb5a:	4b85      	ldr	r3, [pc, #532]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	08db      	lsrs	r3, r3, #3
 800bb60:	f003 0303 	and.w	r3, r3, #3
 800bb64:	4a83      	ldr	r2, [pc, #524]	; (800bd74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb66:	fa22 f303 	lsr.w	r3, r2, r3
 800bb6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	ee07 3a90 	vmov	s15, r3
 800bb72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	ee07 3a90 	vmov	s15, r3
 800bb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb84:	4b7a      	ldr	r3, [pc, #488]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb94:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb98:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbb4:	e087      	b.n	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc8:	4b69      	ldr	r3, [pc, #420]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbdc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf8:	e065      	b.n	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0c:	4b58      	ldr	r3, [pc, #352]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3c:	e043      	b.n	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	ee07 3a90 	vmov	s15, r3
 800bc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bd84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc50:	4b47      	ldr	r3, [pc, #284]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc60:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc80:	e021      	b.n	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc94:	4b36      	ldr	r3, [pc, #216]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bcc6:	4b2a      	ldr	r3, [pc, #168]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcca:	0a5b      	lsrs	r3, r3, #9
 800bccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcec:	ee17 2a90 	vmov	r2, s15
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bcf4:	4b1e      	ldr	r3, [pc, #120]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	0c1b      	lsrs	r3, r3, #16
 800bcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd1a:	ee17 2a90 	vmov	r2, s15
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bd22:	4b13      	ldr	r3, [pc, #76]	; (800bd70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	0e1b      	lsrs	r3, r3, #24
 800bd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd48:	ee17 2a90 	vmov	r2, s15
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd50:	e008      	b.n	800bd64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	609a      	str	r2, [r3, #8]
}
 800bd64:	bf00      	nop
 800bd66:	3724      	adds	r7, #36	; 0x24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	58024400 	.word	0x58024400
 800bd74:	03d09000 	.word	0x03d09000
 800bd78:	46000000 	.word	0x46000000
 800bd7c:	4c742400 	.word	0x4c742400
 800bd80:	4a742400 	.word	0x4a742400
 800bd84:	4bbebc20 	.word	0x4bbebc20

0800bd88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd96:	4b53      	ldr	r3, [pc, #332]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	f003 0303 	and.w	r3, r3, #3
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d101      	bne.n	800bda6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e099      	b.n	800beda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bda6:	4b4f      	ldr	r3, [pc, #316]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a4e      	ldr	r2, [pc, #312]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bdac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bdb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdb2:	f7f7 fa4d 	bl	8003250 <HAL_GetTick>
 800bdb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdb8:	e008      	b.n	800bdcc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdba:	f7f7 fa49 	bl	8003250 <HAL_GetTick>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d901      	bls.n	800bdcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e086      	b.n	800beda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdcc:	4b45      	ldr	r3, [pc, #276]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1f0      	bne.n	800bdba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bdd8:	4b42      	ldr	r3, [pc, #264]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bddc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	031b      	lsls	r3, r3, #12
 800bde6:	493f      	ldr	r1, [pc, #252]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	628b      	str	r3, [r1, #40]	; 0x28
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	025b      	lsls	r3, r3, #9
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	3b01      	subs	r3, #1
 800be08:	041b      	lsls	r3, r3, #16
 800be0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be0e:	431a      	orrs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	3b01      	subs	r3, #1
 800be16:	061b      	lsls	r3, r3, #24
 800be18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be1c:	4931      	ldr	r1, [pc, #196]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be22:	4b30      	ldr	r3, [pc, #192]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	492d      	ldr	r1, [pc, #180]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be30:	4313      	orrs	r3, r2
 800be32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be34:	4b2b      	ldr	r3, [pc, #172]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be38:	f023 0220 	bic.w	r2, r3, #32
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	4928      	ldr	r1, [pc, #160]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be42:	4313      	orrs	r3, r2
 800be44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be46:	4b27      	ldr	r3, [pc, #156]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4a:	4a26      	ldr	r2, [pc, #152]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be4c:	f023 0310 	bic.w	r3, r3, #16
 800be50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be52:	4b24      	ldr	r3, [pc, #144]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be56:	4b24      	ldr	r3, [pc, #144]	; (800bee8 <RCCEx_PLL2_Config+0x160>)
 800be58:	4013      	ands	r3, r2
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	69d2      	ldr	r2, [r2, #28]
 800be5e:	00d2      	lsls	r2, r2, #3
 800be60:	4920      	ldr	r1, [pc, #128]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be62:	4313      	orrs	r3, r2
 800be64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be66:	4b1f      	ldr	r3, [pc, #124]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	4a1e      	ldr	r2, [pc, #120]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be6c:	f043 0310 	orr.w	r3, r3, #16
 800be70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be78:	4b1a      	ldr	r3, [pc, #104]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	4a19      	ldr	r2, [pc, #100]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be84:	e00f      	b.n	800bea6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d106      	bne.n	800be9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be8c:	4b15      	ldr	r3, [pc, #84]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	4a14      	ldr	r2, [pc, #80]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be98:	e005      	b.n	800bea6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be9a:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800be9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9e:	4a11      	ldr	r2, [pc, #68]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bea6:	4b0f      	ldr	r3, [pc, #60]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a0e      	ldr	r2, [pc, #56]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800beac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800beb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beb2:	f7f7 f9cd 	bl	8003250 <HAL_GetTick>
 800beb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800beb8:	e008      	b.n	800becc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800beba:	f7f7 f9c9 	bl	8003250 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e006      	b.n	800beda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <RCCEx_PLL2_Config+0x15c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d0f0      	beq.n	800beba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	58024400 	.word	0x58024400
 800bee8:	ffff0007 	.word	0xffff0007

0800beec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800befa:	4b53      	ldr	r3, [pc, #332]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d101      	bne.n	800bf0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e099      	b.n	800c03e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf0a:	4b4f      	ldr	r3, [pc, #316]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a4e      	ldr	r2, [pc, #312]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf16:	f7f7 f99b 	bl	8003250 <HAL_GetTick>
 800bf1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf1c:	e008      	b.n	800bf30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf1e:	f7f7 f997 	bl	8003250 <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d901      	bls.n	800bf30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e086      	b.n	800c03e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf30:	4b45      	ldr	r3, [pc, #276]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f0      	bne.n	800bf1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf3c:	4b42      	ldr	r3, [pc, #264]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	051b      	lsls	r3, r3, #20
 800bf4a:	493f      	ldr	r1, [pc, #252]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	628b      	str	r3, [r1, #40]	; 0x28
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	025b      	lsls	r3, r3, #9
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	431a      	orrs	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	041b      	lsls	r3, r3, #16
 800bf6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	061b      	lsls	r3, r3, #24
 800bf7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf80:	4931      	ldr	r1, [pc, #196]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf86:	4b30      	ldr	r3, [pc, #192]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	492d      	ldr	r1, [pc, #180]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf98:	4b2b      	ldr	r3, [pc, #172]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	4928      	ldr	r1, [pc, #160]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfaa:	4b27      	ldr	r3, [pc, #156]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	4a26      	ldr	r2, [pc, #152]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfb6:	4b24      	ldr	r3, [pc, #144]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfba:	4b24      	ldr	r3, [pc, #144]	; (800c04c <RCCEx_PLL3_Config+0x160>)
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	69d2      	ldr	r2, [r2, #28]
 800bfc2:	00d2      	lsls	r2, r2, #3
 800bfc4:	4920      	ldr	r1, [pc, #128]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bfca:	4b1f      	ldr	r3, [pc, #124]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	4a1e      	ldr	r2, [pc, #120]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfdc:	4b1a      	ldr	r3, [pc, #104]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	4a19      	ldr	r2, [pc, #100]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bfe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bfe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfe8:	e00f      	b.n	800c00a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d106      	bne.n	800bffe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bff0:	4b15      	ldr	r3, [pc, #84]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	4a14      	ldr	r2, [pc, #80]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800bff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bffc:	e005      	b.n	800c00a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bffe:	4b12      	ldr	r3, [pc, #72]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	4a11      	ldr	r2, [pc, #68]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800c004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c008:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c00a:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a0e      	ldr	r2, [pc, #56]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800c010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c016:	f7f7 f91b 	bl	8003250 <HAL_GetTick>
 800c01a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c01c:	e008      	b.n	800c030 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c01e:	f7f7 f917 	bl	8003250 <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d901      	bls.n	800c030 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e006      	b.n	800c03e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <RCCEx_PLL3_Config+0x15c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0f0      	beq.n	800c01e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	58024400 	.word	0x58024400
 800c04c:	ffff0007 	.word	0xffff0007

0800c050 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d071      	beq.n	800c146 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7f5 fe94 	bl	8001da4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	f003 0310 	and.w	r3, r3, #16
 800c08e:	2b10      	cmp	r3, #16
 800c090:	d050      	beq.n	800c134 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	22ca      	movs	r2, #202	; 0xca
 800c098:	625a      	str	r2, [r3, #36]	; 0x24
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2253      	movs	r2, #83	; 0x53
 800c0a0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fa4a 	bl	800c53c <RTC_EnterInitMode>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d124      	bne.n	800c0fc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6899      	ldr	r1, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	4b24      	ldr	r3, [pc, #144]	; (800c150 <HAL_RTC_Init+0x100>)
 800c0be:	400b      	ands	r3, r1
 800c0c0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6899      	ldr	r1, [r3, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	431a      	orrs	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	0419      	lsls	r1, r3, #16
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fa56 	bl	800c5a4 <RTC_ExitInitMode>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d113      	bne.n	800c12a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f022 0203 	bic.w	r2, r2, #3
 800c110:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	69da      	ldr	r2, [r3, #28]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	22ff      	movs	r2, #255	; 0xff
 800c130:	625a      	str	r2, [r3, #36]	; 0x24
 800c132:	e001      	b.n	800c138 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	ff8fffbf 	.word	0xff8fffbf

0800c154 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d101      	bne.n	800c16e <HAL_RTC_SetTime+0x1a>
 800c16a:	2302      	movs	r3, #2
 800c16c:	e089      	b.n	800c282 <HAL_RTC_SetTime+0x12e>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2202      	movs	r2, #2
 800c17a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	22ca      	movs	r2, #202	; 0xca
 800c184:	625a      	str	r2, [r3, #36]	; 0x24
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2253      	movs	r2, #83	; 0x53
 800c18c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f9d4 	bl	800c53c <RTC_EnterInitMode>
 800c194:	4603      	mov	r3, r0
 800c196:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c198:	7cfb      	ldrb	r3, [r7, #19]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d161      	bne.n	800c262 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d126      	bne.n	800c1f2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d102      	bne.n	800c1b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 fa2f 	bl	800c620 <RTC_ByteToBcd2>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	785b      	ldrb	r3, [r3, #1]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fa28 	bl	800c620 <RTC_ByteToBcd2>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	789b      	ldrb	r3, [r3, #2]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 fa20 	bl	800c620 <RTC_ByteToBcd2>
 800c1e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	78db      	ldrb	r3, [r3, #3]
 800c1ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	617b      	str	r3, [r7, #20]
 800c1f0:	e018      	b.n	800c224 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2200      	movs	r2, #0
 800c204:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c212:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c218:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	78db      	ldrb	r3, [r3, #3]
 800c21e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c220:	4313      	orrs	r3, r2
 800c222:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	6979      	ldr	r1, [r7, #20]
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <HAL_RTC_SetTime+0x138>)
 800c22c:	400b      	ands	r3, r1
 800c22e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c23e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6899      	ldr	r1, [r3, #8]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	431a      	orrs	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f000 f9a3 	bl	800c5a4 <RTC_ExitInitMode>
 800c25e:	4603      	mov	r3, r0
 800c260:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	22ff      	movs	r2, #255	; 0xff
 800c268:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c26a:	7cfb      	ldrb	r3, [r7, #19]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d103      	bne.n	800c278 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c280:	7cfb      	ldrb	r3, [r7, #19]
}
 800c282:	4618      	mov	r0, r3
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	bd90      	pop	{r4, r7, pc}
 800c28a:	bf00      	nop
 800c28c:	007f7f7f 	.word	0x007f7f7f

0800c290 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b22      	ldr	r3, [pc, #136]	; (800c344 <HAL_RTC_GetTime+0xb4>)
 800c2bc:	4013      	ands	r3, r2
 800c2be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	0c1b      	lsrs	r3, r3, #16
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	0a1b      	lsrs	r3, r3, #8
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	0d9b      	lsrs	r3, r3, #22
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0301 	and.w	r3, r3, #1
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d11a      	bne.n	800c33a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f9a9 	bl	800c660 <RTC_Bcd2ToByte>
 800c30e:	4603      	mov	r3, r0
 800c310:	461a      	mov	r2, r3
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	785b      	ldrb	r3, [r3, #1]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f9a0 	bl	800c660 <RTC_Bcd2ToByte>
 800c320:	4603      	mov	r3, r0
 800c322:	461a      	mov	r2, r3
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	789b      	ldrb	r3, [r3, #2]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f997 	bl	800c660 <RTC_Bcd2ToByte>
 800c332:	4603      	mov	r3, r0
 800c334:	461a      	mov	r2, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3718      	adds	r7, #24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	007f7f7f 	.word	0x007f7f7f

0800c348 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c348:	b590      	push	{r4, r7, lr}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_RTC_SetDate+0x1a>
 800c35e:	2302      	movs	r3, #2
 800c360:	e073      	b.n	800c44a <HAL_RTC_SetDate+0x102>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2202      	movs	r2, #2
 800c36e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10e      	bne.n	800c396 <HAL_RTC_SetDate+0x4e>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	785b      	ldrb	r3, [r3, #1]
 800c37c:	f003 0310 	and.w	r3, r3, #16
 800c380:	2b00      	cmp	r3, #0
 800c382:	d008      	beq.n	800c396 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	785b      	ldrb	r3, [r3, #1]
 800c388:	f023 0310 	bic.w	r3, r3, #16
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	330a      	adds	r3, #10
 800c390:	b2da      	uxtb	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d11c      	bne.n	800c3d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	78db      	ldrb	r3, [r3, #3]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 f93d 	bl	800c620 <RTC_ByteToBcd2>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f936 	bl	800c620 <RTC_ByteToBcd2>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	789b      	ldrb	r3, [r3, #2]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f92e 	bl	800c620 <RTC_ByteToBcd2>
 800c3c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e00e      	b.n	800c3f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	78db      	ldrb	r3, [r3, #3]
 800c3da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c3e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	22ca      	movs	r2, #202	; 0xca
 800c3fa:	625a      	str	r2, [r3, #36]	; 0x24
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2253      	movs	r2, #83	; 0x53
 800c402:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f000 f899 	bl	800c53c <RTC_EnterInitMode>
 800c40a:	4603      	mov	r3, r0
 800c40c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c40e:	7cfb      	ldrb	r3, [r7, #19]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10a      	bne.n	800c42a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	6979      	ldr	r1, [r7, #20]
 800c41a:	4b0e      	ldr	r3, [pc, #56]	; (800c454 <HAL_RTC_SetDate+0x10c>)
 800c41c:	400b      	ands	r3, r1
 800c41e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 f8bf 	bl	800c5a4 <RTC_ExitInitMode>
 800c426:	4603      	mov	r3, r0
 800c428:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	22ff      	movs	r2, #255	; 0xff
 800c430:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c432:	7cfb      	ldrb	r3, [r7, #19]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c448:	7cfb      	ldrb	r3, [r7, #19]


}
 800c44a:	4618      	mov	r0, r3
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd90      	pop	{r4, r7, pc}
 800c452:	bf00      	nop
 800c454:	00ffff3f 	.word	0x00ffff3f

0800c458 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	4b21      	ldr	r3, [pc, #132]	; (800c4f0 <HAL_RTC_GetDate+0x98>)
 800c46c:	4013      	ands	r3, r2
 800c46e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	0c1b      	lsrs	r3, r3, #16
 800c474:	b2da      	uxtb	r2, r3
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 031f 	and.w	r3, r3, #31
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c492:	b2da      	uxtb	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	0b5b      	lsrs	r3, r3, #13
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 0307 	and.w	r3, r3, #7
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d11a      	bne.n	800c4e4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	78db      	ldrb	r3, [r3, #3]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f8d4 	bl	800c660 <RTC_Bcd2ToByte>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 f8cb 	bl	800c660 <RTC_Bcd2ToByte>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	789b      	ldrb	r3, [r3, #2]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f8c2 	bl	800c660 <RTC_Bcd2ToByte>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	461a      	mov	r2, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	00ffff3f 	.word	0x00ffff3f

0800c4f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a0d      	ldr	r2, [pc, #52]	; (800c538 <HAL_RTC_WaitForSynchro+0x44>)
 800c502:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c504:	f7f6 fea4 	bl	8003250 <HAL_GetTick>
 800c508:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c50a:	e009      	b.n	800c520 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c50c:	f7f6 fea0 	bl	8003250 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c51a:	d901      	bls.n	800c520 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e007      	b.n	800c530 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	f003 0320 	and.w	r3, r3, #32
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0ee      	beq.n	800c50c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	0003ff5f 	.word	0x0003ff5f

0800c53c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d120      	bne.n	800c598 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c55e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c560:	f7f6 fe76 	bl	8003250 <HAL_GetTick>
 800c564:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c566:	e00d      	b.n	800c584 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c568:	f7f6 fe72 	bl	8003250 <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c576:	d905      	bls.n	800c584 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c578:	2303      	movs	r3, #3
 800c57a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2203      	movs	r2, #3
 800c580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <RTC_EnterInitMode+0x5c>
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	2b03      	cmp	r3, #3
 800c596:	d1e7      	bne.n	800c568 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c598:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c5b0:	4b1a      	ldr	r3, [pc, #104]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	4a19      	ldr	r2, [pc, #100]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c5b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5ba:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c5bc:	4b17      	ldr	r3, [pc, #92]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f003 0320 	and.w	r3, r3, #32
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10c      	bne.n	800c5e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff ff93 	bl	800c4f4 <HAL_RTC_WaitForSynchro>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01e      	beq.n	800c612 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	73fb      	strb	r3, [r7, #15]
 800c5e0:	e017      	b.n	800c612 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c5e8:	f023 0320 	bic.w	r3, r3, #32
 800c5ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff ff80 	bl	800c4f4 <HAL_RTC_WaitForSynchro>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2203      	movs	r2, #3
 800c5fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c606:	4b05      	ldr	r3, [pc, #20]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	4a04      	ldr	r2, [pc, #16]	; (800c61c <RTC_ExitInitMode+0x78>)
 800c60c:	f043 0320 	orr.w	r3, r3, #32
 800c610:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	58004000 	.word	0x58004000

0800c620 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c632:	e005      	b.n	800c640 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3301      	adds	r3, #1
 800c638:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c63a:	7afb      	ldrb	r3, [r7, #11]
 800c63c:	3b0a      	subs	r3, #10
 800c63e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c640:	7afb      	ldrb	r3, [r7, #11]
 800c642:	2b09      	cmp	r3, #9
 800c644:	d8f6      	bhi.n	800c634 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	4313      	orrs	r3, r2
 800c652:	b2db      	uxtb	r3, r3
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c66a:	79fb      	ldrb	r3, [r7, #7]
 800c66c:	091b      	lsrs	r3, r3, #4
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	461a      	mov	r2, r3
 800c672:	0092      	lsls	r2, r2, #2
 800c674:	4413      	add	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	b2da      	uxtb	r2, r3
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	4413      	add	r3, r2
 800c686:	b2db      	uxtb	r3, r3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e10f      	b.n	800c8c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a87      	ldr	r2, [pc, #540]	; (800c8d0 <HAL_SPI_Init+0x23c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00f      	beq.n	800c6d6 <HAL_SPI_Init+0x42>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a86      	ldr	r2, [pc, #536]	; (800c8d4 <HAL_SPI_Init+0x240>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d00a      	beq.n	800c6d6 <HAL_SPI_Init+0x42>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a84      	ldr	r2, [pc, #528]	; (800c8d8 <HAL_SPI_Init+0x244>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d005      	beq.n	800c6d6 <HAL_SPI_Init+0x42>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	2b0f      	cmp	r3, #15
 800c6d0:	d901      	bls.n	800c6d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e0f7      	b.n	800c8c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fc12 	bl	800cf00 <SPI_GetPacketSize>
 800c6dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a7b      	ldr	r2, [pc, #492]	; (800c8d0 <HAL_SPI_Init+0x23c>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00c      	beq.n	800c702 <HAL_SPI_Init+0x6e>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a79      	ldr	r2, [pc, #484]	; (800c8d4 <HAL_SPI_Init+0x240>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d007      	beq.n	800c702 <HAL_SPI_Init+0x6e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a78      	ldr	r2, [pc, #480]	; (800c8d8 <HAL_SPI_Init+0x244>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d002      	beq.n	800c702 <HAL_SPI_Init+0x6e>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b08      	cmp	r3, #8
 800c700:	d811      	bhi.n	800c726 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c706:	4a72      	ldr	r2, [pc, #456]	; (800c8d0 <HAL_SPI_Init+0x23c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d009      	beq.n	800c720 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a70      	ldr	r2, [pc, #448]	; (800c8d4 <HAL_SPI_Init+0x240>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d004      	beq.n	800c720 <HAL_SPI_Init+0x8c>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a6f      	ldr	r2, [pc, #444]	; (800c8d8 <HAL_SPI_Init+0x244>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d104      	bne.n	800c72a <HAL_SPI_Init+0x96>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b10      	cmp	r3, #16
 800c724:	d901      	bls.n	800c72a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e0cd      	b.n	800c8c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7f5 fd56 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f022 0201 	bic.w	r2, r2, #1
 800c75a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c766:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c770:	d119      	bne.n	800c7a6 <HAL_SPI_Init+0x112>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c77a:	d103      	bne.n	800c784 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c780:	2b00      	cmp	r3, #0
 800c782:	d008      	beq.n	800c796 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10c      	bne.n	800c7a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c794:	d107      	bne.n	800c7a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00f      	beq.n	800c7d2 <HAL_SPI_Init+0x13e>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	2b06      	cmp	r3, #6
 800c7b8:	d90b      	bls.n	800c7d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	e007      	b.n	800c7e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	69da      	ldr	r2, [r3, #28]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	431a      	orrs	r2, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f4:	ea42 0103 	orr.w	r1, r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68da      	ldr	r2, [r3, #12]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80c:	431a      	orrs	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c812:	431a      	orrs	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	431a      	orrs	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	431a      	orrs	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	431a      	orrs	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	431a      	orrs	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c836:	431a      	orrs	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c842:	ea42 0103 	orr.w	r1, r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	430a      	orrs	r2, r1
 800c850:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d113      	bne.n	800c882 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c86c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c880:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f022 0201 	bic.w	r2, r2, #1
 800c890:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	40013000 	.word	0x40013000
 800c8d4:	40003800 	.word	0x40003800
 800c8d8:	40003c00 	.word	0x40003c00

0800c8dc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b088      	sub	sp, #32
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f0:	095b      	lsrs	r3, r3, #5
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3330      	adds	r3, #48	; 0x30
 800c8fe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c900:	f7f6 fca6 	bl	8003250 <HAL_GetTick>
 800c904:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d001      	beq.n	800c916 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c912:	2302      	movs	r3, #2
 800c914:	e250      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <HAL_SPI_Receive+0x46>
 800c91c:	88fb      	ldrh	r3, [r7, #6]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e248      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <HAL_SPI_Receive+0x58>
 800c930:	2302      	movs	r3, #2
 800c932:	e241      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2204      	movs	r2, #4
 800c940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	88fa      	ldrh	r2, [r7, #6]
 800c956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	88fa      	ldrh	r2, [r7, #6]
 800c95e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c98c:	d108      	bne.n	800c9a0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	e009      	b.n	800c9b4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c9b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	4b95      	ldr	r3, [pc, #596]	; (800cc10 <HAL_SPI_Receive+0x334>)
 800c9bc:	4013      	ands	r3, r2
 800c9be:	88f9      	ldrh	r1, [r7, #6]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	6812      	ldr	r2, [r2, #0]
 800c9c4:	430b      	orrs	r3, r1
 800c9c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f042 0201 	orr.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9e0:	d107      	bne.n	800c9f2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	2b0f      	cmp	r3, #15
 800c9f8:	d96c      	bls.n	800cad4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c9fa:	e064      	b.n	800cac6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	f003 0301 	and.w	r3, r3, #1
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d114      	bne.n	800ca3c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca22:	1d1a      	adds	r2, r3, #4
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca3a:	e044      	b.n	800cac6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	8bfa      	ldrh	r2, [r7, #30]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d919      	bls.n	800ca7e <HAL_SPI_Receive+0x1a2>
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d014      	beq.n	800ca7e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca5e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca64:	1d1a      	adds	r2, r3, #4
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	3b01      	subs	r3, #1
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca7c:	e023      	b.n	800cac6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca7e:	f7f6 fbe7 	bl	8003250 <HAL_GetTick>
 800ca82:	4602      	mov	r2, r0
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d803      	bhi.n	800ca96 <HAL_SPI_Receive+0x1ba>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca94:	d102      	bne.n	800ca9c <HAL_SPI_Receive+0x1c0>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d114      	bne.n	800cac6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 f98f 	bl	800cdc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cac2:	2303      	movs	r3, #3
 800cac4:	e178      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cacc:	b29b      	uxth	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d194      	bne.n	800c9fc <HAL_SPI_Receive+0x120>
 800cad2:	e15e      	b.n	800cd92 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	2b07      	cmp	r3, #7
 800cada:	f240 8153 	bls.w	800cd84 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cade:	e08f      	b.n	800cc00 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d114      	bne.n	800cb20 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cafa:	69ba      	ldr	r2, [r7, #24]
 800cafc:	8812      	ldrh	r2, [r2, #0]
 800cafe:	b292      	uxth	r2, r2
 800cb00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb06:	1c9a      	adds	r2, r3, #2
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	3b01      	subs	r3, #1
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb1e:	e06f      	b.n	800cc00 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	8bfa      	ldrh	r2, [r7, #30]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d924      	bls.n	800cb78 <HAL_SPI_Receive+0x29c>
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01f      	beq.n	800cb78 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	8812      	ldrh	r2, [r2, #0]
 800cb40:	b292      	uxth	r2, r2
 800cb42:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb48:	1c9a      	adds	r2, r3, #2
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	8812      	ldrh	r2, [r2, #0]
 800cb56:	b292      	uxth	r2, r2
 800cb58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb5e:	1c9a      	adds	r2, r3, #2
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	3b02      	subs	r3, #2
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb76:	e043      	b.n	800cc00 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d119      	bne.n	800cbb8 <HAL_SPI_Receive+0x2dc>
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d014      	beq.n	800cbb8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	8812      	ldrh	r2, [r2, #0]
 800cb96:	b292      	uxth	r2, r2
 800cb98:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb9e:	1c9a      	adds	r2, r3, #2
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	3b01      	subs	r3, #1
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbb6:	e023      	b.n	800cc00 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbb8:	f7f6 fb4a 	bl	8003250 <HAL_GetTick>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d803      	bhi.n	800cbd0 <HAL_SPI_Receive+0x2f4>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbce:	d102      	bne.n	800cbd6 <HAL_SPI_Receive+0x2fa>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d114      	bne.n	800cc00 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f000 f8f2 	bl	800cdc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e0db      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f47f af69 	bne.w	800cae0 <HAL_SPI_Receive+0x204>
 800cc0e:	e0c0      	b.n	800cd92 <HAL_SPI_Receive+0x4b6>
 800cc10:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d117      	bne.n	800cc5a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc36:	7812      	ldrb	r2, [r2, #0]
 800cc38:	b2d2      	uxtb	r2, r2
 800cc3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cc58:	e094      	b.n	800cd84 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	8bfa      	ldrh	r2, [r7, #30]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d946      	bls.n	800ccf6 <HAL_SPI_Receive+0x41a>
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d041      	beq.n	800ccf6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc7e:	7812      	ldrb	r2, [r2, #0]
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc88:	1c5a      	adds	r2, r3, #1
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc9a:	7812      	ldrb	r2, [r2, #0]
 800cc9c:	b2d2      	uxtb	r2, r2
 800cc9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb6:	7812      	ldrb	r2, [r2, #0]
 800ccb8:	b2d2      	uxtb	r2, r2
 800ccba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd2:	7812      	ldrb	r2, [r2, #0]
 800ccd4:	b2d2      	uxtb	r2, r2
 800ccd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccdc:	1c5a      	adds	r2, r3, #1
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	3b04      	subs	r3, #4
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ccf4:	e046      	b.n	800cd84 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d81c      	bhi.n	800cd3c <HAL_SPI_Receive+0x460>
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d017      	beq.n	800cd3c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd18:	7812      	ldrb	r2, [r2, #0]
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cd3a:	e023      	b.n	800cd84 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd3c:	f7f6 fa88 	bl	8003250 <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d803      	bhi.n	800cd54 <HAL_SPI_Receive+0x478>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd52:	d102      	bne.n	800cd5a <HAL_SPI_Receive+0x47e>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d114      	bne.n	800cd84 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 f830 	bl	800cdc0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e019      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f af41 	bne.w	800cc14 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f000 f814 	bl	800cdc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
  }
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3720      	adds	r7, #32
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	699a      	ldr	r2, [r3, #24]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f042 0208 	orr.w	r2, r2, #8
 800cdde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f042 0210 	orr.w	r2, r2, #16
 800cdee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f022 0201 	bic.w	r2, r2, #1
 800cdfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6919      	ldr	r1, [r3, #16]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	4b3c      	ldr	r3, [pc, #240]	; (800cefc <SPI_CloseTransfer+0x13c>)
 800ce0c:	400b      	ands	r3, r1
 800ce0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d014      	beq.n	800ce56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f003 0320 	and.w	r3, r3, #32
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00f      	beq.n	800ce56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f042 0220 	orr.w	r2, r2, #32
 800ce54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d014      	beq.n	800ce8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00f      	beq.n	800ce8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce72:	f043 0204 	orr.w	r2, r3, #4
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00f      	beq.n	800ceb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce9c:	f043 0201 	orr.w	r2, r3, #1
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	699a      	ldr	r2, [r3, #24]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00f      	beq.n	800cee0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cec6:	f043 0208 	orr.w	r2, r3, #8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	699a      	ldr	r2, [r3, #24]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cede:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cef0:	bf00      	nop
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	fffffc90 	.word	0xfffffc90

0800cf00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf0c:	095b      	lsrs	r3, r3, #5
 800cf0e:	3301      	adds	r3, #1
 800cf10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	3301      	adds	r3, #1
 800cf18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	08db      	lsrs	r3, r3, #3
 800cf20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e049      	b.n	800cfdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d106      	bne.n	800cf62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7f5 fde5 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2202      	movs	r2, #2
 800cf66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f000 fc3f 	bl	800d7f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d001      	beq.n	800cffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e054      	b.n	800d0a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2202      	movs	r2, #2
 800d000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f042 0201 	orr.w	r2, r2, #1
 800d012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a26      	ldr	r2, [pc, #152]	; (800d0b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d022      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d026:	d01d      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a22      	ldr	r2, [pc, #136]	; (800d0b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d018      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a21      	ldr	r2, [pc, #132]	; (800d0bc <HAL_TIM_Base_Start_IT+0xd8>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d013      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a1f      	ldr	r2, [pc, #124]	; (800d0c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d00e      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a1e      	ldr	r2, [pc, #120]	; (800d0c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d009      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a1c      	ldr	r2, [pc, #112]	; (800d0c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d004      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x80>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a1b      	ldr	r2, [pc, #108]	; (800d0cc <HAL_TIM_Base_Start_IT+0xe8>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d115      	bne.n	800d090 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	689a      	ldr	r2, [r3, #8]
 800d06a:	4b19      	ldr	r3, [pc, #100]	; (800d0d0 <HAL_TIM_Base_Start_IT+0xec>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b06      	cmp	r3, #6
 800d074:	d015      	beq.n	800d0a2 <HAL_TIM_Base_Start_IT+0xbe>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d07c:	d011      	beq.n	800d0a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f042 0201 	orr.w	r2, r2, #1
 800d08c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d08e:	e008      	b.n	800d0a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f042 0201 	orr.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	e000      	b.n	800d0a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	40010000 	.word	0x40010000
 800d0b8:	40000400 	.word	0x40000400
 800d0bc:	40000800 	.word	0x40000800
 800d0c0:	40000c00 	.word	0x40000c00
 800d0c4:	40010400 	.word	0x40010400
 800d0c8:	40001800 	.word	0x40001800
 800d0cc:	40014000 	.word	0x40014000
 800d0d0:	00010007 	.word	0x00010007

0800d0d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e049      	b.n	800d17a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f841 	bl	800d182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2202      	movs	r2, #2
 800d104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3304      	adds	r3, #4
 800d110:	4619      	mov	r1, r3
 800d112:	4610      	mov	r0, r2
 800d114:	f000 fb70 	bl	800d7f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d18a:	bf00      	nop
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	f003 0302 	and.w	r3, r3, #2
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d020      	beq.n	800d1fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f003 0302 	and.w	r3, r3, #2
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d01b      	beq.n	800d1fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f06f 0202 	mvn.w	r2, #2
 800d1ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	f003 0303 	and.w	r3, r3, #3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 faeb 	bl	800d7bc <HAL_TIM_IC_CaptureCallback>
 800d1e6:	e005      	b.n	800d1f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7f4 f8eb 	bl	80013c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 faee 	bl	800d7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b00      	cmp	r3, #0
 800d202:	d020      	beq.n	800d246 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f003 0304 	and.w	r3, r3, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d01b      	beq.n	800d246 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f06f 0204 	mvn.w	r2, #4
 800d216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2202      	movs	r2, #2
 800d21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fac5 	bl	800d7bc <HAL_TIM_IC_CaptureCallback>
 800d232:	e005      	b.n	800d240 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7f4 f8c5 	bl	80013c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fac8 	bl	800d7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f003 0308 	and.w	r3, r3, #8
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d020      	beq.n	800d292 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	2b00      	cmp	r3, #0
 800d258:	d01b      	beq.n	800d292 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f06f 0208 	mvn.w	r2, #8
 800d262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2204      	movs	r2, #4
 800d268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	69db      	ldr	r3, [r3, #28]
 800d270:	f003 0303 	and.w	r3, r3, #3
 800d274:	2b00      	cmp	r3, #0
 800d276:	d003      	beq.n	800d280 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fa9f 	bl	800d7bc <HAL_TIM_IC_CaptureCallback>
 800d27e:	e005      	b.n	800d28c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f4 f89f 	bl	80013c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 faa2 	bl	800d7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	f003 0310 	and.w	r3, r3, #16
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d020      	beq.n	800d2de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f003 0310 	and.w	r3, r3, #16
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01b      	beq.n	800d2de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f06f 0210 	mvn.w	r2, #16
 800d2ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2208      	movs	r2, #8
 800d2b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d003      	beq.n	800d2cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fa79 	bl	800d7bc <HAL_TIM_IC_CaptureCallback>
 800d2ca:	e005      	b.n	800d2d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7f4 f879 	bl	80013c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fa7c 	bl	800d7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00c      	beq.n	800d302 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d007      	beq.n	800d302 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f06f 0201 	mvn.w	r2, #1
 800d2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7f4 f97f 	bl	8001600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00c      	beq.n	800d330 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d007      	beq.n	800d330 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 ff94 	bl	800e258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00c      	beq.n	800d354 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d340:	2b00      	cmp	r3, #0
 800d342:	d007      	beq.n	800d354 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 ff8c 	bl	800e26c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00c      	beq.n	800d378 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d364:	2b00      	cmp	r3, #0
 800d366:	d007      	beq.n	800d378 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fa36 	bl	800d7e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0320 	and.w	r3, r3, #32
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00c      	beq.n	800d39c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f003 0320 	and.w	r3, r3, #32
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d007      	beq.n	800d39c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f06f 0220 	mvn.w	r2, #32
 800d394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 ff54 	bl	800e244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d39c:	bf00      	nop
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d101      	bne.n	800d3c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3be:	2302      	movs	r3, #2
 800d3c0:	e0ff      	b.n	800d5c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b14      	cmp	r3, #20
 800d3ce:	f200 80f0 	bhi.w	800d5b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3d2:	a201      	add	r2, pc, #4	; (adr r2, 800d3d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d42d 	.word	0x0800d42d
 800d3dc:	0800d5b3 	.word	0x0800d5b3
 800d3e0:	0800d5b3 	.word	0x0800d5b3
 800d3e4:	0800d5b3 	.word	0x0800d5b3
 800d3e8:	0800d46d 	.word	0x0800d46d
 800d3ec:	0800d5b3 	.word	0x0800d5b3
 800d3f0:	0800d5b3 	.word	0x0800d5b3
 800d3f4:	0800d5b3 	.word	0x0800d5b3
 800d3f8:	0800d4af 	.word	0x0800d4af
 800d3fc:	0800d5b3 	.word	0x0800d5b3
 800d400:	0800d5b3 	.word	0x0800d5b3
 800d404:	0800d5b3 	.word	0x0800d5b3
 800d408:	0800d4ef 	.word	0x0800d4ef
 800d40c:	0800d5b3 	.word	0x0800d5b3
 800d410:	0800d5b3 	.word	0x0800d5b3
 800d414:	0800d5b3 	.word	0x0800d5b3
 800d418:	0800d531 	.word	0x0800d531
 800d41c:	0800d5b3 	.word	0x0800d5b3
 800d420:	0800d5b3 	.word	0x0800d5b3
 800d424:	0800d5b3 	.word	0x0800d5b3
 800d428:	0800d571 	.word	0x0800d571
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	4618      	mov	r0, r3
 800d434:	f000 fa86 	bl	800d944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0208 	orr.w	r2, r2, #8
 800d446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	699a      	ldr	r2, [r3, #24]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 0204 	bic.w	r2, r2, #4
 800d456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6999      	ldr	r1, [r3, #24]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	691a      	ldr	r2, [r3, #16]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	619a      	str	r2, [r3, #24]
      break;
 800d46a:	e0a5      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 faf6 	bl	800da64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	699a      	ldr	r2, [r3, #24]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	699a      	ldr	r2, [r3, #24]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6999      	ldr	r1, [r3, #24]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	021a      	lsls	r2, r3, #8
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	430a      	orrs	r2, r1
 800d4aa:	619a      	str	r2, [r3, #24]
      break;
 800d4ac:	e084      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68b9      	ldr	r1, [r7, #8]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fb5f 	bl	800db78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69da      	ldr	r2, [r3, #28]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f042 0208 	orr.w	r2, r2, #8
 800d4c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69da      	ldr	r2, [r3, #28]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f022 0204 	bic.w	r2, r2, #4
 800d4d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69d9      	ldr	r1, [r3, #28]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	691a      	ldr	r2, [r3, #16]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	61da      	str	r2, [r3, #28]
      break;
 800d4ec:	e064      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 fbc7 	bl	800dc88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69da      	ldr	r2, [r3, #28]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69da      	ldr	r2, [r3, #28]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	69d9      	ldr	r1, [r3, #28]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	021a      	lsls	r2, r3, #8
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	61da      	str	r2, [r3, #28]
      break;
 800d52e:	e043      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fc10 	bl	800dd5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f042 0208 	orr.w	r2, r2, #8
 800d54a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f022 0204 	bic.w	r2, r2, #4
 800d55a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	691a      	ldr	r2, [r3, #16]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d56e:	e023      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 fc54 	bl	800de24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d58a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d59a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	021a      	lsls	r2, r3, #8
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	430a      	orrs	r2, r1
 800d5ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5b0:	e002      	b.n	800d5b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	75fb      	strb	r3, [r7, #23]
      break;
 800d5b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop

0800d5cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d101      	bne.n	800d5e8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	e0dc      	b.n	800d7a2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	4b6a      	ldr	r3, [pc, #424]	; (800d7ac <HAL_TIM_ConfigClockSource+0x1e0>)
 800d604:	4013      	ands	r3, r2
 800d606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d60e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a64      	ldr	r2, [pc, #400]	; (800d7b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	f000 80a9 	beq.w	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d624:	4a62      	ldr	r2, [pc, #392]	; (800d7b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	f200 80ae 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d62c:	4a61      	ldr	r2, [pc, #388]	; (800d7b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	f000 80a1 	beq.w	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d634:	4a5f      	ldr	r2, [pc, #380]	; (800d7b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d636:	4293      	cmp	r3, r2
 800d638:	f200 80a6 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d63c:	4a5e      	ldr	r2, [pc, #376]	; (800d7b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	f000 8099 	beq.w	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d644:	4a5c      	ldr	r2, [pc, #368]	; (800d7b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d646:	4293      	cmp	r3, r2
 800d648:	f200 809e 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d64c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d650:	f000 8091 	beq.w	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d654:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d658:	f200 8096 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d65c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d660:	f000 8089 	beq.w	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d668:	f200 808e 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d66c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d670:	d03e      	beq.n	800d6f0 <HAL_TIM_ConfigClockSource+0x124>
 800d672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d676:	f200 8087 	bhi.w	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d67e:	f000 8086 	beq.w	800d78e <HAL_TIM_ConfigClockSource+0x1c2>
 800d682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d686:	d87f      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d688:	2b70      	cmp	r3, #112	; 0x70
 800d68a:	d01a      	beq.n	800d6c2 <HAL_TIM_ConfigClockSource+0xf6>
 800d68c:	2b70      	cmp	r3, #112	; 0x70
 800d68e:	d87b      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d690:	2b60      	cmp	r3, #96	; 0x60
 800d692:	d050      	beq.n	800d736 <HAL_TIM_ConfigClockSource+0x16a>
 800d694:	2b60      	cmp	r3, #96	; 0x60
 800d696:	d877      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d698:	2b50      	cmp	r3, #80	; 0x50
 800d69a:	d03c      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x14a>
 800d69c:	2b50      	cmp	r3, #80	; 0x50
 800d69e:	d873      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a0:	2b40      	cmp	r3, #64	; 0x40
 800d6a2:	d058      	beq.n	800d756 <HAL_TIM_ConfigClockSource+0x18a>
 800d6a4:	2b40      	cmp	r3, #64	; 0x40
 800d6a6:	d86f      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a8:	2b30      	cmp	r3, #48	; 0x30
 800d6aa:	d064      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ac:	2b30      	cmp	r3, #48	; 0x30
 800d6ae:	d86b      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b0:	2b20      	cmp	r3, #32
 800d6b2:	d060      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6b4:	2b20      	cmp	r3, #32
 800d6b6:	d867      	bhi.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d05c      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6bc:	2b10      	cmp	r3, #16
 800d6be:	d05a      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6c0:	e062      	b.n	800d788 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	6899      	ldr	r1, [r3, #8]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f000 fc8b 	bl	800dfec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	609a      	str	r2, [r3, #8]
      break;
 800d6ee:	e04f      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6818      	ldr	r0, [r3, #0]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	6899      	ldr	r1, [r3, #8]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	f000 fc74 	bl	800dfec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d712:	609a      	str	r2, [r3, #8]
      break;
 800d714:	e03c      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	6859      	ldr	r1, [r3, #4]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	461a      	mov	r2, r3
 800d724:	f000 fbe4 	bl	800def0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2150      	movs	r1, #80	; 0x50
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 fc3e 	bl	800dfb0 <TIM_ITRx_SetConfig>
      break;
 800d734:	e02c      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6818      	ldr	r0, [r3, #0]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	6859      	ldr	r1, [r3, #4]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	461a      	mov	r2, r3
 800d744:	f000 fc03 	bl	800df4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2160      	movs	r1, #96	; 0x60
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fc2e 	bl	800dfb0 <TIM_ITRx_SetConfig>
      break;
 800d754:	e01c      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6818      	ldr	r0, [r3, #0]
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	6859      	ldr	r1, [r3, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	461a      	mov	r2, r3
 800d764:	f000 fbc4 	bl	800def0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2140      	movs	r1, #64	; 0x40
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 fc1e 	bl	800dfb0 <TIM_ITRx_SetConfig>
      break;
 800d774:	e00c      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f000 fc15 	bl	800dfb0 <TIM_ITRx_SetConfig>
      break;
 800d786:	e003      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	73fb      	strb	r3, [r7, #15]
      break;
 800d78c:	e000      	b.n	800d790 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d78e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	ffceff88 	.word	0xffceff88
 800d7b0:	00100040 	.word	0x00100040
 800d7b4:	00100030 	.word	0x00100030
 800d7b8:	00100020 	.word	0x00100020

0800d7bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7ec:	bf00      	nop
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a46      	ldr	r2, [pc, #280]	; (800d924 <TIM_Base_SetConfig+0x12c>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d013      	beq.n	800d838 <TIM_Base_SetConfig+0x40>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d816:	d00f      	beq.n	800d838 <TIM_Base_SetConfig+0x40>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a43      	ldr	r2, [pc, #268]	; (800d928 <TIM_Base_SetConfig+0x130>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d00b      	beq.n	800d838 <TIM_Base_SetConfig+0x40>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a42      	ldr	r2, [pc, #264]	; (800d92c <TIM_Base_SetConfig+0x134>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d007      	beq.n	800d838 <TIM_Base_SetConfig+0x40>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4a41      	ldr	r2, [pc, #260]	; (800d930 <TIM_Base_SetConfig+0x138>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d003      	beq.n	800d838 <TIM_Base_SetConfig+0x40>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a40      	ldr	r2, [pc, #256]	; (800d934 <TIM_Base_SetConfig+0x13c>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d108      	bne.n	800d84a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d83e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4313      	orrs	r3, r2
 800d848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a35      	ldr	r2, [pc, #212]	; (800d924 <TIM_Base_SetConfig+0x12c>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d01f      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d858:	d01b      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a32      	ldr	r2, [pc, #200]	; (800d928 <TIM_Base_SetConfig+0x130>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d017      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a31      	ldr	r2, [pc, #196]	; (800d92c <TIM_Base_SetConfig+0x134>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d013      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a30      	ldr	r2, [pc, #192]	; (800d930 <TIM_Base_SetConfig+0x138>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00f      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a2f      	ldr	r2, [pc, #188]	; (800d934 <TIM_Base_SetConfig+0x13c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d00b      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a2e      	ldr	r2, [pc, #184]	; (800d938 <TIM_Base_SetConfig+0x140>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d007      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a2d      	ldr	r2, [pc, #180]	; (800d93c <TIM_Base_SetConfig+0x144>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d003      	beq.n	800d892 <TIM_Base_SetConfig+0x9a>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a2c      	ldr	r2, [pc, #176]	; (800d940 <TIM_Base_SetConfig+0x148>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d108      	bne.n	800d8a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a16      	ldr	r2, [pc, #88]	; (800d924 <TIM_Base_SetConfig+0x12c>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d00f      	beq.n	800d8f0 <TIM_Base_SetConfig+0xf8>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a18      	ldr	r2, [pc, #96]	; (800d934 <TIM_Base_SetConfig+0x13c>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d00b      	beq.n	800d8f0 <TIM_Base_SetConfig+0xf8>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a17      	ldr	r2, [pc, #92]	; (800d938 <TIM_Base_SetConfig+0x140>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d007      	beq.n	800d8f0 <TIM_Base_SetConfig+0xf8>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a16      	ldr	r2, [pc, #88]	; (800d93c <TIM_Base_SetConfig+0x144>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d003      	beq.n	800d8f0 <TIM_Base_SetConfig+0xf8>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a15      	ldr	r2, [pc, #84]	; (800d940 <TIM_Base_SetConfig+0x148>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d103      	bne.n	800d8f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	691a      	ldr	r2, [r3, #16]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	2b01      	cmp	r3, #1
 800d908:	d105      	bne.n	800d916 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	f023 0201 	bic.w	r2, r3, #1
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	611a      	str	r2, [r3, #16]
  }
}
 800d916:	bf00      	nop
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	40010000 	.word	0x40010000
 800d928:	40000400 	.word	0x40000400
 800d92c:	40000800 	.word	0x40000800
 800d930:	40000c00 	.word	0x40000c00
 800d934:	40010400 	.word	0x40010400
 800d938:	40014000 	.word	0x40014000
 800d93c:	40014400 	.word	0x40014400
 800d940:	40014800 	.word	0x40014800

0800d944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6a1b      	ldr	r3, [r3, #32]
 800d958:	f023 0201 	bic.w	r2, r3, #1
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4b37      	ldr	r3, [pc, #220]	; (800da4c <TIM_OC1_SetConfig+0x108>)
 800d970:	4013      	ands	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f023 0303 	bic.w	r3, r3, #3
 800d97a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f023 0302 	bic.w	r3, r3, #2
 800d98c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	4313      	orrs	r3, r2
 800d996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4a2d      	ldr	r2, [pc, #180]	; (800da50 <TIM_OC1_SetConfig+0x10c>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d00f      	beq.n	800d9c0 <TIM_OC1_SetConfig+0x7c>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	4a2c      	ldr	r2, [pc, #176]	; (800da54 <TIM_OC1_SetConfig+0x110>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d00b      	beq.n	800d9c0 <TIM_OC1_SetConfig+0x7c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a2b      	ldr	r2, [pc, #172]	; (800da58 <TIM_OC1_SetConfig+0x114>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d007      	beq.n	800d9c0 <TIM_OC1_SetConfig+0x7c>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a2a      	ldr	r2, [pc, #168]	; (800da5c <TIM_OC1_SetConfig+0x118>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d003      	beq.n	800d9c0 <TIM_OC1_SetConfig+0x7c>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a29      	ldr	r2, [pc, #164]	; (800da60 <TIM_OC1_SetConfig+0x11c>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d10c      	bne.n	800d9da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f023 0308 	bic.w	r3, r3, #8
 800d9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f023 0304 	bic.w	r3, r3, #4
 800d9d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a1c      	ldr	r2, [pc, #112]	; (800da50 <TIM_OC1_SetConfig+0x10c>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d00f      	beq.n	800da02 <TIM_OC1_SetConfig+0xbe>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a1b      	ldr	r2, [pc, #108]	; (800da54 <TIM_OC1_SetConfig+0x110>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d00b      	beq.n	800da02 <TIM_OC1_SetConfig+0xbe>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a1a      	ldr	r2, [pc, #104]	; (800da58 <TIM_OC1_SetConfig+0x114>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d007      	beq.n	800da02 <TIM_OC1_SetConfig+0xbe>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a19      	ldr	r2, [pc, #100]	; (800da5c <TIM_OC1_SetConfig+0x118>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d003      	beq.n	800da02 <TIM_OC1_SetConfig+0xbe>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a18      	ldr	r2, [pc, #96]	; (800da60 <TIM_OC1_SetConfig+0x11c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d111      	bne.n	800da26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	695b      	ldr	r3, [r3, #20]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	4313      	orrs	r3, r2
 800da1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	4313      	orrs	r3, r2
 800da24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	621a      	str	r2, [r3, #32]
}
 800da40:	bf00      	nop
 800da42:	371c      	adds	r7, #28
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	fffeff8f 	.word	0xfffeff8f
 800da50:	40010000 	.word	0x40010000
 800da54:	40010400 	.word	0x40010400
 800da58:	40014000 	.word	0x40014000
 800da5c:	40014400 	.word	0x40014400
 800da60:	40014800 	.word	0x40014800

0800da64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	f023 0210 	bic.w	r2, r3, #16
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4b34      	ldr	r3, [pc, #208]	; (800db60 <TIM_OC2_SetConfig+0xfc>)
 800da90:	4013      	ands	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	021b      	lsls	r3, r3, #8
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	f023 0320 	bic.w	r3, r3, #32
 800daae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	011b      	lsls	r3, r3, #4
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	4313      	orrs	r3, r2
 800daba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a29      	ldr	r2, [pc, #164]	; (800db64 <TIM_OC2_SetConfig+0x100>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d003      	beq.n	800dacc <TIM_OC2_SetConfig+0x68>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a28      	ldr	r2, [pc, #160]	; (800db68 <TIM_OC2_SetConfig+0x104>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d10d      	bne.n	800dae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	4313      	orrs	r3, r2
 800dade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a1e      	ldr	r2, [pc, #120]	; (800db64 <TIM_OC2_SetConfig+0x100>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d00f      	beq.n	800db10 <TIM_OC2_SetConfig+0xac>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a1d      	ldr	r2, [pc, #116]	; (800db68 <TIM_OC2_SetConfig+0x104>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d00b      	beq.n	800db10 <TIM_OC2_SetConfig+0xac>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a1c      	ldr	r2, [pc, #112]	; (800db6c <TIM_OC2_SetConfig+0x108>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d007      	beq.n	800db10 <TIM_OC2_SetConfig+0xac>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a1b      	ldr	r2, [pc, #108]	; (800db70 <TIM_OC2_SetConfig+0x10c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d003      	beq.n	800db10 <TIM_OC2_SetConfig+0xac>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a1a      	ldr	r2, [pc, #104]	; (800db74 <TIM_OC2_SetConfig+0x110>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d113      	bne.n	800db38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	693a      	ldr	r2, [r7, #16]
 800db28:	4313      	orrs	r3, r2
 800db2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	4313      	orrs	r3, r2
 800db36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	621a      	str	r2, [r3, #32]
}
 800db52:	bf00      	nop
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	feff8fff 	.word	0xfeff8fff
 800db64:	40010000 	.word	0x40010000
 800db68:	40010400 	.word	0x40010400
 800db6c:	40014000 	.word	0x40014000
 800db70:	40014400 	.word	0x40014400
 800db74:	40014800 	.word	0x40014800

0800db78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a1b      	ldr	r3, [r3, #32]
 800db86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	69db      	ldr	r3, [r3, #28]
 800db9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	4b33      	ldr	r3, [pc, #204]	; (800dc70 <TIM_OC3_SetConfig+0xf8>)
 800dba4:	4013      	ands	r3, r2
 800dba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f023 0303 	bic.w	r3, r3, #3
 800dbae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a28      	ldr	r2, [pc, #160]	; (800dc74 <TIM_OC3_SetConfig+0xfc>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d003      	beq.n	800dbde <TIM_OC3_SetConfig+0x66>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a27      	ldr	r2, [pc, #156]	; (800dc78 <TIM_OC3_SetConfig+0x100>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d10d      	bne.n	800dbfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	021b      	lsls	r3, r3, #8
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a1d      	ldr	r2, [pc, #116]	; (800dc74 <TIM_OC3_SetConfig+0xfc>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d00f      	beq.n	800dc22 <TIM_OC3_SetConfig+0xaa>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a1c      	ldr	r2, [pc, #112]	; (800dc78 <TIM_OC3_SetConfig+0x100>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d00b      	beq.n	800dc22 <TIM_OC3_SetConfig+0xaa>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a1b      	ldr	r2, [pc, #108]	; (800dc7c <TIM_OC3_SetConfig+0x104>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d007      	beq.n	800dc22 <TIM_OC3_SetConfig+0xaa>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a1a      	ldr	r2, [pc, #104]	; (800dc80 <TIM_OC3_SetConfig+0x108>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d003      	beq.n	800dc22 <TIM_OC3_SetConfig+0xaa>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a19      	ldr	r2, [pc, #100]	; (800dc84 <TIM_OC3_SetConfig+0x10c>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d113      	bne.n	800dc4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	695b      	ldr	r3, [r3, #20]
 800dc36:	011b      	lsls	r3, r3, #4
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	011b      	lsls	r3, r3, #4
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	621a      	str	r2, [r3, #32]
}
 800dc64:	bf00      	nop
 800dc66:	371c      	adds	r7, #28
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	fffeff8f 	.word	0xfffeff8f
 800dc74:	40010000 	.word	0x40010000
 800dc78:	40010400 	.word	0x40010400
 800dc7c:	40014000 	.word	0x40014000
 800dc80:	40014400 	.word	0x40014400
 800dc84:	40014800 	.word	0x40014800

0800dc88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4b24      	ldr	r3, [pc, #144]	; (800dd44 <TIM_OC4_SetConfig+0xbc>)
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	021b      	lsls	r3, r3, #8
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	031b      	lsls	r3, r3, #12
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a19      	ldr	r2, [pc, #100]	; (800dd48 <TIM_OC4_SetConfig+0xc0>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d00f      	beq.n	800dd08 <TIM_OC4_SetConfig+0x80>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a18      	ldr	r2, [pc, #96]	; (800dd4c <TIM_OC4_SetConfig+0xc4>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d00b      	beq.n	800dd08 <TIM_OC4_SetConfig+0x80>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a17      	ldr	r2, [pc, #92]	; (800dd50 <TIM_OC4_SetConfig+0xc8>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d007      	beq.n	800dd08 <TIM_OC4_SetConfig+0x80>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a16      	ldr	r2, [pc, #88]	; (800dd54 <TIM_OC4_SetConfig+0xcc>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d003      	beq.n	800dd08 <TIM_OC4_SetConfig+0x80>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a15      	ldr	r2, [pc, #84]	; (800dd58 <TIM_OC4_SetConfig+0xd0>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d109      	bne.n	800dd1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	695b      	ldr	r3, [r3, #20]
 800dd14:	019b      	lsls	r3, r3, #6
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	621a      	str	r2, [r3, #32]
}
 800dd36:	bf00      	nop
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	feff8fff 	.word	0xfeff8fff
 800dd48:	40010000 	.word	0x40010000
 800dd4c:	40010400 	.word	0x40010400
 800dd50:	40014000 	.word	0x40014000
 800dd54:	40014400 	.word	0x40014400
 800dd58:	40014800 	.word	0x40014800

0800dd5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a1b      	ldr	r3, [r3, #32]
 800dd70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	4b21      	ldr	r3, [pc, #132]	; (800de0c <TIM_OC5_SetConfig+0xb0>)
 800dd88:	4013      	ands	r3, r2
 800dd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dd9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	041b      	lsls	r3, r3, #16
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a18      	ldr	r2, [pc, #96]	; (800de10 <TIM_OC5_SetConfig+0xb4>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d00f      	beq.n	800ddd2 <TIM_OC5_SetConfig+0x76>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a17      	ldr	r2, [pc, #92]	; (800de14 <TIM_OC5_SetConfig+0xb8>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d00b      	beq.n	800ddd2 <TIM_OC5_SetConfig+0x76>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a16      	ldr	r2, [pc, #88]	; (800de18 <TIM_OC5_SetConfig+0xbc>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d007      	beq.n	800ddd2 <TIM_OC5_SetConfig+0x76>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a15      	ldr	r2, [pc, #84]	; (800de1c <TIM_OC5_SetConfig+0xc0>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d003      	beq.n	800ddd2 <TIM_OC5_SetConfig+0x76>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a14      	ldr	r2, [pc, #80]	; (800de20 <TIM_OC5_SetConfig+0xc4>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d109      	bne.n	800dde6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	685a      	ldr	r2, [r3, #4]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	621a      	str	r2, [r3, #32]
}
 800de00:	bf00      	nop
 800de02:	371c      	adds	r7, #28
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	fffeff8f 	.word	0xfffeff8f
 800de10:	40010000 	.word	0x40010000
 800de14:	40010400 	.word	0x40010400
 800de18:	40014000 	.word	0x40014000
 800de1c:	40014400 	.word	0x40014400
 800de20:	40014800 	.word	0x40014800

0800de24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6a1b      	ldr	r3, [r3, #32]
 800de38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <TIM_OC6_SetConfig+0xb4>)
 800de50:	4013      	ands	r3, r2
 800de52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	021b      	lsls	r3, r3, #8
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	051b      	lsls	r3, r3, #20
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	4313      	orrs	r3, r2
 800de72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a19      	ldr	r2, [pc, #100]	; (800dedc <TIM_OC6_SetConfig+0xb8>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00f      	beq.n	800de9c <TIM_OC6_SetConfig+0x78>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a18      	ldr	r2, [pc, #96]	; (800dee0 <TIM_OC6_SetConfig+0xbc>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d00b      	beq.n	800de9c <TIM_OC6_SetConfig+0x78>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a17      	ldr	r2, [pc, #92]	; (800dee4 <TIM_OC6_SetConfig+0xc0>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d007      	beq.n	800de9c <TIM_OC6_SetConfig+0x78>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a16      	ldr	r2, [pc, #88]	; (800dee8 <TIM_OC6_SetConfig+0xc4>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d003      	beq.n	800de9c <TIM_OC6_SetConfig+0x78>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a15      	ldr	r2, [pc, #84]	; (800deec <TIM_OC6_SetConfig+0xc8>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d109      	bne.n	800deb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	029b      	lsls	r3, r3, #10
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	4313      	orrs	r3, r2
 800deae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	621a      	str	r2, [r3, #32]
}
 800deca:	bf00      	nop
 800decc:	371c      	adds	r7, #28
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	feff8fff 	.word	0xfeff8fff
 800dedc:	40010000 	.word	0x40010000
 800dee0:	40010400 	.word	0x40010400
 800dee4:	40014000 	.word	0x40014000
 800dee8:	40014400 	.word	0x40014400
 800deec:	40014800 	.word	0x40014800

0800def0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800def0:	b480      	push	{r7}
 800def2:	b087      	sub	sp, #28
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	f023 0201 	bic.w	r2, r3, #1
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	011b      	lsls	r3, r3, #4
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	4313      	orrs	r3, r2
 800df24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	f023 030a 	bic.w	r3, r3, #10
 800df2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	4313      	orrs	r3, r2
 800df34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	621a      	str	r2, [r3, #32]
}
 800df42:	bf00      	nop
 800df44:	371c      	adds	r7, #28
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df4e:	b480      	push	{r7}
 800df50:	b087      	sub	sp, #28
 800df52:	af00      	add	r7, sp, #0
 800df54:	60f8      	str	r0, [r7, #12]
 800df56:	60b9      	str	r1, [r7, #8]
 800df58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	f023 0210 	bic.w	r2, r3, #16
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	031b      	lsls	r3, r3, #12
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4313      	orrs	r3, r2
 800df82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	011b      	lsls	r3, r3, #4
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	4313      	orrs	r3, r2
 800df94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	621a      	str	r2, [r3, #32]
}
 800dfa2:	bf00      	nop
 800dfa4:	371c      	adds	r7, #28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
	...

0800dfb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <TIM_ITRx_SetConfig+0x38>)
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	f043 0307 	orr.w	r3, r3, #7
 800dfd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	609a      	str	r2, [r3, #8]
}
 800dfda:	bf00      	nop
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	ffcfff8f 	.word	0xffcfff8f

0800dfec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	021a      	lsls	r2, r3, #8
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	431a      	orrs	r2, r3
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	4313      	orrs	r3, r2
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	4313      	orrs	r3, r2
 800e018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	609a      	str	r2, [r3, #8]
}
 800e020:	bf00      	nop
 800e022:	371c      	adds	r7, #28
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d101      	bne.n	800e044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e040:	2302      	movs	r3, #2
 800e042:	e06d      	b.n	800e120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a30      	ldr	r2, [pc, #192]	; (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d004      	beq.n	800e078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a2f      	ldr	r2, [pc, #188]	; (800e130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d108      	bne.n	800e08a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e07e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a20      	ldr	r2, [pc, #128]	; (800e12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d022      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0b6:	d01d      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a1d      	ldr	r2, [pc, #116]	; (800e134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d018      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a1c      	ldr	r2, [pc, #112]	; (800e138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d013      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a1a      	ldr	r2, [pc, #104]	; (800e13c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00e      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a15      	ldr	r2, [pc, #84]	; (800e130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d009      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a16      	ldr	r2, [pc, #88]	; (800e140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d004      	beq.n	800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a15      	ldr	r2, [pc, #84]	; (800e144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d10c      	bne.n	800e10e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	4313      	orrs	r3, r2
 800e104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	40010000 	.word	0x40010000
 800e130:	40010400 	.word	0x40010400
 800e134:	40000400 	.word	0x40000400
 800e138:	40000800 	.word	0x40000800
 800e13c:	40000c00 	.word	0x40000c00
 800e140:	40001800 	.word	0x40001800
 800e144:	40014000 	.word	0x40014000

0800e148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e152:	2300      	movs	r3, #0
 800e154:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d101      	bne.n	800e164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e160:	2302      	movs	r3, #2
 800e162:	e065      	b.n	800e230 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	4313      	orrs	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	4313      	orrs	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	4313      	orrs	r3, r2
 800e194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	041b      	lsls	r3, r3, #16
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a16      	ldr	r2, [pc, #88]	; (800e23c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d004      	beq.n	800e1f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a14      	ldr	r2, [pc, #80]	; (800e240 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d115      	bne.n	800e21e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	051b      	lsls	r3, r3, #20
 800e1fe:	4313      	orrs	r3, r2
 800e200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	40010000 	.word	0x40010000
 800e240:	40010400 	.word	0x40010400

0800e244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e274:	bf00      	nop
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e042      	b.n	800e318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7f4 fe07 	bl	8002eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2224      	movs	r2, #36	; 0x24
 800e2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0201 	bic.w	r2, r2, #1
 800e2c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f001 f9ea 	bl	800f6a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fc7f 	bl	800ebd4 <UART_SetConfig>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d101      	bne.n	800e2e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e01b      	b.n	800e318 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e2ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689a      	ldr	r2, [r3, #8]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e2fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f042 0201 	orr.w	r2, r2, #1
 800e30e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f001 fa69 	bl	800f7e8 <UART_CheckIdleState>
 800e316:	4603      	mov	r3, r0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e334:	2b20      	cmp	r3, #32
 800e336:	d167      	bne.n	800e408 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <HAL_UART_Transmit_DMA+0x24>
 800e33e:	88fb      	ldrh	r3, [r7, #6]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e060      	b.n	800e40a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	88fa      	ldrh	r2, [r7, #6]
 800e352:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	88fa      	ldrh	r2, [r7, #6]
 800e35a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2221      	movs	r2, #33	; 0x21
 800e36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e372:	2b00      	cmp	r3, #0
 800e374:	d028      	beq.n	800e3c8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e37a:	4a26      	ldr	r2, [pc, #152]	; (800e414 <HAL_UART_Transmit_DMA+0xf4>)
 800e37c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e382:	4a25      	ldr	r2, [pc, #148]	; (800e418 <HAL_UART_Transmit_DMA+0xf8>)
 800e384:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e38a:	4a24      	ldr	r2, [pc, #144]	; (800e41c <HAL_UART_Transmit_DMA+0xfc>)
 800e38c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e392:	2200      	movs	r2, #0
 800e394:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e39e:	4619      	mov	r1, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3328      	adds	r3, #40	; 0x28
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	f7f6 fe23 	bl	8004ff4 <HAL_DMA_Start_IT>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d009      	beq.n	800e3c8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2210      	movs	r2, #16
 800e3b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2220      	movs	r2, #32
 800e3c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e020      	b.n	800e40a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2240      	movs	r2, #64	; 0x40
 800e3ce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	e853 3f00 	ldrex	r3, [r3]
 800e3de:	613b      	str	r3, [r7, #16]
   return(result);
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3f0:	623a      	str	r2, [r7, #32]
 800e3f2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f4:	69f9      	ldr	r1, [r7, #28]
 800e3f6:	6a3a      	ldr	r2, [r7, #32]
 800e3f8:	e841 2300 	strex	r3, r2, [r1]
 800e3fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1e5      	bne.n	800e3d0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	e000      	b.n	800e40a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e408:	2302      	movs	r3, #2
  }
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3728      	adds	r7, #40	; 0x28
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	0800fb65 	.word	0x0800fb65
 800e418:	0800fbfb 	.word	0x0800fbfb
 800e41c:	0800fc17 	.word	0x0800fc17

0800e420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b0ba      	sub	sp, #232	; 0xe8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	69db      	ldr	r3, [r3, #28]
 800e42e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e44a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e44e:	4013      	ands	r3, r2
 800e450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d11b      	bne.n	800e494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e460:	f003 0320 	and.w	r3, r3, #32
 800e464:	2b00      	cmp	r3, #0
 800e466:	d015      	beq.n	800e494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e46c:	f003 0320 	and.w	r3, r3, #32
 800e470:	2b00      	cmp	r3, #0
 800e472:	d105      	bne.n	800e480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d009      	beq.n	800e494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e484:	2b00      	cmp	r3, #0
 800e486:	f000 8377 	beq.w	800eb78 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	4798      	blx	r3
      }
      return;
 800e492:	e371      	b.n	800eb78 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 8123 	beq.w	800e6e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e49e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4a2:	4b8d      	ldr	r3, [pc, #564]	; (800e6d8 <HAL_UART_IRQHandler+0x2b8>)
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d106      	bne.n	800e4b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e4aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e4ae:	4b8b      	ldr	r3, [pc, #556]	; (800e6dc <HAL_UART_IRQHandler+0x2bc>)
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 8116 	beq.w	800e6e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d011      	beq.n	800e4e8 <HAL_UART_IRQHandler+0xc8>
 800e4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4de:	f043 0201 	orr.w	r2, r3, #1
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d011      	beq.n	800e518 <HAL_UART_IRQHandler+0xf8>
 800e4f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2202      	movs	r2, #2
 800e506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e50e:	f043 0204 	orr.w	r2, r3, #4
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d011      	beq.n	800e548 <HAL_UART_IRQHandler+0x128>
 800e524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2204      	movs	r2, #4
 800e536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e53e:	f043 0202 	orr.w	r2, r3, #2
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54c:	f003 0308 	and.w	r3, r3, #8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d017      	beq.n	800e584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d105      	bne.n	800e56c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e564:	4b5c      	ldr	r3, [pc, #368]	; (800e6d8 <HAL_UART_IRQHandler+0x2b8>)
 800e566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2208      	movs	r2, #8
 800e572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e57a:	f043 0208 	orr.w	r2, r3, #8
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d012      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x196>
 800e590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00c      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ac:	f043 0220 	orr.w	r2, r3, #32
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 82dd 	beq.w	800eb7c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c6:	f003 0320 	and.w	r3, r3, #32
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d013      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5d2:	f003 0320 	and.w	r3, r3, #32
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d007      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e60a:	2b40      	cmp	r3, #64	; 0x40
 800e60c:	d005      	beq.n	800e61a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e60e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e616:	2b00      	cmp	r3, #0
 800e618:	d054      	beq.n	800e6c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 fa3c 	bl	800fa98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62a:	2b40      	cmp	r3, #64	; 0x40
 800e62c:	d146      	bne.n	800e6bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3308      	adds	r3, #8
 800e634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e64c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e65a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e65e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1d9      	bne.n	800e62e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e680:	2b00      	cmp	r3, #0
 800e682:	d017      	beq.n	800e6b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e68a:	4a15      	ldr	r2, [pc, #84]	; (800e6e0 <HAL_UART_IRQHandler+0x2c0>)
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e694:	4618      	mov	r0, r3
 800e696:	f7f7 fa35 	bl	8005b04 <HAL_DMA_Abort_IT>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d019      	beq.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6b2:	e00f      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fa77 	bl	800eba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6ba:	e00b      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa73 	bl	800eba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6c2:	e007      	b.n	800e6d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 fa6f 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e6d2:	e253      	b.n	800eb7c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6d4:	bf00      	nop
    return;
 800e6d6:	e251      	b.n	800eb7c <HAL_UART_IRQHandler+0x75c>
 800e6d8:	10000001 	.word	0x10000001
 800e6dc:	04000120 	.word	0x04000120
 800e6e0:	0800fc97 	.word	0x0800fc97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	f040 81e7 	bne.w	800eabc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6f2:	f003 0310 	and.w	r3, r3, #16
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 81e0 	beq.w	800eabc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e700:	f003 0310 	and.w	r3, r3, #16
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 81d9 	beq.w	800eabc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2210      	movs	r2, #16
 800e710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e71c:	2b40      	cmp	r3, #64	; 0x40
 800e71e:	f040 8151 	bne.w	800e9c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a96      	ldr	r2, [pc, #600]	; (800e984 <HAL_UART_IRQHandler+0x564>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d068      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a93      	ldr	r2, [pc, #588]	; (800e988 <HAL_UART_IRQHandler+0x568>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d061      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a91      	ldr	r2, [pc, #580]	; (800e98c <HAL_UART_IRQHandler+0x56c>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d05a      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a8e      	ldr	r2, [pc, #568]	; (800e990 <HAL_UART_IRQHandler+0x570>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d053      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a8c      	ldr	r2, [pc, #560]	; (800e994 <HAL_UART_IRQHandler+0x574>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d04c      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a89      	ldr	r2, [pc, #548]	; (800e998 <HAL_UART_IRQHandler+0x578>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d045      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a87      	ldr	r2, [pc, #540]	; (800e99c <HAL_UART_IRQHandler+0x57c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d03e      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a84      	ldr	r2, [pc, #528]	; (800e9a0 <HAL_UART_IRQHandler+0x580>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d037      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a82      	ldr	r2, [pc, #520]	; (800e9a4 <HAL_UART_IRQHandler+0x584>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d030      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a7f      	ldr	r2, [pc, #508]	; (800e9a8 <HAL_UART_IRQHandler+0x588>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d029      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a7d      	ldr	r2, [pc, #500]	; (800e9ac <HAL_UART_IRQHandler+0x58c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d022      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a7a      	ldr	r2, [pc, #488]	; (800e9b0 <HAL_UART_IRQHandler+0x590>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d01b      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a78      	ldr	r2, [pc, #480]	; (800e9b4 <HAL_UART_IRQHandler+0x594>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d014      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a75      	ldr	r2, [pc, #468]	; (800e9b8 <HAL_UART_IRQHandler+0x598>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d00d      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a73      	ldr	r2, [pc, #460]	; (800e9bc <HAL_UART_IRQHandler+0x59c>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d006      	beq.n	800e802 <HAL_UART_IRQHandler+0x3e2>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a70      	ldr	r2, [pc, #448]	; (800e9c0 <HAL_UART_IRQHandler+0x5a0>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d106      	bne.n	800e810 <HAL_UART_IRQHandler+0x3f0>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	e005      	b.n	800e81c <HAL_UART_IRQHandler+0x3fc>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 81ab 	beq.w	800eb80 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e834:	429a      	cmp	r2, r3
 800e836:	f080 81a3 	bcs.w	800eb80 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84a:	69db      	ldr	r3, [r3, #28]
 800e84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e850:	f000 8087 	beq.w	800e962 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	461a      	mov	r2, r3
 800e87a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e87e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e88a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1da      	bne.n	800e854 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8a8:	e853 3f00 	ldrex	r3, [r3]
 800e8ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e8ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8b0:	f023 0301 	bic.w	r3, r3, #1
 800e8b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e8c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e8ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e8d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e1      	bne.n	800e89e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8e4:	e853 3f00 	ldrex	r3, [r3]
 800e8e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e90c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e3      	bne.n	800e8da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2220      	movs	r2, #32
 800e916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e928:	e853 3f00 	ldrex	r3, [r3]
 800e92c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e930:	f023 0310 	bic.w	r3, r3, #16
 800e934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e942:	65bb      	str	r3, [r7, #88]	; 0x58
 800e944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e4      	bne.n	800e920 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7f6 fdb3 	bl	80054c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2202      	movs	r2, #2
 800e966:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e974:	b29b      	uxth	r3, r3
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	b29b      	uxth	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f91d 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e982:	e0fd      	b.n	800eb80 <HAL_UART_IRQHandler+0x760>
 800e984:	40020010 	.word	0x40020010
 800e988:	40020028 	.word	0x40020028
 800e98c:	40020040 	.word	0x40020040
 800e990:	40020058 	.word	0x40020058
 800e994:	40020070 	.word	0x40020070
 800e998:	40020088 	.word	0x40020088
 800e99c:	400200a0 	.word	0x400200a0
 800e9a0:	400200b8 	.word	0x400200b8
 800e9a4:	40020410 	.word	0x40020410
 800e9a8:	40020428 	.word	0x40020428
 800e9ac:	40020440 	.word	0x40020440
 800e9b0:	40020458 	.word	0x40020458
 800e9b4:	40020470 	.word	0x40020470
 800e9b8:	40020488 	.word	0x40020488
 800e9bc:	400204a0 	.word	0x400204a0
 800e9c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 80cf 	beq.w	800eb84 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e9e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 80ca 	beq.w	800eb84 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea12:	647b      	str	r3, [r7, #68]	; 0x44
 800ea14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e4      	bne.n	800e9f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3308      	adds	r3, #8
 800ea2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	623b      	str	r3, [r7, #32]
   return(result);
 800ea36:	6a3a      	ldr	r2, [r7, #32]
 800ea38:	4b55      	ldr	r3, [pc, #340]	; (800eb90 <HAL_UART_IRQHandler+0x770>)
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3308      	adds	r3, #8
 800ea46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea4a:	633a      	str	r2, [r7, #48]	; 0x30
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea52:	e841 2300 	strex	r3, r2, [r1]
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1e3      	bne.n	800ea26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2220      	movs	r2, #32
 800ea62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	e853 3f00 	ldrex	r3, [r3]
 800ea7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f023 0310 	bic.w	r3, r3, #16
 800ea86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea94:	61fb      	str	r3, [r7, #28]
 800ea96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	69b9      	ldr	r1, [r7, #24]
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	617b      	str	r3, [r7, #20]
   return(result);
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e4      	bne.n	800ea72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2202      	movs	r2, #2
 800eaac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eaae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f881 	bl	800ebbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaba:	e063      	b.n	800eb84 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00e      	beq.n	800eae6 <HAL_UART_IRQHandler+0x6c6>
 800eac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eacc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d008      	beq.n	800eae6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eadc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f001 f91a 	bl	800fd18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eae4:	e051      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d014      	beq.n	800eb1c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eaf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d105      	bne.n	800eb0a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eafe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d008      	beq.n	800eb1c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d03a      	beq.n	800eb88 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
    }
    return;
 800eb1a:	e035      	b.n	800eb88 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d009      	beq.n	800eb3c <HAL_UART_IRQHandler+0x71c>
 800eb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d003      	beq.n	800eb3c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 f8c4 	bl	800fcc2 <UART_EndTransmit_IT>
    return;
 800eb3a:	e026      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <HAL_UART_IRQHandler+0x73c>
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d003      	beq.n	800eb5c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f001 f8f3 	bl	800fd40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb5a:	e016      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d010      	beq.n	800eb8a <HAL_UART_IRQHandler+0x76a>
 800eb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	da0c      	bge.n	800eb8a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f001 f8db 	bl	800fd2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb76:	e008      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb78:	bf00      	nop
 800eb7a:	e006      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb7c:	bf00      	nop
 800eb7e:	e004      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb80:	bf00      	nop
 800eb82:	e002      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
      return;
 800eb84:	bf00      	nop
 800eb86:	e000      	b.n	800eb8a <HAL_UART_IRQHandler+0x76a>
    return;
 800eb88:	bf00      	nop
  }
}
 800eb8a:	37e8      	adds	r7, #232	; 0xe8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	effffffe 	.word	0xeffffffe

0800eb94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebd8:	b092      	sub	sp, #72	; 0x48
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	431a      	orrs	r2, r3
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	431a      	orrs	r2, r3
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	4bbe      	ldr	r3, [pc, #760]	; (800eefc <UART_SetConfig+0x328>)
 800ec04:	4013      	ands	r3, r2
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	6812      	ldr	r2, [r2, #0]
 800ec0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4ab3      	ldr	r2, [pc, #716]	; (800ef00 <UART_SetConfig+0x32c>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d004      	beq.n	800ec40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	4baf      	ldr	r3, [pc, #700]	; (800ef04 <UART_SetConfig+0x330>)
 800ec48:	4013      	ands	r3, r2
 800ec4a:	697a      	ldr	r2, [r7, #20]
 800ec4c:	6812      	ldr	r2, [r2, #0]
 800ec4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec50:	430b      	orrs	r3, r1
 800ec52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	f023 010f 	bic.w	r1, r3, #15
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4aa6      	ldr	r2, [pc, #664]	; (800ef08 <UART_SetConfig+0x334>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d177      	bne.n	800ed64 <UART_SetConfig+0x190>
 800ec74:	4ba5      	ldr	r3, [pc, #660]	; (800ef0c <UART_SetConfig+0x338>)
 800ec76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec7c:	2b28      	cmp	r3, #40	; 0x28
 800ec7e:	d86d      	bhi.n	800ed5c <UART_SetConfig+0x188>
 800ec80:	a201      	add	r2, pc, #4	; (adr r2, 800ec88 <UART_SetConfig+0xb4>)
 800ec82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec86:	bf00      	nop
 800ec88:	0800ed2d 	.word	0x0800ed2d
 800ec8c:	0800ed5d 	.word	0x0800ed5d
 800ec90:	0800ed5d 	.word	0x0800ed5d
 800ec94:	0800ed5d 	.word	0x0800ed5d
 800ec98:	0800ed5d 	.word	0x0800ed5d
 800ec9c:	0800ed5d 	.word	0x0800ed5d
 800eca0:	0800ed5d 	.word	0x0800ed5d
 800eca4:	0800ed5d 	.word	0x0800ed5d
 800eca8:	0800ed35 	.word	0x0800ed35
 800ecac:	0800ed5d 	.word	0x0800ed5d
 800ecb0:	0800ed5d 	.word	0x0800ed5d
 800ecb4:	0800ed5d 	.word	0x0800ed5d
 800ecb8:	0800ed5d 	.word	0x0800ed5d
 800ecbc:	0800ed5d 	.word	0x0800ed5d
 800ecc0:	0800ed5d 	.word	0x0800ed5d
 800ecc4:	0800ed5d 	.word	0x0800ed5d
 800ecc8:	0800ed3d 	.word	0x0800ed3d
 800eccc:	0800ed5d 	.word	0x0800ed5d
 800ecd0:	0800ed5d 	.word	0x0800ed5d
 800ecd4:	0800ed5d 	.word	0x0800ed5d
 800ecd8:	0800ed5d 	.word	0x0800ed5d
 800ecdc:	0800ed5d 	.word	0x0800ed5d
 800ece0:	0800ed5d 	.word	0x0800ed5d
 800ece4:	0800ed5d 	.word	0x0800ed5d
 800ece8:	0800ed45 	.word	0x0800ed45
 800ecec:	0800ed5d 	.word	0x0800ed5d
 800ecf0:	0800ed5d 	.word	0x0800ed5d
 800ecf4:	0800ed5d 	.word	0x0800ed5d
 800ecf8:	0800ed5d 	.word	0x0800ed5d
 800ecfc:	0800ed5d 	.word	0x0800ed5d
 800ed00:	0800ed5d 	.word	0x0800ed5d
 800ed04:	0800ed5d 	.word	0x0800ed5d
 800ed08:	0800ed4d 	.word	0x0800ed4d
 800ed0c:	0800ed5d 	.word	0x0800ed5d
 800ed10:	0800ed5d 	.word	0x0800ed5d
 800ed14:	0800ed5d 	.word	0x0800ed5d
 800ed18:	0800ed5d 	.word	0x0800ed5d
 800ed1c:	0800ed5d 	.word	0x0800ed5d
 800ed20:	0800ed5d 	.word	0x0800ed5d
 800ed24:	0800ed5d 	.word	0x0800ed5d
 800ed28:	0800ed55 	.word	0x0800ed55
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed32:	e222      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed34:	2304      	movs	r3, #4
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3a:	e21e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed3c:	2308      	movs	r3, #8
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed42:	e21a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed44:	2310      	movs	r3, #16
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4a:	e216      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed52:	e212      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed54:	2340      	movs	r3, #64	; 0x40
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5a:	e20e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed5c:	2380      	movs	r3, #128	; 0x80
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed62:	e20a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a69      	ldr	r2, [pc, #420]	; (800ef10 <UART_SetConfig+0x33c>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d130      	bne.n	800edd0 <UART_SetConfig+0x1fc>
 800ed6e:	4b67      	ldr	r3, [pc, #412]	; (800ef0c <UART_SetConfig+0x338>)
 800ed70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	d826      	bhi.n	800edc8 <UART_SetConfig+0x1f4>
 800ed7a:	a201      	add	r2, pc, #4	; (adr r2, 800ed80 <UART_SetConfig+0x1ac>)
 800ed7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed80:	0800ed99 	.word	0x0800ed99
 800ed84:	0800eda1 	.word	0x0800eda1
 800ed88:	0800eda9 	.word	0x0800eda9
 800ed8c:	0800edb1 	.word	0x0800edb1
 800ed90:	0800edb9 	.word	0x0800edb9
 800ed94:	0800edc1 	.word	0x0800edc1
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9e:	e1ec      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eda0:	2304      	movs	r3, #4
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda6:	e1e8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eda8:	2308      	movs	r3, #8
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edae:	e1e4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edb0:	2310      	movs	r3, #16
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb6:	e1e0      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edb8:	2320      	movs	r3, #32
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edbe:	e1dc      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc6:	e1d8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edc8:	2380      	movs	r3, #128	; 0x80
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edce:	e1d4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a4f      	ldr	r2, [pc, #316]	; (800ef14 <UART_SetConfig+0x340>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d130      	bne.n	800ee3c <UART_SetConfig+0x268>
 800edda:	4b4c      	ldr	r3, [pc, #304]	; (800ef0c <UART_SetConfig+0x338>)
 800eddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	2b05      	cmp	r3, #5
 800ede4:	d826      	bhi.n	800ee34 <UART_SetConfig+0x260>
 800ede6:	a201      	add	r2, pc, #4	; (adr r2, 800edec <UART_SetConfig+0x218>)
 800ede8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edec:	0800ee05 	.word	0x0800ee05
 800edf0:	0800ee0d 	.word	0x0800ee0d
 800edf4:	0800ee15 	.word	0x0800ee15
 800edf8:	0800ee1d 	.word	0x0800ee1d
 800edfc:	0800ee25 	.word	0x0800ee25
 800ee00:	0800ee2d 	.word	0x0800ee2d
 800ee04:	2300      	movs	r3, #0
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0a:	e1b6      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e1b2      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee14:	2308      	movs	r3, #8
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e1ae      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e1aa      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee24:	2320      	movs	r3, #32
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e1a6      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee2c:	2340      	movs	r3, #64	; 0x40
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e1a2      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee34:	2380      	movs	r3, #128	; 0x80
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e19e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a35      	ldr	r2, [pc, #212]	; (800ef18 <UART_SetConfig+0x344>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d130      	bne.n	800eea8 <UART_SetConfig+0x2d4>
 800ee46:	4b31      	ldr	r3, [pc, #196]	; (800ef0c <UART_SetConfig+0x338>)
 800ee48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4a:	f003 0307 	and.w	r3, r3, #7
 800ee4e:	2b05      	cmp	r3, #5
 800ee50:	d826      	bhi.n	800eea0 <UART_SetConfig+0x2cc>
 800ee52:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <UART_SetConfig+0x284>)
 800ee54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee58:	0800ee71 	.word	0x0800ee71
 800ee5c:	0800ee79 	.word	0x0800ee79
 800ee60:	0800ee81 	.word	0x0800ee81
 800ee64:	0800ee89 	.word	0x0800ee89
 800ee68:	0800ee91 	.word	0x0800ee91
 800ee6c:	0800ee99 	.word	0x0800ee99
 800ee70:	2300      	movs	r3, #0
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee76:	e180      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee78:	2304      	movs	r3, #4
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e17c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee80:	2308      	movs	r3, #8
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e178      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee88:	2310      	movs	r3, #16
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8e:	e174      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee90:	2320      	movs	r3, #32
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e170      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ee98:	2340      	movs	r3, #64	; 0x40
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9e:	e16c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eea0:	2380      	movs	r3, #128	; 0x80
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea6:	e168      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a1b      	ldr	r2, [pc, #108]	; (800ef1c <UART_SetConfig+0x348>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d142      	bne.n	800ef38 <UART_SetConfig+0x364>
 800eeb2:	4b16      	ldr	r3, [pc, #88]	; (800ef0c <UART_SetConfig+0x338>)
 800eeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb6:	f003 0307 	and.w	r3, r3, #7
 800eeba:	2b05      	cmp	r3, #5
 800eebc:	d838      	bhi.n	800ef30 <UART_SetConfig+0x35c>
 800eebe:	a201      	add	r2, pc, #4	; (adr r2, 800eec4 <UART_SetConfig+0x2f0>)
 800eec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec4:	0800eedd 	.word	0x0800eedd
 800eec8:	0800eee5 	.word	0x0800eee5
 800eecc:	0800eeed 	.word	0x0800eeed
 800eed0:	0800eef5 	.word	0x0800eef5
 800eed4:	0800ef21 	.word	0x0800ef21
 800eed8:	0800ef29 	.word	0x0800ef29
 800eedc:	2300      	movs	r3, #0
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee2:	e14a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eee4:	2304      	movs	r3, #4
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e146      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eeec:	2308      	movs	r3, #8
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e142      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eef4:	2310      	movs	r3, #16
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e13e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800eefc:	cfff69f3 	.word	0xcfff69f3
 800ef00:	58000c00 	.word	0x58000c00
 800ef04:	11fff4ff 	.word	0x11fff4ff
 800ef08:	40011000 	.word	0x40011000
 800ef0c:	58024400 	.word	0x58024400
 800ef10:	40004400 	.word	0x40004400
 800ef14:	40004800 	.word	0x40004800
 800ef18:	40004c00 	.word	0x40004c00
 800ef1c:	40005000 	.word	0x40005000
 800ef20:	2320      	movs	r3, #32
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e128      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef28:	2340      	movs	r3, #64	; 0x40
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e124      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef30:	2380      	movs	r3, #128	; 0x80
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef36:	e120      	b.n	800f17a <UART_SetConfig+0x5a6>
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4acb      	ldr	r2, [pc, #812]	; (800f26c <UART_SetConfig+0x698>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d176      	bne.n	800f030 <UART_SetConfig+0x45c>
 800ef42:	4bcb      	ldr	r3, [pc, #812]	; (800f270 <UART_SetConfig+0x69c>)
 800ef44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef4a:	2b28      	cmp	r3, #40	; 0x28
 800ef4c:	d86c      	bhi.n	800f028 <UART_SetConfig+0x454>
 800ef4e:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <UART_SetConfig+0x380>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800eff9 	.word	0x0800eff9
 800ef58:	0800f029 	.word	0x0800f029
 800ef5c:	0800f029 	.word	0x0800f029
 800ef60:	0800f029 	.word	0x0800f029
 800ef64:	0800f029 	.word	0x0800f029
 800ef68:	0800f029 	.word	0x0800f029
 800ef6c:	0800f029 	.word	0x0800f029
 800ef70:	0800f029 	.word	0x0800f029
 800ef74:	0800f001 	.word	0x0800f001
 800ef78:	0800f029 	.word	0x0800f029
 800ef7c:	0800f029 	.word	0x0800f029
 800ef80:	0800f029 	.word	0x0800f029
 800ef84:	0800f029 	.word	0x0800f029
 800ef88:	0800f029 	.word	0x0800f029
 800ef8c:	0800f029 	.word	0x0800f029
 800ef90:	0800f029 	.word	0x0800f029
 800ef94:	0800f009 	.word	0x0800f009
 800ef98:	0800f029 	.word	0x0800f029
 800ef9c:	0800f029 	.word	0x0800f029
 800efa0:	0800f029 	.word	0x0800f029
 800efa4:	0800f029 	.word	0x0800f029
 800efa8:	0800f029 	.word	0x0800f029
 800efac:	0800f029 	.word	0x0800f029
 800efb0:	0800f029 	.word	0x0800f029
 800efb4:	0800f011 	.word	0x0800f011
 800efb8:	0800f029 	.word	0x0800f029
 800efbc:	0800f029 	.word	0x0800f029
 800efc0:	0800f029 	.word	0x0800f029
 800efc4:	0800f029 	.word	0x0800f029
 800efc8:	0800f029 	.word	0x0800f029
 800efcc:	0800f029 	.word	0x0800f029
 800efd0:	0800f029 	.word	0x0800f029
 800efd4:	0800f019 	.word	0x0800f019
 800efd8:	0800f029 	.word	0x0800f029
 800efdc:	0800f029 	.word	0x0800f029
 800efe0:	0800f029 	.word	0x0800f029
 800efe4:	0800f029 	.word	0x0800f029
 800efe8:	0800f029 	.word	0x0800f029
 800efec:	0800f029 	.word	0x0800f029
 800eff0:	0800f029 	.word	0x0800f029
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	2301      	movs	r3, #1
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e0bc      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f000:	2304      	movs	r3, #4
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e0b8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f008:	2308      	movs	r3, #8
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e0b4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f010:	2310      	movs	r3, #16
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e0b0      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f018:	2320      	movs	r3, #32
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e0ac      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f020:	2340      	movs	r3, #64	; 0x40
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e0a8      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f028:	2380      	movs	r3, #128	; 0x80
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e0a4      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a8f      	ldr	r2, [pc, #572]	; (800f274 <UART_SetConfig+0x6a0>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d130      	bne.n	800f09c <UART_SetConfig+0x4c8>
 800f03a:	4b8d      	ldr	r3, [pc, #564]	; (800f270 <UART_SetConfig+0x69c>)
 800f03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	2b05      	cmp	r3, #5
 800f044:	d826      	bhi.n	800f094 <UART_SetConfig+0x4c0>
 800f046:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <UART_SetConfig+0x478>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f065 	.word	0x0800f065
 800f050:	0800f06d 	.word	0x0800f06d
 800f054:	0800f075 	.word	0x0800f075
 800f058:	0800f07d 	.word	0x0800f07d
 800f05c:	0800f085 	.word	0x0800f085
 800f060:	0800f08d 	.word	0x0800f08d
 800f064:	2300      	movs	r3, #0
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e086      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f06c:	2304      	movs	r3, #4
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e082      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f074:	2308      	movs	r3, #8
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e07e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f07c:	2310      	movs	r3, #16
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e07a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f084:	2320      	movs	r3, #32
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e076      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f08c:	2340      	movs	r3, #64	; 0x40
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e072      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f094:	2380      	movs	r3, #128	; 0x80
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e06e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a75      	ldr	r2, [pc, #468]	; (800f278 <UART_SetConfig+0x6a4>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d130      	bne.n	800f108 <UART_SetConfig+0x534>
 800f0a6:	4b72      	ldr	r3, [pc, #456]	; (800f270 <UART_SetConfig+0x69c>)
 800f0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0aa:	f003 0307 	and.w	r3, r3, #7
 800f0ae:	2b05      	cmp	r3, #5
 800f0b0:	d826      	bhi.n	800f100 <UART_SetConfig+0x52c>
 800f0b2:	a201      	add	r2, pc, #4	; (adr r2, 800f0b8 <UART_SetConfig+0x4e4>)
 800f0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b8:	0800f0d1 	.word	0x0800f0d1
 800f0bc:	0800f0d9 	.word	0x0800f0d9
 800f0c0:	0800f0e1 	.word	0x0800f0e1
 800f0c4:	0800f0e9 	.word	0x0800f0e9
 800f0c8:	0800f0f1 	.word	0x0800f0f1
 800f0cc:	0800f0f9 	.word	0x0800f0f9
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e050      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0d8:	2304      	movs	r3, #4
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e04c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0e0:	2308      	movs	r3, #8
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e048      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0e8:	2310      	movs	r3, #16
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e044      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0f0:	2320      	movs	r3, #32
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e040      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f0f8:	2340      	movs	r3, #64	; 0x40
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e03c      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f100:	2380      	movs	r3, #128	; 0x80
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e038      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a5b      	ldr	r2, [pc, #364]	; (800f27c <UART_SetConfig+0x6a8>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d130      	bne.n	800f174 <UART_SetConfig+0x5a0>
 800f112:	4b57      	ldr	r3, [pc, #348]	; (800f270 <UART_SetConfig+0x69c>)
 800f114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b05      	cmp	r3, #5
 800f11c:	d826      	bhi.n	800f16c <UART_SetConfig+0x598>
 800f11e:	a201      	add	r2, pc, #4	; (adr r2, 800f124 <UART_SetConfig+0x550>)
 800f120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f124:	0800f13d 	.word	0x0800f13d
 800f128:	0800f145 	.word	0x0800f145
 800f12c:	0800f14d 	.word	0x0800f14d
 800f130:	0800f155 	.word	0x0800f155
 800f134:	0800f15d 	.word	0x0800f15d
 800f138:	0800f165 	.word	0x0800f165
 800f13c:	2302      	movs	r3, #2
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e01a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f144:	2304      	movs	r3, #4
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e016      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f14c:	2308      	movs	r3, #8
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e012      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f154:	2310      	movs	r3, #16
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e00e      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f15c:	2320      	movs	r3, #32
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e00a      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f164:	2340      	movs	r3, #64	; 0x40
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e006      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f16c:	2380      	movs	r3, #128	; 0x80
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e002      	b.n	800f17a <UART_SetConfig+0x5a6>
 800f174:	2380      	movs	r3, #128	; 0x80
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a3f      	ldr	r2, [pc, #252]	; (800f27c <UART_SetConfig+0x6a8>)
 800f180:	4293      	cmp	r3, r2
 800f182:	f040 80f8 	bne.w	800f376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f18a:	2b20      	cmp	r3, #32
 800f18c:	dc46      	bgt.n	800f21c <UART_SetConfig+0x648>
 800f18e:	2b02      	cmp	r3, #2
 800f190:	f2c0 8082 	blt.w	800f298 <UART_SetConfig+0x6c4>
 800f194:	3b02      	subs	r3, #2
 800f196:	2b1e      	cmp	r3, #30
 800f198:	d87e      	bhi.n	800f298 <UART_SetConfig+0x6c4>
 800f19a:	a201      	add	r2, pc, #4	; (adr r2, 800f1a0 <UART_SetConfig+0x5cc>)
 800f19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a0:	0800f223 	.word	0x0800f223
 800f1a4:	0800f299 	.word	0x0800f299
 800f1a8:	0800f22b 	.word	0x0800f22b
 800f1ac:	0800f299 	.word	0x0800f299
 800f1b0:	0800f299 	.word	0x0800f299
 800f1b4:	0800f299 	.word	0x0800f299
 800f1b8:	0800f23b 	.word	0x0800f23b
 800f1bc:	0800f299 	.word	0x0800f299
 800f1c0:	0800f299 	.word	0x0800f299
 800f1c4:	0800f299 	.word	0x0800f299
 800f1c8:	0800f299 	.word	0x0800f299
 800f1cc:	0800f299 	.word	0x0800f299
 800f1d0:	0800f299 	.word	0x0800f299
 800f1d4:	0800f299 	.word	0x0800f299
 800f1d8:	0800f24b 	.word	0x0800f24b
 800f1dc:	0800f299 	.word	0x0800f299
 800f1e0:	0800f299 	.word	0x0800f299
 800f1e4:	0800f299 	.word	0x0800f299
 800f1e8:	0800f299 	.word	0x0800f299
 800f1ec:	0800f299 	.word	0x0800f299
 800f1f0:	0800f299 	.word	0x0800f299
 800f1f4:	0800f299 	.word	0x0800f299
 800f1f8:	0800f299 	.word	0x0800f299
 800f1fc:	0800f299 	.word	0x0800f299
 800f200:	0800f299 	.word	0x0800f299
 800f204:	0800f299 	.word	0x0800f299
 800f208:	0800f299 	.word	0x0800f299
 800f20c:	0800f299 	.word	0x0800f299
 800f210:	0800f299 	.word	0x0800f299
 800f214:	0800f299 	.word	0x0800f299
 800f218:	0800f28b 	.word	0x0800f28b
 800f21c:	2b40      	cmp	r3, #64	; 0x40
 800f21e:	d037      	beq.n	800f290 <UART_SetConfig+0x6bc>
 800f220:	e03a      	b.n	800f298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f222:	f7fc f9a1 	bl	800b568 <HAL_RCCEx_GetD3PCLK1Freq>
 800f226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f228:	e03c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f22a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fc f9b0 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f238:	e034      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f23a:	f107 0318 	add.w	r3, r7, #24
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fc fafc 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f248:	e02c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f24a:	4b09      	ldr	r3, [pc, #36]	; (800f270 <UART_SetConfig+0x69c>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0320 	and.w	r3, r3, #32
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f256:	4b06      	ldr	r3, [pc, #24]	; (800f270 <UART_SetConfig+0x69c>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	08db      	lsrs	r3, r3, #3
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	4a07      	ldr	r2, [pc, #28]	; (800f280 <UART_SetConfig+0x6ac>)
 800f262:	fa22 f303 	lsr.w	r3, r2, r3
 800f266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f268:	e01c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
 800f26a:	bf00      	nop
 800f26c:	40011400 	.word	0x40011400
 800f270:	58024400 	.word	0x58024400
 800f274:	40007800 	.word	0x40007800
 800f278:	40007c00 	.word	0x40007c00
 800f27c:	58000c00 	.word	0x58000c00
 800f280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f284:	4b9d      	ldr	r3, [pc, #628]	; (800f4fc <UART_SetConfig+0x928>)
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f288:	e00c      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f28a:	4b9d      	ldr	r3, [pc, #628]	; (800f500 <UART_SetConfig+0x92c>)
 800f28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f28e:	e009      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f296:	e005      	b.n	800f2a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f298:	2300      	movs	r3, #0
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 81de 	beq.w	800f668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b0:	4a94      	ldr	r2, [pc, #592]	; (800f504 <UART_SetConfig+0x930>)
 800f2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	005b      	lsls	r3, r3, #1
 800f2c8:	4413      	add	r3, r2
 800f2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d305      	bcc.n	800f2dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d903      	bls.n	800f2e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2e2:	e1c1      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	60bb      	str	r3, [r7, #8]
 800f2ea:	60fa      	str	r2, [r7, #12]
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f0:	4a84      	ldr	r2, [pc, #528]	; (800f504 <UART_SetConfig+0x930>)
 800f2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	603b      	str	r3, [r7, #0]
 800f2fc:	607a      	str	r2, [r7, #4]
 800f2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f306:	f7f0 ffeb 	bl	80002e0 <__aeabi_uldivmod>
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	4610      	mov	r0, r2
 800f310:	4619      	mov	r1, r3
 800f312:	f04f 0200 	mov.w	r2, #0
 800f316:	f04f 0300 	mov.w	r3, #0
 800f31a:	020b      	lsls	r3, r1, #8
 800f31c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f320:	0202      	lsls	r2, r0, #8
 800f322:	6979      	ldr	r1, [r7, #20]
 800f324:	6849      	ldr	r1, [r1, #4]
 800f326:	0849      	lsrs	r1, r1, #1
 800f328:	2000      	movs	r0, #0
 800f32a:	460c      	mov	r4, r1
 800f32c:	4605      	mov	r5, r0
 800f32e:	eb12 0804 	adds.w	r8, r2, r4
 800f332:	eb43 0905 	adc.w	r9, r3, r5
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	469a      	mov	sl, r3
 800f33e:	4693      	mov	fp, r2
 800f340:	4652      	mov	r2, sl
 800f342:	465b      	mov	r3, fp
 800f344:	4640      	mov	r0, r8
 800f346:	4649      	mov	r1, r9
 800f348:	f7f0 ffca 	bl	80002e0 <__aeabi_uldivmod>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	4613      	mov	r3, r2
 800f352:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f35a:	d308      	bcc.n	800f36e <UART_SetConfig+0x79a>
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f362:	d204      	bcs.n	800f36e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f36a:	60da      	str	r2, [r3, #12]
 800f36c:	e17c      	b.n	800f668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f36e:	2301      	movs	r3, #1
 800f370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f374:	e178      	b.n	800f668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	69db      	ldr	r3, [r3, #28]
 800f37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f37e:	f040 80c5 	bne.w	800f50c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f386:	2b20      	cmp	r3, #32
 800f388:	dc48      	bgt.n	800f41c <UART_SetConfig+0x848>
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	db7b      	blt.n	800f486 <UART_SetConfig+0x8b2>
 800f38e:	2b20      	cmp	r3, #32
 800f390:	d879      	bhi.n	800f486 <UART_SetConfig+0x8b2>
 800f392:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <UART_SetConfig+0x7c4>)
 800f394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f398:	0800f423 	.word	0x0800f423
 800f39c:	0800f42b 	.word	0x0800f42b
 800f3a0:	0800f487 	.word	0x0800f487
 800f3a4:	0800f487 	.word	0x0800f487
 800f3a8:	0800f433 	.word	0x0800f433
 800f3ac:	0800f487 	.word	0x0800f487
 800f3b0:	0800f487 	.word	0x0800f487
 800f3b4:	0800f487 	.word	0x0800f487
 800f3b8:	0800f443 	.word	0x0800f443
 800f3bc:	0800f487 	.word	0x0800f487
 800f3c0:	0800f487 	.word	0x0800f487
 800f3c4:	0800f487 	.word	0x0800f487
 800f3c8:	0800f487 	.word	0x0800f487
 800f3cc:	0800f487 	.word	0x0800f487
 800f3d0:	0800f487 	.word	0x0800f487
 800f3d4:	0800f487 	.word	0x0800f487
 800f3d8:	0800f453 	.word	0x0800f453
 800f3dc:	0800f487 	.word	0x0800f487
 800f3e0:	0800f487 	.word	0x0800f487
 800f3e4:	0800f487 	.word	0x0800f487
 800f3e8:	0800f487 	.word	0x0800f487
 800f3ec:	0800f487 	.word	0x0800f487
 800f3f0:	0800f487 	.word	0x0800f487
 800f3f4:	0800f487 	.word	0x0800f487
 800f3f8:	0800f487 	.word	0x0800f487
 800f3fc:	0800f487 	.word	0x0800f487
 800f400:	0800f487 	.word	0x0800f487
 800f404:	0800f487 	.word	0x0800f487
 800f408:	0800f487 	.word	0x0800f487
 800f40c:	0800f487 	.word	0x0800f487
 800f410:	0800f487 	.word	0x0800f487
 800f414:	0800f487 	.word	0x0800f487
 800f418:	0800f479 	.word	0x0800f479
 800f41c:	2b40      	cmp	r3, #64	; 0x40
 800f41e:	d02e      	beq.n	800f47e <UART_SetConfig+0x8aa>
 800f420:	e031      	b.n	800f486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f422:	f7fa f8a9 	bl	8009578 <HAL_RCC_GetPCLK1Freq>
 800f426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f428:	e033      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f42a:	f7fa f8bb 	bl	80095a4 <HAL_RCC_GetPCLK2Freq>
 800f42e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f430:	e02f      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f436:	4618      	mov	r0, r3
 800f438:	f7fc f8ac 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e027      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f442:	f107 0318 	add.w	r3, r7, #24
 800f446:	4618      	mov	r0, r3
 800f448:	f7fc f9f8 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f450:	e01f      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f452:	4b2d      	ldr	r3, [pc, #180]	; (800f508 <UART_SetConfig+0x934>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f003 0320 	and.w	r3, r3, #32
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d009      	beq.n	800f472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f45e:	4b2a      	ldr	r3, [pc, #168]	; (800f508 <UART_SetConfig+0x934>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	08db      	lsrs	r3, r3, #3
 800f464:	f003 0303 	and.w	r3, r3, #3
 800f468:	4a24      	ldr	r2, [pc, #144]	; (800f4fc <UART_SetConfig+0x928>)
 800f46a:	fa22 f303 	lsr.w	r3, r2, r3
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f470:	e00f      	b.n	800f492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f472:	4b22      	ldr	r3, [pc, #136]	; (800f4fc <UART_SetConfig+0x928>)
 800f474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f476:	e00c      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f478:	4b21      	ldr	r3, [pc, #132]	; (800f500 <UART_SetConfig+0x92c>)
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f47c:	e009      	b.n	800f492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f484:	e005      	b.n	800f492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80e7 	beq.w	800f668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49e:	4a19      	ldr	r2, [pc, #100]	; (800f504 <UART_SetConfig+0x930>)
 800f4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4ac:	005a      	lsls	r2, r3, #1
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	085b      	lsrs	r3, r3, #1
 800f4b4:	441a      	add	r2, r3
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	2b0f      	cmp	r3, #15
 800f4c4:	d916      	bls.n	800f4f4 <UART_SetConfig+0x920>
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4cc:	d212      	bcs.n	800f4f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	f023 030f 	bic.w	r3, r3, #15
 800f4d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	085b      	lsrs	r3, r3, #1
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	f003 0307 	and.w	r3, r3, #7
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4f0:	60da      	str	r2, [r3, #12]
 800f4f2:	e0b9      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4fa:	e0b5      	b.n	800f668 <UART_SetConfig+0xa94>
 800f4fc:	03d09000 	.word	0x03d09000
 800f500:	003d0900 	.word	0x003d0900
 800f504:	080142c8 	.word	0x080142c8
 800f508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f50c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f510:	2b20      	cmp	r3, #32
 800f512:	dc49      	bgt.n	800f5a8 <UART_SetConfig+0x9d4>
 800f514:	2b00      	cmp	r3, #0
 800f516:	db7c      	blt.n	800f612 <UART_SetConfig+0xa3e>
 800f518:	2b20      	cmp	r3, #32
 800f51a:	d87a      	bhi.n	800f612 <UART_SetConfig+0xa3e>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <UART_SetConfig+0x950>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f5af 	.word	0x0800f5af
 800f528:	0800f5b7 	.word	0x0800f5b7
 800f52c:	0800f613 	.word	0x0800f613
 800f530:	0800f613 	.word	0x0800f613
 800f534:	0800f5bf 	.word	0x0800f5bf
 800f538:	0800f613 	.word	0x0800f613
 800f53c:	0800f613 	.word	0x0800f613
 800f540:	0800f613 	.word	0x0800f613
 800f544:	0800f5cf 	.word	0x0800f5cf
 800f548:	0800f613 	.word	0x0800f613
 800f54c:	0800f613 	.word	0x0800f613
 800f550:	0800f613 	.word	0x0800f613
 800f554:	0800f613 	.word	0x0800f613
 800f558:	0800f613 	.word	0x0800f613
 800f55c:	0800f613 	.word	0x0800f613
 800f560:	0800f613 	.word	0x0800f613
 800f564:	0800f5df 	.word	0x0800f5df
 800f568:	0800f613 	.word	0x0800f613
 800f56c:	0800f613 	.word	0x0800f613
 800f570:	0800f613 	.word	0x0800f613
 800f574:	0800f613 	.word	0x0800f613
 800f578:	0800f613 	.word	0x0800f613
 800f57c:	0800f613 	.word	0x0800f613
 800f580:	0800f613 	.word	0x0800f613
 800f584:	0800f613 	.word	0x0800f613
 800f588:	0800f613 	.word	0x0800f613
 800f58c:	0800f613 	.word	0x0800f613
 800f590:	0800f613 	.word	0x0800f613
 800f594:	0800f613 	.word	0x0800f613
 800f598:	0800f613 	.word	0x0800f613
 800f59c:	0800f613 	.word	0x0800f613
 800f5a0:	0800f613 	.word	0x0800f613
 800f5a4:	0800f605 	.word	0x0800f605
 800f5a8:	2b40      	cmp	r3, #64	; 0x40
 800f5aa:	d02e      	beq.n	800f60a <UART_SetConfig+0xa36>
 800f5ac:	e031      	b.n	800f612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5ae:	f7f9 ffe3 	bl	8009578 <HAL_RCC_GetPCLK1Freq>
 800f5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5b4:	e033      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5b6:	f7f9 fff5 	bl	80095a4 <HAL_RCC_GetPCLK2Freq>
 800f5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5bc:	e02f      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fb ffe6 	bl	800b594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5cc:	e027      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ce:	f107 0318 	add.w	r3, r7, #24
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fc f932 	bl	800b83c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5dc:	e01f      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5de:	4b2d      	ldr	r3, [pc, #180]	; (800f694 <UART_SetConfig+0xac0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5ea:	4b2a      	ldr	r3, [pc, #168]	; (800f694 <UART_SetConfig+0xac0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	08db      	lsrs	r3, r3, #3
 800f5f0:	f003 0303 	and.w	r3, r3, #3
 800f5f4:	4a28      	ldr	r2, [pc, #160]	; (800f698 <UART_SetConfig+0xac4>)
 800f5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5fc:	e00f      	b.n	800f61e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f5fe:	4b26      	ldr	r3, [pc, #152]	; (800f698 <UART_SetConfig+0xac4>)
 800f600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f602:	e00c      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f604:	4b25      	ldr	r3, [pc, #148]	; (800f69c <UART_SetConfig+0xac8>)
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f608:	e009      	b.n	800f61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f610:	e005      	b.n	800f61e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f61c:	bf00      	nop
    }

    if (pclk != 0U)
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	2b00      	cmp	r3, #0
 800f622:	d021      	beq.n	800f668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f628:	4a1d      	ldr	r2, [pc, #116]	; (800f6a0 <UART_SetConfig+0xacc>)
 800f62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f62e:	461a      	mov	r2, r3
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	fbb3 f2f2 	udiv	r2, r3, r2
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	085b      	lsrs	r3, r3, #1
 800f63c:	441a      	add	r2, r3
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	fbb2 f3f3 	udiv	r3, r2, r3
 800f646:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	2b0f      	cmp	r3, #15
 800f64c:	d909      	bls.n	800f662 <UART_SetConfig+0xa8e>
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f654:	d205      	bcs.n	800f662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	b29a      	uxth	r2, r3
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	60da      	str	r2, [r3, #12]
 800f660:	e002      	b.n	800f668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2201      	movs	r2, #1
 800f674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2200      	movs	r2, #0
 800f67c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2200      	movs	r2, #0
 800f682:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f684:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3748      	adds	r7, #72	; 0x48
 800f68c:	46bd      	mov	sp, r7
 800f68e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f692:	bf00      	nop
 800f694:	58024400 	.word	0x58024400
 800f698:	03d09000 	.word	0x03d09000
 800f69c:	003d0900 	.word	0x003d0900
 800f6a0:	080142c8 	.word	0x080142c8

0800f6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b0:	f003 0308 	and.w	r3, r3, #8
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00a      	beq.n	800f6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f4:	f003 0302 	and.w	r3, r3, #2
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	f003 0304 	and.w	r3, r3, #4
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	430a      	orrs	r2, r1
 800f732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f738:	f003 0310 	and.w	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	430a      	orrs	r2, r1
 800f754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75a:	f003 0320 	and.w	r3, r3, #32
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00a      	beq.n	800f778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f780:	2b00      	cmp	r3, #0
 800f782:	d01a      	beq.n	800f7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	430a      	orrs	r2, r1
 800f798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f79e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7a2:	d10a      	bne.n	800f7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	430a      	orrs	r2, r1
 800f7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00a      	beq.n	800f7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	430a      	orrs	r2, r1
 800f7da:	605a      	str	r2, [r3, #4]
  }
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b098      	sub	sp, #96	; 0x60
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7f8:	f7f3 fd2a 	bl	8003250 <HAL_GetTick>
 800f7fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f003 0308 	and.w	r3, r3, #8
 800f808:	2b08      	cmp	r3, #8
 800f80a:	d12f      	bne.n	800f86c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f80c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f814:	2200      	movs	r2, #0
 800f816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 f88e 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d022      	beq.n	800f86c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82e:	e853 3f00 	ldrex	r3, [r3]
 800f832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f83a:	653b      	str	r3, [r7, #80]	; 0x50
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	461a      	mov	r2, r3
 800f842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f844:	647b      	str	r3, [r7, #68]	; 0x44
 800f846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f84a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84c:	e841 2300 	strex	r3, r2, [r1]
 800f850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1e6      	bne.n	800f826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2220      	movs	r2, #32
 800f85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f868:	2303      	movs	r3, #3
 800f86a:	e063      	b.n	800f934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f003 0304 	and.w	r3, r3, #4
 800f876:	2b04      	cmp	r3, #4
 800f878:	d149      	bne.n	800f90e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f87a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f882:	2200      	movs	r2, #0
 800f884:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f857 	bl	800f93c <UART_WaitOnFlagUntilTimeout>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d03c      	beq.n	800f90e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	e853 3f00 	ldrex	r3, [r3]
 800f8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ba:	e841 2300 	strex	r3, r2, [r1]
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1e6      	bne.n	800f894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3308      	adds	r3, #8
 800f8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f023 0301 	bic.w	r3, r3, #1
 800f8dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8e6:	61fa      	str	r2, [r7, #28]
 800f8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	69b9      	ldr	r1, [r7, #24]
 800f8ec:	69fa      	ldr	r2, [r7, #28]
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e5      	bne.n	800f8c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2220      	movs	r2, #32
 800f8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f90a:	2303      	movs	r3, #3
 800f90c:	e012      	b.n	800f934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2220      	movs	r2, #32
 800f912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2220      	movs	r2, #32
 800f91a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3758      	adds	r7, #88	; 0x58
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	4613      	mov	r3, r2
 800f94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f94c:	e04f      	b.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f954:	d04b      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f956:	f7f3 fc7b 	bl	8003250 <HAL_GetTick>
 800f95a:	4602      	mov	r2, r0
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	429a      	cmp	r2, r3
 800f964:	d302      	bcc.n	800f96c <UART_WaitOnFlagUntilTimeout+0x30>
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e04e      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d037      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b80      	cmp	r3, #128	; 0x80
 800f982:	d034      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	2b40      	cmp	r3, #64	; 0x40
 800f988:	d031      	beq.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	69db      	ldr	r3, [r3, #28]
 800f990:	f003 0308 	and.w	r3, r3, #8
 800f994:	2b08      	cmp	r3, #8
 800f996:	d110      	bne.n	800f9ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2208      	movs	r2, #8
 800f99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f879 	bl	800fa98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2208      	movs	r2, #8
 800f9aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	e029      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	69db      	ldr	r3, [r3, #28]
 800f9c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9c8:	d111      	bne.n	800f9ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f000 f85f 	bl	800fa98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2220      	movs	r2, #32
 800f9de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e00f      	b.n	800fa0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	69da      	ldr	r2, [r3, #28]
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	4013      	ands	r3, r2
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	bf0c      	ite	eq
 800f9fe:	2301      	moveq	r3, #1
 800fa00:	2300      	movne	r3, #0
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	461a      	mov	r2, r3
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d0a0      	beq.n	800f94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fa16:	b480      	push	{r7}
 800fa18:	b08f      	sub	sp, #60	; 0x3c
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	e853 3f00 	ldrex	r3, [r3]
 800fa2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fa32:	637b      	str	r3, [r7, #52]	; 0x34
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa44:	e841 2300 	strex	r3, r2, [r1]
 800fa48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1e6      	bne.n	800fa1e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3308      	adds	r3, #8
 800fa56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	e853 3f00 	ldrex	r3, [r3]
 800fa5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fa66:	633b      	str	r3, [r7, #48]	; 0x30
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa70:	61ba      	str	r2, [r7, #24]
 800fa72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa74:	6979      	ldr	r1, [r7, #20]
 800fa76:	69ba      	ldr	r2, [r7, #24]
 800fa78:	e841 2300 	strex	r3, r2, [r1]
 800fa7c:	613b      	str	r3, [r7, #16]
   return(result);
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1e5      	bne.n	800fa50 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2220      	movs	r2, #32
 800fa88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fa8c:	bf00      	nop
 800fa8e:	373c      	adds	r7, #60	; 0x3c
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b095      	sub	sp, #84	; 0x54
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa8:	e853 3f00 	ldrex	r3, [r3]
 800faac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fabe:	643b      	str	r3, [r7, #64]	; 0x40
 800fac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fac6:	e841 2300 	strex	r3, r2, [r1]
 800faca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800facc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1e6      	bne.n	800faa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3308      	adds	r3, #8
 800fad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	e853 3f00 	ldrex	r3, [r3]
 800fae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fae2:	69fa      	ldr	r2, [r7, #28]
 800fae4:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <UART_EndRxTransfer+0xc8>)
 800fae6:	4013      	ands	r3, r2
 800fae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3308      	adds	r3, #8
 800faf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800faf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fafa:	e841 2300 	strex	r3, r2, [r1]
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e5      	bne.n	800fad2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d118      	bne.n	800fb40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	e853 3f00 	ldrex	r3, [r3]
 800fb1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	f023 0310 	bic.w	r3, r3, #16
 800fb22:	647b      	str	r3, [r7, #68]	; 0x44
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb2c:	61bb      	str	r3, [r7, #24]
 800fb2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb30:	6979      	ldr	r1, [r7, #20]
 800fb32:	69ba      	ldr	r2, [r7, #24]
 800fb34:	e841 2300 	strex	r3, r2, [r1]
 800fb38:	613b      	str	r3, [r7, #16]
   return(result);
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1e6      	bne.n	800fb0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2220      	movs	r2, #32
 800fb44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fb54:	bf00      	nop
 800fb56:	3754      	adds	r7, #84	; 0x54
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	effffffe 	.word	0xeffffffe

0800fb64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b090      	sub	sp, #64	; 0x40
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb70:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	69db      	ldr	r3, [r3, #28]
 800fb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb7a:	d037      	beq.n	800fbec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3308      	adds	r3, #8
 800fb8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	e853 3f00 	ldrex	r3, [r3]
 800fb92:	623b      	str	r3, [r7, #32]
   return(result);
 800fb94:	6a3b      	ldr	r3, [r7, #32]
 800fb96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	3308      	adds	r3, #8
 800fba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fba4:	633a      	str	r2, [r7, #48]	; 0x30
 800fba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbac:	e841 2300 	strex	r3, r2, [r1]
 800fbb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1e5      	bne.n	800fb84 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	e853 3f00 	ldrex	r3, [r3]
 800fbc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbcc:	637b      	str	r3, [r7, #52]	; 0x34
 800fbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd6:	61fb      	str	r3, [r7, #28]
 800fbd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbda:	69b9      	ldr	r1, [r7, #24]
 800fbdc:	69fa      	ldr	r2, [r7, #28]
 800fbde:	e841 2300 	strex	r3, r2, [r1]
 800fbe2:	617b      	str	r3, [r7, #20]
   return(result);
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1e6      	bne.n	800fbb8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fbea:	e002      	b.n	800fbf2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fbec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fbee:	f7f1 fab3 	bl	8001158 <HAL_UART_TxCpltCallback>
}
 800fbf2:	bf00      	nop
 800fbf4:	3740      	adds	r7, #64	; 0x40
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fbfa:	b580      	push	{r7, lr}
 800fbfc:	b084      	sub	sp, #16
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7fe ffc3 	bl	800eb94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b086      	sub	sp, #24
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc3e:	2b80      	cmp	r3, #128	; 0x80
 800fc40:	d109      	bne.n	800fc56 <UART_DMAError+0x40>
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2b21      	cmp	r3, #33	; 0x21
 800fc46:	d106      	bne.n	800fc56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fc50:	6978      	ldr	r0, [r7, #20]
 800fc52:	f7ff fee0 	bl	800fa16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	d109      	bne.n	800fc78 <UART_DMAError+0x62>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2b22      	cmp	r3, #34	; 0x22
 800fc68:	d106      	bne.n	800fc78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fc72:	6978      	ldr	r0, [r7, #20]
 800fc74:	f7ff ff10 	bl	800fa98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc7e:	f043 0210 	orr.w	r2, r3, #16
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc88:	6978      	ldr	r0, [r7, #20]
 800fc8a:	f7fe ff8d 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc8e:	bf00      	nop
 800fc90:	3718      	adds	r7, #24
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f7fe ff77 	bl	800eba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcba:	bf00      	nop
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b088      	sub	sp, #32
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	e853 3f00 	ldrex	r3, [r3]
 800fcd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	461a      	mov	r2, r3
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	61bb      	str	r3, [r7, #24]
 800fcea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcec:	6979      	ldr	r1, [r7, #20]
 800fcee:	69ba      	ldr	r2, [r7, #24]
 800fcf0:	e841 2300 	strex	r3, r2, [r1]
 800fcf4:	613b      	str	r3, [r7, #16]
   return(result);
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1e6      	bne.n	800fcca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2220      	movs	r2, #32
 800fd00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f1 fa24 	bl	8001158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd10:	bf00      	nop
 800fd12:	3720      	adds	r7, #32
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fd34:	bf00      	nop
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d101      	bne.n	800fd6a <HAL_UARTEx_DisableFifoMode+0x16>
 800fd66:	2302      	movs	r3, #2
 800fd68:	e027      	b.n	800fdba <HAL_UARTEx_DisableFifoMode+0x66>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2224      	movs	r2, #36	; 0x24
 800fd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f022 0201 	bic.w	r2, r2, #1
 800fd90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fd98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2220      	movs	r2, #32
 800fdac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr

0800fdc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b084      	sub	sp, #16
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d101      	bne.n	800fdde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdda:	2302      	movs	r3, #2
 800fddc:	e02d      	b.n	800fe3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2224      	movs	r2, #36	; 0x24
 800fdea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f022 0201 	bic.w	r2, r2, #1
 800fe04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	430a      	orrs	r2, r1
 800fe18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f850 	bl	800fec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2220      	movs	r2, #32
 800fe2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b084      	sub	sp, #16
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d101      	bne.n	800fe5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe56:	2302      	movs	r3, #2
 800fe58:	e02d      	b.n	800feb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2224      	movs	r2, #36	; 0x24
 800fe66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f022 0201 	bic.w	r2, r2, #1
 800fe80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	689b      	ldr	r3, [r3, #8]
 800fe88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	683a      	ldr	r2, [r7, #0]
 800fe92:	430a      	orrs	r2, r1
 800fe94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f812 	bl	800fec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2220      	movs	r2, #32
 800fea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
	...

0800fec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d108      	bne.n	800fee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fee0:	e031      	b.n	800ff46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fee2:	2310      	movs	r3, #16
 800fee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fee6:	2310      	movs	r3, #16
 800fee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	0e5b      	lsrs	r3, r3, #25
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	f003 0307 	and.w	r3, r3, #7
 800fef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	0f5b      	lsrs	r3, r3, #29
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	f003 0307 	and.w	r3, r3, #7
 800ff08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	7b3a      	ldrb	r2, [r7, #12]
 800ff0e:	4911      	ldr	r1, [pc, #68]	; (800ff54 <UARTEx_SetNbDataToProcess+0x94>)
 800ff10:	5c8a      	ldrb	r2, [r1, r2]
 800ff12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff16:	7b3a      	ldrb	r2, [r7, #12]
 800ff18:	490f      	ldr	r1, [pc, #60]	; (800ff58 <UARTEx_SetNbDataToProcess+0x98>)
 800ff1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	7b7a      	ldrb	r2, [r7, #13]
 800ff2c:	4909      	ldr	r1, [pc, #36]	; (800ff54 <UARTEx_SetNbDataToProcess+0x94>)
 800ff2e:	5c8a      	ldrb	r2, [r1, r2]
 800ff30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff34:	7b7a      	ldrb	r2, [r7, #13]
 800ff36:	4908      	ldr	r1, [pc, #32]	; (800ff58 <UARTEx_SetNbDataToProcess+0x98>)
 800ff38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff46:	bf00      	nop
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	080142e0 	.word	0x080142e0
 800ff58:	080142e8 	.word	0x080142e8

0800ff5c <__NVIC_SetPriority>:
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	4603      	mov	r3, r0
 800ff64:	6039      	str	r1, [r7, #0]
 800ff66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	db0a      	blt.n	800ff86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	490c      	ldr	r1, [pc, #48]	; (800ffa8 <__NVIC_SetPriority+0x4c>)
 800ff76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff7a:	0112      	lsls	r2, r2, #4
 800ff7c:	b2d2      	uxtb	r2, r2
 800ff7e:	440b      	add	r3, r1
 800ff80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ff84:	e00a      	b.n	800ff9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	4908      	ldr	r1, [pc, #32]	; (800ffac <__NVIC_SetPriority+0x50>)
 800ff8c:	88fb      	ldrh	r3, [r7, #6]
 800ff8e:	f003 030f 	and.w	r3, r3, #15
 800ff92:	3b04      	subs	r3, #4
 800ff94:	0112      	lsls	r2, r2, #4
 800ff96:	b2d2      	uxtb	r2, r2
 800ff98:	440b      	add	r3, r1
 800ff9a:	761a      	strb	r2, [r3, #24]
}
 800ff9c:	bf00      	nop
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	e000e100 	.word	0xe000e100
 800ffac:	e000ed00 	.word	0xe000ed00

0800ffb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ffb4:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <SysTick_Handler+0x1c>)
 800ffb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ffb8:	f002 f9a4 	bl	8012304 <xTaskGetSchedulerState>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d001      	beq.n	800ffc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ffc2:	f002 ffc1 	bl	8012f48 <xPortSysTickHandler>
  }
}
 800ffc6:	bf00      	nop
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	e000e010 	.word	0xe000e010

0800ffd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	f06f 0004 	mvn.w	r0, #4
 800ffda:	f7ff ffbf 	bl	800ff5c <__NVIC_SetPriority>
#endif
}
 800ffde:	bf00      	nop
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffea:	f3ef 8305 	mrs	r3, IPSR
 800ffee:	603b      	str	r3, [r7, #0]
  return(result);
 800fff0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fff6:	f06f 0305 	mvn.w	r3, #5
 800fffa:	607b      	str	r3, [r7, #4]
 800fffc:	e00c      	b.n	8010018 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fffe:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <osKernelInitialize+0x44>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d105      	bne.n	8010012 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010006:	4b08      	ldr	r3, [pc, #32]	; (8010028 <osKernelInitialize+0x44>)
 8010008:	2201      	movs	r2, #1
 801000a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801000c:	2300      	movs	r3, #0
 801000e:	607b      	str	r3, [r7, #4]
 8010010:	e002      	b.n	8010018 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010016:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010018:	687b      	ldr	r3, [r7, #4]
}
 801001a:	4618      	mov	r0, r3
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	24000bb0 	.word	0x24000bb0

0801002c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010032:	f3ef 8305 	mrs	r3, IPSR
 8010036:	603b      	str	r3, [r7, #0]
  return(result);
 8010038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <osKernelStart+0x1a>
    stat = osErrorISR;
 801003e:	f06f 0305 	mvn.w	r3, #5
 8010042:	607b      	str	r3, [r7, #4]
 8010044:	e010      	b.n	8010068 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010046:	4b0b      	ldr	r3, [pc, #44]	; (8010074 <osKernelStart+0x48>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d109      	bne.n	8010062 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801004e:	f7ff ffbf 	bl	800ffd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010052:	4b08      	ldr	r3, [pc, #32]	; (8010074 <osKernelStart+0x48>)
 8010054:	2202      	movs	r2, #2
 8010056:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010058:	f001 fc66 	bl	8011928 <vTaskStartScheduler>
      stat = osOK;
 801005c:	2300      	movs	r3, #0
 801005e:	607b      	str	r3, [r7, #4]
 8010060:	e002      	b.n	8010068 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010066:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010068:	687b      	ldr	r3, [r7, #4]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	24000bb0 	.word	0x24000bb0

08010078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010078:	b580      	push	{r7, lr}
 801007a:	b08e      	sub	sp, #56	; 0x38
 801007c:	af04      	add	r7, sp, #16
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010084:	2300      	movs	r3, #0
 8010086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010088:	f3ef 8305 	mrs	r3, IPSR
 801008c:	617b      	str	r3, [r7, #20]
  return(result);
 801008e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010090:	2b00      	cmp	r3, #0
 8010092:	d17e      	bne.n	8010192 <osThreadNew+0x11a>
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d07b      	beq.n	8010192 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801009a:	2380      	movs	r3, #128	; 0x80
 801009c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801009e:	2318      	movs	r3, #24
 80100a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80100a2:	2300      	movs	r3, #0
 80100a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80100a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d045      	beq.n	801013e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d002      	beq.n	80100c0 <osThreadNew+0x48>
        name = attr->name;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	699b      	ldr	r3, [r3, #24]
 80100cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d008      	beq.n	80100e6 <osThreadNew+0x6e>
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	2b38      	cmp	r3, #56	; 0x38
 80100d8:	d805      	bhi.n	80100e6 <osThreadNew+0x6e>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	f003 0301 	and.w	r3, r3, #1
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d001      	beq.n	80100ea <osThreadNew+0x72>
        return (NULL);
 80100e6:	2300      	movs	r3, #0
 80100e8:	e054      	b.n	8010194 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	695b      	ldr	r3, [r3, #20]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d003      	beq.n	80100fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	089b      	lsrs	r3, r3, #2
 80100f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00e      	beq.n	8010120 <osThreadNew+0xa8>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	2b5b      	cmp	r3, #91	; 0x5b
 8010108:	d90a      	bls.n	8010120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	695b      	ldr	r3, [r3, #20]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <osThreadNew+0xa8>
        mem = 1;
 801011a:	2301      	movs	r3, #1
 801011c:	61bb      	str	r3, [r7, #24]
 801011e:	e010      	b.n	8010142 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10c      	bne.n	8010142 <osThreadNew+0xca>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d108      	bne.n	8010142 <osThreadNew+0xca>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d104      	bne.n	8010142 <osThreadNew+0xca>
          mem = 0;
 8010138:	2300      	movs	r3, #0
 801013a:	61bb      	str	r3, [r7, #24]
 801013c:	e001      	b.n	8010142 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d110      	bne.n	801016a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010150:	9202      	str	r2, [sp, #8]
 8010152:	9301      	str	r3, [sp, #4]
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	6a3a      	ldr	r2, [r7, #32]
 801015c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f001 fa0c 	bl	801157c <xTaskCreateStatic>
 8010164:	4603      	mov	r3, r0
 8010166:	613b      	str	r3, [r7, #16]
 8010168:	e013      	b.n	8010192 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d110      	bne.n	8010192 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	b29a      	uxth	r2, r3
 8010174:	f107 0310 	add.w	r3, r7, #16
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	9300      	str	r3, [sp, #0]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f001 fa57 	bl	8011636 <xTaskCreate>
 8010188:	4603      	mov	r3, r0
 801018a:	2b01      	cmp	r3, #1
 801018c:	d001      	beq.n	8010192 <osThreadNew+0x11a>
            hTask = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010192:	693b      	ldr	r3, [r7, #16]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3728      	adds	r7, #40	; 0x28
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101a2:	f3ef 8305 	mrs	r3, IPSR
 80101a6:	603b      	str	r3, [r7, #0]
  return(result);
 80101a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d003      	beq.n	80101b6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80101ae:	f06f 0305 	mvn.w	r3, #5
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	e009      	b.n	80101ca <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80101b6:	2300      	movs	r3, #0
 80101b8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80101ba:	4b07      	ldr	r3, [pc, #28]	; (80101d8 <osThreadYield+0x3c>)
 80101bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c0:	601a      	str	r2, [r3, #0]
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80101ca:	687b      	ldr	r3, [r7, #4]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	e000ed04 	.word	0xe000ed04

080101dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101e4:	f3ef 8305 	mrs	r3, IPSR
 80101e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80101ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <osDelay+0x1c>
    stat = osErrorISR;
 80101f0:	f06f 0305 	mvn.w	r3, #5
 80101f4:	60fb      	str	r3, [r7, #12]
 80101f6:	e007      	b.n	8010208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f001 fb5c 	bl	80118c0 <vTaskDelay>
    }
  }

  return (stat);
 8010208:	68fb      	ldr	r3, [r7, #12]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <osEventFlagsSet>:
  }

  return ((osEventFlagsId_t)hEventGroup);
}

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010214:	b580      	push	{r7, lr}
 8010216:	b086      	sub	sp, #24
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d004      	beq.n	8010232 <osEventFlagsSet+0x1e>
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801022e:	2b00      	cmp	r3, #0
 8010230:	d003      	beq.n	801023a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010232:	f06f 0303 	mvn.w	r3, #3
 8010236:	617b      	str	r3, [r7, #20]
 8010238:	e028      	b.n	801028c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801023a:	f3ef 8305 	mrs	r3, IPSR
 801023e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010240:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010242:	2b00      	cmp	r3, #0
 8010244:	d01d      	beq.n	8010282 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010246:	2300      	movs	r3, #0
 8010248:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801024a:	f107 0308 	add.w	r3, r7, #8
 801024e:	461a      	mov	r2, r3
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	6938      	ldr	r0, [r7, #16]
 8010254:	f000 fb22 	bl	801089c <xEventGroupSetBitsFromISR>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d103      	bne.n	8010266 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801025e:	f06f 0302 	mvn.w	r3, #2
 8010262:	617b      	str	r3, [r7, #20]
 8010264:	e012      	b.n	801028c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00d      	beq.n	801028c <osEventFlagsSet+0x78>
 8010270:	4b09      	ldr	r3, [pc, #36]	; (8010298 <osEventFlagsSet+0x84>)
 8010272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010276:	601a      	str	r2, [r3, #0]
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	e004      	b.n	801028c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6938      	ldr	r0, [r7, #16]
 8010286:	f000 fa4f 	bl	8010728 <xEventGroupSetBits>
 801028a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801028c:	697b      	ldr	r3, [r7, #20]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3718      	adds	r7, #24
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	e000ed04 	.word	0xe000ed04

0801029c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801029c:	b580      	push	{r7, lr}
 801029e:	b08c      	sub	sp, #48	; 0x30
 80102a0:	af02      	add	r7, sp, #8
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	607a      	str	r2, [r7, #4]
 80102a8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d004      	beq.n	80102be <osEventFlagsWait+0x22>
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d003      	beq.n	80102c6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80102be:	f06f 0303 	mvn.w	r3, #3
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	e04b      	b.n	801035e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102c6:	f3ef 8305 	mrs	r3, IPSR
 80102ca:	617b      	str	r3, [r7, #20]
  return(result);
 80102cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80102d2:	f06f 0305 	mvn.w	r3, #5
 80102d6:	61fb      	str	r3, [r7, #28]
 80102d8:	e041      	b.n	801035e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80102e4:	2301      	movs	r3, #1
 80102e6:	627b      	str	r3, [r7, #36]	; 0x24
 80102e8:	e001      	b.n	80102ee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f003 0302 	and.w	r3, r3, #2
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80102f8:	2300      	movs	r3, #0
 80102fa:	623b      	str	r3, [r7, #32]
 80102fc:	e001      	b.n	8010302 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80102fe:	2301      	movs	r3, #1
 8010300:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	6a3a      	ldr	r2, [r7, #32]
 801030a:	68b9      	ldr	r1, [r7, #8]
 801030c:	69b8      	ldr	r0, [r7, #24]
 801030e:	f000 f93d 	bl	801058c <xEventGroupWaitBits>
 8010312:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	2b00      	cmp	r3, #0
 801031c:	d010      	beq.n	8010340 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	4013      	ands	r3, r2
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	429a      	cmp	r2, r3
 8010328:	d019      	beq.n	801035e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d003      	beq.n	8010338 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010330:	f06f 0301 	mvn.w	r3, #1
 8010334:	61fb      	str	r3, [r7, #28]
 8010336:	e012      	b.n	801035e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010338:	f06f 0302 	mvn.w	r3, #2
 801033c:	61fb      	str	r3, [r7, #28]
 801033e:	e00e      	b.n	801035e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	4013      	ands	r3, r2
 8010346:	2b00      	cmp	r3, #0
 8010348:	d109      	bne.n	801035e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d003      	beq.n	8010358 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8010350:	f06f 0301 	mvn.w	r3, #1
 8010354:	61fb      	str	r3, [r7, #28]
 8010356:	e002      	b.n	801035e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010358:	f06f 0302 	mvn.w	r3, #2
 801035c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801035e:	69fb      	ldr	r3, [r7, #28]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3728      	adds	r7, #40	; 0x28
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	4613      	mov	r3, r2
 8010376:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801037c:	2300      	movs	r3, #0
 801037e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010380:	f3ef 8305 	mrs	r3, IPSR
 8010384:	617b      	str	r3, [r7, #20]
  return(result);
 8010386:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010388:	2b00      	cmp	r3, #0
 801038a:	d028      	beq.n	80103de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d005      	beq.n	801039e <osMessageQueuePut+0x36>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <osMessageQueuePut+0x36>
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801039e:	f06f 0303 	mvn.w	r3, #3
 80103a2:	61fb      	str	r3, [r7, #28]
 80103a4:	e038      	b.n	8010418 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80103aa:	f107 0210 	add.w	r2, r7, #16
 80103ae:	2300      	movs	r3, #0
 80103b0:	68b9      	ldr	r1, [r7, #8]
 80103b2:	69b8      	ldr	r0, [r7, #24]
 80103b4:	f000 fd3c 	bl	8010e30 <xQueueGenericSendFromISR>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d003      	beq.n	80103c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80103be:	f06f 0302 	mvn.w	r3, #2
 80103c2:	61fb      	str	r3, [r7, #28]
 80103c4:	e028      	b.n	8010418 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d025      	beq.n	8010418 <osMessageQueuePut+0xb0>
 80103cc:	4b15      	ldr	r3, [pc, #84]	; (8010424 <osMessageQueuePut+0xbc>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	e01c      	b.n	8010418 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <osMessageQueuePut+0x82>
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d103      	bne.n	80103f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80103ea:	f06f 0303 	mvn.w	r3, #3
 80103ee:	61fb      	str	r3, [r7, #28]
 80103f0:	e012      	b.n	8010418 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80103f2:	2300      	movs	r3, #0
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	68b9      	ldr	r1, [r7, #8]
 80103f8:	69b8      	ldr	r0, [r7, #24]
 80103fa:	f000 fc1b 	bl	8010c34 <xQueueGenericSend>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b01      	cmp	r3, #1
 8010402:	d009      	beq.n	8010418 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801040a:	f06f 0301 	mvn.w	r3, #1
 801040e:	61fb      	str	r3, [r7, #28]
 8010410:	e002      	b.n	8010418 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010412:	f06f 0302 	mvn.w	r3, #2
 8010416:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010418:	69fb      	ldr	r3, [r7, #28]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3720      	adds	r7, #32
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	e000ed04 	.word	0xe000ed04

08010428 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801043a:	2300      	movs	r3, #0
 801043c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801043e:	f3ef 8305 	mrs	r3, IPSR
 8010442:	617b      	str	r3, [r7, #20]
  return(result);
 8010444:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010446:	2b00      	cmp	r3, #0
 8010448:	d028      	beq.n	801049c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d005      	beq.n	801045c <osMessageQueueGet+0x34>
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d002      	beq.n	801045c <osMessageQueueGet+0x34>
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d003      	beq.n	8010464 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801045c:	f06f 0303 	mvn.w	r3, #3
 8010460:	61fb      	str	r3, [r7, #28]
 8010462:	e037      	b.n	80104d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010464:	2300      	movs	r3, #0
 8010466:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010468:	f107 0310 	add.w	r3, r7, #16
 801046c:	461a      	mov	r2, r3
 801046e:	68b9      	ldr	r1, [r7, #8]
 8010470:	69b8      	ldr	r0, [r7, #24]
 8010472:	f000 fe59 	bl	8011128 <xQueueReceiveFromISR>
 8010476:	4603      	mov	r3, r0
 8010478:	2b01      	cmp	r3, #1
 801047a:	d003      	beq.n	8010484 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801047c:	f06f 0302 	mvn.w	r3, #2
 8010480:	61fb      	str	r3, [r7, #28]
 8010482:	e027      	b.n	80104d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d024      	beq.n	80104d4 <osMessageQueueGet+0xac>
 801048a:	4b15      	ldr	r3, [pc, #84]	; (80104e0 <osMessageQueueGet+0xb8>)
 801048c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	e01b      	b.n	80104d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d002      	beq.n	80104a8 <osMessageQueueGet+0x80>
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d103      	bne.n	80104b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80104a8:	f06f 0303 	mvn.w	r3, #3
 80104ac:	61fb      	str	r3, [r7, #28]
 80104ae:	e011      	b.n	80104d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	68b9      	ldr	r1, [r7, #8]
 80104b4:	69b8      	ldr	r0, [r7, #24]
 80104b6:	f000 fd57 	bl	8010f68 <xQueueReceive>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d009      	beq.n	80104d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d003      	beq.n	80104ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80104c6:	f06f 0301 	mvn.w	r3, #1
 80104ca:	61fb      	str	r3, [r7, #28]
 80104cc:	e002      	b.n	80104d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80104ce:	f06f 0302 	mvn.w	r3, #2
 80104d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80104d4:	69fb      	ldr	r3, [r7, #28]
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3720      	adds	r7, #32
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d102      	bne.n	80104fc <osMessageQueueGetCount+0x18>
    count = 0U;
 80104f6:	2300      	movs	r3, #0
 80104f8:	617b      	str	r3, [r7, #20]
 80104fa:	e00e      	b.n	801051a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104fc:	f3ef 8305 	mrs	r3, IPSR
 8010500:	60fb      	str	r3, [r7, #12]
  return(result);
 8010502:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010504:	2b00      	cmp	r3, #0
 8010506:	d004      	beq.n	8010512 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8010508:	6938      	ldr	r0, [r7, #16]
 801050a:	f000 feab 	bl	8011264 <uxQueueMessagesWaitingFromISR>
 801050e:	6178      	str	r0, [r7, #20]
 8010510:	e003      	b.n	801051a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8010512:	6938      	ldr	r0, [r7, #16]
 8010514:	f000 fe88 	bl	8011228 <uxQueueMessagesWaiting>
 8010518:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801051a:	697b      	ldr	r3, [r7, #20]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4a07      	ldr	r2, [pc, #28]	; (8010550 <vApplicationGetIdleTaskMemory+0x2c>)
 8010534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4a06      	ldr	r2, [pc, #24]	; (8010554 <vApplicationGetIdleTaskMemory+0x30>)
 801053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2280      	movs	r2, #128	; 0x80
 8010540:	601a      	str	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	3714      	adds	r7, #20
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	24000bb4 	.word	0x24000bb4
 8010554:	24000c10 	.word	0x24000c10

08010558 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	4a07      	ldr	r2, [pc, #28]	; (8010584 <vApplicationGetTimerTaskMemory+0x2c>)
 8010568:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	4a06      	ldr	r2, [pc, #24]	; (8010588 <vApplicationGetTimerTaskMemory+0x30>)
 801056e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010576:	601a      	str	r2, [r3, #0]
}
 8010578:	bf00      	nop
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	24000e10 	.word	0x24000e10
 8010588:	24000e6c 	.word	0x24000e6c

0801058c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b090      	sub	sp, #64	; 0x40
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80105a2:	2300      	movs	r3, #0
 80105a4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d10a      	bne.n	80105c2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80105ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b0:	f383 8811 	msr	BASEPRI, r3
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80105be:	bf00      	nop
 80105c0:	e7fe      	b.n	80105c0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00a      	beq.n	80105e2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	61fb      	str	r3, [r7, #28]
}
 80105de:	bf00      	nop
 80105e0:	e7fe      	b.n	80105e0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d10a      	bne.n	80105fe <xEventGroupWaitBits+0x72>
	__asm volatile
 80105e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ec:	f383 8811 	msr	BASEPRI, r3
 80105f0:	f3bf 8f6f 	isb	sy
 80105f4:	f3bf 8f4f 	dsb	sy
 80105f8:	61bb      	str	r3, [r7, #24]
}
 80105fa:	bf00      	nop
 80105fc:	e7fe      	b.n	80105fc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105fe:	f001 fe81 	bl	8012304 <xTaskGetSchedulerState>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d102      	bne.n	801060e <xEventGroupWaitBits+0x82>
 8010608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <xEventGroupWaitBits+0x86>
 801060e:	2301      	movs	r3, #1
 8010610:	e000      	b.n	8010614 <xEventGroupWaitBits+0x88>
 8010612:	2300      	movs	r3, #0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10a      	bne.n	801062e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061c:	f383 8811 	msr	BASEPRI, r3
 8010620:	f3bf 8f6f 	isb	sy
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	617b      	str	r3, [r7, #20]
}
 801062a:	bf00      	nop
 801062c:	e7fe      	b.n	801062c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801062e:	f001 f9e1 	bl	80119f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8010632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	68b9      	ldr	r1, [r7, #8]
 801063c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801063e:	f000 f90b 	bl	8010858 <prvTestWaitCondition>
 8010642:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00e      	beq.n	8010668 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801064e:	2300      	movs	r3, #0
 8010650:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d028      	beq.n	80106aa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	43db      	mvns	r3, r3
 8010660:	401a      	ands	r2, r3
 8010662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	e020      	b.n	80106aa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801066a:	2b00      	cmp	r3, #0
 801066c:	d104      	bne.n	8010678 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010672:	2301      	movs	r3, #1
 8010674:	633b      	str	r3, [r7, #48]	; 0x30
 8010676:	e018      	b.n	80106aa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d003      	beq.n	8010686 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010684:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010692:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010696:	1d18      	adds	r0, r3, #4
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069c:	4313      	orrs	r3, r2
 801069e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106a0:	4619      	mov	r1, r3
 80106a2:	f001 fba7 	bl	8011df4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80106aa:	f001 f9b1 	bl	8011a10 <xTaskResumeAll>
 80106ae:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80106b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d031      	beq.n	801071a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d107      	bne.n	80106cc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80106bc:	4b19      	ldr	r3, [pc, #100]	; (8010724 <xEventGroupWaitBits+0x198>)
 80106be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80106cc:	f001 fea6 	bl	801241c <uxTaskResetEventItemValue>
 80106d0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80106d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d11a      	bne.n	8010712 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80106dc:	f002 fba2 	bl	8012e24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80106e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	68b9      	ldr	r1, [r7, #8]
 80106ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106ec:	f000 f8b4 	bl	8010858 <prvTestWaitCondition>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d006      	beq.n	801070a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	43db      	mvns	r3, r3
 8010704:	401a      	ands	r2, r3
 8010706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010708:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801070a:	2301      	movs	r3, #1
 801070c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801070e:	f002 fbb9 	bl	8012e84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010718:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801071c:	4618      	mov	r0, r3
 801071e:	3740      	adds	r7, #64	; 0x40
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	e000ed04 	.word	0xe000ed04

08010728 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08e      	sub	sp, #56	; 0x38
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010732:	2300      	movs	r3, #0
 8010734:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801073a:	2300      	movs	r3, #0
 801073c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10a      	bne.n	801075a <xEventGroupSetBits+0x32>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	613b      	str	r3, [r7, #16]
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00a      	beq.n	801077a <xEventGroupSetBits+0x52>
	__asm volatile
 8010764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	60fb      	str	r3, [r7, #12]
}
 8010776:	bf00      	nop
 8010778:	e7fe      	b.n	8010778 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	3304      	adds	r3, #4
 801077e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	3308      	adds	r3, #8
 8010784:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010786:	f001 f935 	bl	80119f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	431a      	orrs	r2, r3
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801079c:	e03c      	b.n	8010818 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801079e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80107aa:	2300      	movs	r3, #0
 80107ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80107b4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80107bc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d108      	bne.n	80107da <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80107c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	4013      	ands	r3, r2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00b      	beq.n	80107ec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80107d4:	2301      	movs	r3, #1
 80107d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107d8:	e008      	b.n	80107ec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	4013      	ands	r3, r2
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d101      	bne.n	80107ec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80107e8:	2301      	movs	r3, #1
 80107ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80107ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d010      	beq.n	8010814 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d003      	beq.n	8010804 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80107fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	4313      	orrs	r3, r2
 8010802:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801080c:	4619      	mov	r1, r3
 801080e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010810:	f001 fbbc 	bl	8011f8c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	429a      	cmp	r2, r3
 801081e:	d1be      	bne.n	801079e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	43db      	mvns	r3, r3
 8010828:	401a      	ands	r2, r3
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801082e:	f001 f8ef 	bl	8011a10 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	681b      	ldr	r3, [r3, #0]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3738      	adds	r7, #56	; 0x38
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b082      	sub	sp, #8
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff ff6c 	bl	8010728 <xEventGroupSetBits>
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010858:	b480      	push	{r7}
 801085a:	b087      	sub	sp, #28
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010864:	2300      	movs	r3, #0
 8010866:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d107      	bne.n	801087e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801086e:	68fa      	ldr	r2, [r7, #12]
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	4013      	ands	r3, r2
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010878:	2301      	movs	r3, #1
 801087a:	617b      	str	r3, [r7, #20]
 801087c:	e007      	b.n	801088e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	4013      	ands	r3, r2
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	429a      	cmp	r2, r3
 8010888:	d101      	bne.n	801088e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801088a:	2301      	movs	r3, #1
 801088c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801088e:	697b      	ldr	r3, [r7, #20]
}
 8010890:	4618      	mov	r0, r3
 8010892:	371c      	adds	r7, #28
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801089c:	b580      	push	{r7, lr}
 801089e:	b086      	sub	sp, #24
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	68f9      	ldr	r1, [r7, #12]
 80108ae:	4804      	ldr	r0, [pc, #16]	; (80108c0 <xEventGroupSetBitsFromISR+0x24>)
 80108b0:	f002 f96e 	bl	8012b90 <xTimerPendFunctionCallFromISR>
 80108b4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80108b6:	697b      	ldr	r3, [r7, #20]
	}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3718      	adds	r7, #24
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	0801083f 	.word	0x0801083f

080108c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f103 0208 	add.w	r2, r3, #8
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f103 0208 	add.w	r2, r3, #8
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f103 0208 	add.w	r2, r3, #8
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80108f8:	bf00      	nop
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010912:	bf00      	nop
 8010914:	370c      	adds	r7, #12
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr

0801091e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801091e:	b480      	push	{r7}
 8010920:	b085      	sub	sp, #20
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
 8010926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	68fa      	ldr	r2, [r7, #12]
 8010932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	689a      	ldr	r2, [r3, #8]
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
}
 801095a:	bf00      	nop
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr

08010966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010966:	b480      	push	{r7}
 8010968:	b085      	sub	sp, #20
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801097c:	d103      	bne.n	8010986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	e00c      	b.n	80109a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3308      	adds	r3, #8
 801098a:	60fb      	str	r3, [r7, #12]
 801098c:	e002      	b.n	8010994 <vListInsert+0x2e>
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	60fb      	str	r3, [r7, #12]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	429a      	cmp	r2, r3
 801099e:	d2f6      	bcs.n	801098e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	1c5a      	adds	r2, r3, #1
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	601a      	str	r2, [r3, #0]
}
 80109cc:	bf00      	nop
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	691b      	ldr	r3, [r3, #16]
 80109e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	6892      	ldr	r2, [r2, #8]
 80109ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	6852      	ldr	r2, [r2, #4]
 80109f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d103      	bne.n	8010a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	689a      	ldr	r2, [r3, #8]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	1e5a      	subs	r2, r3, #1
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3714      	adds	r7, #20
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d10a      	bne.n	8010a56 <xQueueGenericReset+0x2a>
	__asm volatile
 8010a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a44:	f383 8811 	msr	BASEPRI, r3
 8010a48:	f3bf 8f6f 	isb	sy
 8010a4c:	f3bf 8f4f 	dsb	sy
 8010a50:	60bb      	str	r3, [r7, #8]
}
 8010a52:	bf00      	nop
 8010a54:	e7fe      	b.n	8010a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010a56:	f002 f9e5 	bl	8012e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a62:	68f9      	ldr	r1, [r7, #12]
 8010a64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a66:	fb01 f303 	mul.w	r3, r1, r3
 8010a6a:	441a      	add	r2, r3
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2200      	movs	r2, #0
 8010a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a86:	3b01      	subs	r3, #1
 8010a88:	68f9      	ldr	r1, [r7, #12]
 8010a8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a8c:	fb01 f303 	mul.w	r3, r1, r3
 8010a90:	441a      	add	r2, r3
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	22ff      	movs	r2, #255	; 0xff
 8010a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	22ff      	movs	r2, #255	; 0xff
 8010aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d114      	bne.n	8010ad6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d01a      	beq.n	8010aea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	3310      	adds	r3, #16
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f001 fa03 	bl	8011ec4 <xTaskRemoveFromEventList>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d012      	beq.n	8010aea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010ac4:	4b0c      	ldr	r3, [pc, #48]	; (8010af8 <xQueueGenericReset+0xcc>)
 8010ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010aca:	601a      	str	r2, [r3, #0]
 8010acc:	f3bf 8f4f 	dsb	sy
 8010ad0:	f3bf 8f6f 	isb	sy
 8010ad4:	e009      	b.n	8010aea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3310      	adds	r3, #16
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff fef2 	bl	80108c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	3324      	adds	r3, #36	; 0x24
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff feed 	bl	80108c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010aea:	f002 f9cb 	bl	8012e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010aee:	2301      	movs	r3, #1
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	e000ed04 	.word	0xe000ed04

08010afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b08e      	sub	sp, #56	; 0x38
 8010b00:	af02      	add	r7, sp, #8
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
 8010b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d10a      	bne.n	8010b26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010b22:	bf00      	nop
 8010b24:	e7fe      	b.n	8010b24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d10a      	bne.n	8010b42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b3e:	bf00      	nop
 8010b40:	e7fe      	b.n	8010b40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <xQueueGenericCreateStatic+0x52>
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <xQueueGenericCreateStatic+0x56>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e000      	b.n	8010b54 <xQueueGenericCreateStatic+0x58>
 8010b52:	2300      	movs	r3, #0
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d10a      	bne.n	8010b6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5c:	f383 8811 	msr	BASEPRI, r3
 8010b60:	f3bf 8f6f 	isb	sy
 8010b64:	f3bf 8f4f 	dsb	sy
 8010b68:	623b      	str	r3, [r7, #32]
}
 8010b6a:	bf00      	nop
 8010b6c:	e7fe      	b.n	8010b6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d102      	bne.n	8010b7a <xQueueGenericCreateStatic+0x7e>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d101      	bne.n	8010b7e <xQueueGenericCreateStatic+0x82>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e000      	b.n	8010b80 <xQueueGenericCreateStatic+0x84>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d10a      	bne.n	8010b9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b88:	f383 8811 	msr	BASEPRI, r3
 8010b8c:	f3bf 8f6f 	isb	sy
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	61fb      	str	r3, [r7, #28]
}
 8010b96:	bf00      	nop
 8010b98:	e7fe      	b.n	8010b98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b9a:	2350      	movs	r3, #80	; 0x50
 8010b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b50      	cmp	r3, #80	; 0x50
 8010ba2:	d00a      	beq.n	8010bba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	61bb      	str	r3, [r7, #24]
}
 8010bb6:	bf00      	nop
 8010bb8:	e7fe      	b.n	8010bb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010bba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00d      	beq.n	8010be2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010bce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd4:	9300      	str	r3, [sp, #0]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	68b9      	ldr	r1, [r7, #8]
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f000 f805 	bl	8010bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3730      	adds	r7, #48	; 0x30
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
 8010bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d103      	bne.n	8010c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	69ba      	ldr	r2, [r7, #24]
 8010c04:	601a      	str	r2, [r3, #0]
 8010c06:	e002      	b.n	8010c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	68ba      	ldr	r2, [r7, #8]
 8010c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c1a:	2101      	movs	r1, #1
 8010c1c:	69b8      	ldr	r0, [r7, #24]
 8010c1e:	f7ff ff05 	bl	8010a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	78fa      	ldrb	r2, [r7, #3]
 8010c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c2a:	bf00      	nop
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
	...

08010c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08e      	sub	sp, #56	; 0x38
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c42:	2300      	movs	r3, #0
 8010c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <xQueueGenericSend+0x32>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d103      	bne.n	8010c74 <xQueueGenericSend+0x40>
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <xQueueGenericSend+0x44>
 8010c74:	2301      	movs	r3, #1
 8010c76:	e000      	b.n	8010c7a <xQueueGenericSend+0x46>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10a      	bne.n	8010c94 <xQueueGenericSend+0x60>
	__asm volatile
 8010c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c82:	f383 8811 	msr	BASEPRI, r3
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	f3bf 8f4f 	dsb	sy
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010c90:	bf00      	nop
 8010c92:	e7fe      	b.n	8010c92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	2b02      	cmp	r3, #2
 8010c98:	d103      	bne.n	8010ca2 <xQueueGenericSend+0x6e>
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d101      	bne.n	8010ca6 <xQueueGenericSend+0x72>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e000      	b.n	8010ca8 <xQueueGenericSend+0x74>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10a      	bne.n	8010cc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8010cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb0:	f383 8811 	msr	BASEPRI, r3
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	f3bf 8f4f 	dsb	sy
 8010cbc:	623b      	str	r3, [r7, #32]
}
 8010cbe:	bf00      	nop
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cc2:	f001 fb1f 	bl	8012304 <xTaskGetSchedulerState>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <xQueueGenericSend+0x9e>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d101      	bne.n	8010cd6 <xQueueGenericSend+0xa2>
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e000      	b.n	8010cd8 <xQueueGenericSend+0xa4>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d10a      	bne.n	8010cf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8010cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce0:	f383 8811 	msr	BASEPRI, r3
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	61fb      	str	r3, [r7, #28]
}
 8010cee:	bf00      	nop
 8010cf0:	e7fe      	b.n	8010cf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cf2:	f002 f897 	bl	8012e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d302      	bcc.n	8010d08 <xQueueGenericSend+0xd4>
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2b02      	cmp	r3, #2
 8010d06:	d129      	bne.n	8010d5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d08:	683a      	ldr	r2, [r7, #0]
 8010d0a:	68b9      	ldr	r1, [r7, #8]
 8010d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d0e:	f000 fac7 	bl	80112a0 <prvCopyDataToQueue>
 8010d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d010      	beq.n	8010d3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1e:	3324      	adds	r3, #36	; 0x24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f001 f8cf 	bl	8011ec4 <xTaskRemoveFromEventList>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d013      	beq.n	8010d54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d2c:	4b3f      	ldr	r3, [pc, #252]	; (8010e2c <xQueueGenericSend+0x1f8>)
 8010d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d32:	601a      	str	r2, [r3, #0]
 8010d34:	f3bf 8f4f 	dsb	sy
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	e00a      	b.n	8010d54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d007      	beq.n	8010d54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d44:	4b39      	ldr	r3, [pc, #228]	; (8010e2c <xQueueGenericSend+0x1f8>)
 8010d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d4a:	601a      	str	r2, [r3, #0]
 8010d4c:	f3bf 8f4f 	dsb	sy
 8010d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d54:	f002 f896 	bl	8012e84 <vPortExitCritical>
				return pdPASS;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e063      	b.n	8010e24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d103      	bne.n	8010d6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d62:	f002 f88f 	bl	8012e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	e05c      	b.n	8010e24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d106      	bne.n	8010d7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d70:	f107 0314 	add.w	r3, r7, #20
 8010d74:	4618      	mov	r0, r3
 8010d76:	f001 f96b 	bl	8012050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d7e:	f002 f881 	bl	8012e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d82:	f000 fe37 	bl	80119f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d86:	f002 f84d 	bl	8012e24 <vPortEnterCritical>
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d90:	b25b      	sxtb	r3, r3
 8010d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d96:	d103      	bne.n	8010da0 <xQueueGenericSend+0x16c>
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010da6:	b25b      	sxtb	r3, r3
 8010da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010dac:	d103      	bne.n	8010db6 <xQueueGenericSend+0x182>
 8010dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010db6:	f002 f865 	bl	8012e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010dba:	1d3a      	adds	r2, r7, #4
 8010dbc:	f107 0314 	add.w	r3, r7, #20
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f001 f95a 	bl	801207c <xTaskCheckForTimeOut>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d124      	bne.n	8010e18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd0:	f000 fb5e 	bl	8011490 <prvIsQueueFull>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d018      	beq.n	8010e0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	3310      	adds	r3, #16
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	4611      	mov	r1, r2
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 ffe2 	bl	8011dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dea:	f000 fae9 	bl	80113c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010dee:	f000 fe0f 	bl	8011a10 <xTaskResumeAll>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f47f af7c 	bne.w	8010cf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010dfa:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <xQueueGenericSend+0x1f8>)
 8010dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e00:	601a      	str	r2, [r3, #0]
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	e772      	b.n	8010cf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e0e:	f000 fad7 	bl	80113c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e12:	f000 fdfd 	bl	8011a10 <xTaskResumeAll>
 8010e16:	e76c      	b.n	8010cf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e1a:	f000 fad1 	bl	80113c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e1e:	f000 fdf7 	bl	8011a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3738      	adds	r7, #56	; 0x38
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	e000ed04 	.word	0xe000ed04

08010e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b090      	sub	sp, #64	; 0x40
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
 8010e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10a      	bne.n	8010e5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010e5a:	bf00      	nop
 8010e5c:	e7fe      	b.n	8010e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d103      	bne.n	8010e6c <xQueueGenericSendFromISR+0x3c>
 8010e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d101      	bne.n	8010e70 <xQueueGenericSendFromISR+0x40>
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e000      	b.n	8010e72 <xQueueGenericSendFromISR+0x42>
 8010e70:	2300      	movs	r3, #0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10a      	bne.n	8010e8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7a:	f383 8811 	msr	BASEPRI, r3
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f3bf 8f4f 	dsb	sy
 8010e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010e88:	bf00      	nop
 8010e8a:	e7fe      	b.n	8010e8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	2b02      	cmp	r3, #2
 8010e90:	d103      	bne.n	8010e9a <xQueueGenericSendFromISR+0x6a>
 8010e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e96:	2b01      	cmp	r3, #1
 8010e98:	d101      	bne.n	8010e9e <xQueueGenericSendFromISR+0x6e>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e000      	b.n	8010ea0 <xQueueGenericSendFromISR+0x70>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d10a      	bne.n	8010eba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea8:	f383 8811 	msr	BASEPRI, r3
 8010eac:	f3bf 8f6f 	isb	sy
 8010eb0:	f3bf 8f4f 	dsb	sy
 8010eb4:	623b      	str	r3, [r7, #32]
}
 8010eb6:	bf00      	nop
 8010eb8:	e7fe      	b.n	8010eb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010eba:	f002 f895 	bl	8012fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8010ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec6:	f383 8811 	msr	BASEPRI, r3
 8010eca:	f3bf 8f6f 	isb	sy
 8010ece:	f3bf 8f4f 	dsb	sy
 8010ed2:	61fa      	str	r2, [r7, #28]
 8010ed4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ed6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ed8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d302      	bcc.n	8010eec <xQueueGenericSendFromISR+0xbc>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b02      	cmp	r3, #2
 8010eea:	d12f      	bne.n	8010f4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f02:	f000 f9cd 	bl	80112a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f0e:	d112      	bne.n	8010f36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d016      	beq.n	8010f46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1a:	3324      	adds	r3, #36	; 0x24
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f000 ffd1 	bl	8011ec4 <xTaskRemoveFromEventList>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d00e      	beq.n	8010f46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00b      	beq.n	8010f46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	e007      	b.n	8010f46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	b25a      	sxtb	r2, r3
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010f46:	2301      	movs	r3, #1
 8010f48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010f4a:	e001      	b.n	8010f50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010f5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3740      	adds	r7, #64	; 0x40
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
	...

08010f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b08c      	sub	sp, #48	; 0x30
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f74:	2300      	movs	r3, #0
 8010f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10a      	bne.n	8010f98 <xQueueReceive+0x30>
	__asm volatile
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	623b      	str	r3, [r7, #32]
}
 8010f94:	bf00      	nop
 8010f96:	e7fe      	b.n	8010f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d103      	bne.n	8010fa6 <xQueueReceive+0x3e>
 8010f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d101      	bne.n	8010faa <xQueueReceive+0x42>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e000      	b.n	8010fac <xQueueReceive+0x44>
 8010faa:	2300      	movs	r3, #0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d10a      	bne.n	8010fc6 <xQueueReceive+0x5e>
	__asm volatile
 8010fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb4:	f383 8811 	msr	BASEPRI, r3
 8010fb8:	f3bf 8f6f 	isb	sy
 8010fbc:	f3bf 8f4f 	dsb	sy
 8010fc0:	61fb      	str	r3, [r7, #28]
}
 8010fc2:	bf00      	nop
 8010fc4:	e7fe      	b.n	8010fc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fc6:	f001 f99d 	bl	8012304 <xTaskGetSchedulerState>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d102      	bne.n	8010fd6 <xQueueReceive+0x6e>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <xQueueReceive+0x72>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e000      	b.n	8010fdc <xQueueReceive+0x74>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d10a      	bne.n	8010ff6 <xQueueReceive+0x8e>
	__asm volatile
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	61bb      	str	r3, [r7, #24]
}
 8010ff2:	bf00      	nop
 8010ff4:	e7fe      	b.n	8010ff4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ff6:	f001 ff15 	bl	8012e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ffe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	2b00      	cmp	r3, #0
 8011004:	d01f      	beq.n	8011046 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011006:	68b9      	ldr	r1, [r7, #8]
 8011008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801100a:	f000 f9b3 	bl	8011374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011010:	1e5a      	subs	r2, r3, #1
 8011012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	691b      	ldr	r3, [r3, #16]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00f      	beq.n	801103e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011020:	3310      	adds	r3, #16
 8011022:	4618      	mov	r0, r3
 8011024:	f000 ff4e 	bl	8011ec4 <xTaskRemoveFromEventList>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d007      	beq.n	801103e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801102e:	4b3d      	ldr	r3, [pc, #244]	; (8011124 <xQueueReceive+0x1bc>)
 8011030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801103e:	f001 ff21 	bl	8012e84 <vPortExitCritical>
				return pdPASS;
 8011042:	2301      	movs	r3, #1
 8011044:	e069      	b.n	801111a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d103      	bne.n	8011054 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801104c:	f001 ff1a 	bl	8012e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011050:	2300      	movs	r3, #0
 8011052:	e062      	b.n	801111a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801105a:	f107 0310 	add.w	r3, r7, #16
 801105e:	4618      	mov	r0, r3
 8011060:	f000 fff6 	bl	8012050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011064:	2301      	movs	r3, #1
 8011066:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011068:	f001 ff0c 	bl	8012e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801106c:	f000 fcc2 	bl	80119f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011070:	f001 fed8 	bl	8012e24 <vPortEnterCritical>
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801107a:	b25b      	sxtb	r3, r3
 801107c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011080:	d103      	bne.n	801108a <xQueueReceive+0x122>
 8011082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011090:	b25b      	sxtb	r3, r3
 8011092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011096:	d103      	bne.n	80110a0 <xQueueReceive+0x138>
 8011098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109a:	2200      	movs	r2, #0
 801109c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110a0:	f001 fef0 	bl	8012e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110a4:	1d3a      	adds	r2, r7, #4
 80110a6:	f107 0310 	add.w	r3, r7, #16
 80110aa:	4611      	mov	r1, r2
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 ffe5 	bl	801207c <xTaskCheckForTimeOut>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d123      	bne.n	8011100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ba:	f000 f9d3 	bl	8011464 <prvIsQueueEmpty>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d017      	beq.n	80110f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	3324      	adds	r3, #36	; 0x24
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	4611      	mov	r1, r2
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 fe6d 	bl	8011dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110d4:	f000 f974 	bl	80113c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110d8:	f000 fc9a 	bl	8011a10 <xTaskResumeAll>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d189      	bne.n	8010ff6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80110e2:	4b10      	ldr	r3, [pc, #64]	; (8011124 <xQueueReceive+0x1bc>)
 80110e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110e8:	601a      	str	r2, [r3, #0]
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	f3bf 8f6f 	isb	sy
 80110f2:	e780      	b.n	8010ff6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80110f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110f6:	f000 f963 	bl	80113c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110fa:	f000 fc89 	bl	8011a10 <xTaskResumeAll>
 80110fe:	e77a      	b.n	8010ff6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011102:	f000 f95d 	bl	80113c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011106:	f000 fc83 	bl	8011a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801110a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801110c:	f000 f9aa 	bl	8011464 <prvIsQueueEmpty>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	f43f af6f 	beq.w	8010ff6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801111a:	4618      	mov	r0, r3
 801111c:	3730      	adds	r7, #48	; 0x30
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	e000ed04 	.word	0xe000ed04

08011128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08e      	sub	sp, #56	; 0x38
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10a      	bne.n	8011154 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	623b      	str	r3, [r7, #32]
}
 8011150:	bf00      	nop
 8011152:	e7fe      	b.n	8011152 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d103      	bne.n	8011162 <xQueueReceiveFromISR+0x3a>
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <xQueueReceiveFromISR+0x3e>
 8011162:	2301      	movs	r3, #1
 8011164:	e000      	b.n	8011168 <xQueueReceiveFromISR+0x40>
 8011166:	2300      	movs	r3, #0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10a      	bne.n	8011182 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011170:	f383 8811 	msr	BASEPRI, r3
 8011174:	f3bf 8f6f 	isb	sy
 8011178:	f3bf 8f4f 	dsb	sy
 801117c:	61fb      	str	r3, [r7, #28]
}
 801117e:	bf00      	nop
 8011180:	e7fe      	b.n	8011180 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011182:	f001 ff31 	bl	8012fe8 <vPortValidateInterruptPriority>
	__asm volatile
 8011186:	f3ef 8211 	mrs	r2, BASEPRI
 801118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	61ba      	str	r2, [r7, #24]
 801119c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801119e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d02f      	beq.n	801120e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111b8:	68b9      	ldr	r1, [r7, #8]
 80111ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111bc:	f000 f8da 	bl	8011374 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	1e5a      	subs	r2, r3, #1
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111d0:	d112      	bne.n	80111f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	691b      	ldr	r3, [r3, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d016      	beq.n	8011208 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111dc:	3310      	adds	r3, #16
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 fe70 	bl	8011ec4 <xTaskRemoveFromEventList>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00b      	beq.n	8011208 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2201      	movs	r2, #1
 80111f4:	601a      	str	r2, [r3, #0]
 80111f6:	e007      	b.n	8011208 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111fc:	3301      	adds	r3, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	b25a      	sxtb	r2, r3
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011208:	2301      	movs	r3, #1
 801120a:	637b      	str	r3, [r7, #52]	; 0x34
 801120c:	e001      	b.n	8011212 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801120e:	2300      	movs	r3, #0
 8011210:	637b      	str	r3, [r7, #52]	; 0x34
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	f383 8811 	msr	BASEPRI, r3
}
 801121c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011220:	4618      	mov	r0, r3
 8011222:	3738      	adds	r7, #56	; 0x38
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d10a      	bne.n	801124c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8011236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	60bb      	str	r3, [r7, #8]
}
 8011248:	bf00      	nop
 801124a:	e7fe      	b.n	801124a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801124c:	f001 fdea 	bl	8012e24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011254:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011256:	f001 fe15 	bl	8012e84 <vPortExitCritical>

	return uxReturn;
 801125a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011264:	b480      	push	{r7}
 8011266:	b087      	sub	sp, #28
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d10a      	bne.n	801128c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8011276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127a:	f383 8811 	msr	BASEPRI, r3
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f3bf 8f4f 	dsb	sy
 8011286:	60fb      	str	r3, [r7, #12]
}
 8011288:	bf00      	nop
 801128a:	e7fe      	b.n	801128a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011290:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8011292:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011294:	4618      	mov	r0, r3
 8011296:	371c      	adds	r7, #28
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112ac:	2300      	movs	r3, #0
 80112ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d10d      	bne.n	80112da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d14d      	bne.n	8011362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f001 f838 	bl	8012340 <xTaskPriorityDisinherit>
 80112d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2200      	movs	r2, #0
 80112d6:	609a      	str	r2, [r3, #8]
 80112d8:	e043      	b.n	8011362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d119      	bne.n	8011314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	6858      	ldr	r0, [r3, #4]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e8:	461a      	mov	r2, r3
 80112ea:	68b9      	ldr	r1, [r7, #8]
 80112ec:	f002 f8e0 	bl	80134b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	685a      	ldr	r2, [r3, #4]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f8:	441a      	add	r2, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	689b      	ldr	r3, [r3, #8]
 8011306:	429a      	cmp	r2, r3
 8011308:	d32b      	bcc.n	8011362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	605a      	str	r2, [r3, #4]
 8011312:	e026      	b.n	8011362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	68d8      	ldr	r0, [r3, #12]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131c:	461a      	mov	r2, r3
 801131e:	68b9      	ldr	r1, [r7, #8]
 8011320:	f002 f8c6 	bl	80134b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	68da      	ldr	r2, [r3, #12]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132c:	425b      	negs	r3, r3
 801132e:	441a      	add	r2, r3
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	68da      	ldr	r2, [r3, #12]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	429a      	cmp	r2, r3
 801133e:	d207      	bcs.n	8011350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	689a      	ldr	r2, [r3, #8]
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011348:	425b      	negs	r3, r3
 801134a:	441a      	add	r2, r3
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d105      	bne.n	8011362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	3b01      	subs	r3, #1
 8011360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	1c5a      	adds	r2, r3, #1
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801136a:	697b      	ldr	r3, [r7, #20]
}
 801136c:	4618      	mov	r0, r3
 801136e:	3718      	adds	r7, #24
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011382:	2b00      	cmp	r3, #0
 8011384:	d018      	beq.n	80113b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	68da      	ldr	r2, [r3, #12]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801138e:	441a      	add	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	68da      	ldr	r2, [r3, #12]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	429a      	cmp	r2, r3
 801139e:	d303      	bcc.n	80113a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	68d9      	ldr	r1, [r3, #12]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b0:	461a      	mov	r2, r3
 80113b2:	6838      	ldr	r0, [r7, #0]
 80113b4:	f002 f87c 	bl	80134b0 <memcpy>
	}
}
 80113b8:	bf00      	nop
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113c8:	f001 fd2c 	bl	8012e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113d4:	e011      	b.n	80113fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d012      	beq.n	8011404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	3324      	adds	r3, #36	; 0x24
 80113e2:	4618      	mov	r0, r3
 80113e4:	f000 fd6e 	bl	8011ec4 <xTaskRemoveFromEventList>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80113ee:	f000 fea7 	bl	8012140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80113f2:	7bfb      	ldrb	r3, [r7, #15]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	dce9      	bgt.n	80113d6 <prvUnlockQueue+0x16>
 8011402:	e000      	b.n	8011406 <prvUnlockQueue+0x46>
					break;
 8011404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	22ff      	movs	r2, #255	; 0xff
 801140a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801140e:	f001 fd39 	bl	8012e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011412:	f001 fd07 	bl	8012e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801141c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801141e:	e011      	b.n	8011444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	691b      	ldr	r3, [r3, #16]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d012      	beq.n	801144e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3310      	adds	r3, #16
 801142c:	4618      	mov	r0, r3
 801142e:	f000 fd49 	bl	8011ec4 <xTaskRemoveFromEventList>
 8011432:	4603      	mov	r3, r0
 8011434:	2b00      	cmp	r3, #0
 8011436:	d001      	beq.n	801143c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011438:	f000 fe82 	bl	8012140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	3b01      	subs	r3, #1
 8011440:	b2db      	uxtb	r3, r3
 8011442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011448:	2b00      	cmp	r3, #0
 801144a:	dce9      	bgt.n	8011420 <prvUnlockQueue+0x60>
 801144c:	e000      	b.n	8011450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801144e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	22ff      	movs	r2, #255	; 0xff
 8011454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011458:	f001 fd14 	bl	8012e84 <vPortExitCritical>
}
 801145c:	bf00      	nop
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801146c:	f001 fcda 	bl	8012e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011474:	2b00      	cmp	r3, #0
 8011476:	d102      	bne.n	801147e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011478:	2301      	movs	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	e001      	b.n	8011482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801147e:	2300      	movs	r3, #0
 8011480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011482:	f001 fcff 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 8011486:	68fb      	ldr	r3, [r7, #12]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011498:	f001 fcc4 	bl	8012e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d102      	bne.n	80114ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114a8:	2301      	movs	r3, #1
 80114aa:	60fb      	str	r3, [r7, #12]
 80114ac:	e001      	b.n	80114b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114ae:	2300      	movs	r3, #0
 80114b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114b2:	f001 fce7 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 80114b6:	68fb      	ldr	r3, [r7, #12]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3710      	adds	r7, #16
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114ca:	2300      	movs	r3, #0
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	e014      	b.n	80114fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80114d0:	4a0f      	ldr	r2, [pc, #60]	; (8011510 <vQueueAddToRegistry+0x50>)
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10b      	bne.n	80114f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80114dc:	490c      	ldr	r1, [pc, #48]	; (8011510 <vQueueAddToRegistry+0x50>)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	683a      	ldr	r2, [r7, #0]
 80114e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80114e6:	4a0a      	ldr	r2, [pc, #40]	; (8011510 <vQueueAddToRegistry+0x50>)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	00db      	lsls	r3, r3, #3
 80114ec:	4413      	add	r3, r2
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80114f2:	e006      	b.n	8011502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3301      	adds	r3, #1
 80114f8:	60fb      	str	r3, [r7, #12]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2b07      	cmp	r3, #7
 80114fe:	d9e7      	bls.n	80114d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011500:	bf00      	nop
 8011502:	bf00      	nop
 8011504:	3714      	adds	r7, #20
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	2400126c 	.word	0x2400126c

08011514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011514:	b580      	push	{r7, lr}
 8011516:	b086      	sub	sp, #24
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011524:	f001 fc7e 	bl	8012e24 <vPortEnterCritical>
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801152e:	b25b      	sxtb	r3, r3
 8011530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011534:	d103      	bne.n	801153e <vQueueWaitForMessageRestricted+0x2a>
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	2200      	movs	r2, #0
 801153a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011544:	b25b      	sxtb	r3, r3
 8011546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801154a:	d103      	bne.n	8011554 <vQueueWaitForMessageRestricted+0x40>
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	2200      	movs	r2, #0
 8011550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011554:	f001 fc96 	bl	8012e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155c:	2b00      	cmp	r3, #0
 801155e:	d106      	bne.n	801156e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	3324      	adds	r3, #36	; 0x24
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	68b9      	ldr	r1, [r7, #8]
 8011568:	4618      	mov	r0, r3
 801156a:	f000 fc7f 	bl	8011e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801156e:	6978      	ldr	r0, [r7, #20]
 8011570:	f7ff ff26 	bl	80113c0 <prvUnlockQueue>
	}
 8011574:	bf00      	nop
 8011576:	3718      	adds	r7, #24
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801157c:	b580      	push	{r7, lr}
 801157e:	b08e      	sub	sp, #56	; 0x38
 8011580:	af04      	add	r7, sp, #16
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
 8011588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801158c:	2b00      	cmp	r3, #0
 801158e:	d10a      	bne.n	80115a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011594:	f383 8811 	msr	BASEPRI, r3
 8011598:	f3bf 8f6f 	isb	sy
 801159c:	f3bf 8f4f 	dsb	sy
 80115a0:	623b      	str	r3, [r7, #32]
}
 80115a2:	bf00      	nop
 80115a4:	e7fe      	b.n	80115a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80115a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d10a      	bne.n	80115c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80115ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b0:	f383 8811 	msr	BASEPRI, r3
 80115b4:	f3bf 8f6f 	isb	sy
 80115b8:	f3bf 8f4f 	dsb	sy
 80115bc:	61fb      	str	r3, [r7, #28]
}
 80115be:	bf00      	nop
 80115c0:	e7fe      	b.n	80115c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80115c2:	235c      	movs	r3, #92	; 0x5c
 80115c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	2b5c      	cmp	r3, #92	; 0x5c
 80115ca:	d00a      	beq.n	80115e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80115cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d0:	f383 8811 	msr	BASEPRI, r3
 80115d4:	f3bf 8f6f 	isb	sy
 80115d8:	f3bf 8f4f 	dsb	sy
 80115dc:	61bb      	str	r3, [r7, #24]
}
 80115de:	bf00      	nop
 80115e0:	e7fe      	b.n	80115e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80115e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80115e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d01e      	beq.n	8011628 <xTaskCreateStatic+0xac>
 80115ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d01b      	beq.n	8011628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80115f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fc:	2202      	movs	r2, #2
 80115fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011602:	2300      	movs	r3, #0
 8011604:	9303      	str	r3, [sp, #12]
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	9302      	str	r3, [sp, #8]
 801160a:	f107 0314 	add.w	r3, r7, #20
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	68b9      	ldr	r1, [r7, #8]
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f000 f850 	bl	80116c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011622:	f000 f8dd 	bl	80117e0 <prvAddNewTaskToReadyList>
 8011626:	e001      	b.n	801162c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011628:	2300      	movs	r3, #0
 801162a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801162c:	697b      	ldr	r3, [r7, #20]
	}
 801162e:	4618      	mov	r0, r3
 8011630:	3728      	adds	r7, #40	; 0x28
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011636:	b580      	push	{r7, lr}
 8011638:	b08c      	sub	sp, #48	; 0x30
 801163a:	af04      	add	r7, sp, #16
 801163c:	60f8      	str	r0, [r7, #12]
 801163e:	60b9      	str	r1, [r7, #8]
 8011640:	603b      	str	r3, [r7, #0]
 8011642:	4613      	mov	r3, r2
 8011644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011646:	88fb      	ldrh	r3, [r7, #6]
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4618      	mov	r0, r3
 801164c:	f001 fd0c 	bl	8013068 <pvPortMalloc>
 8011650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d00e      	beq.n	8011676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011658:	205c      	movs	r0, #92	; 0x5c
 801165a:	f001 fd05 	bl	8013068 <pvPortMalloc>
 801165e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	697a      	ldr	r2, [r7, #20]
 801166a:	631a      	str	r2, [r3, #48]	; 0x30
 801166c:	e005      	b.n	801167a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801166e:	6978      	ldr	r0, [r7, #20]
 8011670:	f001 fdc6 	bl	8013200 <vPortFree>
 8011674:	e001      	b.n	801167a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011676:	2300      	movs	r3, #0
 8011678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d017      	beq.n	80116b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	2200      	movs	r2, #0
 8011684:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011688:	88fa      	ldrh	r2, [r7, #6]
 801168a:	2300      	movs	r3, #0
 801168c:	9303      	str	r3, [sp, #12]
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	9302      	str	r3, [sp, #8]
 8011692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011694:	9301      	str	r3, [sp, #4]
 8011696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011698:	9300      	str	r3, [sp, #0]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	68b9      	ldr	r1, [r7, #8]
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f000 f80e 	bl	80116c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116a4:	69f8      	ldr	r0, [r7, #28]
 80116a6:	f000 f89b 	bl	80117e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116aa:	2301      	movs	r3, #1
 80116ac:	61bb      	str	r3, [r7, #24]
 80116ae:	e002      	b.n	80116b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116b6:	69bb      	ldr	r3, [r7, #24]
	}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3720      	adds	r7, #32
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b088      	sub	sp, #32
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80116ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	461a      	mov	r2, r3
 80116d8:	21a5      	movs	r1, #165	; 0xa5
 80116da:	f001 fef7 	bl	80134cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116e2:	6879      	ldr	r1, [r7, #4]
 80116e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80116e8:	440b      	add	r3, r1
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	4413      	add	r3, r2
 80116ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	f023 0307 	bic.w	r3, r3, #7
 80116f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	f003 0307 	and.w	r3, r3, #7
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00a      	beq.n	8011718 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011706:	f383 8811 	msr	BASEPRI, r3
 801170a:	f3bf 8f6f 	isb	sy
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	617b      	str	r3, [r7, #20]
}
 8011714:	bf00      	nop
 8011716:	e7fe      	b.n	8011716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d01f      	beq.n	801175e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801171e:	2300      	movs	r3, #0
 8011720:	61fb      	str	r3, [r7, #28]
 8011722:	e012      	b.n	801174a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	4413      	add	r3, r2
 801172a:	7819      	ldrb	r1, [r3, #0]
 801172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	4413      	add	r3, r2
 8011732:	3334      	adds	r3, #52	; 0x34
 8011734:	460a      	mov	r2, r1
 8011736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	4413      	add	r3, r2
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d006      	beq.n	8011752 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	3301      	adds	r3, #1
 8011748:	61fb      	str	r3, [r7, #28]
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	2b0f      	cmp	r3, #15
 801174e:	d9e9      	bls.n	8011724 <prvInitialiseNewTask+0x64>
 8011750:	e000      	b.n	8011754 <prvInitialiseNewTask+0x94>
			{
				break;
 8011752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011756:	2200      	movs	r2, #0
 8011758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801175c:	e003      	b.n	8011766 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011760:	2200      	movs	r2, #0
 8011762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011768:	2b37      	cmp	r3, #55	; 0x37
 801176a:	d901      	bls.n	8011770 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801176c:	2337      	movs	r3, #55	; 0x37
 801176e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801177a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	2200      	movs	r2, #0
 8011780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011784:	3304      	adds	r3, #4
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff f8bc 	bl	8010904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178e:	3318      	adds	r3, #24
 8011790:	4618      	mov	r0, r3
 8011792:	f7ff f8b7 	bl	8010904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801179a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	2200      	movs	r2, #0
 80117b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b4:	2200      	movs	r2, #0
 80117b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117ba:	683a      	ldr	r2, [r7, #0]
 80117bc:	68f9      	ldr	r1, [r7, #12]
 80117be:	69b8      	ldr	r0, [r7, #24]
 80117c0:	f001 fa06 	bl	8012bd0 <pxPortInitialiseStack>
 80117c4:	4602      	mov	r2, r0
 80117c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80117ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117d6:	bf00      	nop
 80117d8:	3720      	adds	r7, #32
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117e8:	f001 fb1c 	bl	8012e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117ec:	4b2d      	ldr	r3, [pc, #180]	; (80118a4 <prvAddNewTaskToReadyList+0xc4>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	3301      	adds	r3, #1
 80117f2:	4a2c      	ldr	r2, [pc, #176]	; (80118a4 <prvAddNewTaskToReadyList+0xc4>)
 80117f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80117f6:	4b2c      	ldr	r3, [pc, #176]	; (80118a8 <prvAddNewTaskToReadyList+0xc8>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d109      	bne.n	8011812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117fe:	4a2a      	ldr	r2, [pc, #168]	; (80118a8 <prvAddNewTaskToReadyList+0xc8>)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011804:	4b27      	ldr	r3, [pc, #156]	; (80118a4 <prvAddNewTaskToReadyList+0xc4>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b01      	cmp	r3, #1
 801180a:	d110      	bne.n	801182e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801180c:	f000 fcbc 	bl	8012188 <prvInitialiseTaskLists>
 8011810:	e00d      	b.n	801182e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011812:	4b26      	ldr	r3, [pc, #152]	; (80118ac <prvAddNewTaskToReadyList+0xcc>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d109      	bne.n	801182e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801181a:	4b23      	ldr	r3, [pc, #140]	; (80118a8 <prvAddNewTaskToReadyList+0xc8>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011824:	429a      	cmp	r2, r3
 8011826:	d802      	bhi.n	801182e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011828:	4a1f      	ldr	r2, [pc, #124]	; (80118a8 <prvAddNewTaskToReadyList+0xc8>)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801182e:	4b20      	ldr	r3, [pc, #128]	; (80118b0 <prvAddNewTaskToReadyList+0xd0>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3301      	adds	r3, #1
 8011834:	4a1e      	ldr	r2, [pc, #120]	; (80118b0 <prvAddNewTaskToReadyList+0xd0>)
 8011836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011838:	4b1d      	ldr	r3, [pc, #116]	; (80118b0 <prvAddNewTaskToReadyList+0xd0>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011844:	4b1b      	ldr	r3, [pc, #108]	; (80118b4 <prvAddNewTaskToReadyList+0xd4>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	429a      	cmp	r2, r3
 801184a:	d903      	bls.n	8011854 <prvAddNewTaskToReadyList+0x74>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011850:	4a18      	ldr	r2, [pc, #96]	; (80118b4 <prvAddNewTaskToReadyList+0xd4>)
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011858:	4613      	mov	r3, r2
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4413      	add	r3, r2
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4a15      	ldr	r2, [pc, #84]	; (80118b8 <prvAddNewTaskToReadyList+0xd8>)
 8011862:	441a      	add	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	3304      	adds	r3, #4
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	f7ff f857 	bl	801091e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011870:	f001 fb08 	bl	8012e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011874:	4b0d      	ldr	r3, [pc, #52]	; (80118ac <prvAddNewTaskToReadyList+0xcc>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00e      	beq.n	801189a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801187c:	4b0a      	ldr	r3, [pc, #40]	; (80118a8 <prvAddNewTaskToReadyList+0xc8>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011886:	429a      	cmp	r2, r3
 8011888:	d207      	bcs.n	801189a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801188a:	4b0c      	ldr	r3, [pc, #48]	; (80118bc <prvAddNewTaskToReadyList+0xdc>)
 801188c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011890:	601a      	str	r2, [r3, #0]
 8011892:	f3bf 8f4f 	dsb	sy
 8011896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801189a:	bf00      	nop
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	24001780 	.word	0x24001780
 80118a8:	240012ac 	.word	0x240012ac
 80118ac:	2400178c 	.word	0x2400178c
 80118b0:	2400179c 	.word	0x2400179c
 80118b4:	24001788 	.word	0x24001788
 80118b8:	240012b0 	.word	0x240012b0
 80118bc:	e000ed04 	.word	0xe000ed04

080118c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118c8:	2300      	movs	r3, #0
 80118ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d017      	beq.n	8011902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118d2:	4b13      	ldr	r3, [pc, #76]	; (8011920 <vTaskDelay+0x60>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00a      	beq.n	80118f0 <vTaskDelay+0x30>
	__asm volatile
 80118da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118de:	f383 8811 	msr	BASEPRI, r3
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	60bb      	str	r3, [r7, #8]
}
 80118ec:	bf00      	nop
 80118ee:	e7fe      	b.n	80118ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80118f0:	f000 f880 	bl	80119f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118f4:	2100      	movs	r1, #0
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fda8 	bl	801244c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118fc:	f000 f888 	bl	8011a10 <xTaskResumeAll>
 8011900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d107      	bne.n	8011918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011908:	4b06      	ldr	r3, [pc, #24]	; (8011924 <vTaskDelay+0x64>)
 801190a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	f3bf 8f4f 	dsb	sy
 8011914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011918:	bf00      	nop
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	240017a8 	.word	0x240017a8
 8011924:	e000ed04 	.word	0xe000ed04

08011928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08a      	sub	sp, #40	; 0x28
 801192c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801192e:	2300      	movs	r3, #0
 8011930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011932:	2300      	movs	r3, #0
 8011934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011936:	463a      	mov	r2, r7
 8011938:	1d39      	adds	r1, r7, #4
 801193a:	f107 0308 	add.w	r3, r7, #8
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe fdf0 	bl	8010524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	9202      	str	r2, [sp, #8]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	2300      	movs	r3, #0
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	2300      	movs	r3, #0
 8011954:	460a      	mov	r2, r1
 8011956:	4921      	ldr	r1, [pc, #132]	; (80119dc <vTaskStartScheduler+0xb4>)
 8011958:	4821      	ldr	r0, [pc, #132]	; (80119e0 <vTaskStartScheduler+0xb8>)
 801195a:	f7ff fe0f 	bl	801157c <xTaskCreateStatic>
 801195e:	4603      	mov	r3, r0
 8011960:	4a20      	ldr	r2, [pc, #128]	; (80119e4 <vTaskStartScheduler+0xbc>)
 8011962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011964:	4b1f      	ldr	r3, [pc, #124]	; (80119e4 <vTaskStartScheduler+0xbc>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d002      	beq.n	8011972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801196c:	2301      	movs	r3, #1
 801196e:	617b      	str	r3, [r7, #20]
 8011970:	e001      	b.n	8011976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011972:	2300      	movs	r3, #0
 8011974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d102      	bne.n	8011982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801197c:	f000 fdba 	bl	80124f4 <xTimerCreateTimerTask>
 8011980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d116      	bne.n	80119b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198c:	f383 8811 	msr	BASEPRI, r3
 8011990:	f3bf 8f6f 	isb	sy
 8011994:	f3bf 8f4f 	dsb	sy
 8011998:	613b      	str	r3, [r7, #16]
}
 801199a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <vTaskStartScheduler+0xc0>)
 801199e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119a4:	4b11      	ldr	r3, [pc, #68]	; (80119ec <vTaskStartScheduler+0xc4>)
 80119a6:	2201      	movs	r2, #1
 80119a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80119aa:	4b11      	ldr	r3, [pc, #68]	; (80119f0 <vTaskStartScheduler+0xc8>)
 80119ac:	2200      	movs	r2, #0
 80119ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119b0:	f001 f996 	bl	8012ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119b4:	e00e      	b.n	80119d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119bc:	d10a      	bne.n	80119d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	f383 8811 	msr	BASEPRI, r3
 80119c6:	f3bf 8f6f 	isb	sy
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	60fb      	str	r3, [r7, #12]
}
 80119d0:	bf00      	nop
 80119d2:	e7fe      	b.n	80119d2 <vTaskStartScheduler+0xaa>
}
 80119d4:	bf00      	nop
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	08014130 	.word	0x08014130
 80119e0:	08012159 	.word	0x08012159
 80119e4:	240017a4 	.word	0x240017a4
 80119e8:	240017a0 	.word	0x240017a0
 80119ec:	2400178c 	.word	0x2400178c
 80119f0:	24001784 	.word	0x24001784

080119f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80119f4:	b480      	push	{r7}
 80119f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80119f8:	4b04      	ldr	r3, [pc, #16]	; (8011a0c <vTaskSuspendAll+0x18>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	3301      	adds	r3, #1
 80119fe:	4a03      	ldr	r2, [pc, #12]	; (8011a0c <vTaskSuspendAll+0x18>)
 8011a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011a02:	bf00      	nop
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr
 8011a0c:	240017a8 	.word	0x240017a8

08011a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a16:	2300      	movs	r3, #0
 8011a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a1e:	4b42      	ldr	r3, [pc, #264]	; (8011b28 <xTaskResumeAll+0x118>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d10a      	bne.n	8011a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8011a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2a:	f383 8811 	msr	BASEPRI, r3
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	603b      	str	r3, [r7, #0]
}
 8011a38:	bf00      	nop
 8011a3a:	e7fe      	b.n	8011a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a3c:	f001 f9f2 	bl	8012e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a40:	4b39      	ldr	r3, [pc, #228]	; (8011b28 <xTaskResumeAll+0x118>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3b01      	subs	r3, #1
 8011a46:	4a38      	ldr	r2, [pc, #224]	; (8011b28 <xTaskResumeAll+0x118>)
 8011a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a4a:	4b37      	ldr	r3, [pc, #220]	; (8011b28 <xTaskResumeAll+0x118>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d162      	bne.n	8011b18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a52:	4b36      	ldr	r3, [pc, #216]	; (8011b2c <xTaskResumeAll+0x11c>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d05e      	beq.n	8011b18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a5a:	e02f      	b.n	8011abc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a5c:	4b34      	ldr	r3, [pc, #208]	; (8011b30 <xTaskResumeAll+0x120>)
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	3318      	adds	r3, #24
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fe ffb5 	bl	80109d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3304      	adds	r3, #4
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fe ffb0 	bl	80109d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7c:	4b2d      	ldr	r3, [pc, #180]	; (8011b34 <xTaskResumeAll+0x124>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d903      	bls.n	8011a8c <xTaskResumeAll+0x7c>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a88:	4a2a      	ldr	r2, [pc, #168]	; (8011b34 <xTaskResumeAll+0x124>)
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a90:	4613      	mov	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4a27      	ldr	r2, [pc, #156]	; (8011b38 <xTaskResumeAll+0x128>)
 8011a9a:	441a      	add	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	f7fe ff3b 	bl	801091e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aac:	4b23      	ldr	r3, [pc, #140]	; (8011b3c <xTaskResumeAll+0x12c>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d302      	bcc.n	8011abc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011ab6:	4b22      	ldr	r3, [pc, #136]	; (8011b40 <xTaskResumeAll+0x130>)
 8011ab8:	2201      	movs	r2, #1
 8011aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011abc:	4b1c      	ldr	r3, [pc, #112]	; (8011b30 <xTaskResumeAll+0x120>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1cb      	bne.n	8011a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011aca:	f000 fbfb 	bl	80122c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011ace:	4b1d      	ldr	r3, [pc, #116]	; (8011b44 <xTaskResumeAll+0x134>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d010      	beq.n	8011afc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011ada:	f000 f847 	bl	8011b6c <xTaskIncrementTick>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011ae4:	4b16      	ldr	r3, [pc, #88]	; (8011b40 <xTaskResumeAll+0x130>)
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1f1      	bne.n	8011ada <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011af6:	4b13      	ldr	r3, [pc, #76]	; (8011b44 <xTaskResumeAll+0x134>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011afc:	4b10      	ldr	r3, [pc, #64]	; (8011b40 <xTaskResumeAll+0x130>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d009      	beq.n	8011b18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b04:	2301      	movs	r3, #1
 8011b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b08:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <xTaskResumeAll+0x138>)
 8011b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b18:	f001 f9b4 	bl	8012e84 <vPortExitCritical>

	return xAlreadyYielded;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	240017a8 	.word	0x240017a8
 8011b2c:	24001780 	.word	0x24001780
 8011b30:	24001740 	.word	0x24001740
 8011b34:	24001788 	.word	0x24001788
 8011b38:	240012b0 	.word	0x240012b0
 8011b3c:	240012ac 	.word	0x240012ac
 8011b40:	24001794 	.word	0x24001794
 8011b44:	24001790 	.word	0x24001790
 8011b48:	e000ed04 	.word	0xe000ed04

08011b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <xTaskGetTickCount+0x1c>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b58:	687b      	ldr	r3, [r7, #4]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	24001784 	.word	0x24001784

08011b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b72:	2300      	movs	r3, #0
 8011b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b76:	4b53      	ldr	r3, [pc, #332]	; (8011cc4 <xTaskIncrementTick+0x158>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f040 8095 	bne.w	8011caa <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b80:	4b51      	ldr	r3, [pc, #324]	; (8011cc8 <xTaskIncrementTick+0x15c>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	3301      	adds	r3, #1
 8011b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b88:	4a4f      	ldr	r2, [pc, #316]	; (8011cc8 <xTaskIncrementTick+0x15c>)
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d120      	bne.n	8011bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b94:	4b4d      	ldr	r3, [pc, #308]	; (8011ccc <xTaskIncrementTick+0x160>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00a      	beq.n	8011bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8011b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba2:	f383 8811 	msr	BASEPRI, r3
 8011ba6:	f3bf 8f6f 	isb	sy
 8011baa:	f3bf 8f4f 	dsb	sy
 8011bae:	603b      	str	r3, [r7, #0]
}
 8011bb0:	bf00      	nop
 8011bb2:	e7fe      	b.n	8011bb2 <xTaskIncrementTick+0x46>
 8011bb4:	4b45      	ldr	r3, [pc, #276]	; (8011ccc <xTaskIncrementTick+0x160>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	60fb      	str	r3, [r7, #12]
 8011bba:	4b45      	ldr	r3, [pc, #276]	; (8011cd0 <xTaskIncrementTick+0x164>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4a43      	ldr	r2, [pc, #268]	; (8011ccc <xTaskIncrementTick+0x160>)
 8011bc0:	6013      	str	r3, [r2, #0]
 8011bc2:	4a43      	ldr	r2, [pc, #268]	; (8011cd0 <xTaskIncrementTick+0x164>)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6013      	str	r3, [r2, #0]
 8011bc8:	4b42      	ldr	r3, [pc, #264]	; (8011cd4 <xTaskIncrementTick+0x168>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	4a41      	ldr	r2, [pc, #260]	; (8011cd4 <xTaskIncrementTick+0x168>)
 8011bd0:	6013      	str	r3, [r2, #0]
 8011bd2:	f000 fb77 	bl	80122c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011bd6:	4b40      	ldr	r3, [pc, #256]	; (8011cd8 <xTaskIncrementTick+0x16c>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d349      	bcc.n	8011c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011be0:	4b3a      	ldr	r3, [pc, #232]	; (8011ccc <xTaskIncrementTick+0x160>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d104      	bne.n	8011bf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bea:	4b3b      	ldr	r3, [pc, #236]	; (8011cd8 <xTaskIncrementTick+0x16c>)
 8011bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011bf0:	601a      	str	r2, [r3, #0]
					break;
 8011bf2:	e03f      	b.n	8011c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bf4:	4b35      	ldr	r3, [pc, #212]	; (8011ccc <xTaskIncrementTick+0x160>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d203      	bcs.n	8011c14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011c0c:	4a32      	ldr	r2, [pc, #200]	; (8011cd8 <xTaskIncrementTick+0x16c>)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011c12:	e02f      	b.n	8011c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	3304      	adds	r3, #4
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fe fedd 	bl	80109d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d004      	beq.n	8011c30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	3318      	adds	r3, #24
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fe fed4 	bl	80109d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c34:	4b29      	ldr	r3, [pc, #164]	; (8011cdc <xTaskIncrementTick+0x170>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d903      	bls.n	8011c44 <xTaskIncrementTick+0xd8>
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c40:	4a26      	ldr	r2, [pc, #152]	; (8011cdc <xTaskIncrementTick+0x170>)
 8011c42:	6013      	str	r3, [r2, #0]
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c48:	4613      	mov	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	4a23      	ldr	r2, [pc, #140]	; (8011ce0 <xTaskIncrementTick+0x174>)
 8011c52:	441a      	add	r2, r3
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	3304      	adds	r3, #4
 8011c58:	4619      	mov	r1, r3
 8011c5a:	4610      	mov	r0, r2
 8011c5c:	f7fe fe5f 	bl	801091e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c64:	4b1f      	ldr	r3, [pc, #124]	; (8011ce4 <xTaskIncrementTick+0x178>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d3b8      	bcc.n	8011be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011c6e:	2301      	movs	r3, #1
 8011c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c72:	e7b5      	b.n	8011be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c74:	4b1b      	ldr	r3, [pc, #108]	; (8011ce4 <xTaskIncrementTick+0x178>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c7a:	4919      	ldr	r1, [pc, #100]	; (8011ce0 <xTaskIncrementTick+0x174>)
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4413      	add	r3, r2
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	440b      	add	r3, r1
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d901      	bls.n	8011c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8011c90:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <xTaskIncrementTick+0x17c>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d101      	bne.n	8011c9c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8011c98:	f7ef f892 	bl	8000dc0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011c9c:	4b13      	ldr	r3, [pc, #76]	; (8011cec <xTaskIncrementTick+0x180>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d009      	beq.n	8011cb8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	617b      	str	r3, [r7, #20]
 8011ca8:	e006      	b.n	8011cb8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011caa:	4b0f      	ldr	r3, [pc, #60]	; (8011ce8 <xTaskIncrementTick+0x17c>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	4a0d      	ldr	r2, [pc, #52]	; (8011ce8 <xTaskIncrementTick+0x17c>)
 8011cb2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011cb4:	f7ef f884 	bl	8000dc0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8011cb8:	697b      	ldr	r3, [r7, #20]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3718      	adds	r7, #24
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	240017a8 	.word	0x240017a8
 8011cc8:	24001784 	.word	0x24001784
 8011ccc:	24001738 	.word	0x24001738
 8011cd0:	2400173c 	.word	0x2400173c
 8011cd4:	24001798 	.word	0x24001798
 8011cd8:	240017a0 	.word	0x240017a0
 8011cdc:	24001788 	.word	0x24001788
 8011ce0:	240012b0 	.word	0x240012b0
 8011ce4:	240012ac 	.word	0x240012ac
 8011ce8:	24001790 	.word	0x24001790
 8011cec:	24001794 	.word	0x24001794

08011cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b085      	sub	sp, #20
 8011cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cf6:	4b28      	ldr	r3, [pc, #160]	; (8011d98 <vTaskSwitchContext+0xa8>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d003      	beq.n	8011d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cfe:	4b27      	ldr	r3, [pc, #156]	; (8011d9c <vTaskSwitchContext+0xac>)
 8011d00:	2201      	movs	r2, #1
 8011d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d04:	e041      	b.n	8011d8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8011d06:	4b25      	ldr	r3, [pc, #148]	; (8011d9c <vTaskSwitchContext+0xac>)
 8011d08:	2200      	movs	r2, #0
 8011d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d0c:	4b24      	ldr	r3, [pc, #144]	; (8011da0 <vTaskSwitchContext+0xb0>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	60fb      	str	r3, [r7, #12]
 8011d12:	e010      	b.n	8011d36 <vTaskSwitchContext+0x46>
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10a      	bne.n	8011d30 <vTaskSwitchContext+0x40>
	__asm volatile
 8011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1e:	f383 8811 	msr	BASEPRI, r3
 8011d22:	f3bf 8f6f 	isb	sy
 8011d26:	f3bf 8f4f 	dsb	sy
 8011d2a:	607b      	str	r3, [r7, #4]
}
 8011d2c:	bf00      	nop
 8011d2e:	e7fe      	b.n	8011d2e <vTaskSwitchContext+0x3e>
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	60fb      	str	r3, [r7, #12]
 8011d36:	491b      	ldr	r1, [pc, #108]	; (8011da4 <vTaskSwitchContext+0xb4>)
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	4413      	add	r3, r2
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	440b      	add	r3, r1
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0e4      	beq.n	8011d14 <vTaskSwitchContext+0x24>
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4a13      	ldr	r2, [pc, #76]	; (8011da4 <vTaskSwitchContext+0xb4>)
 8011d56:	4413      	add	r3, r2
 8011d58:	60bb      	str	r3, [r7, #8]
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	685a      	ldr	r2, [r3, #4]
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	605a      	str	r2, [r3, #4]
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	3308      	adds	r3, #8
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d104      	bne.n	8011d7a <vTaskSwitchContext+0x8a>
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	605a      	str	r2, [r3, #4]
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	4a09      	ldr	r2, [pc, #36]	; (8011da8 <vTaskSwitchContext+0xb8>)
 8011d82:	6013      	str	r3, [r2, #0]
 8011d84:	4a06      	ldr	r2, [pc, #24]	; (8011da0 <vTaskSwitchContext+0xb0>)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	6013      	str	r3, [r2, #0]
}
 8011d8a:	bf00      	nop
 8011d8c:	3714      	adds	r7, #20
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	240017a8 	.word	0x240017a8
 8011d9c:	24001794 	.word	0x24001794
 8011da0:	24001788 	.word	0x24001788
 8011da4:	240012b0 	.word	0x240012b0
 8011da8:	240012ac 	.word	0x240012ac

08011dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10a      	bne.n	8011dd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc0:	f383 8811 	msr	BASEPRI, r3
 8011dc4:	f3bf 8f6f 	isb	sy
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	60fb      	str	r3, [r7, #12]
}
 8011dce:	bf00      	nop
 8011dd0:	e7fe      	b.n	8011dd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011dd2:	4b07      	ldr	r3, [pc, #28]	; (8011df0 <vTaskPlaceOnEventList+0x44>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	3318      	adds	r3, #24
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7fe fdc3 	bl	8010966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011de0:	2101      	movs	r1, #1
 8011de2:	6838      	ldr	r0, [r7, #0]
 8011de4:	f000 fb32 	bl	801244c <prvAddCurrentTaskToDelayedList>
}
 8011de8:	bf00      	nop
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	240012ac 	.word	0x240012ac

08011df4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d10a      	bne.n	8011e1c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0a:	f383 8811 	msr	BASEPRI, r3
 8011e0e:	f3bf 8f6f 	isb	sy
 8011e12:	f3bf 8f4f 	dsb	sy
 8011e16:	617b      	str	r3, [r7, #20]
}
 8011e18:	bf00      	nop
 8011e1a:	e7fe      	b.n	8011e1a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011e1c:	4b11      	ldr	r3, [pc, #68]	; (8011e64 <vTaskPlaceOnUnorderedEventList+0x70>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d10a      	bne.n	8011e3a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e28:	f383 8811 	msr	BASEPRI, r3
 8011e2c:	f3bf 8f6f 	isb	sy
 8011e30:	f3bf 8f4f 	dsb	sy
 8011e34:	613b      	str	r3, [r7, #16]
}
 8011e36:	bf00      	nop
 8011e38:	e7fe      	b.n	8011e38 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011e3a:	4b0b      	ldr	r3, [pc, #44]	; (8011e68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011e44:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e46:	4b08      	ldr	r3, [pc, #32]	; (8011e68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	3318      	adds	r3, #24
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7fe fd65 	bl	801091e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e54:	2101      	movs	r1, #1
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 faf8 	bl	801244c <prvAddCurrentTaskToDelayedList>
}
 8011e5c:	bf00      	nop
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	240017a8 	.word	0x240017a8
 8011e68:	240012ac 	.word	0x240012ac

08011e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b086      	sub	sp, #24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d10a      	bne.n	8011e94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e82:	f383 8811 	msr	BASEPRI, r3
 8011e86:	f3bf 8f6f 	isb	sy
 8011e8a:	f3bf 8f4f 	dsb	sy
 8011e8e:	617b      	str	r3, [r7, #20]
}
 8011e90:	bf00      	nop
 8011e92:	e7fe      	b.n	8011e92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e94:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3318      	adds	r3, #24
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7fe fd3e 	bl	801091e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d002      	beq.n	8011eae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011eac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011eae:	6879      	ldr	r1, [r7, #4]
 8011eb0:	68b8      	ldr	r0, [r7, #8]
 8011eb2:	f000 facb 	bl	801244c <prvAddCurrentTaskToDelayedList>
	}
 8011eb6:	bf00      	nop
 8011eb8:	3718      	adds	r7, #24
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	240012ac 	.word	0x240012ac

08011ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b086      	sub	sp, #24
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10a      	bne.n	8011ef0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	60fb      	str	r3, [r7, #12]
}
 8011eec:	bf00      	nop
 8011eee:	e7fe      	b.n	8011eee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	3318      	adds	r3, #24
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fd6f 	bl	80109d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011efa:	4b1e      	ldr	r3, [pc, #120]	; (8011f74 <xTaskRemoveFromEventList+0xb0>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d11d      	bne.n	8011f3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	3304      	adds	r3, #4
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe fd66 	bl	80109d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f10:	4b19      	ldr	r3, [pc, #100]	; (8011f78 <xTaskRemoveFromEventList+0xb4>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d903      	bls.n	8011f20 <xTaskRemoveFromEventList+0x5c>
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1c:	4a16      	ldr	r2, [pc, #88]	; (8011f78 <xTaskRemoveFromEventList+0xb4>)
 8011f1e:	6013      	str	r3, [r2, #0]
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f24:	4613      	mov	r3, r2
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	4413      	add	r3, r2
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	4a13      	ldr	r2, [pc, #76]	; (8011f7c <xTaskRemoveFromEventList+0xb8>)
 8011f2e:	441a      	add	r2, r3
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	3304      	adds	r3, #4
 8011f34:	4619      	mov	r1, r3
 8011f36:	4610      	mov	r0, r2
 8011f38:	f7fe fcf1 	bl	801091e <vListInsertEnd>
 8011f3c:	e005      	b.n	8011f4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	3318      	adds	r3, #24
 8011f42:	4619      	mov	r1, r3
 8011f44:	480e      	ldr	r0, [pc, #56]	; (8011f80 <xTaskRemoveFromEventList+0xbc>)
 8011f46:	f7fe fcea 	bl	801091e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f4e:	4b0d      	ldr	r3, [pc, #52]	; (8011f84 <xTaskRemoveFromEventList+0xc0>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d905      	bls.n	8011f64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f5c:	4b0a      	ldr	r3, [pc, #40]	; (8011f88 <xTaskRemoveFromEventList+0xc4>)
 8011f5e:	2201      	movs	r2, #1
 8011f60:	601a      	str	r2, [r3, #0]
 8011f62:	e001      	b.n	8011f68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011f64:	2300      	movs	r3, #0
 8011f66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f68:	697b      	ldr	r3, [r7, #20]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	240017a8 	.word	0x240017a8
 8011f78:	24001788 	.word	0x24001788
 8011f7c:	240012b0 	.word	0x240012b0
 8011f80:	24001740 	.word	0x24001740
 8011f84:	240012ac 	.word	0x240012ac
 8011f88:	24001794 	.word	0x24001794

08011f8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011f96:	4b29      	ldr	r3, [pc, #164]	; (801203c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d10a      	bne.n	8011fb4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa2:	f383 8811 	msr	BASEPRI, r3
 8011fa6:	f3bf 8f6f 	isb	sy
 8011faa:	f3bf 8f4f 	dsb	sy
 8011fae:	613b      	str	r3, [r7, #16]
}
 8011fb0:	bf00      	nop
 8011fb2:	e7fe      	b.n	8011fb2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10a      	bne.n	8011fe0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	60fb      	str	r3, [r7, #12]
}
 8011fdc:	bf00      	nop
 8011fde:	e7fe      	b.n	8011fde <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7fe fcf9 	bl	80109d8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fe fcf4 	bl	80109d8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ff4:	4b12      	ldr	r3, [pc, #72]	; (8012040 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d903      	bls.n	8012004 <vTaskRemoveFromUnorderedEventList+0x78>
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012000:	4a0f      	ldr	r2, [pc, #60]	; (8012040 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012002:	6013      	str	r3, [r2, #0]
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012008:	4613      	mov	r3, r2
 801200a:	009b      	lsls	r3, r3, #2
 801200c:	4413      	add	r3, r2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	4a0c      	ldr	r2, [pc, #48]	; (8012044 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012012:	441a      	add	r2, r3
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	3304      	adds	r3, #4
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7fe fc7f 	bl	801091e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012024:	4b08      	ldr	r3, [pc, #32]	; (8012048 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202a:	429a      	cmp	r2, r3
 801202c:	d902      	bls.n	8012034 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801202e:	4b07      	ldr	r3, [pc, #28]	; (801204c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012030:	2201      	movs	r2, #1
 8012032:	601a      	str	r2, [r3, #0]
	}
}
 8012034:	bf00      	nop
 8012036:	3718      	adds	r7, #24
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	240017a8 	.word	0x240017a8
 8012040:	24001788 	.word	0x24001788
 8012044:	240012b0 	.word	0x240012b0
 8012048:	240012ac 	.word	0x240012ac
 801204c:	24001794 	.word	0x24001794

08012050 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012058:	4b06      	ldr	r3, [pc, #24]	; (8012074 <vTaskInternalSetTimeOutState+0x24>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012060:	4b05      	ldr	r3, [pc, #20]	; (8012078 <vTaskInternalSetTimeOutState+0x28>)
 8012062:	681a      	ldr	r2, [r3, #0]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	605a      	str	r2, [r3, #4]
}
 8012068:	bf00      	nop
 801206a:	370c      	adds	r7, #12
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr
 8012074:	24001798 	.word	0x24001798
 8012078:	24001784 	.word	0x24001784

0801207c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b088      	sub	sp, #32
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10a      	bne.n	80120a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012090:	f383 8811 	msr	BASEPRI, r3
 8012094:	f3bf 8f6f 	isb	sy
 8012098:	f3bf 8f4f 	dsb	sy
 801209c:	613b      	str	r3, [r7, #16]
}
 801209e:	bf00      	nop
 80120a0:	e7fe      	b.n	80120a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d10a      	bne.n	80120be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80120a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ac:	f383 8811 	msr	BASEPRI, r3
 80120b0:	f3bf 8f6f 	isb	sy
 80120b4:	f3bf 8f4f 	dsb	sy
 80120b8:	60fb      	str	r3, [r7, #12]
}
 80120ba:	bf00      	nop
 80120bc:	e7fe      	b.n	80120bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80120be:	f000 feb1 	bl	8012e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80120c2:	4b1d      	ldr	r3, [pc, #116]	; (8012138 <xTaskCheckForTimeOut+0xbc>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	69ba      	ldr	r2, [r7, #24]
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120da:	d102      	bne.n	80120e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80120dc:	2300      	movs	r3, #0
 80120de:	61fb      	str	r3, [r7, #28]
 80120e0:	e023      	b.n	801212a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	4b15      	ldr	r3, [pc, #84]	; (801213c <xTaskCheckForTimeOut+0xc0>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d007      	beq.n	80120fe <xTaskCheckForTimeOut+0x82>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	69ba      	ldr	r2, [r7, #24]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d302      	bcc.n	80120fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80120f8:	2301      	movs	r3, #1
 80120fa:	61fb      	str	r3, [r7, #28]
 80120fc:	e015      	b.n	801212a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	697a      	ldr	r2, [r7, #20]
 8012104:	429a      	cmp	r2, r3
 8012106:	d20b      	bcs.n	8012120 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	1ad2      	subs	r2, r2, r3
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff ff9b 	bl	8012050 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801211a:	2300      	movs	r3, #0
 801211c:	61fb      	str	r3, [r7, #28]
 801211e:	e004      	b.n	801212a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	2200      	movs	r2, #0
 8012124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012126:	2301      	movs	r3, #1
 8012128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801212a:	f000 feab 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 801212e:	69fb      	ldr	r3, [r7, #28]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3720      	adds	r7, #32
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	24001784 	.word	0x24001784
 801213c:	24001798 	.word	0x24001798

08012140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012140:	b480      	push	{r7}
 8012142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012144:	4b03      	ldr	r3, [pc, #12]	; (8012154 <vTaskMissedYield+0x14>)
 8012146:	2201      	movs	r2, #1
 8012148:	601a      	str	r2, [r3, #0]
}
 801214a:	bf00      	nop
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	24001794 	.word	0x24001794

08012158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012160:	f000 f852 	bl	8012208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012164:	4b06      	ldr	r3, [pc, #24]	; (8012180 <prvIdleTask+0x28>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d9f9      	bls.n	8012160 <prvIdleTask+0x8>
			{
				taskYIELD();
 801216c:	4b05      	ldr	r3, [pc, #20]	; (8012184 <prvIdleTask+0x2c>)
 801216e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012172:	601a      	str	r2, [r3, #0]
 8012174:	f3bf 8f4f 	dsb	sy
 8012178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801217c:	e7f0      	b.n	8012160 <prvIdleTask+0x8>
 801217e:	bf00      	nop
 8012180:	240012b0 	.word	0x240012b0
 8012184:	e000ed04 	.word	0xe000ed04

08012188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801218e:	2300      	movs	r3, #0
 8012190:	607b      	str	r3, [r7, #4]
 8012192:	e00c      	b.n	80121ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	4613      	mov	r3, r2
 8012198:	009b      	lsls	r3, r3, #2
 801219a:	4413      	add	r3, r2
 801219c:	009b      	lsls	r3, r3, #2
 801219e:	4a12      	ldr	r2, [pc, #72]	; (80121e8 <prvInitialiseTaskLists+0x60>)
 80121a0:	4413      	add	r3, r2
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fe fb8e 	bl	80108c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	3301      	adds	r3, #1
 80121ac:	607b      	str	r3, [r7, #4]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b37      	cmp	r3, #55	; 0x37
 80121b2:	d9ef      	bls.n	8012194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80121b4:	480d      	ldr	r0, [pc, #52]	; (80121ec <prvInitialiseTaskLists+0x64>)
 80121b6:	f7fe fb85 	bl	80108c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80121ba:	480d      	ldr	r0, [pc, #52]	; (80121f0 <prvInitialiseTaskLists+0x68>)
 80121bc:	f7fe fb82 	bl	80108c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80121c0:	480c      	ldr	r0, [pc, #48]	; (80121f4 <prvInitialiseTaskLists+0x6c>)
 80121c2:	f7fe fb7f 	bl	80108c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80121c6:	480c      	ldr	r0, [pc, #48]	; (80121f8 <prvInitialiseTaskLists+0x70>)
 80121c8:	f7fe fb7c 	bl	80108c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80121cc:	480b      	ldr	r0, [pc, #44]	; (80121fc <prvInitialiseTaskLists+0x74>)
 80121ce:	f7fe fb79 	bl	80108c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80121d2:	4b0b      	ldr	r3, [pc, #44]	; (8012200 <prvInitialiseTaskLists+0x78>)
 80121d4:	4a05      	ldr	r2, [pc, #20]	; (80121ec <prvInitialiseTaskLists+0x64>)
 80121d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80121d8:	4b0a      	ldr	r3, [pc, #40]	; (8012204 <prvInitialiseTaskLists+0x7c>)
 80121da:	4a05      	ldr	r2, [pc, #20]	; (80121f0 <prvInitialiseTaskLists+0x68>)
 80121dc:	601a      	str	r2, [r3, #0]
}
 80121de:	bf00      	nop
 80121e0:	3708      	adds	r7, #8
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	240012b0 	.word	0x240012b0
 80121ec:	24001710 	.word	0x24001710
 80121f0:	24001724 	.word	0x24001724
 80121f4:	24001740 	.word	0x24001740
 80121f8:	24001754 	.word	0x24001754
 80121fc:	2400176c 	.word	0x2400176c
 8012200:	24001738 	.word	0x24001738
 8012204:	2400173c 	.word	0x2400173c

08012208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801220e:	e019      	b.n	8012244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012210:	f000 fe08 	bl	8012e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012214:	4b10      	ldr	r3, [pc, #64]	; (8012258 <prvCheckTasksWaitingTermination+0x50>)
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	3304      	adds	r3, #4
 8012220:	4618      	mov	r0, r3
 8012222:	f7fe fbd9 	bl	80109d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012226:	4b0d      	ldr	r3, [pc, #52]	; (801225c <prvCheckTasksWaitingTermination+0x54>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	3b01      	subs	r3, #1
 801222c:	4a0b      	ldr	r2, [pc, #44]	; (801225c <prvCheckTasksWaitingTermination+0x54>)
 801222e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012230:	4b0b      	ldr	r3, [pc, #44]	; (8012260 <prvCheckTasksWaitingTermination+0x58>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	3b01      	subs	r3, #1
 8012236:	4a0a      	ldr	r2, [pc, #40]	; (8012260 <prvCheckTasksWaitingTermination+0x58>)
 8012238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801223a:	f000 fe23 	bl	8012e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f810 	bl	8012264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012244:	4b06      	ldr	r3, [pc, #24]	; (8012260 <prvCheckTasksWaitingTermination+0x58>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1e1      	bne.n	8012210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801224c:	bf00      	nop
 801224e:	bf00      	nop
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	24001754 	.word	0x24001754
 801225c:	24001780 	.word	0x24001780
 8012260:	24001768 	.word	0x24001768

08012264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012272:	2b00      	cmp	r3, #0
 8012274:	d108      	bne.n	8012288 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801227a:	4618      	mov	r0, r3
 801227c:	f000 ffc0 	bl	8013200 <vPortFree>
				vPortFree( pxTCB );
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 ffbd 	bl	8013200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012286:	e018      	b.n	80122ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801228e:	2b01      	cmp	r3, #1
 8012290:	d103      	bne.n	801229a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 ffb4 	bl	8013200 <vPortFree>
	}
 8012298:	e00f      	b.n	80122ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d00a      	beq.n	80122ba <prvDeleteTCB+0x56>
	__asm volatile
 80122a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a8:	f383 8811 	msr	BASEPRI, r3
 80122ac:	f3bf 8f6f 	isb	sy
 80122b0:	f3bf 8f4f 	dsb	sy
 80122b4:	60fb      	str	r3, [r7, #12]
}
 80122b6:	bf00      	nop
 80122b8:	e7fe      	b.n	80122b8 <prvDeleteTCB+0x54>
	}
 80122ba:	bf00      	nop
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
	...

080122c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122ca:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <prvResetNextTaskUnblockTime+0x38>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d104      	bne.n	80122de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80122d4:	4b0a      	ldr	r3, [pc, #40]	; (8012300 <prvResetNextTaskUnblockTime+0x3c>)
 80122d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80122dc:	e008      	b.n	80122f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122de:	4b07      	ldr	r3, [pc, #28]	; (80122fc <prvResetNextTaskUnblockTime+0x38>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	4a04      	ldr	r2, [pc, #16]	; (8012300 <prvResetNextTaskUnblockTime+0x3c>)
 80122ee:	6013      	str	r3, [r2, #0]
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr
 80122fc:	24001738 	.word	0x24001738
 8012300:	240017a0 	.word	0x240017a0

08012304 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801230a:	4b0b      	ldr	r3, [pc, #44]	; (8012338 <xTaskGetSchedulerState+0x34>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d102      	bne.n	8012318 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012312:	2301      	movs	r3, #1
 8012314:	607b      	str	r3, [r7, #4]
 8012316:	e008      	b.n	801232a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012318:	4b08      	ldr	r3, [pc, #32]	; (801233c <xTaskGetSchedulerState+0x38>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012320:	2302      	movs	r3, #2
 8012322:	607b      	str	r3, [r7, #4]
 8012324:	e001      	b.n	801232a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012326:	2300      	movs	r3, #0
 8012328:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801232a:	687b      	ldr	r3, [r7, #4]
	}
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr
 8012338:	2400178c 	.word	0x2400178c
 801233c:	240017a8 	.word	0x240017a8

08012340 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801234c:	2300      	movs	r3, #0
 801234e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d056      	beq.n	8012404 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012356:	4b2e      	ldr	r3, [pc, #184]	; (8012410 <xTaskPriorityDisinherit+0xd0>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	693a      	ldr	r2, [r7, #16]
 801235c:	429a      	cmp	r2, r3
 801235e:	d00a      	beq.n	8012376 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012364:	f383 8811 	msr	BASEPRI, r3
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	f3bf 8f4f 	dsb	sy
 8012370:	60fb      	str	r3, [r7, #12]
}
 8012372:	bf00      	nop
 8012374:	e7fe      	b.n	8012374 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801237a:	2b00      	cmp	r3, #0
 801237c:	d10a      	bne.n	8012394 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012382:	f383 8811 	msr	BASEPRI, r3
 8012386:	f3bf 8f6f 	isb	sy
 801238a:	f3bf 8f4f 	dsb	sy
 801238e:	60bb      	str	r3, [r7, #8]
}
 8012390:	bf00      	nop
 8012392:	e7fe      	b.n	8012392 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012398:	1e5a      	subs	r2, r3, #1
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d02c      	beq.n	8012404 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d128      	bne.n	8012404 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	3304      	adds	r3, #4
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fe fb0e 	bl	80109d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123d4:	4b0f      	ldr	r3, [pc, #60]	; (8012414 <xTaskPriorityDisinherit+0xd4>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d903      	bls.n	80123e4 <xTaskPriorityDisinherit+0xa4>
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e0:	4a0c      	ldr	r2, [pc, #48]	; (8012414 <xTaskPriorityDisinherit+0xd4>)
 80123e2:	6013      	str	r3, [r2, #0]
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123e8:	4613      	mov	r3, r2
 80123ea:	009b      	lsls	r3, r3, #2
 80123ec:	4413      	add	r3, r2
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	4a09      	ldr	r2, [pc, #36]	; (8012418 <xTaskPriorityDisinherit+0xd8>)
 80123f2:	441a      	add	r2, r3
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	3304      	adds	r3, #4
 80123f8:	4619      	mov	r1, r3
 80123fa:	4610      	mov	r0, r2
 80123fc:	f7fe fa8f 	bl	801091e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012400:	2301      	movs	r3, #1
 8012402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012404:	697b      	ldr	r3, [r7, #20]
	}
 8012406:	4618      	mov	r0, r3
 8012408:	3718      	adds	r7, #24
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	240012ac 	.word	0x240012ac
 8012414:	24001788 	.word	0x24001788
 8012418:	240012b0 	.word	0x240012b0

0801241c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012422:	4b09      	ldr	r3, [pc, #36]	; (8012448 <uxTaskResetEventItemValue+0x2c>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	699b      	ldr	r3, [r3, #24]
 8012428:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801242a:	4b07      	ldr	r3, [pc, #28]	; (8012448 <uxTaskResetEventItemValue+0x2c>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012430:	4b05      	ldr	r3, [pc, #20]	; (8012448 <uxTaskResetEventItemValue+0x2c>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012438:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801243a:	687b      	ldr	r3, [r7, #4]
}
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	240012ac 	.word	0x240012ac

0801244c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012456:	4b21      	ldr	r3, [pc, #132]	; (80124dc <prvAddCurrentTaskToDelayedList+0x90>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801245c:	4b20      	ldr	r3, [pc, #128]	; (80124e0 <prvAddCurrentTaskToDelayedList+0x94>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3304      	adds	r3, #4
 8012462:	4618      	mov	r0, r3
 8012464:	f7fe fab8 	bl	80109d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801246e:	d10a      	bne.n	8012486 <prvAddCurrentTaskToDelayedList+0x3a>
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d007      	beq.n	8012486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012476:	4b1a      	ldr	r3, [pc, #104]	; (80124e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	3304      	adds	r3, #4
 801247c:	4619      	mov	r1, r3
 801247e:	4819      	ldr	r0, [pc, #100]	; (80124e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012480:	f7fe fa4d 	bl	801091e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012484:	e026      	b.n	80124d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4413      	add	r3, r2
 801248c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801248e:	4b14      	ldr	r3, [pc, #80]	; (80124e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012496:	68ba      	ldr	r2, [r7, #8]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	429a      	cmp	r2, r3
 801249c:	d209      	bcs.n	80124b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801249e:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	4b0f      	ldr	r3, [pc, #60]	; (80124e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	3304      	adds	r3, #4
 80124a8:	4619      	mov	r1, r3
 80124aa:	4610      	mov	r0, r2
 80124ac:	f7fe fa5b 	bl	8010966 <vListInsert>
}
 80124b0:	e010      	b.n	80124d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124b2:	4b0e      	ldr	r3, [pc, #56]	; (80124ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	4b0a      	ldr	r3, [pc, #40]	; (80124e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	3304      	adds	r3, #4
 80124bc:	4619      	mov	r1, r3
 80124be:	4610      	mov	r0, r2
 80124c0:	f7fe fa51 	bl	8010966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80124c4:	4b0a      	ldr	r3, [pc, #40]	; (80124f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	68ba      	ldr	r2, [r7, #8]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d202      	bcs.n	80124d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80124ce:	4a08      	ldr	r2, [pc, #32]	; (80124f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	6013      	str	r3, [r2, #0]
}
 80124d4:	bf00      	nop
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	24001784 	.word	0x24001784
 80124e0:	240012ac 	.word	0x240012ac
 80124e4:	2400176c 	.word	0x2400176c
 80124e8:	2400173c 	.word	0x2400173c
 80124ec:	24001738 	.word	0x24001738
 80124f0:	240017a0 	.word	0x240017a0

080124f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b08a      	sub	sp, #40	; 0x28
 80124f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80124fa:	2300      	movs	r3, #0
 80124fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80124fe:	f000 fb07 	bl	8012b10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012502:	4b1c      	ldr	r3, [pc, #112]	; (8012574 <xTimerCreateTimerTask+0x80>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d021      	beq.n	801254e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801250e:	2300      	movs	r3, #0
 8012510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012512:	1d3a      	adds	r2, r7, #4
 8012514:	f107 0108 	add.w	r1, r7, #8
 8012518:	f107 030c 	add.w	r3, r7, #12
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe f81b 	bl	8010558 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012522:	6879      	ldr	r1, [r7, #4]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	68fa      	ldr	r2, [r7, #12]
 8012528:	9202      	str	r2, [sp, #8]
 801252a:	9301      	str	r3, [sp, #4]
 801252c:	2302      	movs	r3, #2
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	2300      	movs	r3, #0
 8012532:	460a      	mov	r2, r1
 8012534:	4910      	ldr	r1, [pc, #64]	; (8012578 <xTimerCreateTimerTask+0x84>)
 8012536:	4811      	ldr	r0, [pc, #68]	; (801257c <xTimerCreateTimerTask+0x88>)
 8012538:	f7ff f820 	bl	801157c <xTaskCreateStatic>
 801253c:	4603      	mov	r3, r0
 801253e:	4a10      	ldr	r2, [pc, #64]	; (8012580 <xTimerCreateTimerTask+0x8c>)
 8012540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012542:	4b0f      	ldr	r3, [pc, #60]	; (8012580 <xTimerCreateTimerTask+0x8c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801254a:	2301      	movs	r3, #1
 801254c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10a      	bne.n	801256a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	613b      	str	r3, [r7, #16]
}
 8012566:	bf00      	nop
 8012568:	e7fe      	b.n	8012568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801256a:	697b      	ldr	r3, [r7, #20]
}
 801256c:	4618      	mov	r0, r3
 801256e:	3718      	adds	r7, #24
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	240017dc 	.word	0x240017dc
 8012578:	08014138 	.word	0x08014138
 801257c:	080126b9 	.word	0x080126b9
 8012580:	240017e0 	.word	0x240017e0

08012584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b08a      	sub	sp, #40	; 0x28
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
 8012590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012592:	2300      	movs	r3, #0
 8012594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d10a      	bne.n	80125b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	623b      	str	r3, [r7, #32]
}
 80125ae:	bf00      	nop
 80125b0:	e7fe      	b.n	80125b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80125b2:	4b1a      	ldr	r3, [pc, #104]	; (801261c <xTimerGenericCommand+0x98>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d02a      	beq.n	8012610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	2b05      	cmp	r3, #5
 80125ca:	dc18      	bgt.n	80125fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80125cc:	f7ff fe9a 	bl	8012304 <xTaskGetSchedulerState>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d109      	bne.n	80125ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80125d6:	4b11      	ldr	r3, [pc, #68]	; (801261c <xTimerGenericCommand+0x98>)
 80125d8:	6818      	ldr	r0, [r3, #0]
 80125da:	f107 0110 	add.w	r1, r7, #16
 80125de:	2300      	movs	r3, #0
 80125e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125e2:	f7fe fb27 	bl	8010c34 <xQueueGenericSend>
 80125e6:	6278      	str	r0, [r7, #36]	; 0x24
 80125e8:	e012      	b.n	8012610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125ea:	4b0c      	ldr	r3, [pc, #48]	; (801261c <xTimerGenericCommand+0x98>)
 80125ec:	6818      	ldr	r0, [r3, #0]
 80125ee:	f107 0110 	add.w	r1, r7, #16
 80125f2:	2300      	movs	r3, #0
 80125f4:	2200      	movs	r2, #0
 80125f6:	f7fe fb1d 	bl	8010c34 <xQueueGenericSend>
 80125fa:	6278      	str	r0, [r7, #36]	; 0x24
 80125fc:	e008      	b.n	8012610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80125fe:	4b07      	ldr	r3, [pc, #28]	; (801261c <xTimerGenericCommand+0x98>)
 8012600:	6818      	ldr	r0, [r3, #0]
 8012602:	f107 0110 	add.w	r1, r7, #16
 8012606:	2300      	movs	r3, #0
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	f7fe fc11 	bl	8010e30 <xQueueGenericSendFromISR>
 801260e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012612:	4618      	mov	r0, r3
 8012614:	3728      	adds	r7, #40	; 0x28
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	240017dc 	.word	0x240017dc

08012620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b088      	sub	sp, #32
 8012624:	af02      	add	r7, sp, #8
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801262a:	4b22      	ldr	r3, [pc, #136]	; (80126b4 <prvProcessExpiredTimer+0x94>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	3304      	adds	r3, #4
 8012638:	4618      	mov	r0, r3
 801263a:	f7fe f9cd 	bl	80109d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012644:	f003 0304 	and.w	r3, r3, #4
 8012648:	2b00      	cmp	r3, #0
 801264a:	d022      	beq.n	8012692 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	699a      	ldr	r2, [r3, #24]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	18d1      	adds	r1, r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	683a      	ldr	r2, [r7, #0]
 8012658:	6978      	ldr	r0, [r7, #20]
 801265a:	f000 f8d1 	bl	8012800 <prvInsertTimerInActiveList>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d01f      	beq.n	80126a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012664:	2300      	movs	r3, #0
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	2300      	movs	r3, #0
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	2100      	movs	r1, #0
 801266e:	6978      	ldr	r0, [r7, #20]
 8012670:	f7ff ff88 	bl	8012584 <xTimerGenericCommand>
 8012674:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d113      	bne.n	80126a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012680:	f383 8811 	msr	BASEPRI, r3
 8012684:	f3bf 8f6f 	isb	sy
 8012688:	f3bf 8f4f 	dsb	sy
 801268c:	60fb      	str	r3, [r7, #12]
}
 801268e:	bf00      	nop
 8012690:	e7fe      	b.n	8012690 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012698:	f023 0301 	bic.w	r3, r3, #1
 801269c:	b2da      	uxtb	r2, r3
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	6a1b      	ldr	r3, [r3, #32]
 80126a8:	6978      	ldr	r0, [r7, #20]
 80126aa:	4798      	blx	r3
}
 80126ac:	bf00      	nop
 80126ae:	3718      	adds	r7, #24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	240017d4 	.word	0x240017d4

080126b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80126c0:	f107 0308 	add.w	r3, r7, #8
 80126c4:	4618      	mov	r0, r3
 80126c6:	f000 f857 	bl	8012778 <prvGetNextExpireTime>
 80126ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	4619      	mov	r1, r3
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f000 f803 	bl	80126dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80126d6:	f000 f8d5 	bl	8012884 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80126da:	e7f1      	b.n	80126c0 <prvTimerTask+0x8>

080126dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80126e6:	f7ff f985 	bl	80119f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80126ea:	f107 0308 	add.w	r3, r7, #8
 80126ee:	4618      	mov	r0, r3
 80126f0:	f000 f866 	bl	80127c0 <prvSampleTimeNow>
 80126f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d130      	bne.n	801275e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d10a      	bne.n	8012718 <prvProcessTimerOrBlockTask+0x3c>
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	429a      	cmp	r2, r3
 8012708:	d806      	bhi.n	8012718 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801270a:	f7ff f981 	bl	8011a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801270e:	68f9      	ldr	r1, [r7, #12]
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff ff85 	bl	8012620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012716:	e024      	b.n	8012762 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d008      	beq.n	8012730 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801271e:	4b13      	ldr	r3, [pc, #76]	; (801276c <prvProcessTimerOrBlockTask+0x90>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d101      	bne.n	801272c <prvProcessTimerOrBlockTask+0x50>
 8012728:	2301      	movs	r3, #1
 801272a:	e000      	b.n	801272e <prvProcessTimerOrBlockTask+0x52>
 801272c:	2300      	movs	r3, #0
 801272e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012730:	4b0f      	ldr	r3, [pc, #60]	; (8012770 <prvProcessTimerOrBlockTask+0x94>)
 8012732:	6818      	ldr	r0, [r3, #0]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	683a      	ldr	r2, [r7, #0]
 801273c:	4619      	mov	r1, r3
 801273e:	f7fe fee9 	bl	8011514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012742:	f7ff f965 	bl	8011a10 <xTaskResumeAll>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d10a      	bne.n	8012762 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801274c:	4b09      	ldr	r3, [pc, #36]	; (8012774 <prvProcessTimerOrBlockTask+0x98>)
 801274e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012752:	601a      	str	r2, [r3, #0]
 8012754:	f3bf 8f4f 	dsb	sy
 8012758:	f3bf 8f6f 	isb	sy
}
 801275c:	e001      	b.n	8012762 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801275e:	f7ff f957 	bl	8011a10 <xTaskResumeAll>
}
 8012762:	bf00      	nop
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	240017d8 	.word	0x240017d8
 8012770:	240017dc 	.word	0x240017dc
 8012774:	e000ed04 	.word	0xe000ed04

08012778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012780:	4b0e      	ldr	r3, [pc, #56]	; (80127bc <prvGetNextExpireTime+0x44>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d101      	bne.n	801278e <prvGetNextExpireTime+0x16>
 801278a:	2201      	movs	r2, #1
 801278c:	e000      	b.n	8012790 <prvGetNextExpireTime+0x18>
 801278e:	2200      	movs	r2, #0
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d105      	bne.n	80127a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801279c:	4b07      	ldr	r3, [pc, #28]	; (80127bc <prvGetNextExpireTime+0x44>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	60fb      	str	r3, [r7, #12]
 80127a6:	e001      	b.n	80127ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80127a8:	2300      	movs	r3, #0
 80127aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80127ac:	68fb      	ldr	r3, [r7, #12]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3714      	adds	r7, #20
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	240017d4 	.word	0x240017d4

080127c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80127c8:	f7ff f9c0 	bl	8011b4c <xTaskGetTickCount>
 80127cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80127ce:	4b0b      	ldr	r3, [pc, #44]	; (80127fc <prvSampleTimeNow+0x3c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d205      	bcs.n	80127e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80127d8:	f000 f936 	bl	8012a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	e002      	b.n	80127ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80127ea:	4a04      	ldr	r2, [pc, #16]	; (80127fc <prvSampleTimeNow+0x3c>)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80127f0:	68fb      	ldr	r3, [r7, #12]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	240017e4 	.word	0x240017e4

08012800 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801280e:	2300      	movs	r3, #0
 8012810:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	68fa      	ldr	r2, [r7, #12]
 801281c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801281e:	68ba      	ldr	r2, [r7, #8]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	429a      	cmp	r2, r3
 8012824:	d812      	bhi.n	801284c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	1ad2      	subs	r2, r2, r3
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	699b      	ldr	r3, [r3, #24]
 8012830:	429a      	cmp	r2, r3
 8012832:	d302      	bcc.n	801283a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012834:	2301      	movs	r3, #1
 8012836:	617b      	str	r3, [r7, #20]
 8012838:	e01b      	b.n	8012872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801283a:	4b10      	ldr	r3, [pc, #64]	; (801287c <prvInsertTimerInActiveList+0x7c>)
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3304      	adds	r3, #4
 8012842:	4619      	mov	r1, r3
 8012844:	4610      	mov	r0, r2
 8012846:	f7fe f88e 	bl	8010966 <vListInsert>
 801284a:	e012      	b.n	8012872 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d206      	bcs.n	8012862 <prvInsertTimerInActiveList+0x62>
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	429a      	cmp	r2, r3
 801285a:	d302      	bcc.n	8012862 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801285c:	2301      	movs	r3, #1
 801285e:	617b      	str	r3, [r7, #20]
 8012860:	e007      	b.n	8012872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012862:	4b07      	ldr	r3, [pc, #28]	; (8012880 <prvInsertTimerInActiveList+0x80>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	3304      	adds	r3, #4
 801286a:	4619      	mov	r1, r3
 801286c:	4610      	mov	r0, r2
 801286e:	f7fe f87a 	bl	8010966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012872:	697b      	ldr	r3, [r7, #20]
}
 8012874:	4618      	mov	r0, r3
 8012876:	3718      	adds	r7, #24
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	240017d8 	.word	0x240017d8
 8012880:	240017d4 	.word	0x240017d4

08012884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b08e      	sub	sp, #56	; 0x38
 8012888:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801288a:	e0ca      	b.n	8012a22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	da18      	bge.n	80128c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012892:	1d3b      	adds	r3, r7, #4
 8012894:	3304      	adds	r3, #4
 8012896:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289a:	2b00      	cmp	r3, #0
 801289c:	d10a      	bne.n	80128b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	61fb      	str	r3, [r7, #28]
}
 80128b0:	bf00      	nop
 80128b2:	e7fe      	b.n	80128b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128ba:	6850      	ldr	r0, [r2, #4]
 80128bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128be:	6892      	ldr	r2, [r2, #8]
 80128c0:	4611      	mov	r1, r2
 80128c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f2c0 80aa 	blt.w	8012a20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80128d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d2:	695b      	ldr	r3, [r3, #20]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d004      	beq.n	80128e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80128d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128da:	3304      	adds	r3, #4
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fe f87b 	bl	80109d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80128e2:	463b      	mov	r3, r7
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff ff6b 	bl	80127c0 <prvSampleTimeNow>
 80128ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b09      	cmp	r3, #9
 80128f0:	f200 8097 	bhi.w	8012a22 <prvProcessReceivedCommands+0x19e>
 80128f4:	a201      	add	r2, pc, #4	; (adr r2, 80128fc <prvProcessReceivedCommands+0x78>)
 80128f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128fa:	bf00      	nop
 80128fc:	08012925 	.word	0x08012925
 8012900:	08012925 	.word	0x08012925
 8012904:	08012925 	.word	0x08012925
 8012908:	08012999 	.word	0x08012999
 801290c:	080129ad 	.word	0x080129ad
 8012910:	080129f7 	.word	0x080129f7
 8012914:	08012925 	.word	0x08012925
 8012918:	08012925 	.word	0x08012925
 801291c:	08012999 	.word	0x08012999
 8012920:	080129ad 	.word	0x080129ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801292a:	f043 0301 	orr.w	r3, r3, #1
 801292e:	b2da      	uxtb	r2, r3
 8012930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	699b      	ldr	r3, [r3, #24]
 801293c:	18d1      	adds	r1, r2, r3
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012944:	f7ff ff5c 	bl	8012800 <prvInsertTimerInActiveList>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d069      	beq.n	8012a22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012950:	6a1b      	ldr	r3, [r3, #32]
 8012952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801295c:	f003 0304 	and.w	r3, r3, #4
 8012960:	2b00      	cmp	r3, #0
 8012962:	d05e      	beq.n	8012a22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012964:	68ba      	ldr	r2, [r7, #8]
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	699b      	ldr	r3, [r3, #24]
 801296a:	441a      	add	r2, r3
 801296c:	2300      	movs	r3, #0
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	2300      	movs	r3, #0
 8012972:	2100      	movs	r1, #0
 8012974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012976:	f7ff fe05 	bl	8012584 <xTimerGenericCommand>
 801297a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801297c:	6a3b      	ldr	r3, [r7, #32]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d14f      	bne.n	8012a22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	61bb      	str	r3, [r7, #24]
}
 8012994:	bf00      	nop
 8012996:	e7fe      	b.n	8012996 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801299e:	f023 0301 	bic.w	r3, r3, #1
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80129aa:	e03a      	b.n	8012a22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80129ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129b2:	f043 0301 	orr.w	r3, r3, #1
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80129be:	68ba      	ldr	r2, [r7, #8]
 80129c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c6:	699b      	ldr	r3, [r3, #24]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d10a      	bne.n	80129e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80129cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	617b      	str	r3, [r7, #20]
}
 80129de:	bf00      	nop
 80129e0:	e7fe      	b.n	80129e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80129e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e4:	699a      	ldr	r2, [r3, #24]
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	18d1      	adds	r1, r2, r3
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129f0:	f7ff ff06 	bl	8012800 <prvInsertTimerInActiveList>
					break;
 80129f4:	e015      	b.n	8012a22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80129f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129fc:	f003 0302 	and.w	r3, r3, #2
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d103      	bne.n	8012a0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a06:	f000 fbfb 	bl	8013200 <vPortFree>
 8012a0a:	e00a      	b.n	8012a22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a12:	f023 0301 	bic.w	r3, r3, #1
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012a1e:	e000      	b.n	8012a22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012a20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a22:	4b08      	ldr	r3, [pc, #32]	; (8012a44 <prvProcessReceivedCommands+0x1c0>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	1d39      	adds	r1, r7, #4
 8012a28:	2200      	movs	r2, #0
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fe fa9c 	bl	8010f68 <xQueueReceive>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f47f af2a 	bne.w	801288c <prvProcessReceivedCommands+0x8>
	}
}
 8012a38:	bf00      	nop
 8012a3a:	bf00      	nop
 8012a3c:	3730      	adds	r7, #48	; 0x30
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	240017dc 	.word	0x240017dc

08012a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b088      	sub	sp, #32
 8012a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012a4e:	e048      	b.n	8012ae2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012a50:	4b2d      	ldr	r3, [pc, #180]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a5a:	4b2b      	ldr	r3, [pc, #172]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	3304      	adds	r3, #4
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7fd ffb5 	bl	80109d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a7c:	f003 0304 	and.w	r3, r3, #4
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d02e      	beq.n	8012ae2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	699b      	ldr	r3, [r3, #24]
 8012a88:	693a      	ldr	r2, [r7, #16]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012a8e:	68ba      	ldr	r2, [r7, #8]
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d90e      	bls.n	8012ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012aa2:	4b19      	ldr	r3, [pc, #100]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	4619      	mov	r1, r3
 8012aac:	4610      	mov	r0, r2
 8012aae:	f7fd ff5a 	bl	8010966 <vListInsert>
 8012ab2:	e016      	b.n	8012ae2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	9300      	str	r3, [sp, #0]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	693a      	ldr	r2, [r7, #16]
 8012abc:	2100      	movs	r1, #0
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f7ff fd60 	bl	8012584 <xTimerGenericCommand>
 8012ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10a      	bne.n	8012ae2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad0:	f383 8811 	msr	BASEPRI, r3
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	603b      	str	r3, [r7, #0]
}
 8012ade:	bf00      	nop
 8012ae0:	e7fe      	b.n	8012ae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ae2:	4b09      	ldr	r3, [pc, #36]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d1b1      	bne.n	8012a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012af2:	4b06      	ldr	r3, [pc, #24]	; (8012b0c <prvSwitchTimerLists+0xc4>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4a04      	ldr	r2, [pc, #16]	; (8012b08 <prvSwitchTimerLists+0xc0>)
 8012af8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012afa:	4a04      	ldr	r2, [pc, #16]	; (8012b0c <prvSwitchTimerLists+0xc4>)
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	6013      	str	r3, [r2, #0]
}
 8012b00:	bf00      	nop
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	240017d4 	.word	0x240017d4
 8012b0c:	240017d8 	.word	0x240017d8

08012b10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012b16:	f000 f985 	bl	8012e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012b1a:	4b15      	ldr	r3, [pc, #84]	; (8012b70 <prvCheckForValidListAndQueue+0x60>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d120      	bne.n	8012b64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012b22:	4814      	ldr	r0, [pc, #80]	; (8012b74 <prvCheckForValidListAndQueue+0x64>)
 8012b24:	f7fd fece 	bl	80108c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012b28:	4813      	ldr	r0, [pc, #76]	; (8012b78 <prvCheckForValidListAndQueue+0x68>)
 8012b2a:	f7fd fecb 	bl	80108c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012b2e:	4b13      	ldr	r3, [pc, #76]	; (8012b7c <prvCheckForValidListAndQueue+0x6c>)
 8012b30:	4a10      	ldr	r2, [pc, #64]	; (8012b74 <prvCheckForValidListAndQueue+0x64>)
 8012b32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012b34:	4b12      	ldr	r3, [pc, #72]	; (8012b80 <prvCheckForValidListAndQueue+0x70>)
 8012b36:	4a10      	ldr	r2, [pc, #64]	; (8012b78 <prvCheckForValidListAndQueue+0x68>)
 8012b38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	9300      	str	r3, [sp, #0]
 8012b3e:	4b11      	ldr	r3, [pc, #68]	; (8012b84 <prvCheckForValidListAndQueue+0x74>)
 8012b40:	4a11      	ldr	r2, [pc, #68]	; (8012b88 <prvCheckForValidListAndQueue+0x78>)
 8012b42:	2110      	movs	r1, #16
 8012b44:	200a      	movs	r0, #10
 8012b46:	f7fd ffd9 	bl	8010afc <xQueueGenericCreateStatic>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	4a08      	ldr	r2, [pc, #32]	; (8012b70 <prvCheckForValidListAndQueue+0x60>)
 8012b4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012b50:	4b07      	ldr	r3, [pc, #28]	; (8012b70 <prvCheckForValidListAndQueue+0x60>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d005      	beq.n	8012b64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012b58:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <prvCheckForValidListAndQueue+0x60>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	490b      	ldr	r1, [pc, #44]	; (8012b8c <prvCheckForValidListAndQueue+0x7c>)
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fe fcae 	bl	80114c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b64:	f000 f98e 	bl	8012e84 <vPortExitCritical>
}
 8012b68:	bf00      	nop
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	240017dc 	.word	0x240017dc
 8012b74:	240017ac 	.word	0x240017ac
 8012b78:	240017c0 	.word	0x240017c0
 8012b7c:	240017d4 	.word	0x240017d4
 8012b80:	240017d8 	.word	0x240017d8
 8012b84:	24001888 	.word	0x24001888
 8012b88:	240017e8 	.word	0x240017e8
 8012b8c:	08014140 	.word	0x08014140

08012b90 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b08a      	sub	sp, #40	; 0x28
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012b9e:	f06f 0301 	mvn.w	r3, #1
 8012ba2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012bb0:	4b06      	ldr	r3, [pc, #24]	; (8012bcc <xTimerPendFunctionCallFromISR+0x3c>)
 8012bb2:	6818      	ldr	r0, [r3, #0]
 8012bb4:	f107 0114 	add.w	r1, r7, #20
 8012bb8:	2300      	movs	r3, #0
 8012bba:	683a      	ldr	r2, [r7, #0]
 8012bbc:	f7fe f938 	bl	8010e30 <xQueueGenericSendFromISR>
 8012bc0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3728      	adds	r7, #40	; 0x28
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	240017dc 	.word	0x240017dc

08012bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b085      	sub	sp, #20
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	3b04      	subs	r3, #4
 8012be0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	3b04      	subs	r3, #4
 8012bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	f023 0201 	bic.w	r2, r3, #1
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	3b04      	subs	r3, #4
 8012bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c00:	4a0c      	ldr	r2, [pc, #48]	; (8012c34 <pxPortInitialiseStack+0x64>)
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	3b14      	subs	r3, #20
 8012c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	3b04      	subs	r3, #4
 8012c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f06f 0202 	mvn.w	r2, #2
 8012c1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	3b20      	subs	r3, #32
 8012c24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c26:	68fb      	ldr	r3, [r7, #12]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3714      	adds	r7, #20
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr
 8012c34:	08012c39 	.word	0x08012c39

08012c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c42:	4b12      	ldr	r3, [pc, #72]	; (8012c8c <prvTaskExitError+0x54>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c4a:	d00a      	beq.n	8012c62 <prvTaskExitError+0x2a>
	__asm volatile
 8012c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c50:	f383 8811 	msr	BASEPRI, r3
 8012c54:	f3bf 8f6f 	isb	sy
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	60fb      	str	r3, [r7, #12]
}
 8012c5e:	bf00      	nop
 8012c60:	e7fe      	b.n	8012c60 <prvTaskExitError+0x28>
	__asm volatile
 8012c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c66:	f383 8811 	msr	BASEPRI, r3
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	f3bf 8f4f 	dsb	sy
 8012c72:	60bb      	str	r3, [r7, #8]
}
 8012c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c76:	bf00      	nop
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d0fc      	beq.n	8012c78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c7e:	bf00      	nop
 8012c80:	bf00      	nop
 8012c82:	3714      	adds	r7, #20
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr
 8012c8c:	24000014 	.word	0x24000014

08012c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c90:	4b07      	ldr	r3, [pc, #28]	; (8012cb0 <pxCurrentTCBConst2>)
 8012c92:	6819      	ldr	r1, [r3, #0]
 8012c94:	6808      	ldr	r0, [r1, #0]
 8012c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9a:	f380 8809 	msr	PSP, r0
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f04f 0000 	mov.w	r0, #0
 8012ca6:	f380 8811 	msr	BASEPRI, r0
 8012caa:	4770      	bx	lr
 8012cac:	f3af 8000 	nop.w

08012cb0 <pxCurrentTCBConst2>:
 8012cb0:	240012ac 	.word	0x240012ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop

08012cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012cb8:	4808      	ldr	r0, [pc, #32]	; (8012cdc <prvPortStartFirstTask+0x24>)
 8012cba:	6800      	ldr	r0, [r0, #0]
 8012cbc:	6800      	ldr	r0, [r0, #0]
 8012cbe:	f380 8808 	msr	MSP, r0
 8012cc2:	f04f 0000 	mov.w	r0, #0
 8012cc6:	f380 8814 	msr	CONTROL, r0
 8012cca:	b662      	cpsie	i
 8012ccc:	b661      	cpsie	f
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	df00      	svc	0
 8012cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012cda:	bf00      	nop
 8012cdc:	e000ed08 	.word	0xe000ed08

08012ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012ce6:	4b46      	ldr	r3, [pc, #280]	; (8012e00 <xPortStartScheduler+0x120>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4a46      	ldr	r2, [pc, #280]	; (8012e04 <xPortStartScheduler+0x124>)
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d10a      	bne.n	8012d06 <xPortStartScheduler+0x26>
	__asm volatile
 8012cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	613b      	str	r3, [r7, #16]
}
 8012d02:	bf00      	nop
 8012d04:	e7fe      	b.n	8012d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d06:	4b3e      	ldr	r3, [pc, #248]	; (8012e00 <xPortStartScheduler+0x120>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4a3f      	ldr	r2, [pc, #252]	; (8012e08 <xPortStartScheduler+0x128>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d10a      	bne.n	8012d26 <xPortStartScheduler+0x46>
	__asm volatile
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	60fb      	str	r3, [r7, #12]
}
 8012d22:	bf00      	nop
 8012d24:	e7fe      	b.n	8012d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d26:	4b39      	ldr	r3, [pc, #228]	; (8012e0c <xPortStartScheduler+0x12c>)
 8012d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	22ff      	movs	r2, #255	; 0xff
 8012d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d40:	78fb      	ldrb	r3, [r7, #3]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	4b31      	ldr	r3, [pc, #196]	; (8012e10 <xPortStartScheduler+0x130>)
 8012d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d4e:	4b31      	ldr	r3, [pc, #196]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d50:	2207      	movs	r2, #7
 8012d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d54:	e009      	b.n	8012d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012d56:	4b2f      	ldr	r3, [pc, #188]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	4a2d      	ldr	r2, [pc, #180]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	005b      	lsls	r3, r3, #1
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d6a:	78fb      	ldrb	r3, [r7, #3]
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d72:	2b80      	cmp	r3, #128	; 0x80
 8012d74:	d0ef      	beq.n	8012d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d76:	4b27      	ldr	r3, [pc, #156]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f1c3 0307 	rsb	r3, r3, #7
 8012d7e:	2b04      	cmp	r3, #4
 8012d80:	d00a      	beq.n	8012d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8012d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d86:	f383 8811 	msr	BASEPRI, r3
 8012d8a:	f3bf 8f6f 	isb	sy
 8012d8e:	f3bf 8f4f 	dsb	sy
 8012d92:	60bb      	str	r3, [r7, #8]
}
 8012d94:	bf00      	nop
 8012d96:	e7fe      	b.n	8012d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d98:	4b1e      	ldr	r3, [pc, #120]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	021b      	lsls	r3, r3, #8
 8012d9e:	4a1d      	ldr	r2, [pc, #116]	; (8012e14 <xPortStartScheduler+0x134>)
 8012da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012da2:	4b1c      	ldr	r3, [pc, #112]	; (8012e14 <xPortStartScheduler+0x134>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012daa:	4a1a      	ldr	r2, [pc, #104]	; (8012e14 <xPortStartScheduler+0x134>)
 8012dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012db6:	4b18      	ldr	r3, [pc, #96]	; (8012e18 <xPortStartScheduler+0x138>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a17      	ldr	r2, [pc, #92]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012dc2:	4b15      	ldr	r3, [pc, #84]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4a14      	ldr	r2, [pc, #80]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012dce:	f000 f8dd 	bl	8012f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012dd2:	4b12      	ldr	r3, [pc, #72]	; (8012e1c <xPortStartScheduler+0x13c>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012dd8:	f000 f8fc 	bl	8012fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ddc:	4b10      	ldr	r3, [pc, #64]	; (8012e20 <xPortStartScheduler+0x140>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4a0f      	ldr	r2, [pc, #60]	; (8012e20 <xPortStartScheduler+0x140>)
 8012de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012de8:	f7ff ff66 	bl	8012cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012dec:	f7fe ff80 	bl	8011cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8012df0:	f7ff ff22 	bl	8012c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3718      	adds	r7, #24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	e000ed00 	.word	0xe000ed00
 8012e04:	410fc271 	.word	0x410fc271
 8012e08:	410fc270 	.word	0x410fc270
 8012e0c:	e000e400 	.word	0xe000e400
 8012e10:	240018d8 	.word	0x240018d8
 8012e14:	240018dc 	.word	0x240018dc
 8012e18:	e000ed20 	.word	0xe000ed20
 8012e1c:	24000014 	.word	0x24000014
 8012e20:	e000ef34 	.word	0xe000ef34

08012e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
	__asm volatile
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	f383 8811 	msr	BASEPRI, r3
 8012e32:	f3bf 8f6f 	isb	sy
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	607b      	str	r3, [r7, #4]
}
 8012e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e3e:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3301      	adds	r3, #1
 8012e44:	4a0d      	ldr	r2, [pc, #52]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e48:	4b0c      	ldr	r3, [pc, #48]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d10f      	bne.n	8012e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e50:	4b0b      	ldr	r3, [pc, #44]	; (8012e80 <vPortEnterCritical+0x5c>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00a      	beq.n	8012e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8012e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	603b      	str	r3, [r7, #0]
}
 8012e6c:	bf00      	nop
 8012e6e:	e7fe      	b.n	8012e6e <vPortEnterCritical+0x4a>
	}
}
 8012e70:	bf00      	nop
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	24000014 	.word	0x24000014
 8012e80:	e000ed04 	.word	0xe000ed04

08012e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e8a:	4b12      	ldr	r3, [pc, #72]	; (8012ed4 <vPortExitCritical+0x50>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10a      	bne.n	8012ea8 <vPortExitCritical+0x24>
	__asm volatile
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	607b      	str	r3, [r7, #4]
}
 8012ea4:	bf00      	nop
 8012ea6:	e7fe      	b.n	8012ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012ea8:	4b0a      	ldr	r3, [pc, #40]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	4a09      	ldr	r2, [pc, #36]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012eb2:	4b08      	ldr	r3, [pc, #32]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d105      	bne.n	8012ec6 <vPortExitCritical+0x42>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	f383 8811 	msr	BASEPRI, r3
}
 8012ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012ec6:	bf00      	nop
 8012ec8:	370c      	adds	r7, #12
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	24000014 	.word	0x24000014
	...

08012ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012ee0:	f3ef 8009 	mrs	r0, PSP
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	4b15      	ldr	r3, [pc, #84]	; (8012f40 <pxCurrentTCBConst>)
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	f01e 0f10 	tst.w	lr, #16
 8012ef0:	bf08      	it	eq
 8012ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efa:	6010      	str	r0, [r2, #0]
 8012efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f04:	f380 8811 	msr	BASEPRI, r0
 8012f08:	f3bf 8f4f 	dsb	sy
 8012f0c:	f3bf 8f6f 	isb	sy
 8012f10:	f7fe feee 	bl	8011cf0 <vTaskSwitchContext>
 8012f14:	f04f 0000 	mov.w	r0, #0
 8012f18:	f380 8811 	msr	BASEPRI, r0
 8012f1c:	bc09      	pop	{r0, r3}
 8012f1e:	6819      	ldr	r1, [r3, #0]
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f26:	f01e 0f10 	tst.w	lr, #16
 8012f2a:	bf08      	it	eq
 8012f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f30:	f380 8809 	msr	PSP, r0
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop
 8012f3c:	f3af 8000 	nop.w

08012f40 <pxCurrentTCBConst>:
 8012f40:	240012ac 	.word	0x240012ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f44:	bf00      	nop
 8012f46:	bf00      	nop

08012f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f52:	f383 8811 	msr	BASEPRI, r3
 8012f56:	f3bf 8f6f 	isb	sy
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	607b      	str	r3, [r7, #4]
}
 8012f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f62:	f7fe fe03 	bl	8011b6c <xTaskIncrementTick>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d003      	beq.n	8012f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f6c:	4b06      	ldr	r3, [pc, #24]	; (8012f88 <xPortSysTickHandler+0x40>)
 8012f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f72:	601a      	str	r2, [r3, #0]
 8012f74:	2300      	movs	r3, #0
 8012f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	f383 8811 	msr	BASEPRI, r3
}
 8012f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f80:	bf00      	nop
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	e000ed04 	.word	0xe000ed04

08012f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f90:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <vPortSetupTimerInterrupt+0x34>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f96:	4b0b      	ldr	r3, [pc, #44]	; (8012fc4 <vPortSetupTimerInterrupt+0x38>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f9c:	4b0a      	ldr	r3, [pc, #40]	; (8012fc8 <vPortSetupTimerInterrupt+0x3c>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a0a      	ldr	r2, [pc, #40]	; (8012fcc <vPortSetupTimerInterrupt+0x40>)
 8012fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fa6:	099b      	lsrs	r3, r3, #6
 8012fa8:	4a09      	ldr	r2, [pc, #36]	; (8012fd0 <vPortSetupTimerInterrupt+0x44>)
 8012faa:	3b01      	subs	r3, #1
 8012fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fae:	4b04      	ldr	r3, [pc, #16]	; (8012fc0 <vPortSetupTimerInterrupt+0x34>)
 8012fb0:	2207      	movs	r2, #7
 8012fb2:	601a      	str	r2, [r3, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop
 8012fc0:	e000e010 	.word	0xe000e010
 8012fc4:	e000e018 	.word	0xe000e018
 8012fc8:	24000004 	.word	0x24000004
 8012fcc:	10624dd3 	.word	0x10624dd3
 8012fd0:	e000e014 	.word	0xe000e014

08012fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012fe4 <vPortEnableVFP+0x10>
 8012fd8:	6801      	ldr	r1, [r0, #0]
 8012fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012fde:	6001      	str	r1, [r0, #0]
 8012fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012fe2:	bf00      	nop
 8012fe4:	e000ed88 	.word	0xe000ed88

08012fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012fee:	f3ef 8305 	mrs	r3, IPSR
 8012ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b0f      	cmp	r3, #15
 8012ff8:	d914      	bls.n	8013024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012ffa:	4a17      	ldr	r2, [pc, #92]	; (8013058 <vPortValidateInterruptPriority+0x70>)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	4413      	add	r3, r2
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013004:	4b15      	ldr	r3, [pc, #84]	; (801305c <vPortValidateInterruptPriority+0x74>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	7afa      	ldrb	r2, [r7, #11]
 801300a:	429a      	cmp	r2, r3
 801300c:	d20a      	bcs.n	8013024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	607b      	str	r3, [r7, #4]
}
 8013020:	bf00      	nop
 8013022:	e7fe      	b.n	8013022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013024:	4b0e      	ldr	r3, [pc, #56]	; (8013060 <vPortValidateInterruptPriority+0x78>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801302c:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <vPortValidateInterruptPriority+0x7c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	429a      	cmp	r2, r3
 8013032:	d90a      	bls.n	801304a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	603b      	str	r3, [r7, #0]
}
 8013046:	bf00      	nop
 8013048:	e7fe      	b.n	8013048 <vPortValidateInterruptPriority+0x60>
	}
 801304a:	bf00      	nop
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	e000e3f0 	.word	0xe000e3f0
 801305c:	240018d8 	.word	0x240018d8
 8013060:	e000ed0c 	.word	0xe000ed0c
 8013064:	240018dc 	.word	0x240018dc

08013068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b08a      	sub	sp, #40	; 0x28
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013070:	2300      	movs	r3, #0
 8013072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013074:	f7fe fcbe 	bl	80119f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013078:	4b5b      	ldr	r3, [pc, #364]	; (80131e8 <pvPortMalloc+0x180>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d101      	bne.n	8013084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013080:	f000 f920 	bl	80132c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013084:	4b59      	ldr	r3, [pc, #356]	; (80131ec <pvPortMalloc+0x184>)
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	4013      	ands	r3, r2
 801308c:	2b00      	cmp	r3, #0
 801308e:	f040 8093 	bne.w	80131b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d01d      	beq.n	80130d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013098:	2208      	movs	r2, #8
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4413      	add	r3, r2
 801309e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f003 0307 	and.w	r3, r3, #7
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d014      	beq.n	80130d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f023 0307 	bic.w	r3, r3, #7
 80130b0:	3308      	adds	r3, #8
 80130b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f003 0307 	and.w	r3, r3, #7
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d00a      	beq.n	80130d4 <pvPortMalloc+0x6c>
	__asm volatile
 80130be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c2:	f383 8811 	msr	BASEPRI, r3
 80130c6:	f3bf 8f6f 	isb	sy
 80130ca:	f3bf 8f4f 	dsb	sy
 80130ce:	617b      	str	r3, [r7, #20]
}
 80130d0:	bf00      	nop
 80130d2:	e7fe      	b.n	80130d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d06e      	beq.n	80131b8 <pvPortMalloc+0x150>
 80130da:	4b45      	ldr	r3, [pc, #276]	; (80131f0 <pvPortMalloc+0x188>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d869      	bhi.n	80131b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80130e4:	4b43      	ldr	r3, [pc, #268]	; (80131f4 <pvPortMalloc+0x18c>)
 80130e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80130e8:	4b42      	ldr	r3, [pc, #264]	; (80131f4 <pvPortMalloc+0x18c>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130ee:	e004      	b.n	80130fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80130f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	687a      	ldr	r2, [r7, #4]
 8013100:	429a      	cmp	r2, r3
 8013102:	d903      	bls.n	801310c <pvPortMalloc+0xa4>
 8013104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1f1      	bne.n	80130f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801310c:	4b36      	ldr	r3, [pc, #216]	; (80131e8 <pvPortMalloc+0x180>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013112:	429a      	cmp	r2, r3
 8013114:	d050      	beq.n	80131b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2208      	movs	r2, #8
 801311c:	4413      	add	r3, r2
 801311e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	6a3b      	ldr	r3, [r7, #32]
 8013126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	1ad2      	subs	r2, r2, r3
 8013130:	2308      	movs	r3, #8
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	429a      	cmp	r2, r3
 8013136:	d91f      	bls.n	8013178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	4413      	add	r3, r2
 801313e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	f003 0307 	and.w	r3, r3, #7
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00a      	beq.n	8013160 <pvPortMalloc+0xf8>
	__asm volatile
 801314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314e:	f383 8811 	msr	BASEPRI, r3
 8013152:	f3bf 8f6f 	isb	sy
 8013156:	f3bf 8f4f 	dsb	sy
 801315a:	613b      	str	r3, [r7, #16]
}
 801315c:	bf00      	nop
 801315e:	e7fe      	b.n	801315e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	685a      	ldr	r2, [r3, #4]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	1ad2      	subs	r2, r2, r3
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013172:	69b8      	ldr	r0, [r7, #24]
 8013174:	f000 f908 	bl	8013388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013178:	4b1d      	ldr	r3, [pc, #116]	; (80131f0 <pvPortMalloc+0x188>)
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	4a1b      	ldr	r2, [pc, #108]	; (80131f0 <pvPortMalloc+0x188>)
 8013184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013186:	4b1a      	ldr	r3, [pc, #104]	; (80131f0 <pvPortMalloc+0x188>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4b1b      	ldr	r3, [pc, #108]	; (80131f8 <pvPortMalloc+0x190>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	429a      	cmp	r2, r3
 8013190:	d203      	bcs.n	801319a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013192:	4b17      	ldr	r3, [pc, #92]	; (80131f0 <pvPortMalloc+0x188>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	4a18      	ldr	r2, [pc, #96]	; (80131f8 <pvPortMalloc+0x190>)
 8013198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	4b13      	ldr	r3, [pc, #76]	; (80131ec <pvPortMalloc+0x184>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	431a      	orrs	r2, r3
 80131a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80131ae:	4b13      	ldr	r3, [pc, #76]	; (80131fc <pvPortMalloc+0x194>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	3301      	adds	r3, #1
 80131b4:	4a11      	ldr	r2, [pc, #68]	; (80131fc <pvPortMalloc+0x194>)
 80131b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131b8:	f7fe fc2a 	bl	8011a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	f003 0307 	and.w	r3, r3, #7
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d00a      	beq.n	80131dc <pvPortMalloc+0x174>
	__asm volatile
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	60fb      	str	r3, [r7, #12]
}
 80131d8:	bf00      	nop
 80131da:	e7fe      	b.n	80131da <pvPortMalloc+0x172>
	return pvReturn;
 80131dc:	69fb      	ldr	r3, [r7, #28]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3728      	adds	r7, #40	; 0x28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	240054e8 	.word	0x240054e8
 80131ec:	240054fc 	.word	0x240054fc
 80131f0:	240054ec 	.word	0x240054ec
 80131f4:	240054e0 	.word	0x240054e0
 80131f8:	240054f0 	.word	0x240054f0
 80131fc:	240054f4 	.word	0x240054f4

08013200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b086      	sub	sp, #24
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d04d      	beq.n	80132ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013212:	2308      	movs	r3, #8
 8013214:	425b      	negs	r3, r3
 8013216:	697a      	ldr	r2, [r7, #20]
 8013218:	4413      	add	r3, r2
 801321a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	685a      	ldr	r2, [r3, #4]
 8013224:	4b24      	ldr	r3, [pc, #144]	; (80132b8 <vPortFree+0xb8>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4013      	ands	r3, r2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d10a      	bne.n	8013244 <vPortFree+0x44>
	__asm volatile
 801322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013232:	f383 8811 	msr	BASEPRI, r3
 8013236:	f3bf 8f6f 	isb	sy
 801323a:	f3bf 8f4f 	dsb	sy
 801323e:	60fb      	str	r3, [r7, #12]
}
 8013240:	bf00      	nop
 8013242:	e7fe      	b.n	8013242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00a      	beq.n	8013262 <vPortFree+0x62>
	__asm volatile
 801324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013250:	f383 8811 	msr	BASEPRI, r3
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	60bb      	str	r3, [r7, #8]
}
 801325e:	bf00      	nop
 8013260:	e7fe      	b.n	8013260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	4b14      	ldr	r3, [pc, #80]	; (80132b8 <vPortFree+0xb8>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4013      	ands	r3, r2
 801326c:	2b00      	cmp	r3, #0
 801326e:	d01e      	beq.n	80132ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d11a      	bne.n	80132ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	685a      	ldr	r2, [r3, #4]
 801327c:	4b0e      	ldr	r3, [pc, #56]	; (80132b8 <vPortFree+0xb8>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	43db      	mvns	r3, r3
 8013282:	401a      	ands	r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013288:	f7fe fbb4 	bl	80119f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	685a      	ldr	r2, [r3, #4]
 8013290:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <vPortFree+0xbc>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4413      	add	r3, r2
 8013296:	4a09      	ldr	r2, [pc, #36]	; (80132bc <vPortFree+0xbc>)
 8013298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801329a:	6938      	ldr	r0, [r7, #16]
 801329c:	f000 f874 	bl	8013388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80132a0:	4b07      	ldr	r3, [pc, #28]	; (80132c0 <vPortFree+0xc0>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	3301      	adds	r3, #1
 80132a6:	4a06      	ldr	r2, [pc, #24]	; (80132c0 <vPortFree+0xc0>)
 80132a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80132aa:	f7fe fbb1 	bl	8011a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132ae:	bf00      	nop
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	240054fc 	.word	0x240054fc
 80132bc:	240054ec 	.word	0x240054ec
 80132c0:	240054f8 	.word	0x240054f8

080132c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80132ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132d0:	4b27      	ldr	r3, [pc, #156]	; (8013370 <prvHeapInit+0xac>)
 80132d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f003 0307 	and.w	r3, r3, #7
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00c      	beq.n	80132f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3307      	adds	r3, #7
 80132e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f023 0307 	bic.w	r3, r3, #7
 80132ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	4a1f      	ldr	r2, [pc, #124]	; (8013370 <prvHeapInit+0xac>)
 80132f4:	4413      	add	r3, r2
 80132f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80132fc:	4a1d      	ldr	r2, [pc, #116]	; (8013374 <prvHeapInit+0xb0>)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013302:	4b1c      	ldr	r3, [pc, #112]	; (8013374 <prvHeapInit+0xb0>)
 8013304:	2200      	movs	r2, #0
 8013306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	68ba      	ldr	r2, [r7, #8]
 801330c:	4413      	add	r3, r2
 801330e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013310:	2208      	movs	r2, #8
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1a9b      	subs	r3, r3, r2
 8013316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f023 0307 	bic.w	r3, r3, #7
 801331e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	4a15      	ldr	r2, [pc, #84]	; (8013378 <prvHeapInit+0xb4>)
 8013324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013326:	4b14      	ldr	r3, [pc, #80]	; (8013378 <prvHeapInit+0xb4>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2200      	movs	r2, #0
 801332c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801332e:	4b12      	ldr	r3, [pc, #72]	; (8013378 <prvHeapInit+0xb4>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	1ad2      	subs	r2, r2, r3
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013344:	4b0c      	ldr	r3, [pc, #48]	; (8013378 <prvHeapInit+0xb4>)
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	4a0a      	ldr	r2, [pc, #40]	; (801337c <prvHeapInit+0xb8>)
 8013352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <prvHeapInit+0xbc>)
 801335a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801335c:	4b09      	ldr	r3, [pc, #36]	; (8013384 <prvHeapInit+0xc0>)
 801335e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013362:	601a      	str	r2, [r3, #0]
}
 8013364:	bf00      	nop
 8013366:	3714      	adds	r7, #20
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	240018e0 	.word	0x240018e0
 8013374:	240054e0 	.word	0x240054e0
 8013378:	240054e8 	.word	0x240054e8
 801337c:	240054f0 	.word	0x240054f0
 8013380:	240054ec 	.word	0x240054ec
 8013384:	240054fc 	.word	0x240054fc

08013388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013390:	4b28      	ldr	r3, [pc, #160]	; (8013434 <prvInsertBlockIntoFreeList+0xac>)
 8013392:	60fb      	str	r3, [r7, #12]
 8013394:	e002      	b.n	801339c <prvInsertBlockIntoFreeList+0x14>
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d8f7      	bhi.n	8013396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	4413      	add	r3, r2
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d108      	bne.n	80133ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	441a      	add	r2, r3
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	441a      	add	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d118      	bne.n	8013410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	4b15      	ldr	r3, [pc, #84]	; (8013438 <prvInsertBlockIntoFreeList+0xb0>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d00d      	beq.n	8013406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	685a      	ldr	r2, [r3, #4]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	441a      	add	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	601a      	str	r2, [r3, #0]
 8013404:	e008      	b.n	8013418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013406:	4b0c      	ldr	r3, [pc, #48]	; (8013438 <prvInsertBlockIntoFreeList+0xb0>)
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	e003      	b.n	8013418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	429a      	cmp	r2, r3
 801341e:	d002      	beq.n	8013426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013426:	bf00      	nop
 8013428:	3714      	adds	r7, #20
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	240054e0 	.word	0x240054e0
 8013438:	240054e8 	.word	0x240054e8

0801343c <__errno>:
 801343c:	4b01      	ldr	r3, [pc, #4]	; (8013444 <__errno+0x8>)
 801343e:	6818      	ldr	r0, [r3, #0]
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	24000018 	.word	0x24000018

08013448 <__libc_init_array>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	4d0d      	ldr	r5, [pc, #52]	; (8013480 <__libc_init_array+0x38>)
 801344c:	4c0d      	ldr	r4, [pc, #52]	; (8013484 <__libc_init_array+0x3c>)
 801344e:	1b64      	subs	r4, r4, r5
 8013450:	10a4      	asrs	r4, r4, #2
 8013452:	2600      	movs	r6, #0
 8013454:	42a6      	cmp	r6, r4
 8013456:	d109      	bne.n	801346c <__libc_init_array+0x24>
 8013458:	4d0b      	ldr	r5, [pc, #44]	; (8013488 <__libc_init_array+0x40>)
 801345a:	4c0c      	ldr	r4, [pc, #48]	; (801348c <__libc_init_array+0x44>)
 801345c:	f000 fd3c 	bl	8013ed8 <_init>
 8013460:	1b64      	subs	r4, r4, r5
 8013462:	10a4      	asrs	r4, r4, #2
 8013464:	2600      	movs	r6, #0
 8013466:	42a6      	cmp	r6, r4
 8013468:	d105      	bne.n	8013476 <__libc_init_array+0x2e>
 801346a:	bd70      	pop	{r4, r5, r6, pc}
 801346c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013470:	4798      	blx	r3
 8013472:	3601      	adds	r6, #1
 8013474:	e7ee      	b.n	8013454 <__libc_init_array+0xc>
 8013476:	f855 3b04 	ldr.w	r3, [r5], #4
 801347a:	4798      	blx	r3
 801347c:	3601      	adds	r6, #1
 801347e:	e7f2      	b.n	8013466 <__libc_init_array+0x1e>
 8013480:	0801435c 	.word	0x0801435c
 8013484:	0801435c 	.word	0x0801435c
 8013488:	0801435c 	.word	0x0801435c
 801348c:	08014360 	.word	0x08014360

08013490 <malloc>:
 8013490:	4b02      	ldr	r3, [pc, #8]	; (801349c <malloc+0xc>)
 8013492:	4601      	mov	r1, r0
 8013494:	6818      	ldr	r0, [r3, #0]
 8013496:	f000 b88d 	b.w	80135b4 <_malloc_r>
 801349a:	bf00      	nop
 801349c:	24000018 	.word	0x24000018

080134a0 <free>:
 80134a0:	4b02      	ldr	r3, [pc, #8]	; (80134ac <free+0xc>)
 80134a2:	4601      	mov	r1, r0
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	f000 b819 	b.w	80134dc <_free_r>
 80134aa:	bf00      	nop
 80134ac:	24000018 	.word	0x24000018

080134b0 <memcpy>:
 80134b0:	440a      	add	r2, r1
 80134b2:	4291      	cmp	r1, r2
 80134b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80134b8:	d100      	bne.n	80134bc <memcpy+0xc>
 80134ba:	4770      	bx	lr
 80134bc:	b510      	push	{r4, lr}
 80134be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134c6:	4291      	cmp	r1, r2
 80134c8:	d1f9      	bne.n	80134be <memcpy+0xe>
 80134ca:	bd10      	pop	{r4, pc}

080134cc <memset>:
 80134cc:	4402      	add	r2, r0
 80134ce:	4603      	mov	r3, r0
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d100      	bne.n	80134d6 <memset+0xa>
 80134d4:	4770      	bx	lr
 80134d6:	f803 1b01 	strb.w	r1, [r3], #1
 80134da:	e7f9      	b.n	80134d0 <memset+0x4>

080134dc <_free_r>:
 80134dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134de:	2900      	cmp	r1, #0
 80134e0:	d044      	beq.n	801356c <_free_r+0x90>
 80134e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134e6:	9001      	str	r0, [sp, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f1a1 0404 	sub.w	r4, r1, #4
 80134ee:	bfb8      	it	lt
 80134f0:	18e4      	addlt	r4, r4, r3
 80134f2:	f000 fc39 	bl	8013d68 <__malloc_lock>
 80134f6:	4a1e      	ldr	r2, [pc, #120]	; (8013570 <_free_r+0x94>)
 80134f8:	9801      	ldr	r0, [sp, #4]
 80134fa:	6813      	ldr	r3, [r2, #0]
 80134fc:	b933      	cbnz	r3, 801350c <_free_r+0x30>
 80134fe:	6063      	str	r3, [r4, #4]
 8013500:	6014      	str	r4, [r2, #0]
 8013502:	b003      	add	sp, #12
 8013504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013508:	f000 bc34 	b.w	8013d74 <__malloc_unlock>
 801350c:	42a3      	cmp	r3, r4
 801350e:	d908      	bls.n	8013522 <_free_r+0x46>
 8013510:	6825      	ldr	r5, [r4, #0]
 8013512:	1961      	adds	r1, r4, r5
 8013514:	428b      	cmp	r3, r1
 8013516:	bf01      	itttt	eq
 8013518:	6819      	ldreq	r1, [r3, #0]
 801351a:	685b      	ldreq	r3, [r3, #4]
 801351c:	1949      	addeq	r1, r1, r5
 801351e:	6021      	streq	r1, [r4, #0]
 8013520:	e7ed      	b.n	80134fe <_free_r+0x22>
 8013522:	461a      	mov	r2, r3
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	b10b      	cbz	r3, 801352c <_free_r+0x50>
 8013528:	42a3      	cmp	r3, r4
 801352a:	d9fa      	bls.n	8013522 <_free_r+0x46>
 801352c:	6811      	ldr	r1, [r2, #0]
 801352e:	1855      	adds	r5, r2, r1
 8013530:	42a5      	cmp	r5, r4
 8013532:	d10b      	bne.n	801354c <_free_r+0x70>
 8013534:	6824      	ldr	r4, [r4, #0]
 8013536:	4421      	add	r1, r4
 8013538:	1854      	adds	r4, r2, r1
 801353a:	42a3      	cmp	r3, r4
 801353c:	6011      	str	r1, [r2, #0]
 801353e:	d1e0      	bne.n	8013502 <_free_r+0x26>
 8013540:	681c      	ldr	r4, [r3, #0]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	6053      	str	r3, [r2, #4]
 8013546:	4421      	add	r1, r4
 8013548:	6011      	str	r1, [r2, #0]
 801354a:	e7da      	b.n	8013502 <_free_r+0x26>
 801354c:	d902      	bls.n	8013554 <_free_r+0x78>
 801354e:	230c      	movs	r3, #12
 8013550:	6003      	str	r3, [r0, #0]
 8013552:	e7d6      	b.n	8013502 <_free_r+0x26>
 8013554:	6825      	ldr	r5, [r4, #0]
 8013556:	1961      	adds	r1, r4, r5
 8013558:	428b      	cmp	r3, r1
 801355a:	bf04      	itt	eq
 801355c:	6819      	ldreq	r1, [r3, #0]
 801355e:	685b      	ldreq	r3, [r3, #4]
 8013560:	6063      	str	r3, [r4, #4]
 8013562:	bf04      	itt	eq
 8013564:	1949      	addeq	r1, r1, r5
 8013566:	6021      	streq	r1, [r4, #0]
 8013568:	6054      	str	r4, [r2, #4]
 801356a:	e7ca      	b.n	8013502 <_free_r+0x26>
 801356c:	b003      	add	sp, #12
 801356e:	bd30      	pop	{r4, r5, pc}
 8013570:	24005500 	.word	0x24005500

08013574 <sbrk_aligned>:
 8013574:	b570      	push	{r4, r5, r6, lr}
 8013576:	4e0e      	ldr	r6, [pc, #56]	; (80135b0 <sbrk_aligned+0x3c>)
 8013578:	460c      	mov	r4, r1
 801357a:	6831      	ldr	r1, [r6, #0]
 801357c:	4605      	mov	r5, r0
 801357e:	b911      	cbnz	r1, 8013586 <sbrk_aligned+0x12>
 8013580:	f000 f902 	bl	8013788 <_sbrk_r>
 8013584:	6030      	str	r0, [r6, #0]
 8013586:	4621      	mov	r1, r4
 8013588:	4628      	mov	r0, r5
 801358a:	f000 f8fd 	bl	8013788 <_sbrk_r>
 801358e:	1c43      	adds	r3, r0, #1
 8013590:	d00a      	beq.n	80135a8 <sbrk_aligned+0x34>
 8013592:	1cc4      	adds	r4, r0, #3
 8013594:	f024 0403 	bic.w	r4, r4, #3
 8013598:	42a0      	cmp	r0, r4
 801359a:	d007      	beq.n	80135ac <sbrk_aligned+0x38>
 801359c:	1a21      	subs	r1, r4, r0
 801359e:	4628      	mov	r0, r5
 80135a0:	f000 f8f2 	bl	8013788 <_sbrk_r>
 80135a4:	3001      	adds	r0, #1
 80135a6:	d101      	bne.n	80135ac <sbrk_aligned+0x38>
 80135a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80135ac:	4620      	mov	r0, r4
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
 80135b0:	24005504 	.word	0x24005504

080135b4 <_malloc_r>:
 80135b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b8:	1ccd      	adds	r5, r1, #3
 80135ba:	f025 0503 	bic.w	r5, r5, #3
 80135be:	3508      	adds	r5, #8
 80135c0:	2d0c      	cmp	r5, #12
 80135c2:	bf38      	it	cc
 80135c4:	250c      	movcc	r5, #12
 80135c6:	2d00      	cmp	r5, #0
 80135c8:	4607      	mov	r7, r0
 80135ca:	db01      	blt.n	80135d0 <_malloc_r+0x1c>
 80135cc:	42a9      	cmp	r1, r5
 80135ce:	d905      	bls.n	80135dc <_malloc_r+0x28>
 80135d0:	230c      	movs	r3, #12
 80135d2:	603b      	str	r3, [r7, #0]
 80135d4:	2600      	movs	r6, #0
 80135d6:	4630      	mov	r0, r6
 80135d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135dc:	4e2e      	ldr	r6, [pc, #184]	; (8013698 <_malloc_r+0xe4>)
 80135de:	f000 fbc3 	bl	8013d68 <__malloc_lock>
 80135e2:	6833      	ldr	r3, [r6, #0]
 80135e4:	461c      	mov	r4, r3
 80135e6:	bb34      	cbnz	r4, 8013636 <_malloc_r+0x82>
 80135e8:	4629      	mov	r1, r5
 80135ea:	4638      	mov	r0, r7
 80135ec:	f7ff ffc2 	bl	8013574 <sbrk_aligned>
 80135f0:	1c43      	adds	r3, r0, #1
 80135f2:	4604      	mov	r4, r0
 80135f4:	d14d      	bne.n	8013692 <_malloc_r+0xde>
 80135f6:	6834      	ldr	r4, [r6, #0]
 80135f8:	4626      	mov	r6, r4
 80135fa:	2e00      	cmp	r6, #0
 80135fc:	d140      	bne.n	8013680 <_malloc_r+0xcc>
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	4631      	mov	r1, r6
 8013602:	4638      	mov	r0, r7
 8013604:	eb04 0803 	add.w	r8, r4, r3
 8013608:	f000 f8be 	bl	8013788 <_sbrk_r>
 801360c:	4580      	cmp	r8, r0
 801360e:	d13a      	bne.n	8013686 <_malloc_r+0xd2>
 8013610:	6821      	ldr	r1, [r4, #0]
 8013612:	3503      	adds	r5, #3
 8013614:	1a6d      	subs	r5, r5, r1
 8013616:	f025 0503 	bic.w	r5, r5, #3
 801361a:	3508      	adds	r5, #8
 801361c:	2d0c      	cmp	r5, #12
 801361e:	bf38      	it	cc
 8013620:	250c      	movcc	r5, #12
 8013622:	4629      	mov	r1, r5
 8013624:	4638      	mov	r0, r7
 8013626:	f7ff ffa5 	bl	8013574 <sbrk_aligned>
 801362a:	3001      	adds	r0, #1
 801362c:	d02b      	beq.n	8013686 <_malloc_r+0xd2>
 801362e:	6823      	ldr	r3, [r4, #0]
 8013630:	442b      	add	r3, r5
 8013632:	6023      	str	r3, [r4, #0]
 8013634:	e00e      	b.n	8013654 <_malloc_r+0xa0>
 8013636:	6822      	ldr	r2, [r4, #0]
 8013638:	1b52      	subs	r2, r2, r5
 801363a:	d41e      	bmi.n	801367a <_malloc_r+0xc6>
 801363c:	2a0b      	cmp	r2, #11
 801363e:	d916      	bls.n	801366e <_malloc_r+0xba>
 8013640:	1961      	adds	r1, r4, r5
 8013642:	42a3      	cmp	r3, r4
 8013644:	6025      	str	r5, [r4, #0]
 8013646:	bf18      	it	ne
 8013648:	6059      	strne	r1, [r3, #4]
 801364a:	6863      	ldr	r3, [r4, #4]
 801364c:	bf08      	it	eq
 801364e:	6031      	streq	r1, [r6, #0]
 8013650:	5162      	str	r2, [r4, r5]
 8013652:	604b      	str	r3, [r1, #4]
 8013654:	4638      	mov	r0, r7
 8013656:	f104 060b 	add.w	r6, r4, #11
 801365a:	f000 fb8b 	bl	8013d74 <__malloc_unlock>
 801365e:	f026 0607 	bic.w	r6, r6, #7
 8013662:	1d23      	adds	r3, r4, #4
 8013664:	1af2      	subs	r2, r6, r3
 8013666:	d0b6      	beq.n	80135d6 <_malloc_r+0x22>
 8013668:	1b9b      	subs	r3, r3, r6
 801366a:	50a3      	str	r3, [r4, r2]
 801366c:	e7b3      	b.n	80135d6 <_malloc_r+0x22>
 801366e:	6862      	ldr	r2, [r4, #4]
 8013670:	42a3      	cmp	r3, r4
 8013672:	bf0c      	ite	eq
 8013674:	6032      	streq	r2, [r6, #0]
 8013676:	605a      	strne	r2, [r3, #4]
 8013678:	e7ec      	b.n	8013654 <_malloc_r+0xa0>
 801367a:	4623      	mov	r3, r4
 801367c:	6864      	ldr	r4, [r4, #4]
 801367e:	e7b2      	b.n	80135e6 <_malloc_r+0x32>
 8013680:	4634      	mov	r4, r6
 8013682:	6876      	ldr	r6, [r6, #4]
 8013684:	e7b9      	b.n	80135fa <_malloc_r+0x46>
 8013686:	230c      	movs	r3, #12
 8013688:	603b      	str	r3, [r7, #0]
 801368a:	4638      	mov	r0, r7
 801368c:	f000 fb72 	bl	8013d74 <__malloc_unlock>
 8013690:	e7a1      	b.n	80135d6 <_malloc_r+0x22>
 8013692:	6025      	str	r5, [r4, #0]
 8013694:	e7de      	b.n	8013654 <_malloc_r+0xa0>
 8013696:	bf00      	nop
 8013698:	24005500 	.word	0x24005500

0801369c <_puts_r>:
 801369c:	b570      	push	{r4, r5, r6, lr}
 801369e:	460e      	mov	r6, r1
 80136a0:	4605      	mov	r5, r0
 80136a2:	b118      	cbz	r0, 80136ac <_puts_r+0x10>
 80136a4:	6983      	ldr	r3, [r0, #24]
 80136a6:	b90b      	cbnz	r3, 80136ac <_puts_r+0x10>
 80136a8:	f000 fa58 	bl	8013b5c <__sinit>
 80136ac:	69ab      	ldr	r3, [r5, #24]
 80136ae:	68ac      	ldr	r4, [r5, #8]
 80136b0:	b913      	cbnz	r3, 80136b8 <_puts_r+0x1c>
 80136b2:	4628      	mov	r0, r5
 80136b4:	f000 fa52 	bl	8013b5c <__sinit>
 80136b8:	4b2c      	ldr	r3, [pc, #176]	; (801376c <_puts_r+0xd0>)
 80136ba:	429c      	cmp	r4, r3
 80136bc:	d120      	bne.n	8013700 <_puts_r+0x64>
 80136be:	686c      	ldr	r4, [r5, #4]
 80136c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136c2:	07db      	lsls	r3, r3, #31
 80136c4:	d405      	bmi.n	80136d2 <_puts_r+0x36>
 80136c6:	89a3      	ldrh	r3, [r4, #12]
 80136c8:	0598      	lsls	r0, r3, #22
 80136ca:	d402      	bmi.n	80136d2 <_puts_r+0x36>
 80136cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136ce:	f000 fae3 	bl	8013c98 <__retarget_lock_acquire_recursive>
 80136d2:	89a3      	ldrh	r3, [r4, #12]
 80136d4:	0719      	lsls	r1, r3, #28
 80136d6:	d51d      	bpl.n	8013714 <_puts_r+0x78>
 80136d8:	6923      	ldr	r3, [r4, #16]
 80136da:	b1db      	cbz	r3, 8013714 <_puts_r+0x78>
 80136dc:	3e01      	subs	r6, #1
 80136de:	68a3      	ldr	r3, [r4, #8]
 80136e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80136e4:	3b01      	subs	r3, #1
 80136e6:	60a3      	str	r3, [r4, #8]
 80136e8:	bb39      	cbnz	r1, 801373a <_puts_r+0x9e>
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	da38      	bge.n	8013760 <_puts_r+0xc4>
 80136ee:	4622      	mov	r2, r4
 80136f0:	210a      	movs	r1, #10
 80136f2:	4628      	mov	r0, r5
 80136f4:	f000 f858 	bl	80137a8 <__swbuf_r>
 80136f8:	3001      	adds	r0, #1
 80136fa:	d011      	beq.n	8013720 <_puts_r+0x84>
 80136fc:	250a      	movs	r5, #10
 80136fe:	e011      	b.n	8013724 <_puts_r+0x88>
 8013700:	4b1b      	ldr	r3, [pc, #108]	; (8013770 <_puts_r+0xd4>)
 8013702:	429c      	cmp	r4, r3
 8013704:	d101      	bne.n	801370a <_puts_r+0x6e>
 8013706:	68ac      	ldr	r4, [r5, #8]
 8013708:	e7da      	b.n	80136c0 <_puts_r+0x24>
 801370a:	4b1a      	ldr	r3, [pc, #104]	; (8013774 <_puts_r+0xd8>)
 801370c:	429c      	cmp	r4, r3
 801370e:	bf08      	it	eq
 8013710:	68ec      	ldreq	r4, [r5, #12]
 8013712:	e7d5      	b.n	80136c0 <_puts_r+0x24>
 8013714:	4621      	mov	r1, r4
 8013716:	4628      	mov	r0, r5
 8013718:	f000 f898 	bl	801384c <__swsetup_r>
 801371c:	2800      	cmp	r0, #0
 801371e:	d0dd      	beq.n	80136dc <_puts_r+0x40>
 8013720:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013726:	07da      	lsls	r2, r3, #31
 8013728:	d405      	bmi.n	8013736 <_puts_r+0x9a>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	059b      	lsls	r3, r3, #22
 801372e:	d402      	bmi.n	8013736 <_puts_r+0x9a>
 8013730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013732:	f000 fab2 	bl	8013c9a <__retarget_lock_release_recursive>
 8013736:	4628      	mov	r0, r5
 8013738:	bd70      	pop	{r4, r5, r6, pc}
 801373a:	2b00      	cmp	r3, #0
 801373c:	da04      	bge.n	8013748 <_puts_r+0xac>
 801373e:	69a2      	ldr	r2, [r4, #24]
 8013740:	429a      	cmp	r2, r3
 8013742:	dc06      	bgt.n	8013752 <_puts_r+0xb6>
 8013744:	290a      	cmp	r1, #10
 8013746:	d004      	beq.n	8013752 <_puts_r+0xb6>
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	6022      	str	r2, [r4, #0]
 801374e:	7019      	strb	r1, [r3, #0]
 8013750:	e7c5      	b.n	80136de <_puts_r+0x42>
 8013752:	4622      	mov	r2, r4
 8013754:	4628      	mov	r0, r5
 8013756:	f000 f827 	bl	80137a8 <__swbuf_r>
 801375a:	3001      	adds	r0, #1
 801375c:	d1bf      	bne.n	80136de <_puts_r+0x42>
 801375e:	e7df      	b.n	8013720 <_puts_r+0x84>
 8013760:	6823      	ldr	r3, [r4, #0]
 8013762:	250a      	movs	r5, #10
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	6022      	str	r2, [r4, #0]
 8013768:	701d      	strb	r5, [r3, #0]
 801376a:	e7db      	b.n	8013724 <_puts_r+0x88>
 801376c:	08014314 	.word	0x08014314
 8013770:	08014334 	.word	0x08014334
 8013774:	080142f4 	.word	0x080142f4

08013778 <puts>:
 8013778:	4b02      	ldr	r3, [pc, #8]	; (8013784 <puts+0xc>)
 801377a:	4601      	mov	r1, r0
 801377c:	6818      	ldr	r0, [r3, #0]
 801377e:	f7ff bf8d 	b.w	801369c <_puts_r>
 8013782:	bf00      	nop
 8013784:	24000018 	.word	0x24000018

08013788 <_sbrk_r>:
 8013788:	b538      	push	{r3, r4, r5, lr}
 801378a:	4d06      	ldr	r5, [pc, #24]	; (80137a4 <_sbrk_r+0x1c>)
 801378c:	2300      	movs	r3, #0
 801378e:	4604      	mov	r4, r0
 8013790:	4608      	mov	r0, r1
 8013792:	602b      	str	r3, [r5, #0]
 8013794:	f7ee ff9a 	bl	80026cc <_sbrk>
 8013798:	1c43      	adds	r3, r0, #1
 801379a:	d102      	bne.n	80137a2 <_sbrk_r+0x1a>
 801379c:	682b      	ldr	r3, [r5, #0]
 801379e:	b103      	cbz	r3, 80137a2 <_sbrk_r+0x1a>
 80137a0:	6023      	str	r3, [r4, #0]
 80137a2:	bd38      	pop	{r3, r4, r5, pc}
 80137a4:	2400550c 	.word	0x2400550c

080137a8 <__swbuf_r>:
 80137a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137aa:	460e      	mov	r6, r1
 80137ac:	4614      	mov	r4, r2
 80137ae:	4605      	mov	r5, r0
 80137b0:	b118      	cbz	r0, 80137ba <__swbuf_r+0x12>
 80137b2:	6983      	ldr	r3, [r0, #24]
 80137b4:	b90b      	cbnz	r3, 80137ba <__swbuf_r+0x12>
 80137b6:	f000 f9d1 	bl	8013b5c <__sinit>
 80137ba:	4b21      	ldr	r3, [pc, #132]	; (8013840 <__swbuf_r+0x98>)
 80137bc:	429c      	cmp	r4, r3
 80137be:	d12b      	bne.n	8013818 <__swbuf_r+0x70>
 80137c0:	686c      	ldr	r4, [r5, #4]
 80137c2:	69a3      	ldr	r3, [r4, #24]
 80137c4:	60a3      	str	r3, [r4, #8]
 80137c6:	89a3      	ldrh	r3, [r4, #12]
 80137c8:	071a      	lsls	r2, r3, #28
 80137ca:	d52f      	bpl.n	801382c <__swbuf_r+0x84>
 80137cc:	6923      	ldr	r3, [r4, #16]
 80137ce:	b36b      	cbz	r3, 801382c <__swbuf_r+0x84>
 80137d0:	6923      	ldr	r3, [r4, #16]
 80137d2:	6820      	ldr	r0, [r4, #0]
 80137d4:	1ac0      	subs	r0, r0, r3
 80137d6:	6963      	ldr	r3, [r4, #20]
 80137d8:	b2f6      	uxtb	r6, r6
 80137da:	4283      	cmp	r3, r0
 80137dc:	4637      	mov	r7, r6
 80137de:	dc04      	bgt.n	80137ea <__swbuf_r+0x42>
 80137e0:	4621      	mov	r1, r4
 80137e2:	4628      	mov	r0, r5
 80137e4:	f000 f926 	bl	8013a34 <_fflush_r>
 80137e8:	bb30      	cbnz	r0, 8013838 <__swbuf_r+0x90>
 80137ea:	68a3      	ldr	r3, [r4, #8]
 80137ec:	3b01      	subs	r3, #1
 80137ee:	60a3      	str	r3, [r4, #8]
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	1c5a      	adds	r2, r3, #1
 80137f4:	6022      	str	r2, [r4, #0]
 80137f6:	701e      	strb	r6, [r3, #0]
 80137f8:	6963      	ldr	r3, [r4, #20]
 80137fa:	3001      	adds	r0, #1
 80137fc:	4283      	cmp	r3, r0
 80137fe:	d004      	beq.n	801380a <__swbuf_r+0x62>
 8013800:	89a3      	ldrh	r3, [r4, #12]
 8013802:	07db      	lsls	r3, r3, #31
 8013804:	d506      	bpl.n	8013814 <__swbuf_r+0x6c>
 8013806:	2e0a      	cmp	r6, #10
 8013808:	d104      	bne.n	8013814 <__swbuf_r+0x6c>
 801380a:	4621      	mov	r1, r4
 801380c:	4628      	mov	r0, r5
 801380e:	f000 f911 	bl	8013a34 <_fflush_r>
 8013812:	b988      	cbnz	r0, 8013838 <__swbuf_r+0x90>
 8013814:	4638      	mov	r0, r7
 8013816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013818:	4b0a      	ldr	r3, [pc, #40]	; (8013844 <__swbuf_r+0x9c>)
 801381a:	429c      	cmp	r4, r3
 801381c:	d101      	bne.n	8013822 <__swbuf_r+0x7a>
 801381e:	68ac      	ldr	r4, [r5, #8]
 8013820:	e7cf      	b.n	80137c2 <__swbuf_r+0x1a>
 8013822:	4b09      	ldr	r3, [pc, #36]	; (8013848 <__swbuf_r+0xa0>)
 8013824:	429c      	cmp	r4, r3
 8013826:	bf08      	it	eq
 8013828:	68ec      	ldreq	r4, [r5, #12]
 801382a:	e7ca      	b.n	80137c2 <__swbuf_r+0x1a>
 801382c:	4621      	mov	r1, r4
 801382e:	4628      	mov	r0, r5
 8013830:	f000 f80c 	bl	801384c <__swsetup_r>
 8013834:	2800      	cmp	r0, #0
 8013836:	d0cb      	beq.n	80137d0 <__swbuf_r+0x28>
 8013838:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801383c:	e7ea      	b.n	8013814 <__swbuf_r+0x6c>
 801383e:	bf00      	nop
 8013840:	08014314 	.word	0x08014314
 8013844:	08014334 	.word	0x08014334
 8013848:	080142f4 	.word	0x080142f4

0801384c <__swsetup_r>:
 801384c:	4b32      	ldr	r3, [pc, #200]	; (8013918 <__swsetup_r+0xcc>)
 801384e:	b570      	push	{r4, r5, r6, lr}
 8013850:	681d      	ldr	r5, [r3, #0]
 8013852:	4606      	mov	r6, r0
 8013854:	460c      	mov	r4, r1
 8013856:	b125      	cbz	r5, 8013862 <__swsetup_r+0x16>
 8013858:	69ab      	ldr	r3, [r5, #24]
 801385a:	b913      	cbnz	r3, 8013862 <__swsetup_r+0x16>
 801385c:	4628      	mov	r0, r5
 801385e:	f000 f97d 	bl	8013b5c <__sinit>
 8013862:	4b2e      	ldr	r3, [pc, #184]	; (801391c <__swsetup_r+0xd0>)
 8013864:	429c      	cmp	r4, r3
 8013866:	d10f      	bne.n	8013888 <__swsetup_r+0x3c>
 8013868:	686c      	ldr	r4, [r5, #4]
 801386a:	89a3      	ldrh	r3, [r4, #12]
 801386c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013870:	0719      	lsls	r1, r3, #28
 8013872:	d42c      	bmi.n	80138ce <__swsetup_r+0x82>
 8013874:	06dd      	lsls	r5, r3, #27
 8013876:	d411      	bmi.n	801389c <__swsetup_r+0x50>
 8013878:	2309      	movs	r3, #9
 801387a:	6033      	str	r3, [r6, #0]
 801387c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013880:	81a3      	strh	r3, [r4, #12]
 8013882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013886:	e03e      	b.n	8013906 <__swsetup_r+0xba>
 8013888:	4b25      	ldr	r3, [pc, #148]	; (8013920 <__swsetup_r+0xd4>)
 801388a:	429c      	cmp	r4, r3
 801388c:	d101      	bne.n	8013892 <__swsetup_r+0x46>
 801388e:	68ac      	ldr	r4, [r5, #8]
 8013890:	e7eb      	b.n	801386a <__swsetup_r+0x1e>
 8013892:	4b24      	ldr	r3, [pc, #144]	; (8013924 <__swsetup_r+0xd8>)
 8013894:	429c      	cmp	r4, r3
 8013896:	bf08      	it	eq
 8013898:	68ec      	ldreq	r4, [r5, #12]
 801389a:	e7e6      	b.n	801386a <__swsetup_r+0x1e>
 801389c:	0758      	lsls	r0, r3, #29
 801389e:	d512      	bpl.n	80138c6 <__swsetup_r+0x7a>
 80138a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138a2:	b141      	cbz	r1, 80138b6 <__swsetup_r+0x6a>
 80138a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138a8:	4299      	cmp	r1, r3
 80138aa:	d002      	beq.n	80138b2 <__swsetup_r+0x66>
 80138ac:	4630      	mov	r0, r6
 80138ae:	f7ff fe15 	bl	80134dc <_free_r>
 80138b2:	2300      	movs	r3, #0
 80138b4:	6363      	str	r3, [r4, #52]	; 0x34
 80138b6:	89a3      	ldrh	r3, [r4, #12]
 80138b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80138bc:	81a3      	strh	r3, [r4, #12]
 80138be:	2300      	movs	r3, #0
 80138c0:	6063      	str	r3, [r4, #4]
 80138c2:	6923      	ldr	r3, [r4, #16]
 80138c4:	6023      	str	r3, [r4, #0]
 80138c6:	89a3      	ldrh	r3, [r4, #12]
 80138c8:	f043 0308 	orr.w	r3, r3, #8
 80138cc:	81a3      	strh	r3, [r4, #12]
 80138ce:	6923      	ldr	r3, [r4, #16]
 80138d0:	b94b      	cbnz	r3, 80138e6 <__swsetup_r+0x9a>
 80138d2:	89a3      	ldrh	r3, [r4, #12]
 80138d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80138d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138dc:	d003      	beq.n	80138e6 <__swsetup_r+0x9a>
 80138de:	4621      	mov	r1, r4
 80138e0:	4630      	mov	r0, r6
 80138e2:	f000 fa01 	bl	8013ce8 <__smakebuf_r>
 80138e6:	89a0      	ldrh	r0, [r4, #12]
 80138e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138ec:	f010 0301 	ands.w	r3, r0, #1
 80138f0:	d00a      	beq.n	8013908 <__swsetup_r+0xbc>
 80138f2:	2300      	movs	r3, #0
 80138f4:	60a3      	str	r3, [r4, #8]
 80138f6:	6963      	ldr	r3, [r4, #20]
 80138f8:	425b      	negs	r3, r3
 80138fa:	61a3      	str	r3, [r4, #24]
 80138fc:	6923      	ldr	r3, [r4, #16]
 80138fe:	b943      	cbnz	r3, 8013912 <__swsetup_r+0xc6>
 8013900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013904:	d1ba      	bne.n	801387c <__swsetup_r+0x30>
 8013906:	bd70      	pop	{r4, r5, r6, pc}
 8013908:	0781      	lsls	r1, r0, #30
 801390a:	bf58      	it	pl
 801390c:	6963      	ldrpl	r3, [r4, #20]
 801390e:	60a3      	str	r3, [r4, #8]
 8013910:	e7f4      	b.n	80138fc <__swsetup_r+0xb0>
 8013912:	2000      	movs	r0, #0
 8013914:	e7f7      	b.n	8013906 <__swsetup_r+0xba>
 8013916:	bf00      	nop
 8013918:	24000018 	.word	0x24000018
 801391c:	08014314 	.word	0x08014314
 8013920:	08014334 	.word	0x08014334
 8013924:	080142f4 	.word	0x080142f4

08013928 <__sflush_r>:
 8013928:	898a      	ldrh	r2, [r1, #12]
 801392a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392e:	4605      	mov	r5, r0
 8013930:	0710      	lsls	r0, r2, #28
 8013932:	460c      	mov	r4, r1
 8013934:	d458      	bmi.n	80139e8 <__sflush_r+0xc0>
 8013936:	684b      	ldr	r3, [r1, #4]
 8013938:	2b00      	cmp	r3, #0
 801393a:	dc05      	bgt.n	8013948 <__sflush_r+0x20>
 801393c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801393e:	2b00      	cmp	r3, #0
 8013940:	dc02      	bgt.n	8013948 <__sflush_r+0x20>
 8013942:	2000      	movs	r0, #0
 8013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801394a:	2e00      	cmp	r6, #0
 801394c:	d0f9      	beq.n	8013942 <__sflush_r+0x1a>
 801394e:	2300      	movs	r3, #0
 8013950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013954:	682f      	ldr	r7, [r5, #0]
 8013956:	602b      	str	r3, [r5, #0]
 8013958:	d032      	beq.n	80139c0 <__sflush_r+0x98>
 801395a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801395c:	89a3      	ldrh	r3, [r4, #12]
 801395e:	075a      	lsls	r2, r3, #29
 8013960:	d505      	bpl.n	801396e <__sflush_r+0x46>
 8013962:	6863      	ldr	r3, [r4, #4]
 8013964:	1ac0      	subs	r0, r0, r3
 8013966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013968:	b10b      	cbz	r3, 801396e <__sflush_r+0x46>
 801396a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801396c:	1ac0      	subs	r0, r0, r3
 801396e:	2300      	movs	r3, #0
 8013970:	4602      	mov	r2, r0
 8013972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013974:	6a21      	ldr	r1, [r4, #32]
 8013976:	4628      	mov	r0, r5
 8013978:	47b0      	blx	r6
 801397a:	1c43      	adds	r3, r0, #1
 801397c:	89a3      	ldrh	r3, [r4, #12]
 801397e:	d106      	bne.n	801398e <__sflush_r+0x66>
 8013980:	6829      	ldr	r1, [r5, #0]
 8013982:	291d      	cmp	r1, #29
 8013984:	d82c      	bhi.n	80139e0 <__sflush_r+0xb8>
 8013986:	4a2a      	ldr	r2, [pc, #168]	; (8013a30 <__sflush_r+0x108>)
 8013988:	40ca      	lsrs	r2, r1
 801398a:	07d6      	lsls	r6, r2, #31
 801398c:	d528      	bpl.n	80139e0 <__sflush_r+0xb8>
 801398e:	2200      	movs	r2, #0
 8013990:	6062      	str	r2, [r4, #4]
 8013992:	04d9      	lsls	r1, r3, #19
 8013994:	6922      	ldr	r2, [r4, #16]
 8013996:	6022      	str	r2, [r4, #0]
 8013998:	d504      	bpl.n	80139a4 <__sflush_r+0x7c>
 801399a:	1c42      	adds	r2, r0, #1
 801399c:	d101      	bne.n	80139a2 <__sflush_r+0x7a>
 801399e:	682b      	ldr	r3, [r5, #0]
 80139a0:	b903      	cbnz	r3, 80139a4 <__sflush_r+0x7c>
 80139a2:	6560      	str	r0, [r4, #84]	; 0x54
 80139a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139a6:	602f      	str	r7, [r5, #0]
 80139a8:	2900      	cmp	r1, #0
 80139aa:	d0ca      	beq.n	8013942 <__sflush_r+0x1a>
 80139ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139b0:	4299      	cmp	r1, r3
 80139b2:	d002      	beq.n	80139ba <__sflush_r+0x92>
 80139b4:	4628      	mov	r0, r5
 80139b6:	f7ff fd91 	bl	80134dc <_free_r>
 80139ba:	2000      	movs	r0, #0
 80139bc:	6360      	str	r0, [r4, #52]	; 0x34
 80139be:	e7c1      	b.n	8013944 <__sflush_r+0x1c>
 80139c0:	6a21      	ldr	r1, [r4, #32]
 80139c2:	2301      	movs	r3, #1
 80139c4:	4628      	mov	r0, r5
 80139c6:	47b0      	blx	r6
 80139c8:	1c41      	adds	r1, r0, #1
 80139ca:	d1c7      	bne.n	801395c <__sflush_r+0x34>
 80139cc:	682b      	ldr	r3, [r5, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d0c4      	beq.n	801395c <__sflush_r+0x34>
 80139d2:	2b1d      	cmp	r3, #29
 80139d4:	d001      	beq.n	80139da <__sflush_r+0xb2>
 80139d6:	2b16      	cmp	r3, #22
 80139d8:	d101      	bne.n	80139de <__sflush_r+0xb6>
 80139da:	602f      	str	r7, [r5, #0]
 80139dc:	e7b1      	b.n	8013942 <__sflush_r+0x1a>
 80139de:	89a3      	ldrh	r3, [r4, #12]
 80139e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139e4:	81a3      	strh	r3, [r4, #12]
 80139e6:	e7ad      	b.n	8013944 <__sflush_r+0x1c>
 80139e8:	690f      	ldr	r7, [r1, #16]
 80139ea:	2f00      	cmp	r7, #0
 80139ec:	d0a9      	beq.n	8013942 <__sflush_r+0x1a>
 80139ee:	0793      	lsls	r3, r2, #30
 80139f0:	680e      	ldr	r6, [r1, #0]
 80139f2:	bf08      	it	eq
 80139f4:	694b      	ldreq	r3, [r1, #20]
 80139f6:	600f      	str	r7, [r1, #0]
 80139f8:	bf18      	it	ne
 80139fa:	2300      	movne	r3, #0
 80139fc:	eba6 0807 	sub.w	r8, r6, r7
 8013a00:	608b      	str	r3, [r1, #8]
 8013a02:	f1b8 0f00 	cmp.w	r8, #0
 8013a06:	dd9c      	ble.n	8013942 <__sflush_r+0x1a>
 8013a08:	6a21      	ldr	r1, [r4, #32]
 8013a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a0c:	4643      	mov	r3, r8
 8013a0e:	463a      	mov	r2, r7
 8013a10:	4628      	mov	r0, r5
 8013a12:	47b0      	blx	r6
 8013a14:	2800      	cmp	r0, #0
 8013a16:	dc06      	bgt.n	8013a26 <__sflush_r+0xfe>
 8013a18:	89a3      	ldrh	r3, [r4, #12]
 8013a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a1e:	81a3      	strh	r3, [r4, #12]
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a24:	e78e      	b.n	8013944 <__sflush_r+0x1c>
 8013a26:	4407      	add	r7, r0
 8013a28:	eba8 0800 	sub.w	r8, r8, r0
 8013a2c:	e7e9      	b.n	8013a02 <__sflush_r+0xda>
 8013a2e:	bf00      	nop
 8013a30:	20400001 	.word	0x20400001

08013a34 <_fflush_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	690b      	ldr	r3, [r1, #16]
 8013a38:	4605      	mov	r5, r0
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	b913      	cbnz	r3, 8013a44 <_fflush_r+0x10>
 8013a3e:	2500      	movs	r5, #0
 8013a40:	4628      	mov	r0, r5
 8013a42:	bd38      	pop	{r3, r4, r5, pc}
 8013a44:	b118      	cbz	r0, 8013a4e <_fflush_r+0x1a>
 8013a46:	6983      	ldr	r3, [r0, #24]
 8013a48:	b90b      	cbnz	r3, 8013a4e <_fflush_r+0x1a>
 8013a4a:	f000 f887 	bl	8013b5c <__sinit>
 8013a4e:	4b14      	ldr	r3, [pc, #80]	; (8013aa0 <_fflush_r+0x6c>)
 8013a50:	429c      	cmp	r4, r3
 8013a52:	d11b      	bne.n	8013a8c <_fflush_r+0x58>
 8013a54:	686c      	ldr	r4, [r5, #4]
 8013a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d0ef      	beq.n	8013a3e <_fflush_r+0xa>
 8013a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a60:	07d0      	lsls	r0, r2, #31
 8013a62:	d404      	bmi.n	8013a6e <_fflush_r+0x3a>
 8013a64:	0599      	lsls	r1, r3, #22
 8013a66:	d402      	bmi.n	8013a6e <_fflush_r+0x3a>
 8013a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a6a:	f000 f915 	bl	8013c98 <__retarget_lock_acquire_recursive>
 8013a6e:	4628      	mov	r0, r5
 8013a70:	4621      	mov	r1, r4
 8013a72:	f7ff ff59 	bl	8013928 <__sflush_r>
 8013a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a78:	07da      	lsls	r2, r3, #31
 8013a7a:	4605      	mov	r5, r0
 8013a7c:	d4e0      	bmi.n	8013a40 <_fflush_r+0xc>
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	059b      	lsls	r3, r3, #22
 8013a82:	d4dd      	bmi.n	8013a40 <_fflush_r+0xc>
 8013a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a86:	f000 f908 	bl	8013c9a <__retarget_lock_release_recursive>
 8013a8a:	e7d9      	b.n	8013a40 <_fflush_r+0xc>
 8013a8c:	4b05      	ldr	r3, [pc, #20]	; (8013aa4 <_fflush_r+0x70>)
 8013a8e:	429c      	cmp	r4, r3
 8013a90:	d101      	bne.n	8013a96 <_fflush_r+0x62>
 8013a92:	68ac      	ldr	r4, [r5, #8]
 8013a94:	e7df      	b.n	8013a56 <_fflush_r+0x22>
 8013a96:	4b04      	ldr	r3, [pc, #16]	; (8013aa8 <_fflush_r+0x74>)
 8013a98:	429c      	cmp	r4, r3
 8013a9a:	bf08      	it	eq
 8013a9c:	68ec      	ldreq	r4, [r5, #12]
 8013a9e:	e7da      	b.n	8013a56 <_fflush_r+0x22>
 8013aa0:	08014314 	.word	0x08014314
 8013aa4:	08014334 	.word	0x08014334
 8013aa8:	080142f4 	.word	0x080142f4

08013aac <std>:
 8013aac:	2300      	movs	r3, #0
 8013aae:	b510      	push	{r4, lr}
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013aba:	6083      	str	r3, [r0, #8]
 8013abc:	8181      	strh	r1, [r0, #12]
 8013abe:	6643      	str	r3, [r0, #100]	; 0x64
 8013ac0:	81c2      	strh	r2, [r0, #14]
 8013ac2:	6183      	str	r3, [r0, #24]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	2208      	movs	r2, #8
 8013ac8:	305c      	adds	r0, #92	; 0x5c
 8013aca:	f7ff fcff 	bl	80134cc <memset>
 8013ace:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <std+0x38>)
 8013ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ad2:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <std+0x3c>)
 8013ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ad6:	4b05      	ldr	r3, [pc, #20]	; (8013aec <std+0x40>)
 8013ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013ada:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <std+0x44>)
 8013adc:	6224      	str	r4, [r4, #32]
 8013ade:	6323      	str	r3, [r4, #48]	; 0x30
 8013ae0:	bd10      	pop	{r4, pc}
 8013ae2:	bf00      	nop
 8013ae4:	08013d81 	.word	0x08013d81
 8013ae8:	08013da3 	.word	0x08013da3
 8013aec:	08013ddb 	.word	0x08013ddb
 8013af0:	08013dff 	.word	0x08013dff

08013af4 <_cleanup_r>:
 8013af4:	4901      	ldr	r1, [pc, #4]	; (8013afc <_cleanup_r+0x8>)
 8013af6:	f000 b8af 	b.w	8013c58 <_fwalk_reent>
 8013afa:	bf00      	nop
 8013afc:	08013a35 	.word	0x08013a35

08013b00 <__sfmoreglue>:
 8013b00:	b570      	push	{r4, r5, r6, lr}
 8013b02:	2268      	movs	r2, #104	; 0x68
 8013b04:	1e4d      	subs	r5, r1, #1
 8013b06:	4355      	muls	r5, r2
 8013b08:	460e      	mov	r6, r1
 8013b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b0e:	f7ff fd51 	bl	80135b4 <_malloc_r>
 8013b12:	4604      	mov	r4, r0
 8013b14:	b140      	cbz	r0, 8013b28 <__sfmoreglue+0x28>
 8013b16:	2100      	movs	r1, #0
 8013b18:	e9c0 1600 	strd	r1, r6, [r0]
 8013b1c:	300c      	adds	r0, #12
 8013b1e:	60a0      	str	r0, [r4, #8]
 8013b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b24:	f7ff fcd2 	bl	80134cc <memset>
 8013b28:	4620      	mov	r0, r4
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}

08013b2c <__sfp_lock_acquire>:
 8013b2c:	4801      	ldr	r0, [pc, #4]	; (8013b34 <__sfp_lock_acquire+0x8>)
 8013b2e:	f000 b8b3 	b.w	8013c98 <__retarget_lock_acquire_recursive>
 8013b32:	bf00      	nop
 8013b34:	24005509 	.word	0x24005509

08013b38 <__sfp_lock_release>:
 8013b38:	4801      	ldr	r0, [pc, #4]	; (8013b40 <__sfp_lock_release+0x8>)
 8013b3a:	f000 b8ae 	b.w	8013c9a <__retarget_lock_release_recursive>
 8013b3e:	bf00      	nop
 8013b40:	24005509 	.word	0x24005509

08013b44 <__sinit_lock_acquire>:
 8013b44:	4801      	ldr	r0, [pc, #4]	; (8013b4c <__sinit_lock_acquire+0x8>)
 8013b46:	f000 b8a7 	b.w	8013c98 <__retarget_lock_acquire_recursive>
 8013b4a:	bf00      	nop
 8013b4c:	2400550a 	.word	0x2400550a

08013b50 <__sinit_lock_release>:
 8013b50:	4801      	ldr	r0, [pc, #4]	; (8013b58 <__sinit_lock_release+0x8>)
 8013b52:	f000 b8a2 	b.w	8013c9a <__retarget_lock_release_recursive>
 8013b56:	bf00      	nop
 8013b58:	2400550a 	.word	0x2400550a

08013b5c <__sinit>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	f7ff fff0 	bl	8013b44 <__sinit_lock_acquire>
 8013b64:	69a3      	ldr	r3, [r4, #24]
 8013b66:	b11b      	cbz	r3, 8013b70 <__sinit+0x14>
 8013b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b6c:	f7ff bff0 	b.w	8013b50 <__sinit_lock_release>
 8013b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b74:	6523      	str	r3, [r4, #80]	; 0x50
 8013b76:	4b13      	ldr	r3, [pc, #76]	; (8013bc4 <__sinit+0x68>)
 8013b78:	4a13      	ldr	r2, [pc, #76]	; (8013bc8 <__sinit+0x6c>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b7e:	42a3      	cmp	r3, r4
 8013b80:	bf04      	itt	eq
 8013b82:	2301      	moveq	r3, #1
 8013b84:	61a3      	streq	r3, [r4, #24]
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 f820 	bl	8013bcc <__sfp>
 8013b8c:	6060      	str	r0, [r4, #4]
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f000 f81c 	bl	8013bcc <__sfp>
 8013b94:	60a0      	str	r0, [r4, #8]
 8013b96:	4620      	mov	r0, r4
 8013b98:	f000 f818 	bl	8013bcc <__sfp>
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	60e0      	str	r0, [r4, #12]
 8013ba0:	2104      	movs	r1, #4
 8013ba2:	6860      	ldr	r0, [r4, #4]
 8013ba4:	f7ff ff82 	bl	8013aac <std>
 8013ba8:	68a0      	ldr	r0, [r4, #8]
 8013baa:	2201      	movs	r2, #1
 8013bac:	2109      	movs	r1, #9
 8013bae:	f7ff ff7d 	bl	8013aac <std>
 8013bb2:	68e0      	ldr	r0, [r4, #12]
 8013bb4:	2202      	movs	r2, #2
 8013bb6:	2112      	movs	r1, #18
 8013bb8:	f7ff ff78 	bl	8013aac <std>
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	61a3      	str	r3, [r4, #24]
 8013bc0:	e7d2      	b.n	8013b68 <__sinit+0xc>
 8013bc2:	bf00      	nop
 8013bc4:	080142f0 	.word	0x080142f0
 8013bc8:	08013af5 	.word	0x08013af5

08013bcc <__sfp>:
 8013bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bce:	4607      	mov	r7, r0
 8013bd0:	f7ff ffac 	bl	8013b2c <__sfp_lock_acquire>
 8013bd4:	4b1e      	ldr	r3, [pc, #120]	; (8013c50 <__sfp+0x84>)
 8013bd6:	681e      	ldr	r6, [r3, #0]
 8013bd8:	69b3      	ldr	r3, [r6, #24]
 8013bda:	b913      	cbnz	r3, 8013be2 <__sfp+0x16>
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7ff ffbd 	bl	8013b5c <__sinit>
 8013be2:	3648      	adds	r6, #72	; 0x48
 8013be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013be8:	3b01      	subs	r3, #1
 8013bea:	d503      	bpl.n	8013bf4 <__sfp+0x28>
 8013bec:	6833      	ldr	r3, [r6, #0]
 8013bee:	b30b      	cbz	r3, 8013c34 <__sfp+0x68>
 8013bf0:	6836      	ldr	r6, [r6, #0]
 8013bf2:	e7f7      	b.n	8013be4 <__sfp+0x18>
 8013bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013bf8:	b9d5      	cbnz	r5, 8013c30 <__sfp+0x64>
 8013bfa:	4b16      	ldr	r3, [pc, #88]	; (8013c54 <__sfp+0x88>)
 8013bfc:	60e3      	str	r3, [r4, #12]
 8013bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c02:	6665      	str	r5, [r4, #100]	; 0x64
 8013c04:	f000 f847 	bl	8013c96 <__retarget_lock_init_recursive>
 8013c08:	f7ff ff96 	bl	8013b38 <__sfp_lock_release>
 8013c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c14:	6025      	str	r5, [r4, #0]
 8013c16:	61a5      	str	r5, [r4, #24]
 8013c18:	2208      	movs	r2, #8
 8013c1a:	4629      	mov	r1, r5
 8013c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c20:	f7ff fc54 	bl	80134cc <memset>
 8013c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c30:	3468      	adds	r4, #104	; 0x68
 8013c32:	e7d9      	b.n	8013be8 <__sfp+0x1c>
 8013c34:	2104      	movs	r1, #4
 8013c36:	4638      	mov	r0, r7
 8013c38:	f7ff ff62 	bl	8013b00 <__sfmoreglue>
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	6030      	str	r0, [r6, #0]
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d1d5      	bne.n	8013bf0 <__sfp+0x24>
 8013c44:	f7ff ff78 	bl	8013b38 <__sfp_lock_release>
 8013c48:	230c      	movs	r3, #12
 8013c4a:	603b      	str	r3, [r7, #0]
 8013c4c:	e7ee      	b.n	8013c2c <__sfp+0x60>
 8013c4e:	bf00      	nop
 8013c50:	080142f0 	.word	0x080142f0
 8013c54:	ffff0001 	.word	0xffff0001

08013c58 <_fwalk_reent>:
 8013c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	4688      	mov	r8, r1
 8013c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c64:	2700      	movs	r7, #0
 8013c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8013c6e:	d505      	bpl.n	8013c7c <_fwalk_reent+0x24>
 8013c70:	6824      	ldr	r4, [r4, #0]
 8013c72:	2c00      	cmp	r4, #0
 8013c74:	d1f7      	bne.n	8013c66 <_fwalk_reent+0xe>
 8013c76:	4638      	mov	r0, r7
 8013c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c7c:	89ab      	ldrh	r3, [r5, #12]
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d907      	bls.n	8013c92 <_fwalk_reent+0x3a>
 8013c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c86:	3301      	adds	r3, #1
 8013c88:	d003      	beq.n	8013c92 <_fwalk_reent+0x3a>
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	47c0      	blx	r8
 8013c90:	4307      	orrs	r7, r0
 8013c92:	3568      	adds	r5, #104	; 0x68
 8013c94:	e7e9      	b.n	8013c6a <_fwalk_reent+0x12>

08013c96 <__retarget_lock_init_recursive>:
 8013c96:	4770      	bx	lr

08013c98 <__retarget_lock_acquire_recursive>:
 8013c98:	4770      	bx	lr

08013c9a <__retarget_lock_release_recursive>:
 8013c9a:	4770      	bx	lr

08013c9c <__swhatbuf_r>:
 8013c9c:	b570      	push	{r4, r5, r6, lr}
 8013c9e:	460e      	mov	r6, r1
 8013ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ca4:	2900      	cmp	r1, #0
 8013ca6:	b096      	sub	sp, #88	; 0x58
 8013ca8:	4614      	mov	r4, r2
 8013caa:	461d      	mov	r5, r3
 8013cac:	da08      	bge.n	8013cc0 <__swhatbuf_r+0x24>
 8013cae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	602a      	str	r2, [r5, #0]
 8013cb6:	061a      	lsls	r2, r3, #24
 8013cb8:	d410      	bmi.n	8013cdc <__swhatbuf_r+0x40>
 8013cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cbe:	e00e      	b.n	8013cde <__swhatbuf_r+0x42>
 8013cc0:	466a      	mov	r2, sp
 8013cc2:	f000 f8c3 	bl	8013e4c <_fstat_r>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	dbf1      	blt.n	8013cae <__swhatbuf_r+0x12>
 8013cca:	9a01      	ldr	r2, [sp, #4]
 8013ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cd4:	425a      	negs	r2, r3
 8013cd6:	415a      	adcs	r2, r3
 8013cd8:	602a      	str	r2, [r5, #0]
 8013cda:	e7ee      	b.n	8013cba <__swhatbuf_r+0x1e>
 8013cdc:	2340      	movs	r3, #64	; 0x40
 8013cde:	2000      	movs	r0, #0
 8013ce0:	6023      	str	r3, [r4, #0]
 8013ce2:	b016      	add	sp, #88	; 0x58
 8013ce4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ce8 <__smakebuf_r>:
 8013ce8:	898b      	ldrh	r3, [r1, #12]
 8013cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013cec:	079d      	lsls	r5, r3, #30
 8013cee:	4606      	mov	r6, r0
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	d507      	bpl.n	8013d04 <__smakebuf_r+0x1c>
 8013cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013cf8:	6023      	str	r3, [r4, #0]
 8013cfa:	6123      	str	r3, [r4, #16]
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	6163      	str	r3, [r4, #20]
 8013d00:	b002      	add	sp, #8
 8013d02:	bd70      	pop	{r4, r5, r6, pc}
 8013d04:	ab01      	add	r3, sp, #4
 8013d06:	466a      	mov	r2, sp
 8013d08:	f7ff ffc8 	bl	8013c9c <__swhatbuf_r>
 8013d0c:	9900      	ldr	r1, [sp, #0]
 8013d0e:	4605      	mov	r5, r0
 8013d10:	4630      	mov	r0, r6
 8013d12:	f7ff fc4f 	bl	80135b4 <_malloc_r>
 8013d16:	b948      	cbnz	r0, 8013d2c <__smakebuf_r+0x44>
 8013d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d1c:	059a      	lsls	r2, r3, #22
 8013d1e:	d4ef      	bmi.n	8013d00 <__smakebuf_r+0x18>
 8013d20:	f023 0303 	bic.w	r3, r3, #3
 8013d24:	f043 0302 	orr.w	r3, r3, #2
 8013d28:	81a3      	strh	r3, [r4, #12]
 8013d2a:	e7e3      	b.n	8013cf4 <__smakebuf_r+0xc>
 8013d2c:	4b0d      	ldr	r3, [pc, #52]	; (8013d64 <__smakebuf_r+0x7c>)
 8013d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d30:	89a3      	ldrh	r3, [r4, #12]
 8013d32:	6020      	str	r0, [r4, #0]
 8013d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d38:	81a3      	strh	r3, [r4, #12]
 8013d3a:	9b00      	ldr	r3, [sp, #0]
 8013d3c:	6163      	str	r3, [r4, #20]
 8013d3e:	9b01      	ldr	r3, [sp, #4]
 8013d40:	6120      	str	r0, [r4, #16]
 8013d42:	b15b      	cbz	r3, 8013d5c <__smakebuf_r+0x74>
 8013d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f000 f891 	bl	8013e70 <_isatty_r>
 8013d4e:	b128      	cbz	r0, 8013d5c <__smakebuf_r+0x74>
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	f023 0303 	bic.w	r3, r3, #3
 8013d56:	f043 0301 	orr.w	r3, r3, #1
 8013d5a:	81a3      	strh	r3, [r4, #12]
 8013d5c:	89a0      	ldrh	r0, [r4, #12]
 8013d5e:	4305      	orrs	r5, r0
 8013d60:	81a5      	strh	r5, [r4, #12]
 8013d62:	e7cd      	b.n	8013d00 <__smakebuf_r+0x18>
 8013d64:	08013af5 	.word	0x08013af5

08013d68 <__malloc_lock>:
 8013d68:	4801      	ldr	r0, [pc, #4]	; (8013d70 <__malloc_lock+0x8>)
 8013d6a:	f7ff bf95 	b.w	8013c98 <__retarget_lock_acquire_recursive>
 8013d6e:	bf00      	nop
 8013d70:	24005508 	.word	0x24005508

08013d74 <__malloc_unlock>:
 8013d74:	4801      	ldr	r0, [pc, #4]	; (8013d7c <__malloc_unlock+0x8>)
 8013d76:	f7ff bf90 	b.w	8013c9a <__retarget_lock_release_recursive>
 8013d7a:	bf00      	nop
 8013d7c:	24005508 	.word	0x24005508

08013d80 <__sread>:
 8013d80:	b510      	push	{r4, lr}
 8013d82:	460c      	mov	r4, r1
 8013d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d88:	f000 f894 	bl	8013eb4 <_read_r>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	bfab      	itete	ge
 8013d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d92:	89a3      	ldrhlt	r3, [r4, #12]
 8013d94:	181b      	addge	r3, r3, r0
 8013d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d9a:	bfac      	ite	ge
 8013d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d9e:	81a3      	strhlt	r3, [r4, #12]
 8013da0:	bd10      	pop	{r4, pc}

08013da2 <__swrite>:
 8013da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013da6:	461f      	mov	r7, r3
 8013da8:	898b      	ldrh	r3, [r1, #12]
 8013daa:	05db      	lsls	r3, r3, #23
 8013dac:	4605      	mov	r5, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	4616      	mov	r6, r2
 8013db2:	d505      	bpl.n	8013dc0 <__swrite+0x1e>
 8013db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013db8:	2302      	movs	r3, #2
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f000 f868 	bl	8013e90 <_lseek_r>
 8013dc0:	89a3      	ldrh	r3, [r4, #12]
 8013dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013dca:	81a3      	strh	r3, [r4, #12]
 8013dcc:	4632      	mov	r2, r6
 8013dce:	463b      	mov	r3, r7
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd6:	f000 b817 	b.w	8013e08 <_write_r>

08013dda <__sseek>:
 8013dda:	b510      	push	{r4, lr}
 8013ddc:	460c      	mov	r4, r1
 8013dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de2:	f000 f855 	bl	8013e90 <_lseek_r>
 8013de6:	1c43      	adds	r3, r0, #1
 8013de8:	89a3      	ldrh	r3, [r4, #12]
 8013dea:	bf15      	itete	ne
 8013dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8013dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013df6:	81a3      	strheq	r3, [r4, #12]
 8013df8:	bf18      	it	ne
 8013dfa:	81a3      	strhne	r3, [r4, #12]
 8013dfc:	bd10      	pop	{r4, pc}

08013dfe <__sclose>:
 8013dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e02:	f000 b813 	b.w	8013e2c <_close_r>
	...

08013e08 <_write_r>:
 8013e08:	b538      	push	{r3, r4, r5, lr}
 8013e0a:	4d07      	ldr	r5, [pc, #28]	; (8013e28 <_write_r+0x20>)
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	4608      	mov	r0, r1
 8013e10:	4611      	mov	r1, r2
 8013e12:	2200      	movs	r2, #0
 8013e14:	602a      	str	r2, [r5, #0]
 8013e16:	461a      	mov	r2, r3
 8013e18:	f7ee fc07 	bl	800262a <_write>
 8013e1c:	1c43      	adds	r3, r0, #1
 8013e1e:	d102      	bne.n	8013e26 <_write_r+0x1e>
 8013e20:	682b      	ldr	r3, [r5, #0]
 8013e22:	b103      	cbz	r3, 8013e26 <_write_r+0x1e>
 8013e24:	6023      	str	r3, [r4, #0]
 8013e26:	bd38      	pop	{r3, r4, r5, pc}
 8013e28:	2400550c 	.word	0x2400550c

08013e2c <_close_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4d06      	ldr	r5, [pc, #24]	; (8013e48 <_close_r+0x1c>)
 8013e30:	2300      	movs	r3, #0
 8013e32:	4604      	mov	r4, r0
 8013e34:	4608      	mov	r0, r1
 8013e36:	602b      	str	r3, [r5, #0]
 8013e38:	f7ee fc13 	bl	8002662 <_close>
 8013e3c:	1c43      	adds	r3, r0, #1
 8013e3e:	d102      	bne.n	8013e46 <_close_r+0x1a>
 8013e40:	682b      	ldr	r3, [r5, #0]
 8013e42:	b103      	cbz	r3, 8013e46 <_close_r+0x1a>
 8013e44:	6023      	str	r3, [r4, #0]
 8013e46:	bd38      	pop	{r3, r4, r5, pc}
 8013e48:	2400550c 	.word	0x2400550c

08013e4c <_fstat_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4d07      	ldr	r5, [pc, #28]	; (8013e6c <_fstat_r+0x20>)
 8013e50:	2300      	movs	r3, #0
 8013e52:	4604      	mov	r4, r0
 8013e54:	4608      	mov	r0, r1
 8013e56:	4611      	mov	r1, r2
 8013e58:	602b      	str	r3, [r5, #0]
 8013e5a:	f7ee fc0e 	bl	800267a <_fstat>
 8013e5e:	1c43      	adds	r3, r0, #1
 8013e60:	d102      	bne.n	8013e68 <_fstat_r+0x1c>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b103      	cbz	r3, 8013e68 <_fstat_r+0x1c>
 8013e66:	6023      	str	r3, [r4, #0]
 8013e68:	bd38      	pop	{r3, r4, r5, pc}
 8013e6a:	bf00      	nop
 8013e6c:	2400550c 	.word	0x2400550c

08013e70 <_isatty_r>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	4d06      	ldr	r5, [pc, #24]	; (8013e8c <_isatty_r+0x1c>)
 8013e74:	2300      	movs	r3, #0
 8013e76:	4604      	mov	r4, r0
 8013e78:	4608      	mov	r0, r1
 8013e7a:	602b      	str	r3, [r5, #0]
 8013e7c:	f7ee fc0d 	bl	800269a <_isatty>
 8013e80:	1c43      	adds	r3, r0, #1
 8013e82:	d102      	bne.n	8013e8a <_isatty_r+0x1a>
 8013e84:	682b      	ldr	r3, [r5, #0]
 8013e86:	b103      	cbz	r3, 8013e8a <_isatty_r+0x1a>
 8013e88:	6023      	str	r3, [r4, #0]
 8013e8a:	bd38      	pop	{r3, r4, r5, pc}
 8013e8c:	2400550c 	.word	0x2400550c

08013e90 <_lseek_r>:
 8013e90:	b538      	push	{r3, r4, r5, lr}
 8013e92:	4d07      	ldr	r5, [pc, #28]	; (8013eb0 <_lseek_r+0x20>)
 8013e94:	4604      	mov	r4, r0
 8013e96:	4608      	mov	r0, r1
 8013e98:	4611      	mov	r1, r2
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	602a      	str	r2, [r5, #0]
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	f7ee fc06 	bl	80026b0 <_lseek>
 8013ea4:	1c43      	adds	r3, r0, #1
 8013ea6:	d102      	bne.n	8013eae <_lseek_r+0x1e>
 8013ea8:	682b      	ldr	r3, [r5, #0]
 8013eaa:	b103      	cbz	r3, 8013eae <_lseek_r+0x1e>
 8013eac:	6023      	str	r3, [r4, #0]
 8013eae:	bd38      	pop	{r3, r4, r5, pc}
 8013eb0:	2400550c 	.word	0x2400550c

08013eb4 <_read_r>:
 8013eb4:	b538      	push	{r3, r4, r5, lr}
 8013eb6:	4d07      	ldr	r5, [pc, #28]	; (8013ed4 <_read_r+0x20>)
 8013eb8:	4604      	mov	r4, r0
 8013eba:	4608      	mov	r0, r1
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	602a      	str	r2, [r5, #0]
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	f7ee fb94 	bl	80025f0 <_read>
 8013ec8:	1c43      	adds	r3, r0, #1
 8013eca:	d102      	bne.n	8013ed2 <_read_r+0x1e>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	b103      	cbz	r3, 8013ed2 <_read_r+0x1e>
 8013ed0:	6023      	str	r3, [r4, #0]
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}
 8013ed4:	2400550c 	.word	0x2400550c

08013ed8 <_init>:
 8013ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eda:	bf00      	nop
 8013edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ede:	bc08      	pop	{r3}
 8013ee0:	469e      	mov	lr, r3
 8013ee2:	4770      	bx	lr

08013ee4 <_fini>:
 8013ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ee6:	bf00      	nop
 8013ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eea:	bc08      	pop	{r3}
 8013eec:	469e      	mov	lr, r3
 8013eee:	4770      	bx	lr
