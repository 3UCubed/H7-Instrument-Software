
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08017340  08017340  00027340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017784  08017784  00027784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801778c  0801778c  0002778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017790  08017790  00027790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  0801789c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  0801789c  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad4  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002770  00000000  00000000  00069310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002558  00000000  00000000  0006ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003239a  00000000  00000000  000ae0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194bba  00000000  00000000  000e0478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00275032  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0a4  00000000  00000000  00275084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017328 	.word	0x08017328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017328 	.word	0x08017328

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c40 	.word	0x24000c40

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fd94 	bl	8013144 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fd89 	bl	8013144 <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fd7e 	bl	8013144 <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd73 	bl	8013144 <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fab1 	bl	8016bc8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c60 	.word	0x24000c60
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080173ac 	.word	0x080173ac

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fdcb 	bl	8010230 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8444 	bhi.w	8000f30 <HAL_UART_RxCpltCallback+0x8a8>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d55 	.word	0x08000d55
 80006e4:	08000e61 	.word	0x08000e61
 80006e8:	08000ec3 	.word	0x08000ec3
 80006ec:	08000ef3 	.word	0x08000ef3
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e25 	.word	0x08000e25
 8000728:	08000e9b 	.word	0x08000e9b
 800072c:	08000eeb 	.word	0x08000eeb
 8000730:	08000f31 	.word	0x08000f31
 8000734:	08000f31 	.word	0x08000f31
 8000738:	08000f31 	.word	0x08000f31
 800073c:	08000f31 	.word	0x08000f31
 8000740:	08000f31 	.word	0x08000f31
 8000744:	08000f31 	.word	0x08000f31
 8000748:	08000f31 	.word	0x08000f31
 800074c:	08000f31 	.word	0x08000f31
 8000750:	08000f31 	.word	0x08000f31
 8000754:	08000f31 	.word	0x08000f31
 8000758:	08000f31 	.word	0x08000f31
 800075c:	08000f31 	.word	0x08000f31
 8000760:	08000f31 	.word	0x08000f31
 8000764:	08000f31 	.word	0x08000f31
 8000768:	08000f31 	.word	0x08000f31
 800076c:	08000f31 	.word	0x08000f31
 8000770:	08000f31 	.word	0x08000f31
 8000774:	08000f31 	.word	0x08000f31
 8000778:	08000f31 	.word	0x08000f31
 800077c:	08000f31 	.word	0x08000f31
 8000780:	08000f31 	.word	0x08000f31
 8000784:	08000f31 	.word	0x08000f31
 8000788:	08000f31 	.word	0x08000f31
 800078c:	08000f31 	.word	0x08000f31
 8000790:	08000f31 	.word	0x08000f31
 8000794:	08000f31 	.word	0x08000f31
 8000798:	08000f31 	.word	0x08000f31
 800079c:	08000f31 	.word	0x08000f31
 80007a0:	08000f31 	.word	0x08000f31
 80007a4:	08000f31 	.word	0x08000f31
 80007a8:	08000f31 	.word	0x08000f31
 80007ac:	08000f31 	.word	0x08000f31
 80007b0:	08000f31 	.word	0x08000f31
 80007b4:	08000f31 	.word	0x08000f31
 80007b8:	08000f31 	.word	0x08000f31
 80007bc:	08000f31 	.word	0x08000f31
 80007c0:	08000f31 	.word	0x08000f31
 80007c4:	08000f31 	.word	0x08000f31
 80007c8:	08000f31 	.word	0x08000f31
 80007cc:	08000f31 	.word	0x08000f31
 80007d0:	08000f31 	.word	0x08000f31
 80007d4:	08000f31 	.word	0x08000f31
 80007d8:	08000f31 	.word	0x08000f31
 80007dc:	08000f31 	.word	0x08000f31
 80007e0:	08000f31 	.word	0x08000f31
 80007e4:	08000f31 	.word	0x08000f31
 80007e8:	08000f31 	.word	0x08000f31
 80007ec:	08000f31 	.word	0x08000f31
 80007f0:	08000f31 	.word	0x08000f31
 80007f4:	08000f31 	.word	0x08000f31
 80007f8:	08000f31 	.word	0x08000f31
 80007fc:	08000f31 	.word	0x08000f31
 8000800:	08000f31 	.word	0x08000f31
 8000804:	08000f31 	.word	0x08000f31
 8000808:	08000f31 	.word	0x08000f31
 800080c:	08000f31 	.word	0x08000f31
 8000810:	08000f31 	.word	0x08000f31
 8000814:	08000f31 	.word	0x08000f31
 8000818:	08000f31 	.word	0x08000f31
 800081c:	08000f31 	.word	0x08000f31
 8000820:	08000f31 	.word	0x08000f31
 8000824:	08000f31 	.word	0x08000f31
 8000828:	08000f31 	.word	0x08000f31
 800082c:	08000f31 	.word	0x08000f31
 8000830:	08000f31 	.word	0x08000f31
 8000834:	08000f31 	.word	0x08000f31
 8000838:	08000f31 	.word	0x08000f31
 800083c:	08000f31 	.word	0x08000f31
 8000840:	08000f31 	.word	0x08000f31
 8000844:	08000f31 	.word	0x08000f31
 8000848:	08000f31 	.word	0x08000f31
 800084c:	08000f31 	.word	0x08000f31
 8000850:	08000f31 	.word	0x08000f31
 8000854:	08000f31 	.word	0x08000f31
 8000858:	08000f31 	.word	0x08000f31
 800085c:	08000f31 	.word	0x08000f31
 8000860:	08000f31 	.word	0x08000f31
 8000864:	08000f31 	.word	0x08000f31
 8000868:	08000f31 	.word	0x08000f31
 800086c:	08000f31 	.word	0x08000f31
 8000870:	08000f31 	.word	0x08000f31
 8000874:	08000f31 	.word	0x08000f31
 8000878:	08000f31 	.word	0x08000f31
 800087c:	08000f31 	.word	0x08000f31
 8000880:	08000f31 	.word	0x08000f31
 8000884:	08000f31 	.word	0x08000f31
 8000888:	08000f31 	.word	0x08000f31
 800088c:	08000f31 	.word	0x08000f31
 8000890:	08000f31 	.word	0x08000f31
 8000894:	08000f31 	.word	0x08000f31
 8000898:	08000f31 	.word	0x08000f31
 800089c:	08000f31 	.word	0x08000f31
 80008a0:	08000f31 	.word	0x08000f31
 80008a4:	08000f31 	.word	0x08000f31
 80008a8:	08000f31 	.word	0x08000f31
 80008ac:	08000f31 	.word	0x08000f31
 80008b0:	08000f31 	.word	0x08000f31
 80008b4:	08000f31 	.word	0x08000f31
 80008b8:	08000f31 	.word	0x08000f31
 80008bc:	08000f31 	.word	0x08000f31
 80008c0:	08000f31 	.word	0x08000f31
 80008c4:	08000f31 	.word	0x08000f31
 80008c8:	08000f31 	.word	0x08000f31
 80008cc:	08000f31 	.word	0x08000f31
 80008d0:	08000f31 	.word	0x08000f31
 80008d4:	08000f31 	.word	0x08000f31
 80008d8:	08000f31 	.word	0x08000f31
 80008dc:	08000f31 	.word	0x08000f31
 80008e0:	08000f31 	.word	0x08000f31
 80008e4:	08000f31 	.word	0x08000f31
 80008e8:	08000f31 	.word	0x08000f31
 80008ec:	08000f31 	.word	0x08000f31
 80008f0:	08000f31 	.word	0x08000f31
 80008f4:	08000f31 	.word	0x08000f31
 80008f8:	08000f31 	.word	0x08000f31
 80008fc:	08000f31 	.word	0x08000f31
 8000900:	08000f31 	.word	0x08000f31
 8000904:	08000f31 	.word	0x08000f31
 8000908:	08000f31 	.word	0x08000f31
 800090c:	08000f31 	.word	0x08000f31
 8000910:	08000f31 	.word	0x08000f31
 8000914:	08000f31 	.word	0x08000f31
 8000918:	08000f31 	.word	0x08000f31
 800091c:	08000f31 	.word	0x08000f31
 8000920:	08000f31 	.word	0x08000f31
 8000924:	08000f31 	.word	0x08000f31
 8000928:	08000f31 	.word	0x08000f31
 800092c:	08000f31 	.word	0x08000f31
 8000930:	08000f31 	.word	0x08000f31
 8000934:	08000f31 	.word	0x08000f31
 8000938:	08000f31 	.word	0x08000f31
 800093c:	08000f31 	.word	0x08000f31
 8000940:	08000f31 	.word	0x08000f31
 8000944:	08000f31 	.word	0x08000f31
 8000948:	08000f31 	.word	0x08000f31
 800094c:	08000f31 	.word	0x08000f31
 8000950:	08000f31 	.word	0x08000f31
 8000954:	08000f31 	.word	0x08000f31
 8000958:	08000f31 	.word	0x08000f31
 800095c:	08000f31 	.word	0x08000f31
 8000960:	08000f31 	.word	0x08000f31
 8000964:	08000f31 	.word	0x08000f31
 8000968:	08000f31 	.word	0x08000f31
 800096c:	08000f07 	.word	0x08000f07
 8000970:	08000f31 	.word	0x08000f31
 8000974:	08000f31 	.word	0x08000f31
 8000978:	08000f31 	.word	0x08000f31
 800097c:	08000f31 	.word	0x08000f31
 8000980:	08000f31 	.word	0x08000f31
 8000984:	08000f31 	.word	0x08000f31
 8000988:	08000f31 	.word	0x08000f31
 800098c:	08000f31 	.word	0x08000f31
 8000990:	08000f31 	.word	0x08000f31
 8000994:	08000f31 	.word	0x08000f31
 8000998:	08000f31 	.word	0x08000f31
 800099c:	08000f31 	.word	0x08000f31
 80009a0:	08000f31 	.word	0x08000f31
 80009a4:	08000f31 	.word	0x08000f31
 80009a8:	08000f31 	.word	0x08000f31
 80009ac:	08000f31 	.word	0x08000f31
 80009b0:	08000f31 	.word	0x08000f31
 80009b4:	08000f31 	.word	0x08000f31
 80009b8:	08000f31 	.word	0x08000f31
 80009bc:	08000f31 	.word	0x08000f31
 80009c0:	08000f31 	.word	0x08000f31
 80009c4:	08000f31 	.word	0x08000f31
 80009c8:	08000f31 	.word	0x08000f31
 80009cc:	08000f31 	.word	0x08000f31
 80009d0:	08000f31 	.word	0x08000f31
 80009d4:	08000f31 	.word	0x08000f31
 80009d8:	08000f31 	.word	0x08000f31
 80009dc:	08000f31 	.word	0x08000f31
 80009e0:	08000f31 	.word	0x08000f31
 80009e4:	08000f31 	.word	0x08000f31
 80009e8:	08000f31 	.word	0x08000f31
 80009ec:	08000f31 	.word	0x08000f31
 80009f0:	08000f1f 	.word	0x08000f1f
 80009f4:	08000f31 	.word	0x08000f31
 80009f8:	08000f31 	.word	0x08000f31
 80009fc:	08000f31 	.word	0x08000f31
 8000a00:	08000f31 	.word	0x08000f31
 8000a04:	08000f31 	.word	0x08000f31
 8000a08:	08000f31 	.word	0x08000f31
 8000a0c:	08000f31 	.word	0x08000f31
 8000a10:	08000f31 	.word	0x08000f31
 8000a14:	08000f31 	.word	0x08000f31
 8000a18:	08000f31 	.word	0x08000f31
 8000a1c:	08000f31 	.word	0x08000f31
 8000a20:	08000f31 	.word	0x08000f31
 8000a24:	08000f31 	.word	0x08000f31
 8000a28:	08000f31 	.word	0x08000f31
 8000a2c:	08000f31 	.word	0x08000f31
 8000a30:	08000f0d 	.word	0x08000f0d
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f8c7 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fb11 	bl	8009068 <HAL_GPIO_WritePin>
		break;
 8000a46:	e27e      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f8bd 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fb07 	bl	8009068 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e274      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
 8000a5c:	24000c64 	.word	0x24000c64
 8000a60:	24000638 	.word	0x24000638
 8000a64:	080173c4 	.word	0x080173c4
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	080173cc 	.word	0x080173cc
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a72:	f016 f8a9 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bbe      	ldr	r3, [pc, #760]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 faf3 	bl	8009068 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbc      	ldr	r3, [pc, #752]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e25d      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48bb      	ldr	r0, [pc, #748]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a8c:	f016 f89c 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fae6 	bl	8009068 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fae0 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fad9 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb1      	ldr	r3, [pc, #708]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fad2 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 facb 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fac5 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4ba7      	ldr	r3, [pc, #668]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fabf 	bl	8009068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba4      	ldr	r3, [pc, #656]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fab8 	bl	8009068 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e20a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b32:	f016 f849 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fa92 	bl	8009068 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1fc      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4895      	ldr	r0, [pc, #596]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b4e:	f016 f83b 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8a      	ldr	r3, [pc, #552]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fa84 	bl	8009068 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1ee      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	488f      	ldr	r0, [pc, #572]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b6a:	f016 f82d 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fa77 	bl	8009068 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1e1      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b84:	f016 f820 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fa6a 	bl	8009068 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1d4      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4884      	ldr	r0, [pc, #528]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b9e:	f016 f813 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa5d 	bl	8009068 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1c7      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb8:	f016 f806 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fa50 	bl	8009068 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1ba      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	4879      	ldr	r0, [pc, #484]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000bd2:	f015 fff9 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fa42 	bl	8009068 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1ac      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4873      	ldr	r0, [pc, #460]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000bee:	f015 ffeb 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fa34 	bl	8009068 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e19e      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c0a:	f015 ffdd 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fa26 	bl	8009068 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e190      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	4867      	ldr	r0, [pc, #412]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c26:	f015 ffcf 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fa18 	bl	8009068 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e182      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c42:	f015 ffc1 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fa0a 	bl	8009068 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e174      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c5e:	f015 ffb3 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 f9fc 	bl	8009068 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e166      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c7a:	f015 ffa5 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 f9ef 	bl	8009068 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e159      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c94:	f015 ff98 	bl	8016bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 f9e2 	bl	8009068 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e14c      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cae:	f015 ff8b 	bl	8016bc8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4848      	ldr	r0, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f004 fe37 	bl	8005930 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e140      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ff7f 	bl	8016bc8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	f004 feef 	bl	8005ab0 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e138      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cd6:	f015 ff77 	bl	8016bc8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4843      	ldr	r0, [pc, #268]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cde:	f00d fdc7 	bl	800e870 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		break;
 8000cee:	e12a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cf2:	f015 ff69 	bl	8016bc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cfa:	f00d ff13 	bl	800eb24 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e11f      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d08:	f015 ff5e 	bl	8016bc8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d10:	f00d fdae 	bl	800e870 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e111      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d24:	f015 ff50 	bl	8016bc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d2c:	f00d fefa 	bl	800eb24 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e106      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d3a:	f015 ff45 	bl	8016bc8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d42:	f00d fd95 	bl	800e870 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e0f8      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d56:	f015 ff37 	bl	8016bc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d5e:	f00d fee1 	bl	800eb24 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e0ed      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
 8000d6a:	bf00      	nop
 8000d6c:	080173d8 	.word	0x080173d8
 8000d70:	58020400 	.word	0x58020400
 8000d74:	24000c1c 	.word	0x24000c1c
 8000d78:	080173e4 	.word	0x080173e4
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	24000c1d 	.word	0x24000c1d
 8000d84:	24000c1e 	.word	0x24000c1e
 8000d88:	24000c1f 	.word	0x24000c1f
 8000d8c:	24000c20 	.word	0x24000c20
 8000d90:	24000c21 	.word	0x24000c21
 8000d94:	24000c22 	.word	0x24000c22
 8000d98:	24000c23 	.word	0x24000c23
 8000d9c:	24000c24 	.word	0x24000c24
 8000da0:	080173f0 	.word	0x080173f0
 8000da4:	080173fc 	.word	0x080173fc
 8000da8:	0801740c 	.word	0x0801740c
 8000dac:	08017418 	.word	0x08017418
 8000db0:	08017424 	.word	0x08017424
 8000db4:	08017430 	.word	0x08017430
 8000db8:	08017440 	.word	0x08017440
 8000dbc:	0801744c 	.word	0x0801744c
 8000dc0:	08017458 	.word	0x08017458
 8000dc4:	08017464 	.word	0x08017464
 8000dc8:	08017470 	.word	0x08017470
 8000dcc:	08017480 	.word	0x08017480
 8000dd0:	08017490 	.word	0x08017490
 8000dd4:	0801749c 	.word	0x0801749c
 8000dd8:	080174ac 	.word	0x080174ac
 8000ddc:	24000010 	.word	0x24000010
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	080174bc 	.word	0x080174bc
 8000de8:	080174cc 	.word	0x080174cc
 8000dec:	24000554 	.word	0x24000554
 8000df0:	24000c5b 	.word	0x24000c5b
 8000df4:	24000c56 	.word	0x24000c56
 8000df8:	080174d4 	.word	0x080174d4
 8000dfc:	080174e0 	.word	0x080174e0
 8000e00:	24000508 	.word	0x24000508
 8000e04:	24000c5a 	.word	0x24000c5a
 8000e08:	24000c54 	.word	0x24000c54
 8000e0c:	080174e8 	.word	0x080174e8
 8000e10:	080174f0 	.word	0x080174f0
 8000e14:	240005a0 	.word	0x240005a0
 8000e18:	24000c5c 	.word	0x24000c5c
 8000e1c:	24000c58 	.word	0x24000c58
 8000e20:	080174f8 	.word	0x080174f8
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e24:	484a      	ldr	r0, [pc, #296]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e26:	f015 fecf 	bl	8016bc8 <puts>
		if (step < 17) {
 8000e2a:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	f200 8082 	bhi.w	8000f38 <HAL_UART_RxCpltCallback+0x8b0>
			step += 2;
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e40:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4842      	ldr	r0, [pc, #264]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e52:	f004 fed0 	bl	8005bf6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e56:	2100      	movs	r1, #0
 8000e58:	4840      	ldr	r0, [pc, #256]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e5a:	f004 fd11 	bl	8005880 <HAL_DAC_Start>
		}
		break;
 8000e5e:	e06b      	b.n	8000f38 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e60:	483f      	ldr	r0, [pc, #252]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e62:	f015 feb1 	bl	8016bc8 <puts>
		if (step > 3) {
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d966      	bls.n	8000f3c <HAL_UART_RxCpltCallback+0x8b4>
			step -= 2;
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b02      	subs	r3, #2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e78:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e7a:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4834      	ldr	r0, [pc, #208]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e8c:	f004 feb3 	bl	8005bf6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4832      	ldr	r0, [pc, #200]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e94:	f004 fcf4 	bl	8005880 <HAL_DAC_Start>
		}
		break;
 8000e98:	e050      	b.n	8000f3c <HAL_UART_RxCpltCallback+0x8b4>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e9a:	4832      	ldr	r0, [pc, #200]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e9c:	f015 fe94 	bl	8016bc8 <puts>
		if (cadence <= 50000) {
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d849      	bhi.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
			cadence *= 2;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000eb4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ec0:	e03e      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec2:	482a      	ldr	r0, [pc, #168]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000ec4:	f015 fe80 	bl	8016bc8 <puts>
		if (cadence >= 6250) {
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d937      	bls.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
			cadence /= 2;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000edc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee8:	e02c      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000eea:	4821      	ldr	r0, [pc, #132]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000eec:	f015 fe6c 	bl	8016bc8 <puts>
		// TODO: Exit stop mode
		break;
 8000ef0:	e029      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000ef2:	4820      	ldr	r0, [pc, #128]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000ef4:	f015 fe68 	bl	8016bc8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2116      	movs	r1, #22
 8000efe:	4618      	mov	r0, r3
 8000f00:	f012 f920 	bl	8013144 <osEventFlagsSet>
		break;
 8000f04:	e01f      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0xAF: {
		sync();
 8000f06:	f001 f96f 	bl	80021e8 <sync>
		break;
 8000f0a:	e01c      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000f0e:	f015 fe5b 	bl	8016bc8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f013 feba 	bl	8014c90 <xTaskResumeFromISR>
		break;
 8000f1c:	e013      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f1e:	4819      	ldr	r0, [pc, #100]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000f20:	f015 fe52 	bl	8016bc8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f013 feb1 	bl	8014c90 <xTaskResumeFromISR>
		break;
 8000f2e:	e00a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
	}
	default: {
		printf("Unknown Command\n");
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000f32:	f015 fe49 	bl	8016bc8 <puts>
		break;
 8000f36:	e006      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
		break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
		break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
		break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8be>
		break;
 8000f44:	bf00      	nop
	}
	}
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	08017500 	.word	0x08017500
 8000f54:	2400000c 	.word	0x2400000c
 8000f58:	24000010 	.word	0x24000010
 8000f5c:	240002f4 	.word	0x240002f4
 8000f60:	08017508 	.word	0x08017508
 8000f64:	08017514 	.word	0x08017514
 8000f68:	24000008 	.word	0x24000008
 8000f6c:	08017520 	.word	0x08017520
 8000f70:	0801752c 	.word	0x0801752c
 8000f74:	0801753c 	.word	0x0801753c
 8000f78:	24000c60 	.word	0x24000c60
 8000f7c:	0801754c 	.word	0x0801754c
 8000f80:	24000750 	.word	0x24000750
 8000f84:	08017558 	.word	0x08017558
 8000f88:	240009b0 	.word	0x240009b0
 8000f8c:	08017564 	.word	0x08017564

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f002 fee0 	bl	8003d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f8ac 	bl	80010f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f9c:	f000 f92a 	bl	80011f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 feee 	bl	8001d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa4:	f000 feb4 	bl	8001d10 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fa8:	f000 fdac 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fac:	f000 fe48 	bl	8001c40 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fb0:	f000 fb36 	bl	8001620 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fb4:	f000 fc2c 	bl	8001810 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fb8:	f000 fd2e 	bl	8001a18 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fbc:	f000 fc80 	bl	80018c0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fc0:	f000 fa6a 	bl	8001498 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fc4:	f000 f946 	bl	8001254 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fc8:	f000 faf8 	bl	80015bc <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fcc:	f000 fbc8 	bl	8001760 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fd0:	f000 fb68 	bl	80016a4 <MX_RTC_Init>
  MX_TIM4_Init();
 8000fd4:	f000 fde6 	bl	8001ba4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd8:	f011 ff3c 	bl	8012e54 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2108      	movs	r1, #8
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	f012 f9ac 	bl	801333e <osMessageQueueNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <main+0xf8>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <main+0xfc>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <main+0x100>)
 8000ff2:	f011 ff79 	bl	8012ee8 <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <main+0x104>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <main+0x108>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4826      	ldr	r0, [pc, #152]	; (800109c <main+0x10c>)
 8001002:	f011 ff71 	bl	8012ee8 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <main+0x110>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800100c:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <main+0x114>)
 800100e:	2100      	movs	r1, #0
 8001010:	4825      	ldr	r0, [pc, #148]	; (80010a8 <main+0x118>)
 8001012:	f011 ff69 	bl	8012ee8 <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <main+0x11c>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 800101c:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <main+0x120>)
 800101e:	2100      	movs	r1, #0
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <main+0x124>)
 8001022:	f011 ff61 	bl	8012ee8 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <main+0x128>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <main+0x12c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <main+0x130>)
 8001032:	f011 ff59 	bl	8012ee8 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <main+0x134>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <main+0x138>)
 800103e:	2100      	movs	r1, #0
 8001040:	4822      	ldr	r0, [pc, #136]	; (80010cc <main+0x13c>)
 8001042:	f011 ff51 	bl	8012ee8 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <main+0x140>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <main+0x144>)
 800104e:	2100      	movs	r1, #0
 8001050:	4821      	ldr	r0, [pc, #132]	; (80010d8 <main+0x148>)
 8001052:	f011 ff49 	bl	8012ee8 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <main+0x14c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 800105c:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <main+0x150>)
 800105e:	2100      	movs	r1, #0
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <main+0x154>)
 8001062:	f011 ff41 	bl	8012ee8 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <main+0x158>)
 800106a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 800106c:	2000      	movs	r0, #0
 800106e:	f012 f829 	bl	80130c4 <osEventFlagsNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <main+0x15c>)
 8001076:	6013      	str	r3, [r2, #0]
	system_setup();
 8001078:	f001 f91e 	bl	80022b8 <system_setup>
	printf("Starting kernal...\n");
 800107c:	481c      	ldr	r0, [pc, #112]	; (80010f0 <main+0x160>)
 800107e:	f015 fda3 	bl	8016bc8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001082:	f011 ff0b 	bl	8012e9c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001086:	e7fe      	b.n	8001086 <main+0xf6>
 8001088:	24000c44 	.word	0x24000c44
 800108c:	080175c0 	.word	0x080175c0
 8001090:	08002ab5 	.word	0x08002ab5
 8001094:	24000744 	.word	0x24000744
 8001098:	080175e4 	.word	0x080175e4
 800109c:	08002af9 	.word	0x08002af9
 80010a0:	24000748 	.word	0x24000748
 80010a4:	08017608 	.word	0x08017608
 80010a8:	08002b3d 	.word	0x08002b3d
 80010ac:	2400074c 	.word	0x2400074c
 80010b0:	0801762c 	.word	0x0801762c
 80010b4:	08002b81 	.word	0x08002b81
 80010b8:	24000750 	.word	0x24000750
 80010bc:	08017650 	.word	0x08017650
 80010c0:	08002c29 	.word	0x08002c29
 80010c4:	240009b0 	.word	0x240009b0
 80010c8:	08017674 	.word	0x08017674
 80010cc:	08002cd1 	.word	0x08002cd1
 80010d0:	24000c10 	.word	0x24000c10
 80010d4:	08017698 	.word	0x08017698
 80010d8:	08002d89 	.word	0x08002d89
 80010dc:	24000c14 	.word	0x24000c14
 80010e0:	080176bc 	.word	0x080176bc
 80010e4:	08002e75 	.word	0x08002e75
 80010e8:	24000c18 	.word	0x24000c18
 80010ec:	24000c60 	.word	0x24000c60
 80010f0:	08017574 	.word	0x08017574

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09c      	sub	sp, #112	; 0x70
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	224c      	movs	r2, #76	; 0x4c
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f015 fc0a 	bl	801691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2220      	movs	r2, #32
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f015 fc04 	bl	801691c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001114:	2002      	movs	r0, #2
 8001116:	f008 fe09 	bl	8009d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <SystemClock_Config+0xf8>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <SystemClock_Config+0xf8>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	62d3      	str	r3, [r2, #44]	; 0x2c
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <SystemClock_Config+0xf8>)
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <SystemClock_Config+0xfc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800113c:	4a2c      	ldr	r2, [pc, #176]	; (80011f0 <SystemClock_Config+0xfc>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <SystemClock_Config+0xfc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001150:	bf00      	nop
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SystemClock_Config+0xfc>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800115e:	d1f8      	bne.n	8001152 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001160:	2303      	movs	r3, #3
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800116a:	2309      	movs	r3, #9
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2302      	movs	r3, #2
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800117e:	2320      	movs	r3, #32
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001182:	2304      	movs	r3, #4
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001186:	2304      	movs	r3, #4
 8001188:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800118e:	2308      	movs	r3, #8
 8001190:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001192:	2300      	movs	r3, #0
 8001194:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f008 fdfe 	bl	8009da0 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011aa:	f001 fe93 	bl	8002ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	233f      	movs	r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2303      	movs	r3, #3
 80011b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2101      	movs	r1, #1
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fa3e 	bl	800a654 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011de:	f001 fe79 	bl	8002ed4 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3770      	adds	r7, #112	; 0x70
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	58000400 	.word	0x58000400
 80011f0:	58024800 	.word	0x58024800

080011f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b0      	sub	sp, #192	; 0xc0
 80011f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	22c0      	movs	r2, #192	; 0xc0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f015 fb8b 	bl	801691c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001206:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001216:	2320      	movs	r3, #32
 8001218:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4618      	mov	r0, r3
 800123c:	f009 fdd8 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001246:	f001 fe45 	bl	8002ed4 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	37c0      	adds	r7, #192	; 0xc0
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001278:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <MX_ADC1_Init+0x210>)
 800127a:	4a7b      	ldr	r2, [pc, #492]	; (8001468 <MX_ADC1_Init+0x214>)
 800127c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800127e:	4b79      	ldr	r3, [pc, #484]	; (8001464 <MX_ADC1_Init+0x210>)
 8001280:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001286:	4b77      	ldr	r3, [pc, #476]	; (8001464 <MX_ADC1_Init+0x210>)
 8001288:	2208      	movs	r2, #8
 800128a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800128c:	4b75      	ldr	r3, [pc, #468]	; (8001464 <MX_ADC1_Init+0x210>)
 800128e:	2201      	movs	r2, #1
 8001290:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <MX_ADC1_Init+0x210>)
 8001294:	2204      	movs	r2, #4
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001298:	4b72      	ldr	r3, [pc, #456]	; (8001464 <MX_ADC1_Init+0x210>)
 800129a:	2200      	movs	r2, #0
 800129c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	4b71      	ldr	r3, [pc, #452]	; (8001464 <MX_ADC1_Init+0x210>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <MX_ADC1_Init+0x210>)
 80012a6:	220b      	movs	r2, #11
 80012a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012aa:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <MX_ADC1_Init+0x210>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <MX_ADC1_Init+0x210>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <MX_ADC1_Init+0x210>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <MX_ADC1_Init+0x210>)
 80012be:	2203      	movs	r2, #3
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012c2:	4b68      	ldr	r3, [pc, #416]	; (8001464 <MX_ADC1_Init+0x210>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ca:	4b66      	ldr	r3, [pc, #408]	; (8001464 <MX_ADC1_Init+0x210>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <MX_ADC1_Init+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d8:	4862      	ldr	r0, [pc, #392]	; (8001464 <MX_ADC1_Init+0x210>)
 80012da:	f002 ffc9 	bl	8004270 <HAL_ADC_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012e4:	f001 fdf6 	bl	8002ed4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	485c      	ldr	r0, [pc, #368]	; (8001464 <MX_ADC1_Init+0x210>)
 80012f4:	f004 f8e4 	bl	80054c0 <HAL_ADCEx_MultiModeConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012fe:	f001 fde9 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <MX_ADC1_Init+0x218>)
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001306:	2306      	movs	r3, #6
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800130a:	2307      	movs	r3, #7
 800130c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001314:	2304      	movs	r3, #4
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	484f      	ldr	r0, [pc, #316]	; (8001464 <MX_ADC1_Init+0x210>)
 8001326:	f003 fa27 	bl	8004778 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001330:	f001 fdd0 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001334:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <MX_ADC1_Init+0x21c>)
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001338:	230c      	movs	r3, #12
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4848      	ldr	r0, [pc, #288]	; (8001464 <MX_ADC1_Init+0x210>)
 8001342:	f003 fa19 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800134c:	f001 fdc2 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <MX_ADC1_Init+0x220>)
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001354:	2312      	movs	r3, #18
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4841      	ldr	r0, [pc, #260]	; (8001464 <MX_ADC1_Init+0x210>)
 800135e:	f003 fa0b 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001368:	f001 fdb4 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <MX_ADC1_Init+0x224>)
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001370:	2318      	movs	r3, #24
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <MX_ADC1_Init+0x210>)
 800137a:	f003 f9fd 	bl	8004778 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001384:	f001 fda6 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <MX_ADC1_Init+0x228>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800138c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_ADC1_Init+0x210>)
 8001398:	f003 f9ee 	bl	8004778 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013a2:	f001 fd97 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <MX_ADC1_Init+0x22c>)
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013aa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <MX_ADC1_Init+0x210>)
 80013b6:	f003 f9df 	bl	8004778 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013c0:	f001 fd88 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_ADC1_Init+0x230>)
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4824      	ldr	r0, [pc, #144]	; (8001464 <MX_ADC1_Init+0x210>)
 80013d4:	f003 f9d0 	bl	8004778 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013de:	f001 fd79 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_ADC1_Init+0x234>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013e6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	481c      	ldr	r0, [pc, #112]	; (8001464 <MX_ADC1_Init+0x210>)
 80013f2:	f003 f9c1 	bl	8004778 <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013fc:	f001 fd6a 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_ADC1_Init+0x238>)
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001404:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4815      	ldr	r0, [pc, #84]	; (8001464 <MX_ADC1_Init+0x210>)
 8001410:	f003 f9b2 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800141a:	f001 fd5b 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_ADC1_Init+0x23c>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_ADC1_Init+0x210>)
 800142e:	f003 f9a3 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001438:	f001 fd4c 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC1_Init+0x240>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001440:	f240 2306 	movw	r3, #518	; 0x206
 8001444:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <MX_ADC1_Init+0x210>)
 800144c:	f003 f994 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001456:	f001 fd3d 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400013c 	.word	0x2400013c
 8001468:	40022000 	.word	0x40022000
 800146c:	0c900008 	.word	0x0c900008
 8001470:	10c00010 	.word	0x10c00010
 8001474:	14f00020 	.word	0x14f00020
 8001478:	1d500080 	.word	0x1d500080
 800147c:	21800100 	.word	0x21800100
 8001480:	25b00200 	.word	0x25b00200
 8001484:	2a000400 	.word	0x2a000400
 8001488:	2e300800 	.word	0x2e300800
 800148c:	3ac04000 	.word	0x3ac04000
 8001490:	3ef08000 	.word	0x3ef08000
 8001494:	47520000 	.word	0x47520000

08001498 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014b2:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <MX_ADC3_Init+0x114>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014b8:	2208      	movs	r2, #8
 80014ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014be:	2201      	movs	r2, #1
 80014c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014dc:	2200      	movs	r2, #0
 80014de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_ADC3_Init+0x110>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_ADC3_Init+0x110>)
 800150a:	f002 feb1 	bl	8004270 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001514:	f001 fcde 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <MX_ADC3_Init+0x118>)
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151c:	2306      	movs	r3, #6
 800151e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001520:	2307      	movs	r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001524:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001528:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_ADC3_Init+0x110>)
 800153c:	f003 f91c 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001546:	f001 fcc5 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_ADC3_Init+0x11c>)
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800154e:	230c      	movs	r3, #12
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001558:	f003 f90e 	bl	8004778 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001562:	f001 fcb7 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800156a:	2312      	movs	r3, #18
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001574:	f003 f900 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800157e:	f001 fca9 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_ADC3_Init+0x120>)
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001586:	2318      	movs	r3, #24
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_ADC3_Init+0x110>)
 8001590:	f003 f8f2 	bl	8004778 <HAL_ADC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800159a:	f001 fc9b 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240001a0 	.word	0x240001a0
 80015ac:	58026000 	.word	0x58026000
 80015b0:	cb840000 	.word	0xcb840000
 80015b4:	cfb80000 	.word	0xcfb80000
 80015b8:	04300002 	.word	0x04300002

080015bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2224      	movs	r2, #36	; 0x24
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f015 f9a7 	bl	801691c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_DAC1_Init+0x5c>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_DAC1_Init+0x60>)
 80015d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015d4:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_DAC1_Init+0x5c>)
 80015d6:	f004 f931 	bl	800583c <HAL_DAC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015e0:	f001 fc78 	bl	8002ed4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e8:	230a      	movs	r3, #10
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_DAC1_Init+0x5c>)
 8001600:	f004 fb4c 	bl	8005c9c <HAL_DAC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800160a:	f001 fc63 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240002f4 	.word	0x240002f4
 800161c:	40007400 	.word	0x40007400

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_I2C1_Init+0x78>)
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <MX_I2C1_Init+0x7c>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_I2C1_Init+0x78>)
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <MX_I2C1_Init+0x80>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_I2C1_Init+0x78>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_I2C1_Init+0x78>)
 8001638:	2201      	movs	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_I2C1_Init+0x78>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_I2C1_Init+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_I2C1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_I2C1_Init+0x78>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_I2C1_Init+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480f      	ldr	r0, [pc, #60]	; (8001698 <MX_I2C1_Init+0x78>)
 800165c:	f007 fd1e 	bl	800909c <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001666:	f001 fc35 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <MX_I2C1_Init+0x78>)
 800166e:	f008 fa65 	bl	8009b3c <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001678:	f001 fc2c 	bl	8002ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_I2C1_Init+0x78>)
 8001680:	f008 faa7 	bl	8009bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f001 fc23 	bl	8002ed4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800168e:	2001      	movs	r0, #1
 8001690:	f008 faec 	bl	8009c6c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000380 	.word	0x24000380
 800169c:	40005400 	.word	0x40005400
 80016a0:	0020081f 	.word	0x0020081f

080016a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_RTC_Init+0xb4>)
 80016be:	4a27      	ldr	r2, [pc, #156]	; (800175c <MX_RTC_Init+0xb8>)
 80016c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_RTC_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_RTC_Init+0xb4>)
 80016ca:	2263      	movs	r2, #99	; 0x63
 80016cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_RTC_Init+0xb4>)
 80016d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_RTC_Init+0xb4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_RTC_Init+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_RTC_Init+0xb4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_RTC_Init+0xb4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ee:	481a      	ldr	r0, [pc, #104]	; (8001758 <MX_RTC_Init+0xb4>)
 80016f0:	f00c f87c 	bl	800d7ec <HAL_RTC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016fa:	f001 fbeb 	bl	8002ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001702:	2300      	movs	r3, #0
 8001704:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001706:	2300      	movs	r3, #0
 8001708:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2201      	movs	r2, #1
 8001716:	4619      	mov	r1, r3
 8001718:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_RTC_Init+0xb4>)
 800171a:	f00c f8e9 	bl	800d8f0 <HAL_RTC_SetTime>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001724:	f001 fbd6 	bl	8002ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001728:	2301      	movs	r3, #1
 800172a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800172c:	2301      	movs	r3, #1
 800172e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001730:	2301      	movs	r3, #1
 8001732:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001734:	2300      	movs	r3, #0
 8001736:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	2201      	movs	r2, #1
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_RTC_Init+0xb4>)
 8001740:	f00c f9d0 	bl	800dae4 <HAL_RTC_SetDate>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800174a:	f001 fbc3 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	240003d4 	.word	0x240003d4
 800175c:	58004000 	.word	0x58004000

08001760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <MX_SPI1_Init+0xac>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_SPI1_Init+0xa8>)
 800176c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001774:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001778:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <MX_SPI1_Init+0xa8>)
 800177c:	220f      	movs	r2, #15
 800177e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_SPI1_Init+0xa8>)
 800178e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_SPI1_Init+0xa8>)
 8001796:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800179a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_SPI1_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_SPI1_Init+0xa8>)
 80017f4:	f00c fb1c 	bl	800de30 <HAL_SPI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017fe:	f001 fb69 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	240003f8 	.word	0x240003f8
 800180c:	40013000 	.word	0x40013000

08001810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <MX_SPI2_Init+0xac>)
 8001818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800181c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001824:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001828:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800182c:	220f      	movs	r2, #15
 800182e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800183e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001842:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001846:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800184a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_SPI2_Init+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_SPI2_Init+0xa8>)
 80018a4:	f00c fac4 	bl	800de30 <HAL_SPI_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018ae:	f001 fb11 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24000480 	.word	0x24000480
 80018bc:	40003800 	.word	0x40003800

080018c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b09a      	sub	sp, #104	; 0x68
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	222c      	movs	r2, #44	; 0x2c
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f015 f80e 	bl	801691c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001902:	4a44      	ldr	r2, [pc, #272]	; (8001a14 <MX_TIM1_Init+0x154>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001908:	2231      	movs	r2, #49	; 0x31
 800190a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <MX_TIM1_Init+0x150>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001914:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <MX_TIM1_Init+0x150>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800192c:	4838      	ldr	r0, [pc, #224]	; (8001a10 <MX_TIM1_Init+0x150>)
 800192e:	f00c fed0 	bl	800e6d2 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001938:	f001 facc 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001946:	4619      	mov	r1, r3
 8001948:	4831      	ldr	r0, [pc, #196]	; (8001a10 <MX_TIM1_Init+0x150>)
 800194a:	f00d fc4b 	bl	800f1e4 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001954:	f001 fabe 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001958:	482d      	ldr	r0, [pc, #180]	; (8001a10 <MX_TIM1_Init+0x150>)
 800195a:	f00d f9c7 	bl	800ecec <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001964:	f001 fab6 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001978:	4619      	mov	r1, r3
 800197a:	4825      	ldr	r0, [pc, #148]	; (8001a10 <MX_TIM1_Init+0x150>)
 800197c:	f00e f988 	bl	800fc90 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001986:	f001 faa5 	bl	8002ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4818      	ldr	r0, [pc, #96]	; (8001a10 <MX_TIM1_Init+0x150>)
 80019b0:	f00d fb04 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019ba:	f001 fa8b 	bl	8002ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MX_TIM1_Init+0x150>)
 80019f4:	f00e f9da 	bl	800fdac <HAL_TIMEx_ConfigBreakDeadTime>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019fe:	f001 fa69 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <MX_TIM1_Init+0x150>)
 8001a04:	f001 fe16 	bl	8003634 <HAL_TIM_MspPostInit>

}
 8001a08:	bf00      	nop
 8001a0a:	3768      	adds	r7, #104	; 0x68
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000508 	.word	0x24000508
 8001a14:	40010000 	.word	0x40010000

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	; 0x38
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a54:	2231      	movs	r2, #49	; 0x31
 8001a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a60:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a72:	4823      	ldr	r0, [pc, #140]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a74:	f00c fe2d 	bl	800e6d2 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a7e:	f001 fa29 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481c      	ldr	r0, [pc, #112]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001a90:	f00d fba8 	bl	800f1e4 <HAL_TIM_ConfigClockSource>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a9a:	f001 fa1b 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001aa0:	f00d f924 	bl	800ecec <HAL_TIM_PWM_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aaa:	f001 fa13 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001abe:	f00e f8e7 	bl	800fc90 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ac8:	f001 fa04 	bl	8002ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	220c      	movs	r2, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001ae4:	f00d fa6a 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001aee:	f001 f9f1 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MX_TIM2_Init+0xe8>)
 8001af4:	f001 fd9e 	bl	8003634 <HAL_TIM_MspPostInit>

}
 8001af8:	bf00      	nop
 8001afa:	3738      	adds	r7, #56	; 0x38
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24000554 	.word	0x24000554

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b24:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <MX_TIM3_Init+0x9c>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b38:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b4c:	f00c fdc1 	bl	800e6d2 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b56:	f001 f9bd 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b68:	f00d fb3c 	bl	800f1e4 <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b72:	f001 f9af 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_TIM3_Init+0x98>)
 8001b84:	f00e f884 	bl	800fc90 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b8e:	f001 f9a1 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	240005a0 	.word	0x240005a0
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <MX_TIM4_Init+0x98>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bca:	2263      	movs	r2, #99	; 0x63
 8001bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bd6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be8:	4813      	ldr	r0, [pc, #76]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001bea:	f00c fd72 	bl	800e6d2 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bf4:	f001 f96e 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	4619      	mov	r1, r3
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001c06:	f00d faed 	bl	800f1e4 <HAL_TIM_ConfigClockSource>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c10:	f001 f960 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM4_Init+0x94>)
 8001c22:	f00e f835 	bl	800fc90 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c2c:	f001 f952 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	240005ec 	.word	0x240005ec
 8001c3c:	40000800 	.word	0x40000800

08001c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <MX_USART1_UART_Init+0xcc>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c4c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c8a:	f00e f92b 	bl	800fee4 <HAL_UART_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c94:	f001 f91e 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	481b      	ldr	r0, [pc, #108]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001c9c:	f010 ffcb 	bl	8012c36 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ca6:	f001 f915 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	4816      	ldr	r0, [pc, #88]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cae:	f011 f800 	bl	8012cb2 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb8:	f001 f90c 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cbe:	f010 ff81 	bl	8012bc4 <HAL_UARTEx_DisableFifoMode>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc8:	f001 f904 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001ccc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cd2:	f010 ffee 	bl	8012cb2 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cd8:	f010 ff39 	bl	8012b4e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cde:	f010 ff03 	bl	8012ae8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cf0:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <MX_USART1_UART_Init+0xc8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d00:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000638 	.word	0x24000638
 8001d0c:	40011000 	.word	0x40011000

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_DMA_Init+0x6c>)
 8001d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <MX_DMA_Init+0x6c>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_DMA_Init+0x6c>)
 8001d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2105      	movs	r1, #5
 8001d38:	200b      	movs	r0, #11
 8001d3a:	f003 fd57 	bl	80057ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d3e:	200b      	movs	r0, #11
 8001d40:	f003 fd6e 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2105      	movs	r1, #5
 8001d48:	200c      	movs	r0, #12
 8001d4a:	f003 fd4f 	bl	80057ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d4e:	200c      	movs	r0, #12
 8001d50:	f003 fd66 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2105      	movs	r1, #5
 8001d58:	200d      	movs	r0, #13
 8001d5a:	f003 fd47 	bl	80057ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d5e:	200d      	movs	r0, #13
 8001d60:	f003 fd5e 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2105      	movs	r1, #5
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f003 fd3f 	bl	80057ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f003 fd56 	bl	8005820 <HAL_NVIC_EnableIRQ>

}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58024400 	.word	0x58024400

08001d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_GPIO_Init+0xe8>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e14:	4815      	ldr	r0, [pc, #84]	; (8001e6c <MX_GPIO_Init+0xec>)
 8001e16:	f007 f927 	bl	8009068 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2164      	movs	r1, #100	; 0x64
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <MX_GPIO_Init+0xf0>)
 8001e20:	f007 f922 	bl	8009068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e24:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <MX_GPIO_Init+0xec>)
 8001e3e:	f006 ff4b 	bl	8008cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_GPIO_Init+0xf0>)
 8001e5a:	f006 ff3d 	bl	8008cd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020800 	.word	0x58020800
 8001e70:	58020400 	.word	0x58020400

08001e74 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	b299      	uxth	r1, r3
 8001e86:	f107 0208 	add.w	r2, r7, #8
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <poll_i2c_sensor+0x7c>)
 8001e94:	f007 f99e 	bl	80091d4 <HAL_I2C_Master_Transmit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001ea2:	4814      	ldr	r0, [pc, #80]	; (8001ef4 <poll_i2c_sensor+0x80>)
 8001ea4:	f014 fe90 	bl	8016bc8 <puts>
 8001ea8:	e01c      	b.n	8001ee4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	f107 0208 	add.w	r2, r7, #8
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <poll_i2c_sensor+0x7c>)
 8001ebc:	f007 faa2 	bl	8009404 <HAL_I2C_Master_Receive>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001eca:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <poll_i2c_sensor+0x84>)
 8001ecc:	f014 fe7c 	bl	8016bc8 <puts>
 8001ed0:	e008      	b.n	8001ee4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001ed2:	7a3b      	ldrb	r3, [r7, #8]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001edc:	7a7a      	ldrb	r2, [r7, #9]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	10db      	asrs	r3, r3, #3
 8001ee2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001ee4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	24000380 	.word	0x24000380
 8001ef4:	08017588 	.word	0x08017588
 8001ef8:	08017598 	.word	0x08017598

08001efc <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f04:	f107 010c 	add.w	r1, r7, #12
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <receive_pmt_spi+0x44>)
 8001f0e:	f00c f8b3 	bl	800e078 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f16:	7b7b      	ldrb	r3, [r7, #13]
 8001f18:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <receive_pmt_spi+0x44>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <receive_pmt_spi+0x44>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f28:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7bba      	ldrb	r2, [r7, #14]
 8001f2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	701a      	strb	r2, [r3, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	240003f8 	.word	0x240003f8

08001f44 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f4c:	f107 010c 	add.w	r1, r7, #12
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	2201      	movs	r2, #1
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <receive_erpa_spi+0x44>)
 8001f56:	f00c f88f 	bl	800e078 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f5e:	7b7b      	ldrb	r3, [r7, #13]
 8001f60:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <receive_erpa_spi+0x44>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <receive_erpa_spi+0x44>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f70:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7bba      	ldrb	r2, [r7, #14]
 8001f76:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	701a      	strb	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	24000480 	.word	0x24000480

08001f8c <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <receive_erpa_adc+0x30>)
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <receive_erpa_adc+0x30>)
 8001f9c:	895b      	ldrh	r3, [r3, #10]
 8001f9e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	89fa      	ldrh	r2, [r7, #14]
 8001fa4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	89ba      	ldrh	r2, [r7, #12]
 8001fac:	801a      	strh	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	24000cc0 	.word	0x24000cc0

08001fc0 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fc8:	2390      	movs	r3, #144	; 0x90
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff52 	bl	8001e74 <poll_i2c_sensor>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fd4:	2394      	movs	r3, #148	; 0x94
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff4c 	bl	8001e74 <poll_i2c_sensor>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fe0:	2392      	movs	r3, #146	; 0x92
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff46 	bl	8001e74 <poll_i2c_sensor>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fec:	2396      	movs	r3, #150	; 0x96
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff40 	bl	8001e74 <poll_i2c_sensor>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3302      	adds	r3, #2
 8002002:	89ba      	ldrh	r2, [r7, #12]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	897a      	ldrh	r2, [r7, #10]
 800200c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3306      	adds	r3, #6
 8002012:	893a      	ldrh	r2, [r7, #8]
 8002014:	801a      	strh	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <receive_hk_adc1+0x90>)
 800202a:	8a9b      	ldrh	r3, [r3, #20]
 800202c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <receive_hk_adc1+0x90>)
 8002030:	8a1b      	ldrh	r3, [r3, #16]
 8002032:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <receive_hk_adc1+0x90>)
 8002036:	899b      	ldrh	r3, [r3, #12]
 8002038:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <receive_hk_adc1+0x90>)
 800203c:	8a5b      	ldrh	r3, [r3, #18]
 800203e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <receive_hk_adc1+0x90>)
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <receive_hk_adc1+0x90>)
 8002048:	88db      	ldrh	r3, [r3, #6]
 800204a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <receive_hk_adc1+0x90>)
 800204e:	89db      	ldrh	r3, [r3, #14]
 8002050:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <receive_hk_adc1+0x90>)
 8002054:	891b      	ldrh	r3, [r3, #8]
 8002056:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <receive_hk_adc1+0x90>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8bfa      	ldrh	r2, [r7, #30]
 8002062:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3302      	adds	r3, #2
 8002068:	8bba      	ldrh	r2, [r7, #28]
 800206a:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	8b7a      	ldrh	r2, [r7, #26]
 8002072:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3306      	adds	r3, #6
 8002078:	8b3a      	ldrh	r2, [r7, #24]
 800207a:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3308      	adds	r3, #8
 8002080:	8afa      	ldrh	r2, [r7, #22]
 8002082:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	330a      	adds	r3, #10
 8002088:	8aba      	ldrh	r2, [r7, #20]
 800208a:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	330c      	adds	r3, #12
 8002090:	8a7a      	ldrh	r2, [r7, #18]
 8002092:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	330e      	adds	r3, #14
 8002098:	8a3a      	ldrh	r2, [r7, #16]
 800209a:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3310      	adds	r3, #16
 80020a0:	89fa      	ldrh	r2, [r7, #14]
 80020a2:	801a      	strh	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	24000cc0 	.word	0x24000cc0

080020b4 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <receive_hk_adc3+0x4c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <receive_hk_adc3+0x4c>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <receive_hk_adc3+0x4c>)
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <receive_hk_adc3+0x4c>)
 80020d0:	88db      	ldrh	r3, [r3, #6]
 80020d2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	89fa      	ldrh	r2, [r7, #14]
 80020d8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3302      	adds	r3, #2
 80020de:	89ba      	ldrh	r2, [r7, #12]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	897a      	ldrh	r2, [r7, #10]
 80020e8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3306      	adds	r3, #6
 80020ee:	893a      	ldrh	r2, [r7, #8]
 80020f0:	801a      	strh	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	24000ce0 	.word	0x24000ce0

08002104 <getCurrentStep>:

// *********************************************************************************************************** HELPER FUNCTIONS

uint8_t getCurrentStep(){
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
	int dacValue;

	dacValue = DAC1->DHR12R1;
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <getCurrentStep+0xc0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	607b      	str	r3, [r7, #4]

	switch (dacValue) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002116:	4293      	cmp	r3, r2
 8002118:	d04a      	beq.n	80021b0 <getCurrentStep+0xac>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	da48      	bge.n	80021b4 <getCurrentStep+0xb0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002128:	4293      	cmp	r3, r2
 800212a:	d03f      	beq.n	80021ac <getCurrentStep+0xa8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002132:	4293      	cmp	r3, r2
 8002134:	dc3e      	bgt.n	80021b4 <getCurrentStep+0xb0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f640 421f 	movw	r2, #3103	; 0xc1f
 800213c:	4293      	cmp	r3, r2
 800213e:	d033      	beq.n	80021a8 <getCurrentStep+0xa4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002146:	da35      	bge.n	80021b4 <getCurrentStep+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800214e:	4293      	cmp	r3, r2
 8002150:	d028      	beq.n	80021a4 <getCurrentStep+0xa0>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002158:	4293      	cmp	r3, r2
 800215a:	dc2b      	bgt.n	80021b4 <getCurrentStep+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f240 7245 	movw	r2, #1861	; 0x745
 8002162:	4293      	cmp	r3, r2
 8002164:	d01c      	beq.n	80021a0 <getCurrentStep+0x9c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f240 7245 	movw	r2, #1861	; 0x745
 800216c:	4293      	cmp	r3, r2
 800216e:	dc21      	bgt.n	80021b4 <getCurrentStep+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002176:	4293      	cmp	r3, r2
 8002178:	d010      	beq.n	800219c <getCurrentStep+0x98>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002180:	4293      	cmp	r3, r2
 8002182:	dc17      	bgt.n	80021b4 <getCurrentStep+0xb0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <getCurrentStep+0x90>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002190:	d002      	beq.n	8002198 <getCurrentStep+0x94>
 8002192:	e00f      	b.n	80021b4 <getCurrentStep+0xb0>
	case 0:
		return 0;
 8002194:	2300      	movs	r3, #0
 8002196:	e00e      	b.n	80021b6 <getCurrentStep+0xb2>
	case 620:
		return 1;
 8002198:	2301      	movs	r3, #1
 800219a:	e00c      	b.n	80021b6 <getCurrentStep+0xb2>
	case 1241:
		return 2;
 800219c:	2302      	movs	r3, #2
 800219e:	e00a      	b.n	80021b6 <getCurrentStep+0xb2>
	case 1861:
		return 3;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e008      	b.n	80021b6 <getCurrentStep+0xb2>
	case 2482:
		return 4;
 80021a4:	2304      	movs	r3, #4
 80021a6:	e006      	b.n	80021b6 <getCurrentStep+0xb2>
	case 3103:
		return 5;
 80021a8:	2305      	movs	r3, #5
 80021aa:	e004      	b.n	80021b6 <getCurrentStep+0xb2>
	case 3723:
		return 6;
 80021ac:	2306      	movs	r3, #6
 80021ae:	e002      	b.n	80021b6 <getCurrentStep+0xb2>
	case 4095:
		return 7;
 80021b0:	2307      	movs	r3, #7
 80021b2:	e000      	b.n	80021b6 <getCurrentStep+0xb2>
	default:
		return -1;
 80021b4:	23ff      	movs	r3, #255	; 0xff
	}
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007400 	.word	0x40007400

080021c8 <enterStop>:

void enterStop(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

	//flushMessageQueue();
	sendACK();
 80021cc:	f000 f830 	bl	8002230 <sendACK>

	vTaskSuspendAll();
 80021d0:	f012 fe36 	bl	8014e40 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80021d4:	2101      	movs	r1, #1
 80021d6:	2001      	movs	r0, #1
 80021d8:	f007 fd6c 	bl	8009cb4 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 80021dc:	f012 fe3e 	bl	8014e5c <xTaskResumeAll>
	SystemClock_Config();
 80021e0:	f7fe ff88 	bl	80010f4 <SystemClock_Config>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	sendACK();
 80021ee:	f000 f81f 	bl	8002230 <sendACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <sync+0x40>)
 80021f4:	f00e f8e8 	bl	80103c8 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80021f8:	2364      	movs	r3, #100	; 0x64
 80021fa:	2209      	movs	r2, #9
 80021fc:	490b      	ldr	r1, [pc, #44]	; (800222c <sync+0x44>)
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <sync+0x40>)
 8002200:	f00d ff4e 	bl	80100a0 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <sync+0x44>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2bff      	cmp	r3, #255	; 0xff
 800220e:	d1f3      	bne.n	80021f8 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002210:	2201      	movs	r2, #1
 8002212:	4906      	ldr	r1, [pc, #24]	; (800222c <sync+0x44>)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <sync+0x40>)
 8002216:	f00e f80b 	bl	8010230 <HAL_UART_Receive_IT>

	sendACK();
 800221a:	f000 f809 	bl	8002230 <sendACK>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000638 	.word	0x24000638
 800222c:	24000c64 	.word	0x24000c64

08002230 <sendACK>:


void sendACK() {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <sendACK+0x1c>)
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800223a:	2364      	movs	r3, #100	; 0x64
 800223c:	2201      	movs	r2, #1
 800223e:	4903      	ldr	r1, [pc, #12]	; (800224c <sendACK+0x1c>)
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <sendACK+0x20>)
 8002242:	f00d fe9f 	bl	800ff84 <HAL_UART_Transmit>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	24000ce8 	.word	0x24000ce8
 8002250:	24000638 	.word	0x24000638

08002254 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_UART_TxCpltCallback+0x1c>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	24000000 	.word	0x24000000

08002274 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	4618      	mov	r0, r3
 8002286:	f014 fb2b 	bl	80168e0 <malloc>
 800228a:	4603      	mov	r3, r0
 800228c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f014 fb33 	bl	8016900 <memcpy>
	packet.size = size;
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	481d      	ldr	r0, [pc, #116]	; (8002334 <system_setup+0x7c>)
 80022c0:	f00c fad6 	bl	800e870 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80022c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80022ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022d6:	4818      	ldr	r0, [pc, #96]	; (8002338 <system_setup+0x80>)
 80022d8:	f003 f88e 	bl	80053f8 <HAL_ADCEx_Calibration_Start>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80022e2:	f000 fdf7 	bl	8002ed4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80022e6:	220b      	movs	r2, #11
 80022e8:	4914      	ldr	r1, [pc, #80]	; (800233c <system_setup+0x84>)
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <system_setup+0x80>)
 80022ec:	f002 f962 	bl	80045b4 <HAL_ADC_Start_DMA>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80022f6:	f000 fded 	bl	8002ed4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80022fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002302:	480f      	ldr	r0, [pc, #60]	; (8002340 <system_setup+0x88>)
 8002304:	f003 f878 	bl	80053f8 <HAL_ADCEx_Calibration_Start>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800230e:	f000 fde1 	bl	8002ed4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002312:	2204      	movs	r2, #4
 8002314:	490b      	ldr	r1, [pc, #44]	; (8002344 <system_setup+0x8c>)
 8002316:	480a      	ldr	r0, [pc, #40]	; (8002340 <system_setup+0x88>)
 8002318:	f002 f94c 	bl	80045b4 <HAL_ADC_Start_DMA>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002322:	f000 fdd7 	bl	8002ed4 <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002326:	2201      	movs	r2, #1
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <system_setup+0x90>)
 800232a:	4808      	ldr	r0, [pc, #32]	; (800234c <system_setup+0x94>)
 800232c:	f00d ff80 	bl	8010230 <HAL_UART_Receive_IT>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	240005ec 	.word	0x240005ec
 8002338:	2400013c 	.word	0x2400013c
 800233c:	24000cc0 	.word	0x24000cc0
 8002340:	240001a0 	.word	0x240001a0
 8002344:	24000ce0 	.word	0x24000ce0
 8002348:	24000c64 	.word	0x24000c64
 800234c:	24000638 	.word	0x24000638

08002350 <getUptime>:

void getUptime(uint8_t *buffer) {
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = UptimeMillis;
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <getUptime+0x88>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <getUptime+0x8c>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	613b      	str	r3, [r7, #16]

	// Did UptimeMillis rollover while reading SysTick->VAL?
	if (ms != UptimeMillis) {
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <getUptime+0x88>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	429a      	cmp	r2, r3
 8002370:	d005      	beq.n	800237e <getUptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = UptimeMillis;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <getUptime+0x88>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <getUptime+0x8c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002384:	fb03 f202 	mul.w	r2, r3, r2
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <getUptime+0x8c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	4914      	ldr	r1, [pc, #80]	; (80023e0 <getUptime+0x90>)
 8002390:	fba1 1303 	umull	r1, r3, r1, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	0e1b      	lsrs	r3, r3, #24
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0c1a      	lsrs	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0a1a      	lsrs	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3302      	adds	r3, #2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3303      	adds	r3, #3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	24000c40 	.word	0x24000c40
 80023dc:	e000e010 	.word	0xe000e010
 80023e0:	10624dd3 	.word	0x10624dd3

080023e4 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4821      	ldr	r0, [pc, #132]	; (800247c <getTimestamp+0x98>)
 80023f6:	f00b fb19 	bl	800da2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2200      	movs	r2, #0
 8002400:	4619      	mov	r1, r3
 8002402:	481e      	ldr	r0, [pc, #120]	; (800247c <getTimestamp+0x98>)
 8002404:	f00b fbf6 	bl	800dbf4 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2264      	movs	r2, #100	; 0x64
 800240c:	fb03 f202 	mul.w	r2, r3, r2
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <getTimestamp+0x9c>)
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	7b7a      	ldrb	r2, [r7, #13]
 8002422:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3302      	adds	r3, #2
 8002428:	7bba      	ldrb	r2, [r7, #14]
 800242a:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3303      	adds	r3, #3
 8002430:	7c3a      	ldrb	r2, [r7, #16]
 8002432:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	7c7a      	ldrb	r2, [r7, #17]
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3305      	adds	r3, #5
 8002440:	7cba      	ldrb	r2, [r7, #18]
 8002442:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	0e1a      	lsrs	r2, r3, #24
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3306      	adds	r3, #6
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	0c1a      	lsrs	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3307      	adds	r3, #7
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	0a1a      	lsrs	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3308      	adds	r3, #8
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3309      	adds	r3, #9
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	240003d4 	.word	0x240003d4
 8002480:	000f4240 	.word	0x000f4240

08002484 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800248a:	bf00      	nop
 800248c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002490:	4836      	ldr	r0, [pc, #216]	; (800256c <sample_pmt+0xe8>)
 8002492:	f006 fdd1 	bl	8009038 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f7      	bne.n	800248c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800249c:	200a      	movs	r0, #10
 800249e:	f014 fa1f 	bl	80168e0 <malloc>
 80024a2:	4603      	mov	r3, r0
 80024a4:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80024a6:	2002      	movs	r0, #2
 80024a8:	f014 fa1a 	bl	80168e0 <malloc>
 80024ac:	4603      	mov	r3, r0
 80024ae:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024b0:	2004      	movs	r0, #4
 80024b2:	f014 fa15 	bl	80168e0 <malloc>
 80024b6:	4603      	mov	r3, r0
 80024b8:	60fb      	str	r3, [r7, #12]

	getUptime(uptime);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff ff48 	bl	8002350 <getUptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80024c0:	6938      	ldr	r0, [r7, #16]
 80024c2:	f7ff fd1b 	bl	8001efc <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	22bb      	movs	r2, #187	; 0xbb
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	22bb      	movs	r2, #187	; 0xbb
 80024d2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <sample_pmt+0xec>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29a      	uxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3302      	adds	r3, #2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <sample_pmt+0xec>)
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3303      	adds	r3, #3
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3304      	adds	r3, #4
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3305      	adds	r3, #5
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	7852      	ldrb	r2, [r2, #1]
 8002502:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3306      	adds	r3, #6
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3307      	adds	r3, #7
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	7852      	ldrb	r2, [r2, #1]
 8002516:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3308      	adds	r3, #8
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	7892      	ldrb	r2, [r2, #2]
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3309      	adds	r3, #9
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	78d2      	ldrb	r2, [r2, #3]
 800252a:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	220a      	movs	r2, #10
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fe9e 	bl	8002274 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <sample_pmt+0xf0>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	1d39      	adds	r1, r7, #4
 800253e:	2300      	movs	r3, #0
 8002540:	2200      	movs	r2, #0
 8002542:	f010 ff6f 	bl	8013424 <osMessageQueuePut>
	available_msgs++;
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <sample_pmt+0xf4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <sample_pmt+0xf4>)
 800254e:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f014 f9cd 	bl	80168f0 <free>
	free(pmt_spi);
 8002556:	6938      	ldr	r0, [r7, #16]
 8002558:	f014 f9ca 	bl	80168f0 <free>
	free(uptime);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f014 f9c7 	bl	80168f0 <free>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58020000 	.word	0x58020000
 8002570:	24000c54 	.word	0x24000c54
 8002574:	24000c44 	.word	0x24000c44
 8002578:	24000c50 	.word	0x24000c50

0800257c <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002582:	bf00      	nop
 8002584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002588:	4855      	ldr	r0, [pc, #340]	; (80026e0 <sample_erpa+0x164>)
 800258a:	f006 fd55 	bl	8009038 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f7      	bne.n	8002584 <sample_erpa+0x8>
	}

	static uint8_t prevStep;
	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002594:	200f      	movs	r0, #15
 8002596:	f014 f9a3 	bl	80168e0 <malloc>
 800259a:	4603      	mov	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800259e:	2002      	movs	r0, #2
 80025a0:	f014 f99e 	bl	80168e0 <malloc>
 80025a4:	4603      	mov	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80025a8:	2004      	movs	r0, #4
 80025aa:	f014 f999 	bl	80168e0 <malloc>
 80025ae:	4603      	mov	r3, r0
 80025b0:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80025b2:	2004      	movs	r0, #4
 80025b4:	f014 f994 	bl	80168e0 <malloc>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
	uint8_t sweep_step = -1;
 80025bc:	23ff      	movs	r3, #255	; 0xff
 80025be:	77fb      	strb	r3, [r7, #31]

	getUptime(uptime);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fec5 	bl	8002350 <getUptime>
	prevStep = sweep_step;
 80025c6:	4a47      	ldr	r2, [pc, #284]	; (80026e4 <sample_erpa+0x168>)
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
 80025ca:	7013      	strb	r3, [r2, #0]
	sweep_step = getCurrentStep();
 80025cc:	f7ff fd9a 	bl	8002104 <getCurrentStep>
 80025d0:	4603      	mov	r3, r0
 80025d2:	77fb      	strb	r3, [r7, #31]

	if (prevStep != sweep_step && prevStep != -1){
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <sample_erpa+0x168>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	7ffa      	ldrb	r2, [r7, #31]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d002      	beq.n	80025e4 <sample_erpa+0x68>
		sweep_step = prevStep;
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <sample_erpa+0x168>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	77fb      	strb	r3, [r7, #31]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f7ff fcad 	bl	8001f44 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80025ea:	6938      	ldr	r0, [r7, #16]
 80025ec:	f7ff fcce 	bl	8001f8c <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	22aa      	movs	r2, #170	; 0xaa
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3301      	adds	r3, #1
 80025fa:	22aa      	movs	r2, #170	; 0xaa
 80025fc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <sample_erpa+0x16c>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29a      	uxth	r2, r3
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3302      	adds	r3, #2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <sample_erpa+0x16c>)
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3303      	adds	r3, #3
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3304      	adds	r3, #4
 800261e:	7ffa      	ldrb	r2, [r7, #31]
 8002620:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29a      	uxth	r2, r3
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	3305      	adds	r3, #5
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3306      	adds	r3, #6
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3302      	adds	r3, #2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29a      	uxth	r2, r3
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	3307      	adds	r3, #7
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
	buffer[8] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3302      	adds	r3, #2
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3308      	adds	r3, #8
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[0];					// ERPA eADC MSB
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3309      	adds	r3, #9
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
	buffer[10] = erpa_spi[1];					// ERPA eADC LSB
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	330a      	adds	r3, #10
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	7852      	ldrb	r2, [r2, #1]
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[0];
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	330b      	adds	r3, #11
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[1];
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	330c      	adds	r3, #12
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	7852      	ldrb	r2, [r2, #1]
 8002684:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[2];
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	330d      	adds	r3, #13
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	7892      	ldrb	r2, [r2, #2]
 800268e:	701a      	strb	r2, [r3, #0]
	buffer[14] = uptime[3];
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	330e      	adds	r3, #14
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	78d2      	ldrb	r2, [r2, #3]
 8002698:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	220f      	movs	r2, #15
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fde7 	bl	8002274 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <sample_erpa+0x170>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	1d39      	adds	r1, r7, #4
 80026ac:	2300      	movs	r3, #0
 80026ae:	2200      	movs	r2, #0
 80026b0:	f010 feb8 	bl	8013424 <osMessageQueuePut>
	available_msgs++;
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <sample_erpa+0x174>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <sample_erpa+0x174>)
 80026bc:	6013      	str	r3, [r2, #0]
	free(buffer);
 80026be:	69b8      	ldr	r0, [r7, #24]
 80026c0:	f014 f916 	bl	80168f0 <free>
	free(erpa_spi);
 80026c4:	6978      	ldr	r0, [r7, #20]
 80026c6:	f014 f913 	bl	80168f0 <free>
	free(erpa_adc);
 80026ca:	6938      	ldr	r0, [r7, #16]
 80026cc:	f014 f910 	bl	80168f0 <free>
	free(uptime);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f014 f90d 	bl	80168f0 <free>
}
 80026d6:	bf00      	nop
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	58020400 	.word	0x58020400
 80026e4:	24000ce9 	.word	0x24000ce9
 80026e8:	24000c56 	.word	0x24000c56
 80026ec:	24000c44 	.word	0x24000c44
 80026f0:	24000c50 	.word	0x24000c50

080026f4 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80026fa:	2030      	movs	r0, #48	; 0x30
 80026fc:	f014 f8f0 	bl	80168e0 <malloc>
 8002700:	4603      	mov	r3, r0
 8002702:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002704:	2008      	movs	r0, #8
 8002706:	f014 f8eb 	bl	80168e0 <malloc>
 800270a:	4603      	mov	r3, r0
 800270c:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800270e:	200a      	movs	r0, #10
 8002710:	f014 f8e6 	bl	80168e0 <malloc>
 8002714:	4603      	mov	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fe63 	bl	80023e4 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <sample_hk+0x78>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002726:	db25      	blt.n	8002774 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002728:	6938      	ldr	r0, [r7, #16]
 800272a:	f7ff fc49 	bl	8001fc0 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <sample_hk+0x7c>)
 8002738:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3302      	adds	r3, #2
 800273e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002742:	b29a      	uxth	r2, r3
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <sample_hk+0x7c>)
 8002746:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3304      	adds	r3, #4
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <sample_hk+0x7c>)
 8002754:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3306      	adds	r3, #6
 800275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <sample_hk+0x7c>)
 8002762:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <sample_hk+0x78>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e01f      	b.n	80027ac <sample_hk+0xb8>
 800276c:	24000004 	.word	0x24000004
 8002770:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 8002774:	4b9f      	ldr	r3, [pc, #636]	; (80029f4 <sample_hk+0x300>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a9e      	ldr	r2, [pc, #632]	; (80029f4 <sample_hk+0x300>)
 800277c:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 800277e:	4b9e      	ldr	r3, [pc, #632]	; (80029f8 <sample_hk+0x304>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b21a      	sxth	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002788:	4b9b      	ldr	r3, [pc, #620]	; (80029f8 <sample_hk+0x304>)
 800278a:	885a      	ldrh	r2, [r3, #2]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	3302      	adds	r3, #2
 8002790:	b212      	sxth	r2, r2
 8002792:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002794:	4b98      	ldr	r3, [pc, #608]	; (80029f8 <sample_hk+0x304>)
 8002796:	889a      	ldrh	r2, [r3, #4]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	3304      	adds	r3, #4
 800279c:	b212      	sxth	r2, r2
 800279e:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80027a0:	4b95      	ldr	r3, [pc, #596]	; (80029f8 <sample_hk+0x304>)
 80027a2:	88da      	ldrh	r2, [r3, #6]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	3306      	adds	r3, #6
 80027a8:	b212      	sxth	r2, r2
 80027aa:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	22cc      	movs	r2, #204	; 0xcc
 80027b0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	22cc      	movs	r2, #204	; 0xcc
 80027b8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80027ba:	4b90      	ldr	r3, [pc, #576]	; (80029fc <sample_hk+0x308>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3302      	adds	r3, #2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80027ca:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <sample_hk+0x308>)
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3303      	adds	r3, #3
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <sample_hk+0x30c>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3304      	adds	r3, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 80027e6:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <sample_hk+0x30c>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3305      	adds	r3, #5
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80027f2:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <sample_hk+0x310>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3306      	adds	r3, #6
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002802:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <sample_hk+0x310>)
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3307      	adds	r3, #7
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002814:	121a      	asrs	r2, r3, #8
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3308      	adds	r3, #8
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3309      	adds	r3, #9
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	3302      	adds	r3, #2
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	121a      	asrs	r2, r3, #8
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	330a      	adds	r3, #10
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3302      	adds	r3, #2
 8002842:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	330b      	adds	r3, #11
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3304      	adds	r3, #4
 8002852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002856:	121a      	asrs	r2, r3, #8
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	330c      	adds	r3, #12
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3304      	adds	r3, #4
 8002864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	330d      	adds	r3, #13
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	3306      	adds	r3, #6
 8002874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002878:	121a      	asrs	r2, r3, #8
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	330e      	adds	r3, #14
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3306      	adds	r3, #6
 8002886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	330f      	adds	r3, #15
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <sample_hk+0x314>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	b29a      	uxth	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3310      	adds	r3, #16
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <sample_hk+0x314>)
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3311      	adds	r3, #17
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80028ae:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <sample_hk+0x318>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3312      	adds	r3, #18
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80028be:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <sample_hk+0x318>)
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3313      	adds	r3, #19
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80028ca:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <sample_hk+0x31c>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3314      	adds	r3, #20
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <sample_hk+0x31c>)
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3315      	adds	r3, #21
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 80028e6:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <sample_hk+0x320>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3316      	adds	r3, #22
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <sample_hk+0x320>)
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3317      	adds	r3, #23
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002902:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <sample_hk+0x324>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29a      	uxth	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3318      	adds	r3, #24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <sample_hk+0x324>)
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3319      	adds	r3, #25
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <sample_hk+0x328>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	331a      	adds	r3, #26
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <sample_hk+0x328>)
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	331b      	adds	r3, #27
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <sample_hk+0x32c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	331c      	adds	r3, #28
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 800294a:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <sample_hk+0x32c>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	331d      	adds	r3, #29
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <sample_hk+0x330>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29a      	uxth	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	331e      	adds	r3, #30
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <sample_hk+0x330>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	331f      	adds	r3, #31
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <sample_hk+0x334>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3320      	adds	r3, #32
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <sample_hk+0x334>)
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3321      	adds	r3, #33	; 0x21
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 800298e:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <sample_hk+0x338>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3322      	adds	r3, #34	; 0x22
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <sample_hk+0x338>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3323      	adds	r3, #35	; 0x23
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <sample_hk+0x33c>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3324      	adds	r3, #36	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <sample_hk+0x33c>)
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3325      	adds	r3, #37	; 0x25
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3326      	adds	r3, #38	; 0x26
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3327      	adds	r3, #39	; 0x27
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	7852      	ldrb	r2, [r2, #1]
 80029d8:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3328      	adds	r3, #40	; 0x28
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	7892      	ldrb	r2, [r2, #2]
 80029e2:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3329      	adds	r3, #41	; 0x29
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	78d2      	ldrb	r2, [r2, #3]
 80029ec:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	332a      	adds	r3, #42	; 0x2a
 80029f2:	e01f      	b.n	8002a34 <sample_hk+0x340>
 80029f4:	24000004 	.word	0x24000004
 80029f8:	24000cec 	.word	0x24000cec
 80029fc:	24000c58 	.word	0x24000c58
 8002a00:	24000c26 	.word	0x24000c26
 8002a04:	24000c28 	.word	0x24000c28
 8002a08:	24000c2a 	.word	0x24000c2a
 8002a0c:	24000c2c 	.word	0x24000c2c
 8002a10:	24000c2e 	.word	0x24000c2e
 8002a14:	24000c30 	.word	0x24000c30
 8002a18:	24000c32 	.word	0x24000c32
 8002a1c:	24000c34 	.word	0x24000c34
 8002a20:	24000c36 	.word	0x24000c36
 8002a24:	24000c38 	.word	0x24000c38
 8002a28:	24000c3a 	.word	0x24000c3a
 8002a2c:	24000c3c 	.word	0x24000c3c
 8002a30:	24000c3e 	.word	0x24000c3e
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	7912      	ldrb	r2, [r2, #4]
 8002a38:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	332b      	adds	r3, #43	; 0x2b
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	7952      	ldrb	r2, [r2, #5]
 8002a42:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	332c      	adds	r3, #44	; 0x2c
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	7992      	ldrb	r2, [r2, #6]
 8002a4c:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	332d      	adds	r3, #45	; 0x2d
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	79d2      	ldrb	r2, [r2, #7]
 8002a56:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	332e      	adds	r3, #46	; 0x2e
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	7a12      	ldrb	r2, [r2, #8]
 8002a60:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	332f      	adds	r3, #47	; 0x2f
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	7a52      	ldrb	r2, [r2, #9]
 8002a6a:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2230      	movs	r2, #48	; 0x30
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fbfe 	bl	8002274 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <sample_hk+0x3b8>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	1d39      	adds	r1, r7, #4
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2200      	movs	r2, #0
 8002a82:	f010 fccf 	bl	8013424 <osMessageQueuePut>
	available_msgs++;
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <sample_hk+0x3bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <sample_hk+0x3bc>)
 8002a8e:	6013      	str	r3, [r2, #0]

	free(buffer);
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f013 ff2d 	bl	80168f0 <free>
	free(hk_i2c);
 8002a96:	6938      	ldr	r0, [r7, #16]
 8002a98:	f013 ff2a 	bl	80168f0 <free>
	free(timestamp);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f013 ff27 	bl	80168f0 <free>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	24000c44 	.word	0x24000c44
 8002ab0:	24000c50 	.word	0x24000c50

08002ab4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <PMT_init+0x38>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f010 fbd3 	bl	8013272 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <PMT_init+0x3c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <PMT_init+0x30>
			sample_pmt();
 8002ad4:	f7ff fcd6 	bl	8002484 <sample_pmt>
			pmt_seq++;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <PMT_init+0x40>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <PMT_init+0x40>)
 8002ae2:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002ae4:	f010 fa92 	bl	801300c <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002ae8:	e7e8      	b.n	8002abc <PMT_init+0x8>
 8002aea:	bf00      	nop
 8002aec:	24000c60 	.word	0x24000c60
 8002af0:	24000c5a 	.word	0x24000c5a
 8002af4:	24000c54 	.word	0x24000c54

08002af8 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <ERPA_init+0x38>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	f010 fbb1 	bl	8013272 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <ERPA_init+0x3c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <ERPA_init+0x30>
			sample_erpa();
 8002b18:	f7ff fd30 	bl	800257c <sample_erpa>
			erpa_seq++;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <ERPA_init+0x40>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <ERPA_init+0x40>)
 8002b26:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b28:	f010 fa70 	bl	801300c <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b2c:	e7e8      	b.n	8002b00 <ERPA_init+0x8>
 8002b2e:	bf00      	nop
 8002b30:	24000c60 	.word	0x24000c60
 8002b34:	24000c5b 	.word	0x24000c5b
 8002b38:	24000c56 	.word	0x24000c56

08002b3c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HK_init+0x38>)
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2104      	movs	r1, #4
 8002b50:	f010 fb8f 	bl	8013272 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HK_init+0x3c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <HK_init+0x30>
			sample_hk();
 8002b5c:	f7ff fdca 	bl	80026f4 <sample_hk>
			hk_seq++;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HK_init+0x40>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HK_init+0x40>)
 8002b6a:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002b6c:	f010 fa4e 	bl	801300c <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b70:	e7e8      	b.n	8002b44 <HK_init+0x8>
 8002b72:	bf00      	nop
 8002b74:	24000c60 	.word	0x24000c60
 8002b78:	24000c5c 	.word	0x24000c5c
 8002b7c:	24000c58 	.word	0x24000c58

08002b80 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <GPIO_on_init+0x9c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f010 fa5d 	bl	801304c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <GPIO_on_init+0xa0>)
 8002b94:	2104      	movs	r1, #4
 8002b96:	2201      	movs	r2, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f006 fa65 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b9e:	2064      	movs	r0, #100	; 0x64
 8002ba0:	f010 fa75 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <GPIO_on_init+0xa0>)
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f006 fa5c 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bb0:	2064      	movs	r0, #100	; 0x64
 8002bb2:	f010 fa6c 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <GPIO_on_init+0xa4>)
 8002bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 fa52 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	f010 fa62 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <GPIO_on_init+0xa4>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f006 fa49 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bd6:	2064      	movs	r0, #100	; 0x64
 8002bd8:	f010 fa59 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <GPIO_on_init+0xa4>)
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	2201      	movs	r2, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 fa40 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002be8:	2064      	movs	r0, #100	; 0x64
 8002bea:	f010 fa50 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <GPIO_on_init+0xa4>)
 8002bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 fa36 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	f010 fa46 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <GPIO_on_init+0xa4>)
 8002c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fa2c 	bl	8009068 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <GPIO_on_init+0x9c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f010 fa19 	bl	801304c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c1a:	e7ba      	b.n	8002b92 <GPIO_on_init+0x12>
 8002c1c:	24000750 	.word	0x24000750
 8002c20:	58020400 	.word	0x58020400
 8002c24:	58020800 	.word	0x58020800

08002c28 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <GPIO_off_init+0x9c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f010 fa09 	bl	801304c <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <GPIO_off_init+0xa0>)
 8002c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c40:	2200      	movs	r2, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 fa10 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c48:	2064      	movs	r0, #100	; 0x64
 8002c4a:	f010 fa20 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <GPIO_off_init+0xa0>)
 8002c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 fa06 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f010 fa16 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <GPIO_off_init+0xa0>)
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	2200      	movs	r2, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 f9fd 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c6e:	2064      	movs	r0, #100	; 0x64
 8002c70:	f010 fa0d 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <GPIO_off_init+0xa0>)
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f006 f9f4 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c80:	2064      	movs	r0, #100	; 0x64
 8002c82:	f010 fa04 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <GPIO_off_init+0xa0>)
 8002c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 f9ea 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c94:	2064      	movs	r0, #100	; 0x64
 8002c96:	f010 f9fa 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <GPIO_off_init+0xa4>)
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 f9e1 	bl	8009068 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca6:	2064      	movs	r0, #100	; 0x64
 8002ca8:	f010 f9f1 	bl	801308e <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <GPIO_off_init+0xa4>)
 8002cae:	2104      	movs	r1, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f006 f9d8 	bl	8009068 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <GPIO_off_init+0x9c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f010 f9c5 	bl	801304c <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002cc2:	e7ba      	b.n	8002c3a <GPIO_off_init+0x12>
 8002cc4:	240009b0 	.word	0x240009b0
 8002cc8:	58020800 	.word	0x58020800
 8002ccc:	58020400 	.word	0x58020400

08002cd0 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <UART_TX_init+0xa4>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4923      	ldr	r1, [pc, #140]	; (8002d78 <UART_TX_init+0xa8>)
 8002cec:	f010 fbfa 	bl	80134e4 <osMessageQueueGet>
 8002cf0:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d120      	bne.n	8002d3a <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <UART_TX_init+0xa8>)
 8002cfa:	889b      	ldrh	r3, [r3, #4]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d06:	d218      	bcs.n	8002d3a <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <UART_TX_init+0xac>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <UART_TX_init+0xa8>)
 8002d10:	6811      	ldr	r1, [r2, #0]
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <UART_TX_init+0xa8>)
 8002d14:	8892      	ldrh	r2, [r2, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f013 fdf2 	bl	8016900 <memcpy>
					free(msg.array);
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <UART_TX_init+0xa8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f013 fde5 	bl	80168f0 <free>
					total_size += msg.size;
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <UART_TX_init+0xa8>)
 8002d28:	889b      	ldrh	r3, [r3, #4]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002d38:	d203      	bcs.n	8002d42 <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0cf      	beq.n	8002ce0 <UART_TX_init+0x10>
 8002d40:	e000      	b.n	8002d44 <UART_TX_init+0x74>
						break;
 8002d42:	bf00      	nop

		if (total_size > 0) {
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	490a      	ldr	r1, [pc, #40]	; (8002d7c <UART_TX_init+0xac>)
 8002d52:	480b      	ldr	r0, [pc, #44]	; (8002d80 <UART_TX_init+0xb0>)
 8002d54:	f00d fab8 	bl	80102c8 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002d58:	e001      	b.n	8002d5e <UART_TX_init+0x8e>
				osThreadYield();
 8002d5a:	f010 f957 	bl	801300c <osThreadYield>
			while (tx_flag == 0) {
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <UART_TX_init+0xb4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f9      	beq.n	8002d5a <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <UART_TX_init+0xb4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002d6c:	f010 f94e 	bl	801300c <osThreadYield>
		total_size = 0;
 8002d70:	e7b4      	b.n	8002cdc <UART_TX_init+0xc>
 8002d72:	bf00      	nop
 8002d74:	24000c44 	.word	0x24000c44
 8002d78:	24000c48 	.word	0x24000c48
 8002d7c:	24000cf4 	.word	0x24000cf4
 8002d80:	24000638 	.word	0x24000638
 8002d84:	24000000 	.word	0x24000000

08002d88 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <Voltage_Monitor_init+0xb4>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	f010 fa69 	bl	8013272 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002da0:	2012      	movs	r0, #18
 8002da2:	f013 fd9d 	bl	80168e0 <malloc>
 8002da6:	4603      	mov	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002daa:	2008      	movs	r0, #8
 8002dac:	f013 fd98 	bl	80168e0 <malloc>
 8002db0:	4603      	mov	r3, r0
 8002db2:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff f933 	bl	8002020 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002dba:	68b8      	ldr	r0, [r7, #8]
 8002dbc:	f7ff f97a 	bl	80020b4 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	885a      	ldrh	r2, [r3, #2]
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <Voltage_Monitor_init+0xb8>)
 8002dc6:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <Voltage_Monitor_init+0xbc>)
 8002dce:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <Voltage_Monitor_init+0xc0>)
 8002dd6:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	885a      	ldrh	r2, [r3, #2]
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <Voltage_Monitor_init+0xc4>)
 8002dde:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	889a      	ldrh	r2, [r3, #4]
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <Voltage_Monitor_init+0xc8>)
 8002de6:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	88da      	ldrh	r2, [r3, #6]
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <Voltage_Monitor_init+0xcc>)
 8002dee:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	899a      	ldrh	r2, [r3, #12]
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <Voltage_Monitor_init+0xd0>)
 8002df6:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88da      	ldrh	r2, [r3, #6]
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <Voltage_Monitor_init+0xd4>)
 8002dfe:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	889a      	ldrh	r2, [r3, #4]
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <Voltage_Monitor_init+0xd8>)
 8002e06:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	89da      	ldrh	r2, [r3, #14]
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <Voltage_Monitor_init+0xdc>)
 8002e0e:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8a1a      	ldrh	r2, [r3, #16]
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <Voltage_Monitor_init+0xe0>)
 8002e16:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	891a      	ldrh	r2, [r3, #8]
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <Voltage_Monitor_init+0xe4>)
 8002e1e:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	895a      	ldrh	r2, [r3, #10]
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <Voltage_Monitor_init+0xe8>)
 8002e26:	801a      	strh	r2, [r3, #0]
//			if (!inRange(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f013 fd61 	bl	80168f0 <free>
		free(hk_adc3);
 8002e2e:	68b8      	ldr	r0, [r7, #8]
 8002e30:	f013 fd5e 	bl	80168f0 <free>

		osThreadYield();
 8002e34:	f010 f8ea 	bl	801300c <osThreadYield>
	for (;;) {
 8002e38:	e7aa      	b.n	8002d90 <Voltage_Monitor_init+0x8>
 8002e3a:	bf00      	nop
 8002e3c:	24000c60 	.word	0x24000c60
 8002e40:	24000c26 	.word	0x24000c26
 8002e44:	24000c28 	.word	0x24000c28
 8002e48:	24000c2a 	.word	0x24000c2a
 8002e4c:	24000c2c 	.word	0x24000c2c
 8002e50:	24000c2e 	.word	0x24000c2e
 8002e54:	24000c30 	.word	0x24000c30
 8002e58:	24000c32 	.word	0x24000c32
 8002e5c:	24000c34 	.word	0x24000c34
 8002e60:	24000c36 	.word	0x24000c36
 8002e64:	24000c38 	.word	0x24000c38
 8002e68:	24000c3a 	.word	0x24000c3a
 8002e6c:	24000c3c 	.word	0x24000c3c
 8002e70:	24000c3e 	.word	0x24000c3e

08002e74 <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <FLAG_init+0x38>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f010 f9d5 	bl	8013230 <osEventFlagsGet>
 8002e86:	4603      	mov	r3, r0
 8002e88:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0316 	and.w	r3, r3, #22
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <FLAG_init+0x38>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2116      	movs	r1, #22
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f010 f996 	bl	80131cc <osEventFlagsClear>
			enterStop();
 8002ea0:	f7ff f992 	bl	80021c8 <enterStop>
		}
    osDelay(1);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f010 f8f2 	bl	801308e <osDelay>
  {
 8002eaa:	e7e7      	b.n	8002e7c <FLAG_init+0x8>
 8002eac:	24000c60 	.word	0x24000c60

08002eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ec2:	f000 ff85 	bl	8003dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40001000 	.word	0x40001000

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i
}
 8002eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002edc:	e7fe      	b.n	8002edc <Error_Handler+0x8>
	...

08002ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_MspInit+0x38>)
 8002ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <HAL_MspInit+0x38>)
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_MspInit+0x38>)
 8002ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	210f      	movs	r1, #15
 8002f08:	f06f 0001 	mvn.w	r0, #1
 8002f0c:	f002 fc6e 	bl	80057ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400

08002f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7b      	ldr	r2, [pc, #492]	; (8003128 <HAL_ADC_MspInit+0x20c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f040 8091 	bne.w	8003062 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f40:	4b7a      	ldr	r3, [pc, #488]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f46:	4a79      	ldr	r2, [pc, #484]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f48:	f043 0320 	orr.w	r3, r3, #32
 8002f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f50:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f64:	4a71      	ldr	r2, [pc, #452]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f82:	4a6a      	ldr	r2, [pc, #424]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8c:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa0:	4a62      	ldr	r2, [pc, #392]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002faa:	4b60      	ldr	r3, [pc, #384]	; (800312c <HAL_ADC_MspInit+0x210>)
 8002fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fb8:	2333      	movs	r3, #51	; 0x33
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4859      	ldr	r0, [pc, #356]	; (8003130 <HAL_ADC_MspInit+0x214>)
 8002fcc:	f005 fe84 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002fd0:	23ce      	movs	r3, #206	; 0xce
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4854      	ldr	r0, [pc, #336]	; (8003134 <HAL_ADC_MspInit+0x218>)
 8002fe4:	f005 fe78 	bl	8008cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fec:	2303      	movs	r3, #3
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	484f      	ldr	r0, [pc, #316]	; (8003138 <HAL_ADC_MspInit+0x21c>)
 8002ffc:	f005 fe6c 	bl	8008cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003000:	4b4e      	ldr	r3, [pc, #312]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003002:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_ADC_MspInit+0x224>)
 8003004:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003008:	2209      	movs	r2, #9
 800300a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800300c:	4b4b      	ldr	r3, [pc, #300]	; (800313c <HAL_ADC_MspInit+0x220>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003018:	4b48      	ldr	r3, [pc, #288]	; (800313c <HAL_ADC_MspInit+0x220>)
 800301a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003026:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <HAL_ADC_MspInit+0x220>)
 800302a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003030:	4b42      	ldr	r3, [pc, #264]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003036:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <HAL_ADC_MspInit+0x220>)
 800303a:	2200      	movs	r2, #0
 800303c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003044:	483d      	ldr	r0, [pc, #244]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003046:	f002 ffff 	bl	8006048 <HAL_DMA_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003050:	f7ff ff40 	bl	8002ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a39      	ldr	r2, [pc, #228]	; (800313c <HAL_ADC_MspInit+0x220>)
 8003058:	64da      	str	r2, [r3, #76]	; 0x4c
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_ADC_MspInit+0x220>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003060:	e05e      	b.n	8003120 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_ADC_MspInit+0x228>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d159      	bne.n	8003120 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_ADC_MspInit+0x210>)
 800306e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003072:	4a2e      	ldr	r2, [pc, #184]	; (800312c <HAL_ADC_MspInit+0x210>)
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_ADC_MspInit+0x210>)
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_ADC_MspInit+0x210>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_ADC_MspInit+0x210>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_ADC_MspInit+0x210>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80030a8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80030ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80030b0:	f000 feba 	bl	8003e28 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80030b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80030b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80030bc:	f000 feb4 	bl	8003e28 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030c2:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_ADC_MspInit+0x230>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030c8:	2273      	movs	r2, #115	; 0x73
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030de:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 8003100:	2200      	movs	r2, #0
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003104:	4810      	ldr	r0, [pc, #64]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 8003106:	f002 ff9f 	bl	8006048 <HAL_DMA_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003110:	f7ff fee0 	bl	8002ed4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 8003118:	64da      	str	r2, [r3, #76]	; 0x4c
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_ADC_MspInit+0x22c>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003120:	bf00      	nop
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40022000 	.word	0x40022000
 800312c:	58024400 	.word	0x58024400
 8003130:	58020800 	.word	0x58020800
 8003134:	58020000 	.word	0x58020000
 8003138:	58020400 	.word	0x58020400
 800313c:	24000204 	.word	0x24000204
 8003140:	40020010 	.word	0x40020010
 8003144:	58026000 	.word	0x58026000
 8003148:	2400027c 	.word	0x2400027c
 800314c:	40020028 	.word	0x40020028

08003150 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_DAC_MspInit+0xf0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d161      	bne.n	8003236 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 8003174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003178:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 800317a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800317e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 8003184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_DAC_MspInit+0xf4>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031ae:	2310      	movs	r3, #16
 80031b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b2:	2303      	movs	r3, #3
 80031b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	4821      	ldr	r0, [pc, #132]	; (8003248 <HAL_DAC_MspInit+0xf8>)
 80031c2:	f005 fd89 	bl	8008cd8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031c8:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_DAC_MspInit+0x100>)
 80031ca:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031ce:	2243      	movs	r2, #67	; 0x43
 80031d0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ec:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031f4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_DAC_MspInit+0xfc>)
 80031f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031fc:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_DAC_MspInit+0xfc>)
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_DAC_MspInit+0xfc>)
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800320a:	4810      	ldr	r0, [pc, #64]	; (800324c <HAL_DAC_MspInit+0xfc>)
 800320c:	f002 ff1c 	bl	8006048 <HAL_DMA_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003216:	f7ff fe5d 	bl	8002ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_DAC_MspInit+0xfc>)
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_DAC_MspInit+0xfc>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	2036      	movs	r0, #54	; 0x36
 800322c:	f002 fade 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003230:	2036      	movs	r0, #54	; 0x36
 8003232:	f002 faf5 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003236:	bf00      	nop
 8003238:	3728      	adds	r7, #40	; 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40007400 	.word	0x40007400
 8003244:	58024400 	.word	0x58024400
 8003248:	58020000 	.word	0x58020000
 800324c:	24000308 	.word	0x24000308
 8003250:	40020088 	.word	0x40020088

08003254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0ba      	sub	sp, #232	; 0xe8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	22c0      	movs	r2, #192	; 0xc0
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f013 fb51 	bl	801691c <memset>
  if(hi2c->Instance==I2C1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_I2C_MspInit+0xc8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d146      	bne.n	8003312 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003284:	f04f 0208 	mov.w	r2, #8
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f007 fda8 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80032a6:	f7ff fe15 	bl	8002ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d0:	2312      	movs	r3, #18
 80032d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032e2:	2304      	movs	r3, #4
 80032e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032ec:	4619      	mov	r1, r3
 80032ee:	480d      	ldr	r0, [pc, #52]	; (8003324 <HAL_I2C_MspInit+0xd0>)
 80032f0:	f005 fcf2 	bl	8008cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 80032f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 80032fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003300:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_I2C_MspInit+0xcc>)
 8003306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800330a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	37e8      	adds	r7, #232	; 0xe8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40005400 	.word	0x40005400
 8003320:	58024400 	.word	0x58024400
 8003324:	58020400 	.word	0x58020400

08003328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b0b2      	sub	sp, #200	; 0xc8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003330:	f107 0308 	add.w	r3, r7, #8
 8003334:	22c0      	movs	r2, #192	; 0xc0
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f013 faef 	bl	801691c <memset>
  if(hrtc->Instance==RTC)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_RTC_MspInit+0x5c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d118      	bne.n	800337a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003348:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RTC_MspInit+0x60>)
 8003356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	4618      	mov	r0, r3
 8003360:	f007 fd46 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800336a:	f7ff fdb3 	bl	8002ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_RTC_MspInit+0x64>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <HAL_RTC_MspInit+0x64>)
 8003374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800337a:	bf00      	nop
 800337c:	37c8      	adds	r7, #200	; 0xc8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	58004000 	.word	0x58004000
 8003388:	00019300 	.word	0x00019300
 800338c:	58024400 	.word	0x58024400

08003390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b0bc      	sub	sp, #240	; 0xf0
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033a8:	f107 0318 	add.w	r3, r7, #24
 80033ac:	22c0      	movs	r2, #192	; 0xc0
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f013 fab3 	bl	801691c <memset>
  if(hspi->Instance==SPI1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <HAL_SPI_MspInit+0x15c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d145      	bne.n	800344c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80033c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f007 fd0b 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80033e0:	f7ff fd78 	bl	8002ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033e4:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 80033e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ea:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 80033ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033f4:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 80033f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003408:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003420:	2318      	movs	r3, #24
 8003422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003438:	2305      	movs	r3, #5
 800343a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003442:	4619      	mov	r1, r3
 8003444:	482b      	ldr	r0, [pc, #172]	; (80034f4 <HAL_SPI_MspInit+0x164>)
 8003446:	f005 fc47 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800344a:	e04a      	b.n	80034e2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <HAL_SPI_MspInit+0x168>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d145      	bne.n	80034e2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003462:	2300      	movs	r3, #0
 8003464:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003466:	f107 0318 	add.w	r3, r7, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f007 fcc0 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003476:	f7ff fd2d 	bl	8002ed4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 800347c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 8003482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 800348c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_SPI_MspInit+0x160>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80034b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80034ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034d0:	2305      	movs	r3, #5
 80034d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_SPI_MspInit+0x164>)
 80034de:	f005 fbfb 	bl	8008cd8 <HAL_GPIO_Init>
}
 80034e2:	bf00      	nop
 80034e4:	37f0      	adds	r7, #240	; 0xf0
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013000 	.word	0x40013000
 80034f0:	58024400 	.word	0x58024400
 80034f4:	58020400 	.word	0x58020400
 80034f8:	40003800 	.word	0x40003800

080034fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a46      	ldr	r2, [pc, #280]	; (8003624 <HAL_TIM_Base_MspInit+0x128>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d12f      	bne.n	800356e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 8003510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003514:	4a44      	ldr	r2, [pc, #272]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 8003520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2105      	movs	r1, #5
 8003530:	2018      	movs	r0, #24
 8003532:	f002 f95b 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003536:	2018      	movs	r0, #24
 8003538:	f002 f972 	bl	8005820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2105      	movs	r1, #5
 8003540:	2019      	movs	r0, #25
 8003542:	f002 f953 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003546:	2019      	movs	r0, #25
 8003548:	f002 f96a 	bl	8005820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2105      	movs	r1, #5
 8003550:	201a      	movs	r0, #26
 8003552:	f002 f94b 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003556:	201a      	movs	r0, #26
 8003558:	f002 f962 	bl	8005820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800355c:	2200      	movs	r2, #0
 800355e:	2105      	movs	r1, #5
 8003560:	201b      	movs	r0, #27
 8003562:	f002 f943 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003566:	201b      	movs	r0, #27
 8003568:	f002 f95a 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800356c:	e055      	b.n	800361a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d117      	bne.n	80035a8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 800357a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357e:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 800358a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2105      	movs	r1, #5
 800359a:	201c      	movs	r0, #28
 800359c:	f002 f926 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035a0:	201c      	movs	r0, #28
 80035a2:	f002 f93d 	bl	8005820 <HAL_NVIC_EnableIRQ>
}
 80035a6:	e038      	b.n	800361a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_TIM_Base_MspInit+0x130>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d117      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2105      	movs	r1, #5
 80035d4:	201d      	movs	r0, #29
 80035d6:	f002 f909 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035da:	201d      	movs	r0, #29
 80035dc:	f002 f920 	bl	8005820 <HAL_NVIC_EnableIRQ>
}
 80035e0:	e01b      	b.n	800361a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_TIM_Base_MspInit+0x134>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d116      	bne.n	800361a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_TIM_Base_MspInit+0x12c>)
 80035fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2105      	movs	r1, #5
 800360e:	201e      	movs	r0, #30
 8003610:	f002 f8ec 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003614:	201e      	movs	r0, #30
 8003616:	f002 f903 	bl	8005820 <HAL_NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	58024400 	.word	0x58024400
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_TIM_MspPostInit+0xb8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d120      	bne.n	8003698 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 8003658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 8003668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003686:	2301      	movs	r3, #1
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	4818      	ldr	r0, [pc, #96]	; (80036f4 <HAL_TIM_MspPostInit+0xc0>)
 8003692:	f005 fb21 	bl	8008cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003696:	e024      	b.n	80036e2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d11f      	bne.n	80036e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 80036a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_TIM_MspPostInit+0xbc>)
 80036b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d2:	2301      	movs	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	4806      	ldr	r0, [pc, #24]	; (80036f8 <HAL_TIM_MspPostInit+0xc4>)
 80036de:	f005 fafb 	bl	8008cd8 <HAL_GPIO_Init>
}
 80036e2:	bf00      	nop
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	58024400 	.word	0x58024400
 80036f4:	58020000 	.word	0x58020000
 80036f8:	58020400 	.word	0x58020400

080036fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0ba      	sub	sp, #232	; 0xe8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f013 f8fd 	bl	801691c <memset>
  if(huart->Instance==USART1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a41      	ldr	r2, [pc, #260]	; (800382c <HAL_UART_MspInit+0x130>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d17b      	bne.n	8003824 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800372c:	f04f 0201 	mov.w	r2, #1
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003738:	2318      	movs	r3, #24
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800373e:	f107 0310 	add.w	r3, r7, #16
 8003742:	4618      	mov	r0, r3
 8003744:	f007 fb54 	bl	800adf0 <HAL_RCCEx_PeriphCLKConfig>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800374e:	f7ff fbc1 	bl	8002ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_UART_MspInit+0x134>)
 8003754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003758:	4a35      	ldr	r2, [pc, #212]	; (8003830 <HAL_UART_MspInit+0x134>)
 800375a:	f043 0310 	orr.w	r3, r3, #16
 800375e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003762:	4b33      	ldr	r3, [pc, #204]	; (8003830 <HAL_UART_MspInit+0x134>)
 8003764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <HAL_UART_MspInit+0x134>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <HAL_UART_MspInit+0x134>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_UART_MspInit+0x134>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800378e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037a8:	2307      	movs	r3, #7
 80037aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037b2:	4619      	mov	r1, r3
 80037b4:	481f      	ldr	r0, [pc, #124]	; (8003834 <HAL_UART_MspInit+0x138>)
 80037b6:	f005 fa8f 	bl	8008cd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_UART_MspInit+0x140>)
 80037be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037c2:	222a      	movs	r2, #42	; 0x2a
 80037c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037f8:	480f      	ldr	r0, [pc, #60]	; (8003838 <HAL_UART_MspInit+0x13c>)
 80037fa:	f002 fc25 	bl	8006048 <HAL_DMA_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003804:	f7ff fb66 	bl	8002ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <HAL_UART_MspInit+0x13c>)
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_UART_MspInit+0x13c>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2105      	movs	r1, #5
 8003818:	2025      	movs	r0, #37	; 0x25
 800381a:	f001 ffe7 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800381e:	2025      	movs	r0, #37	; 0x25
 8003820:	f001 fffe 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003824:	bf00      	nop
 8003826:	37e8      	adds	r7, #232	; 0xe8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40011000 	.word	0x40011000
 8003830:	58024400 	.word	0x58024400
 8003834:	58020000 	.word	0x58020000
 8003838:	240006cc 	.word	0x240006cc
 800383c:	40020040 	.word	0x40020040

08003840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b090      	sub	sp, #64	; 0x40
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	d827      	bhi.n	800389e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800384e:	2200      	movs	r2, #0
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	2036      	movs	r0, #54	; 0x36
 8003854:	f001 ffca 	bl	80057ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003858:	2036      	movs	r0, #54	; 0x36
 800385a:	f001 ffe1 	bl	8005820 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_InitTick+0xc4>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <HAL_InitTick+0xc8>)
 8003866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800386a:	4a27      	ldr	r2, [pc, #156]	; (8003908 <HAL_InitTick+0xc8>)
 800386c:	f043 0310 	orr.w	r3, r3, #16
 8003870:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_InitTick+0xc8>)
 8003876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003882:	f107 0210 	add.w	r2, r7, #16
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f007 fa6d 	bl	800ad6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_InitTick+0x6a>
 800389c:	e001      	b.n	80038a2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e02b      	b.n	80038fa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038a2:	f007 fa37 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 80038a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038a8:	e004      	b.n	80038b4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038aa:	f007 fa33 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 80038ae:	4603      	mov	r3, r0
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_InitTick+0xcc>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	0c9b      	lsrs	r3, r3, #18
 80038be:	3b01      	subs	r3, #1
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_InitTick+0xd0>)
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_InitTick+0xd4>)
 80038c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_InitTick+0xd0>)
 80038ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038d0:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <HAL_InitTick+0xd0>)
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_InitTick+0xd0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_InitTick+0xd0>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038e2:	480b      	ldr	r0, [pc, #44]	; (8003910 <HAL_InitTick+0xd0>)
 80038e4:	f00a fef5 	bl	800e6d2 <HAL_TIM_Base_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038ee:	4808      	ldr	r0, [pc, #32]	; (8003910 <HAL_InitTick+0xd0>)
 80038f0:	f00a ff46 	bl	800e780 <HAL_TIM_Base_Start_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	e000      	b.n	80038fa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3740      	adds	r7, #64	; 0x40
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	24000098 	.word	0x24000098
 8003908:	58024400 	.word	0x58024400
 800390c:	431bde83 	.word	0x431bde83
 8003910:	240010dc 	.word	0x240010dc
 8003914:	40001000 	.word	0x40001000

08003918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800391c:	e7fe      	b.n	800391c <NMI_Handler+0x4>

0800391e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003922:	e7fe      	b.n	8003922 <HardFault_Handler+0x4>

08003924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <MemManage_Handler+0x4>

0800392a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800392e:	e7fe      	b.n	800392e <BusFault_Handler+0x4>

08003930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <UsageFault_Handler+0x4>

08003936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <DMA1_Stream0_IRQHandler+0x10>)
 800394a:	f003 fea7 	bl	800769c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24000204 	.word	0x24000204

08003958 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA1_Stream1_IRQHandler+0x10>)
 800395e:	f003 fe9d 	bl	800769c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2400027c 	.word	0x2400027c

0800396c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <DMA1_Stream2_IRQHandler+0x10>)
 8003972:	f003 fe93 	bl	800769c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	240006cc 	.word	0x240006cc

08003980 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <DMA1_Stream5_IRQHandler+0x10>)
 8003986:	f003 fe89 	bl	800769c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	24000308 	.word	0x24000308

08003994 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <TIM1_BRK_IRQHandler+0x10>)
 800399a:	f00b fa08 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	24000508 	.word	0x24000508

080039a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <TIM1_UP_IRQHandler+0x10>)
 80039ae:	f00b f9fe 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	24000508 	.word	0x24000508

080039bc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <TIM1_TRG_COM_IRQHandler+0x10>)
 80039c2:	f00b f9f4 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	24000508 	.word	0x24000508

080039d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <TIM1_CC_IRQHandler+0x10>)
 80039d6:	f00b f9ea 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	24000508 	.word	0x24000508

080039e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <TIM2_IRQHandler+0x10>)
 80039ea:	f00b f9e0 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	24000554 	.word	0x24000554

080039f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <TIM3_IRQHandler+0x10>)
 80039fe:	f00b f9d6 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	240005a0 	.word	0x240005a0

08003a0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <TIM4_IRQHandler+0x10>)
 8003a12:	f00b f9cc 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	240005ec 	.word	0x240005ec

08003a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <USART1_IRQHandler+0x10>)
 8003a26:	f00c fd85 	bl	8010534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	24000638 	.word	0x24000638

08003a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <TIM6_DAC_IRQHandler+0x20>)
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003a42:	4804      	ldr	r0, [pc, #16]	; (8003a54 <TIM6_DAC_IRQHandler+0x20>)
 8003a44:	f002 f881 	bl	8005b4a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003a48:	4803      	ldr	r0, [pc, #12]	; (8003a58 <TIM6_DAC_IRQHandler+0x24>)
 8003a4a:	f00b f9b0 	bl	800edae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	240002f4 	.word	0x240002f4
 8003a58:	240010dc 	.word	0x240010dc

08003a5c <ITM_SendChar>:
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <ITM_SendChar+0x48>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <ITM_SendChar+0x48>)
 8003a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <ITM_SendChar+0x4c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <ITM_SendChar+0x4c>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	bf00      	nop
 8003a80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f8      	beq.n	8003a80 <ITM_SendChar+0x24>
 8003a8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000edfc 	.word	0xe000edfc
 8003aa8:	e0000e00 	.word	0xe0000e00

08003aac <_read>:
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e00a      	b.n	8003ad4 <_read+0x28>
 8003abe:	f3af 8000 	nop.w
 8003ac2:	4601      	mov	r1, r0
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	60ba      	str	r2, [r7, #8]
 8003aca:	b2ca      	uxtb	r2, r1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	dbf0      	blt.n	8003abe <_read+0x12>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_write>:
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e009      	b.n	8003b0c <_write+0x26>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	60ba      	str	r2, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ffab 	bl	8003a5c <ITM_SendChar>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	dbf1      	blt.n	8003af8 <_write+0x12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_close>:
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <_fstat>:
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <_isatty>:
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <_lseek>:
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <_sbrk>:
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <_sbrk+0x5c>)
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <_sbrk+0x60>)
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <_sbrk+0x22>
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <_sbrk+0x64>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <_sbrk+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d207      	bcs.n	8003bc8 <_sbrk+0x40>
 8003bb8:	f012 fe68 	bl	801688c <__errno>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc6:	e009      	b.n	8003bdc <_sbrk+0x54>
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <_sbrk+0x64>)
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	24080000 	.word	0x24080000
 8003be8:	00000400 	.word	0x00000400
 8003bec:	24001128 	.word	0x24001128
 8003bf0:	24005a90 	.word	0x24005a90

08003bf4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003bf8:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <SystemInit+0xe4>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <SystemInit+0xe4>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <SystemInit+0xe8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d807      	bhi.n	8003c24 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <SystemInit+0xe8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 030f 	bic.w	r3, r3, #15
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <SystemInit+0xe8>)
 8003c1e:	f043 0307 	orr.w	r3, r3, #7
 8003c22:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003c24:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <SystemInit+0xec>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <SystemInit+0xec>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003c30:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <SystemInit+0xec>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003c36:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <SystemInit+0xec>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4929      	ldr	r1, [pc, #164]	; (8003ce0 <SystemInit+0xec>)
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <SystemInit+0xf0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c42:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <SystemInit+0xe8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <SystemInit+0xe8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 030f 	bic.w	r3, r3, #15
 8003c56:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <SystemInit+0xe8>)
 8003c58:	f043 0307 	orr.w	r3, r3, #7
 8003c5c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <SystemInit+0xec>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <SystemInit+0xec>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <SystemInit+0xec>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <SystemInit+0xec>)
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <SystemInit+0xf4>)
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <SystemInit+0xec>)
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <SystemInit+0xf8>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <SystemInit+0xec>)
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <SystemInit+0xfc>)
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <SystemInit+0xec>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <SystemInit+0xec>)
 8003c8a:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <SystemInit+0xfc>)
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <SystemInit+0xec>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <SystemInit+0xec>)
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <SystemInit+0xfc>)
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <SystemInit+0xec>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <SystemInit+0xec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <SystemInit+0xec>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <SystemInit+0xec>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <SystemInit+0x100>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <SystemInit+0x104>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d202      	bcs.n	8003cc6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <SystemInit+0x108>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <SystemInit+0x10c>)
 8003cc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ccc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	52002000 	.word	0x52002000
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ce8:	02020200 	.word	0x02020200
 8003cec:	01ff0000 	.word	0x01ff0000
 8003cf0:	01010280 	.word	0x01010280
 8003cf4:	5c001000 	.word	0x5c001000
 8003cf8:	ffff0000 	.word	0xffff0000
 8003cfc:	51008108 	.word	0x51008108
 8003d00:	52004000 	.word	0x52004000

08003d04 <Reset_Handler>:
 8003d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d3c <LoopFillZerobss+0xe>
 8003d08:	f7ff ff74 	bl	8003bf4 <SystemInit>
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <LoopFillZerobss+0x12>)
 8003d0e:	490d      	ldr	r1, [pc, #52]	; (8003d44 <LoopFillZerobss+0x16>)
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <LoopFillZerobss+0x1a>)
 8003d12:	2300      	movs	r3, #0
 8003d14:	e002      	b.n	8003d1c <LoopCopyDataInit>

08003d16 <CopyDataInit>:
 8003d16:	58d4      	ldr	r4, [r2, r3]
 8003d18:	50c4      	str	r4, [r0, r3]
 8003d1a:	3304      	adds	r3, #4

08003d1c <LoopCopyDataInit>:
 8003d1c:	18c4      	adds	r4, r0, r3
 8003d1e:	428c      	cmp	r4, r1
 8003d20:	d3f9      	bcc.n	8003d16 <CopyDataInit>
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <LoopFillZerobss+0x1e>)
 8003d24:	4c0a      	ldr	r4, [pc, #40]	; (8003d50 <LoopFillZerobss+0x22>)
 8003d26:	2300      	movs	r3, #0
 8003d28:	e001      	b.n	8003d2e <LoopFillZerobss>

08003d2a <FillZerobss>:
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	3204      	adds	r2, #4

08003d2e <LoopFillZerobss>:
 8003d2e:	42a2      	cmp	r2, r4
 8003d30:	d3fb      	bcc.n	8003d2a <FillZerobss>
 8003d32:	f012 fdb1 	bl	8016898 <__libc_init_array>
 8003d36:	f7fd f92b 	bl	8000f90 <main>
 8003d3a:	4770      	bx	lr
 8003d3c:	24080000 	.word	0x24080000
 8003d40:	24000000 	.word	0x24000000
 8003d44:	24000108 	.word	0x24000108
 8003d48:	08017794 	.word	0x08017794
 8003d4c:	24000120 	.word	0x24000120
 8003d50:	24005a90 	.word	0x24005a90

08003d54 <ADC3_IRQHandler>:
 8003d54:	e7fe      	b.n	8003d54 <ADC3_IRQHandler>
	...

08003d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5e:	2003      	movs	r0, #3
 8003d60:	f001 fd39 	bl	80057d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d64:	f006 fe2c 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_Init+0x68>)
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	4913      	ldr	r1, [pc, #76]	; (8003dc4 <HAL_Init+0x6c>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_Init+0x68>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_Init+0x6c>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
 8003d98:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <HAL_Init+0x70>)
 8003d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_Init+0x74>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003da2:	2005      	movs	r0, #5
 8003da4:	f7ff fd4c 	bl	8003840 <HAL_InitTick>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e002      	b.n	8003db8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003db2:	f7ff f895 	bl	8002ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	080176e0 	.word	0x080176e0
 8003dc8:	24000094 	.word	0x24000094
 8003dcc:	24000090 	.word	0x24000090

08003dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_IncTick+0x20>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_IncTick+0x24>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_IncTick+0x24>)
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	2400009c 	.word	0x2400009c
 8003df4:	2400112c 	.word	0x2400112c

08003df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_GetTick+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2400112c 	.word	0x2400112c

08003e10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_GetREVID+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0c1b      	lsrs	r3, r3, #16
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	5c001000 	.word	0x5c001000

08003e28 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	4904      	ldr	r1, [pc, #16]	; (8003e50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	58000400 	.word	0x58000400

08003e54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3360      	adds	r3, #96	; 0x60
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b087      	sub	sp, #28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3360      	adds	r3, #96	; 0x60
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	601a      	str	r2, [r3, #0]
  }
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3330      	adds	r3, #48	; 0x30
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	4413      	add	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	211f      	movs	r1, #31
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 011f 	and.w	r1, r3, #31
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3314      	adds	r3, #20
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	0e5b      	lsrs	r3, r3, #25
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	0d1b      	lsrs	r3, r3, #20
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2107      	movs	r1, #7
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	401a      	ands	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	0d1b      	lsrs	r3, r3, #20
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	431a      	orrs	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0318 	and.w	r3, r3, #24
 8004082:	4908      	ldr	r1, [pc, #32]	; (80040a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004084:	40d9      	lsrs	r1, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	400b      	ands	r3, r1
 800408a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800408e:	431a      	orrs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	000fffff 	.word	0x000fffff

080040a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 031f 	and.w	r3, r3, #31
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6093      	str	r3, [r2, #8]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	5fffffc0 	.word	0x5fffffc0

080040e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d101      	bne.n	8004102 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <LL_ADC_EnableInternalRegulator+0x24>)
 800411e:	4013      	ands	r3, r2
 8004120:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	6fffffc0 	.word	0x6fffffc0

08004138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414c:	d101      	bne.n	8004152 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <LL_ADC_Enable+0x24>)
 800416e:	4013      	ands	r3, r2
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	7fffffc0 	.word	0x7fffffc0

08004188 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <LL_ADC_Disable+0x24>)
 8004196:	4013      	ands	r3, r2
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	7fffffc0 	.word	0x7fffffc0

080041b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <LL_ADC_IsEnabled+0x18>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_ADC_IsEnabled+0x1a>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d101      	bne.n	80041ee <LL_ADC_IsDisableOngoing+0x18>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_ADC_IsDisableOngoing+0x1a>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <LL_ADC_REG_StartConversion+0x24>)
 800420a:	4013      	ands	r3, r2
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	7fffffc0 	.word	0x7fffffc0

08004224 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d101      	bne.n	800423c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d101      	bne.n	8004262 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e18f      	b.n	80045aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fe fe3f 	bl	8002f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff19 	bl	80040e8 <LL_ADC_IsDeepPowerDownEnabled>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff feff 	bl	80040c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff34 	bl	8004138 <LL_ADC_IsInternalRegulatorEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff18 	bl	8004110 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042e0:	4b87      	ldr	r3, [pc, #540]	; (8004500 <HAL_ADC_Init+0x290>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	4a87      	ldr	r2, [pc, #540]	; (8004504 <HAL_ADC_Init+0x294>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	3301      	adds	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042f2:	e002      	b.n	80042fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f9      	bne.n	80042f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff17 	bl	8004138 <LL_ADC_IsInternalRegulatorEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10d      	bne.n	800432c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f043 0210 	orr.w	r2, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff77 	bl	8004224 <LL_ADC_REG_IsConversionOngoing>
 8004336:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8129 	bne.w	8004598 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8125 	bne.w	8004598 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff24 	bl	80041b0 <LL_ADC_IsEnabled>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d136      	bne.n	80043dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_ADC_Init+0x298>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_ADC_Init+0x112>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a63      	ldr	r2, [pc, #396]	; (800450c <HAL_ADC_Init+0x29c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10e      	bne.n	80043a0 <HAL_ADC_Init+0x130>
 8004382:	4861      	ldr	r0, [pc, #388]	; (8004508 <HAL_ADC_Init+0x298>)
 8004384:	f7ff ff14 	bl	80041b0 <LL_ADC_IsEnabled>
 8004388:	4604      	mov	r4, r0
 800438a:	4860      	ldr	r0, [pc, #384]	; (800450c <HAL_ADC_Init+0x29c>)
 800438c:	f7ff ff10 	bl	80041b0 <LL_ADC_IsEnabled>
 8004390:	4603      	mov	r3, r0
 8004392:	4323      	orrs	r3, r4
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_ADC_Init+0x142>
 80043a0:	485b      	ldr	r0, [pc, #364]	; (8004510 <HAL_ADC_Init+0x2a0>)
 80043a2:	f7ff ff05 	bl	80041b0 <LL_ADC_IsEnabled>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d012      	beq.n	80043dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_ADC_Init+0x298>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_ADC_Init+0x15a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a51      	ldr	r2, [pc, #324]	; (800450c <HAL_ADC_Init+0x29c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_Init+0x15e>
 80043ca:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_ADC_Init+0x2a4>)
 80043cc:	e000      	b.n	80043d0 <HAL_ADC_Init+0x160>
 80043ce:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_ADC_Init+0x2a8>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7ff fd3c 	bl	8003e54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80043dc:	f7ff fd18 	bl	8003e10 <HAL_GetREVID>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d914      	bls.n	8004414 <HAL_ADC_Init+0x1a4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d110      	bne.n	8004414 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7d5b      	ldrb	r3, [r3, #21]
 80043f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004402:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7f1b      	ldrb	r3, [r3, #28]
 8004408:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800440a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800440c:	f043 030c 	orr.w	r3, r3, #12
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e00d      	b.n	8004430 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7d5b      	ldrb	r3, [r3, #21]
 8004418:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800441e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004424:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7f1b      	ldrb	r3, [r3, #28]
 800442a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7f1b      	ldrb	r3, [r3, #28]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	3b01      	subs	r3, #1
 800443e:	045b      	lsls	r3, r3, #17
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_ADC_Init+0x2ac>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	69b9      	ldr	r1, [r7, #24]
 8004472:	430b      	orrs	r3, r1
 8004474:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fed2 	bl	8004224 <LL_ADC_REG_IsConversionOngoing>
 8004480:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fedf 	bl	800424a <LL_ADC_INJ_IsConversionOngoing>
 800448c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d15f      	bne.n	8004554 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d15c      	bne.n	8004554 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7d1b      	ldrb	r3, [r3, #20]
 800449e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <HAL_ADC_Init+0x2b0>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d130      	bne.n	8004528 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_ADC_Init+0x2b4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044da:	3a01      	subs	r2, #1
 80044dc:	0411      	lsls	r1, r2, #16
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044e8:	4311      	orrs	r1, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ee:	430a      	orrs	r2, r1
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	611a      	str	r2, [r3, #16]
 80044fc:	e01c      	b.n	8004538 <HAL_ADC_Init+0x2c8>
 80044fe:	bf00      	nop
 8004500:	24000090 	.word	0x24000090
 8004504:	053e2d63 	.word	0x053e2d63
 8004508:	40022000 	.word	0x40022000
 800450c:	40022100 	.word	0x40022100
 8004510:	58026000 	.word	0x58026000
 8004514:	40022300 	.word	0x40022300
 8004518:	58026300 	.word	0x58026300
 800451c:	fff0c003 	.word	0xfff0c003
 8004520:	ffffbffc 	.word	0xffffbffc
 8004524:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fdec 	bl	800512c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10c      	bne.n	8004576 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f023 010f 	bic.w	r1, r3, #15
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
 8004574:	e007      	b.n	8004586 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020f 	bic.w	r2, r2, #15
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
 8004596:	e007      	b.n	80045a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd90      	pop	{r4, r7, pc}
 80045b2:	bf00      	nop

080045b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a55      	ldr	r2, [pc, #340]	; (800471c <HAL_ADC_Start_DMA+0x168>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_ADC_Start_DMA+0x20>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a54      	ldr	r2, [pc, #336]	; (8004720 <HAL_ADC_Start_DMA+0x16c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_Start_DMA+0x24>
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_ADC_Start_DMA+0x170>)
 80045d6:	e000      	b.n	80045da <HAL_ADC_Start_DMA+0x26>
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_ADC_Start_DMA+0x174>)
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fd64 	bl	80040a8 <LL_ADC_GetMultimode>
 80045e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fe1c 	bl	8004224 <LL_ADC_REG_IsConversionOngoing>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 808c 	bne.w	800470c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_Start_DMA+0x4e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e087      	b.n	8004712 <HAL_ADC_Start_DMA+0x15e>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d002      	beq.n	800461c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b09      	cmp	r3, #9
 800461a:	d170      	bne.n	80046fe <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fc07 	bl	8004e30 <ADC_Enable>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d163      	bne.n	80046f4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_ADC_Start_DMA+0x178>)
 8004632:	4013      	ands	r3, r2
 8004634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a37      	ldr	r2, [pc, #220]	; (8004720 <HAL_ADC_Start_DMA+0x16c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d002      	beq.n	800464c <HAL_ADC_Start_DMA+0x98>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e000      	b.n	800464e <HAL_ADC_Start_DMA+0x9a>
 800464c:	4b33      	ldr	r3, [pc, #204]	; (800471c <HAL_ADC_Start_DMA+0x168>)
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	4293      	cmp	r3, r2
 8004654:	d002      	beq.n	800465c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f023 0206 	bic.w	r2, r3, #6
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	659a      	str	r2, [r3, #88]	; 0x58
 8004680:	e002      	b.n	8004688 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468c:	4a28      	ldr	r2, [pc, #160]	; (8004730 <HAL_ADC_Start_DMA+0x17c>)
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <HAL_ADC_Start_DMA+0x180>)
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_ADC_Start_DMA+0x184>)
 800469e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	221c      	movs	r2, #28
 80046a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0210 	orr.w	r2, r2, #16
 80046be:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f7ff fc89 	bl	8003fe2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3340      	adds	r3, #64	; 0x40
 80046da:	4619      	mov	r1, r3
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f002 f80e 	bl	8006700 <HAL_DMA_Start_IT>
 80046e4:	4603      	mov	r3, r0
 80046e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fd85 	bl	80041fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80046f2:	e00d      	b.n	8004710 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80046fc:	e008      	b.n	8004710 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800470a:	e001      	b.n	8004710 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40022100 	.word	0x40022100
 8004724:	40022300 	.word	0x40022300
 8004728:	58026300 	.word	0x58026300
 800472c:	fffff0fe 	.word	0xfffff0fe
 8004730:	08005003 	.word	0x08005003
 8004734:	080050db 	.word	0x080050db
 8004738:	080050f7 	.word	0x080050f7

0800473c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b0a1      	sub	sp, #132	; 0x84
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_ADC_ConfigChannel+0x1b0>)
 8004792:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x2a>
 800479e:	2302      	movs	r3, #2
 80047a0:	e32e      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x688>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd38 	bl	8004224 <LL_ADC_REG_IsConversionOngoing>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8313 	bne.w	8004de2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db2c      	blt.n	800481e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x6a>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0e9b      	lsrs	r3, r3, #26
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2201      	movs	r2, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	e016      	b.n	8004810 <HAL_ADC_ConfigChannel+0x98>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e003      	b.n	8004806 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80047fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2201      	movs	r2, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	69d1      	ldr	r1, [r2, #28]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	430b      	orrs	r3, r1
 800481c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7ff fbad 	bl	8003f8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fcf5 	bl	8004224 <LL_ADC_REG_IsConversionOngoing>
 800483a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fd02 	bl	800424a <LL_ADC_INJ_IsConversionOngoing>
 8004846:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 80b8 	bne.w	80049c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 80b4 	bne.w	80049c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	461a      	mov	r2, r3
 8004866:	f7ff fbcf 	bl	8004008 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <HAL_ADC_ConfigChannel+0x1b4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004876:	d10b      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x118>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	e01d      	b.n	80048cc <HAL_ADC_ConfigChannel+0x154>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x13e>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	e00a      	b.n	80048cc <HAL_ADC_ConfigChannel+0x154>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d02c      	beq.n	8004930 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e4:	f7ff faea 	bl	8003ebc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6919      	ldr	r1, [r3, #16]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	7e5b      	ldrb	r3, [r3, #25]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x186>
 80048f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048fc:	e000      	b.n	8004900 <HAL_ADC_ConfigChannel+0x188>
 80048fe:	2300      	movs	r3, #0
 8004900:	461a      	mov	r2, r3
 8004902:	f7ff fb14 	bl	8003f2e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	7e1b      	ldrb	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d102      	bne.n	800491c <HAL_ADC_ConfigChannel+0x1a4>
 8004916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800491a:	e000      	b.n	800491e <HAL_ADC_ConfigChannel+0x1a6>
 800491c:	2300      	movs	r3, #0
 800491e:	461a      	mov	r2, r3
 8004920:	f7ff faec 	bl	8003efc <LL_ADC_SetDataRightShift>
 8004924:	e04c      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x248>
 8004926:	bf00      	nop
 8004928:	47ff0000 	.word	0x47ff0000
 800492c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	069b      	lsls	r3, r3, #26
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004976:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800497e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800499a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	069b      	lsls	r3, r3, #26
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fbf3 	bl	80041b0 <LL_ADC_IsEnabled>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 8211 	bne.w	8004df4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f7ff fb3e 	bl	8004060 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4aa1      	ldr	r2, [pc, #644]	; (8004c70 <HAL_ADC_ConfigChannel+0x4f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f040 812e 	bne.w	8004c4c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x2a0>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	3301      	adds	r3, #1
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	bf94      	ite	ls
 8004a10:	2301      	movls	r3, #1
 8004a12:	2300      	movhi	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e019      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x2d4>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a30:	2320      	movs	r3, #32
 8004a32:	e003      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2b09      	cmp	r3, #9
 8004a44:	bf94      	ite	ls
 8004a46:	2301      	movls	r3, #1
 8004a48:	2300      	movhi	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d079      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x2f4>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	3301      	adds	r3, #1
 8004a64:	069b      	lsls	r3, r3, #26
 8004a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6a:	e015      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x320>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004a84:	2320      	movs	r3, #32
 8004a86:	e003      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	069b      	lsls	r3, r3, #26
 8004a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x340>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	e017      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x370>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	ea42 0103 	orr.w	r1, r2, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x396>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0e9b      	lsrs	r3, r3, #26
 8004afe:	3301      	adds	r3, #1
 8004b00:	f003 021f 	and.w	r2, r3, #31
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	051b      	lsls	r3, r3, #20
 8004b0c:	e018      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x3c8>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b26:	2320      	movs	r3, #32
 8004b28:	e003      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b40:	430b      	orrs	r3, r1
 8004b42:	e07e      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x3e8>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0e9b      	lsrs	r3, r3, #26
 8004b56:	3301      	adds	r3, #1
 8004b58:	069b      	lsls	r3, r3, #26
 8004b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b5e:	e015      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x414>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	e003      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	069b      	lsls	r3, r3, #26
 8004b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x434>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0e9b      	lsrs	r3, r3, #26
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	e017      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x464>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	61bb      	str	r3, [r7, #24]
  return result;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	e003      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	ea42 0103 	orr.w	r1, r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x490>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	0e9b      	lsrs	r3, r3, #26
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b1e      	subs	r3, #30
 8004c00:	051b      	lsls	r3, r3, #20
 8004c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c06:	e01b      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x4c8>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	60fb      	str	r3, [r7, #12]
  return result;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c20:	2320      	movs	r3, #32
 8004c22:	e003      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fab3 f383 	clz	r3, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 021f 	and.w	r2, r3, #31
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	3b1e      	subs	r3, #30
 8004c3a:	051b      	lsls	r3, r3, #20
 8004c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c40:	430b      	orrs	r3, r1
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	4619      	mov	r1, r3
 8004c48:	f7ff f9de 	bl	8004008 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f280 80cf 	bge.w	8004df4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_ADC_ConfigChannel+0x4fc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_ADC_ConfigChannel+0x4f2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_ADC_ConfigChannel+0x500>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10a      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x508>
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_ADC_ConfigChannel+0x504>)
 8004c6c:	e009      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x50a>
 8004c6e:	bf00      	nop
 8004c70:	47ff0000 	.word	0x47ff0000
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40022100 	.word	0x40022100
 8004c7c:	40022300 	.word	0x40022300
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <HAL_ADC_ConfigChannel+0x690>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f90c 	bl	8003ea0 <LL_ADC_GetCommonPathInternalCh>
 8004c88:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a5f      	ldr	r2, [pc, #380]	; (8004e0c <HAL_ADC_ConfigChannel+0x694>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_ADC_ConfigChannel+0x526>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5d      	ldr	r2, [pc, #372]	; (8004e10 <HAL_ADC_ConfigChannel+0x698>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10e      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x544>
 8004c9e:	485b      	ldr	r0, [pc, #364]	; (8004e0c <HAL_ADC_ConfigChannel+0x694>)
 8004ca0:	f7ff fa86 	bl	80041b0 <LL_ADC_IsEnabled>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	485a      	ldr	r0, [pc, #360]	; (8004e10 <HAL_ADC_ConfigChannel+0x698>)
 8004ca8:	f7ff fa82 	bl	80041b0 <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e008      	b.n	8004cce <HAL_ADC_ConfigChannel+0x556>
 8004cbc:	4855      	ldr	r0, [pc, #340]	; (8004e14 <HAL_ADC_ConfigChannel+0x69c>)
 8004cbe:	f7ff fa77 	bl	80041b0 <LL_ADC_IsEnabled>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d07d      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a50      	ldr	r2, [pc, #320]	; (8004e18 <HAL_ADC_ConfigChannel+0x6a0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d130      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x5c6>
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d12b      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <HAL_ADC_ConfigChannel+0x69c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	f040 8081 	bne.w	8004df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a45      	ldr	r2, [pc, #276]	; (8004e0c <HAL_ADC_ConfigChannel+0x694>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_ADC_ConfigChannel+0x58e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a43      	ldr	r2, [pc, #268]	; (8004e10 <HAL_ADC_ConfigChannel+0x698>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x592>
 8004d06:	4a45      	ldr	r2, [pc, #276]	; (8004e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8004d08:	e000      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x594>
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <HAL_ADC_ConfigChannel+0x690>)
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f7ff f8b0 	bl	8003e7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_ADC_ConfigChannel+0x6a8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <HAL_ADC_ConfigChannel+0x6ac>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	3301      	adds	r3, #1
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d2e:	e002      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f9      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d3c:	e05a      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a39      	ldr	r2, [pc, #228]	; (8004e28 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d11e      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x60e>
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <HAL_ADC_ConfigChannel+0x69c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d14b      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <HAL_ADC_ConfigChannel+0x694>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_ADC_ConfigChannel+0x5f8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <HAL_ADC_ConfigChannel+0x698>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x5fc>
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8004d72:	e000      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x5fe>
 8004d74:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <HAL_ADC_ConfigChannel+0x690>)
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7ff f87b 	bl	8003e7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d84:	e036      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a28      	ldr	r2, [pc, #160]	; (8004e2c <HAL_ADC_ConfigChannel+0x6b4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d131      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d12c      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_ADC_ConfigChannel+0x69c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d127      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_ADC_ConfigChannel+0x694>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x640>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <HAL_ADC_ConfigChannel+0x698>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x644>
 8004db8:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8004dba:	e000      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x646>
 8004dbc:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <HAL_ADC_ConfigChannel+0x690>)
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7ff f857 	bl	8003e7a <LL_ADC_SetCommonPathInternalCh>
 8004dcc:	e012      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004de0:	e008      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004dfc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3784      	adds	r7, #132	; 0x84
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}
 8004e08:	58026300 	.word	0x58026300
 8004e0c:	40022000 	.word	0x40022000
 8004e10:	40022100 	.word	0x40022100
 8004e14:	58026000 	.word	0x58026000
 8004e18:	cb840000 	.word	0xcb840000
 8004e1c:	40022300 	.word	0x40022300
 8004e20:	24000090 	.word	0x24000090
 8004e24:	053e2d63 	.word	0x053e2d63
 8004e28:	c7520000 	.word	0xc7520000
 8004e2c:	cfb80000 	.word	0xcfb80000

08004e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f9b7 	bl	80041b0 <LL_ADC_IsEnabled>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d16e      	bne.n	8004f26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <ADC_Enable+0x100>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e05a      	b.n	8004f28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f972 	bl	8004160 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e7c:	f7fe ffbc 	bl	8003df8 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <ADC_Enable+0x104>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <ADC_Enable+0x66>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <ADC_Enable+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d101      	bne.n	8004e9a <ADC_Enable+0x6a>
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <ADC_Enable+0x10c>)
 8004e98:	e000      	b.n	8004e9c <ADC_Enable+0x6c>
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <ADC_Enable+0x110>)
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff f903 	bl	80040a8 <LL_ADC_GetMultimode>
 8004ea2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <ADC_Enable+0x108>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d002      	beq.n	8004eb4 <ADC_Enable+0x84>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	e000      	b.n	8004eb6 <ADC_Enable+0x86>
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <ADC_Enable+0x104>)
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02c      	beq.n	8004f18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d130      	bne.n	8004f26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ec4:	e028      	b.n	8004f18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f970 	bl	80041b0 <LL_ADC_IsEnabled>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f940 	bl	8004160 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ee0:	f7fe ff8a 	bl	8003df8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d914      	bls.n	8004f18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d00d      	beq.n	8004f18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f043 0201 	orr.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e007      	b.n	8004f28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d1cf      	bne.n	8004ec6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	8000003f 	.word	0x8000003f
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40022100 	.word	0x40022100
 8004f3c:	40022300 	.word	0x40022300
 8004f40:	58026300 	.word	0x58026300

08004f44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff f940 	bl	80041d6 <LL_ADC_IsDisableOngoing>
 8004f56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff f927 	bl	80041b0 <LL_ADC_IsEnabled>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d047      	beq.n	8004ff8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d144      	bne.n	8004ff8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 030d 	and.w	r3, r3, #13
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10c      	bne.n	8004f96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f901 	bl	8004188 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f8e:	f7fe ff33 	bl	8003df8 <HAL_GetTick>
 8004f92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f94:	e029      	b.n	8004fea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f043 0210 	orr.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e023      	b.n	8004ffa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fb2:	f7fe ff21 	bl	8003df8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d914      	bls.n	8004fea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f043 0210 	orr.w	r2, r3, #16
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e007      	b.n	8004ffa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1dc      	bne.n	8004fb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005018:	2b00      	cmp	r3, #0
 800501a:	d14b      	bne.n	80050b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d021      	beq.n	800507a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe ff92 	bl	8003f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d032      	beq.n	80050ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d12b      	bne.n	80050ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d11f      	bne.n	80050ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005070:	f043 0201 	orr.w	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
 8005078:	e018      	b.n	80050ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d111      	bne.n	80050ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff fb45 	bl	800473c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050b2:	e00e      	b.n	80050d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fb4f 	bl	8004764 <HAL_ADC_ErrorCallback>
}
 80050c6:	e004      	b.n	80050d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fb31 	bl	8004750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff fb21 	bl	8004764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a7a      	ldr	r2, [pc, #488]	; (8005324 <ADC_ConfigureBoostMode+0x1f8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <ADC_ConfigureBoostMode+0x1c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a79      	ldr	r2, [pc, #484]	; (8005328 <ADC_ConfigureBoostMode+0x1fc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <ADC_ConfigureBoostMode+0x30>
 8005148:	4b78      	ldr	r3, [pc, #480]	; (800532c <ADC_ConfigureBoostMode+0x200>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <ADC_ConfigureBoostMode+0x42>
 800515c:	4b74      	ldr	r3, [pc, #464]	; (8005330 <ADC_ConfigureBoostMode+0x204>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01c      	beq.n	80051ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005172:	f005 fd9f 	bl	800acb4 <HAL_RCC_GetHCLKFreq>
 8005176:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005180:	d010      	beq.n	80051a4 <ADC_ConfigureBoostMode+0x78>
 8005182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005186:	d873      	bhi.n	8005270 <ADC_ConfigureBoostMode+0x144>
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d002      	beq.n	8005194 <ADC_ConfigureBoostMode+0x68>
 800518e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005192:	d16d      	bne.n	8005270 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	60fb      	str	r3, [r7, #12]
        break;
 80051a2:	e068      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	60fb      	str	r3, [r7, #12]
        break;
 80051aa:	e064      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f007 f826 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 80051b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051c2:	d051      	beq.n	8005268 <ADC_ConfigureBoostMode+0x13c>
 80051c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051c8:	d854      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 80051ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051ce:	d047      	beq.n	8005260 <ADC_ConfigureBoostMode+0x134>
 80051d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051d4:	d84e      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 80051d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051da:	d03d      	beq.n	8005258 <ADC_ConfigureBoostMode+0x12c>
 80051dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051e0:	d848      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 80051e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e6:	d033      	beq.n	8005250 <ADC_ConfigureBoostMode+0x124>
 80051e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ec:	d842      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 80051ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051f2:	d029      	beq.n	8005248 <ADC_ConfigureBoostMode+0x11c>
 80051f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051f8:	d83c      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 80051fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051fe:	d01a      	beq.n	8005236 <ADC_ConfigureBoostMode+0x10a>
 8005200:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005204:	d836      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 8005206:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800520a:	d014      	beq.n	8005236 <ADC_ConfigureBoostMode+0x10a>
 800520c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005210:	d830      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	d00e      	beq.n	8005236 <ADC_ConfigureBoostMode+0x10a>
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d82a      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 800521e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005222:	d008      	beq.n	8005236 <ADC_ConfigureBoostMode+0x10a>
 8005224:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005228:	d824      	bhi.n	8005274 <ADC_ConfigureBoostMode+0x148>
 800522a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522e:	d002      	beq.n	8005236 <ADC_ConfigureBoostMode+0x10a>
 8005230:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005234:	d11e      	bne.n	8005274 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	0c9b      	lsrs	r3, r3, #18
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	60fb      	str	r3, [r7, #12]
        break;
 8005246:	e016      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	60fb      	str	r3, [r7, #12]
        break;
 800524e:	e012      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	60fb      	str	r3, [r7, #12]
        break;
 8005256:	e00e      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	099b      	lsrs	r3, r3, #6
 800525c:	60fb      	str	r3, [r7, #12]
        break;
 800525e:	e00a      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
        break;
 8005266:	e006      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	60fb      	str	r3, [r7, #12]
        break;
 800526e:	e002      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005274:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005276:	f7fe fdcb 	bl	8003e10 <HAL_GetREVID>
 800527a:	4603      	mov	r3, r0
 800527c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005280:	4293      	cmp	r3, r2
 8005282:	d815      	bhi.n	80052b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <ADC_ConfigureBoostMode+0x208>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d908      	bls.n	800529e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800529c:	e03e      	b.n	800531c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	e035      	b.n	800531c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <ADC_ConfigureBoostMode+0x20c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d808      	bhi.n	80052d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80052cc:	609a      	str	r2, [r3, #8]
}
 80052ce:	e025      	b.n	800531c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <ADC_ConfigureBoostMode+0x210>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d80a      	bhi.n	80052ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	e016      	b.n	800531c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <ADC_ConfigureBoostMode+0x214>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d80a      	bhi.n	800530c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005308:	609a      	str	r2, [r3, #8]
}
 800530a:	e007      	b.n	800531c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40022000 	.word	0x40022000
 8005328:	40022100 	.word	0x40022100
 800532c:	40022300 	.word	0x40022300
 8005330:	58026300 	.word	0x58026300
 8005334:	01312d00 	.word	0x01312d00
 8005338:	005f5e10 	.word	0x005f5e10
 800533c:	00bebc20 	.word	0x00bebc20
 8005340:	017d7840 	.word	0x017d7840

08005344 <LL_ADC_IsEnabled>:
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <LL_ADC_IsEnabled+0x18>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <LL_ADC_IsEnabled+0x1a>
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <LL_ADC_StartCalibration>:
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <LL_ADC_StartCalibration+0x38>)
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800538c:	430a      	orrs	r2, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	3ffeffc0 	.word	0x3ffeffc0

080053a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053bc:	d101      	bne.n	80053c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_ADC_REG_IsConversionOngoing>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d101      	bne.n	80053e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_ADCEx_Calibration_Start+0x1e>
 8005412:	2302      	movs	r3, #2
 8005414:	e04c      	b.n	80054b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fd90 	bl	8004f44 <ADC_Disable>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d135      	bne.n	800549a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005432:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005434:	4013      	ands	r3, r2
 8005436:	f043 0202 	orr.w	r2, r3, #2
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff90 	bl	800536c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800544c:	e014      	b.n	8005478 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3301      	adds	r3, #1
 8005452:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_ADCEx_Calibration_Start+0xc4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d30d      	bcc.n	8005478 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	f023 0312 	bic.w	r3, r3, #18
 8005464:	f043 0210 	orr.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e01b      	b.n	80054b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff93 	bl	80053a8 <LL_ADC_IsCalibrationOnGoing>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e2      	bne.n	800544e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f023 0303 	bic.w	r3, r3, #3
 8005490:	f043 0201 	orr.w	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
 8005498:	e005      	b.n	80054a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	ffffeefd 	.word	0xffffeefd
 80054bc:	25c3f800 	.word	0x25c3f800

080054c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b09f      	sub	sp, #124	; 0x7c
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054da:	2302      	movs	r3, #2
 80054dc:	e0be      	b.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5c      	ldr	r2, [pc, #368]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d102      	bne.n	80054fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054f8:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	e001      	b.n	8005502 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e09d      	b.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ff54 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 8005528:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff ff4e 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d17f      	bne.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800553a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553c:	2b00      	cmp	r3, #0
 800553e:	d17c      	bne.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a47      	ldr	r2, [pc, #284]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a46      	ldr	r2, [pc, #280]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005554:	4b45      	ldr	r3, [pc, #276]	; (800566c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005556:	e000      	b.n	800555a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800555a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d039      	beq.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	431a      	orrs	r2, r3
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a3a      	ldr	r2, [pc, #232]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a38      	ldr	r2, [pc, #224]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d10e      	bne.n	80055a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800558a:	4836      	ldr	r0, [pc, #216]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800558c:	f7ff feda 	bl	8005344 <LL_ADC_IsEnabled>
 8005590:	4604      	mov	r4, r0
 8005592:	4835      	ldr	r0, [pc, #212]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005594:	f7ff fed6 	bl	8005344 <LL_ADC_IsEnabled>
 8005598:	4603      	mov	r3, r0
 800559a:	4323      	orrs	r3, r4
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e008      	b.n	80055ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80055a8:	4832      	ldr	r0, [pc, #200]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055aa:	f7ff fecb 	bl	8005344 <LL_ADC_IsEnabled>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d047      	beq.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	6811      	ldr	r1, [r2, #0]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	6892      	ldr	r2, [r2, #8]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055d6:	e03a      	b.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1e      	ldr	r2, [pc, #120]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d10e      	bne.n	8005616 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80055f8:	481a      	ldr	r0, [pc, #104]	; (8005664 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055fa:	f7ff fea3 	bl	8005344 <LL_ADC_IsEnabled>
 80055fe:	4604      	mov	r4, r0
 8005600:	4819      	ldr	r0, [pc, #100]	; (8005668 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005602:	f7ff fe9f 	bl	8005344 <LL_ADC_IsEnabled>
 8005606:	4603      	mov	r3, r0
 8005608:	4323      	orrs	r3, r4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e008      	b.n	8005628 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005616:	4817      	ldr	r0, [pc, #92]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005618:	f7ff fe94 	bl	8005344 <LL_ADC_IsEnabled>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005632:	4013      	ands	r3, r2
 8005634:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005636:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005638:	e009      	b.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800564c:	e000      	b.n	8005650 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800564e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005658:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800565c:	4618      	mov	r0, r3
 800565e:	377c      	adds	r7, #124	; 0x7c
 8005660:	46bd      	mov	sp, r7
 8005662:	bd90      	pop	{r4, r7, pc}
 8005664:	40022000 	.word	0x40022000
 8005668:	40022100 	.word	0x40022100
 800566c:	40022300 	.word	0x40022300
 8005670:	58026300 	.word	0x58026300
 8005674:	58026000 	.word	0x58026000
 8005678:	fffff0e0 	.word	0xfffff0e0

0800567c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <__NVIC_SetPriorityGrouping+0x40>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056aa:	4a04      	ldr	r2, [pc, #16]	; (80056bc <__NVIC_SetPriorityGrouping+0x40>)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	60d3      	str	r3, [r2, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00
 80056c0:	05fa0000 	.word	0x05fa0000

080056c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <__NVIC_GetPriorityGrouping+0x18>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 0307 	and.w	r3, r3, #7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db0b      	blt.n	800570a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	4907      	ldr	r1, [pc, #28]	; (8005718 <__NVIC_EnableIRQ+0x38>)
 80056fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2001      	movs	r0, #1
 8005702:	fa00 f202 	lsl.w	r2, r0, r2
 8005706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e100 	.word	0xe000e100

0800571c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	db0a      	blt.n	8005746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	490c      	ldr	r1, [pc, #48]	; (8005768 <__NVIC_SetPriority+0x4c>)
 8005736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	440b      	add	r3, r1
 8005740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005744:	e00a      	b.n	800575c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4908      	ldr	r1, [pc, #32]	; (800576c <__NVIC_SetPriority+0x50>)
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	3b04      	subs	r3, #4
 8005754:	0112      	lsls	r2, r2, #4
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	440b      	add	r3, r1
 800575a:	761a      	strb	r2, [r3, #24]
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000e100 	.word	0xe000e100
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	2b04      	cmp	r3, #4
 800578c:	bf28      	it	cs
 800578e:	2304      	movcs	r3, #4
 8005790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3304      	adds	r3, #4
 8005796:	2b06      	cmp	r3, #6
 8005798:	d902      	bls.n	80057a0 <NVIC_EncodePriority+0x30>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3b03      	subs	r3, #3
 800579e:	e000      	b.n	80057a2 <NVIC_EncodePriority+0x32>
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	401a      	ands	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa01 f303 	lsl.w	r3, r1, r3
 80057c2:	43d9      	mvns	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	4313      	orrs	r3, r2
         );
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3724      	adds	r7, #36	; 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ff4c 	bl	800567c <__NVIC_SetPriorityGrouping>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057fa:	f7ff ff63 	bl	80056c4 <__NVIC_GetPriorityGrouping>
 80057fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	6978      	ldr	r0, [r7, #20]
 8005806:	f7ff ffb3 	bl	8005770 <NVIC_EncodePriority>
 800580a:	4602      	mov	r2, r0
 800580c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff82 	bl	800571c <__NVIC_SetPriority>
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800582a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff56 	bl	80056e0 <__NVIC_EnableIRQ>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e014      	b.n	8005878 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fd fc76 	bl	8003150 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e046      	b.n	8005922 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	795b      	ldrb	r3, [r3, #5]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_DAC_Start+0x20>
 800589c:	2302      	movs	r3, #2
 800589e:	e040      	b.n	8005922 <HAL_DAC_Start+0xa2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d11d      	bne.n	8005914 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	e014      	b.n	8005914 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2102      	movs	r1, #2
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0202 	orr.w	r2, r2, #2
 8005912:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0a2      	b.n	8005a8e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_DAC_Start_DMA+0x24>
 8005950:	2302      	movs	r3, #2
 8005952:	e09c      	b.n	8005a8e <HAL_DAC_Start_DMA+0x15e>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2202      	movs	r2, #2
 800595e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d129      	bne.n	80059ba <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4a4b      	ldr	r2, [pc, #300]	; (8005a98 <HAL_DAC_Start_DMA+0x168>)
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_DAC_Start_DMA+0x16c>)
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a49      	ldr	r2, [pc, #292]	; (8005aa0 <HAL_DAC_Start_DMA+0x170>)
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800598c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_DAC_Start_DMA+0x6c>
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b04      	cmp	r3, #4
 8005998:	d005      	beq.n	80059a6 <HAL_DAC_Start_DMA+0x76>
 800599a:	e009      	b.n	80059b0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	613b      	str	r3, [r7, #16]
        break;
 80059a4:	e033      	b.n	8005a0e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	613b      	str	r3, [r7, #16]
        break;
 80059ae:	e02e      	b.n	8005a0e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3310      	adds	r3, #16
 80059b6:	613b      	str	r3, [r7, #16]
        break;
 80059b8:	e029      	b.n	8005a0e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4a39      	ldr	r2, [pc, #228]	; (8005aa4 <HAL_DAC_Start_DMA+0x174>)
 80059c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4a38      	ldr	r2, [pc, #224]	; (8005aa8 <HAL_DAC_Start_DMA+0x178>)
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4a37      	ldr	r2, [pc, #220]	; (8005aac <HAL_DAC_Start_DMA+0x17c>)
 80059d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059e0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_DAC_Start_DMA+0xc0>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d005      	beq.n	80059fa <HAL_DAC_Start_DMA+0xca>
 80059ee:	e009      	b.n	8005a04 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	613b      	str	r3, [r7, #16]
        break;
 80059f8:	e009      	b.n	8005a0e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3318      	adds	r3, #24
 8005a00:	613b      	str	r3, [r7, #16]
        break;
 8005a02:	e004      	b.n	8005a0e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	331c      	adds	r3, #28
 8005a0a:	613b      	str	r3, [r7, #16]
        break;
 8005a0c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d111      	bne.n	8005a38 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6898      	ldr	r0, [r3, #8]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	f000 fe67 	bl	8006700 <HAL_DMA_Start_IT>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	e010      	b.n	8005a5a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68d8      	ldr	r0, [r3, #12]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	f000 fe55 	bl	8006700 <HAL_DMA_Start_IT>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10c      	bne.n	8005a80 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2201      	movs	r2, #1
 8005a74:	409a      	lsls	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e005      	b.n	8005a8c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f043 0204 	orr.w	r2, r3, #4
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08005f21 	.word	0x08005f21
 8005a9c:	08005f43 	.word	0x08005f43
 8005aa0:	08005f5f 	.word	0x08005f5f
 8005aa4:	08005fdd 	.word	0x08005fdd
 8005aa8:	08005fff 	.word	0x08005fff
 8005aac:	0800601b 	.word	0x0800601b

08005ab0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e03e      	b.n	8005b42 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43da      	mvns	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	400a      	ands	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6819      	ldr	r1, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43da      	mvns	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	400a      	ands	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 f863 	bl	8006bd4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e00c      	b.n	8005b3a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f855 	bl	8006bd4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005b38:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01d      	beq.n	8005ba8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2204      	movs	r2, #4
 8005b7a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f043 0201 	orr.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ba0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f86f 	bl	8005c86 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01d      	beq.n	8005bee <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d018      	beq.n	8005bee <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f9ed 	bl	8005fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b087      	sub	sp, #28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e015      	b.n	8005c3e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3308      	adds	r3, #8
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e004      	b.n	8005c34 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3314      	adds	r3, #20
 8005c32:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	461a      	mov	r2, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_DAC_ConfigChannel+0x1e>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e12a      	b.n	8005f14 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	795b      	ldrb	r3, [r3, #5]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_DAC_ConfigChannel+0x2e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e124      	b.n	8005f14 <HAL_DAC_ConfigChannel+0x278>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d17a      	bne.n	8005dd4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005cde:	f7fe f88b 	bl	8003df8 <HAL_GetTick>
 8005ce2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d13d      	bne.n	8005d66 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cea:	e018      	b.n	8005d1e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cec:	f7fe f884 	bl	8003df8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d911      	bls.n	8005d1e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d00:	4b86      	ldr	r3, [pc, #536]	; (8005f1c <HAL_DAC_ConfigChannel+0x280>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f043 0208 	orr.w	r2, r3, #8
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2203      	movs	r2, #3
 8005d18:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0fa      	b.n	8005f14 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <HAL_DAC_ConfigChannel+0x280>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1df      	bne.n	8005cec <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	6992      	ldr	r2, [r2, #24]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
 8005d36:	e020      	b.n	8005d7a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d38:	f7fe f85e 	bl	8003df8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d90f      	bls.n	8005d66 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0a      	bge.n	8005d66 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f043 0208 	orr.w	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0d6      	b.n	8005f14 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dbe3      	blt.n	8005d38 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	6992      	ldr	r2, [r2, #24]
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	ea02 0103 	and.w	r1, r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	21ff      	movs	r1, #255	; 0xff
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	ea02 0103 	and.w	r1, r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d11d      	bne.n	8005e18 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	221f      	movs	r2, #31
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2207      	movs	r2, #7
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d102      	bne.n	8005e42 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e40:	e00f      	b.n	8005e62 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d102      	bne.n	8005e50 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	e008      	b.n	8005e62 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5c:	e001      	b.n	8005e62 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43da      	mvns	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	22c0      	movs	r2, #192	; 0xc0
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	400a      	ands	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3728      	adds	r7, #40	; 0x28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20008000 	.word	0x20008000

08005f20 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff fe8b 	bl	8005c4a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	711a      	strb	r2, [r3, #4]
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fe84 	bl	8005c5e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f043 0204 	orr.w	r2, r3, #4
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fe7a 	bl	8005c72 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	711a      	strb	r2, [r3, #4]
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff ffce 	bl	8005f8c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	711a      	strb	r2, [r3, #4]
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff ffc7 	bl	8005fa0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f043 0204 	orr.w	r2, r3, #4
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff ffbd 	bl	8005fb4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	711a      	strb	r2, [r3, #4]
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006050:	f7fd fed2 	bl	8003df8 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e316      	b.n	800668e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a66      	ldr	r2, [pc, #408]	; (8006200 <HAL_DMA_Init+0x1b8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d04a      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a65      	ldr	r2, [pc, #404]	; (8006204 <HAL_DMA_Init+0x1bc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d045      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a63      	ldr	r2, [pc, #396]	; (8006208 <HAL_DMA_Init+0x1c0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d040      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a62      	ldr	r2, [pc, #392]	; (800620c <HAL_DMA_Init+0x1c4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d03b      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a60      	ldr	r2, [pc, #384]	; (8006210 <HAL_DMA_Init+0x1c8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d036      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a5f      	ldr	r2, [pc, #380]	; (8006214 <HAL_DMA_Init+0x1cc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d031      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a5d      	ldr	r2, [pc, #372]	; (8006218 <HAL_DMA_Init+0x1d0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02c      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a5c      	ldr	r2, [pc, #368]	; (800621c <HAL_DMA_Init+0x1d4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d027      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5a      	ldr	r2, [pc, #360]	; (8006220 <HAL_DMA_Init+0x1d8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a59      	ldr	r2, [pc, #356]	; (8006224 <HAL_DMA_Init+0x1dc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01d      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a57      	ldr	r2, [pc, #348]	; (8006228 <HAL_DMA_Init+0x1e0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d018      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a56      	ldr	r2, [pc, #344]	; (800622c <HAL_DMA_Init+0x1e4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a54      	ldr	r2, [pc, #336]	; (8006230 <HAL_DMA_Init+0x1e8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a53      	ldr	r2, [pc, #332]	; (8006234 <HAL_DMA_Init+0x1ec>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a51      	ldr	r2, [pc, #324]	; (8006238 <HAL_DMA_Init+0x1f0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_DMA_Init+0xb8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a50      	ldr	r2, [pc, #320]	; (800623c <HAL_DMA_Init+0x1f4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Init+0xbc>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_DMA_Init+0xbe>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 813b 	beq.w	8006382 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a37      	ldr	r2, [pc, #220]	; (8006200 <HAL_DMA_Init+0x1b8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d04a      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a36      	ldr	r2, [pc, #216]	; (8006204 <HAL_DMA_Init+0x1bc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d045      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a34      	ldr	r2, [pc, #208]	; (8006208 <HAL_DMA_Init+0x1c0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d040      	beq.n	80061bc <HAL_DMA_Init+0x174>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a33      	ldr	r2, [pc, #204]	; (800620c <HAL_DMA_Init+0x1c4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d03b      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a31      	ldr	r2, [pc, #196]	; (8006210 <HAL_DMA_Init+0x1c8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d036      	beq.n	80061bc <HAL_DMA_Init+0x174>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a30      	ldr	r2, [pc, #192]	; (8006214 <HAL_DMA_Init+0x1cc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d031      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2e      	ldr	r2, [pc, #184]	; (8006218 <HAL_DMA_Init+0x1d0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d02c      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2d      	ldr	r2, [pc, #180]	; (800621c <HAL_DMA_Init+0x1d4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d027      	beq.n	80061bc <HAL_DMA_Init+0x174>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <HAL_DMA_Init+0x1d8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d022      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <HAL_DMA_Init+0x1dc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d01d      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a28      	ldr	r2, [pc, #160]	; (8006228 <HAL_DMA_Init+0x1e0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d018      	beq.n	80061bc <HAL_DMA_Init+0x174>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a27      	ldr	r2, [pc, #156]	; (800622c <HAL_DMA_Init+0x1e4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d013      	beq.n	80061bc <HAL_DMA_Init+0x174>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a25      	ldr	r2, [pc, #148]	; (8006230 <HAL_DMA_Init+0x1e8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00e      	beq.n	80061bc <HAL_DMA_Init+0x174>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a24      	ldr	r2, [pc, #144]	; (8006234 <HAL_DMA_Init+0x1ec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d009      	beq.n	80061bc <HAL_DMA_Init+0x174>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_DMA_Init+0x1f0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d004      	beq.n	80061bc <HAL_DMA_Init+0x174>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_DMA_Init+0x1f4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d108      	bne.n	80061ce <HAL_DMA_Init+0x186>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e007      	b.n	80061de <HAL_DMA_Init+0x196>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061de:	e02f      	b.n	8006240 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061e0:	f7fd fe0a 	bl	8003df8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d928      	bls.n	8006240 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2203      	movs	r2, #3
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e246      	b.n	800668e <HAL_DMA_Init+0x646>
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1c8      	bne.n	80061e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4b83      	ldr	r3, [pc, #524]	; (8006468 <HAL_DMA_Init+0x420>)
 800625a:	4013      	ands	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006266:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006272:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800627e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b04      	cmp	r3, #4
 8006292:	d107      	bne.n	80062a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	4313      	orrs	r3, r2
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062a4:	4b71      	ldr	r3, [pc, #452]	; (800646c <HAL_DMA_Init+0x424>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b71      	ldr	r3, [pc, #452]	; (8006470 <HAL_DMA_Init+0x428>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b0:	d328      	bcc.n	8006304 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b28      	cmp	r3, #40	; 0x28
 80062b8:	d903      	bls.n	80062c2 <HAL_DMA_Init+0x27a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b2e      	cmp	r3, #46	; 0x2e
 80062c0:	d917      	bls.n	80062f2 <HAL_DMA_Init+0x2aa>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b3e      	cmp	r3, #62	; 0x3e
 80062c8:	d903      	bls.n	80062d2 <HAL_DMA_Init+0x28a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b42      	cmp	r3, #66	; 0x42
 80062d0:	d90f      	bls.n	80062f2 <HAL_DMA_Init+0x2aa>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b46      	cmp	r3, #70	; 0x46
 80062d8:	d903      	bls.n	80062e2 <HAL_DMA_Init+0x29a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b48      	cmp	r3, #72	; 0x48
 80062e0:	d907      	bls.n	80062f2 <HAL_DMA_Init+0x2aa>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b4e      	cmp	r3, #78	; 0x4e
 80062e8:	d905      	bls.n	80062f6 <HAL_DMA_Init+0x2ae>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b52      	cmp	r3, #82	; 0x52
 80062f0:	d801      	bhi.n	80062f6 <HAL_DMA_Init+0x2ae>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <HAL_DMA_Init+0x2b0>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006302:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b04      	cmp	r3, #4
 800632c:	d117      	bne.n	800635e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f002 fb3f 	bl	80089c4 <DMA_CheckFifoParam>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e197      	b.n	800668e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 fa7a 	bl	8008860 <DMA_CalcBaseAndBitshift>
 800636c:	4603      	mov	r3, r0
 800636e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	223f      	movs	r2, #63	; 0x3f
 800637a:	409a      	lsls	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]
 8006380:	e0cd      	b.n	800651e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a3b      	ldr	r2, [pc, #236]	; (8006474 <HAL_DMA_Init+0x42c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a39      	ldr	r2, [pc, #228]	; (8006478 <HAL_DMA_Init+0x430>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a38      	ldr	r2, [pc, #224]	; (800647c <HAL_DMA_Init+0x434>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a36      	ldr	r2, [pc, #216]	; (8006480 <HAL_DMA_Init+0x438>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a35      	ldr	r2, [pc, #212]	; (8006484 <HAL_DMA_Init+0x43c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a33      	ldr	r2, [pc, #204]	; (8006488 <HAL_DMA_Init+0x440>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a32      	ldr	r2, [pc, #200]	; (800648c <HAL_DMA_Init+0x444>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_DMA_Init+0x38a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a30      	ldr	r2, [pc, #192]	; (8006490 <HAL_DMA_Init+0x448>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d101      	bne.n	80063d6 <HAL_DMA_Init+0x38e>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <HAL_DMA_Init+0x390>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8097 	beq.w	800650c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a24      	ldr	r2, [pc, #144]	; (8006474 <HAL_DMA_Init+0x42c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d021      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a22      	ldr	r2, [pc, #136]	; (8006478 <HAL_DMA_Init+0x430>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01c      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a21      	ldr	r2, [pc, #132]	; (800647c <HAL_DMA_Init+0x434>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d017      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <HAL_DMA_Init+0x438>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d012      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <HAL_DMA_Init+0x43c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00d      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_DMA_Init+0x440>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d008      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_DMA_Init+0x444>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <HAL_DMA_Init+0x3e4>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <HAL_DMA_Init+0x448>)
 800642a:	4293      	cmp	r3, r2
 800642c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_DMA_Init+0x44c>)
 800644a:	4013      	ands	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d020      	beq.n	8006498 <HAL_DMA_Init+0x450>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d102      	bne.n	8006464 <HAL_DMA_Init+0x41c>
 800645e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006462:	e01a      	b.n	800649a <HAL_DMA_Init+0x452>
 8006464:	2300      	movs	r3, #0
 8006466:	e018      	b.n	800649a <HAL_DMA_Init+0x452>
 8006468:	fe10803f 	.word	0xfe10803f
 800646c:	5c001000 	.word	0x5c001000
 8006470:	ffff0000 	.word	0xffff0000
 8006474:	58025408 	.word	0x58025408
 8006478:	5802541c 	.word	0x5802541c
 800647c:	58025430 	.word	0x58025430
 8006480:	58025444 	.word	0x58025444
 8006484:	58025458 	.word	0x58025458
 8006488:	5802546c 	.word	0x5802546c
 800648c:	58025480 	.word	0x58025480
 8006490:	58025494 	.word	0x58025494
 8006494:	fffe000f 	.word	0xfffe000f
 8006498:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	4b6e      	ldr	r3, [pc, #440]	; (8006698 <HAL_DMA_Init+0x650>)
 80064e0:	4413      	add	r3, r2
 80064e2:	4a6e      	ldr	r2, [pc, #440]	; (800669c <HAL_DMA_Init+0x654>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	091b      	lsrs	r3, r3, #4
 80064ea:	009a      	lsls	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 f9b5 	bl	8008860 <DMA_CalcBaseAndBitshift>
 80064f6:	4603      	mov	r3, r0
 80064f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2201      	movs	r2, #1
 8006504:	409a      	lsls	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	e008      	b.n	800651e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2203      	movs	r2, #3
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e0b7      	b.n	800668e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5f      	ldr	r2, [pc, #380]	; (80066a0 <HAL_DMA_Init+0x658>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d072      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a5d      	ldr	r2, [pc, #372]	; (80066a4 <HAL_DMA_Init+0x65c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d06d      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5c      	ldr	r2, [pc, #368]	; (80066a8 <HAL_DMA_Init+0x660>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d068      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5a      	ldr	r2, [pc, #360]	; (80066ac <HAL_DMA_Init+0x664>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d063      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a59      	ldr	r2, [pc, #356]	; (80066b0 <HAL_DMA_Init+0x668>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d05e      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a57      	ldr	r2, [pc, #348]	; (80066b4 <HAL_DMA_Init+0x66c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d059      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a56      	ldr	r2, [pc, #344]	; (80066b8 <HAL_DMA_Init+0x670>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d054      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a54      	ldr	r2, [pc, #336]	; (80066bc <HAL_DMA_Init+0x674>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d04f      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a53      	ldr	r2, [pc, #332]	; (80066c0 <HAL_DMA_Init+0x678>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d04a      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a51      	ldr	r2, [pc, #324]	; (80066c4 <HAL_DMA_Init+0x67c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d045      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a50      	ldr	r2, [pc, #320]	; (80066c8 <HAL_DMA_Init+0x680>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d040      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a4e      	ldr	r2, [pc, #312]	; (80066cc <HAL_DMA_Init+0x684>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d03b      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a4d      	ldr	r2, [pc, #308]	; (80066d0 <HAL_DMA_Init+0x688>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d036      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a4b      	ldr	r2, [pc, #300]	; (80066d4 <HAL_DMA_Init+0x68c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d031      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a4a      	ldr	r2, [pc, #296]	; (80066d8 <HAL_DMA_Init+0x690>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d02c      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a48      	ldr	r2, [pc, #288]	; (80066dc <HAL_DMA_Init+0x694>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d027      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a47      	ldr	r2, [pc, #284]	; (80066e0 <HAL_DMA_Init+0x698>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a45      	ldr	r2, [pc, #276]	; (80066e4 <HAL_DMA_Init+0x69c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01d      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a44      	ldr	r2, [pc, #272]	; (80066e8 <HAL_DMA_Init+0x6a0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a42      	ldr	r2, [pc, #264]	; (80066ec <HAL_DMA_Init+0x6a4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a41      	ldr	r2, [pc, #260]	; (80066f0 <HAL_DMA_Init+0x6a8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <HAL_DMA_Init+0x6ac>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a3e      	ldr	r2, [pc, #248]	; (80066f8 <HAL_DMA_Init+0x6b0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_DMA_Init+0x5c6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <HAL_DMA_Init+0x6b4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <HAL_DMA_Init+0x5ca>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HAL_DMA_Init+0x5cc>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d032      	beq.n	800667e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 fa4f 	bl	8008abc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d102      	bne.n	800662c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006640:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_DMA_Init+0x624>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b08      	cmp	r3, #8
 8006650:	d80c      	bhi.n	800666c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 facc 	bl	8008bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e008      	b.n	800667e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	a7fdabf8 	.word	0xa7fdabf8
 800669c:	cccccccd 	.word	0xcccccccd
 80066a0:	40020010 	.word	0x40020010
 80066a4:	40020028 	.word	0x40020028
 80066a8:	40020040 	.word	0x40020040
 80066ac:	40020058 	.word	0x40020058
 80066b0:	40020070 	.word	0x40020070
 80066b4:	40020088 	.word	0x40020088
 80066b8:	400200a0 	.word	0x400200a0
 80066bc:	400200b8 	.word	0x400200b8
 80066c0:	40020410 	.word	0x40020410
 80066c4:	40020428 	.word	0x40020428
 80066c8:	40020440 	.word	0x40020440
 80066cc:	40020458 	.word	0x40020458
 80066d0:	40020470 	.word	0x40020470
 80066d4:	40020488 	.word	0x40020488
 80066d8:	400204a0 	.word	0x400204a0
 80066dc:	400204b8 	.word	0x400204b8
 80066e0:	58025408 	.word	0x58025408
 80066e4:	5802541c 	.word	0x5802541c
 80066e8:	58025430 	.word	0x58025430
 80066ec:	58025444 	.word	0x58025444
 80066f0:	58025458 	.word	0x58025458
 80066f4:	5802546c 	.word	0x5802546c
 80066f8:	58025480 	.word	0x58025480
 80066fc:	58025494 	.word	0x58025494

08006700 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e226      	b.n	8006b6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_DMA_Start_IT+0x2a>
 8006726:	2302      	movs	r3, #2
 8006728:	e21f      	b.n	8006b6a <HAL_DMA_Start_IT+0x46a>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b01      	cmp	r3, #1
 800673c:	f040 820a 	bne.w	8006b54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a68      	ldr	r2, [pc, #416]	; (80068f4 <HAL_DMA_Start_IT+0x1f4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d04a      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a66      	ldr	r2, [pc, #408]	; (80068f8 <HAL_DMA_Start_IT+0x1f8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d045      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a65      	ldr	r2, [pc, #404]	; (80068fc <HAL_DMA_Start_IT+0x1fc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d040      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a63      	ldr	r2, [pc, #396]	; (8006900 <HAL_DMA_Start_IT+0x200>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d03b      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a62      	ldr	r2, [pc, #392]	; (8006904 <HAL_DMA_Start_IT+0x204>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d036      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a60      	ldr	r2, [pc, #384]	; (8006908 <HAL_DMA_Start_IT+0x208>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d031      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a5f      	ldr	r2, [pc, #380]	; (800690c <HAL_DMA_Start_IT+0x20c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d02c      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a5d      	ldr	r2, [pc, #372]	; (8006910 <HAL_DMA_Start_IT+0x210>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d027      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a5c      	ldr	r2, [pc, #368]	; (8006914 <HAL_DMA_Start_IT+0x214>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d022      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5a      	ldr	r2, [pc, #360]	; (8006918 <HAL_DMA_Start_IT+0x218>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d01d      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a59      	ldr	r2, [pc, #356]	; (800691c <HAL_DMA_Start_IT+0x21c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d018      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_DMA_Start_IT+0x220>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a56      	ldr	r2, [pc, #344]	; (8006924 <HAL_DMA_Start_IT+0x224>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00e      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a54      	ldr	r2, [pc, #336]	; (8006928 <HAL_DMA_Start_IT+0x228>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d009      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a53      	ldr	r2, [pc, #332]	; (800692c <HAL_DMA_Start_IT+0x22c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_DMA_Start_IT+0xee>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a51      	ldr	r2, [pc, #324]	; (8006930 <HAL_DMA_Start_IT+0x230>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <HAL_DMA_Start_IT+0x100>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e007      	b.n	8006810 <HAL_DMA_Start_IT+0x110>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f001 fe76 	bl	8008508 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a34      	ldr	r2, [pc, #208]	; (80068f4 <HAL_DMA_Start_IT+0x1f4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d04a      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a33      	ldr	r2, [pc, #204]	; (80068f8 <HAL_DMA_Start_IT+0x1f8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d045      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a31      	ldr	r2, [pc, #196]	; (80068fc <HAL_DMA_Start_IT+0x1fc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d040      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a30      	ldr	r2, [pc, #192]	; (8006900 <HAL_DMA_Start_IT+0x200>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d03b      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <HAL_DMA_Start_IT+0x204>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d036      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <HAL_DMA_Start_IT+0x208>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d031      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2b      	ldr	r2, [pc, #172]	; (800690c <HAL_DMA_Start_IT+0x20c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d02c      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_DMA_Start_IT+0x210>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d027      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <HAL_DMA_Start_IT+0x214>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d022      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a27      	ldr	r2, [pc, #156]	; (8006918 <HAL_DMA_Start_IT+0x218>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d01d      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a25      	ldr	r2, [pc, #148]	; (800691c <HAL_DMA_Start_IT+0x21c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d018      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a24      	ldr	r2, [pc, #144]	; (8006920 <HAL_DMA_Start_IT+0x220>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <HAL_DMA_Start_IT+0x224>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00e      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_DMA_Start_IT+0x228>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1f      	ldr	r2, [pc, #124]	; (800692c <HAL_DMA_Start_IT+0x22c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_Start_IT+0x1bc>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <HAL_DMA_Start_IT+0x230>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_DMA_Start_IT+0x1c0>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_DMA_Start_IT+0x1c2>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d036      	beq.n	8006934 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f023 021e 	bic.w	r2, r3, #30
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0216 	orr.w	r2, r2, #22
 80068d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d03e      	beq.n	8006960 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e035      	b.n	8006960 <HAL_DMA_Start_IT+0x260>
 80068f4:	40020010 	.word	0x40020010
 80068f8:	40020028 	.word	0x40020028
 80068fc:	40020040 	.word	0x40020040
 8006900:	40020058 	.word	0x40020058
 8006904:	40020070 	.word	0x40020070
 8006908:	40020088 	.word	0x40020088
 800690c:	400200a0 	.word	0x400200a0
 8006910:	400200b8 	.word	0x400200b8
 8006914:	40020410 	.word	0x40020410
 8006918:	40020428 	.word	0x40020428
 800691c:	40020440 	.word	0x40020440
 8006920:	40020458 	.word	0x40020458
 8006924:	40020470 	.word	0x40020470
 8006928:	40020488 	.word	0x40020488
 800692c:	400204a0 	.word	0x400204a0
 8006930:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 020e 	bic.w	r2, r3, #14
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 020a 	orr.w	r2, r2, #10
 8006946:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0204 	orr.w	r2, r2, #4
 800695e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a83      	ldr	r2, [pc, #524]	; (8006b74 <HAL_DMA_Start_IT+0x474>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d072      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a82      	ldr	r2, [pc, #520]	; (8006b78 <HAL_DMA_Start_IT+0x478>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d06d      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a80      	ldr	r2, [pc, #512]	; (8006b7c <HAL_DMA_Start_IT+0x47c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d068      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a7f      	ldr	r2, [pc, #508]	; (8006b80 <HAL_DMA_Start_IT+0x480>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d063      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a7d      	ldr	r2, [pc, #500]	; (8006b84 <HAL_DMA_Start_IT+0x484>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d05e      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a7c      	ldr	r2, [pc, #496]	; (8006b88 <HAL_DMA_Start_IT+0x488>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d059      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7a      	ldr	r2, [pc, #488]	; (8006b8c <HAL_DMA_Start_IT+0x48c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d054      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_DMA_Start_IT+0x490>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d04f      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a77      	ldr	r2, [pc, #476]	; (8006b94 <HAL_DMA_Start_IT+0x494>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d04a      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a76      	ldr	r2, [pc, #472]	; (8006b98 <HAL_DMA_Start_IT+0x498>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d045      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a74      	ldr	r2, [pc, #464]	; (8006b9c <HAL_DMA_Start_IT+0x49c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d040      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_DMA_Start_IT+0x4a0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d03b      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <HAL_DMA_Start_IT+0x4a4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d036      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a70      	ldr	r2, [pc, #448]	; (8006ba8 <HAL_DMA_Start_IT+0x4a8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d031      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_DMA_Start_IT+0x4ac>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d02c      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a6d      	ldr	r2, [pc, #436]	; (8006bb0 <HAL_DMA_Start_IT+0x4b0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d027      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a6b      	ldr	r2, [pc, #428]	; (8006bb4 <HAL_DMA_Start_IT+0x4b4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6a      	ldr	r2, [pc, #424]	; (8006bb8 <HAL_DMA_Start_IT+0x4b8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d01d      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <HAL_DMA_Start_IT+0x4bc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a67      	ldr	r2, [pc, #412]	; (8006bc0 <HAL_DMA_Start_IT+0x4c0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a65      	ldr	r2, [pc, #404]	; (8006bc4 <HAL_DMA_Start_IT+0x4c4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a64      	ldr	r2, [pc, #400]	; (8006bc8 <HAL_DMA_Start_IT+0x4c8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a62      	ldr	r2, [pc, #392]	; (8006bcc <HAL_DMA_Start_IT+0x4cc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_DMA_Start_IT+0x350>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a61      	ldr	r2, [pc, #388]	; (8006bd0 <HAL_DMA_Start_IT+0x4d0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_DMA_Start_IT+0x354>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_DMA_Start_IT+0x356>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01a      	beq.n	8006a90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a37      	ldr	r2, [pc, #220]	; (8006b74 <HAL_DMA_Start_IT+0x474>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d04a      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a36      	ldr	r2, [pc, #216]	; (8006b78 <HAL_DMA_Start_IT+0x478>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d045      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a34      	ldr	r2, [pc, #208]	; (8006b7c <HAL_DMA_Start_IT+0x47c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d040      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a33      	ldr	r2, [pc, #204]	; (8006b80 <HAL_DMA_Start_IT+0x480>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d03b      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a31      	ldr	r2, [pc, #196]	; (8006b84 <HAL_DMA_Start_IT+0x484>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d036      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a30      	ldr	r2, [pc, #192]	; (8006b88 <HAL_DMA_Start_IT+0x488>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d031      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2e      	ldr	r2, [pc, #184]	; (8006b8c <HAL_DMA_Start_IT+0x48c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02c      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2d      	ldr	r2, [pc, #180]	; (8006b90 <HAL_DMA_Start_IT+0x490>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d027      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2b      	ldr	r2, [pc, #172]	; (8006b94 <HAL_DMA_Start_IT+0x494>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d022      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <HAL_DMA_Start_IT+0x498>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01d      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <HAL_DMA_Start_IT+0x49c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d018      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <HAL_DMA_Start_IT+0x4a0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a25      	ldr	r2, [pc, #148]	; (8006ba4 <HAL_DMA_Start_IT+0x4a4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00e      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <HAL_DMA_Start_IT+0x4a8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <HAL_DMA_Start_IT+0x4ac>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_Start_IT+0x430>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	; (8006bb0 <HAL_DMA_Start_IT+0x4b0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d108      	bne.n	8006b42 <HAL_DMA_Start_IT+0x442>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e012      	b.n	8006b68 <HAL_DMA_Start_IT+0x468>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e009      	b.n	8006b68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40020010 	.word	0x40020010
 8006b78:	40020028 	.word	0x40020028
 8006b7c:	40020040 	.word	0x40020040
 8006b80:	40020058 	.word	0x40020058
 8006b84:	40020070 	.word	0x40020070
 8006b88:	40020088 	.word	0x40020088
 8006b8c:	400200a0 	.word	0x400200a0
 8006b90:	400200b8 	.word	0x400200b8
 8006b94:	40020410 	.word	0x40020410
 8006b98:	40020428 	.word	0x40020428
 8006b9c:	40020440 	.word	0x40020440
 8006ba0:	40020458 	.word	0x40020458
 8006ba4:	40020470 	.word	0x40020470
 8006ba8:	40020488 	.word	0x40020488
 8006bac:	400204a0 	.word	0x400204a0
 8006bb0:	400204b8 	.word	0x400204b8
 8006bb4:	58025408 	.word	0x58025408
 8006bb8:	5802541c 	.word	0x5802541c
 8006bbc:	58025430 	.word	0x58025430
 8006bc0:	58025444 	.word	0x58025444
 8006bc4:	58025458 	.word	0x58025458
 8006bc8:	5802546c 	.word	0x5802546c
 8006bcc:	58025480 	.word	0x58025480
 8006bd0:	58025494 	.word	0x58025494

08006bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006bdc:	f7fd f90c 	bl	8003df8 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e2dc      	b.n	80071a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d008      	beq.n	8006c0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2280      	movs	r2, #128	; 0x80
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e2cd      	b.n	80071a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a76      	ldr	r2, [pc, #472]	; (8006de8 <HAL_DMA_Abort+0x214>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d04a      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a74      	ldr	r2, [pc, #464]	; (8006dec <HAL_DMA_Abort+0x218>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d045      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a73      	ldr	r2, [pc, #460]	; (8006df0 <HAL_DMA_Abort+0x21c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d040      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a71      	ldr	r2, [pc, #452]	; (8006df4 <HAL_DMA_Abort+0x220>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d03b      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a70      	ldr	r2, [pc, #448]	; (8006df8 <HAL_DMA_Abort+0x224>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d036      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6e      	ldr	r2, [pc, #440]	; (8006dfc <HAL_DMA_Abort+0x228>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d031      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6d      	ldr	r2, [pc, #436]	; (8006e00 <HAL_DMA_Abort+0x22c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d02c      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a6b      	ldr	r2, [pc, #428]	; (8006e04 <HAL_DMA_Abort+0x230>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d027      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a6a      	ldr	r2, [pc, #424]	; (8006e08 <HAL_DMA_Abort+0x234>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a68      	ldr	r2, [pc, #416]	; (8006e0c <HAL_DMA_Abort+0x238>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a67      	ldr	r2, [pc, #412]	; (8006e10 <HAL_DMA_Abort+0x23c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a65      	ldr	r2, [pc, #404]	; (8006e14 <HAL_DMA_Abort+0x240>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a64      	ldr	r2, [pc, #400]	; (8006e18 <HAL_DMA_Abort+0x244>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a62      	ldr	r2, [pc, #392]	; (8006e1c <HAL_DMA_Abort+0x248>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a61      	ldr	r2, [pc, #388]	; (8006e20 <HAL_DMA_Abort+0x24c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_Abort+0xd6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a5f      	ldr	r2, [pc, #380]	; (8006e24 <HAL_DMA_Abort+0x250>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d101      	bne.n	8006cae <HAL_DMA_Abort+0xda>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <HAL_DMA_Abort+0xdc>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d013      	beq.n	8006cdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 021e 	bic.w	r2, r2, #30
 8006cc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695a      	ldr	r2, [r3, #20]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e00a      	b.n	8006cf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 020e 	bic.w	r2, r2, #14
 8006cea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3c      	ldr	r2, [pc, #240]	; (8006de8 <HAL_DMA_Abort+0x214>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d072      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <HAL_DMA_Abort+0x218>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d06d      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <HAL_DMA_Abort+0x21c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d068      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a37      	ldr	r2, [pc, #220]	; (8006df4 <HAL_DMA_Abort+0x220>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d063      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a36      	ldr	r2, [pc, #216]	; (8006df8 <HAL_DMA_Abort+0x224>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d05e      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a34      	ldr	r2, [pc, #208]	; (8006dfc <HAL_DMA_Abort+0x228>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d059      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a33      	ldr	r2, [pc, #204]	; (8006e00 <HAL_DMA_Abort+0x22c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d054      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a31      	ldr	r2, [pc, #196]	; (8006e04 <HAL_DMA_Abort+0x230>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d04f      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a30      	ldr	r2, [pc, #192]	; (8006e08 <HAL_DMA_Abort+0x234>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d04a      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2e      	ldr	r2, [pc, #184]	; (8006e0c <HAL_DMA_Abort+0x238>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d045      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2d      	ldr	r2, [pc, #180]	; (8006e10 <HAL_DMA_Abort+0x23c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d040      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <HAL_DMA_Abort+0x240>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d03b      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <HAL_DMA_Abort+0x244>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d036      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <HAL_DMA_Abort+0x248>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d031      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a27      	ldr	r2, [pc, #156]	; (8006e20 <HAL_DMA_Abort+0x24c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d02c      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a25      	ldr	r2, [pc, #148]	; (8006e24 <HAL_DMA_Abort+0x250>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d027      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a24      	ldr	r2, [pc, #144]	; (8006e28 <HAL_DMA_Abort+0x254>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d022      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <HAL_DMA_Abort+0x258>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01d      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <HAL_DMA_Abort+0x25c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d018      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <HAL_DMA_Abort+0x260>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <HAL_DMA_Abort+0x264>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <HAL_DMA_Abort+0x268>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <HAL_DMA_Abort+0x26c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_DMA_Abort+0x20e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <HAL_DMA_Abort+0x270>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d132      	bne.n	8006e48 <HAL_DMA_Abort+0x274>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e031      	b.n	8006e4a <HAL_DMA_Abort+0x276>
 8006de6:	bf00      	nop
 8006de8:	40020010 	.word	0x40020010
 8006dec:	40020028 	.word	0x40020028
 8006df0:	40020040 	.word	0x40020040
 8006df4:	40020058 	.word	0x40020058
 8006df8:	40020070 	.word	0x40020070
 8006dfc:	40020088 	.word	0x40020088
 8006e00:	400200a0 	.word	0x400200a0
 8006e04:	400200b8 	.word	0x400200b8
 8006e08:	40020410 	.word	0x40020410
 8006e0c:	40020428 	.word	0x40020428
 8006e10:	40020440 	.word	0x40020440
 8006e14:	40020458 	.word	0x40020458
 8006e18:	40020470 	.word	0x40020470
 8006e1c:	40020488 	.word	0x40020488
 8006e20:	400204a0 	.word	0x400204a0
 8006e24:	400204b8 	.word	0x400204b8
 8006e28:	58025408 	.word	0x58025408
 8006e2c:	5802541c 	.word	0x5802541c
 8006e30:	58025430 	.word	0x58025430
 8006e34:	58025444 	.word	0x58025444
 8006e38:	58025458 	.word	0x58025458
 8006e3c:	5802546c 	.word	0x5802546c
 8006e40:	58025480 	.word	0x58025480
 8006e44:	58025494 	.word	0x58025494
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	; (8007018 <HAL_DMA_Abort+0x444>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6b      	ldr	r2, [pc, #428]	; (800701c <HAL_DMA_Abort+0x448>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6a      	ldr	r2, [pc, #424]	; (8007020 <HAL_DMA_Abort+0x44c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a68      	ldr	r2, [pc, #416]	; (8007024 <HAL_DMA_Abort+0x450>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a67      	ldr	r2, [pc, #412]	; (8007028 <HAL_DMA_Abort+0x454>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a65      	ldr	r2, [pc, #404]	; (800702c <HAL_DMA_Abort+0x458>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a64      	ldr	r2, [pc, #400]	; (8007030 <HAL_DMA_Abort+0x45c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a62      	ldr	r2, [pc, #392]	; (8007034 <HAL_DMA_Abort+0x460>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a61      	ldr	r2, [pc, #388]	; (8007038 <HAL_DMA_Abort+0x464>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a5f      	ldr	r2, [pc, #380]	; (800703c <HAL_DMA_Abort+0x468>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a5e      	ldr	r2, [pc, #376]	; (8007040 <HAL_DMA_Abort+0x46c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a5c      	ldr	r2, [pc, #368]	; (8007044 <HAL_DMA_Abort+0x470>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5b      	ldr	r2, [pc, #364]	; (8007048 <HAL_DMA_Abort+0x474>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a59      	ldr	r2, [pc, #356]	; (800704c <HAL_DMA_Abort+0x478>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a58      	ldr	r2, [pc, #352]	; (8007050 <HAL_DMA_Abort+0x47c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_Abort+0x32a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a56      	ldr	r2, [pc, #344]	; (8007054 <HAL_DMA_Abort+0x480>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d108      	bne.n	8006f10 <HAL_DMA_Abort+0x33c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e007      	b.n	8006f20 <HAL_DMA_Abort+0x34c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0201 	bic.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f20:	e013      	b.n	8006f4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f22:	f7fc ff69 	bl	8003df8 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d90c      	bls.n	8006f4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2203      	movs	r2, #3
 8006f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e12d      	b.n	80071a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <HAL_DMA_Abort+0x444>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d04a      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a2d      	ldr	r2, [pc, #180]	; (800701c <HAL_DMA_Abort+0x448>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d045      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <HAL_DMA_Abort+0x44c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d040      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a2a      	ldr	r2, [pc, #168]	; (8007024 <HAL_DMA_Abort+0x450>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d03b      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a29      	ldr	r2, [pc, #164]	; (8007028 <HAL_DMA_Abort+0x454>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d036      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <HAL_DMA_Abort+0x458>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d031      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_DMA_Abort+0x45c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d02c      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a24      	ldr	r2, [pc, #144]	; (8007034 <HAL_DMA_Abort+0x460>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d027      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a23      	ldr	r2, [pc, #140]	; (8007038 <HAL_DMA_Abort+0x464>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d022      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <HAL_DMA_Abort+0x468>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01d      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a20      	ldr	r2, [pc, #128]	; (8007040 <HAL_DMA_Abort+0x46c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d018      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <HAL_DMA_Abort+0x470>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <HAL_DMA_Abort+0x474>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1b      	ldr	r2, [pc, #108]	; (800704c <HAL_DMA_Abort+0x478>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d009      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <HAL_DMA_Abort+0x47c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_DMA_Abort+0x422>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_DMA_Abort+0x480>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <HAL_DMA_Abort+0x426>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <HAL_DMA_Abort+0x428>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02b      	beq.n	8007058 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007004:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	223f      	movs	r2, #63	; 0x3f
 8007010:	409a      	lsls	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
 8007016:	e02a      	b.n	800706e <HAL_DMA_Abort+0x49a>
 8007018:	40020010 	.word	0x40020010
 800701c:	40020028 	.word	0x40020028
 8007020:	40020040 	.word	0x40020040
 8007024:	40020058 	.word	0x40020058
 8007028:	40020070 	.word	0x40020070
 800702c:	40020088 	.word	0x40020088
 8007030:	400200a0 	.word	0x400200a0
 8007034:	400200b8 	.word	0x400200b8
 8007038:	40020410 	.word	0x40020410
 800703c:	40020428 	.word	0x40020428
 8007040:	40020440 	.word	0x40020440
 8007044:	40020458 	.word	0x40020458
 8007048:	40020470 	.word	0x40020470
 800704c:	40020488 	.word	0x40020488
 8007050:	400204a0 	.word	0x400204a0
 8007054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2201      	movs	r2, #1
 8007068:	409a      	lsls	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4f      	ldr	r2, [pc, #316]	; (80071b0 <HAL_DMA_Abort+0x5dc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d072      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a4d      	ldr	r2, [pc, #308]	; (80071b4 <HAL_DMA_Abort+0x5e0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d06d      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4c      	ldr	r2, [pc, #304]	; (80071b8 <HAL_DMA_Abort+0x5e4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d068      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a4a      	ldr	r2, [pc, #296]	; (80071bc <HAL_DMA_Abort+0x5e8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d063      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a49      	ldr	r2, [pc, #292]	; (80071c0 <HAL_DMA_Abort+0x5ec>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d05e      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a47      	ldr	r2, [pc, #284]	; (80071c4 <HAL_DMA_Abort+0x5f0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d059      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a46      	ldr	r2, [pc, #280]	; (80071c8 <HAL_DMA_Abort+0x5f4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d054      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a44      	ldr	r2, [pc, #272]	; (80071cc <HAL_DMA_Abort+0x5f8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d04f      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a43      	ldr	r2, [pc, #268]	; (80071d0 <HAL_DMA_Abort+0x5fc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d04a      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <HAL_DMA_Abort+0x600>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d045      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a40      	ldr	r2, [pc, #256]	; (80071d8 <HAL_DMA_Abort+0x604>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d040      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <HAL_DMA_Abort+0x608>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d03b      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3d      	ldr	r2, [pc, #244]	; (80071e0 <HAL_DMA_Abort+0x60c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d036      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <HAL_DMA_Abort+0x610>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d031      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a3a      	ldr	r2, [pc, #232]	; (80071e8 <HAL_DMA_Abort+0x614>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d02c      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a38      	ldr	r2, [pc, #224]	; (80071ec <HAL_DMA_Abort+0x618>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d027      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a37      	ldr	r2, [pc, #220]	; (80071f0 <HAL_DMA_Abort+0x61c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d022      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a35      	ldr	r2, [pc, #212]	; (80071f4 <HAL_DMA_Abort+0x620>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a34      	ldr	r2, [pc, #208]	; (80071f8 <HAL_DMA_Abort+0x624>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d018      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a32      	ldr	r2, [pc, #200]	; (80071fc <HAL_DMA_Abort+0x628>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a31      	ldr	r2, [pc, #196]	; (8007200 <HAL_DMA_Abort+0x62c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <HAL_DMA_Abort+0x630>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2e      	ldr	r2, [pc, #184]	; (8007208 <HAL_DMA_Abort+0x634>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_DMA_Abort+0x58a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2c      	ldr	r2, [pc, #176]	; (800720c <HAL_DMA_Abort+0x638>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <HAL_DMA_Abort+0x58e>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_DMA_Abort+0x590>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d015      	beq.n	8007194 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007170:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00c      	beq.n	8007194 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007188:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007192:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40020010 	.word	0x40020010
 80071b4:	40020028 	.word	0x40020028
 80071b8:	40020040 	.word	0x40020040
 80071bc:	40020058 	.word	0x40020058
 80071c0:	40020070 	.word	0x40020070
 80071c4:	40020088 	.word	0x40020088
 80071c8:	400200a0 	.word	0x400200a0
 80071cc:	400200b8 	.word	0x400200b8
 80071d0:	40020410 	.word	0x40020410
 80071d4:	40020428 	.word	0x40020428
 80071d8:	40020440 	.word	0x40020440
 80071dc:	40020458 	.word	0x40020458
 80071e0:	40020470 	.word	0x40020470
 80071e4:	40020488 	.word	0x40020488
 80071e8:	400204a0 	.word	0x400204a0
 80071ec:	400204b8 	.word	0x400204b8
 80071f0:	58025408 	.word	0x58025408
 80071f4:	5802541c 	.word	0x5802541c
 80071f8:	58025430 	.word	0x58025430
 80071fc:	58025444 	.word	0x58025444
 8007200:	58025458 	.word	0x58025458
 8007204:	5802546c 	.word	0x5802546c
 8007208:	58025480 	.word	0x58025480
 800720c:	58025494 	.word	0x58025494

08007210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e237      	b.n	8007692 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d004      	beq.n	8007238 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e22c      	b.n	8007692 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5c      	ldr	r2, [pc, #368]	; (80073b0 <HAL_DMA_Abort_IT+0x1a0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d04a      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a5b      	ldr	r2, [pc, #364]	; (80073b4 <HAL_DMA_Abort_IT+0x1a4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d045      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a59      	ldr	r2, [pc, #356]	; (80073b8 <HAL_DMA_Abort_IT+0x1a8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d040      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a58      	ldr	r2, [pc, #352]	; (80073bc <HAL_DMA_Abort_IT+0x1ac>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d03b      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a56      	ldr	r2, [pc, #344]	; (80073c0 <HAL_DMA_Abort_IT+0x1b0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d036      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a55      	ldr	r2, [pc, #340]	; (80073c4 <HAL_DMA_Abort_IT+0x1b4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d031      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a53      	ldr	r2, [pc, #332]	; (80073c8 <HAL_DMA_Abort_IT+0x1b8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d02c      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a52      	ldr	r2, [pc, #328]	; (80073cc <HAL_DMA_Abort_IT+0x1bc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d027      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a50      	ldr	r2, [pc, #320]	; (80073d0 <HAL_DMA_Abort_IT+0x1c0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d022      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a4f      	ldr	r2, [pc, #316]	; (80073d4 <HAL_DMA_Abort_IT+0x1c4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d01d      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a4d      	ldr	r2, [pc, #308]	; (80073d8 <HAL_DMA_Abort_IT+0x1c8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d018      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4c      	ldr	r2, [pc, #304]	; (80073dc <HAL_DMA_Abort_IT+0x1cc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a4a      	ldr	r2, [pc, #296]	; (80073e0 <HAL_DMA_Abort_IT+0x1d0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00e      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a49      	ldr	r2, [pc, #292]	; (80073e4 <HAL_DMA_Abort_IT+0x1d4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d009      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a47      	ldr	r2, [pc, #284]	; (80073e8 <HAL_DMA_Abort_IT+0x1d8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_DMA_Abort_IT+0xc8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a46      	ldr	r2, [pc, #280]	; (80073ec <HAL_DMA_Abort_IT+0x1dc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <HAL_DMA_Abort_IT+0xcc>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <HAL_DMA_Abort_IT+0xce>
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8086 	beq.w	80073f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2f      	ldr	r2, [pc, #188]	; (80073b0 <HAL_DMA_Abort_IT+0x1a0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d04a      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2e      	ldr	r2, [pc, #184]	; (80073b4 <HAL_DMA_Abort_IT+0x1a4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d045      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2c      	ldr	r2, [pc, #176]	; (80073b8 <HAL_DMA_Abort_IT+0x1a8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d040      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2b      	ldr	r2, [pc, #172]	; (80073bc <HAL_DMA_Abort_IT+0x1ac>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d03b      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <HAL_DMA_Abort_IT+0x1b0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d036      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <HAL_DMA_Abort_IT+0x1b4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d031      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <HAL_DMA_Abort_IT+0x1b8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d02c      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a25      	ldr	r2, [pc, #148]	; (80073cc <HAL_DMA_Abort_IT+0x1bc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d027      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a23      	ldr	r2, [pc, #140]	; (80073d0 <HAL_DMA_Abort_IT+0x1c0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d022      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <HAL_DMA_Abort_IT+0x1c4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d01d      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <HAL_DMA_Abort_IT+0x1c8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <HAL_DMA_Abort_IT+0x1cc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <HAL_DMA_Abort_IT+0x1d0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <HAL_DMA_Abort_IT+0x1d4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <HAL_DMA_Abort_IT+0x1d8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_DMA_Abort_IT+0x17c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a19      	ldr	r2, [pc, #100]	; (80073ec <HAL_DMA_Abort_IT+0x1dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <HAL_DMA_Abort_IT+0x18e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e178      	b.n	8007690 <HAL_DMA_Abort_IT+0x480>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e16f      	b.n	8007690 <HAL_DMA_Abort_IT+0x480>
 80073b0:	40020010 	.word	0x40020010
 80073b4:	40020028 	.word	0x40020028
 80073b8:	40020040 	.word	0x40020040
 80073bc:	40020058 	.word	0x40020058
 80073c0:	40020070 	.word	0x40020070
 80073c4:	40020088 	.word	0x40020088
 80073c8:	400200a0 	.word	0x400200a0
 80073cc:	400200b8 	.word	0x400200b8
 80073d0:	40020410 	.word	0x40020410
 80073d4:	40020428 	.word	0x40020428
 80073d8:	40020440 	.word	0x40020440
 80073dc:	40020458 	.word	0x40020458
 80073e0:	40020470 	.word	0x40020470
 80073e4:	40020488 	.word	0x40020488
 80073e8:	400204a0 	.word	0x400204a0
 80073ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 020e 	bic.w	r2, r2, #14
 80073fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a6c      	ldr	r2, [pc, #432]	; (80075b8 <HAL_DMA_Abort_IT+0x3a8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d04a      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a6b      	ldr	r2, [pc, #428]	; (80075bc <HAL_DMA_Abort_IT+0x3ac>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d045      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a69      	ldr	r2, [pc, #420]	; (80075c0 <HAL_DMA_Abort_IT+0x3b0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d040      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a68      	ldr	r2, [pc, #416]	; (80075c4 <HAL_DMA_Abort_IT+0x3b4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d03b      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a66      	ldr	r2, [pc, #408]	; (80075c8 <HAL_DMA_Abort_IT+0x3b8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d036      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a65      	ldr	r2, [pc, #404]	; (80075cc <HAL_DMA_Abort_IT+0x3bc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d031      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a63      	ldr	r2, [pc, #396]	; (80075d0 <HAL_DMA_Abort_IT+0x3c0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d02c      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a62      	ldr	r2, [pc, #392]	; (80075d4 <HAL_DMA_Abort_IT+0x3c4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d027      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a60      	ldr	r2, [pc, #384]	; (80075d8 <HAL_DMA_Abort_IT+0x3c8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d022      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a5f      	ldr	r2, [pc, #380]	; (80075dc <HAL_DMA_Abort_IT+0x3cc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d01d      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a5d      	ldr	r2, [pc, #372]	; (80075e0 <HAL_DMA_Abort_IT+0x3d0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a5c      	ldr	r2, [pc, #368]	; (80075e4 <HAL_DMA_Abort_IT+0x3d4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a5a      	ldr	r2, [pc, #360]	; (80075e8 <HAL_DMA_Abort_IT+0x3d8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a59      	ldr	r2, [pc, #356]	; (80075ec <HAL_DMA_Abort_IT+0x3dc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a57      	ldr	r2, [pc, #348]	; (80075f0 <HAL_DMA_Abort_IT+0x3e0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x290>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a56      	ldr	r2, [pc, #344]	; (80075f4 <HAL_DMA_Abort_IT+0x3e4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <HAL_DMA_Abort_IT+0x2a2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e007      	b.n	80074c2 <HAL_DMA_Abort_IT+0x2b2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0201 	bic.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a3c      	ldr	r2, [pc, #240]	; (80075b8 <HAL_DMA_Abort_IT+0x3a8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d072      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a3a      	ldr	r2, [pc, #232]	; (80075bc <HAL_DMA_Abort_IT+0x3ac>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d06d      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a39      	ldr	r2, [pc, #228]	; (80075c0 <HAL_DMA_Abort_IT+0x3b0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d068      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a37      	ldr	r2, [pc, #220]	; (80075c4 <HAL_DMA_Abort_IT+0x3b4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d063      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a36      	ldr	r2, [pc, #216]	; (80075c8 <HAL_DMA_Abort_IT+0x3b8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d05e      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a34      	ldr	r2, [pc, #208]	; (80075cc <HAL_DMA_Abort_IT+0x3bc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d059      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a33      	ldr	r2, [pc, #204]	; (80075d0 <HAL_DMA_Abort_IT+0x3c0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d054      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a31      	ldr	r2, [pc, #196]	; (80075d4 <HAL_DMA_Abort_IT+0x3c4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d04f      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a30      	ldr	r2, [pc, #192]	; (80075d8 <HAL_DMA_Abort_IT+0x3c8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d04a      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2e      	ldr	r2, [pc, #184]	; (80075dc <HAL_DMA_Abort_IT+0x3cc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d045      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a2d      	ldr	r2, [pc, #180]	; (80075e0 <HAL_DMA_Abort_IT+0x3d0>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d040      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <HAL_DMA_Abort_IT+0x3d4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d03b      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <HAL_DMA_Abort_IT+0x3d8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d036      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a28      	ldr	r2, [pc, #160]	; (80075ec <HAL_DMA_Abort_IT+0x3dc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d031      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <HAL_DMA_Abort_IT+0x3e0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d02c      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a25      	ldr	r2, [pc, #148]	; (80075f4 <HAL_DMA_Abort_IT+0x3e4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d027      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <HAL_DMA_Abort_IT+0x3e8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d022      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a22      	ldr	r2, [pc, #136]	; (80075fc <HAL_DMA_Abort_IT+0x3ec>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01d      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_DMA_Abort_IT+0x3f0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <HAL_DMA_Abort_IT+0x3f4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_DMA_Abort_IT+0x3f8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1c      	ldr	r2, [pc, #112]	; (800760c <HAL_DMA_Abort_IT+0x3fc>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_DMA_Abort_IT+0x400>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_DMA_Abort_IT+0x3a2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a19      	ldr	r2, [pc, #100]	; (8007614 <HAL_DMA_Abort_IT+0x404>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d132      	bne.n	8007618 <HAL_DMA_Abort_IT+0x408>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e031      	b.n	800761a <HAL_DMA_Abort_IT+0x40a>
 80075b6:	bf00      	nop
 80075b8:	40020010 	.word	0x40020010
 80075bc:	40020028 	.word	0x40020028
 80075c0:	40020040 	.word	0x40020040
 80075c4:	40020058 	.word	0x40020058
 80075c8:	40020070 	.word	0x40020070
 80075cc:	40020088 	.word	0x40020088
 80075d0:	400200a0 	.word	0x400200a0
 80075d4:	400200b8 	.word	0x400200b8
 80075d8:	40020410 	.word	0x40020410
 80075dc:	40020428 	.word	0x40020428
 80075e0:	40020440 	.word	0x40020440
 80075e4:	40020458 	.word	0x40020458
 80075e8:	40020470 	.word	0x40020470
 80075ec:	40020488 	.word	0x40020488
 80075f0:	400204a0 	.word	0x400204a0
 80075f4:	400204b8 	.word	0x400204b8
 80075f8:	58025408 	.word	0x58025408
 80075fc:	5802541c 	.word	0x5802541c
 8007600:	58025430 	.word	0x58025430
 8007604:	58025444 	.word	0x58025444
 8007608:	58025458 	.word	0x58025458
 800760c:	5802546c 	.word	0x5802546c
 8007610:	58025480 	.word	0x58025480
 8007614:	58025494 	.word	0x58025494
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d028      	beq.n	8007670 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800762c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	2201      	movs	r2, #1
 800763e:	409a      	lsls	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800764c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00c      	beq.n	8007670 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007664:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800766e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop

0800769c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076a8:	4b67      	ldr	r3, [pc, #412]	; (8007848 <HAL_DMA_IRQHandler+0x1ac>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a67      	ldr	r2, [pc, #412]	; (800784c <HAL_DMA_IRQHandler+0x1b0>)
 80076ae:	fba2 2303 	umull	r2, r3, r2, r3
 80076b2:	0a9b      	lsrs	r3, r3, #10
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a5f      	ldr	r2, [pc, #380]	; (8007850 <HAL_DMA_IRQHandler+0x1b4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d04a      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a5d      	ldr	r2, [pc, #372]	; (8007854 <HAL_DMA_IRQHandler+0x1b8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d045      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a5c      	ldr	r2, [pc, #368]	; (8007858 <HAL_DMA_IRQHandler+0x1bc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d040      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5a      	ldr	r2, [pc, #360]	; (800785c <HAL_DMA_IRQHandler+0x1c0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d03b      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a59      	ldr	r2, [pc, #356]	; (8007860 <HAL_DMA_IRQHandler+0x1c4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d036      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a57      	ldr	r2, [pc, #348]	; (8007864 <HAL_DMA_IRQHandler+0x1c8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d031      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a56      	ldr	r2, [pc, #344]	; (8007868 <HAL_DMA_IRQHandler+0x1cc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d02c      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a54      	ldr	r2, [pc, #336]	; (800786c <HAL_DMA_IRQHandler+0x1d0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d027      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a53      	ldr	r2, [pc, #332]	; (8007870 <HAL_DMA_IRQHandler+0x1d4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d022      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a51      	ldr	r2, [pc, #324]	; (8007874 <HAL_DMA_IRQHandler+0x1d8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d01d      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a50      	ldr	r2, [pc, #320]	; (8007878 <HAL_DMA_IRQHandler+0x1dc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d018      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a4e      	ldr	r2, [pc, #312]	; (800787c <HAL_DMA_IRQHandler+0x1e0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4d      	ldr	r2, [pc, #308]	; (8007880 <HAL_DMA_IRQHandler+0x1e4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00e      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a4b      	ldr	r2, [pc, #300]	; (8007884 <HAL_DMA_IRQHandler+0x1e8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d009      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a4a      	ldr	r2, [pc, #296]	; (8007888 <HAL_DMA_IRQHandler+0x1ec>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d004      	beq.n	800776e <HAL_DMA_IRQHandler+0xd2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a48      	ldr	r2, [pc, #288]	; (800788c <HAL_DMA_IRQHandler+0x1f0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <HAL_DMA_IRQHandler+0xd6>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <HAL_DMA_IRQHandler+0xd8>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 842b 	beq.w	8007fd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2208      	movs	r2, #8
 8007784:	409a      	lsls	r2, r3
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	4013      	ands	r3, r2
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80a2 	beq.w	80078d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a2e      	ldr	r2, [pc, #184]	; (8007850 <HAL_DMA_IRQHandler+0x1b4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d04a      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a2d      	ldr	r2, [pc, #180]	; (8007854 <HAL_DMA_IRQHandler+0x1b8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d045      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a2b      	ldr	r2, [pc, #172]	; (8007858 <HAL_DMA_IRQHandler+0x1bc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d040      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2a      	ldr	r2, [pc, #168]	; (800785c <HAL_DMA_IRQHandler+0x1c0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d03b      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a28      	ldr	r2, [pc, #160]	; (8007860 <HAL_DMA_IRQHandler+0x1c4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d036      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a27      	ldr	r2, [pc, #156]	; (8007864 <HAL_DMA_IRQHandler+0x1c8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d031      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a25      	ldr	r2, [pc, #148]	; (8007868 <HAL_DMA_IRQHandler+0x1cc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d02c      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a24      	ldr	r2, [pc, #144]	; (800786c <HAL_DMA_IRQHandler+0x1d0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d027      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a22      	ldr	r2, [pc, #136]	; (8007870 <HAL_DMA_IRQHandler+0x1d4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a21      	ldr	r2, [pc, #132]	; (8007874 <HAL_DMA_IRQHandler+0x1d8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <HAL_DMA_IRQHandler+0x1dc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	; (800787c <HAL_DMA_IRQHandler+0x1e0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <HAL_DMA_IRQHandler+0x1e4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <HAL_DMA_IRQHandler+0x1e8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <HAL_DMA_IRQHandler+0x1ec>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_DMA_IRQHandler+0x194>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_DMA_IRQHandler+0x1f0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d12f      	bne.n	8007890 <HAL_DMA_IRQHandler+0x1f4>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b00      	cmp	r3, #0
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	e02e      	b.n	80078a4 <HAL_DMA_IRQHandler+0x208>
 8007846:	bf00      	nop
 8007848:	24000090 	.word	0x24000090
 800784c:	1b4e81b5 	.word	0x1b4e81b5
 8007850:	40020010 	.word	0x40020010
 8007854:	40020028 	.word	0x40020028
 8007858:	40020040 	.word	0x40020040
 800785c:	40020058 	.word	0x40020058
 8007860:	40020070 	.word	0x40020070
 8007864:	40020088 	.word	0x40020088
 8007868:	400200a0 	.word	0x400200a0
 800786c:	400200b8 	.word	0x400200b8
 8007870:	40020410 	.word	0x40020410
 8007874:	40020428 	.word	0x40020428
 8007878:	40020440 	.word	0x40020440
 800787c:	40020458 	.word	0x40020458
 8007880:	40020470 	.word	0x40020470
 8007884:	40020488 	.word	0x40020488
 8007888:	400204a0 	.word	0x400204a0
 800788c:	400204b8 	.word	0x400204b8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	bf14      	ite	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2300      	moveq	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d015      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0204 	bic.w	r2, r2, #4
 80078b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2208      	movs	r2, #8
 80078c2:	409a      	lsls	r2, r3
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	f043 0201 	orr.w	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a69      	ldr	r2, [pc, #420]	; (8007a94 <HAL_DMA_IRQHandler+0x3f8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d04a      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a67      	ldr	r2, [pc, #412]	; (8007a98 <HAL_DMA_IRQHandler+0x3fc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d045      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a66      	ldr	r2, [pc, #408]	; (8007a9c <HAL_DMA_IRQHandler+0x400>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d040      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a64      	ldr	r2, [pc, #400]	; (8007aa0 <HAL_DMA_IRQHandler+0x404>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d03b      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a63      	ldr	r2, [pc, #396]	; (8007aa4 <HAL_DMA_IRQHandler+0x408>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d036      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a61      	ldr	r2, [pc, #388]	; (8007aa8 <HAL_DMA_IRQHandler+0x40c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d031      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a60      	ldr	r2, [pc, #384]	; (8007aac <HAL_DMA_IRQHandler+0x410>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d02c      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a5e      	ldr	r2, [pc, #376]	; (8007ab0 <HAL_DMA_IRQHandler+0x414>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d027      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a5d      	ldr	r2, [pc, #372]	; (8007ab4 <HAL_DMA_IRQHandler+0x418>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d022      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5b      	ldr	r2, [pc, #364]	; (8007ab8 <HAL_DMA_IRQHandler+0x41c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d01d      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a5a      	ldr	r2, [pc, #360]	; (8007abc <HAL_DMA_IRQHandler+0x420>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d018      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a58      	ldr	r2, [pc, #352]	; (8007ac0 <HAL_DMA_IRQHandler+0x424>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a57      	ldr	r2, [pc, #348]	; (8007ac4 <HAL_DMA_IRQHandler+0x428>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00e      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a55      	ldr	r2, [pc, #340]	; (8007ac8 <HAL_DMA_IRQHandler+0x42c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a54      	ldr	r2, [pc, #336]	; (8007acc <HAL_DMA_IRQHandler+0x430>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_DMA_IRQHandler+0x2ee>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a52      	ldr	r2, [pc, #328]	; (8007ad0 <HAL_DMA_IRQHandler+0x434>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d10a      	bne.n	80079a0 <HAL_DMA_IRQHandler+0x304>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf14      	ite	ne
 8007998:	2301      	movne	r3, #1
 800799a:	2300      	moveq	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	e003      	b.n	80079a8 <HAL_DMA_IRQHandler+0x30c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00d      	beq.n	80079c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2201      	movs	r2, #1
 80079b6:	409a      	lsls	r2, r3
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f043 0202 	orr.w	r2, r3, #2
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2204      	movs	r2, #4
 80079d2:	409a      	lsls	r2, r3
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 808f 	beq.w	8007afc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <HAL_DMA_IRQHandler+0x3f8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d04a      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <HAL_DMA_IRQHandler+0x3fc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d045      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <HAL_DMA_IRQHandler+0x400>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d040      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a27      	ldr	r2, [pc, #156]	; (8007aa0 <HAL_DMA_IRQHandler+0x404>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d03b      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <HAL_DMA_IRQHandler+0x408>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d036      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a24      	ldr	r2, [pc, #144]	; (8007aa8 <HAL_DMA_IRQHandler+0x40c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d031      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a23      	ldr	r2, [pc, #140]	; (8007aac <HAL_DMA_IRQHandler+0x410>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d02c      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <HAL_DMA_IRQHandler+0x414>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d027      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a20      	ldr	r2, [pc, #128]	; (8007ab4 <HAL_DMA_IRQHandler+0x418>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d022      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <HAL_DMA_IRQHandler+0x41c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_DMA_IRQHandler+0x420>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_DMA_IRQHandler+0x424>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <HAL_DMA_IRQHandler+0x428>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_DMA_IRQHandler+0x42c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_DMA_IRQHandler+0x430>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x3e2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <HAL_DMA_IRQHandler+0x434>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d12a      	bne.n	8007ad4 <HAL_DMA_IRQHandler+0x438>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e023      	b.n	8007adc <HAL_DMA_IRQHandler+0x440>
 8007a94:	40020010 	.word	0x40020010
 8007a98:	40020028 	.word	0x40020028
 8007a9c:	40020040 	.word	0x40020040
 8007aa0:	40020058 	.word	0x40020058
 8007aa4:	40020070 	.word	0x40020070
 8007aa8:	40020088 	.word	0x40020088
 8007aac:	400200a0 	.word	0x400200a0
 8007ab0:	400200b8 	.word	0x400200b8
 8007ab4:	40020410 	.word	0x40020410
 8007ab8:	40020428 	.word	0x40020428
 8007abc:	40020440 	.word	0x40020440
 8007ac0:	40020458 	.word	0x40020458
 8007ac4:	40020470 	.word	0x40020470
 8007ac8:	40020488 	.word	0x40020488
 8007acc:	400204a0 	.word	0x400204a0
 8007ad0:	400204b8 	.word	0x400204b8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2204      	movs	r2, #4
 8007aea:	409a      	lsls	r2, r3
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f043 0204 	orr.w	r2, r3, #4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2210      	movs	r2, #16
 8007b06:	409a      	lsls	r2, r3
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80a6 	beq.w	8007c5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a85      	ldr	r2, [pc, #532]	; (8007d2c <HAL_DMA_IRQHandler+0x690>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d04a      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a83      	ldr	r2, [pc, #524]	; (8007d30 <HAL_DMA_IRQHandler+0x694>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d045      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a82      	ldr	r2, [pc, #520]	; (8007d34 <HAL_DMA_IRQHandler+0x698>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d040      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a80      	ldr	r2, [pc, #512]	; (8007d38 <HAL_DMA_IRQHandler+0x69c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d03b      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a7f      	ldr	r2, [pc, #508]	; (8007d3c <HAL_DMA_IRQHandler+0x6a0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d036      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a7d      	ldr	r2, [pc, #500]	; (8007d40 <HAL_DMA_IRQHandler+0x6a4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d031      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a7c      	ldr	r2, [pc, #496]	; (8007d44 <HAL_DMA_IRQHandler+0x6a8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d02c      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a7a      	ldr	r2, [pc, #488]	; (8007d48 <HAL_DMA_IRQHandler+0x6ac>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d027      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a79      	ldr	r2, [pc, #484]	; (8007d4c <HAL_DMA_IRQHandler+0x6b0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a77      	ldr	r2, [pc, #476]	; (8007d50 <HAL_DMA_IRQHandler+0x6b4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a76      	ldr	r2, [pc, #472]	; (8007d54 <HAL_DMA_IRQHandler+0x6b8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a74      	ldr	r2, [pc, #464]	; (8007d58 <HAL_DMA_IRQHandler+0x6bc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a73      	ldr	r2, [pc, #460]	; (8007d5c <HAL_DMA_IRQHandler+0x6c0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a71      	ldr	r2, [pc, #452]	; (8007d60 <HAL_DMA_IRQHandler+0x6c4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a70      	ldr	r2, [pc, #448]	; (8007d64 <HAL_DMA_IRQHandler+0x6c8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x516>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a6e      	ldr	r2, [pc, #440]	; (8007d68 <HAL_DMA_IRQHandler+0x6cc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10a      	bne.n	8007bc8 <HAL_DMA_IRQHandler+0x52c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e009      	b.n	8007bdc <HAL_DMA_IRQHandler+0x540>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d03e      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2210      	movs	r2, #16
 8007bea:	409a      	lsls	r2, r3
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d018      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d108      	bne.n	8007c1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d024      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
 8007c1c:	e01f      	b.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01b      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
 8007c2e:	e016      	b.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0208 	bic.w	r2, r2, #8
 8007c4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2220      	movs	r2, #32
 8007c68:	409a      	lsls	r2, r3
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8110 	beq.w	8007e94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a2c      	ldr	r2, [pc, #176]	; (8007d2c <HAL_DMA_IRQHandler+0x690>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d04a      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2b      	ldr	r2, [pc, #172]	; (8007d30 <HAL_DMA_IRQHandler+0x694>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d045      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <HAL_DMA_IRQHandler+0x698>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d040      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a28      	ldr	r2, [pc, #160]	; (8007d38 <HAL_DMA_IRQHandler+0x69c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d03b      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <HAL_DMA_IRQHandler+0x6a0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d036      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a25      	ldr	r2, [pc, #148]	; (8007d40 <HAL_DMA_IRQHandler+0x6a4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d031      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <HAL_DMA_IRQHandler+0x6a8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d02c      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <HAL_DMA_IRQHandler+0x6ac>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d027      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_DMA_IRQHandler+0x6b0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d022      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_DMA_IRQHandler+0x6b4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d01d      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_DMA_IRQHandler+0x6b8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <HAL_DMA_IRQHandler+0x6bc>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	; (8007d5c <HAL_DMA_IRQHandler+0x6c0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <HAL_DMA_IRQHandler+0x6c4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <HAL_DMA_IRQHandler+0x6c8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_DMA_IRQHandler+0x678>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <HAL_DMA_IRQHandler+0x6cc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d12b      	bne.n	8007d6c <HAL_DMA_IRQHandler+0x6d0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bf14      	ite	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	2300      	moveq	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e02a      	b.n	8007d80 <HAL_DMA_IRQHandler+0x6e4>
 8007d2a:	bf00      	nop
 8007d2c:	40020010 	.word	0x40020010
 8007d30:	40020028 	.word	0x40020028
 8007d34:	40020040 	.word	0x40020040
 8007d38:	40020058 	.word	0x40020058
 8007d3c:	40020070 	.word	0x40020070
 8007d40:	40020088 	.word	0x40020088
 8007d44:	400200a0 	.word	0x400200a0
 8007d48:	400200b8 	.word	0x400200b8
 8007d4c:	40020410 	.word	0x40020410
 8007d50:	40020428 	.word	0x40020428
 8007d54:	40020440 	.word	0x40020440
 8007d58:	40020458 	.word	0x40020458
 8007d5c:	40020470 	.word	0x40020470
 8007d60:	40020488 	.word	0x40020488
 8007d64:	400204a0 	.word	0x400204a0
 8007d68:	400204b8 	.word	0x400204b8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	2300      	moveq	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8087 	beq.w	8007e94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	2220      	movs	r2, #32
 8007d90:	409a      	lsls	r2, r3
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d139      	bne.n	8007e16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0216 	bic.w	r2, r2, #22
 8007db0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <HAL_DMA_IRQHandler+0x736>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0208 	bic.w	r2, r2, #8
 8007de0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	223f      	movs	r2, #63	; 0x3f
 8007dec:	409a      	lsls	r2, r3
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 834a 	beq.w	80084a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
          }
          return;
 8007e14:	e344      	b.n	80084a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d018      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d108      	bne.n	8007e44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02c      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
 8007e42:	e027      	b.n	8007e94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d023      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
 8007e54:	e01e      	b.n	8007e94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10f      	bne.n	8007e84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0210 	bic.w	r2, r2, #16
 8007e72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8306 	beq.w	80084aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8088 	beq.w	8007fbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7a      	ldr	r2, [pc, #488]	; (80080a4 <HAL_DMA_IRQHandler+0xa08>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d04a      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a79      	ldr	r2, [pc, #484]	; (80080a8 <HAL_DMA_IRQHandler+0xa0c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d045      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a77      	ldr	r2, [pc, #476]	; (80080ac <HAL_DMA_IRQHandler+0xa10>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d040      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a76      	ldr	r2, [pc, #472]	; (80080b0 <HAL_DMA_IRQHandler+0xa14>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d03b      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a74      	ldr	r2, [pc, #464]	; (80080b4 <HAL_DMA_IRQHandler+0xa18>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d036      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <HAL_DMA_IRQHandler+0xa1c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d031      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a71      	ldr	r2, [pc, #452]	; (80080bc <HAL_DMA_IRQHandler+0xa20>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d02c      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a70      	ldr	r2, [pc, #448]	; (80080c0 <HAL_DMA_IRQHandler+0xa24>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d027      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a6e      	ldr	r2, [pc, #440]	; (80080c4 <HAL_DMA_IRQHandler+0xa28>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d022      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a6d      	ldr	r2, [pc, #436]	; (80080c8 <HAL_DMA_IRQHandler+0xa2c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d01d      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6b      	ldr	r2, [pc, #428]	; (80080cc <HAL_DMA_IRQHandler+0xa30>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d018      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6a      	ldr	r2, [pc, #424]	; (80080d0 <HAL_DMA_IRQHandler+0xa34>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a68      	ldr	r2, [pc, #416]	; (80080d4 <HAL_DMA_IRQHandler+0xa38>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00e      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a67      	ldr	r2, [pc, #412]	; (80080d8 <HAL_DMA_IRQHandler+0xa3c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d009      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a65      	ldr	r2, [pc, #404]	; (80080dc <HAL_DMA_IRQHandler+0xa40>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x8b8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a64      	ldr	r2, [pc, #400]	; (80080e0 <HAL_DMA_IRQHandler+0xa44>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d108      	bne.n	8007f66 <HAL_DMA_IRQHandler+0x8ca>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e007      	b.n	8007f76 <HAL_DMA_IRQHandler+0x8da>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d307      	bcc.n	8007f92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f2      	bne.n	8007f76 <HAL_DMA_IRQHandler+0x8da>
 8007f90:	e000      	b.n	8007f94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007f92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007faa:	e003      	b.n	8007fb4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8272 	beq.w	80084aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	e26c      	b.n	80084aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a43      	ldr	r2, [pc, #268]	; (80080e4 <HAL_DMA_IRQHandler+0xa48>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a42      	ldr	r2, [pc, #264]	; (80080e8 <HAL_DMA_IRQHandler+0xa4c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01d      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a40      	ldr	r2, [pc, #256]	; (80080ec <HAL_DMA_IRQHandler+0xa50>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a3f      	ldr	r2, [pc, #252]	; (80080f0 <HAL_DMA_IRQHandler+0xa54>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3d      	ldr	r2, [pc, #244]	; (80080f4 <HAL_DMA_IRQHandler+0xa58>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3c      	ldr	r2, [pc, #240]	; (80080f8 <HAL_DMA_IRQHandler+0xa5c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a3a      	ldr	r2, [pc, #232]	; (80080fc <HAL_DMA_IRQHandler+0xa60>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_DMA_IRQHandler+0x984>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a39      	ldr	r2, [pc, #228]	; (8008100 <HAL_DMA_IRQHandler+0xa64>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d101      	bne.n	8008024 <HAL_DMA_IRQHandler+0x988>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <HAL_DMA_IRQHandler+0x98a>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 823f 	beq.w	80084aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2204      	movs	r2, #4
 800803e:	409a      	lsls	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80cd 	beq.w	80081e4 <HAL_DMA_IRQHandler+0xb48>
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80c7 	beq.w	80081e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2204      	movs	r2, #4
 8008060:	409a      	lsls	r2, r3
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d049      	beq.n	8008104 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8210 	beq.w	80084a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808c:	e20a      	b.n	80084a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8206 	beq.w	80084a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a0:	e200      	b.n	80084a4 <HAL_DMA_IRQHandler+0xe08>
 80080a2:	bf00      	nop
 80080a4:	40020010 	.word	0x40020010
 80080a8:	40020028 	.word	0x40020028
 80080ac:	40020040 	.word	0x40020040
 80080b0:	40020058 	.word	0x40020058
 80080b4:	40020070 	.word	0x40020070
 80080b8:	40020088 	.word	0x40020088
 80080bc:	400200a0 	.word	0x400200a0
 80080c0:	400200b8 	.word	0x400200b8
 80080c4:	40020410 	.word	0x40020410
 80080c8:	40020428 	.word	0x40020428
 80080cc:	40020440 	.word	0x40020440
 80080d0:	40020458 	.word	0x40020458
 80080d4:	40020470 	.word	0x40020470
 80080d8:	40020488 	.word	0x40020488
 80080dc:	400204a0 	.word	0x400204a0
 80080e0:	400204b8 	.word	0x400204b8
 80080e4:	58025408 	.word	0x58025408
 80080e8:	5802541c 	.word	0x5802541c
 80080ec:	58025430 	.word	0x58025430
 80080f0:	58025444 	.word	0x58025444
 80080f4:	58025458 	.word	0x58025458
 80080f8:	5802546c 	.word	0x5802546c
 80080fc:	58025480 	.word	0x58025480
 8008100:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d160      	bne.n	80081d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a7f      	ldr	r2, [pc, #508]	; (8008310 <HAL_DMA_IRQHandler+0xc74>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d04a      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a7d      	ldr	r2, [pc, #500]	; (8008314 <HAL_DMA_IRQHandler+0xc78>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d045      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a7c      	ldr	r2, [pc, #496]	; (8008318 <HAL_DMA_IRQHandler+0xc7c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d040      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a7a      	ldr	r2, [pc, #488]	; (800831c <HAL_DMA_IRQHandler+0xc80>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d03b      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a79      	ldr	r2, [pc, #484]	; (8008320 <HAL_DMA_IRQHandler+0xc84>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d036      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a77      	ldr	r2, [pc, #476]	; (8008324 <HAL_DMA_IRQHandler+0xc88>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d031      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a76      	ldr	r2, [pc, #472]	; (8008328 <HAL_DMA_IRQHandler+0xc8c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d02c      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a74      	ldr	r2, [pc, #464]	; (800832c <HAL_DMA_IRQHandler+0xc90>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d027      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a73      	ldr	r2, [pc, #460]	; (8008330 <HAL_DMA_IRQHandler+0xc94>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d022      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a71      	ldr	r2, [pc, #452]	; (8008334 <HAL_DMA_IRQHandler+0xc98>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01d      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a70      	ldr	r2, [pc, #448]	; (8008338 <HAL_DMA_IRQHandler+0xc9c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d018      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a6e      	ldr	r2, [pc, #440]	; (800833c <HAL_DMA_IRQHandler+0xca0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a6d      	ldr	r2, [pc, #436]	; (8008340 <HAL_DMA_IRQHandler+0xca4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00e      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a6b      	ldr	r2, [pc, #428]	; (8008344 <HAL_DMA_IRQHandler+0xca8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a6a      	ldr	r2, [pc, #424]	; (8008348 <HAL_DMA_IRQHandler+0xcac>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_DMA_IRQHandler+0xb12>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a68      	ldr	r2, [pc, #416]	; (800834c <HAL_DMA_IRQHandler+0xcb0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <HAL_DMA_IRQHandler+0xb24>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0208 	bic.w	r2, r2, #8
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e007      	b.n	80081d0 <HAL_DMA_IRQHandler+0xb34>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0204 	bic.w	r2, r2, #4
 80081ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8165 	beq.w	80084a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081e2:	e15f      	b.n	80084a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2202      	movs	r2, #2
 80081ee:	409a      	lsls	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 80c5 	beq.w	8008384 <HAL_DMA_IRQHandler+0xce8>
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80bf 	beq.w	8008384 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	2202      	movs	r2, #2
 8008210:	409a      	lsls	r2, r3
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 813a 	beq.w	80084a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800823c:	e134      	b.n	80084a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8130 	beq.w	80084a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008250:	e12a      	b.n	80084a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 8089 	bne.w	8008370 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a2b      	ldr	r2, [pc, #172]	; (8008310 <HAL_DMA_IRQHandler+0xc74>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d04a      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a29      	ldr	r2, [pc, #164]	; (8008314 <HAL_DMA_IRQHandler+0xc78>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d045      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a28      	ldr	r2, [pc, #160]	; (8008318 <HAL_DMA_IRQHandler+0xc7c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d040      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a26      	ldr	r2, [pc, #152]	; (800831c <HAL_DMA_IRQHandler+0xc80>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d03b      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a25      	ldr	r2, [pc, #148]	; (8008320 <HAL_DMA_IRQHandler+0xc84>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d036      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <HAL_DMA_IRQHandler+0xc88>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d031      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a22      	ldr	r2, [pc, #136]	; (8008328 <HAL_DMA_IRQHandler+0xc8c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d02c      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a20      	ldr	r2, [pc, #128]	; (800832c <HAL_DMA_IRQHandler+0xc90>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d027      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <HAL_DMA_IRQHandler+0xc94>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <HAL_DMA_IRQHandler+0xc98>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01d      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1c      	ldr	r2, [pc, #112]	; (8008338 <HAL_DMA_IRQHandler+0xc9c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1a      	ldr	r2, [pc, #104]	; (800833c <HAL_DMA_IRQHandler+0xca0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a19      	ldr	r2, [pc, #100]	; (8008340 <HAL_DMA_IRQHandler+0xca4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a17      	ldr	r2, [pc, #92]	; (8008344 <HAL_DMA_IRQHandler+0xca8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a16      	ldr	r2, [pc, #88]	; (8008348 <HAL_DMA_IRQHandler+0xcac>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_DMA_IRQHandler+0xc62>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a14      	ldr	r2, [pc, #80]	; (800834c <HAL_DMA_IRQHandler+0xcb0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d128      	bne.n	8008350 <HAL_DMA_IRQHandler+0xcb4>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0214 	bic.w	r2, r2, #20
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e027      	b.n	8008360 <HAL_DMA_IRQHandler+0xcc4>
 8008310:	40020010 	.word	0x40020010
 8008314:	40020028 	.word	0x40020028
 8008318:	40020040 	.word	0x40020040
 800831c:	40020058 	.word	0x40020058
 8008320:	40020070 	.word	0x40020070
 8008324:	40020088 	.word	0x40020088
 8008328:	400200a0 	.word	0x400200a0
 800832c:	400200b8 	.word	0x400200b8
 8008330:	40020410 	.word	0x40020410
 8008334:	40020428 	.word	0x40020428
 8008338:	40020440 	.word	0x40020440
 800833c:	40020458 	.word	0x40020458
 8008340:	40020470 	.word	0x40020470
 8008344:	40020488 	.word	0x40020488
 8008348:	400204a0 	.word	0x400204a0
 800834c:	400204b8 	.word	0x400204b8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 020a 	bic.w	r2, r2, #10
 800835e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8097 	beq.w	80084a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008382:	e091      	b.n	80084a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008388:	f003 031f 	and.w	r3, r3, #31
 800838c:	2208      	movs	r2, #8
 800838e:	409a      	lsls	r2, r3
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4013      	ands	r3, r2
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8088 	beq.w	80084aa <HAL_DMA_IRQHandler+0xe0e>
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8082 	beq.w	80084aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a41      	ldr	r2, [pc, #260]	; (80084b0 <HAL_DMA_IRQHandler+0xe14>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d04a      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a3f      	ldr	r2, [pc, #252]	; (80084b4 <HAL_DMA_IRQHandler+0xe18>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d045      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a3e      	ldr	r2, [pc, #248]	; (80084b8 <HAL_DMA_IRQHandler+0xe1c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d040      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a3c      	ldr	r2, [pc, #240]	; (80084bc <HAL_DMA_IRQHandler+0xe20>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d03b      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a3b      	ldr	r2, [pc, #236]	; (80084c0 <HAL_DMA_IRQHandler+0xe24>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d036      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a39      	ldr	r2, [pc, #228]	; (80084c4 <HAL_DMA_IRQHandler+0xe28>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d031      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a38      	ldr	r2, [pc, #224]	; (80084c8 <HAL_DMA_IRQHandler+0xe2c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d02c      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a36      	ldr	r2, [pc, #216]	; (80084cc <HAL_DMA_IRQHandler+0xe30>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d027      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a35      	ldr	r2, [pc, #212]	; (80084d0 <HAL_DMA_IRQHandler+0xe34>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d022      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a33      	ldr	r2, [pc, #204]	; (80084d4 <HAL_DMA_IRQHandler+0xe38>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01d      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_DMA_IRQHandler+0xe3c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d018      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a30      	ldr	r2, [pc, #192]	; (80084dc <HAL_DMA_IRQHandler+0xe40>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2f      	ldr	r2, [pc, #188]	; (80084e0 <HAL_DMA_IRQHandler+0xe44>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a2d      	ldr	r2, [pc, #180]	; (80084e4 <HAL_DMA_IRQHandler+0xe48>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <HAL_DMA_IRQHandler+0xe4c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <HAL_DMA_IRQHandler+0xdaa>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2a      	ldr	r2, [pc, #168]	; (80084ec <HAL_DMA_IRQHandler+0xe50>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d108      	bne.n	8008458 <HAL_DMA_IRQHandler+0xdbc>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 021c 	bic.w	r2, r2, #28
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e007      	b.n	8008468 <HAL_DMA_IRQHandler+0xdcc>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 020e 	bic.w	r2, r2, #14
 8008466:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800846c:	f003 031f 	and.w	r3, r3, #31
 8008470:	2201      	movs	r2, #1
 8008472:	409a      	lsls	r2, r3
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
 800849e:	e004      	b.n	80084aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084a0:	bf00      	nop
 80084a2:	e002      	b.n	80084aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084a4:	bf00      	nop
 80084a6:	e000      	b.n	80084aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084aa:	3728      	adds	r7, #40	; 0x28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40020010 	.word	0x40020010
 80084b4:	40020028 	.word	0x40020028
 80084b8:	40020040 	.word	0x40020040
 80084bc:	40020058 	.word	0x40020058
 80084c0:	40020070 	.word	0x40020070
 80084c4:	40020088 	.word	0x40020088
 80084c8:	400200a0 	.word	0x400200a0
 80084cc:	400200b8 	.word	0x400200b8
 80084d0:	40020410 	.word	0x40020410
 80084d4:	40020428 	.word	0x40020428
 80084d8:	40020440 	.word	0x40020440
 80084dc:	40020458 	.word	0x40020458
 80084e0:	40020470 	.word	0x40020470
 80084e4:	40020488 	.word	0x40020488
 80084e8:	400204a0 	.word	0x400204a0
 80084ec:	400204b8 	.word	0x400204b8

080084f0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a7f      	ldr	r2, [pc, #508]	; (8008724 <DMA_SetConfig+0x21c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d072      	beq.n	8008612 <DMA_SetConfig+0x10a>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a7d      	ldr	r2, [pc, #500]	; (8008728 <DMA_SetConfig+0x220>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d06d      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a7c      	ldr	r2, [pc, #496]	; (800872c <DMA_SetConfig+0x224>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d068      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7a      	ldr	r2, [pc, #488]	; (8008730 <DMA_SetConfig+0x228>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d063      	beq.n	8008612 <DMA_SetConfig+0x10a>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a79      	ldr	r2, [pc, #484]	; (8008734 <DMA_SetConfig+0x22c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d05e      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a77      	ldr	r2, [pc, #476]	; (8008738 <DMA_SetConfig+0x230>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d059      	beq.n	8008612 <DMA_SetConfig+0x10a>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a76      	ldr	r2, [pc, #472]	; (800873c <DMA_SetConfig+0x234>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d054      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a74      	ldr	r2, [pc, #464]	; (8008740 <DMA_SetConfig+0x238>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d04f      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a73      	ldr	r2, [pc, #460]	; (8008744 <DMA_SetConfig+0x23c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d04a      	beq.n	8008612 <DMA_SetConfig+0x10a>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a71      	ldr	r2, [pc, #452]	; (8008748 <DMA_SetConfig+0x240>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d045      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a70      	ldr	r2, [pc, #448]	; (800874c <DMA_SetConfig+0x244>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d040      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a6e      	ldr	r2, [pc, #440]	; (8008750 <DMA_SetConfig+0x248>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d03b      	beq.n	8008612 <DMA_SetConfig+0x10a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a6d      	ldr	r2, [pc, #436]	; (8008754 <DMA_SetConfig+0x24c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d036      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6b      	ldr	r2, [pc, #428]	; (8008758 <DMA_SetConfig+0x250>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d031      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a6a      	ldr	r2, [pc, #424]	; (800875c <DMA_SetConfig+0x254>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d02c      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a68      	ldr	r2, [pc, #416]	; (8008760 <DMA_SetConfig+0x258>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d027      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a67      	ldr	r2, [pc, #412]	; (8008764 <DMA_SetConfig+0x25c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d022      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a65      	ldr	r2, [pc, #404]	; (8008768 <DMA_SetConfig+0x260>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01d      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a64      	ldr	r2, [pc, #400]	; (800876c <DMA_SetConfig+0x264>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d018      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a62      	ldr	r2, [pc, #392]	; (8008770 <DMA_SetConfig+0x268>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a61      	ldr	r2, [pc, #388]	; (8008774 <DMA_SetConfig+0x26c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a5f      	ldr	r2, [pc, #380]	; (8008778 <DMA_SetConfig+0x270>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <DMA_SetConfig+0x10a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a5e      	ldr	r2, [pc, #376]	; (800877c <DMA_SetConfig+0x274>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <DMA_SetConfig+0x10a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a5c      	ldr	r2, [pc, #368]	; (8008780 <DMA_SetConfig+0x278>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d101      	bne.n	8008616 <DMA_SetConfig+0x10e>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <DMA_SetConfig+0x110>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00d      	beq.n	8008638 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008624:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008636:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a39      	ldr	r2, [pc, #228]	; (8008724 <DMA_SetConfig+0x21c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d04a      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a38      	ldr	r2, [pc, #224]	; (8008728 <DMA_SetConfig+0x220>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d045      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a36      	ldr	r2, [pc, #216]	; (800872c <DMA_SetConfig+0x224>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d040      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a35      	ldr	r2, [pc, #212]	; (8008730 <DMA_SetConfig+0x228>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d03b      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a33      	ldr	r2, [pc, #204]	; (8008734 <DMA_SetConfig+0x22c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d036      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a32      	ldr	r2, [pc, #200]	; (8008738 <DMA_SetConfig+0x230>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d031      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a30      	ldr	r2, [pc, #192]	; (800873c <DMA_SetConfig+0x234>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d02c      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a2f      	ldr	r2, [pc, #188]	; (8008740 <DMA_SetConfig+0x238>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d027      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a2d      	ldr	r2, [pc, #180]	; (8008744 <DMA_SetConfig+0x23c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d022      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a2c      	ldr	r2, [pc, #176]	; (8008748 <DMA_SetConfig+0x240>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d01d      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a2a      	ldr	r2, [pc, #168]	; (800874c <DMA_SetConfig+0x244>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d018      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a29      	ldr	r2, [pc, #164]	; (8008750 <DMA_SetConfig+0x248>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d013      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a27      	ldr	r2, [pc, #156]	; (8008754 <DMA_SetConfig+0x24c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00e      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a26      	ldr	r2, [pc, #152]	; (8008758 <DMA_SetConfig+0x250>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d009      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a24      	ldr	r2, [pc, #144]	; (800875c <DMA_SetConfig+0x254>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d004      	beq.n	80086d8 <DMA_SetConfig+0x1d0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a23      	ldr	r2, [pc, #140]	; (8008760 <DMA_SetConfig+0x258>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d101      	bne.n	80086dc <DMA_SetConfig+0x1d4>
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <DMA_SetConfig+0x1d6>
 80086dc:	2300      	movs	r3, #0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d059      	beq.n	8008796 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	223f      	movs	r2, #63	; 0x3f
 80086ec:	409a      	lsls	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008700:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d138      	bne.n	8008784 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008722:	e086      	b.n	8008832 <DMA_SetConfig+0x32a>
 8008724:	40020010 	.word	0x40020010
 8008728:	40020028 	.word	0x40020028
 800872c:	40020040 	.word	0x40020040
 8008730:	40020058 	.word	0x40020058
 8008734:	40020070 	.word	0x40020070
 8008738:	40020088 	.word	0x40020088
 800873c:	400200a0 	.word	0x400200a0
 8008740:	400200b8 	.word	0x400200b8
 8008744:	40020410 	.word	0x40020410
 8008748:	40020428 	.word	0x40020428
 800874c:	40020440 	.word	0x40020440
 8008750:	40020458 	.word	0x40020458
 8008754:	40020470 	.word	0x40020470
 8008758:	40020488 	.word	0x40020488
 800875c:	400204a0 	.word	0x400204a0
 8008760:	400204b8 	.word	0x400204b8
 8008764:	58025408 	.word	0x58025408
 8008768:	5802541c 	.word	0x5802541c
 800876c:	58025430 	.word	0x58025430
 8008770:	58025444 	.word	0x58025444
 8008774:	58025458 	.word	0x58025458
 8008778:	5802546c 	.word	0x5802546c
 800877c:	58025480 	.word	0x58025480
 8008780:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	60da      	str	r2, [r3, #12]
}
 8008794:	e04d      	b.n	8008832 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a29      	ldr	r2, [pc, #164]	; (8008840 <DMA_SetConfig+0x338>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d022      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a27      	ldr	r2, [pc, #156]	; (8008844 <DMA_SetConfig+0x33c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01d      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a26      	ldr	r2, [pc, #152]	; (8008848 <DMA_SetConfig+0x340>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d018      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a24      	ldr	r2, [pc, #144]	; (800884c <DMA_SetConfig+0x344>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a23      	ldr	r2, [pc, #140]	; (8008850 <DMA_SetConfig+0x348>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00e      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a21      	ldr	r2, [pc, #132]	; (8008854 <DMA_SetConfig+0x34c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d009      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a20      	ldr	r2, [pc, #128]	; (8008858 <DMA_SetConfig+0x350>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <DMA_SetConfig+0x2de>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1e      	ldr	r2, [pc, #120]	; (800885c <DMA_SetConfig+0x354>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d101      	bne.n	80087ea <DMA_SetConfig+0x2e2>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <DMA_SetConfig+0x2e4>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d020      	beq.n	8008832 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2201      	movs	r2, #1
 80087fa:	409a      	lsls	r2, r3
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d108      	bne.n	8008822 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	60da      	str	r2, [r3, #12]
}
 8008820:	e007      	b.n	8008832 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	58025408 	.word	0x58025408
 8008844:	5802541c 	.word	0x5802541c
 8008848:	58025430 	.word	0x58025430
 800884c:	58025444 	.word	0x58025444
 8008850:	58025458 	.word	0x58025458
 8008854:	5802546c 	.word	0x5802546c
 8008858:	58025480 	.word	0x58025480
 800885c:	58025494 	.word	0x58025494

08008860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a42      	ldr	r2, [pc, #264]	; (8008978 <DMA_CalcBaseAndBitshift+0x118>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d04a      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a41      	ldr	r2, [pc, #260]	; (800897c <DMA_CalcBaseAndBitshift+0x11c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d045      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3f      	ldr	r2, [pc, #252]	; (8008980 <DMA_CalcBaseAndBitshift+0x120>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d040      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a3e      	ldr	r2, [pc, #248]	; (8008984 <DMA_CalcBaseAndBitshift+0x124>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d03b      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a3c      	ldr	r2, [pc, #240]	; (8008988 <DMA_CalcBaseAndBitshift+0x128>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d036      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a3b      	ldr	r2, [pc, #236]	; (800898c <DMA_CalcBaseAndBitshift+0x12c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d031      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a39      	ldr	r2, [pc, #228]	; (8008990 <DMA_CalcBaseAndBitshift+0x130>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d02c      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a38      	ldr	r2, [pc, #224]	; (8008994 <DMA_CalcBaseAndBitshift+0x134>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d027      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a36      	ldr	r2, [pc, #216]	; (8008998 <DMA_CalcBaseAndBitshift+0x138>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d022      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a35      	ldr	r2, [pc, #212]	; (800899c <DMA_CalcBaseAndBitshift+0x13c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d01d      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a33      	ldr	r2, [pc, #204]	; (80089a0 <DMA_CalcBaseAndBitshift+0x140>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d018      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a32      	ldr	r2, [pc, #200]	; (80089a4 <DMA_CalcBaseAndBitshift+0x144>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a30      	ldr	r2, [pc, #192]	; (80089a8 <DMA_CalcBaseAndBitshift+0x148>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00e      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2f      	ldr	r2, [pc, #188]	; (80089ac <DMA_CalcBaseAndBitshift+0x14c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d009      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2d      	ldr	r2, [pc, #180]	; (80089b0 <DMA_CalcBaseAndBitshift+0x150>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d004      	beq.n	8008908 <DMA_CalcBaseAndBitshift+0xa8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <DMA_CalcBaseAndBitshift+0x154>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d101      	bne.n	800890c <DMA_CalcBaseAndBitshift+0xac>
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <DMA_CalcBaseAndBitshift+0xae>
 800890c:	2300      	movs	r3, #0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d024      	beq.n	800895c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	3b10      	subs	r3, #16
 800891a:	4a27      	ldr	r2, [pc, #156]	; (80089b8 <DMA_CalcBaseAndBitshift+0x158>)
 800891c:	fba2 2303 	umull	r2, r3, r2, r3
 8008920:	091b      	lsrs	r3, r3, #4
 8008922:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	4a24      	ldr	r2, [pc, #144]	; (80089bc <DMA_CalcBaseAndBitshift+0x15c>)
 800892c:	5cd3      	ldrb	r3, [r2, r3]
 800892e:	461a      	mov	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d908      	bls.n	800894c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <DMA_CalcBaseAndBitshift+0x160>)
 8008942:	4013      	ands	r3, r2
 8008944:	1d1a      	adds	r2, r3, #4
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	659a      	str	r2, [r3, #88]	; 0x58
 800894a:	e00d      	b.n	8008968 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <DMA_CalcBaseAndBitshift+0x160>)
 8008954:	4013      	ands	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6593      	str	r3, [r2, #88]	; 0x58
 800895a:	e005      	b.n	8008968 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40020010 	.word	0x40020010
 800897c:	40020028 	.word	0x40020028
 8008980:	40020040 	.word	0x40020040
 8008984:	40020058 	.word	0x40020058
 8008988:	40020070 	.word	0x40020070
 800898c:	40020088 	.word	0x40020088
 8008990:	400200a0 	.word	0x400200a0
 8008994:	400200b8 	.word	0x400200b8
 8008998:	40020410 	.word	0x40020410
 800899c:	40020428 	.word	0x40020428
 80089a0:	40020440 	.word	0x40020440
 80089a4:	40020458 	.word	0x40020458
 80089a8:	40020470 	.word	0x40020470
 80089ac:	40020488 	.word	0x40020488
 80089b0:	400204a0 	.word	0x400204a0
 80089b4:	400204b8 	.word	0x400204b8
 80089b8:	aaaaaaab 	.word	0xaaaaaaab
 80089bc:	080176f0 	.word	0x080176f0
 80089c0:	fffffc00 	.word	0xfffffc00

080089c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d120      	bne.n	8008a1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d858      	bhi.n	8008a92 <DMA_CheckFifoParam+0xce>
 80089e0:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <DMA_CheckFifoParam+0x24>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	080089f9 	.word	0x080089f9
 80089ec:	08008a0b 	.word	0x08008a0b
 80089f0:	080089f9 	.word	0x080089f9
 80089f4:	08008a93 	.word	0x08008a93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d048      	beq.n	8008a96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a08:	e045      	b.n	8008a96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a12:	d142      	bne.n	8008a9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a18:	e03f      	b.n	8008a9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a22:	d123      	bne.n	8008a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d838      	bhi.n	8008a9e <DMA_CheckFifoParam+0xda>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <DMA_CheckFifoParam+0x70>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a4b 	.word	0x08008a4b
 8008a3c:	08008a45 	.word	0x08008a45
 8008a40:	08008a5d 	.word	0x08008a5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
        break;
 8008a48:	e030      	b.n	8008aac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d025      	beq.n	8008aa2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a5a:	e022      	b.n	8008aa2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a64:	d11f      	bne.n	8008aa6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a6a:	e01c      	b.n	8008aa6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d902      	bls.n	8008a7a <DMA_CheckFifoParam+0xb6>
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d003      	beq.n	8008a80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008a78:	e018      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a7e:	e015      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00e      	beq.n	8008aaa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e00b      	b.n	8008aaa <DMA_CheckFifoParam+0xe6>
        break;
 8008a92:	bf00      	nop
 8008a94:	e00a      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        break;
 8008a96:	bf00      	nop
 8008a98:	e008      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        break;
 8008a9a:	bf00      	nop
 8008a9c:	e006      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        break;
 8008a9e:	bf00      	nop
 8008aa0:	e004      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        break;
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
        break;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <DMA_CheckFifoParam+0xe8>
    break;
 8008aaa:	bf00      	nop
    }
  }

  return status;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop

08008abc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a38      	ldr	r2, [pc, #224]	; (8008bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d022      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a36      	ldr	r2, [pc, #216]	; (8008bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01d      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a35      	ldr	r2, [pc, #212]	; (8008bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d018      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a33      	ldr	r2, [pc, #204]	; (8008bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d013      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a32      	ldr	r2, [pc, #200]	; (8008bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00e      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a30      	ldr	r2, [pc, #192]	; (8008bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d009      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a2f      	ldr	r2, [pc, #188]	; (8008bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d004      	beq.n	8008b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2d      	ldr	r2, [pc, #180]	; (8008bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d101      	bne.n	8008b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01a      	beq.n	8008b5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	3b08      	subs	r3, #8
 8008b2c:	4a28      	ldr	r2, [pc, #160]	; (8008bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	091b      	lsrs	r3, r3, #4
 8008b34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4b26      	ldr	r3, [pc, #152]	; (8008bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a24      	ldr	r2, [pc, #144]	; (8008bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2201      	movs	r2, #1
 8008b52:	409a      	lsls	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008b58:	e024      	b.n	8008ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	3b10      	subs	r3, #16
 8008b62:	4a1e      	ldr	r2, [pc, #120]	; (8008bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d806      	bhi.n	8008b82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4a1b      	ldr	r2, [pc, #108]	; (8008be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d902      	bls.n	8008b82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a16      	ldr	r2, [pc, #88]	; (8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	58025408 	.word	0x58025408
 8008bb4:	5802541c 	.word	0x5802541c
 8008bb8:	58025430 	.word	0x58025430
 8008bbc:	58025444 	.word	0x58025444
 8008bc0:	58025458 	.word	0x58025458
 8008bc4:	5802546c 	.word	0x5802546c
 8008bc8:	58025480 	.word	0x58025480
 8008bcc:	58025494 	.word	0x58025494
 8008bd0:	cccccccd 	.word	0xcccccccd
 8008bd4:	16009600 	.word	0x16009600
 8008bd8:	58025880 	.word	0x58025880
 8008bdc:	aaaaaaab 	.word	0xaaaaaaab
 8008be0:	400204b8 	.word	0x400204b8
 8008be4:	4002040f 	.word	0x4002040f
 8008be8:	10008200 	.word	0x10008200
 8008bec:	40020880 	.word	0x40020880

08008bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d04a      	beq.n	8008c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d847      	bhi.n	8008c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a25      	ldr	r2, [pc, #148]	; (8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d022      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a24      	ldr	r2, [pc, #144]	; (8008cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d01d      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a22      	ldr	r2, [pc, #136]	; (8008cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d018      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a21      	ldr	r2, [pc, #132]	; (8008cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d013      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a1f      	ldr	r2, [pc, #124]	; (8008cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00e      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d009      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a1c      	ldr	r2, [pc, #112]	; (8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a1b      	ldr	r2, [pc, #108]	; (8008cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d101      	bne.n	8008c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008c60:	2300      	movs	r3, #0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a15      	ldr	r2, [pc, #84]	; (8008ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008c78:	671a      	str	r2, [r3, #112]	; 0x70
 8008c7a:	e009      	b.n	8008c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a11      	ldr	r2, [pc, #68]	; (8008cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008c8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2201      	movs	r2, #1
 8008c96:	409a      	lsls	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	58025408 	.word	0x58025408
 8008cac:	5802541c 	.word	0x5802541c
 8008cb0:	58025430 	.word	0x58025430
 8008cb4:	58025444 	.word	0x58025444
 8008cb8:	58025458 	.word	0x58025458
 8008cbc:	5802546c 	.word	0x5802546c
 8008cc0:	58025480 	.word	0x58025480
 8008cc4:	58025494 	.word	0x58025494
 8008cc8:	1600963f 	.word	0x1600963f
 8008ccc:	58025940 	.word	0x58025940
 8008cd0:	1000823f 	.word	0x1000823f
 8008cd4:	40020940 	.word	0x40020940

08008cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008ce6:	4b89      	ldr	r3, [pc, #548]	; (8008f0c <HAL_GPIO_Init+0x234>)
 8008ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cea:	e194      	b.n	8009016 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 8186 	beq.w	8009010 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d005      	beq.n	8008d1c <HAL_GPIO_Init+0x44>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f003 0303 	and.w	r3, r3, #3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d130      	bne.n	8008d7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	2203      	movs	r2, #3
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	4013      	ands	r3, r2
 8008d32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d52:	2201      	movs	r2, #1
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	091b      	lsrs	r3, r3, #4
 8008d68:	f003 0201 	and.w	r2, r3, #1
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d017      	beq.n	8008dba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	2203      	movs	r2, #3
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43db      	mvns	r3, r3
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d123      	bne.n	8008e0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	08da      	lsrs	r2, r3, #3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3208      	adds	r2, #8
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	220f      	movs	r2, #15
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	43db      	mvns	r3, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	08da      	lsrs	r2, r3, #3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3208      	adds	r2, #8
 8008e08:	69b9      	ldr	r1, [r7, #24]
 8008e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	2203      	movs	r2, #3
 8008e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4013      	ands	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f003 0203 	and.w	r2, r3, #3
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80e0 	beq.w	8009010 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e50:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e56:	4a2e      	ldr	r2, [pc, #184]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e60:	4b2b      	ldr	r3, [pc, #172]	; (8008f10 <HAL_GPIO_Init+0x238>)
 8008e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e6e:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <HAL_GPIO_Init+0x23c>)
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	3302      	adds	r3, #2
 8008e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	220f      	movs	r2, #15
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <HAL_GPIO_Init+0x240>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d052      	beq.n	8008f40 <HAL_GPIO_Init+0x268>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	; (8008f1c <HAL_GPIO_Init+0x244>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d031      	beq.n	8008f06 <HAL_GPIO_Init+0x22e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1e      	ldr	r2, [pc, #120]	; (8008f20 <HAL_GPIO_Init+0x248>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d02b      	beq.n	8008f02 <HAL_GPIO_Init+0x22a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <HAL_GPIO_Init+0x24c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d025      	beq.n	8008efe <HAL_GPIO_Init+0x226>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	; (8008f28 <HAL_GPIO_Init+0x250>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01f      	beq.n	8008efa <HAL_GPIO_Init+0x222>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a1b      	ldr	r2, [pc, #108]	; (8008f2c <HAL_GPIO_Init+0x254>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d019      	beq.n	8008ef6 <HAL_GPIO_Init+0x21e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1a      	ldr	r2, [pc, #104]	; (8008f30 <HAL_GPIO_Init+0x258>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <HAL_GPIO_Init+0x21a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a19      	ldr	r2, [pc, #100]	; (8008f34 <HAL_GPIO_Init+0x25c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00d      	beq.n	8008eee <HAL_GPIO_Init+0x216>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <HAL_GPIO_Init+0x260>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <HAL_GPIO_Init+0x212>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a17      	ldr	r2, [pc, #92]	; (8008f3c <HAL_GPIO_Init+0x264>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d101      	bne.n	8008ee6 <HAL_GPIO_Init+0x20e>
 8008ee2:	2309      	movs	r3, #9
 8008ee4:	e02d      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	e02b      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008eea:	2308      	movs	r3, #8
 8008eec:	e029      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008eee:	2307      	movs	r3, #7
 8008ef0:	e027      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ef2:	2306      	movs	r3, #6
 8008ef4:	e025      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008ef6:	2305      	movs	r3, #5
 8008ef8:	e023      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008efa:	2304      	movs	r3, #4
 8008efc:	e021      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008efe:	2303      	movs	r3, #3
 8008f00:	e01f      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e01d      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e01b      	b.n	8008f42 <HAL_GPIO_Init+0x26a>
 8008f0a:	bf00      	nop
 8008f0c:	58000080 	.word	0x58000080
 8008f10:	58024400 	.word	0x58024400
 8008f14:	58000400 	.word	0x58000400
 8008f18:	58020000 	.word	0x58020000
 8008f1c:	58020400 	.word	0x58020400
 8008f20:	58020800 	.word	0x58020800
 8008f24:	58020c00 	.word	0x58020c00
 8008f28:	58021000 	.word	0x58021000
 8008f2c:	58021400 	.word	0x58021400
 8008f30:	58021800 	.word	0x58021800
 8008f34:	58021c00 	.word	0x58021c00
 8008f38:	58022000 	.word	0x58022000
 8008f3c:	58022400 	.word	0x58022400
 8008f40:	2300      	movs	r3, #0
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	f002 0203 	and.w	r2, r2, #3
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	4093      	lsls	r3, r2
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f52:	4938      	ldr	r1, [pc, #224]	; (8009034 <HAL_GPIO_Init+0x35c>)
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	089b      	lsrs	r3, r3, #2
 8008f58:	3302      	adds	r3, #2
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f ae63 	bne.w	8008cec <HAL_GPIO_Init+0x14>
  }
}
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	3724      	adds	r7, #36	; 0x24
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	58000400 	.word	0x58000400

08009038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691a      	ldr	r2, [r3, #16]
 8009048:	887b      	ldrh	r3, [r7, #2]
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009050:	2301      	movs	r3, #1
 8009052:	73fb      	strb	r3, [r7, #15]
 8009054:	e001      	b.n	800905a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
 8009074:	4613      	mov	r3, r2
 8009076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009078:	787b      	ldrb	r3, [r7, #1]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800907e:	887a      	ldrh	r2, [r7, #2]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009084:	e003      	b.n	800908e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	041a      	lsls	r2, r3, #16
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e08b      	b.n	80091c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7fa f8c6 	bl	8003254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2224      	movs	r2, #36	; 0x24
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80090ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d107      	bne.n	8009116 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689a      	ldr	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	e006      	b.n	8009124 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009122:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d108      	bne.n	800913e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800913a:	605a      	str	r2, [r3, #4]
 800913c:	e007      	b.n	800914e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800914c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6859      	ldr	r1, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <HAL_I2C_Init+0x134>)
 800915a:	430b      	orrs	r3, r1
 800915c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800916c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69d9      	ldr	r1, [r3, #28]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1a      	ldr	r2, [r3, #32]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	02008000 	.word	0x02008000

080091d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af02      	add	r7, sp, #8
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	461a      	mov	r2, r3
 80091e0:	460b      	mov	r3, r1
 80091e2:	817b      	strh	r3, [r7, #10]
 80091e4:	4613      	mov	r3, r2
 80091e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	f040 80fd 	bne.w	80093f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_I2C_Master_Transmit+0x30>
 8009200:	2302      	movs	r3, #2
 8009202:	e0f6      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800920c:	f7fa fdf4 	bl	8003df8 <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2319      	movs	r3, #25
 8009218:	2201      	movs	r2, #1
 800921a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fa0a 	bl	8009638 <I2C_WaitOnFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e0e1      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2221      	movs	r2, #33	; 0x21
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2210      	movs	r2, #16
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	893a      	ldrh	r2, [r7, #8]
 800924e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925a:	b29b      	uxth	r3, r3
 800925c:	2bff      	cmp	r3, #255	; 0xff
 800925e:	d906      	bls.n	800926e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	22ff      	movs	r2, #255	; 0xff
 8009264:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e007      	b.n	800927e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009272:	b29a      	uxth	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800927c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d024      	beq.n	80092d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	3b01      	subs	r3, #1
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	3301      	adds	r3, #1
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	8979      	ldrh	r1, [r7, #10]
 80092c2:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <HAL_I2C_Master_Transmit+0x228>)
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fc05 	bl	8009ad8 <I2C_TransferConfig>
 80092ce:	e066      	b.n	800939e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	8979      	ldrh	r1, [r7, #10]
 80092d8:	4b48      	ldr	r3, [pc, #288]	; (80093fc <HAL_I2C_Master_Transmit+0x228>)
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 fbfa 	bl	8009ad8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80092e4:	e05b      	b.n	800939e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	6a39      	ldr	r1, [r7, #32]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f9fd 	bl	80096ea <I2C_WaitOnTXISFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e07b      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29b      	uxth	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d034      	beq.n	800939e <HAL_I2C_Master_Transmit+0x1ca>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	d130      	bne.n	800939e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	2200      	movs	r2, #0
 8009344:	2180      	movs	r1, #128	; 0x80
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f976 	bl	8009638 <I2C_WaitOnFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e04d      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935a:	b29b      	uxth	r3, r3
 800935c:	2bff      	cmp	r3, #255	; 0xff
 800935e:	d90e      	bls.n	800937e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	22ff      	movs	r2, #255	; 0xff
 8009364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936a:	b2da      	uxtb	r2, r3
 800936c:	8979      	ldrh	r1, [r7, #10]
 800936e:	2300      	movs	r3, #0
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 fbae 	bl	8009ad8 <I2C_TransferConfig>
 800937c:	e00f      	b.n	800939e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009382:	b29a      	uxth	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	b2da      	uxtb	r2, r3
 800938e:	8979      	ldrh	r1, [r7, #10]
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fb9d 	bl	8009ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d19e      	bne.n	80092e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	6a39      	ldr	r1, [r7, #32]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f9e3 	bl	8009778 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e01a      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2220      	movs	r2, #32
 80093c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6859      	ldr	r1, [r3, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <HAL_I2C_Master_Transmit+0x22c>)
 80093d0:	400b      	ands	r3, r1
 80093d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e000      	b.n	80093f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	80002000 	.word	0x80002000
 8009400:	fe00e800 	.word	0xfe00e800

08009404 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	607a      	str	r2, [r7, #4]
 800940e:	461a      	mov	r2, r3
 8009410:	460b      	mov	r3, r1
 8009412:	817b      	strh	r3, [r7, #10]
 8009414:	4613      	mov	r3, r2
 8009416:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b20      	cmp	r3, #32
 8009422:	f040 80db 	bne.w	80095dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800942c:	2b01      	cmp	r3, #1
 800942e:	d101      	bne.n	8009434 <HAL_I2C_Master_Receive+0x30>
 8009430:	2302      	movs	r3, #2
 8009432:	e0d4      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800943c:	f7fa fcdc 	bl	8003df8 <HAL_GetTick>
 8009440:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	2319      	movs	r3, #25
 8009448:	2201      	movs	r2, #1
 800944a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f8f2 	bl	8009638 <I2C_WaitOnFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0bf      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2222      	movs	r2, #34	; 0x22
 8009462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2210      	movs	r2, #16
 800946a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	893a      	ldrh	r2, [r7, #8]
 800947e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948a:	b29b      	uxth	r3, r3
 800948c:	2bff      	cmp	r3, #255	; 0xff
 800948e:	d90e      	bls.n	80094ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	22ff      	movs	r2, #255	; 0xff
 8009494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949a:	b2da      	uxtb	r2, r3
 800949c:	8979      	ldrh	r1, [r7, #10]
 800949e:	4b52      	ldr	r3, [pc, #328]	; (80095e8 <HAL_I2C_Master_Receive+0x1e4>)
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fb16 	bl	8009ad8 <I2C_TransferConfig>
 80094ac:	e06d      	b.n	800958a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	8979      	ldrh	r1, [r7, #10]
 80094c0:	4b49      	ldr	r3, [pc, #292]	; (80095e8 <HAL_I2C_Master_Receive+0x1e4>)
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fb05 	bl	8009ad8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80094ce:	e05c      	b.n	800958a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	6a39      	ldr	r1, [r7, #32]
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 f993 	bl	8009800 <I2C_WaitOnRXNEFlagUntilTimeout>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e07c      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951a:	b29b      	uxth	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d034      	beq.n	800958a <HAL_I2C_Master_Receive+0x186>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009524:	2b00      	cmp	r3, #0
 8009526:	d130      	bne.n	800958a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2200      	movs	r2, #0
 8009530:	2180      	movs	r1, #128	; 0x80
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f880 	bl	8009638 <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e04d      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009546:	b29b      	uxth	r3, r3
 8009548:	2bff      	cmp	r3, #255	; 0xff
 800954a:	d90e      	bls.n	800956a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	22ff      	movs	r2, #255	; 0xff
 8009550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009556:	b2da      	uxtb	r2, r3
 8009558:	8979      	ldrh	r1, [r7, #10]
 800955a:	2300      	movs	r3, #0
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fab8 	bl	8009ad8 <I2C_TransferConfig>
 8009568:	e00f      	b.n	800958a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009578:	b2da      	uxtb	r2, r3
 800957a:	8979      	ldrh	r1, [r7, #10]
 800957c:	2300      	movs	r3, #0
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 faa7 	bl	8009ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d19d      	bne.n	80094d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	6a39      	ldr	r1, [r7, #32]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f8ed 	bl	8009778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e01a      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2220      	movs	r2, #32
 80095ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6859      	ldr	r1, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <HAL_I2C_Master_Receive+0x1e8>)
 80095bc:	400b      	ands	r3, r1
 80095be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	e000      	b.n	80095de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80095dc:	2302      	movs	r3, #2
  }
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	80002400 	.word	0x80002400
 80095ec:	fe00e800 	.word	0xfe00e800

080095f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b02      	cmp	r3, #2
 8009604:	d103      	bne.n	800960e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b01      	cmp	r3, #1
 800961a:	d007      	beq.n	800962c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699a      	ldr	r2, [r3, #24]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0201 	orr.w	r2, r2, #1
 800962a:	619a      	str	r2, [r3, #24]
  }
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	4613      	mov	r3, r2
 8009646:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009648:	e03b      	b.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f962 	bl	8009918 <I2C_IsErrorOccurred>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e041      	b.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009664:	d02d      	beq.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009666:	f7fa fbc7 	bl	8003df8 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d302      	bcc.n	800967c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d122      	bne.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4013      	ands	r3, r2
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	bf0c      	ite	eq
 800968c:	2301      	moveq	r3, #1
 800968e:	2300      	movne	r3, #0
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	429a      	cmp	r2, r3
 8009698:	d113      	bne.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	f043 0220 	orr.w	r2, r3, #32
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e00f      	b.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4013      	ands	r3, r2
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	bf0c      	ite	eq
 80096d2:	2301      	moveq	r3, #1
 80096d4:	2300      	movne	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d0b4      	beq.n	800964a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096f6:	e033      	b.n	8009760 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f90b 	bl	8009918 <I2C_IsErrorOccurred>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e031      	b.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009712:	d025      	beq.n	8009760 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009714:	f7fa fb70 	bl	8003df8 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	429a      	cmp	r2, r3
 8009722:	d302      	bcc.n	800972a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d11a      	bne.n	8009760 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d013      	beq.n	8009760 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973c:	f043 0220 	orr.w	r2, r3, #32
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e007      	b.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b02      	cmp	r3, #2
 800976c:	d1c4      	bne.n	80096f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009784:	e02f      	b.n	80097e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 f8c4 	bl	8009918 <I2C_IsErrorOccurred>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e02d      	b.n	80097f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979a:	f7fa fb2d 	bl	8003df8 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d11a      	bne.n	80097e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d013      	beq.n	80097e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c2:	f043 0220 	orr.w	r2, r3, #32
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e007      	b.n	80097f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b20      	cmp	r3, #32
 80097f2:	d1c8      	bne.n	8009786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009810:	e071      	b.n	80098f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 f87e 	bl	8009918 <I2C_IsErrorOccurred>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b20      	cmp	r3, #32
 8009832:	d13b      	bne.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d138      	bne.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b04      	cmp	r3, #4
 8009846:	d105      	bne.n	8009854 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	f003 0310 	and.w	r3, r3, #16
 800985e:	2b10      	cmp	r3, #16
 8009860:	d121      	bne.n	80098a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2210      	movs	r2, #16
 8009868:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2204      	movs	r2, #4
 800986e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2220      	movs	r2, #32
 8009876:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6859      	ldr	r1, [r3, #4]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b24      	ldr	r3, [pc, #144]	; (8009914 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009884:	400b      	ands	r3, r1
 8009886:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	75fb      	strb	r3, [r7, #23]
 80098a4:	e002      	b.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80098ac:	f7fa faa4 	bl	8003df8 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d119      	bne.n	80098f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d116      	bne.n	80098f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d00f      	beq.n	80098f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	f043 0220 	orr.w	r2, r3, #32
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b04      	cmp	r3, #4
 8009902:	d002      	beq.n	800990a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d083      	beq.n	8009812 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800990a:	7dfb      	ldrb	r3, [r7, #23]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	fe00e800 	.word	0xfe00e800

08009918 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d068      	beq.n	8009a16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2210      	movs	r2, #16
 800994a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800994c:	e049      	b.n	80099e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009954:	d045      	beq.n	80099e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009956:	f7fa fa4f 	bl	8003df8 <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	d302      	bcc.n	800996c <I2C_IsErrorOccurred+0x54>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d13a      	bne.n	80099e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009976:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800997e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800998a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800998e:	d121      	bne.n	80099d4 <I2C_IsErrorOccurred+0xbc>
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009996:	d01d      	beq.n	80099d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009998:	7cfb      	ldrb	r3, [r7, #19]
 800999a:	2b20      	cmp	r3, #32
 800999c:	d01a      	beq.n	80099d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099ae:	f7fa fa23 	bl	8003df8 <HAL_GetTick>
 80099b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099b4:	e00e      	b.n	80099d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099b6:	f7fa fa1f 	bl	8003df8 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b19      	cmp	r3, #25
 80099c2:	d907      	bls.n	80099d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	f043 0320 	orr.w	r3, r3, #32
 80099ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80099d2:	e006      	b.n	80099e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d1e9      	bne.n	80099b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d003      	beq.n	80099f8 <I2C_IsErrorOccurred+0xe0>
 80099f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0aa      	beq.n	800994e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80099f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2220      	movs	r2, #32
 8009a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	f043 0304 	orr.w	r3, r3, #4
 8009a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00b      	beq.n	8009a62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	f043 0308 	orr.w	r3, r3, #8
 8009a50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00b      	beq.n	8009a84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	f043 0302 	orr.w	r3, r3, #2
 8009a72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01c      	beq.n	8009ac6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff fdaf 	bl	80095f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6859      	ldr	r1, [r3, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <I2C_IsErrorOccurred+0x1bc>)
 8009a9e:	400b      	ands	r3, r1
 8009aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3728      	adds	r7, #40	; 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	fe00e800 	.word	0xfe00e800

08009ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	817b      	strh	r3, [r7, #10]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009aea:	897b      	ldrh	r3, [r7, #10]
 8009aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009af0:	7a7b      	ldrb	r3, [r7, #9]
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009af8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	0d5b      	lsrs	r3, r3, #21
 8009b12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <I2C_TransferConfig+0x60>)
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	43db      	mvns	r3, r3
 8009b1c:	ea02 0103 	and.w	r1, r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	03ff63ff 	.word	0x03ff63ff

08009b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d138      	bne.n	8009bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e032      	b.n	8009bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2224      	movs	r2, #36	; 0x24
 8009b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0201 	bic.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6819      	ldr	r1, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0201 	orr.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e000      	b.n	8009bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bc4:	2302      	movs	r3, #2
  }
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d139      	bne.n	8009c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e033      	b.n	8009c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2224      	movs	r2, #36	; 0x24
 8009c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0201 	bic.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	021b      	lsls	r3, r3, #8
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e000      	b.n	8009c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c5c:	2302      	movs	r3, #2
  }
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c7a:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c7c:	f043 0302 	orr.w	r3, r3, #2
 8009c80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009c84:	4b09      	ldr	r3, [pc, #36]	; (8009cac <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	4906      	ldr	r1, [pc, #24]	; (8009cb0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	604b      	str	r3, [r1, #4]
}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	58000400 	.word	0x58000400

08009cb4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009cc0:	4b18      	ldr	r3, [pc, #96]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f023 0201 	bic.w	r2, r3, #1
 8009cc8:	4916      	ldr	r1, [pc, #88]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009cd0:	4b14      	ldr	r3, [pc, #80]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	4a13      	ldr	r2, [pc, #76]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009cd6:	f023 0305 	bic.w	r3, r3, #5
 8009cda:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009cdc:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ce2:	f023 0302 	bic.w	r3, r3, #2
 8009ce6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <HAL_PWR_EnterSTOPMode+0x74>)
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <HAL_PWR_EnterSTOPMode+0x74>)
 8009cee:	f043 0304 	orr.w	r3, r3, #4
 8009cf2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cf4:	f3bf 8f4f 	dsb	sy
}
 8009cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009cfa:	f3bf 8f6f 	isb	sy
}
 8009cfe:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009d06:	bf30      	wfi
 8009d08:	e000      	b.n	8009d0c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009d0a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	4a05      	ldr	r2, [pc, #20]	; (8009d28 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d12:	f023 0304 	bic.w	r3, r3, #4
 8009d16:	6113      	str	r3, [r2, #16]
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	58024800 	.word	0x58024800
 8009d28:	e000ed00 	.word	0xe000ed00

08009d2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d34:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <HAL_PWREx_ConfigSupply+0x70>)
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d00a      	beq.n	8009d56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d40:	4b16      	ldr	r3, [pc, #88]	; (8009d9c <HAL_PWREx_ConfigSupply+0x70>)
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d001      	beq.n	8009d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e01f      	b.n	8009d92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e01d      	b.n	8009d92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <HAL_PWREx_ConfigSupply+0x70>)
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f023 0207 	bic.w	r2, r3, #7
 8009d5e:	490f      	ldr	r1, [pc, #60]	; (8009d9c <HAL_PWREx_ConfigSupply+0x70>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d66:	f7fa f847 	bl	8003df8 <HAL_GetTick>
 8009d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d6c:	e009      	b.n	8009d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d6e:	f7fa f843 	bl	8003df8 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d7c:	d901      	bls.n	8009d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e007      	b.n	8009d92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d82:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <HAL_PWREx_ConfigSupply+0x70>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d8e:	d1ee      	bne.n	8009d6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	58024800 	.word	0x58024800

08009da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08c      	sub	sp, #48	; 0x30
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	f000 bc48 	b.w	800a644 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8088 	beq.w	8009ed2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dc2:	4b99      	ldr	r3, [pc, #612]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dcc:	4b96      	ldr	r3, [pc, #600]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	2b10      	cmp	r3, #16
 8009dd6:	d007      	beq.n	8009de8 <HAL_RCC_OscConfig+0x48>
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	2b18      	cmp	r3, #24
 8009ddc:	d111      	bne.n	8009e02 <HAL_RCC_OscConfig+0x62>
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d10c      	bne.n	8009e02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009de8:	4b8f      	ldr	r3, [pc, #572]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d06d      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x130>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d169      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f000 bc21 	b.w	800a644 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0a:	d106      	bne.n	8009e1a <HAL_RCC_OscConfig+0x7a>
 8009e0c:	4b86      	ldr	r3, [pc, #536]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a85      	ldr	r2, [pc, #532]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e02e      	b.n	8009e78 <HAL_RCC_OscConfig+0xd8>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10c      	bne.n	8009e3c <HAL_RCC_OscConfig+0x9c>
 8009e22:	4b81      	ldr	r3, [pc, #516]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a80      	ldr	r2, [pc, #512]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	4b7e      	ldr	r3, [pc, #504]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a7d      	ldr	r2, [pc, #500]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	e01d      	b.n	8009e78 <HAL_RCC_OscConfig+0xd8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e44:	d10c      	bne.n	8009e60 <HAL_RCC_OscConfig+0xc0>
 8009e46:	4b78      	ldr	r3, [pc, #480]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a77      	ldr	r2, [pc, #476]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	4b75      	ldr	r3, [pc, #468]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a74      	ldr	r2, [pc, #464]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	e00b      	b.n	8009e78 <HAL_RCC_OscConfig+0xd8>
 8009e60:	4b71      	ldr	r3, [pc, #452]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a70      	ldr	r2, [pc, #448]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	4b6e      	ldr	r3, [pc, #440]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a6d      	ldr	r2, [pc, #436]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d013      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e80:	f7f9 ffba 	bl	8003df8 <HAL_GetTick>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e88:	f7f9 ffb6 	bl	8003df8 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b64      	cmp	r3, #100	; 0x64
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e3d4      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e9a:	4b63      	ldr	r3, [pc, #396]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f0      	beq.n	8009e88 <HAL_RCC_OscConfig+0xe8>
 8009ea6:	e014      	b.n	8009ed2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea8:	f7f9 ffa6 	bl	8003df8 <HAL_GetTick>
 8009eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eae:	e008      	b.n	8009ec2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eb0:	f7f9 ffa2 	bl	8003df8 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b64      	cmp	r3, #100	; 0x64
 8009ebc:	d901      	bls.n	8009ec2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e3c0      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ec2:	4b59      	ldr	r3, [pc, #356]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1f0      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x110>
 8009ece:	e000      	b.n	8009ed2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 80ca 	beq.w	800a074 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ee0:	4b51      	ldr	r3, [pc, #324]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eea:	4b4f      	ldr	r3, [pc, #316]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <HAL_RCC_OscConfig+0x166>
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	2b18      	cmp	r3, #24
 8009efa:	d156      	bne.n	8009faa <HAL_RCC_OscConfig+0x20a>
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d151      	bne.n	8009faa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f06:	4b48      	ldr	r3, [pc, #288]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <HAL_RCC_OscConfig+0x17e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e392      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f1e:	4b42      	ldr	r3, [pc, #264]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f023 0219 	bic.w	r2, r3, #25
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	493f      	ldr	r1, [pc, #252]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f30:	f7f9 ff62 	bl	8003df8 <HAL_GetTick>
 8009f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f36:	e008      	b.n	8009f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f38:	f7f9 ff5e 	bl	8003df8 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d901      	bls.n	8009f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e37c      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f4a:	4b37      	ldr	r3, [pc, #220]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0f0      	beq.n	8009f38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f56:	f7f9 ff5b 	bl	8003e10 <HAL_GetREVID>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d817      	bhi.n	8009f94 <HAL_RCC_OscConfig+0x1f4>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b40      	cmp	r3, #64	; 0x40
 8009f6a:	d108      	bne.n	8009f7e <HAL_RCC_OscConfig+0x1de>
 8009f6c:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f74:	4a2c      	ldr	r2, [pc, #176]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f7c:	e07a      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f7e:	4b2a      	ldr	r3, [pc, #168]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	031b      	lsls	r3, r3, #12
 8009f8c:	4926      	ldr	r1, [pc, #152]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f92:	e06f      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f94:	4b24      	ldr	r3, [pc, #144]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	061b      	lsls	r3, r3, #24
 8009fa2:	4921      	ldr	r1, [pc, #132]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fa8:	e064      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d047      	beq.n	800a042 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fb2:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f023 0219 	bic.w	r2, r3, #25
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	491a      	ldr	r1, [pc, #104]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc4:	f7f9 ff18 	bl	8003df8 <HAL_GetTick>
 8009fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fcc:	f7f9 ff14 	bl	8003df8 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e332      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fea:	f7f9 ff11 	bl	8003e10 <HAL_GetREVID>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d819      	bhi.n	800a02c <HAL_RCC_OscConfig+0x28c>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	2b40      	cmp	r3, #64	; 0x40
 8009ffe:	d108      	bne.n	800a012 <HAL_RCC_OscConfig+0x272>
 800a000:	4b09      	ldr	r3, [pc, #36]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a008:	4a07      	ldr	r2, [pc, #28]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 800a00a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a00e:	6053      	str	r3, [r2, #4]
 800a010:	e030      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	031b      	lsls	r3, r3, #12
 800a020:	4901      	ldr	r1, [pc, #4]	; (800a028 <HAL_RCC_OscConfig+0x288>)
 800a022:	4313      	orrs	r3, r2
 800a024:	604b      	str	r3, [r1, #4]
 800a026:	e025      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
 800a028:	58024400 	.word	0x58024400
 800a02c:	4b9a      	ldr	r3, [pc, #616]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	061b      	lsls	r3, r3, #24
 800a03a:	4997      	ldr	r1, [pc, #604]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	604b      	str	r3, [r1, #4]
 800a040:	e018      	b.n	800a074 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a042:	4b95      	ldr	r3, [pc, #596]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a94      	ldr	r2, [pc, #592]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a04e:	f7f9 fed3 	bl	8003df8 <HAL_GetTick>
 800a052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a054:	e008      	b.n	800a068 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a056:	f7f9 fecf 	bl	8003df8 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e2ed      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a068:	4b8b      	ldr	r3, [pc, #556]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f0      	bne.n	800a056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80a9 	beq.w	800a1d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a082:	4b85      	ldr	r3, [pc, #532]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a08a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a08c:	4b82      	ldr	r3, [pc, #520]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a090:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	2b08      	cmp	r3, #8
 800a096:	d007      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x308>
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	2b18      	cmp	r3, #24
 800a09c:	d13a      	bne.n	800a114 <HAL_RCC_OscConfig+0x374>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d135      	bne.n	800a114 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0a8:	4b7b      	ldr	r3, [pc, #492]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x320>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	2b80      	cmp	r3, #128	; 0x80
 800a0ba:	d001      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e2c1      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0c0:	f7f9 fea6 	bl	8003e10 <HAL_GetREVID>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d817      	bhi.n	800a0fe <HAL_RCC_OscConfig+0x35e>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d108      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x348>
 800a0d6:	4b70      	ldr	r3, [pc, #448]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a0de:	4a6e      	ldr	r2, [pc, #440]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a0e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0e6:	e075      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0e8:	4b6b      	ldr	r3, [pc, #428]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	069b      	lsls	r3, r3, #26
 800a0f6:	4968      	ldr	r1, [pc, #416]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0fc:	e06a      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0fe:	4b66      	ldr	r3, [pc, #408]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	061b      	lsls	r3, r3, #24
 800a10c:	4962      	ldr	r1, [pc, #392]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a112:	e05f      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d042      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a11c:	4b5e      	ldr	r3, [pc, #376]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a5d      	ldr	r2, [pc, #372]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a128:	f7f9 fe66 	bl	8003df8 <HAL_GetTick>
 800a12c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a12e:	e008      	b.n	800a142 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a130:	f7f9 fe62 	bl	8003df8 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e280      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a142:	4b55      	ldr	r3, [pc, #340]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0f0      	beq.n	800a130 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a14e:	f7f9 fe5f 	bl	8003e10 <HAL_GetREVID>
 800a152:	4603      	mov	r3, r0
 800a154:	f241 0203 	movw	r2, #4099	; 0x1003
 800a158:	4293      	cmp	r3, r2
 800a15a:	d817      	bhi.n	800a18c <HAL_RCC_OscConfig+0x3ec>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	2b20      	cmp	r3, #32
 800a162:	d108      	bne.n	800a176 <HAL_RCC_OscConfig+0x3d6>
 800a164:	4b4c      	ldr	r3, [pc, #304]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a16c:	4a4a      	ldr	r2, [pc, #296]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a16e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a172:	6053      	str	r3, [r2, #4]
 800a174:	e02e      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
 800a176:	4b48      	ldr	r3, [pc, #288]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	069b      	lsls	r3, r3, #26
 800a184:	4944      	ldr	r1, [pc, #272]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a186:	4313      	orrs	r3, r2
 800a188:	604b      	str	r3, [r1, #4]
 800a18a:	e023      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
 800a18c:	4b42      	ldr	r3, [pc, #264]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	061b      	lsls	r3, r3, #24
 800a19a:	493f      	ldr	r1, [pc, #252]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60cb      	str	r3, [r1, #12]
 800a1a0:	e018      	b.n	800a1d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1a2:	4b3d      	ldr	r3, [pc, #244]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a3c      	ldr	r2, [pc, #240]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ae:	f7f9 fe23 	bl	8003df8 <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a1b6:	f7f9 fe1f 	bl	8003df8 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e23d      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1c8:	4b33      	ldr	r3, [pc, #204]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1f0      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d036      	beq.n	800a24e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d019      	beq.n	800a21c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1e8:	4b2b      	ldr	r3, [pc, #172]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ec:	4a2a      	ldr	r2, [pc, #168]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f4:	f7f9 fe00 	bl	8003df8 <HAL_GetTick>
 800a1f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a1fa:	e008      	b.n	800a20e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1fc:	f7f9 fdfc 	bl	8003df8 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e21a      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a20e:	4b22      	ldr	r3, [pc, #136]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0f0      	beq.n	800a1fc <HAL_RCC_OscConfig+0x45c>
 800a21a:	e018      	b.n	800a24e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a21c:	4b1e      	ldr	r3, [pc, #120]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a220:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a228:	f7f9 fde6 	bl	8003df8 <HAL_GetTick>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a230:	f7f9 fde2 	bl	8003df8 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e200      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a242:	4b15      	ldr	r3, [pc, #84]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1f0      	bne.n	800a230 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b00      	cmp	r3, #0
 800a258:	d039      	beq.n	800a2ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01c      	beq.n	800a29c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a262:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a0c      	ldr	r2, [pc, #48]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a26c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a26e:	f7f9 fdc3 	bl	8003df8 <HAL_GetTick>
 800a272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a274:	e008      	b.n	800a288 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a276:	f7f9 fdbf 	bl	8003df8 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d901      	bls.n	800a288 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e1dd      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a288:	4b03      	ldr	r3, [pc, #12]	; (800a298 <HAL_RCC_OscConfig+0x4f8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0f0      	beq.n	800a276 <HAL_RCC_OscConfig+0x4d6>
 800a294:	e01b      	b.n	800a2ce <HAL_RCC_OscConfig+0x52e>
 800a296:	bf00      	nop
 800a298:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a29c:	4b9b      	ldr	r3, [pc, #620]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a9a      	ldr	r2, [pc, #616]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a2a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2a8:	f7f9 fda6 	bl	8003df8 <HAL_GetTick>
 800a2ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2ae:	e008      	b.n	800a2c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2b0:	f7f9 fda2 	bl	8003df8 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e1c0      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2c2:	4b92      	ldr	r3, [pc, #584]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1f0      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 8081 	beq.w	800a3de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2dc:	4b8c      	ldr	r3, [pc, #560]	; (800a510 <HAL_RCC_OscConfig+0x770>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a8b      	ldr	r2, [pc, #556]	; (800a510 <HAL_RCC_OscConfig+0x770>)
 800a2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2e8:	f7f9 fd86 	bl	8003df8 <HAL_GetTick>
 800a2ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2ee:	e008      	b.n	800a302 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2f0:	f7f9 fd82 	bl	8003df8 <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b64      	cmp	r3, #100	; 0x64
 800a2fc:	d901      	bls.n	800a302 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e1a0      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a302:	4b83      	ldr	r3, [pc, #524]	; (800a510 <HAL_RCC_OscConfig+0x770>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0f0      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d106      	bne.n	800a324 <HAL_RCC_OscConfig+0x584>
 800a316:	4b7d      	ldr	r3, [pc, #500]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31a:	4a7c      	ldr	r2, [pc, #496]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	6713      	str	r3, [r2, #112]	; 0x70
 800a322:	e02d      	b.n	800a380 <HAL_RCC_OscConfig+0x5e0>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10c      	bne.n	800a346 <HAL_RCC_OscConfig+0x5a6>
 800a32c:	4b77      	ldr	r3, [pc, #476]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a330:	4a76      	ldr	r2, [pc, #472]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	6713      	str	r3, [r2, #112]	; 0x70
 800a338:	4b74      	ldr	r3, [pc, #464]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33c:	4a73      	ldr	r2, [pc, #460]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a33e:	f023 0304 	bic.w	r3, r3, #4
 800a342:	6713      	str	r3, [r2, #112]	; 0x70
 800a344:	e01c      	b.n	800a380 <HAL_RCC_OscConfig+0x5e0>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d10c      	bne.n	800a368 <HAL_RCC_OscConfig+0x5c8>
 800a34e:	4b6f      	ldr	r3, [pc, #444]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a352:	4a6e      	ldr	r2, [pc, #440]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a354:	f043 0304 	orr.w	r3, r3, #4
 800a358:	6713      	str	r3, [r2, #112]	; 0x70
 800a35a:	4b6c      	ldr	r3, [pc, #432]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	4a6b      	ldr	r2, [pc, #428]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	6713      	str	r3, [r2, #112]	; 0x70
 800a366:	e00b      	b.n	800a380 <HAL_RCC_OscConfig+0x5e0>
 800a368:	4b68      	ldr	r3, [pc, #416]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36c:	4a67      	ldr	r2, [pc, #412]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a36e:	f023 0301 	bic.w	r3, r3, #1
 800a372:	6713      	str	r3, [r2, #112]	; 0x70
 800a374:	4b65      	ldr	r3, [pc, #404]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a378:	4a64      	ldr	r2, [pc, #400]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a37a:	f023 0304 	bic.w	r3, r3, #4
 800a37e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d015      	beq.n	800a3b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a388:	f7f9 fd36 	bl	8003df8 <HAL_GetTick>
 800a38c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a38e:	e00a      	b.n	800a3a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a390:	f7f9 fd32 	bl	8003df8 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e14e      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3a6:	4b59      	ldr	r3, [pc, #356]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0ee      	beq.n	800a390 <HAL_RCC_OscConfig+0x5f0>
 800a3b2:	e014      	b.n	800a3de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b4:	f7f9 fd20 	bl	8003df8 <HAL_GetTick>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3ba:	e00a      	b.n	800a3d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3bc:	f7f9 fd1c 	bl	8003df8 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e138      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3d2:	4b4e      	ldr	r3, [pc, #312]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1ee      	bne.n	800a3bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 812d 	beq.w	800a642 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a3e8:	4b48      	ldr	r3, [pc, #288]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3f0:	2b18      	cmp	r3, #24
 800a3f2:	f000 80bd 	beq.w	800a570 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	f040 809e 	bne.w	800a53c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a400:	4b42      	ldr	r3, [pc, #264]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a41      	ldr	r2, [pc, #260]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a40a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a40c:	f7f9 fcf4 	bl	8003df8 <HAL_GetTick>
 800a410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a412:	e008      	b.n	800a426 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a414:	f7f9 fcf0 	bl	8003df8 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d901      	bls.n	800a426 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e10e      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a426:	4b39      	ldr	r3, [pc, #228]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1f0      	bne.n	800a414 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a432:	4b36      	ldr	r3, [pc, #216]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a436:	4b37      	ldr	r3, [pc, #220]	; (800a514 <HAL_RCC_OscConfig+0x774>)
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a442:	0112      	lsls	r2, r2, #4
 800a444:	430a      	orrs	r2, r1
 800a446:	4931      	ldr	r1, [pc, #196]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	628b      	str	r3, [r1, #40]	; 0x28
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a450:	3b01      	subs	r3, #1
 800a452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	3b01      	subs	r3, #1
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	b29b      	uxth	r3, r3
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	3b01      	subs	r3, #1
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a474:	3b01      	subs	r3, #1
 800a476:	061b      	lsls	r3, r3, #24
 800a478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a47c:	4923      	ldr	r1, [pc, #140]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a482:	4b22      	ldr	r3, [pc, #136]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	4a21      	ldr	r2, [pc, #132]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a48e:	4b1f      	ldr	r3, [pc, #124]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a492:	4b21      	ldr	r3, [pc, #132]	; (800a518 <HAL_RCC_OscConfig+0x778>)
 800a494:	4013      	ands	r3, r2
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a49a:	00d2      	lsls	r2, r2, #3
 800a49c:	491b      	ldr	r1, [pc, #108]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4a2:	4b1a      	ldr	r3, [pc, #104]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	f023 020c 	bic.w	r2, r3, #12
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	4917      	ldr	r1, [pc, #92]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4b4:	4b15      	ldr	r3, [pc, #84]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	f023 0202 	bic.w	r2, r3, #2
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c0:	4912      	ldr	r1, [pc, #72]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ca:	4a10      	ldr	r2, [pc, #64]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4d2:	4b0e      	ldr	r3, [pc, #56]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a4de:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a4ea:	4b08      	ldr	r3, [pc, #32]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	4a07      	ldr	r2, [pc, #28]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4f0:	f043 0301 	orr.w	r3, r3, #1
 800a4f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a04      	ldr	r2, [pc, #16]	; (800a50c <HAL_RCC_OscConfig+0x76c>)
 800a4fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a502:	f7f9 fc79 	bl	8003df8 <HAL_GetTick>
 800a506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a508:	e011      	b.n	800a52e <HAL_RCC_OscConfig+0x78e>
 800a50a:	bf00      	nop
 800a50c:	58024400 	.word	0x58024400
 800a510:	58024800 	.word	0x58024800
 800a514:	fffffc0c 	.word	0xfffffc0c
 800a518:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a51c:	f7f9 fc6c 	bl	8003df8 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e08a      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a52e:	4b47      	ldr	r3, [pc, #284]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0f0      	beq.n	800a51c <HAL_RCC_OscConfig+0x77c>
 800a53a:	e082      	b.n	800a642 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a53c:	4b43      	ldr	r3, [pc, #268]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a42      	ldr	r2, [pc, #264]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a548:	f7f9 fc56 	bl	8003df8 <HAL_GetTick>
 800a54c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a54e:	e008      	b.n	800a562 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a550:	f7f9 fc52 	bl	8003df8 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e070      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a562:	4b3a      	ldr	r3, [pc, #232]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1f0      	bne.n	800a550 <HAL_RCC_OscConfig+0x7b0>
 800a56e:	e068      	b.n	800a642 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a570:	4b36      	ldr	r3, [pc, #216]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a576:	4b35      	ldr	r3, [pc, #212]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	2b01      	cmp	r3, #1
 800a582:	d031      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f003 0203 	and.w	r2, r3, #3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a58e:	429a      	cmp	r2, r3
 800a590:	d12a      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	091b      	lsrs	r3, r3, #4
 800a596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d122      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d11a      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	0a5b      	lsrs	r3, r3, #9
 800a5b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d111      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	0c1b      	lsrs	r3, r3, #16
 800a5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d108      	bne.n	800a5e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	0e1b      	lsrs	r3, r3, #24
 800a5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d001      	beq.n	800a5ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e02b      	b.n	800a644 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a5ec:	4b17      	ldr	r3, [pc, #92]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f0:	08db      	lsrs	r3, r3, #3
 800a5f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d01f      	beq.n	800a642 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	4a11      	ldr	r2, [pc, #68]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a60e:	f7f9 fbf3 	bl	8003df8 <HAL_GetTick>
 800a612:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a614:	bf00      	nop
 800a616:	f7f9 fbef 	bl	8003df8 <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	4293      	cmp	r3, r2
 800a620:	d0f9      	beq.n	800a616 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a622:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <HAL_RCC_OscConfig+0x8b0>)
 800a628:	4013      	ands	r3, r2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a62e:	00d2      	lsls	r2, r2, #3
 800a630:	4906      	ldr	r1, [pc, #24]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a632:	4313      	orrs	r3, r2
 800a634:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a636:	4b05      	ldr	r3, [pc, #20]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <HAL_RCC_OscConfig+0x8ac>)
 800a63c:	f043 0301 	orr.w	r3, r3, #1
 800a640:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3730      	adds	r7, #48	; 0x30
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	58024400 	.word	0x58024400
 800a650:	ffff0007 	.word	0xffff0007

0800a654 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e19c      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a668:	4b8a      	ldr	r3, [pc, #552]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d910      	bls.n	800a698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a676:	4b87      	ldr	r3, [pc, #540]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f023 020f 	bic.w	r2, r3, #15
 800a67e:	4985      	ldr	r1, [pc, #532]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	4313      	orrs	r3, r2
 800a684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a686:	4b83      	ldr	r3, [pc, #524]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d001      	beq.n	800a698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e184      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d010      	beq.n	800a6c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691a      	ldr	r2, [r3, #16]
 800a6a8:	4b7b      	ldr	r3, [pc, #492]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d908      	bls.n	800a6c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6b4:	4b78      	ldr	r3, [pc, #480]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	4975      	ldr	r1, [pc, #468]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0308 	and.w	r3, r3, #8
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d010      	beq.n	800a6f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	4b70      	ldr	r3, [pc, #448]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d908      	bls.n	800a6f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6e2:	4b6d      	ldr	r3, [pc, #436]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	496a      	ldr	r1, [pc, #424]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d010      	beq.n	800a722 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	4b64      	ldr	r3, [pc, #400]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d908      	bls.n	800a722 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a710:	4b61      	ldr	r3, [pc, #388]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	495e      	ldr	r1, [pc, #376]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0320 	and.w	r3, r3, #32
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d010      	beq.n	800a750 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69da      	ldr	r2, [r3, #28]
 800a732:	4b59      	ldr	r3, [pc, #356]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d908      	bls.n	800a750 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a73e:	4b56      	ldr	r3, [pc, #344]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	4953      	ldr	r1, [pc, #332]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68da      	ldr	r2, [r3, #12]
 800a760:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f003 030f 	and.w	r3, r3, #15
 800a768:	429a      	cmp	r2, r3
 800a76a:	d908      	bls.n	800a77e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a76c:	4b4a      	ldr	r3, [pc, #296]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	f023 020f 	bic.w	r2, r3, #15
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	4947      	ldr	r1, [pc, #284]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d055      	beq.n	800a836 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a78a:	4b43      	ldr	r3, [pc, #268]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	4940      	ldr	r1, [pc, #256]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7a4:	4b3c      	ldr	r3, [pc, #240]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d121      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e0f6      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d107      	bne.n	800a7cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7bc:	4b36      	ldr	r3, [pc, #216]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d115      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e0ea      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d107      	bne.n	800a7e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7d4:	4b30      	ldr	r3, [pc, #192]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d109      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e0de      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7e4:	4b2c      	ldr	r3, [pc, #176]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e0d6      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7f4:	4b28      	ldr	r3, [pc, #160]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	f023 0207 	bic.w	r2, r3, #7
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4925      	ldr	r1, [pc, #148]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a802:	4313      	orrs	r3, r2
 800a804:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a806:	f7f9 faf7 	bl	8003df8 <HAL_GetTick>
 800a80a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a80c:	e00a      	b.n	800a824 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a80e:	f7f9 faf3 	bl	8003df8 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	f241 3288 	movw	r2, #5000	; 0x1388
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d901      	bls.n	800a824 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e0be      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a824:	4b1c      	ldr	r3, [pc, #112]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	429a      	cmp	r2, r3
 800a834:	d1eb      	bne.n	800a80e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d010      	beq.n	800a864 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	4b14      	ldr	r3, [pc, #80]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f003 030f 	and.w	r3, r3, #15
 800a84e:	429a      	cmp	r2, r3
 800a850:	d208      	bcs.n	800a864 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a852:	4b11      	ldr	r3, [pc, #68]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	f023 020f 	bic.w	r2, r3, #15
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	490e      	ldr	r1, [pc, #56]	; (800a898 <HAL_RCC_ClockConfig+0x244>)
 800a860:	4313      	orrs	r3, r2
 800a862:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a864:	4b0b      	ldr	r3, [pc, #44]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d214      	bcs.n	800a89c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 020f 	bic.w	r2, r3, #15
 800a87a:	4906      	ldr	r1, [pc, #24]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a882:	4b04      	ldr	r3, [pc, #16]	; (800a894 <HAL_RCC_ClockConfig+0x240>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d005      	beq.n	800a89c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e086      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x34e>
 800a894:	52002000 	.word	0x52002000
 800a898:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d010      	beq.n	800a8ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691a      	ldr	r2, [r3, #16]
 800a8ac:	4b3f      	ldr	r3, [pc, #252]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d208      	bcs.n	800a8ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8b8:	4b3c      	ldr	r3, [pc, #240]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	4939      	ldr	r1, [pc, #228]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0308 	and.w	r3, r3, #8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d010      	beq.n	800a8f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	695a      	ldr	r2, [r3, #20]
 800a8da:	4b34      	ldr	r3, [pc, #208]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d208      	bcs.n	800a8f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8e6:	4b31      	ldr	r3, [pc, #196]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	492e      	ldr	r1, [pc, #184]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	d010      	beq.n	800a926 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699a      	ldr	r2, [r3, #24]
 800a908:	4b28      	ldr	r3, [pc, #160]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a910:	429a      	cmp	r2, r3
 800a912:	d208      	bcs.n	800a926 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a914:	4b25      	ldr	r3, [pc, #148]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	4922      	ldr	r1, [pc, #136]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a922:	4313      	orrs	r3, r2
 800a924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d010      	beq.n	800a954 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69da      	ldr	r2, [r3, #28]
 800a936:	4b1d      	ldr	r3, [pc, #116]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a93e:	429a      	cmp	r2, r3
 800a940:	d208      	bcs.n	800a954 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a942:	4b1a      	ldr	r3, [pc, #104]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4917      	ldr	r1, [pc, #92]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a950:	4313      	orrs	r3, r2
 800a952:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a954:	f000 f834 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800a958:	4602      	mov	r2, r0
 800a95a:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	0a1b      	lsrs	r3, r3, #8
 800a960:	f003 030f 	and.w	r3, r3, #15
 800a964:	4912      	ldr	r1, [pc, #72]	; (800a9b0 <HAL_RCC_ClockConfig+0x35c>)
 800a966:	5ccb      	ldrb	r3, [r1, r3]
 800a968:	f003 031f 	and.w	r3, r3, #31
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
 800a970:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a972:	4b0e      	ldr	r3, [pc, #56]	; (800a9ac <HAL_RCC_ClockConfig+0x358>)
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f003 030f 	and.w	r3, r3, #15
 800a97a:	4a0d      	ldr	r2, [pc, #52]	; (800a9b0 <HAL_RCC_ClockConfig+0x35c>)
 800a97c:	5cd3      	ldrb	r3, [r2, r3]
 800a97e:	f003 031f 	and.w	r3, r3, #31
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
 800a988:	4a0a      	ldr	r2, [pc, #40]	; (800a9b4 <HAL_RCC_ClockConfig+0x360>)
 800a98a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a98c:	4a0a      	ldr	r2, [pc, #40]	; (800a9b8 <HAL_RCC_ClockConfig+0x364>)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a992:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <HAL_RCC_ClockConfig+0x368>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4618      	mov	r0, r3
 800a998:	f7f8 ff52 	bl	8003840 <HAL_InitTick>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	58024400 	.word	0x58024400
 800a9b0:	080176e0 	.word	0x080176e0
 800a9b4:	24000094 	.word	0x24000094
 800a9b8:	24000090 	.word	0x24000090
 800a9bc:	24000098 	.word	0x24000098

0800a9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	; 0x24
 800a9c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9c6:	4bb3      	ldr	r3, [pc, #716]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9ce:	2b18      	cmp	r3, #24
 800a9d0:	f200 8155 	bhi.w	800ac7e <HAL_RCC_GetSysClockFreq+0x2be>
 800a9d4:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9da:	bf00      	nop
 800a9dc:	0800aa41 	.word	0x0800aa41
 800a9e0:	0800ac7f 	.word	0x0800ac7f
 800a9e4:	0800ac7f 	.word	0x0800ac7f
 800a9e8:	0800ac7f 	.word	0x0800ac7f
 800a9ec:	0800ac7f 	.word	0x0800ac7f
 800a9f0:	0800ac7f 	.word	0x0800ac7f
 800a9f4:	0800ac7f 	.word	0x0800ac7f
 800a9f8:	0800ac7f 	.word	0x0800ac7f
 800a9fc:	0800aa67 	.word	0x0800aa67
 800aa00:	0800ac7f 	.word	0x0800ac7f
 800aa04:	0800ac7f 	.word	0x0800ac7f
 800aa08:	0800ac7f 	.word	0x0800ac7f
 800aa0c:	0800ac7f 	.word	0x0800ac7f
 800aa10:	0800ac7f 	.word	0x0800ac7f
 800aa14:	0800ac7f 	.word	0x0800ac7f
 800aa18:	0800ac7f 	.word	0x0800ac7f
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	0800ac7f 	.word	0x0800ac7f
 800aa24:	0800ac7f 	.word	0x0800ac7f
 800aa28:	0800ac7f 	.word	0x0800ac7f
 800aa2c:	0800ac7f 	.word	0x0800ac7f
 800aa30:	0800ac7f 	.word	0x0800ac7f
 800aa34:	0800ac7f 	.word	0x0800ac7f
 800aa38:	0800ac7f 	.word	0x0800ac7f
 800aa3c:	0800aa73 	.word	0x0800aa73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa40:	4b94      	ldr	r3, [pc, #592]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d009      	beq.n	800aa60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa4c:	4b91      	ldr	r3, [pc, #580]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	08db      	lsrs	r3, r3, #3
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	4a90      	ldr	r2, [pc, #576]	; (800ac98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa5e:	e111      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa60:	4b8d      	ldr	r3, [pc, #564]	; (800ac98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa62:	61bb      	str	r3, [r7, #24]
      break;
 800aa64:	e10e      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa66:	4b8d      	ldr	r3, [pc, #564]	; (800ac9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa68:	61bb      	str	r3, [r7, #24]
      break;
 800aa6a:	e10b      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aa6c:	4b8c      	ldr	r3, [pc, #560]	; (800aca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa6e:	61bb      	str	r3, [r7, #24]
      break;
 800aa70:	e108      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa72:	4b88      	ldr	r3, [pc, #544]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aa7c:	4b85      	ldr	r3, [pc, #532]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	091b      	lsrs	r3, r3, #4
 800aa82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa88:	4b82      	ldr	r3, [pc, #520]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa92:	4b80      	ldr	r3, [pc, #512]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	08db      	lsrs	r3, r3, #3
 800aa98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	fb02 f303 	mul.w	r3, r2, r3
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80e1 	beq.w	800ac78 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	f000 8083 	beq.w	800abc4 <HAL_RCC_GetSysClockFreq+0x204>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	f200 80a1 	bhi.w	800ac08 <HAL_RCC_GetSysClockFreq+0x248>
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_RCC_GetSysClockFreq+0x114>
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d056      	beq.n	800ab80 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aad2:	e099      	b.n	800ac08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aad4:	4b6f      	ldr	r3, [pc, #444]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d02d      	beq.n	800ab3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aae0:	4b6c      	ldr	r3, [pc, #432]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	08db      	lsrs	r3, r3, #3
 800aae6:	f003 0303 	and.w	r3, r3, #3
 800aaea:	4a6b      	ldr	r2, [pc, #428]	; (800ac98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaec:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	ee07 3a90 	vmov	s15, r3
 800aaf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b62      	ldr	r3, [pc, #392]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab3a:	e087      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab46:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4e:	4b51      	ldr	r3, [pc, #324]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab62:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab7e:	e065      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800acac <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab92:	4b40      	ldr	r3, [pc, #256]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aba6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abc2:	e043      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abce:	eddf 6a38 	vldr	s13, [pc, #224]	; 800acb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800abd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd6:	4b2f      	ldr	r3, [pc, #188]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac06:	e021      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eddf 6a26 	vldr	s13, [pc, #152]	; 800acac <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1a:	4b1e      	ldr	r3, [pc, #120]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac4c:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	0a5b      	lsrs	r3, r3, #9
 800ac52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac56:	3301      	adds	r3, #1
 800ac58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac70:	ee17 3a90 	vmov	r3, s15
 800ac74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ac76:	e005      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	61bb      	str	r3, [r7, #24]
      break;
 800ac7c:	e002      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac80:	61bb      	str	r3, [r7, #24]
      break;
 800ac82:	bf00      	nop
  }

  return sysclockfreq;
 800ac84:	69bb      	ldr	r3, [r7, #24]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3724      	adds	r7, #36	; 0x24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	58024400 	.word	0x58024400
 800ac98:	03d09000 	.word	0x03d09000
 800ac9c:	003d0900 	.word	0x003d0900
 800aca0:	017d7840 	.word	0x017d7840
 800aca4:	46000000 	.word	0x46000000
 800aca8:	4c742400 	.word	0x4c742400
 800acac:	4a742400 	.word	0x4a742400
 800acb0:	4bbebc20 	.word	0x4bbebc20

0800acb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800acba:	f7ff fe81 	bl	800a9c0 <HAL_RCC_GetSysClockFreq>
 800acbe:	4602      	mov	r2, r0
 800acc0:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <HAL_RCC_GetHCLKFreq+0x50>)
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	490f      	ldr	r1, [pc, #60]	; (800ad08 <HAL_RCC_GetHCLKFreq+0x54>)
 800accc:	5ccb      	ldrb	r3, [r1, r3]
 800acce:	f003 031f 	and.w	r3, r3, #31
 800acd2:	fa22 f303 	lsr.w	r3, r2, r3
 800acd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <HAL_RCC_GetHCLKFreq+0x50>)
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	f003 030f 	and.w	r3, r3, #15
 800ace0:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <HAL_RCC_GetHCLKFreq+0x54>)
 800ace2:	5cd3      	ldrb	r3, [r2, r3]
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	fa22 f303 	lsr.w	r3, r2, r3
 800acee:	4a07      	ldr	r2, [pc, #28]	; (800ad0c <HAL_RCC_GetHCLKFreq+0x58>)
 800acf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acf2:	4a07      	ldr	r2, [pc, #28]	; (800ad10 <HAL_RCC_GetHCLKFreq+0x5c>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <HAL_RCC_GetHCLKFreq+0x58>)
 800acfa:	681b      	ldr	r3, [r3, #0]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	58024400 	.word	0x58024400
 800ad08:	080176e0 	.word	0x080176e0
 800ad0c:	24000094 	.word	0x24000094
 800ad10:	24000090 	.word	0x24000090

0800ad14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad18:	f7ff ffcc 	bl	800acb4 <HAL_RCC_GetHCLKFreq>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	091b      	lsrs	r3, r3, #4
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	4904      	ldr	r1, [pc, #16]	; (800ad3c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad2a:	5ccb      	ldrb	r3, [r1, r3]
 800ad2c:	f003 031f 	and.w	r3, r3, #31
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	080176e0 	.word	0x080176e0

0800ad40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad44:	f7ff ffb6 	bl	800acb4 <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	58024400 	.word	0x58024400
 800ad68:	080176e0 	.word	0x080176e0

0800ad6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	223f      	movs	r2, #63	; 0x3f
 800ad7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ad7c:	4b1a      	ldr	r3, [pc, #104]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f003 0207 	and.w	r2, r3, #7
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ad88:	4b17      	ldr	r3, [pc, #92]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ad94:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f003 020f 	and.w	r2, r3, #15
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ada0:	4b11      	ldr	r3, [pc, #68]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800adac:	4b0e      	ldr	r3, [pc, #56]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800adb8:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800adc4:	4b08      	ldr	r3, [pc, #32]	; (800ade8 <HAL_RCC_GetClockConfig+0x7c>)
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <HAL_RCC_GetClockConfig+0x80>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 020f 	and.w	r2, r3, #15
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	601a      	str	r2, [r3, #0]
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	58024400 	.word	0x58024400
 800adec:	52002000 	.word	0x52002000

0800adf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adf4:	b0ca      	sub	sp, #296	; 0x128
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae02:	2300      	movs	r3, #0
 800ae04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae14:	2500      	movs	r5, #0
 800ae16:	ea54 0305 	orrs.w	r3, r4, r5
 800ae1a:	d049      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae26:	d02f      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae2c:	d828      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae32:	d01a      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae38:	d822      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d003      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae42:	d007      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae44:	e01c      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae46:	4bb8      	ldr	r3, [pc, #736]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	4ab7      	ldr	r2, [pc, #732]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae52:	e01a      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae58:	3308      	adds	r3, #8
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 fb61 	bl	800d524 <RCCEx_PLL2_Config>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae68:	e00f      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6e:	3328      	adds	r3, #40	; 0x28
 800ae70:	2102      	movs	r1, #2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f002 fc08 	bl	800d688 <RCCEx_PLL3_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae7e:	e004      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae86:	e000      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ae88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae92:	4ba5      	ldr	r3, [pc, #660]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aea0:	4aa1      	ldr	r2, [pc, #644]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aea2:	430b      	orrs	r3, r1
 800aea4:	6513      	str	r3, [r2, #80]	; 0x50
 800aea6:	e003      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aebc:	f04f 0900 	mov.w	r9, #0
 800aec0:	ea58 0309 	orrs.w	r3, r8, r9
 800aec4:	d047      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d82a      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800aeed 	.word	0x0800aeed
 800aedc:	0800aefb 	.word	0x0800aefb
 800aee0:	0800af11 	.word	0x0800af11
 800aee4:	0800af2f 	.word	0x0800af2f
 800aee8:	0800af2f 	.word	0x0800af2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeec:	4b8e      	ldr	r3, [pc, #568]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	4a8d      	ldr	r2, [pc, #564]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aef8:	e01a      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	3308      	adds	r3, #8
 800af00:	2100      	movs	r1, #0
 800af02:	4618      	mov	r0, r3
 800af04:	f002 fb0e 	bl	800d524 <RCCEx_PLL2_Config>
 800af08:	4603      	mov	r3, r0
 800af0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af0e:	e00f      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af14:	3328      	adds	r3, #40	; 0x28
 800af16:	2100      	movs	r1, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f002 fbb5 	bl	800d688 <RCCEx_PLL3_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af24:	e004      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af2c:	e000      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af38:	4b7b      	ldr	r3, [pc, #492]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3c:	f023 0107 	bic.w	r1, r3, #7
 800af40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af46:	4a78      	ldr	r2, [pc, #480]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af48:	430b      	orrs	r3, r1
 800af4a:	6513      	str	r3, [r2, #80]	; 0x50
 800af4c:	e003      	b.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800af62:	f04f 0b00 	mov.w	fp, #0
 800af66:	ea5a 030b 	orrs.w	r3, sl, fp
 800af6a:	d04c      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800af6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af76:	d030      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800af78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af7c:	d829      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af7e:	2bc0      	cmp	r3, #192	; 0xc0
 800af80:	d02d      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800af82:	2bc0      	cmp	r3, #192	; 0xc0
 800af84:	d825      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af86:	2b80      	cmp	r3, #128	; 0x80
 800af88:	d018      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800af8a:	2b80      	cmp	r3, #128	; 0x80
 800af8c:	d821      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d007      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800af96:	e01c      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af98:	4b63      	ldr	r3, [pc, #396]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	4a62      	ldr	r2, [pc, #392]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afa4:	e01c      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afaa:	3308      	adds	r3, #8
 800afac:	2100      	movs	r1, #0
 800afae:	4618      	mov	r0, r3
 800afb0:	f002 fab8 	bl	800d524 <RCCEx_PLL2_Config>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afba:	e011      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc0:	3328      	adds	r3, #40	; 0x28
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f002 fb5f 	bl	800d688 <RCCEx_PLL3_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afd0:	e006      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afd8:	e002      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800afde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800afe8:	4b4f      	ldr	r3, [pc, #316]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aff6:	4a4c      	ldr	r2, [pc, #304]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff8:	430b      	orrs	r3, r1
 800affa:	6513      	str	r3, [r2, #80]	; 0x50
 800affc:	e003      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b012:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b016:	2300      	movs	r3, #0
 800b018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b01c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b020:	460b      	mov	r3, r1
 800b022:	4313      	orrs	r3, r2
 800b024:	d053      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b02e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b032:	d035      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b038:	d82e      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b03a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b03e:	d031      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b040:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b044:	d828      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b04a:	d01a      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b04c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b050:	d822      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b05a:	d007      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b05c:	e01c      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b05e:	4b32      	ldr	r3, [pc, #200]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	4a31      	ldr	r2, [pc, #196]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b06a:	e01c      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b070:	3308      	adds	r3, #8
 800b072:	2100      	movs	r1, #0
 800b074:	4618      	mov	r0, r3
 800b076:	f002 fa55 	bl	800d524 <RCCEx_PLL2_Config>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b080:	e011      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b086:	3328      	adds	r3, #40	; 0x28
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fafc 	bl	800d688 <RCCEx_PLL3_Config>
 800b090:	4603      	mov	r3, r0
 800b092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b096:	e006      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b09e:	e002      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0a0:	bf00      	nop
 800b0a2:	e000      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10b      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0ae:	4b1e      	ldr	r3, [pc, #120]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0be:	4a1a      	ldr	r2, [pc, #104]	; (800b128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	6593      	str	r3, [r2, #88]	; 0x58
 800b0c4:	e003      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b0da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b0e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	d056      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0fa:	d038      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b0fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b100:	d831      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b102:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b106:	d034      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b10c:	d82b      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b10e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b112:	d01d      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b118:	d825      	bhi.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d006      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b11e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b122:	d00a      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b124:	e01f      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b126:	bf00      	nop
 800b128:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b12c:	4ba2      	ldr	r3, [pc, #648]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	4aa1      	ldr	r2, [pc, #644]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b138:	e01c      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	3308      	adds	r3, #8
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f002 f9ee 	bl	800d524 <RCCEx_PLL2_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b14e:	e011      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b154:	3328      	adds	r3, #40	; 0x28
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f002 fa95 	bl	800d688 <RCCEx_PLL3_Config>
 800b15e:	4603      	mov	r3, r0
 800b160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b164:	e006      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b16c:	e002      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b16e:	bf00      	nop
 800b170:	e000      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b172:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10b      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b17c:	4b8e      	ldr	r3, [pc, #568]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b180:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b18c:	4a8a      	ldr	r2, [pc, #552]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b18e:	430b      	orrs	r3, r1
 800b190:	6593      	str	r3, [r2, #88]	; 0x58
 800b192:	e003      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b1a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	d03a      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c2:	2b30      	cmp	r3, #48	; 0x30
 800b1c4:	d01f      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b1c6:	2b30      	cmp	r3, #48	; 0x30
 800b1c8:	d819      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d00c      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d815      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d019      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b1d6:	2b10      	cmp	r3, #16
 800b1d8:	d111      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1da:	4b77      	ldr	r3, [pc, #476]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	4a76      	ldr	r2, [pc, #472]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b1e6:	e011      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	2102      	movs	r1, #2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f002 f997 	bl	800d524 <RCCEx_PLL2_Config>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b1fc:	e006      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b204:	e002      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b206:	bf00      	nop
 800b208:	e000      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b20a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b20c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b214:	4b68      	ldr	r3, [pc, #416]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b218:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b222:	4a65      	ldr	r2, [pc, #404]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b224:	430b      	orrs	r3, r1
 800b226:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b228:	e003      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b22e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b23e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b242:	2300      	movs	r3, #0
 800b244:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b248:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4313      	orrs	r3, r2
 800b250:	d051      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b25c:	d035      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b25e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b262:	d82e      	bhi.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b268:	d031      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b26a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b26e:	d828      	bhi.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b274:	d01a      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b27a:	d822      	bhi.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b284:	d007      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b286:	e01c      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b288:	4b4b      	ldr	r3, [pc, #300]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a4a      	ldr	r2, [pc, #296]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b294:	e01c      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29a:	3308      	adds	r3, #8
 800b29c:	2100      	movs	r1, #0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f002 f940 	bl	800d524 <RCCEx_PLL2_Config>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2aa:	e011      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b0:	3328      	adds	r3, #40	; 0x28
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f002 f9e7 	bl	800d688 <RCCEx_PLL3_Config>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2c0:	e006      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2c8:	e002      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b2ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b2d8:	4b37      	ldr	r3, [pc, #220]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2e6:	4a34      	ldr	r2, [pc, #208]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	6513      	str	r3, [r2, #80]	; 0x50
 800b2ec:	e003      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b306:	2300      	movs	r3, #0
 800b308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b30c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b310:	460b      	mov	r3, r1
 800b312:	4313      	orrs	r3, r2
 800b314:	d056      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b31c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b320:	d033      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b326:	d82c      	bhi.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b32c:	d02f      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b32e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b332:	d826      	bhi.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b338:	d02b      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b33a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b33e:	d820      	bhi.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b344:	d012      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b34a:	d81a      	bhi.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d022      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b354:	d115      	bne.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35a:	3308      	adds	r3, #8
 800b35c:	2101      	movs	r1, #1
 800b35e:	4618      	mov	r0, r3
 800b360:	f002 f8e0 	bl	800d524 <RCCEx_PLL2_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b36a:	e015      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b370:	3328      	adds	r3, #40	; 0x28
 800b372:	2101      	movs	r1, #1
 800b374:	4618      	mov	r0, r3
 800b376:	f002 f987 	bl	800d688 <RCCEx_PLL3_Config>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b380:	e00a      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b388:	e006      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b38a:	bf00      	nop
 800b38c:	e004      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b38e:	bf00      	nop
 800b390:	e002      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b392:	bf00      	nop
 800b394:	e000      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b396:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10d      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3a0:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ae:	4a02      	ldr	r2, [pc, #8]	; (800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6513      	str	r3, [r2, #80]	; 0x50
 800b3b4:	e006      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b3b6:	bf00      	nop
 800b3b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	d055      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3f0:	d033      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b3f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3f6:	d82c      	bhi.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b3f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3fc:	d02f      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b402:	d826      	bhi.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b408:	d02b      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b40a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b40e:	d820      	bhi.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b414:	d012      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b41a:	d81a      	bhi.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d022      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b424:	d115      	bne.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42a:	3308      	adds	r3, #8
 800b42c:	2101      	movs	r1, #1
 800b42e:	4618      	mov	r0, r3
 800b430:	f002 f878 	bl	800d524 <RCCEx_PLL2_Config>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b43a:	e015      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b440:	3328      	adds	r3, #40	; 0x28
 800b442:	2101      	movs	r1, #1
 800b444:	4618      	mov	r0, r3
 800b446:	f002 f91f 	bl	800d688 <RCCEx_PLL3_Config>
 800b44a:	4603      	mov	r3, r0
 800b44c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b450:	e00a      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b458:	e006      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b45a:	bf00      	nop
 800b45c:	e004      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b45e:	bf00      	nop
 800b460:	e002      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b462:	bf00      	nop
 800b464:	e000      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b466:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10b      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b470:	4ba3      	ldr	r3, [pc, #652]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b474:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b480:	4a9f      	ldr	r2, [pc, #636]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b482:	430b      	orrs	r3, r1
 800b484:	6593      	str	r3, [r2, #88]	; 0x58
 800b486:	e003      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b48c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b49c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d037      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ba:	d00e      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4c0:	d816      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d018      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b4c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4ca:	d111      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4cc:	4b8c      	ldr	r3, [pc, #560]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	4a8b      	ldr	r2, [pc, #556]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b4d8:	e00f      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4de:	3308      	adds	r3, #8
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 f81e 	bl	800d524 <RCCEx_PLL2_Config>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b4ee:	e004      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4f6:	e000      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b502:	4b7f      	ldr	r3, [pc, #508]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b506:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b510:	4a7b      	ldr	r2, [pc, #492]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b512:	430b      	orrs	r3, r1
 800b514:	6513      	str	r3, [r2, #80]	; 0x50
 800b516:	e003      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b52c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b530:	2300      	movs	r3, #0
 800b532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4313      	orrs	r3, r2
 800b53e:	d039      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b546:	2b03      	cmp	r3, #3
 800b548:	d81c      	bhi.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b58d 	.word	0x0800b58d
 800b554:	0800b561 	.word	0x0800b561
 800b558:	0800b56f 	.word	0x0800b56f
 800b55c:	0800b58d 	.word	0x0800b58d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b560:	4b67      	ldr	r3, [pc, #412]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4a66      	ldr	r2, [pc, #408]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b56a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b56c:	e00f      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b572:	3308      	adds	r3, #8
 800b574:	2102      	movs	r1, #2
 800b576:	4618      	mov	r0, r3
 800b578:	f001 ffd4 	bl	800d524 <RCCEx_PLL2_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b582:	e004      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b58a:	e000      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b58c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b58e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b596:	4b5a      	ldr	r3, [pc, #360]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b59a:	f023 0103 	bic.w	r1, r3, #3
 800b59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5a4:	4a56      	ldr	r2, [pc, #344]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a6:	430b      	orrs	r3, r1
 800b5a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5aa:	e003      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b5c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f000 809f 	beq.w	800b714 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5d6:	4b4b      	ldr	r3, [pc, #300]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a4a      	ldr	r2, [pc, #296]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b5dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5e2:	f7f8 fc09 	bl	8003df8 <HAL_GetTick>
 800b5e6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5ea:	e00b      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ec:	f7f8 fc04 	bl	8003df8 <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	2b64      	cmp	r3, #100	; 0x64
 800b5fa:	d903      	bls.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b602:	e005      	b.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b604:	4b3f      	ldr	r3, [pc, #252]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0ed      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b614:	2b00      	cmp	r3, #0
 800b616:	d179      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b618:	4b39      	ldr	r3, [pc, #228]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b61a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b624:	4053      	eors	r3, r2
 800b626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d015      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b62e:	4b34      	ldr	r3, [pc, #208]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b636:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b63a:	4b31      	ldr	r3, [pc, #196]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63e:	4a30      	ldr	r2, [pc, #192]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b644:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b646:	4b2e      	ldr	r3, [pc, #184]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64a:	4a2d      	ldr	r2, [pc, #180]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b64c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b650:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b652:	4a2b      	ldr	r2, [pc, #172]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b658:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b666:	d118      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b668:	f7f8 fbc6 	bl	8003df8 <HAL_GetTick>
 800b66c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b670:	e00d      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b672:	f7f8 fbc1 	bl	8003df8 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b67c:	1ad2      	subs	r2, r2, r3
 800b67e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b682:	429a      	cmp	r2, r3
 800b684:	d903      	bls.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b68c:	e005      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b68e:	4b1c      	ldr	r3, [pc, #112]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0eb      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b69a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d129      	bne.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b6b4:	4b12      	ldr	r3, [pc, #72]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6c4:	091a      	lsrs	r2, r3, #4
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	4a0d      	ldr	r2, [pc, #52]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	6113      	str	r3, [r2, #16]
 800b6d0:	e005      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b6d2:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	4a0a      	ldr	r2, [pc, #40]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6dc:	6113      	str	r3, [r2, #16]
 800b6de:	4b08      	ldr	r3, [pc, #32]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6ee:	4a04      	ldr	r2, [pc, #16]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f0:	430b      	orrs	r3, r1
 800b6f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b6f4:	e00e      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b6fe:	e009      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b700:	58024400 	.word	0x58024400
 800b704:	58024800 	.word	0x58024800
 800b708:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f002 0301 	and.w	r3, r2, #1
 800b720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b724:	2300      	movs	r3, #0
 800b726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b72a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b72e:	460b      	mov	r3, r1
 800b730:	4313      	orrs	r3, r2
 800b732:	f000 8089 	beq.w	800b848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b73c:	2b28      	cmp	r3, #40	; 0x28
 800b73e:	d86b      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b821 	.word	0x0800b821
 800b74c:	0800b819 	.word	0x0800b819
 800b750:	0800b819 	.word	0x0800b819
 800b754:	0800b819 	.word	0x0800b819
 800b758:	0800b819 	.word	0x0800b819
 800b75c:	0800b819 	.word	0x0800b819
 800b760:	0800b819 	.word	0x0800b819
 800b764:	0800b819 	.word	0x0800b819
 800b768:	0800b7ed 	.word	0x0800b7ed
 800b76c:	0800b819 	.word	0x0800b819
 800b770:	0800b819 	.word	0x0800b819
 800b774:	0800b819 	.word	0x0800b819
 800b778:	0800b819 	.word	0x0800b819
 800b77c:	0800b819 	.word	0x0800b819
 800b780:	0800b819 	.word	0x0800b819
 800b784:	0800b819 	.word	0x0800b819
 800b788:	0800b803 	.word	0x0800b803
 800b78c:	0800b819 	.word	0x0800b819
 800b790:	0800b819 	.word	0x0800b819
 800b794:	0800b819 	.word	0x0800b819
 800b798:	0800b819 	.word	0x0800b819
 800b79c:	0800b819 	.word	0x0800b819
 800b7a0:	0800b819 	.word	0x0800b819
 800b7a4:	0800b819 	.word	0x0800b819
 800b7a8:	0800b821 	.word	0x0800b821
 800b7ac:	0800b819 	.word	0x0800b819
 800b7b0:	0800b819 	.word	0x0800b819
 800b7b4:	0800b819 	.word	0x0800b819
 800b7b8:	0800b819 	.word	0x0800b819
 800b7bc:	0800b819 	.word	0x0800b819
 800b7c0:	0800b819 	.word	0x0800b819
 800b7c4:	0800b819 	.word	0x0800b819
 800b7c8:	0800b821 	.word	0x0800b821
 800b7cc:	0800b819 	.word	0x0800b819
 800b7d0:	0800b819 	.word	0x0800b819
 800b7d4:	0800b819 	.word	0x0800b819
 800b7d8:	0800b819 	.word	0x0800b819
 800b7dc:	0800b819 	.word	0x0800b819
 800b7e0:	0800b819 	.word	0x0800b819
 800b7e4:	0800b819 	.word	0x0800b819
 800b7e8:	0800b821 	.word	0x0800b821
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f001 fe95 	bl	800d524 <RCCEx_PLL2_Config>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b800:	e00f      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b806:	3328      	adds	r3, #40	; 0x28
 800b808:	2101      	movs	r1, #1
 800b80a:	4618      	mov	r0, r3
 800b80c:	f001 ff3c 	bl	800d688 <RCCEx_PLL3_Config>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b816:	e004      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b81e:	e000      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b820:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b82a:	4bbf      	ldr	r3, [pc, #764]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b838:	4abb      	ldr	r2, [pc, #748]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b83a:	430b      	orrs	r3, r1
 800b83c:	6553      	str	r3, [r2, #84]	; 0x54
 800b83e:	e003      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f002 0302 	and.w	r3, r2, #2
 800b854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b858:	2300      	movs	r3, #0
 800b85a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b85e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b862:	460b      	mov	r3, r1
 800b864:	4313      	orrs	r3, r2
 800b866:	d041      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d824      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b872:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b878:	0800b8c5 	.word	0x0800b8c5
 800b87c:	0800b891 	.word	0x0800b891
 800b880:	0800b8a7 	.word	0x0800b8a7
 800b884:	0800b8c5 	.word	0x0800b8c5
 800b888:	0800b8c5 	.word	0x0800b8c5
 800b88c:	0800b8c5 	.word	0x0800b8c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	3308      	adds	r3, #8
 800b896:	2101      	movs	r1, #1
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 fe43 	bl	800d524 <RCCEx_PLL2_Config>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8a4:	e00f      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8aa:	3328      	adds	r3, #40	; 0x28
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f001 feea 	bl	800d688 <RCCEx_PLL3_Config>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8ba:	e004      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8c2:	e000      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10a      	bne.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b8ce:	4b96      	ldr	r3, [pc, #600]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d2:	f023 0107 	bic.w	r1, r3, #7
 800b8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8dc:	4a92      	ldr	r2, [pc, #584]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b8e2:	e003      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f002 0304 	and.w	r3, r2, #4
 800b8f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b902:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b906:	460b      	mov	r3, r1
 800b908:	4313      	orrs	r3, r2
 800b90a:	d044      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b914:	2b05      	cmp	r3, #5
 800b916:	d825      	bhi.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b918:	a201      	add	r2, pc, #4	; (adr r2, 800b920 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91e:	bf00      	nop
 800b920:	0800b96d 	.word	0x0800b96d
 800b924:	0800b939 	.word	0x0800b939
 800b928:	0800b94f 	.word	0x0800b94f
 800b92c:	0800b96d 	.word	0x0800b96d
 800b930:	0800b96d 	.word	0x0800b96d
 800b934:	0800b96d 	.word	0x0800b96d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93c:	3308      	adds	r3, #8
 800b93e:	2101      	movs	r1, #1
 800b940:	4618      	mov	r0, r3
 800b942:	f001 fdef 	bl	800d524 <RCCEx_PLL2_Config>
 800b946:	4603      	mov	r3, r0
 800b948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b94c:	e00f      	b.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b952:	3328      	adds	r3, #40	; 0x28
 800b954:	2101      	movs	r1, #1
 800b956:	4618      	mov	r0, r3
 800b958:	f001 fe96 	bl	800d688 <RCCEx_PLL3_Config>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b962:	e004      	b.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b96a:	e000      	b.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b96c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b96e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10b      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b976:	4b6c      	ldr	r3, [pc, #432]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b97a:	f023 0107 	bic.w	r1, r3, #7
 800b97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b986:	4a68      	ldr	r2, [pc, #416]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b988:	430b      	orrs	r3, r1
 800b98a:	6593      	str	r3, [r2, #88]	; 0x58
 800b98c:	e003      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f002 0320 	and.w	r3, r2, #32
 800b9a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	d055      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9c2:	d033      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b9c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9c8:	d82c      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ce:	d02f      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b9d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d4:	d826      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9da:	d02b      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b9dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9e0:	d820      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e6:	d012      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b9e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ec:	d81a      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d022      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b9f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9f6:	d115      	bne.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 fd8f 	bl	800d524 <RCCEx_PLL2_Config>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba0c:	e015      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	3328      	adds	r3, #40	; 0x28
 800ba14:	2102      	movs	r1, #2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 fe36 	bl	800d688 <RCCEx_PLL3_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba22:	e00a      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba2a:	e006      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba2c:	bf00      	nop
 800ba2e:	e004      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba30:	bf00      	nop
 800ba32:	e002      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba34:	bf00      	nop
 800ba36:	e000      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10b      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba42:	4b39      	ldr	r3, [pc, #228]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba52:	4a35      	ldr	r2, [pc, #212]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba54:	430b      	orrs	r3, r1
 800ba56:	6553      	str	r3, [r2, #84]	; 0x54
 800ba58:	e003      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ba6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba72:	2300      	movs	r3, #0
 800ba74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ba78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	d058      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba8e:	d033      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ba94:	d82c      	bhi.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ba96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba9a:	d02f      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ba9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa0:	d826      	bhi.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baa6:	d02b      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800baa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baac:	d820      	bhi.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bab2:	d012      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bab8:	d81a      	bhi.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d022      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800babe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bac2:	d115      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac8:	3308      	adds	r3, #8
 800baca:	2100      	movs	r1, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fd29 	bl	800d524 <RCCEx_PLL2_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bad8:	e015      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bade:	3328      	adds	r3, #40	; 0x28
 800bae0:	2102      	movs	r1, #2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f001 fdd0 	bl	800d688 <RCCEx_PLL3_Config>
 800bae8:	4603      	mov	r3, r0
 800baea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800baee:	e00a      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baf6:	e006      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800baf8:	bf00      	nop
 800bafa:	e004      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bafc:	bf00      	nop
 800bafe:	e002      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb00:	bf00      	nop
 800bb02:	e000      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10e      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb0e:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb12:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb1e:	4a02      	ldr	r2, [pc, #8]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6593      	str	r3, [r2, #88]	; 0x58
 800bb24:	e006      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb26:	bf00      	nop
 800bb28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb44:	2300      	movs	r3, #0
 800bb46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d055      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb60:	d033      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bb62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bb66:	d82c      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb6c:	d02f      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bb6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb72:	d826      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb78:	d02b      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bb7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bb7e:	d820      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb84:	d012      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bb86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb8a:	d81a      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d022      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bb90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb94:	d115      	bne.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f001 fcc0 	bl	800d524 <RCCEx_PLL2_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbaa:	e015      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb0:	3328      	adds	r3, #40	; 0x28
 800bbb2:	2102      	movs	r1, #2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 fd67 	bl	800d688 <RCCEx_PLL3_Config>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbc0:	e00a      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbc8:	e006      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbca:	bf00      	nop
 800bbcc:	e004      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbce:	bf00      	nop
 800bbd0:	e002      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bbd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10b      	bne.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bbe0:	4ba1      	ldr	r3, [pc, #644]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bbe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbf0:	4a9d      	ldr	r2, [pc, #628]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbf2:	430b      	orrs	r3, r1
 800bbf4:	6593      	str	r3, [r2, #88]	; 0x58
 800bbf6:	e003      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f002 0308 	and.w	r3, r2, #8
 800bc0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc10:	2300      	movs	r3, #0
 800bc12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	d01e      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc2c:	d10c      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc32:	3328      	adds	r3, #40	; 0x28
 800bc34:	2102      	movs	r1, #2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 fd26 	bl	800d688 <RCCEx_PLL3_Config>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bc48:	4b87      	ldr	r3, [pc, #540]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc58:	4a83      	ldr	r2, [pc, #524]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc5a:	430b      	orrs	r3, r1
 800bc5c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f002 0310 	and.w	r3, r2, #16
 800bc6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	d01e      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc8a:	d10c      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc90:	3328      	adds	r3, #40	; 0x28
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 fcf7 	bl	800d688 <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bca6:	4b70      	ldr	r3, [pc, #448]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcb6:	4a6c      	ldr	r2, [pc, #432]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bcc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bccc:	2300      	movs	r3, #0
 800bcce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	d03e      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bce8:	d022      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bcea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcee:	d81b      	bhi.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bcf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcf8:	d00b      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bcfa:	e015      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd00:	3308      	adds	r3, #8
 800bd02:	2100      	movs	r1, #0
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 fc0d 	bl	800d524 <RCCEx_PLL2_Config>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd10:	e00f      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd16:	3328      	adds	r3, #40	; 0x28
 800bd18:	2102      	movs	r1, #2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 fcb4 	bl	800d688 <RCCEx_PLL3_Config>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd26:	e004      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd2e:	e000      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10b      	bne.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd3a:	4b4b      	ldr	r3, [pc, #300]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd4a:	4a47      	ldr	r2, [pc, #284]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	6593      	str	r3, [r2, #88]	; 0x58
 800bd50:	e003      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bd66:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd68:	2300      	movs	r3, #0
 800bd6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bd70:	460b      	mov	r3, r1
 800bd72:	4313      	orrs	r3, r2
 800bd74:	d03b      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd82:	d01f      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bd84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd88:	d818      	bhi.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bd8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd8e:	d003      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bd90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd94:	d007      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bd96:	e011      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd98:	4b33      	ldr	r3, [pc, #204]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	4a32      	ldr	r2, [pc, #200]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bda2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bda4:	e00f      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	3328      	adds	r3, #40	; 0x28
 800bdac:	2101      	movs	r1, #1
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fc6a 	bl	800d688 <RCCEx_PLL3_Config>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdba:	e004      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdc2:	e000      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bdc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10b      	bne.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdce:	4b26      	ldr	r3, [pc, #152]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	4a22      	ldr	r2, [pc, #136]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde0:	430b      	orrs	r3, r1
 800bde2:	6553      	str	r3, [r2, #84]	; 0x54
 800bde4:	e003      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bdfa:	673b      	str	r3, [r7, #112]	; 0x70
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	677b      	str	r3, [r7, #116]	; 0x74
 800be00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be04:	460b      	mov	r3, r1
 800be06:	4313      	orrs	r3, r2
 800be08:	d034      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be18:	d007      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be1a:	e011      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be1c:	4b12      	ldr	r3, [pc, #72]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	4a11      	ldr	r2, [pc, #68]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be28:	e00e      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	3308      	adds	r3, #8
 800be30:	2102      	movs	r1, #2
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fb76 	bl	800d524 <RCCEx_PLL2_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be3e:	e003      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10d      	bne.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be50:	4b05      	ldr	r3, [pc, #20]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5e:	4a02      	ldr	r2, [pc, #8]	; (800be68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be60:	430b      	orrs	r3, r1
 800be62:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be64:	e006      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800be66:	bf00      	nop
 800be68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800be80:	66bb      	str	r3, [r7, #104]	; 0x68
 800be82:	2300      	movs	r3, #0
 800be84:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800be8a:	460b      	mov	r3, r1
 800be8c:	4313      	orrs	r3, r2
 800be8e:	d00c      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be94:	3328      	adds	r3, #40	; 0x28
 800be96:	2102      	movs	r1, #2
 800be98:	4618      	mov	r0, r3
 800be9a:	f001 fbf5 	bl	800d688 <RCCEx_PLL3_Config>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800beb6:	663b      	str	r3, [r7, #96]	; 0x60
 800beb8:	2300      	movs	r3, #0
 800beba:	667b      	str	r3, [r7, #100]	; 0x64
 800bebc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bec0:	460b      	mov	r3, r1
 800bec2:	4313      	orrs	r3, r2
 800bec4:	d038      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bed2:	d018      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bed8:	d811      	bhi.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800beda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bede:	d014      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bee4:	d80b      	bhi.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800beea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beee:	d106      	bne.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bef0:	4bc3      	ldr	r3, [pc, #780]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	4ac2      	ldr	r2, [pc, #776]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800befa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800befc:	e008      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf04:	e004      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf06:	bf00      	nop
 800bf08:	e002      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf0a:	bf00      	nop
 800bf0c:	e000      	b.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf18:	4bb9      	ldr	r3, [pc, #740]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf28:	4ab5      	ldr	r2, [pc, #724]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	6553      	str	r3, [r2, #84]	; 0x54
 800bf2e:	e003      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf44:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf46:	2300      	movs	r3, #0
 800bf48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4313      	orrs	r3, r2
 800bf52:	d009      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf54:	4baa      	ldr	r3, [pc, #680]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf62:	4aa7      	ldr	r2, [pc, #668]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf64:	430b      	orrs	r3, r1
 800bf66:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bf74:	653b      	str	r3, [r7, #80]	; 0x50
 800bf76:	2300      	movs	r3, #0
 800bf78:	657b      	str	r3, [r7, #84]	; 0x54
 800bf7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4313      	orrs	r3, r2
 800bf82:	d00a      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bf84:	4b9e      	ldr	r3, [pc, #632]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bf8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf94:	4a9a      	ldr	r2, [pc, #616]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf96:	430b      	orrs	r3, r1
 800bf98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bfa6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	d009      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfb6:	4b92      	ldr	r3, [pc, #584]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc4:	4a8e      	ldr	r2, [pc, #568]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bfd6:	643b      	str	r3, [r7, #64]	; 0x40
 800bfd8:	2300      	movs	r3, #0
 800bfda:	647b      	str	r3, [r7, #68]	; 0x44
 800bfdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	d00e      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bfe6:	4b86      	ldr	r3, [pc, #536]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	4a85      	ldr	r2, [pc, #532]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bff0:	6113      	str	r3, [r2, #16]
 800bff2:	4b83      	ldr	r3, [pc, #524]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bff4:	6919      	ldr	r1, [r3, #16]
 800bff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bffe:	4a80      	ldr	r2, [pc, #512]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c000:	430b      	orrs	r3, r1
 800c002:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c010:	63bb      	str	r3, [r7, #56]	; 0x38
 800c012:	2300      	movs	r3, #0
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c016:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c01a:	460b      	mov	r3, r1
 800c01c:	4313      	orrs	r3, r2
 800c01e:	d009      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c020:	4b77      	ldr	r3, [pc, #476]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c024:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02e:	4a74      	ldr	r2, [pc, #464]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c030:	430b      	orrs	r3, r1
 800c032:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c040:	633b      	str	r3, [r7, #48]	; 0x30
 800c042:	2300      	movs	r3, #0
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
 800c046:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c04a:	460b      	mov	r3, r1
 800c04c:	4313      	orrs	r3, r2
 800c04e:	d00a      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c050:	4b6b      	ldr	r3, [pc, #428]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c054:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c060:	4a67      	ldr	r2, [pc, #412]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c062:	430b      	orrs	r3, r1
 800c064:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	2100      	movs	r1, #0
 800c070:	62b9      	str	r1, [r7, #40]	; 0x28
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c078:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c07c:	460b      	mov	r3, r1
 800c07e:	4313      	orrs	r3, r2
 800c080:	d011      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c086:	3308      	adds	r3, #8
 800c088:	2100      	movs	r1, #0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 fa4a 	bl	800d524 <RCCEx_PLL2_Config>
 800c090:	4603      	mov	r3, r0
 800c092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	6239      	str	r1, [r7, #32]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	d011      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 fa2a 	bl	800d524 <RCCEx_PLL2_Config>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d003      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	61b9      	str	r1, [r7, #24]
 800c0f2:	f003 0304 	and.w	r3, r3, #4
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4313      	orrs	r3, r2
 800c100:	d011      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c106:	3308      	adds	r3, #8
 800c108:	2102      	movs	r1, #2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f001 fa0a 	bl	800d524 <RCCEx_PLL2_Config>
 800c110:	4603      	mov	r3, r0
 800c112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	2100      	movs	r1, #0
 800c130:	6139      	str	r1, [r7, #16]
 800c132:	f003 0308 	and.w	r3, r3, #8
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c13c:	460b      	mov	r3, r1
 800c13e:	4313      	orrs	r3, r2
 800c140:	d011      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c146:	3328      	adds	r3, #40	; 0x28
 800c148:	2100      	movs	r1, #0
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fa9c 	bl	800d688 <RCCEx_PLL3_Config>
 800c150:	4603      	mov	r3, r0
 800c152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	2100      	movs	r1, #0
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	f003 0310 	and.w	r3, r3, #16
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c17c:	460b      	mov	r3, r1
 800c17e:	4313      	orrs	r3, r2
 800c180:	d011      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c186:	3328      	adds	r3, #40	; 0x28
 800c188:	2101      	movs	r1, #1
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 fa7c 	bl	800d688 <RCCEx_PLL3_Config>
 800c190:	4603      	mov	r3, r0
 800c192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6039      	str	r1, [r7, #0]
 800c1b2:	f003 0320 	and.w	r3, r3, #32
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	d011      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c6:	3328      	adds	r3, #40	; 0x28
 800c1c8:	2102      	movs	r1, #2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f001 fa5c 	bl	800d688 <RCCEx_PLL3_Config>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c1e6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e000      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c200:	58024400 	.word	0x58024400

0800c204 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b090      	sub	sp, #64	; 0x40
 800c208:	af00      	add	r7, sp, #0
 800c20a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c212:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c216:	430b      	orrs	r3, r1
 800c218:	f040 8094 	bne.w	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c21c:	4b9e      	ldr	r3, [pc, #632]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	2b04      	cmp	r3, #4
 800c22a:	f200 8087 	bhi.w	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c22e:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c249 	.word	0x0800c249
 800c238:	0800c271 	.word	0x0800c271
 800c23c:	0800c299 	.word	0x0800c299
 800c240:	0800c335 	.word	0x0800c335
 800c244:	0800c2c1 	.word	0x0800c2c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c248:	4b93      	ldr	r3, [pc, #588]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c254:	d108      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c25a:	4618      	mov	r0, r3
 800c25c:	f001 f810 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c264:	f000 bd45 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26c:	f000 bd41 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c270:	4b89      	ldr	r3, [pc, #548]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c27c:	d108      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c27e:	f107 0318 	add.w	r3, r7, #24
 800c282:	4618      	mov	r0, r3
 800c284:	f000 fd54 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28c:	f000 bd31 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c294:	f000 bd2d 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c298:	4b7f      	ldr	r3, [pc, #508]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2a4:	d108      	bne.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2a6:	f107 030c 	add.w	r3, r7, #12
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 fe94 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b4:	f000 bd1d 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2bc:	f000 bd19 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2c0:	4b75      	ldr	r3, [pc, #468]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2ca:	4b73      	ldr	r3, [pc, #460]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0304 	and.w	r3, r3, #4
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d10c      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d109      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2dc:	4b6e      	ldr	r3, [pc, #440]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	08db      	lsrs	r3, r3, #3
 800c2e2:	f003 0303 	and.w	r3, r3, #3
 800c2e6:	4a6d      	ldr	r2, [pc, #436]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ee:	e01f      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2f0:	4b69      	ldr	r3, [pc, #420]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2fc:	d106      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c304:	d102      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c306:	4b66      	ldr	r3, [pc, #408]	; (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30a:	e011      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c30c:	4b62      	ldr	r3, [pc, #392]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c318:	d106      	bne.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c320:	d102      	bne.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c322:	4b60      	ldr	r3, [pc, #384]	; (800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c326:	e003      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c32c:	f000 bce1 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c330:	f000 bcdf 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c334:	4b5c      	ldr	r3, [pc, #368]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c338:	f000 bcdb 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c340:	f000 bcd7 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c348:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c34c:	430b      	orrs	r3, r1
 800c34e:	f040 80ad 	bne.w	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c352:	4b51      	ldr	r3, [pc, #324]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c356:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c35a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c362:	d056      	beq.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36a:	f200 8090 	bhi.w	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	2bc0      	cmp	r3, #192	; 0xc0
 800c372:	f000 8088 	beq.w	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2bc0      	cmp	r3, #192	; 0xc0
 800c37a:	f200 8088 	bhi.w	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	2b80      	cmp	r3, #128	; 0x80
 800c382:	d032      	beq.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	2b80      	cmp	r3, #128	; 0x80
 800c388:	f200 8081 	bhi.w	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	2b40      	cmp	r3, #64	; 0x40
 800c396:	d014      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c398:	e079      	b.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c39a:	4b3f      	ldr	r3, [pc, #252]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3a6:	d108      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 ff67 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b6:	f000 bc9c 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3be:	f000 bc98 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c2:	4b35      	ldr	r3, [pc, #212]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ce:	d108      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d0:	f107 0318 	add.w	r3, r7, #24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fcab 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3de:	f000 bc88 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e6:	f000 bc84 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ea:	4b2b      	ldr	r3, [pc, #172]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f6:	d108      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3f8:	f107 030c 	add.w	r3, r7, #12
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fdeb 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c406:	f000 bc74 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40e:	f000 bc70 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c412:	4b21      	ldr	r3, [pc, #132]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c41a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c41c:	4b1e      	ldr	r3, [pc, #120]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0304 	and.w	r3, r3, #4
 800c424:	2b04      	cmp	r3, #4
 800c426:	d10c      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d109      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c42e:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	08db      	lsrs	r3, r3, #3
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	4a18      	ldr	r2, [pc, #96]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c43a:	fa22 f303 	lsr.w	r3, r2, r3
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c440:	e01f      	b.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c442:	4b15      	ldr	r3, [pc, #84]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44e:	d106      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c456:	d102      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c458:	4b11      	ldr	r3, [pc, #68]	; (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c45c:	e011      	b.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c45e:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c46a:	d106      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c472:	d102      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c474:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c478:	e003      	b.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c47e:	f000 bc38 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c482:	f000 bc36 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c486:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48a:	f000 bc32 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c492:	f000 bc2e 	b.w	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c496:	bf00      	nop
 800c498:	58024400 	.word	0x58024400
 800c49c:	03d09000 	.word	0x03d09000
 800c4a0:	003d0900 	.word	0x003d0900
 800c4a4:	017d7840 	.word	0x017d7840
 800c4a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4b0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	f040 809c 	bne.w	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c4ba:	4b9e      	ldr	r3, [pc, #632]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c4c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4ca:	d054      	beq.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4d2:	f200 808b 	bhi.w	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4dc:	f000 8083 	beq.w	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4e6:	f200 8081 	bhi.w	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4f0:	d02f      	beq.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4f8:	d878      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d004      	beq.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c506:	d012      	beq.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c508:	e070      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c50a:	4b8a      	ldr	r3, [pc, #552]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c516:	d107      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 feaf 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c526:	e3e4      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52c:	e3e1      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c52e:	4b81      	ldr	r3, [pc, #516]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c53a:	d107      	bne.n	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c53c:	f107 0318 	add.w	r3, r7, #24
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fbf5 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c54a:	e3d2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c550:	e3cf      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c552:	4b78      	ldr	r3, [pc, #480]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c55a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55e:	d107      	bne.n	800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c560:	f107 030c 	add.w	r3, r7, #12
 800c564:	4618      	mov	r0, r3
 800c566:	f000 fd37 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56e:	e3c0      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c574:	e3bd      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c576:	4b6f      	ldr	r3, [pc, #444]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c57a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c57e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c580:	4b6c      	ldr	r3, [pc, #432]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d10c      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c592:	4b68      	ldr	r3, [pc, #416]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	08db      	lsrs	r3, r3, #3
 800c598:	f003 0303 	and.w	r3, r3, #3
 800c59c:	4a66      	ldr	r2, [pc, #408]	; (800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c59e:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a4:	e01e      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5a6:	4b63      	ldr	r3, [pc, #396]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b2:	d106      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5ba:	d102      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5bc:	4b5f      	ldr	r3, [pc, #380]	; (800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c0:	e010      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5c2:	4b5c      	ldr	r3, [pc, #368]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ce:	d106      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d6:	d102      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5d8:	4b59      	ldr	r3, [pc, #356]	; (800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5dc:	e002      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5e2:	e386      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5e4:	e385      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5e6:	4b57      	ldr	r3, [pc, #348]	; (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ea:	e382      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f0:	e37f      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	f040 80a7 	bne.w	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c600:	4b4c      	ldr	r3, [pc, #304]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c604:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c608:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c610:	d055      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c618:	f200 8096 	bhi.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c622:	f000 8084 	beq.w	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c62c:	f200 808c 	bhi.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c636:	d030      	beq.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c63e:	f200 8083 	bhi.w	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	2b00      	cmp	r3, #0
 800c646:	d004      	beq.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c64e:	d012      	beq.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c650:	e07a      	b.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c652:	4b38      	ldr	r3, [pc, #224]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65e:	d107      	bne.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c664:	4618      	mov	r0, r3
 800c666:	f000 fe0b 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c66e:	e340      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c674:	e33d      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c676:	4b2f      	ldr	r3, [pc, #188]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c682:	d107      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c684:	f107 0318 	add.w	r3, r7, #24
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fb51 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c692:	e32e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c698:	e32b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c69a:	4b26      	ldr	r3, [pc, #152]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a6:	d107      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a8:	f107 030c 	add.w	r3, r7, #12
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fc93 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b6:	e31c      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e319      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6be:	4b1d      	ldr	r3, [pc, #116]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6c8:	4b1a      	ldr	r3, [pc, #104]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d10c      	bne.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d109      	bne.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6da:	4b16      	ldr	r3, [pc, #88]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	08db      	lsrs	r3, r3, #3
 800c6e0:	f003 0303 	and.w	r3, r3, #3
 800c6e4:	4a14      	ldr	r2, [pc, #80]	; (800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ec:	e01e      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6ee:	4b11      	ldr	r3, [pc, #68]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6fa:	d106      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c702:	d102      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c704:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c708:	e010      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c70a:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c716:	d106      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71e:	d102      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c72a:	e2e2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c72c:	e2e1      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c72e:	4b05      	ldr	r3, [pc, #20]	; (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c732:	e2de      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c734:	58024400 	.word	0x58024400
 800c738:	03d09000 	.word	0x03d09000
 800c73c:	003d0900 	.word	0x003d0900
 800c740:	017d7840 	.word	0x017d7840
 800c744:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74c:	e2d1      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c74e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c752:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c756:	430b      	orrs	r3, r1
 800c758:	f040 809c 	bne.w	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c75c:	4b93      	ldr	r3, [pc, #588]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c760:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c764:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c76c:	d054      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c774:	f200 808b 	bhi.w	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c77e:	f000 8083 	beq.w	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c788:	f200 8081 	bhi.w	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c792:	d02f      	beq.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c79a:	d878      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d004      	beq.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a8:	d012      	beq.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c7aa:	e070      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7ac:	4b7f      	ldr	r3, [pc, #508]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7b8:	d107      	bne.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fd5e 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c8:	e293      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ce:	e290      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7d0:	4b76      	ldr	r3, [pc, #472]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7de:	f107 0318 	add.w	r3, r7, #24
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 faa4 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ec:	e281      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f2:	e27e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7f4:	4b6d      	ldr	r3, [pc, #436]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d107      	bne.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c802:	f107 030c 	add.w	r3, r7, #12
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fbe6 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	e26f      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c816:	e26c      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c818:	4b64      	ldr	r3, [pc, #400]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c81c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c820:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c822:	4b62      	ldr	r3, [pc, #392]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	d10c      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c830:	2b00      	cmp	r3, #0
 800c832:	d109      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c834:	4b5d      	ldr	r3, [pc, #372]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	08db      	lsrs	r3, r3, #3
 800c83a:	f003 0303 	and.w	r3, r3, #3
 800c83e:	4a5c      	ldr	r2, [pc, #368]	; (800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c840:	fa22 f303 	lsr.w	r3, r2, r3
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c846:	e01e      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c848:	4b58      	ldr	r3, [pc, #352]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c854:	d106      	bne.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c85c:	d102      	bne.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c85e:	4b55      	ldr	r3, [pc, #340]	; (800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c862:	e010      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c864:	4b51      	ldr	r3, [pc, #324]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c86c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c870:	d106      	bne.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c878:	d102      	bne.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c87a:	4b4f      	ldr	r3, [pc, #316]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c87e:	e002      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c884:	e235      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c886:	e234      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c888:	4b4c      	ldr	r3, [pc, #304]	; (800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e231      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c892:	e22e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c894:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c898:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c89c:	430b      	orrs	r3, r1
 800c89e:	f040 808f 	bne.w	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8a2:	4b42      	ldr	r3, [pc, #264]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c8aa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8b2:	d06b      	beq.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8ba:	d874      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8c2:	d056      	beq.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8ca:	d86c      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8d2:	d03b      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8da:	d864      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8e2:	d021      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ea:	d85c      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8f8:	d004      	beq.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c8fa:	e054      	b.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c8fc:	f7fe fa0a 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c900:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c902:	e1f6      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c904:	4b29      	ldr	r3, [pc, #164]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c90c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c910:	d107      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c912:	f107 0318 	add.w	r3, r7, #24
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fa0a 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c920:	e1e7      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c926:	e1e4      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c928:	4b20      	ldr	r3, [pc, #128]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c934:	d107      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c936:	f107 030c 	add.w	r3, r7, #12
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fb4c 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c944:	e1d5      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94a:	e1d2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c94c:	4b17      	ldr	r3, [pc, #92]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 0304 	and.w	r3, r3, #4
 800c954:	2b04      	cmp	r3, #4
 800c956:	d109      	bne.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c958:	4b14      	ldr	r3, [pc, #80]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	08db      	lsrs	r3, r3, #3
 800c95e:	f003 0303 	and.w	r3, r3, #3
 800c962:	4a13      	ldr	r2, [pc, #76]	; (800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c964:	fa22 f303 	lsr.w	r3, r2, r3
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96a:	e1c2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e1bf      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c972:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97e:	d102      	bne.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c980:	4b0c      	ldr	r3, [pc, #48]	; (800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c984:	e1b5      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c98a:	e1b2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c98c:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c998:	d102      	bne.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c99a:	4b07      	ldr	r3, [pc, #28]	; (800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c99e:	e1a8      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a4:	e1a5      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9aa:	e1a2      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	03d09000 	.word	0x03d09000
 800c9b4:	003d0900 	.word	0x003d0900
 800c9b8:	017d7840 	.word	0x017d7840
 800c9bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9c4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c9c8:	430b      	orrs	r3, r1
 800c9ca:	d173      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c9cc:	4b9c      	ldr	r3, [pc, #624]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9dc:	d02f      	beq.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e4:	d863      	bhi.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d004      	beq.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f2:	d012      	beq.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c9f4:	e05b      	b.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9f6:	4b92      	ldr	r3, [pc, #584]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca02:	d107      	bne.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca04:	f107 0318 	add.w	r3, r7, #24
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f991 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca12:	e16e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca18:	e16b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca1a:	4b89      	ldr	r3, [pc, #548]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca26:	d107      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca28:	f107 030c 	add.w	r3, r7, #12
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 fad3 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca36:	e15c      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3c:	e159      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca3e:	4b80      	ldr	r3, [pc, #512]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca48:	4b7d      	ldr	r3, [pc, #500]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d10c      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d109      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca5a:	4b79      	ldr	r3, [pc, #484]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	08db      	lsrs	r3, r3, #3
 800ca60:	f003 0303 	and.w	r3, r3, #3
 800ca64:	4a77      	ldr	r2, [pc, #476]	; (800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca66:	fa22 f303 	lsr.w	r3, r2, r3
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca6c:	e01e      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca6e:	4b74      	ldr	r3, [pc, #464]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca7a:	d106      	bne.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca82:	d102      	bne.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca84:	4b70      	ldr	r3, [pc, #448]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca88:	e010      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca8a:	4b6d      	ldr	r3, [pc, #436]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca96:	d106      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ca98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9e:	d102      	bne.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800caa0:	4b6a      	ldr	r3, [pc, #424]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caa4:	e002      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caaa:	e122      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caac:	e121      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab2:	e11e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cabc:	430b      	orrs	r3, r1
 800cabe:	d133      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cac0:	4b5f      	ldr	r3, [pc, #380]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cac8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad6:	d012      	beq.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cad8:	e023      	b.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cada:	4b59      	ldr	r3, [pc, #356]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cae6:	d107      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800caec:	4618      	mov	r0, r3
 800caee:	f000 fbc7 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf6:	e0fc      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafc:	e0f9      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cafe:	4b50      	ldr	r3, [pc, #320]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb0a:	d107      	bne.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb0c:	f107 0318 	add.w	r3, r7, #24
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 f90d 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1a:	e0ea      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb20:	e0e7      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb26:	e0e4      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb2c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb30:	430b      	orrs	r3, r1
 800cb32:	f040 808d 	bne.w	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb36:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb3e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb46:	d06b      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb4e:	d874      	bhi.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb56:	d056      	beq.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb5e:	d86c      	bhi.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb66:	d03b      	beq.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb6e:	d864      	bhi.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb76:	d021      	beq.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7e:	d85c      	bhi.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb8c:	d004      	beq.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cb8e:	e054      	b.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cb90:	f000 f8b8 	bl	800cd04 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb96:	e0ac      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb98:	4b29      	ldr	r3, [pc, #164]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cba4:	d107      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cba6:	f107 0318 	add.w	r3, r7, #24
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f8c0 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb4:	e09d      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbba:	e09a      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbbc:	4b20      	ldr	r3, [pc, #128]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc8:	d107      	bne.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 fa02 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd8:	e08b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbde:	e088      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbe0:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 0304 	and.w	r3, r3, #4
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d109      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbec:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	08db      	lsrs	r3, r3, #3
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	4a13      	ldr	r2, [pc, #76]	; (800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cbf8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfe:	e078      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc04:	e075      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc06:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc12:	d102      	bne.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc18:	e06b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1e:	e068      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc2c:	d102      	bne.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc2e:	4b07      	ldr	r3, [pc, #28]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc32:	e05e      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc38:	e05b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3e:	e058      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc40:	58024400 	.word	0x58024400
 800cc44:	03d09000 	.word	0x03d09000
 800cc48:	003d0900 	.word	0x003d0900
 800cc4c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cc50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc54:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cc58:	430b      	orrs	r3, r1
 800cc5a:	d148      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cc5c:	4b27      	ldr	r3, [pc, #156]	; (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc6c:	d02a      	beq.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc74:	d838      	bhi.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc82:	d00d      	beq.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cc84:	e030      	b.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc86:	4b1d      	ldr	r3, [pc, #116]	; (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc92:	d102      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cc94:	4b1a      	ldr	r3, [pc, #104]	; (800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc98:	e02b      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9e:	e028      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cca0:	4b16      	ldr	r3, [pc, #88]	; (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccac:	d107      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 fae4 	bl	800d280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccbc:	e019      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc2:	e016      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccd0:	d107      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccd2:	f107 0318 	add.w	r3, r7, #24
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f82a 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce0:	e007      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce6:	e004      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e001      	b.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ccf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3740      	adds	r7, #64	; 0x40
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	58024400 	.word	0x58024400
 800cd00:	017d7840 	.word	0x017d7840

0800cd04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd08:	f7fd ffd4 	bl	800acb4 <HAL_RCC_GetHCLKFreq>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	4b06      	ldr	r3, [pc, #24]	; (800cd28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	091b      	lsrs	r3, r3, #4
 800cd14:	f003 0307 	and.w	r3, r3, #7
 800cd18:	4904      	ldr	r1, [pc, #16]	; (800cd2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd1a:	5ccb      	ldrb	r3, [r1, r3]
 800cd1c:	f003 031f 	and.w	r3, r3, #31
 800cd20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	58024400 	.word	0x58024400
 800cd2c:	080176e0 	.word	0x080176e0

0800cd30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b089      	sub	sp, #36	; 0x24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd38:	4ba1      	ldr	r3, [pc, #644]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	f003 0303 	and.w	r3, r3, #3
 800cd40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd42:	4b9f      	ldr	r3, [pc, #636]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd46:	0b1b      	lsrs	r3, r3, #12
 800cd48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd4e:	4b9c      	ldr	r3, [pc, #624]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd52:	091b      	lsrs	r3, r3, #4
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cd5a:	4b99      	ldr	r3, [pc, #612]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	08db      	lsrs	r3, r3, #3
 800cd60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	fb02 f303 	mul.w	r3, r2, r3
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 8111 	beq.w	800cfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	f000 8083 	beq.w	800ce8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	f200 80a1 	bhi.w	800ced0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d056      	beq.n	800ce48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd9a:	e099      	b.n	800ced0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd9c:	4b88      	ldr	r3, [pc, #544]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0320 	and.w	r3, r3, #32
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d02d      	beq.n	800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cda8:	4b85      	ldr	r3, [pc, #532]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	08db      	lsrs	r3, r3, #3
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	4a84      	ldr	r2, [pc, #528]	; (800cfc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	ee07 3a90 	vmov	s15, r3
 800cdc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	ee07 3a90 	vmov	s15, r3
 800cdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd2:	4b7b      	ldr	r3, [pc, #492]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce02:	e087      	b.n	800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cfcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce16:	4b6a      	ldr	r3, [pc, #424]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce46:	e065      	b.n	800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cfd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5a:	4b59      	ldr	r3, [pc, #356]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce8a:	e043      	b.n	800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cfd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9e:	4b48      	ldr	r3, [pc, #288]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceae:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cece:	e021      	b.n	800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cfd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee2:	4b37      	ldr	r3, [pc, #220]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cef6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cfc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf14:	4b2a      	ldr	r3, [pc, #168]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf18:	0a5b      	lsrs	r3, r3, #9
 800cf1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf3a:	ee17 2a90 	vmov	r2, s15
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf42:	4b1f      	ldr	r3, [pc, #124]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	0c1b      	lsrs	r3, r3, #16
 800cf48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf68:	ee17 2a90 	vmov	r2, s15
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cf70:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf74:	0e1b      	lsrs	r3, r3, #24
 800cf76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf96:	ee17 2a90 	vmov	r2, s15
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf9e:	e008      	b.n	800cfb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	609a      	str	r2, [r3, #8]
}
 800cfb2:	bf00      	nop
 800cfb4:	3724      	adds	r7, #36	; 0x24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	58024400 	.word	0x58024400
 800cfc4:	03d09000 	.word	0x03d09000
 800cfc8:	46000000 	.word	0x46000000
 800cfcc:	4c742400 	.word	0x4c742400
 800cfd0:	4a742400 	.word	0x4a742400
 800cfd4:	4bbebc20 	.word	0x4bbebc20

0800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b089      	sub	sp, #36	; 0x24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfe0:	4ba1      	ldr	r3, [pc, #644]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cfea:	4b9f      	ldr	r3, [pc, #636]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfee:	0d1b      	lsrs	r3, r3, #20
 800cff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cff4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cff6:	4b9c      	ldr	r3, [pc, #624]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffa:	0a1b      	lsrs	r3, r3, #8
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d002:	4b99      	ldr	r3, [pc, #612]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d006:	08db      	lsrs	r3, r3, #3
 800d008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	fb02 f303 	mul.w	r3, r2, r3
 800d012:	ee07 3a90 	vmov	s15, r3
 800d016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 8111 	beq.w	800d248 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	f000 8083 	beq.w	800d134 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	2b02      	cmp	r3, #2
 800d032:	f200 80a1 	bhi.w	800d178 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d056      	beq.n	800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d042:	e099      	b.n	800d178 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d044:	4b88      	ldr	r3, [pc, #544]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 0320 	and.w	r3, r3, #32
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d02d      	beq.n	800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d050:	4b85      	ldr	r3, [pc, #532]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	08db      	lsrs	r3, r3, #3
 800d056:	f003 0303 	and.w	r3, r3, #3
 800d05a:	4a84      	ldr	r2, [pc, #528]	; (800d26c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d05c:	fa22 f303 	lsr.w	r3, r2, r3
 800d060:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	ee07 3a90 	vmov	s15, r3
 800d068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	ee07 3a90 	vmov	s15, r3
 800d072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d07a:	4b7b      	ldr	r3, [pc, #492]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0aa:	e087      	b.n	800d1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d274 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0be:	4b6a      	ldr	r3, [pc, #424]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ee:	e065      	b.n	800d1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d102:	4b59      	ldr	r3, [pc, #356]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10a:	ee07 3a90 	vmov	s15, r3
 800d10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d112:	ed97 6a03 	vldr	s12, [r7, #12]
 800d116:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d132:	e043      	b.n	800d1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	ee07 3a90 	vmov	s15, r3
 800d13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d27c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d146:	4b48      	ldr	r3, [pc, #288]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d156:	ed97 6a03 	vldr	s12, [r7, #12]
 800d15a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d176:	e021      	b.n	800d1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	ee07 3a90 	vmov	s15, r3
 800d17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d182:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d278 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18a:	4b37      	ldr	r3, [pc, #220]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d192:	ee07 3a90 	vmov	s15, r3
 800d196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d19e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d270 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d1bc:	4b2a      	ldr	r3, [pc, #168]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c0:	0a5b      	lsrs	r3, r3, #9
 800d1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e2:	ee17 2a90 	vmov	r2, s15
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d1ea:	4b1f      	ldr	r3, [pc, #124]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ee:	0c1b      	lsrs	r3, r3, #16
 800d1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1f4:	ee07 3a90 	vmov	s15, r3
 800d1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d200:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d204:	edd7 6a07 	vldr	s13, [r7, #28]
 800d208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d210:	ee17 2a90 	vmov	r2, s15
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d218:	4b13      	ldr	r3, [pc, #76]	; (800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21c:	0e1b      	lsrs	r3, r3, #24
 800d21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d22e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d232:	edd7 6a07 	vldr	s13, [r7, #28]
 800d236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d23a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d23e:	ee17 2a90 	vmov	r2, s15
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d246:	e008      	b.n	800d25a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	609a      	str	r2, [r3, #8]
}
 800d25a:	bf00      	nop
 800d25c:	3724      	adds	r7, #36	; 0x24
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	58024400 	.word	0x58024400
 800d26c:	03d09000 	.word	0x03d09000
 800d270:	46000000 	.word	0x46000000
 800d274:	4c742400 	.word	0x4c742400
 800d278:	4a742400 	.word	0x4a742400
 800d27c:	4bbebc20 	.word	0x4bbebc20

0800d280 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d280:	b480      	push	{r7}
 800d282:	b089      	sub	sp, #36	; 0x24
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d288:	4ba0      	ldr	r3, [pc, #640]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d292:	4b9e      	ldr	r3, [pc, #632]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d296:	091b      	lsrs	r3, r3, #4
 800d298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d29c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d29e:	4b9b      	ldr	r3, [pc, #620]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d2a8:	4b98      	ldr	r3, [pc, #608]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ac:	08db      	lsrs	r3, r3, #3
 800d2ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	fb02 f303 	mul.w	r3, r2, r3
 800d2b8:	ee07 3a90 	vmov	s15, r3
 800d2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 8111 	beq.w	800d4ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	f000 8083 	beq.w	800d3da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	f200 80a1 	bhi.w	800d41e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d003      	beq.n	800d2ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d056      	beq.n	800d396 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d2e8:	e099      	b.n	800d41e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2ea:	4b88      	ldr	r3, [pc, #544]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d02d      	beq.n	800d352 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2f6:	4b85      	ldr	r3, [pc, #532]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	08db      	lsrs	r3, r3, #3
 800d2fc:	f003 0303 	and.w	r3, r3, #3
 800d300:	4a83      	ldr	r2, [pc, #524]	; (800d510 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d302:	fa22 f303 	lsr.w	r3, r2, r3
 800d306:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	ee07 3a90 	vmov	s15, r3
 800d30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	ee07 3a90 	vmov	s15, r3
 800d318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d320:	4b7a      	ldr	r3, [pc, #488]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d328:	ee07 3a90 	vmov	s15, r3
 800d32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d330:	ed97 6a03 	vldr	s12, [r7, #12]
 800d334:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d350:	e087      	b.n	800d462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	ee07 3a90 	vmov	s15, r3
 800d358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d518 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d364:	4b69      	ldr	r3, [pc, #420]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36c:	ee07 3a90 	vmov	s15, r3
 800d370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d374:	ed97 6a03 	vldr	s12, [r7, #12]
 800d378:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d37c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d394:	e065      	b.n	800d462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	ee07 3a90 	vmov	s15, r3
 800d39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d51c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3a8:	4b58      	ldr	r3, [pc, #352]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b0:	ee07 3a90 	vmov	s15, r3
 800d3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3d8:	e043      	b.n	800d462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	ee07 3a90 	vmov	s15, r3
 800d3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d520 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d3e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ec:	4b47      	ldr	r3, [pc, #284]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f4:	ee07 3a90 	vmov	s15, r3
 800d3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d400:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d40c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d41c:	e021      	b.n	800d462 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	ee07 3a90 	vmov	s15, r3
 800d424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d428:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d518 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d42c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d430:	4b36      	ldr	r3, [pc, #216]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d438:	ee07 3a90 	vmov	s15, r3
 800d43c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d440:	ed97 6a03 	vldr	s12, [r7, #12]
 800d444:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d44c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d460:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d462:	4b2a      	ldr	r3, [pc, #168]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d466:	0a5b      	lsrs	r3, r3, #9
 800d468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d46c:	ee07 3a90 	vmov	s15, r3
 800d470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d47c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d488:	ee17 2a90 	vmov	r2, s15
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d490:	4b1e      	ldr	r3, [pc, #120]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b6:	ee17 2a90 	vmov	r2, s15
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	0e1b      	lsrs	r3, r3, #24
 800d4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c8:	ee07 3a90 	vmov	s15, r3
 800d4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4e4:	ee17 2a90 	vmov	r2, s15
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d4ec:	e008      	b.n	800d500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	609a      	str	r2, [r3, #8]
}
 800d500:	bf00      	nop
 800d502:	3724      	adds	r7, #36	; 0x24
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	58024400 	.word	0x58024400
 800d510:	03d09000 	.word	0x03d09000
 800d514:	46000000 	.word	0x46000000
 800d518:	4c742400 	.word	0x4c742400
 800d51c:	4a742400 	.word	0x4a742400
 800d520:	4bbebc20 	.word	0x4bbebc20

0800d524 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d532:	4b53      	ldr	r3, [pc, #332]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	f003 0303 	and.w	r3, r3, #3
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d101      	bne.n	800d542 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	e099      	b.n	800d676 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d542:	4b4f      	ldr	r3, [pc, #316]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a4e      	ldr	r2, [pc, #312]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d54c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d54e:	f7f6 fc53 	bl	8003df8 <HAL_GetTick>
 800d552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d554:	e008      	b.n	800d568 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d556:	f7f6 fc4f 	bl	8003df8 <HAL_GetTick>
 800d55a:	4602      	mov	r2, r0
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	2b02      	cmp	r3, #2
 800d562:	d901      	bls.n	800d568 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d564:	2303      	movs	r3, #3
 800d566:	e086      	b.n	800d676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d568:	4b45      	ldr	r3, [pc, #276]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1f0      	bne.n	800d556 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d574:	4b42      	ldr	r3, [pc, #264]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d578:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	031b      	lsls	r3, r3, #12
 800d582:	493f      	ldr	r1, [pc, #252]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d584:	4313      	orrs	r3, r2
 800d586:	628b      	str	r3, [r1, #40]	; 0x28
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	3b01      	subs	r3, #1
 800d598:	025b      	lsls	r3, r3, #9
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	431a      	orrs	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	041b      	lsls	r3, r3, #16
 800d5a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	061b      	lsls	r3, r3, #24
 800d5b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5b8:	4931      	ldr	r1, [pc, #196]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d5be:	4b30      	ldr	r3, [pc, #192]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	492d      	ldr	r1, [pc, #180]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d5d0:	4b2b      	ldr	r3, [pc, #172]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d4:	f023 0220 	bic.w	r2, r3, #32
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	4928      	ldr	r1, [pc, #160]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d5e2:	4b27      	ldr	r3, [pc, #156]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e6:	4a26      	ldr	r2, [pc, #152]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5e8:	f023 0310 	bic.w	r3, r3, #16
 800d5ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d5ee:	4b24      	ldr	r3, [pc, #144]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5f2:	4b24      	ldr	r3, [pc, #144]	; (800d684 <RCCEx_PLL2_Config+0x160>)
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	69d2      	ldr	r2, [r2, #28]
 800d5fa:	00d2      	lsls	r2, r2, #3
 800d5fc:	4920      	ldr	r1, [pc, #128]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d602:	4b1f      	ldr	r3, [pc, #124]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	4a1e      	ldr	r2, [pc, #120]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d608:	f043 0310 	orr.w	r3, r3, #16
 800d60c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d614:	4b1a      	ldr	r3, [pc, #104]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	4a19      	ldr	r2, [pc, #100]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d61a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d61e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d620:	e00f      	b.n	800d642 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d106      	bne.n	800d636 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d628:	4b15      	ldr	r3, [pc, #84]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62c:	4a14      	ldr	r2, [pc, #80]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d632:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d634:	e005      	b.n	800d642 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d636:	4b12      	ldr	r3, [pc, #72]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	4a11      	ldr	r2, [pc, #68]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d63c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d640:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d642:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a0e      	ldr	r2, [pc, #56]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d64c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d64e:	f7f6 fbd3 	bl	8003df8 <HAL_GetTick>
 800d652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d654:	e008      	b.n	800d668 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d656:	f7f6 fbcf 	bl	8003df8 <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	2b02      	cmp	r3, #2
 800d662:	d901      	bls.n	800d668 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e006      	b.n	800d676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <RCCEx_PLL2_Config+0x15c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d670:	2b00      	cmp	r3, #0
 800d672:	d0f0      	beq.n	800d656 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	58024400 	.word	0x58024400
 800d684:	ffff0007 	.word	0xffff0007

0800d688 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d696:	4b53      	ldr	r3, [pc, #332]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69a:	f003 0303 	and.w	r3, r3, #3
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d101      	bne.n	800d6a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e099      	b.n	800d7da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d6a6:	4b4f      	ldr	r3, [pc, #316]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a4e      	ldr	r2, [pc, #312]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d6ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6b2:	f7f6 fba1 	bl	8003df8 <HAL_GetTick>
 800d6b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6b8:	e008      	b.n	800d6cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6ba:	f7f6 fb9d 	bl	8003df8 <HAL_GetTick>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d901      	bls.n	800d6cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	e086      	b.n	800d7da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6cc:	4b45      	ldr	r3, [pc, #276]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1f0      	bne.n	800d6ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d6d8:	4b42      	ldr	r3, [pc, #264]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	051b      	lsls	r3, r3, #20
 800d6e6:	493f      	ldr	r1, [pc, #252]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	628b      	str	r3, [r1, #40]	; 0x28
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	025b      	lsls	r3, r3, #9
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	431a      	orrs	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	3b01      	subs	r3, #1
 800d708:	041b      	lsls	r3, r3, #16
 800d70a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d70e:	431a      	orrs	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	3b01      	subs	r3, #1
 800d716:	061b      	lsls	r3, r3, #24
 800d718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d71c:	4931      	ldr	r1, [pc, #196]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d722:	4b30      	ldr	r3, [pc, #192]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	492d      	ldr	r1, [pc, #180]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d730:	4313      	orrs	r3, r2
 800d732:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d734:	4b2b      	ldr	r3, [pc, #172]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d738:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	4928      	ldr	r1, [pc, #160]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d742:	4313      	orrs	r3, r2
 800d744:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d746:	4b27      	ldr	r3, [pc, #156]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74a:	4a26      	ldr	r2, [pc, #152]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d74c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d752:	4b24      	ldr	r3, [pc, #144]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d756:	4b24      	ldr	r3, [pc, #144]	; (800d7e8 <RCCEx_PLL3_Config+0x160>)
 800d758:	4013      	ands	r3, r2
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	69d2      	ldr	r2, [r2, #28]
 800d75e:	00d2      	lsls	r2, r2, #3
 800d760:	4920      	ldr	r1, [pc, #128]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d762:	4313      	orrs	r3, r2
 800d764:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d766:	4b1f      	ldr	r3, [pc, #124]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76a:	4a1e      	ldr	r2, [pc, #120]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d76c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d778:	4b1a      	ldr	r3, [pc, #104]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77c:	4a19      	ldr	r2, [pc, #100]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d77e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d782:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d784:	e00f      	b.n	800d7a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d106      	bne.n	800d79a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d78c:	4b15      	ldr	r3, [pc, #84]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	4a14      	ldr	r2, [pc, #80]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d792:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d796:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d798:	e005      	b.n	800d7a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d79a:	4b12      	ldr	r3, [pc, #72]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79e:	4a11      	ldr	r2, [pc, #68]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d7a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a0e      	ldr	r2, [pc, #56]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d7ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7b2:	f7f6 fb21 	bl	8003df8 <HAL_GetTick>
 800d7b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7b8:	e008      	b.n	800d7cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d7ba:	f7f6 fb1d 	bl	8003df8 <HAL_GetTick>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d901      	bls.n	800d7cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e006      	b.n	800d7da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7cc:	4b05      	ldr	r3, [pc, #20]	; (800d7e4 <RCCEx_PLL3_Config+0x15c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d0f0      	beq.n	800d7ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	58024400 	.word	0x58024400
 800d7e8:	ffff0007 	.word	0xffff0007

0800d7ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d071      	beq.n	800d8e2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7f5 fd88 	bl	8003328 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2202      	movs	r2, #2
 800d81c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	f003 0310 	and.w	r3, r3, #16
 800d82a:	2b10      	cmp	r3, #16
 800d82c:	d050      	beq.n	800d8d0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	22ca      	movs	r2, #202	; 0xca
 800d834:	625a      	str	r2, [r3, #36]	; 0x24
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2253      	movs	r2, #83	; 0x53
 800d83c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fa4a 	bl	800dcd8 <RTC_EnterInitMode>
 800d844:	4603      	mov	r3, r0
 800d846:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d124      	bne.n	800d898 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6899      	ldr	r1, [r3, #8]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	4b24      	ldr	r3, [pc, #144]	; (800d8ec <HAL_RTC_Init+0x100>)
 800d85a:	400b      	ands	r3, r1
 800d85c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6899      	ldr	r1, [r3, #8]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	431a      	orrs	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	431a      	orrs	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	430a      	orrs	r2, r1
 800d87a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	0419      	lsls	r1, r3, #16
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68da      	ldr	r2, [r3, #12]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	430a      	orrs	r2, r1
 800d88c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fa56 	bl	800dd40 <RTC_ExitInitMode>
 800d894:	4603      	mov	r3, r0
 800d896:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d113      	bne.n	800d8c6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f022 0203 	bic.w	r2, r2, #3
 800d8ac:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	69da      	ldr	r2, [r3, #28]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	22ff      	movs	r2, #255	; 0xff
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24
 800d8ce:	e001      	b.n	800d8d4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d103      	bne.n	800d8e2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	ff8fffbf 	.word	0xff8fffbf

0800d8f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d8f0:	b590      	push	{r4, r7, lr}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d101      	bne.n	800d90a <HAL_RTC_SetTime+0x1a>
 800d906:	2302      	movs	r3, #2
 800d908:	e089      	b.n	800da1e <HAL_RTC_SetTime+0x12e>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2202      	movs	r2, #2
 800d916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	22ca      	movs	r2, #202	; 0xca
 800d920:	625a      	str	r2, [r3, #36]	; 0x24
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2253      	movs	r2, #83	; 0x53
 800d928:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f000 f9d4 	bl	800dcd8 <RTC_EnterInitMode>
 800d930:	4603      	mov	r3, r0
 800d932:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d934:	7cfb      	ldrb	r3, [r7, #19]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d161      	bne.n	800d9fe <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d126      	bne.n	800d98e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2200      	movs	r2, #0
 800d952:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fa2f 	bl	800ddbc <RTC_ByteToBcd2>
 800d95e:	4603      	mov	r3, r0
 800d960:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 fa28 	bl	800ddbc <RTC_ByteToBcd2>
 800d96c:	4603      	mov	r3, r0
 800d96e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d970:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	789b      	ldrb	r3, [r3, #2]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fa20 	bl	800ddbc <RTC_ByteToBcd2>
 800d97c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d97e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	78db      	ldrb	r3, [r3, #3]
 800d986:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d988:	4313      	orrs	r3, r2
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e018      	b.n	800d9c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	785b      	ldrb	r3, [r3, #1]
 800d9ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	78db      	ldrb	r3, [r3, #3]
 800d9ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	6979      	ldr	r1, [r7, #20]
 800d9c6:	4b18      	ldr	r3, [pc, #96]	; (800da28 <HAL_RTC_SetTime+0x138>)
 800d9c8:	400b      	ands	r3, r1
 800d9ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689a      	ldr	r2, [r3, #8]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d9da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6899      	ldr	r1, [r3, #8]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	68da      	ldr	r2, [r3, #12]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f000 f9a3 	bl	800dd40 <RTC_ExitInitMode>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	22ff      	movs	r2, #255	; 0xff
 800da04:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da06:	7cfb      	ldrb	r3, [r7, #19]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da1c:	7cfb      	ldrb	r3, [r7, #19]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	bd90      	pop	{r4, r7, pc}
 800da26:	bf00      	nop
 800da28:	007f7f7f 	.word	0x007f7f7f

0800da2c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	4b22      	ldr	r3, [pc, #136]	; (800dae0 <HAL_RTC_GetTime+0xb4>)
 800da58:	4013      	ands	r3, r2
 800da5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	0c1b      	lsrs	r3, r3, #16
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da66:	b2da      	uxtb	r2, r3
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	0a1b      	lsrs	r3, r3, #8
 800da70:	b2db      	uxtb	r3, r3
 800da72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da76:	b2da      	uxtb	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da84:	b2da      	uxtb	r2, r3
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	0d9b      	lsrs	r3, r3, #22
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	b2da      	uxtb	r2, r3
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d11a      	bne.n	800dad6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f9a9 	bl	800ddfc <RTC_Bcd2ToByte>
 800daaa:	4603      	mov	r3, r0
 800daac:	461a      	mov	r2, r3
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f9a0 	bl	800ddfc <RTC_Bcd2ToByte>
 800dabc:	4603      	mov	r3, r0
 800dabe:	461a      	mov	r2, r3
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	789b      	ldrb	r3, [r3, #2]
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f997 	bl	800ddfc <RTC_Bcd2ToByte>
 800dace:	4603      	mov	r3, r0
 800dad0:	461a      	mov	r2, r3
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	007f7f7f 	.word	0x007f7f7f

0800dae4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d101      	bne.n	800dafe <HAL_RTC_SetDate+0x1a>
 800dafa:	2302      	movs	r3, #2
 800dafc:	e073      	b.n	800dbe6 <HAL_RTC_SetDate+0x102>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2201      	movs	r2, #1
 800db02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10e      	bne.n	800db32 <HAL_RTC_SetDate+0x4e>
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	785b      	ldrb	r3, [r3, #1]
 800db18:	f003 0310 	and.w	r3, r3, #16
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d008      	beq.n	800db32 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	785b      	ldrb	r3, [r3, #1]
 800db24:	f023 0310 	bic.w	r3, r3, #16
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	330a      	adds	r3, #10
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d11c      	bne.n	800db72 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	78db      	ldrb	r3, [r3, #3]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f93d 	bl	800ddbc <RTC_ByteToBcd2>
 800db42:	4603      	mov	r3, r0
 800db44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 f936 	bl	800ddbc <RTC_ByteToBcd2>
 800db50:	4603      	mov	r3, r0
 800db52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 f92e 	bl	800ddbc <RTC_ByteToBcd2>
 800db60:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db62:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e00e      	b.n	800db90 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	78db      	ldrb	r3, [r3, #3]
 800db76:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	785b      	ldrb	r3, [r3, #1]
 800db7c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db7e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800db84:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800db8c:	4313      	orrs	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	22ca      	movs	r2, #202	; 0xca
 800db96:	625a      	str	r2, [r3, #36]	; 0x24
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2253      	movs	r2, #83	; 0x53
 800db9e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f000 f899 	bl	800dcd8 <RTC_EnterInitMode>
 800dba6:	4603      	mov	r3, r0
 800dba8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbaa:	7cfb      	ldrb	r3, [r7, #19]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6979      	ldr	r1, [r7, #20]
 800dbb6:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <HAL_RTC_SetDate+0x10c>)
 800dbb8:	400b      	ands	r3, r1
 800dbba:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 f8bf 	bl	800dd40 <RTC_ExitInitMode>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	22ff      	movs	r2, #255	; 0xff
 800dbcc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dbce:	7cfb      	ldrb	r3, [r7, #19]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dbe4:	7cfb      	ldrb	r3, [r7, #19]


}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	371c      	adds	r7, #28
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd90      	pop	{r4, r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	00ffff3f 	.word	0x00ffff3f

0800dbf4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	4b21      	ldr	r3, [pc, #132]	; (800dc8c <HAL_RTC_GetDate+0x98>)
 800dc08:	4013      	ands	r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	0c1b      	lsrs	r3, r3, #16
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	0a1b      	lsrs	r3, r3, #8
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	f003 031f 	and.w	r3, r3, #31
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	0b5b      	lsrs	r3, r3, #13
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 0307 	and.w	r3, r3, #7
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d11a      	bne.n	800dc80 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	78db      	ldrb	r3, [r3, #3]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 f8d4 	bl	800ddfc <RTC_Bcd2ToByte>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 f8cb 	bl	800ddfc <RTC_Bcd2ToByte>
 800dc66:	4603      	mov	r3, r0
 800dc68:	461a      	mov	r2, r3
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	789b      	ldrb	r3, [r3, #2]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 f8c2 	bl	800ddfc <RTC_Bcd2ToByte>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	00ffff3f 	.word	0x00ffff3f

0800dc90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a0d      	ldr	r2, [pc, #52]	; (800dcd4 <HAL_RTC_WaitForSynchro+0x44>)
 800dc9e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dca0:	f7f6 f8aa 	bl	8003df8 <HAL_GetTick>
 800dca4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dca6:	e009      	b.n	800dcbc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dca8:	f7f6 f8a6 	bl	8003df8 <HAL_GetTick>
 800dcac:	4602      	mov	r2, r0
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcb6:	d901      	bls.n	800dcbc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	e007      	b.n	800dccc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	f003 0320 	and.w	r3, r3, #32
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0ee      	beq.n	800dca8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	0003ff5f 	.word	0x0003ff5f

0800dcd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d120      	bne.n	800dd34 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dcfc:	f7f6 f87c 	bl	8003df8 <HAL_GetTick>
 800dd00:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd02:	e00d      	b.n	800dd20 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd04:	f7f6 f878 	bl	8003df8 <HAL_GetTick>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd12:	d905      	bls.n	800dd20 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd14:	2303      	movs	r3, #3
 800dd16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2203      	movs	r2, #3
 800dd1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <RTC_EnterInitMode+0x5c>
 800dd2e:	7bfb      	ldrb	r3, [r7, #15]
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d1e7      	bne.n	800dd04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
	...

0800dd40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dd4c:	4b1a      	ldr	r3, [pc, #104]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	4a19      	ldr	r2, [pc, #100]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dd52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd56:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd58:	4b17      	ldr	r3, [pc, #92]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	f003 0320 	and.w	r3, r3, #32
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10c      	bne.n	800dd7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff ff93 	bl	800dc90 <HAL_RTC_WaitForSynchro>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01e      	beq.n	800ddae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2203      	movs	r2, #3
 800dd74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	73fb      	strb	r3, [r7, #15]
 800dd7c:	e017      	b.n	800ddae <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dd7e:	4b0e      	ldr	r3, [pc, #56]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	4a0d      	ldr	r2, [pc, #52]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dd84:	f023 0320 	bic.w	r3, r3, #32
 800dd88:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7ff ff80 	bl	800dc90 <HAL_RTC_WaitForSynchro>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2203      	movs	r2, #3
 800dd9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dda2:	4b05      	ldr	r3, [pc, #20]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	4a04      	ldr	r2, [pc, #16]	; (800ddb8 <RTC_ExitInitMode+0x78>)
 800dda8:	f043 0320 	orr.w	r3, r3, #32
 800ddac:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	58004000 	.word	0x58004000

0800ddbc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ddce:	e005      	b.n	800dddc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ddd6:	7afb      	ldrb	r3, [r7, #11]
 800ddd8:	3b0a      	subs	r3, #10
 800ddda:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dddc:	7afb      	ldrb	r3, [r7, #11]
 800ddde:	2b09      	cmp	r3, #9
 800dde0:	d8f6      	bhi.n	800ddd0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	011b      	lsls	r3, r3, #4
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	7afb      	ldrb	r3, [r7, #11]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	b2db      	uxtb	r3, r3
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	091b      	lsrs	r3, r3, #4
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	461a      	mov	r2, r3
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	4413      	add	r3, r2
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	f003 030f 	and.w	r3, r3, #15
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	4413      	add	r3, r2
 800de22:	b2db      	uxtb	r3, r3
}
 800de24:	4618      	mov	r0, r3
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e10f      	b.n	800e062 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a87      	ldr	r2, [pc, #540]	; (800e06c <HAL_SPI_Init+0x23c>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d00f      	beq.n	800de72 <HAL_SPI_Init+0x42>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a86      	ldr	r2, [pc, #536]	; (800e070 <HAL_SPI_Init+0x240>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d00a      	beq.n	800de72 <HAL_SPI_Init+0x42>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a84      	ldr	r2, [pc, #528]	; (800e074 <HAL_SPI_Init+0x244>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d005      	beq.n	800de72 <HAL_SPI_Init+0x42>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	2b0f      	cmp	r3, #15
 800de6c:	d901      	bls.n	800de72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	e0f7      	b.n	800e062 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fc12 	bl	800e69c <SPI_GetPacketSize>
 800de78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a7b      	ldr	r2, [pc, #492]	; (800e06c <HAL_SPI_Init+0x23c>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d00c      	beq.n	800de9e <HAL_SPI_Init+0x6e>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a79      	ldr	r2, [pc, #484]	; (800e070 <HAL_SPI_Init+0x240>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d007      	beq.n	800de9e <HAL_SPI_Init+0x6e>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a78      	ldr	r2, [pc, #480]	; (800e074 <HAL_SPI_Init+0x244>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d002      	beq.n	800de9e <HAL_SPI_Init+0x6e>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b08      	cmp	r3, #8
 800de9c:	d811      	bhi.n	800dec2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dea2:	4a72      	ldr	r2, [pc, #456]	; (800e06c <HAL_SPI_Init+0x23c>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d009      	beq.n	800debc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a70      	ldr	r2, [pc, #448]	; (800e070 <HAL_SPI_Init+0x240>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d004      	beq.n	800debc <HAL_SPI_Init+0x8c>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a6f      	ldr	r2, [pc, #444]	; (800e074 <HAL_SPI_Init+0x244>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d104      	bne.n	800dec6 <HAL_SPI_Init+0x96>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b10      	cmp	r3, #16
 800dec0:	d901      	bls.n	800dec6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	e0cd      	b.n	800e062 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7f5 fa58 	bl	8003390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2202      	movs	r2, #2
 800dee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f022 0201 	bic.w	r2, r2, #1
 800def6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df0c:	d119      	bne.n	800df42 <HAL_SPI_Init+0x112>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df16:	d103      	bne.n	800df20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d008      	beq.n	800df32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10c      	bne.n	800df42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df30:	d107      	bne.n	800df42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00f      	beq.n	800df6e <HAL_SPI_Init+0x13e>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	2b06      	cmp	r3, #6
 800df54:	d90b      	bls.n	800df6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	430a      	orrs	r2, r1
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	e007      	b.n	800df7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	69da      	ldr	r2, [r3, #28]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df86:	431a      	orrs	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	431a      	orrs	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df90:	ea42 0103 	orr.w	r1, r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa8:	431a      	orrs	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	431a      	orrs	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	431a      	orrs	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	431a      	orrs	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	431a      	orrs	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfde:	ea42 0103 	orr.w	r1, r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	430a      	orrs	r2, r1
 800dfec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d113      	bne.n	800e01e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e008:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e01c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f022 0201 	bic.w	r2, r2, #1
 800e02c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	430a      	orrs	r2, r1
 800e04e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	40013000 	.word	0x40013000
 800e070:	40003800 	.word	0x40003800
 800e074:	40003c00 	.word	0x40003c00

0800e078 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	4613      	mov	r3, r2
 800e086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08c:	095b      	lsrs	r3, r3, #5
 800e08e:	b29b      	uxth	r3, r3
 800e090:	3301      	adds	r3, #1
 800e092:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3330      	adds	r3, #48	; 0x30
 800e09a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e09c:	f7f5 feac 	bl	8003df8 <HAL_GetTick>
 800e0a0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d001      	beq.n	800e0b2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	e250      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <HAL_SPI_Receive+0x46>
 800e0b8:	88fb      	ldrh	r3, [r7, #6]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e248      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d101      	bne.n	800e0d0 <HAL_SPI_Receive+0x58>
 800e0cc:	2302      	movs	r3, #2
 800e0ce:	e241      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2204      	movs	r2, #4
 800e0dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	88fa      	ldrh	r2, [r7, #6]
 800e0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	88fa      	ldrh	r2, [r7, #6]
 800e0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2200      	movs	r2, #0
 800e11e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e128:	d108      	bne.n	800e13c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e009      	b.n	800e150 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e14e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	4b95      	ldr	r3, [pc, #596]	; (800e3ac <HAL_SPI_Receive+0x334>)
 800e158:	4013      	ands	r3, r2
 800e15a:	88f9      	ldrh	r1, [r7, #6]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	6812      	ldr	r2, [r2, #0]
 800e160:	430b      	orrs	r3, r1
 800e162:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f042 0201 	orr.w	r2, r2, #1
 800e172:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e17c:	d107      	bne.n	800e18e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e18c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	2b0f      	cmp	r3, #15
 800e194:	d96c      	bls.n	800e270 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e196:	e064      	b.n	800e262 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	695b      	ldr	r3, [r3, #20]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d114      	bne.n	800e1d8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1be:	1d1a      	adds	r2, r3, #4
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1d6:	e044      	b.n	800e262 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	8bfa      	ldrh	r2, [r7, #30]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d919      	bls.n	800e21a <HAL_SPI_Receive+0x1a2>
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d014      	beq.n	800e21a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1fa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e200:	1d1a      	adds	r2, r3, #4
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	3b01      	subs	r3, #1
 800e210:	b29a      	uxth	r2, r3
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e218:	e023      	b.n	800e262 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e21a:	f7f5 fded 	bl	8003df8 <HAL_GetTick>
 800e21e:	4602      	mov	r2, r0
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d803      	bhi.n	800e232 <HAL_SPI_Receive+0x1ba>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e230:	d102      	bne.n	800e238 <HAL_SPI_Receive+0x1c0>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d114      	bne.n	800e262 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f98f 	bl	800e55c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e25e:	2303      	movs	r3, #3
 800e260:	e178      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e268:	b29b      	uxth	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d194      	bne.n	800e198 <HAL_SPI_Receive+0x120>
 800e26e:	e15e      	b.n	800e52e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	2b07      	cmp	r3, #7
 800e276:	f240 8153 	bls.w	800e520 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e27a:	e08f      	b.n	800e39c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	695b      	ldr	r3, [r3, #20]
 800e282:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d114      	bne.n	800e2bc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e296:	69ba      	ldr	r2, [r7, #24]
 800e298:	8812      	ldrh	r2, [r2, #0]
 800e29a:	b292      	uxth	r2, r2
 800e29c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a2:	1c9a      	adds	r2, r3, #2
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2ba:	e06f      	b.n	800e39c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	8bfa      	ldrh	r2, [r7, #30]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d924      	bls.n	800e314 <HAL_SPI_Receive+0x29c>
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01f      	beq.n	800e314 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	8812      	ldrh	r2, [r2, #0]
 800e2dc:	b292      	uxth	r2, r2
 800e2de:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e4:	1c9a      	adds	r2, r3, #2
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ee:	69ba      	ldr	r2, [r7, #24]
 800e2f0:	8812      	ldrh	r2, [r2, #0]
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fa:	1c9a      	adds	r2, r3, #2
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e306:	b29b      	uxth	r3, r3
 800e308:	3b02      	subs	r3, #2
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e312:	e043      	b.n	800e39c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d119      	bne.n	800e354 <HAL_SPI_Receive+0x2dc>
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e326:	2b00      	cmp	r3, #0
 800e328:	d014      	beq.n	800e354 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	8812      	ldrh	r2, [r2, #0]
 800e332:	b292      	uxth	r2, r2
 800e334:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33a:	1c9a      	adds	r2, r3, #2
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e346:	b29b      	uxth	r3, r3
 800e348:	3b01      	subs	r3, #1
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e352:	e023      	b.n	800e39c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e354:	f7f5 fd50 	bl	8003df8 <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	683a      	ldr	r2, [r7, #0]
 800e360:	429a      	cmp	r2, r3
 800e362:	d803      	bhi.n	800e36c <HAL_SPI_Receive+0x2f4>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e36a:	d102      	bne.n	800e372 <HAL_SPI_Receive+0x2fa>
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d114      	bne.n	800e39c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f000 f8f2 	bl	800e55c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e37e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e398:	2303      	movs	r3, #3
 800e39a:	e0db      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f47f af69 	bne.w	800e27c <HAL_SPI_Receive+0x204>
 800e3aa:	e0c0      	b.n	800e52e <HAL_SPI_Receive+0x4b6>
 800e3ac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	695b      	ldr	r3, [r3, #20]
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d117      	bne.n	800e3f6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d2:	7812      	ldrb	r2, [r2, #0]
 800e3d4:	b2d2      	uxtb	r2, r2
 800e3d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3f4:	e094      	b.n	800e520 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	8bfa      	ldrh	r2, [r7, #30]
 800e400:	429a      	cmp	r2, r3
 800e402:	d946      	bls.n	800e492 <HAL_SPI_Receive+0x41a>
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d041      	beq.n	800e492 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e436:	7812      	ldrb	r2, [r2, #0]
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e440:	1c5a      	adds	r2, r3, #1
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e452:	7812      	ldrb	r2, [r2, #0]
 800e454:	b2d2      	uxtb	r2, r2
 800e456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46e:	7812      	ldrb	r2, [r2, #0]
 800e470:	b2d2      	uxtb	r2, r2
 800e472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e478:	1c5a      	adds	r2, r3, #1
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e484:	b29b      	uxth	r3, r3
 800e486:	3b04      	subs	r3, #4
 800e488:	b29a      	uxth	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e490:	e046      	b.n	800e520 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e498:	b29b      	uxth	r3, r3
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d81c      	bhi.n	800e4d8 <HAL_SPI_Receive+0x460>
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d017      	beq.n	800e4d8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	b2d2      	uxtb	r2, r2
 800e4b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4d6:	e023      	b.n	800e520 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d8:	f7f5 fc8e 	bl	8003df8 <HAL_GetTick>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d803      	bhi.n	800e4f0 <HAL_SPI_Receive+0x478>
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ee:	d102      	bne.n	800e4f6 <HAL_SPI_Receive+0x47e>
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d114      	bne.n	800e520 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f000 f830 	bl	800e55c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e51c:	2303      	movs	r3, #3
 800e51e:	e019      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e526:	b29b      	uxth	r3, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f47f af41 	bne.w	800e3b0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f000 f814 	bl	800e55c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e000      	b.n	800e554 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e552:	2300      	movs	r3, #0
  }
}
 800e554:	4618      	mov	r0, r3
 800e556:	3720      	adds	r7, #32
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	699a      	ldr	r2, [r3, #24]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f042 0208 	orr.w	r2, r2, #8
 800e57a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f042 0210 	orr.w	r2, r2, #16
 800e58a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f022 0201 	bic.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6919      	ldr	r1, [r3, #16]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	4b3c      	ldr	r3, [pc, #240]	; (800e698 <SPI_CloseTransfer+0x13c>)
 800e5a8:	400b      	ands	r3, r1
 800e5aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	689a      	ldr	r2, [r3, #8]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e5ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	d014      	beq.n	800e5f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f003 0320 	and.w	r3, r3, #32
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00f      	beq.n	800e5f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	699a      	ldr	r2, [r3, #24]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f042 0220 	orr.w	r2, r2, #32
 800e5f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b03      	cmp	r3, #3
 800e5fc:	d014      	beq.n	800e628 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00f      	beq.n	800e628 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e60e:	f043 0204 	orr.w	r2, r3, #4
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	699a      	ldr	r2, [r3, #24]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e626:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00f      	beq.n	800e652 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e638:	f043 0201 	orr.w	r2, r3, #1
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	699a      	ldr	r2, [r3, #24]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e650:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00f      	beq.n	800e67c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e662:	f043 0208 	orr.w	r2, r3, #8
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e67a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e68c:	bf00      	nop
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	fffffc90 	.word	0xfffffc90

0800e69c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a8:	095b      	lsrs	r3, r3, #5
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	3307      	adds	r3, #7
 800e6ba:	08db      	lsrs	r3, r3, #3
 800e6bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b082      	sub	sp, #8
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e049      	b.n	800e778 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7f4 feff 	bl	80034fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2202      	movs	r2, #2
 800e702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3304      	adds	r3, #4
 800e70e:	4619      	mov	r1, r3
 800e710:	4610      	mov	r0, r2
 800e712:	f000 fe7d 	bl	800f410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2201      	movs	r2, #1
 800e71a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2201      	movs	r2, #1
 800e72a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b01      	cmp	r3, #1
 800e792:	d001      	beq.n	800e798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	e054      	b.n	800e842 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2202      	movs	r2, #2
 800e79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68da      	ldr	r2, [r3, #12]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f042 0201 	orr.w	r2, r2, #1
 800e7ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a26      	ldr	r2, [pc, #152]	; (800e850 <HAL_TIM_Base_Start_IT+0xd0>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d022      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7c2:	d01d      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a22      	ldr	r2, [pc, #136]	; (800e854 <HAL_TIM_Base_Start_IT+0xd4>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d018      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a21      	ldr	r2, [pc, #132]	; (800e858 <HAL_TIM_Base_Start_IT+0xd8>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d013      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a1f      	ldr	r2, [pc, #124]	; (800e85c <HAL_TIM_Base_Start_IT+0xdc>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d00e      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a1e      	ldr	r2, [pc, #120]	; (800e860 <HAL_TIM_Base_Start_IT+0xe0>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d009      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a1c      	ldr	r2, [pc, #112]	; (800e864 <HAL_TIM_Base_Start_IT+0xe4>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d004      	beq.n	800e800 <HAL_TIM_Base_Start_IT+0x80>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a1b      	ldr	r2, [pc, #108]	; (800e868 <HAL_TIM_Base_Start_IT+0xe8>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d115      	bne.n	800e82c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	689a      	ldr	r2, [r3, #8]
 800e806:	4b19      	ldr	r3, [pc, #100]	; (800e86c <HAL_TIM_Base_Start_IT+0xec>)
 800e808:	4013      	ands	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b06      	cmp	r3, #6
 800e810:	d015      	beq.n	800e83e <HAL_TIM_Base_Start_IT+0xbe>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e818:	d011      	beq.n	800e83e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f042 0201 	orr.w	r2, r2, #1
 800e828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e82a:	e008      	b.n	800e83e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0201 	orr.w	r2, r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	e000      	b.n	800e840 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e83e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	40010000 	.word	0x40010000
 800e854:	40000400 	.word	0x40000400
 800e858:	40000800 	.word	0x40000800
 800e85c:	40000c00 	.word	0x40000c00
 800e860:	40010400 	.word	0x40010400
 800e864:	40001800 	.word	0x40001800
 800e868:	40014000 	.word	0x40014000
 800e86c:	00010007 	.word	0x00010007

0800e870 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d109      	bne.n	800e898 <HAL_TIM_OC_Start_IT+0x28>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	bf14      	ite	ne
 800e890:	2301      	movne	r3, #1
 800e892:	2300      	moveq	r3, #0
 800e894:	b2db      	uxtb	r3, r3
 800e896:	e03c      	b.n	800e912 <HAL_TIM_OC_Start_IT+0xa2>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b04      	cmp	r3, #4
 800e89c:	d109      	bne.n	800e8b2 <HAL_TIM_OC_Start_IT+0x42>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	bf14      	ite	ne
 800e8aa:	2301      	movne	r3, #1
 800e8ac:	2300      	moveq	r3, #0
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	e02f      	b.n	800e912 <HAL_TIM_OC_Start_IT+0xa2>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b08      	cmp	r3, #8
 800e8b6:	d109      	bne.n	800e8cc <HAL_TIM_OC_Start_IT+0x5c>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	bf14      	ite	ne
 800e8c4:	2301      	movne	r3, #1
 800e8c6:	2300      	moveq	r3, #0
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	e022      	b.n	800e912 <HAL_TIM_OC_Start_IT+0xa2>
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	2b0c      	cmp	r3, #12
 800e8d0:	d109      	bne.n	800e8e6 <HAL_TIM_OC_Start_IT+0x76>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	bf14      	ite	ne
 800e8de:	2301      	movne	r3, #1
 800e8e0:	2300      	moveq	r3, #0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	e015      	b.n	800e912 <HAL_TIM_OC_Start_IT+0xa2>
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b10      	cmp	r3, #16
 800e8ea:	d109      	bne.n	800e900 <HAL_TIM_OC_Start_IT+0x90>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	bf14      	ite	ne
 800e8f8:	2301      	movne	r3, #1
 800e8fa:	2300      	moveq	r3, #0
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	e008      	b.n	800e912 <HAL_TIM_OC_Start_IT+0xa2>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e906:	b2db      	uxtb	r3, r3
 800e908:	2b01      	cmp	r3, #1
 800e90a:	bf14      	ite	ne
 800e90c:	2301      	movne	r3, #1
 800e90e:	2300      	moveq	r3, #0
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d001      	beq.n	800e91a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	e0ec      	b.n	800eaf4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d104      	bne.n	800e92a <HAL_TIM_OC_Start_IT+0xba>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2202      	movs	r2, #2
 800e924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e928:	e023      	b.n	800e972 <HAL_TIM_OC_Start_IT+0x102>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d104      	bne.n	800e93a <HAL_TIM_OC_Start_IT+0xca>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2202      	movs	r2, #2
 800e934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e938:	e01b      	b.n	800e972 <HAL_TIM_OC_Start_IT+0x102>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b08      	cmp	r3, #8
 800e93e:	d104      	bne.n	800e94a <HAL_TIM_OC_Start_IT+0xda>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2202      	movs	r2, #2
 800e944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e948:	e013      	b.n	800e972 <HAL_TIM_OC_Start_IT+0x102>
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	2b0c      	cmp	r3, #12
 800e94e:	d104      	bne.n	800e95a <HAL_TIM_OC_Start_IT+0xea>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2202      	movs	r2, #2
 800e954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e958:	e00b      	b.n	800e972 <HAL_TIM_OC_Start_IT+0x102>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b10      	cmp	r3, #16
 800e95e:	d104      	bne.n	800e96a <HAL_TIM_OC_Start_IT+0xfa>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2202      	movs	r2, #2
 800e964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e968:	e003      	b.n	800e972 <HAL_TIM_OC_Start_IT+0x102>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2202      	movs	r2, #2
 800e96e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b0c      	cmp	r3, #12
 800e976:	d841      	bhi.n	800e9fc <HAL_TIM_OC_Start_IT+0x18c>
 800e978:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <HAL_TIM_OC_Start_IT+0x110>)
 800e97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97e:	bf00      	nop
 800e980:	0800e9b5 	.word	0x0800e9b5
 800e984:	0800e9fd 	.word	0x0800e9fd
 800e988:	0800e9fd 	.word	0x0800e9fd
 800e98c:	0800e9fd 	.word	0x0800e9fd
 800e990:	0800e9c7 	.word	0x0800e9c7
 800e994:	0800e9fd 	.word	0x0800e9fd
 800e998:	0800e9fd 	.word	0x0800e9fd
 800e99c:	0800e9fd 	.word	0x0800e9fd
 800e9a0:	0800e9d9 	.word	0x0800e9d9
 800e9a4:	0800e9fd 	.word	0x0800e9fd
 800e9a8:	0800e9fd 	.word	0x0800e9fd
 800e9ac:	0800e9fd 	.word	0x0800e9fd
 800e9b0:	0800e9eb 	.word	0x0800e9eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68da      	ldr	r2, [r3, #12]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0202 	orr.w	r2, r2, #2
 800e9c2:	60da      	str	r2, [r3, #12]
      break;
 800e9c4:	e01d      	b.n	800ea02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68da      	ldr	r2, [r3, #12]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f042 0204 	orr.w	r2, r2, #4
 800e9d4:	60da      	str	r2, [r3, #12]
      break;
 800e9d6:	e014      	b.n	800ea02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0208 	orr.w	r2, r2, #8
 800e9e6:	60da      	str	r2, [r3, #12]
      break;
 800e9e8:	e00b      	b.n	800ea02 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f042 0210 	orr.w	r2, r2, #16
 800e9f8:	60da      	str	r2, [r3, #12]
      break;
 800e9fa:	e002      	b.n	800ea02 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ea00:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d174      	bne.n	800eaf2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f001 f917 	bl	800fc44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a38      	ldr	r2, [pc, #224]	; (800eafc <HAL_TIM_OC_Start_IT+0x28c>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d013      	beq.n	800ea48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a36      	ldr	r2, [pc, #216]	; (800eb00 <HAL_TIM_OC_Start_IT+0x290>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d00e      	beq.n	800ea48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a35      	ldr	r2, [pc, #212]	; (800eb04 <HAL_TIM_OC_Start_IT+0x294>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d009      	beq.n	800ea48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a33      	ldr	r2, [pc, #204]	; (800eb08 <HAL_TIM_OC_Start_IT+0x298>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d004      	beq.n	800ea48 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a32      	ldr	r2, [pc, #200]	; (800eb0c <HAL_TIM_OC_Start_IT+0x29c>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d101      	bne.n	800ea4c <HAL_TIM_OC_Start_IT+0x1dc>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e000      	b.n	800ea4e <HAL_TIM_OC_Start_IT+0x1de>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d007      	beq.n	800ea62 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a25      	ldr	r2, [pc, #148]	; (800eafc <HAL_TIM_OC_Start_IT+0x28c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d022      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea74:	d01d      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a25      	ldr	r2, [pc, #148]	; (800eb10 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d018      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a23      	ldr	r2, [pc, #140]	; (800eb14 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d013      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a22      	ldr	r2, [pc, #136]	; (800eb18 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d00e      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a19      	ldr	r2, [pc, #100]	; (800eb00 <HAL_TIM_OC_Start_IT+0x290>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d009      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a1e      	ldr	r2, [pc, #120]	; (800eb1c <HAL_TIM_OC_Start_IT+0x2ac>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d004      	beq.n	800eab2 <HAL_TIM_OC_Start_IT+0x242>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a15      	ldr	r2, [pc, #84]	; (800eb04 <HAL_TIM_OC_Start_IT+0x294>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d115      	bne.n	800eade <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	689a      	ldr	r2, [r3, #8]
 800eab8:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eaba:	4013      	ands	r3, r2
 800eabc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d015      	beq.n	800eaf0 <HAL_TIM_OC_Start_IT+0x280>
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaca:	d011      	beq.n	800eaf0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f042 0201 	orr.w	r2, r2, #1
 800eada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eadc:	e008      	b.n	800eaf0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f042 0201 	orr.w	r2, r2, #1
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	e000      	b.n	800eaf2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaf0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	40010000 	.word	0x40010000
 800eb00:	40010400 	.word	0x40010400
 800eb04:	40014000 	.word	0x40014000
 800eb08:	40014400 	.word	0x40014400
 800eb0c:	40014800 	.word	0x40014800
 800eb10:	40000400 	.word	0x40000400
 800eb14:	40000800 	.word	0x40000800
 800eb18:	40000c00 	.word	0x40000c00
 800eb1c:	40001800 	.word	0x40001800
 800eb20:	00010007 	.word	0x00010007

0800eb24 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b0c      	cmp	r3, #12
 800eb36:	d841      	bhi.n	800ebbc <HAL_TIM_OC_Stop_IT+0x98>
 800eb38:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <HAL_TIM_OC_Stop_IT+0x1c>)
 800eb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3e:	bf00      	nop
 800eb40:	0800eb75 	.word	0x0800eb75
 800eb44:	0800ebbd 	.word	0x0800ebbd
 800eb48:	0800ebbd 	.word	0x0800ebbd
 800eb4c:	0800ebbd 	.word	0x0800ebbd
 800eb50:	0800eb87 	.word	0x0800eb87
 800eb54:	0800ebbd 	.word	0x0800ebbd
 800eb58:	0800ebbd 	.word	0x0800ebbd
 800eb5c:	0800ebbd 	.word	0x0800ebbd
 800eb60:	0800eb99 	.word	0x0800eb99
 800eb64:	0800ebbd 	.word	0x0800ebbd
 800eb68:	0800ebbd 	.word	0x0800ebbd
 800eb6c:	0800ebbd 	.word	0x0800ebbd
 800eb70:	0800ebab 	.word	0x0800ebab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	68da      	ldr	r2, [r3, #12]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f022 0202 	bic.w	r2, r2, #2
 800eb82:	60da      	str	r2, [r3, #12]
      break;
 800eb84:	e01d      	b.n	800ebc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68da      	ldr	r2, [r3, #12]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f022 0204 	bic.w	r2, r2, #4
 800eb94:	60da      	str	r2, [r3, #12]
      break;
 800eb96:	e014      	b.n	800ebc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f022 0208 	bic.w	r2, r2, #8
 800eba6:	60da      	str	r2, [r3, #12]
      break;
 800eba8:	e00b      	b.n	800ebc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	68da      	ldr	r2, [r3, #12]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f022 0210 	bic.w	r2, r2, #16
 800ebb8:	60da      	str	r2, [r3, #12]
      break;
 800ebba:	e002      	b.n	800ebc2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc0:	bf00      	nop
  }

  if (status == HAL_OK)
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f040 8081 	bne.w	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f001 f836 	bl	800fc44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a3e      	ldr	r2, [pc, #248]	; (800ecd8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d013      	beq.n	800ec0a <HAL_TIM_OC_Stop_IT+0xe6>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a3d      	ldr	r2, [pc, #244]	; (800ecdc <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d00e      	beq.n	800ec0a <HAL_TIM_OC_Stop_IT+0xe6>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a3b      	ldr	r2, [pc, #236]	; (800ece0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d009      	beq.n	800ec0a <HAL_TIM_OC_Stop_IT+0xe6>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a3a      	ldr	r2, [pc, #232]	; (800ece4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d004      	beq.n	800ec0a <HAL_TIM_OC_Stop_IT+0xe6>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a38      	ldr	r2, [pc, #224]	; (800ece8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d101      	bne.n	800ec0e <HAL_TIM_OC_Stop_IT+0xea>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e000      	b.n	800ec10 <HAL_TIM_OC_Stop_IT+0xec>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d017      	beq.n	800ec44 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6a1a      	ldr	r2, [r3, #32]
 800ec1a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec1e:	4013      	ands	r3, r2
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10f      	bne.n	800ec44 <HAL_TIM_OC_Stop_IT+0x120>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6a1a      	ldr	r2, [r3, #32]
 800ec2a:	f240 4344 	movw	r3, #1092	; 0x444
 800ec2e:	4013      	ands	r3, r2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d107      	bne.n	800ec44 <HAL_TIM_OC_Stop_IT+0x120>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6a1a      	ldr	r2, [r3, #32]
 800ec4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec4e:	4013      	ands	r3, r2
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10f      	bne.n	800ec74 <HAL_TIM_OC_Stop_IT+0x150>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6a1a      	ldr	r2, [r3, #32]
 800ec5a:	f240 4344 	movw	r3, #1092	; 0x444
 800ec5e:	4013      	ands	r3, r2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d107      	bne.n	800ec74 <HAL_TIM_OC_Stop_IT+0x150>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f022 0201 	bic.w	r2, r2, #1
 800ec72:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d104      	bne.n	800ec84 <HAL_TIM_OC_Stop_IT+0x160>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec82:	e023      	b.n	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	d104      	bne.n	800ec94 <HAL_TIM_OC_Stop_IT+0x170>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec92:	e01b      	b.n	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2b08      	cmp	r3, #8
 800ec98:	d104      	bne.n	800eca4 <HAL_TIM_OC_Stop_IT+0x180>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eca2:	e013      	b.n	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	2b0c      	cmp	r3, #12
 800eca8:	d104      	bne.n	800ecb4 <HAL_TIM_OC_Stop_IT+0x190>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecb2:	e00b      	b.n	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b10      	cmp	r3, #16
 800ecb8:	d104      	bne.n	800ecc4 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecc2:	e003      	b.n	800eccc <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	40010000 	.word	0x40010000
 800ecdc:	40010400 	.word	0x40010400
 800ece0:	40014000 	.word	0x40014000
 800ece4:	40014400 	.word	0x40014400
 800ece8:	40014800 	.word	0x40014800

0800ecec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e049      	b.n	800ed92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f841 	bl	800ed9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3304      	adds	r3, #4
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4610      	mov	r0, r2
 800ed2c:	f000 fb70 	bl	800f410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eda2:	bf00      	nop
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f003 0302 	and.w	r3, r3, #2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d020      	beq.n	800ee12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d01b      	beq.n	800ee12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f06f 0202 	mvn.w	r2, #2
 800ede2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	f003 0303 	and.w	r3, r3, #3
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d003      	beq.n	800ee00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 faeb 	bl	800f3d4 <HAL_TIM_IC_CaptureCallback>
 800edfe:	e005      	b.n	800ee0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7f1 fbfd 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 faee 	bl	800f3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	f003 0304 	and.w	r3, r3, #4
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d020      	beq.n	800ee5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f003 0304 	and.w	r3, r3, #4
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d01b      	beq.n	800ee5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f06f 0204 	mvn.w	r2, #4
 800ee2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2202      	movs	r2, #2
 800ee34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d003      	beq.n	800ee4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 fac5 	bl	800f3d4 <HAL_TIM_IC_CaptureCallback>
 800ee4a:	e005      	b.n	800ee58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7f1 fbd7 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fac8 	bl	800f3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f003 0308 	and.w	r3, r3, #8
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d020      	beq.n	800eeaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f003 0308 	and.w	r3, r3, #8
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d01b      	beq.n	800eeaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f06f 0208 	mvn.w	r2, #8
 800ee7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	f003 0303 	and.w	r3, r3, #3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fa9f 	bl	800f3d4 <HAL_TIM_IC_CaptureCallback>
 800ee96:	e005      	b.n	800eea4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7f1 fbb1 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 faa2 	bl	800f3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	f003 0310 	and.w	r3, r3, #16
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d020      	beq.n	800eef6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01b      	beq.n	800eef6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f06f 0210 	mvn.w	r2, #16
 800eec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2208      	movs	r2, #8
 800eecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d003      	beq.n	800eee4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fa79 	bl	800f3d4 <HAL_TIM_IC_CaptureCallback>
 800eee2:	e005      	b.n	800eef0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7f1 fb8b 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fa7c 	bl	800f3e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	f003 0301 	and.w	r3, r3, #1
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00c      	beq.n	800ef1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d007      	beq.n	800ef1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f06f 0201 	mvn.w	r2, #1
 800ef12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7f3 ffcb 	bl	8002eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d104      	bne.n	800ef2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00c      	beq.n	800ef48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d007      	beq.n	800ef48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ef40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 ffba 	bl	800febc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00c      	beq.n	800ef6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d007      	beq.n	800ef6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 ffb2 	bl	800fed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d007      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fa36 	bl	800f3fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f003 0320 	and.w	r3, r3, #32
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00c      	beq.n	800efb4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f003 0320 	and.w	r3, r3, #32
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d007      	beq.n	800efb4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f06f 0220 	mvn.w	r2, #32
 800efac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 ff7a 	bl	800fea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d101      	bne.n	800efda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800efd6:	2302      	movs	r3, #2
 800efd8:	e0ff      	b.n	800f1da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b14      	cmp	r3, #20
 800efe6:	f200 80f0 	bhi.w	800f1ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800efea:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800efec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff0:	0800f045 	.word	0x0800f045
 800eff4:	0800f1cb 	.word	0x0800f1cb
 800eff8:	0800f1cb 	.word	0x0800f1cb
 800effc:	0800f1cb 	.word	0x0800f1cb
 800f000:	0800f085 	.word	0x0800f085
 800f004:	0800f1cb 	.word	0x0800f1cb
 800f008:	0800f1cb 	.word	0x0800f1cb
 800f00c:	0800f1cb 	.word	0x0800f1cb
 800f010:	0800f0c7 	.word	0x0800f0c7
 800f014:	0800f1cb 	.word	0x0800f1cb
 800f018:	0800f1cb 	.word	0x0800f1cb
 800f01c:	0800f1cb 	.word	0x0800f1cb
 800f020:	0800f107 	.word	0x0800f107
 800f024:	0800f1cb 	.word	0x0800f1cb
 800f028:	0800f1cb 	.word	0x0800f1cb
 800f02c:	0800f1cb 	.word	0x0800f1cb
 800f030:	0800f149 	.word	0x0800f149
 800f034:	0800f1cb 	.word	0x0800f1cb
 800f038:	0800f1cb 	.word	0x0800f1cb
 800f03c:	0800f1cb 	.word	0x0800f1cb
 800f040:	0800f189 	.word	0x0800f189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68b9      	ldr	r1, [r7, #8]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 fa86 	bl	800f55c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	699a      	ldr	r2, [r3, #24]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f042 0208 	orr.w	r2, r2, #8
 800f05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	699a      	ldr	r2, [r3, #24]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f022 0204 	bic.w	r2, r2, #4
 800f06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	6999      	ldr	r1, [r3, #24]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	691a      	ldr	r2, [r3, #16]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	430a      	orrs	r2, r1
 800f080:	619a      	str	r2, [r3, #24]
      break;
 800f082:	e0a5      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68b9      	ldr	r1, [r7, #8]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 faf6 	bl	800f67c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	699a      	ldr	r2, [r3, #24]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f09e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	699a      	ldr	r2, [r3, #24]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6999      	ldr	r1, [r3, #24]
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	021a      	lsls	r2, r3, #8
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	430a      	orrs	r2, r1
 800f0c2:	619a      	str	r2, [r3, #24]
      break;
 800f0c4:	e084      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68b9      	ldr	r1, [r7, #8]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f000 fb5f 	bl	800f790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	69da      	ldr	r2, [r3, #28]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f042 0208 	orr.w	r2, r2, #8
 800f0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	69da      	ldr	r2, [r3, #28]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f022 0204 	bic.w	r2, r2, #4
 800f0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	69d9      	ldr	r1, [r3, #28]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	691a      	ldr	r2, [r3, #16]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	430a      	orrs	r2, r1
 800f102:	61da      	str	r2, [r3, #28]
      break;
 800f104:	e064      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68b9      	ldr	r1, [r7, #8]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 fbc7 	bl	800f8a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	69da      	ldr	r2, [r3, #28]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	69da      	ldr	r2, [r3, #28]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	69d9      	ldr	r1, [r3, #28]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	021a      	lsls	r2, r3, #8
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	61da      	str	r2, [r3, #28]
      break;
 800f146:	e043      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fc10 	bl	800f974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f042 0208 	orr.w	r2, r2, #8
 800f162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f022 0204 	bic.w	r2, r2, #4
 800f172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	691a      	ldr	r2, [r3, #16]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	430a      	orrs	r2, r1
 800f184:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f186:	e023      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68b9      	ldr	r1, [r7, #8]
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 fc54 	bl	800fa3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	021a      	lsls	r2, r3, #8
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1c8:	e002      	b.n	800f1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	75fb      	strb	r3, [r7, #23]
      break;
 800f1ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3718      	adds	r7, #24
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop

0800f1e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d101      	bne.n	800f200 <HAL_TIM_ConfigClockSource+0x1c>
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	e0dc      	b.n	800f3ba <HAL_TIM_ConfigClockSource+0x1d6>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2202      	movs	r2, #2
 800f20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	4b6a      	ldr	r3, [pc, #424]	; (800f3c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a64      	ldr	r2, [pc, #400]	; (800f3c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f236:	4293      	cmp	r3, r2
 800f238:	f000 80a9 	beq.w	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f23c:	4a62      	ldr	r2, [pc, #392]	; (800f3c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	f200 80ae 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f244:	4a61      	ldr	r2, [pc, #388]	; (800f3cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f246:	4293      	cmp	r3, r2
 800f248:	f000 80a1 	beq.w	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f24c:	4a5f      	ldr	r2, [pc, #380]	; (800f3cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	f200 80a6 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f254:	4a5e      	ldr	r2, [pc, #376]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f256:	4293      	cmp	r3, r2
 800f258:	f000 8099 	beq.w	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f25c:	4a5c      	ldr	r2, [pc, #368]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	f200 809e 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f264:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f268:	f000 8091 	beq.w	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f26c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f270:	f200 8096 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f278:	f000 8089 	beq.w	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f27c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f280:	f200 808e 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f288:	d03e      	beq.n	800f308 <HAL_TIM_ConfigClockSource+0x124>
 800f28a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f28e:	f200 8087 	bhi.w	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f296:	f000 8086 	beq.w	800f3a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800f29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f29e:	d87f      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2a0:	2b70      	cmp	r3, #112	; 0x70
 800f2a2:	d01a      	beq.n	800f2da <HAL_TIM_ConfigClockSource+0xf6>
 800f2a4:	2b70      	cmp	r3, #112	; 0x70
 800f2a6:	d87b      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2a8:	2b60      	cmp	r3, #96	; 0x60
 800f2aa:	d050      	beq.n	800f34e <HAL_TIM_ConfigClockSource+0x16a>
 800f2ac:	2b60      	cmp	r3, #96	; 0x60
 800f2ae:	d877      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2b0:	2b50      	cmp	r3, #80	; 0x50
 800f2b2:	d03c      	beq.n	800f32e <HAL_TIM_ConfigClockSource+0x14a>
 800f2b4:	2b50      	cmp	r3, #80	; 0x50
 800f2b6:	d873      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2b8:	2b40      	cmp	r3, #64	; 0x40
 800f2ba:	d058      	beq.n	800f36e <HAL_TIM_ConfigClockSource+0x18a>
 800f2bc:	2b40      	cmp	r3, #64	; 0x40
 800f2be:	d86f      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2c0:	2b30      	cmp	r3, #48	; 0x30
 800f2c2:	d064      	beq.n	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f2c4:	2b30      	cmp	r3, #48	; 0x30
 800f2c6:	d86b      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2c8:	2b20      	cmp	r3, #32
 800f2ca:	d060      	beq.n	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f2cc:	2b20      	cmp	r3, #32
 800f2ce:	d867      	bhi.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d05c      	beq.n	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f2d4:	2b10      	cmp	r3, #16
 800f2d6:	d05a      	beq.n	800f38e <HAL_TIM_ConfigClockSource+0x1aa>
 800f2d8:	e062      	b.n	800f3a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6818      	ldr	r0, [r3, #0]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	6899      	ldr	r1, [r3, #8]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	f000 fc8b 	bl	800fc04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f2fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	609a      	str	r2, [r3, #8]
      break;
 800f306:	e04f      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	6899      	ldr	r1, [r3, #8]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	685a      	ldr	r2, [r3, #4]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	f000 fc74 	bl	800fc04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689a      	ldr	r2, [r3, #8]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f32a:	609a      	str	r2, [r3, #8]
      break;
 800f32c:	e03c      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	6859      	ldr	r1, [r3, #4]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f000 fbe4 	bl	800fb08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2150      	movs	r1, #80	; 0x50
 800f346:	4618      	mov	r0, r3
 800f348:	f000 fc3e 	bl	800fbc8 <TIM_ITRx_SetConfig>
      break;
 800f34c:	e02c      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6818      	ldr	r0, [r3, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	6859      	ldr	r1, [r3, #4]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	461a      	mov	r2, r3
 800f35c:	f000 fc03 	bl	800fb66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2160      	movs	r1, #96	; 0x60
 800f366:	4618      	mov	r0, r3
 800f368:	f000 fc2e 	bl	800fbc8 <TIM_ITRx_SetConfig>
      break;
 800f36c:	e01c      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	6859      	ldr	r1, [r3, #4]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	461a      	mov	r2, r3
 800f37c:	f000 fbc4 	bl	800fb08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2140      	movs	r1, #64	; 0x40
 800f386:	4618      	mov	r0, r3
 800f388:	f000 fc1e 	bl	800fbc8 <TIM_ITRx_SetConfig>
      break;
 800f38c:	e00c      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4619      	mov	r1, r3
 800f398:	4610      	mov	r0, r2
 800f39a:	f000 fc15 	bl	800fbc8 <TIM_ITRx_SetConfig>
      break;
 800f39e:	e003      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3a4:	e000      	b.n	800f3a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f3a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	ffceff88 	.word	0xffceff88
 800f3c8:	00100040 	.word	0x00100040
 800f3cc:	00100030 	.word	0x00100030
 800f3d0:	00100020 	.word	0x00100020

0800f3d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a46      	ldr	r2, [pc, #280]	; (800f53c <TIM_Base_SetConfig+0x12c>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d013      	beq.n	800f450 <TIM_Base_SetConfig+0x40>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f42e:	d00f      	beq.n	800f450 <TIM_Base_SetConfig+0x40>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a43      	ldr	r2, [pc, #268]	; (800f540 <TIM_Base_SetConfig+0x130>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d00b      	beq.n	800f450 <TIM_Base_SetConfig+0x40>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a42      	ldr	r2, [pc, #264]	; (800f544 <TIM_Base_SetConfig+0x134>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d007      	beq.n	800f450 <TIM_Base_SetConfig+0x40>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a41      	ldr	r2, [pc, #260]	; (800f548 <TIM_Base_SetConfig+0x138>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d003      	beq.n	800f450 <TIM_Base_SetConfig+0x40>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a40      	ldr	r2, [pc, #256]	; (800f54c <TIM_Base_SetConfig+0x13c>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d108      	bne.n	800f462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	4313      	orrs	r3, r2
 800f460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a35      	ldr	r2, [pc, #212]	; (800f53c <TIM_Base_SetConfig+0x12c>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d01f      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f470:	d01b      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a32      	ldr	r2, [pc, #200]	; (800f540 <TIM_Base_SetConfig+0x130>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d017      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a31      	ldr	r2, [pc, #196]	; (800f544 <TIM_Base_SetConfig+0x134>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d013      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a30      	ldr	r2, [pc, #192]	; (800f548 <TIM_Base_SetConfig+0x138>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d00f      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a2f      	ldr	r2, [pc, #188]	; (800f54c <TIM_Base_SetConfig+0x13c>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d00b      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a2e      	ldr	r2, [pc, #184]	; (800f550 <TIM_Base_SetConfig+0x140>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d007      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a2d      	ldr	r2, [pc, #180]	; (800f554 <TIM_Base_SetConfig+0x144>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d003      	beq.n	800f4aa <TIM_Base_SetConfig+0x9a>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a2c      	ldr	r2, [pc, #176]	; (800f558 <TIM_Base_SetConfig+0x148>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d108      	bne.n	800f4bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	695b      	ldr	r3, [r3, #20]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	689a      	ldr	r2, [r3, #8]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a16      	ldr	r2, [pc, #88]	; (800f53c <TIM_Base_SetConfig+0x12c>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d00f      	beq.n	800f508 <TIM_Base_SetConfig+0xf8>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a18      	ldr	r2, [pc, #96]	; (800f54c <TIM_Base_SetConfig+0x13c>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d00b      	beq.n	800f508 <TIM_Base_SetConfig+0xf8>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a17      	ldr	r2, [pc, #92]	; (800f550 <TIM_Base_SetConfig+0x140>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d007      	beq.n	800f508 <TIM_Base_SetConfig+0xf8>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a16      	ldr	r2, [pc, #88]	; (800f554 <TIM_Base_SetConfig+0x144>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d003      	beq.n	800f508 <TIM_Base_SetConfig+0xf8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a15      	ldr	r2, [pc, #84]	; (800f558 <TIM_Base_SetConfig+0x148>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d103      	bne.n	800f510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	691a      	ldr	r2, [r3, #16]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	f003 0301 	and.w	r3, r3, #1
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d105      	bne.n	800f52e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	f023 0201 	bic.w	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	611a      	str	r2, [r3, #16]
  }
}
 800f52e:	bf00      	nop
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	40010000 	.word	0x40010000
 800f540:	40000400 	.word	0x40000400
 800f544:	40000800 	.word	0x40000800
 800f548:	40000c00 	.word	0x40000c00
 800f54c:	40010400 	.word	0x40010400
 800f550:	40014000 	.word	0x40014000
 800f554:	40014400 	.word	0x40014400
 800f558:	40014800 	.word	0x40014800

0800f55c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a1b      	ldr	r3, [r3, #32]
 800f570:	f023 0201 	bic.w	r2, r3, #1
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4b37      	ldr	r3, [pc, #220]	; (800f664 <TIM_OC1_SetConfig+0x108>)
 800f588:	4013      	ands	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f023 0303 	bic.w	r3, r3, #3
 800f592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f023 0302 	bic.w	r3, r3, #2
 800f5a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a2d      	ldr	r2, [pc, #180]	; (800f668 <TIM_OC1_SetConfig+0x10c>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d00f      	beq.n	800f5d8 <TIM_OC1_SetConfig+0x7c>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a2c      	ldr	r2, [pc, #176]	; (800f66c <TIM_OC1_SetConfig+0x110>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00b      	beq.n	800f5d8 <TIM_OC1_SetConfig+0x7c>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <TIM_OC1_SetConfig+0x114>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d007      	beq.n	800f5d8 <TIM_OC1_SetConfig+0x7c>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a2a      	ldr	r2, [pc, #168]	; (800f674 <TIM_OC1_SetConfig+0x118>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d003      	beq.n	800f5d8 <TIM_OC1_SetConfig+0x7c>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a29      	ldr	r2, [pc, #164]	; (800f678 <TIM_OC1_SetConfig+0x11c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d10c      	bne.n	800f5f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f023 0308 	bic.w	r3, r3, #8
 800f5de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	f023 0304 	bic.w	r3, r3, #4
 800f5f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a1c      	ldr	r2, [pc, #112]	; (800f668 <TIM_OC1_SetConfig+0x10c>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d00f      	beq.n	800f61a <TIM_OC1_SetConfig+0xbe>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a1b      	ldr	r2, [pc, #108]	; (800f66c <TIM_OC1_SetConfig+0x110>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d00b      	beq.n	800f61a <TIM_OC1_SetConfig+0xbe>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a1a      	ldr	r2, [pc, #104]	; (800f670 <TIM_OC1_SetConfig+0x114>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d007      	beq.n	800f61a <TIM_OC1_SetConfig+0xbe>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a19      	ldr	r2, [pc, #100]	; (800f674 <TIM_OC1_SetConfig+0x118>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d003      	beq.n	800f61a <TIM_OC1_SetConfig+0xbe>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a18      	ldr	r2, [pc, #96]	; (800f678 <TIM_OC1_SetConfig+0x11c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d111      	bne.n	800f63e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	4313      	orrs	r3, r2
 800f632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	699b      	ldr	r3, [r3, #24]
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	693a      	ldr	r2, [r7, #16]
 800f642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	685a      	ldr	r2, [r3, #4]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	697a      	ldr	r2, [r7, #20]
 800f656:	621a      	str	r2, [r3, #32]
}
 800f658:	bf00      	nop
 800f65a:	371c      	adds	r7, #28
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	fffeff8f 	.word	0xfffeff8f
 800f668:	40010000 	.word	0x40010000
 800f66c:	40010400 	.word	0x40010400
 800f670:	40014000 	.word	0x40014000
 800f674:	40014400 	.word	0x40014400
 800f678:	40014800 	.word	0x40014800

0800f67c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b087      	sub	sp, #28
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a1b      	ldr	r3, [r3, #32]
 800f690:	f023 0210 	bic.w	r2, r3, #16
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	699b      	ldr	r3, [r3, #24]
 800f6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	4b34      	ldr	r3, [pc, #208]	; (800f778 <TIM_OC2_SetConfig+0xfc>)
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	021b      	lsls	r3, r3, #8
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	f023 0320 	bic.w	r3, r3, #32
 800f6c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	011b      	lsls	r3, r3, #4
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a29      	ldr	r2, [pc, #164]	; (800f77c <TIM_OC2_SetConfig+0x100>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d003      	beq.n	800f6e4 <TIM_OC2_SetConfig+0x68>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a28      	ldr	r2, [pc, #160]	; (800f780 <TIM_OC2_SetConfig+0x104>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d10d      	bne.n	800f700 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	011b      	lsls	r3, r3, #4
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a1e      	ldr	r2, [pc, #120]	; (800f77c <TIM_OC2_SetConfig+0x100>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d00f      	beq.n	800f728 <TIM_OC2_SetConfig+0xac>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a1d      	ldr	r2, [pc, #116]	; (800f780 <TIM_OC2_SetConfig+0x104>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d00b      	beq.n	800f728 <TIM_OC2_SetConfig+0xac>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a1c      	ldr	r2, [pc, #112]	; (800f784 <TIM_OC2_SetConfig+0x108>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d007      	beq.n	800f728 <TIM_OC2_SetConfig+0xac>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a1b      	ldr	r2, [pc, #108]	; (800f788 <TIM_OC2_SetConfig+0x10c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d003      	beq.n	800f728 <TIM_OC2_SetConfig+0xac>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a1a      	ldr	r2, [pc, #104]	; (800f78c <TIM_OC2_SetConfig+0x110>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d113      	bne.n	800f750 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f72e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	4313      	orrs	r3, r2
 800f742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	699b      	ldr	r3, [r3, #24]
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	693a      	ldr	r2, [r7, #16]
 800f754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	697a      	ldr	r2, [r7, #20]
 800f768:	621a      	str	r2, [r3, #32]
}
 800f76a:	bf00      	nop
 800f76c:	371c      	adds	r7, #28
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	feff8fff 	.word	0xfeff8fff
 800f77c:	40010000 	.word	0x40010000
 800f780:	40010400 	.word	0x40010400
 800f784:	40014000 	.word	0x40014000
 800f788:	40014400 	.word	0x40014400
 800f78c:	40014800 	.word	0x40014800

0800f790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a1b      	ldr	r3, [r3, #32]
 800f7a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	69db      	ldr	r3, [r3, #28]
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	4b33      	ldr	r3, [pc, #204]	; (800f888 <TIM_OC3_SetConfig+0xf8>)
 800f7bc:	4013      	ands	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f023 0303 	bic.w	r3, r3, #3
 800f7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	021b      	lsls	r3, r3, #8
 800f7e0:	697a      	ldr	r2, [r7, #20]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a28      	ldr	r2, [pc, #160]	; (800f88c <TIM_OC3_SetConfig+0xfc>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d003      	beq.n	800f7f6 <TIM_OC3_SetConfig+0x66>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a27      	ldr	r2, [pc, #156]	; (800f890 <TIM_OC3_SetConfig+0x100>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d10d      	bne.n	800f812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	021b      	lsls	r3, r3, #8
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	4313      	orrs	r3, r2
 800f808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a1d      	ldr	r2, [pc, #116]	; (800f88c <TIM_OC3_SetConfig+0xfc>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d00f      	beq.n	800f83a <TIM_OC3_SetConfig+0xaa>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a1c      	ldr	r2, [pc, #112]	; (800f890 <TIM_OC3_SetConfig+0x100>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d00b      	beq.n	800f83a <TIM_OC3_SetConfig+0xaa>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a1b      	ldr	r2, [pc, #108]	; (800f894 <TIM_OC3_SetConfig+0x104>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d007      	beq.n	800f83a <TIM_OC3_SetConfig+0xaa>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a1a      	ldr	r2, [pc, #104]	; (800f898 <TIM_OC3_SetConfig+0x108>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d003      	beq.n	800f83a <TIM_OC3_SetConfig+0xaa>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a19      	ldr	r2, [pc, #100]	; (800f89c <TIM_OC3_SetConfig+0x10c>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d113      	bne.n	800f862 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	4313      	orrs	r3, r2
 800f854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	011b      	lsls	r3, r3, #4
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	4313      	orrs	r3, r2
 800f860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	693a      	ldr	r2, [r7, #16]
 800f866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	697a      	ldr	r2, [r7, #20]
 800f87a:	621a      	str	r2, [r3, #32]
}
 800f87c:	bf00      	nop
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	fffeff8f 	.word	0xfffeff8f
 800f88c:	40010000 	.word	0x40010000
 800f890:	40010400 	.word	0x40010400
 800f894:	40014000 	.word	0x40014000
 800f898:	40014400 	.word	0x40014400
 800f89c:	40014800 	.word	0x40014800

0800f8a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b087      	sub	sp, #28
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a1b      	ldr	r3, [r3, #32]
 800f8b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	69db      	ldr	r3, [r3, #28]
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	4b24      	ldr	r3, [pc, #144]	; (800f95c <TIM_OC4_SetConfig+0xbc>)
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	021b      	lsls	r3, r3, #8
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	031b      	lsls	r3, r3, #12
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a19      	ldr	r2, [pc, #100]	; (800f960 <TIM_OC4_SetConfig+0xc0>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d00f      	beq.n	800f920 <TIM_OC4_SetConfig+0x80>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a18      	ldr	r2, [pc, #96]	; (800f964 <TIM_OC4_SetConfig+0xc4>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d00b      	beq.n	800f920 <TIM_OC4_SetConfig+0x80>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a17      	ldr	r2, [pc, #92]	; (800f968 <TIM_OC4_SetConfig+0xc8>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d007      	beq.n	800f920 <TIM_OC4_SetConfig+0x80>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a16      	ldr	r2, [pc, #88]	; (800f96c <TIM_OC4_SetConfig+0xcc>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d003      	beq.n	800f920 <TIM_OC4_SetConfig+0x80>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a15      	ldr	r2, [pc, #84]	; (800f970 <TIM_OC4_SetConfig+0xd0>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d109      	bne.n	800f934 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	695b      	ldr	r3, [r3, #20]
 800f92c:	019b      	lsls	r3, r3, #6
 800f92e:	697a      	ldr	r2, [r7, #20]
 800f930:	4313      	orrs	r3, r2
 800f932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	693a      	ldr	r2, [r7, #16]
 800f94c:	621a      	str	r2, [r3, #32]
}
 800f94e:	bf00      	nop
 800f950:	371c      	adds	r7, #28
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	feff8fff 	.word	0xfeff8fff
 800f960:	40010000 	.word	0x40010000
 800f964:	40010400 	.word	0x40010400
 800f968:	40014000 	.word	0x40014000
 800f96c:	40014400 	.word	0x40014400
 800f970:	40014800 	.word	0x40014800

0800f974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f974:	b480      	push	{r7}
 800f976:	b087      	sub	sp, #28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6a1b      	ldr	r3, [r3, #32]
 800f988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	4b21      	ldr	r3, [pc, #132]	; (800fa24 <TIM_OC5_SetConfig+0xb0>)
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f9b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	041b      	lsls	r3, r3, #16
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a18      	ldr	r2, [pc, #96]	; (800fa28 <TIM_OC5_SetConfig+0xb4>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d00f      	beq.n	800f9ea <TIM_OC5_SetConfig+0x76>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a17      	ldr	r2, [pc, #92]	; (800fa2c <TIM_OC5_SetConfig+0xb8>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d00b      	beq.n	800f9ea <TIM_OC5_SetConfig+0x76>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a16      	ldr	r2, [pc, #88]	; (800fa30 <TIM_OC5_SetConfig+0xbc>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d007      	beq.n	800f9ea <TIM_OC5_SetConfig+0x76>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a15      	ldr	r2, [pc, #84]	; (800fa34 <TIM_OC5_SetConfig+0xc0>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d003      	beq.n	800f9ea <TIM_OC5_SetConfig+0x76>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a14      	ldr	r2, [pc, #80]	; (800fa38 <TIM_OC5_SetConfig+0xc4>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d109      	bne.n	800f9fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	697a      	ldr	r2, [r7, #20]
 800fa02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	621a      	str	r2, [r3, #32]
}
 800fa18:	bf00      	nop
 800fa1a:	371c      	adds	r7, #28
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	fffeff8f 	.word	0xfffeff8f
 800fa28:	40010000 	.word	0x40010000
 800fa2c:	40010400 	.word	0x40010400
 800fa30:	40014000 	.word	0x40014000
 800fa34:	40014400 	.word	0x40014400
 800fa38:	40014800 	.word	0x40014800

0800fa3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b087      	sub	sp, #28
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	4b22      	ldr	r3, [pc, #136]	; (800faf0 <TIM_OC6_SetConfig+0xb4>)
 800fa68:	4013      	ands	r3, r2
 800fa6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	021b      	lsls	r3, r3, #8
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	4313      	orrs	r3, r2
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	051b      	lsls	r3, r3, #20
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a19      	ldr	r2, [pc, #100]	; (800faf4 <TIM_OC6_SetConfig+0xb8>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d00f      	beq.n	800fab4 <TIM_OC6_SetConfig+0x78>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a18      	ldr	r2, [pc, #96]	; (800faf8 <TIM_OC6_SetConfig+0xbc>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d00b      	beq.n	800fab4 <TIM_OC6_SetConfig+0x78>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4a17      	ldr	r2, [pc, #92]	; (800fafc <TIM_OC6_SetConfig+0xc0>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d007      	beq.n	800fab4 <TIM_OC6_SetConfig+0x78>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4a16      	ldr	r2, [pc, #88]	; (800fb00 <TIM_OC6_SetConfig+0xc4>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d003      	beq.n	800fab4 <TIM_OC6_SetConfig+0x78>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a15      	ldr	r2, [pc, #84]	; (800fb04 <TIM_OC6_SetConfig+0xc8>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d109      	bne.n	800fac8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800faba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	029b      	lsls	r3, r3, #10
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	685a      	ldr	r2, [r3, #4]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	621a      	str	r2, [r3, #32]
}
 800fae2:	bf00      	nop
 800fae4:	371c      	adds	r7, #28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	feff8fff 	.word	0xfeff8fff
 800faf4:	40010000 	.word	0x40010000
 800faf8:	40010400 	.word	0x40010400
 800fafc:	40014000 	.word	0x40014000
 800fb00:	40014400 	.word	0x40014400
 800fb04:	40014800 	.word	0x40014800

0800fb08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6a1b      	ldr	r3, [r3, #32]
 800fb18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6a1b      	ldr	r3, [r3, #32]
 800fb1e:	f023 0201 	bic.w	r2, r3, #1
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	011b      	lsls	r3, r3, #4
 800fb38:	693a      	ldr	r2, [r7, #16]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f023 030a 	bic.w	r3, r3, #10
 800fb44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	621a      	str	r2, [r3, #32]
}
 800fb5a:	bf00      	nop
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr

0800fb66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb66:	b480      	push	{r7}
 800fb68:	b087      	sub	sp, #28
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	60f8      	str	r0, [r7, #12]
 800fb6e:	60b9      	str	r1, [r7, #8]
 800fb70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	f023 0210 	bic.w	r2, r3, #16
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	699b      	ldr	r3, [r3, #24]
 800fb88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	031b      	lsls	r3, r3, #12
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fba2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	011b      	lsls	r3, r3, #4
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	693a      	ldr	r2, [r7, #16]
 800fbb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	621a      	str	r2, [r3, #32]
}
 800fbba:	bf00      	nop
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
	...

0800fbc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <TIM_ITRx_SetConfig+0x38>)
 800fbdc:	4013      	ands	r3, r2
 800fbde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fbe0:	683a      	ldr	r2, [r7, #0]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	f043 0307 	orr.w	r3, r3, #7
 800fbea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	609a      	str	r2, [r3, #8]
}
 800fbf2:	bf00      	nop
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	ffcfff8f 	.word	0xffcfff8f

0800fc04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b087      	sub	sp, #28
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	021a      	lsls	r2, r3, #8
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	431a      	orrs	r2, r3
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	609a      	str	r2, [r3, #8]
}
 800fc38:	bf00      	nop
 800fc3a:	371c      	adds	r7, #28
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b087      	sub	sp, #28
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	f003 031f 	and.w	r3, r3, #31
 800fc56:	2201      	movs	r2, #1
 800fc58:	fa02 f303 	lsl.w	r3, r2, r3
 800fc5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6a1a      	ldr	r2, [r3, #32]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	43db      	mvns	r3, r3
 800fc66:	401a      	ands	r2, r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6a1a      	ldr	r2, [r3, #32]
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	f003 031f 	and.w	r3, r3, #31
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	fa01 f303 	lsl.w	r3, r1, r3
 800fc7c:	431a      	orrs	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	621a      	str	r2, [r3, #32]
}
 800fc82:	bf00      	nop
 800fc84:	371c      	adds	r7, #28
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
	...

0800fc90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d101      	bne.n	800fca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fca4:	2302      	movs	r3, #2
 800fca6:	e06d      	b.n	800fd84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a30      	ldr	r2, [pc, #192]	; (800fd90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d004      	beq.n	800fcdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a2f      	ldr	r2, [pc, #188]	; (800fd94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d108      	bne.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	4313      	orrs	r3, r2
 800fcec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a20      	ldr	r2, [pc, #128]	; (800fd90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d022      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd1a:	d01d      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a1d      	ldr	r2, [pc, #116]	; (800fd98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d018      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a1c      	ldr	r2, [pc, #112]	; (800fd9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d013      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a1a      	ldr	r2, [pc, #104]	; (800fda0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d00e      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4a15      	ldr	r2, [pc, #84]	; (800fd94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d009      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a16      	ldr	r2, [pc, #88]	; (800fda4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d004      	beq.n	800fd58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a15      	ldr	r2, [pc, #84]	; (800fda8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d10c      	bne.n	800fd72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2201      	movs	r2, #1
 800fd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3714      	adds	r7, #20
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	40010000 	.word	0x40010000
 800fd94:	40010400 	.word	0x40010400
 800fd98:	40000400 	.word	0x40000400
 800fd9c:	40000800 	.word	0x40000800
 800fda0:	40000c00 	.word	0x40000c00
 800fda4:	40001800 	.word	0x40001800
 800fda8:	40014000 	.word	0x40014000

0800fdac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d101      	bne.n	800fdc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	e065      	b.n	800fe94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	4313      	orrs	r3, r2
 800fddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	4313      	orrs	r3, r2
 800fe14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	695b      	ldr	r3, [r3, #20]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	041b      	lsls	r3, r3, #16
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a16      	ldr	r2, [pc, #88]	; (800fea0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d004      	beq.n	800fe56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a14      	ldr	r2, [pc, #80]	; (800fea4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d115      	bne.n	800fe82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe60:	051b      	lsls	r3, r3, #20
 800fe62:	4313      	orrs	r3, r2
 800fe64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3714      	adds	r7, #20
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	40010000 	.word	0x40010000
 800fea4:	40010400 	.word	0x40010400

0800fea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fef2:	2301      	movs	r3, #1
 800fef4:	e042      	b.n	800ff7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d106      	bne.n	800ff0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7f3 fbf7 	bl	80036fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2224      	movs	r2, #36	; 0x24
 800ff12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f022 0201 	bic.w	r2, r2, #1
 800ff24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d002      	beq.n	800ff34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f001 fc42 	bl	80117b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 fed7 	bl	8010ce8 <UART_SetConfig>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d101      	bne.n	800ff44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff40:	2301      	movs	r3, #1
 800ff42:	e01b      	b.n	800ff7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	689a      	ldr	r2, [r3, #8]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f042 0201 	orr.w	r2, r2, #1
 800ff72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f001 fcc1 	bl	80118fc <UART_CheckIdleState>
 800ff7a:	4603      	mov	r3, r0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b08a      	sub	sp, #40	; 0x28
 800ff88:	af02      	add	r7, sp, #8
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	603b      	str	r3, [r7, #0]
 800ff90:	4613      	mov	r3, r2
 800ff92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff9a:	2b20      	cmp	r3, #32
 800ff9c:	d17b      	bne.n	8010096 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <HAL_UART_Transmit+0x26>
 800ffa4:	88fb      	ldrh	r3, [r7, #6]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d101      	bne.n	800ffae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e074      	b.n	8010098 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2221      	movs	r2, #33	; 0x21
 800ffba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffbe:	f7f3 ff1b 	bl	8003df8 <HAL_GetTick>
 800ffc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	88fa      	ldrh	r2, [r7, #6]
 800ffc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	88fa      	ldrh	r2, [r7, #6]
 800ffd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffdc:	d108      	bne.n	800fff0 <HAL_UART_Transmit+0x6c>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d104      	bne.n	800fff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	61bb      	str	r3, [r7, #24]
 800ffee:	e003      	b.n	800fff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fff4:	2300      	movs	r3, #0
 800fff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fff8:	e030      	b.n	801005c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	2200      	movs	r2, #0
 8010002:	2180      	movs	r1, #128	; 0x80
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f001 fd23 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 801000a:	4603      	mov	r3, r0
 801000c:	2b00      	cmp	r3, #0
 801000e:	d005      	beq.n	801001c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2220      	movs	r2, #32
 8010014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010018:	2303      	movs	r3, #3
 801001a:	e03d      	b.n	8010098 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d10b      	bne.n	801003a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010030:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	3302      	adds	r3, #2
 8010036:	61bb      	str	r3, [r7, #24]
 8010038:	e007      	b.n	801004a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	781a      	ldrb	r2, [r3, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	3301      	adds	r3, #1
 8010048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010050:	b29b      	uxth	r3, r3
 8010052:	3b01      	subs	r3, #1
 8010054:	b29a      	uxth	r2, r3
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010062:	b29b      	uxth	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1c8      	bne.n	800fffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2200      	movs	r2, #0
 8010070:	2140      	movs	r1, #64	; 0x40
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f001 fcec 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d005      	beq.n	801008a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2220      	movs	r2, #32
 8010082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e006      	b.n	8010098 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2220      	movs	r2, #32
 801008e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	e000      	b.n	8010098 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010096:	2302      	movs	r3, #2
  }
}
 8010098:	4618      	mov	r0, r3
 801009a:	3720      	adds	r7, #32
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08a      	sub	sp, #40	; 0x28
 80100a4:	af02      	add	r7, sp, #8
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	603b      	str	r3, [r7, #0]
 80100ac:	4613      	mov	r3, r2
 80100ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100b6:	2b20      	cmp	r3, #32
 80100b8:	f040 80b5 	bne.w	8010226 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d002      	beq.n	80100c8 <HAL_UART_Receive+0x28>
 80100c2:	88fb      	ldrh	r3, [r7, #6]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	e0ad      	b.n	8010228 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2222      	movs	r2, #34	; 0x22
 80100d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2200      	movs	r2, #0
 80100e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100e2:	f7f3 fe89 	bl	8003df8 <HAL_GetTick>
 80100e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	88fa      	ldrh	r2, [r7, #6]
 80100ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	88fa      	ldrh	r2, [r7, #6]
 80100f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010100:	d10e      	bne.n	8010120 <HAL_UART_Receive+0x80>
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d105      	bne.n	8010116 <HAL_UART_Receive+0x76>
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010114:	e02d      	b.n	8010172 <HAL_UART_Receive+0xd2>
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	22ff      	movs	r2, #255	; 0xff
 801011a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801011e:	e028      	b.n	8010172 <HAL_UART_Receive+0xd2>
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10d      	bne.n	8010144 <HAL_UART_Receive+0xa4>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d104      	bne.n	801013a <HAL_UART_Receive+0x9a>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	22ff      	movs	r2, #255	; 0xff
 8010134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010138:	e01b      	b.n	8010172 <HAL_UART_Receive+0xd2>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	227f      	movs	r2, #127	; 0x7f
 801013e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010142:	e016      	b.n	8010172 <HAL_UART_Receive+0xd2>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801014c:	d10d      	bne.n	801016a <HAL_UART_Receive+0xca>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d104      	bne.n	8010160 <HAL_UART_Receive+0xc0>
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	227f      	movs	r2, #127	; 0x7f
 801015a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801015e:	e008      	b.n	8010172 <HAL_UART_Receive+0xd2>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	223f      	movs	r2, #63	; 0x3f
 8010164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010168:	e003      	b.n	8010172 <HAL_UART_Receive+0xd2>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010178:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010182:	d108      	bne.n	8010196 <HAL_UART_Receive+0xf6>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d104      	bne.n	8010196 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801018c:	2300      	movs	r3, #0
 801018e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	61bb      	str	r3, [r7, #24]
 8010194:	e003      	b.n	801019e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801019a:	2300      	movs	r3, #0
 801019c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801019e:	e036      	b.n	801020e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2200      	movs	r2, #0
 80101a8:	2120      	movs	r1, #32
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f001 fc50 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d005      	beq.n	80101c2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2220      	movs	r2, #32
 80101ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80101be:	2303      	movs	r3, #3
 80101c0:	e032      	b.n	8010228 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d10c      	bne.n	80101e2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	8a7b      	ldrh	r3, [r7, #18]
 80101d2:	4013      	ands	r3, r2
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	3302      	adds	r3, #2
 80101de:	61bb      	str	r3, [r7, #24]
 80101e0:	e00c      	b.n	80101fc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	8a7b      	ldrh	r3, [r7, #18]
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	4013      	ands	r3, r2
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	3301      	adds	r3, #1
 80101fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010202:	b29b      	uxth	r3, r3
 8010204:	3b01      	subs	r3, #1
 8010206:	b29a      	uxth	r2, r3
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010214:	b29b      	uxth	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1c2      	bne.n	80101a0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2220      	movs	r2, #32
 801021e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	e000      	b.n	8010228 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010226:	2302      	movs	r3, #2
  }
}
 8010228:	4618      	mov	r0, r3
 801022a:	3720      	adds	r7, #32
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b08a      	sub	sp, #40	; 0x28
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	4613      	mov	r3, r2
 801023c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010244:	2b20      	cmp	r3, #32
 8010246:	d137      	bne.n	80102b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d002      	beq.n	8010254 <HAL_UART_Receive_IT+0x24>
 801024e:	88fb      	ldrh	r3, [r7, #6]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d101      	bne.n	8010258 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010254:	2301      	movs	r3, #1
 8010256:	e030      	b.n	80102ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2200      	movs	r2, #0
 801025c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4a18      	ldr	r2, [pc, #96]	; (80102c4 <HAL_UART_Receive_IT+0x94>)
 8010264:	4293      	cmp	r3, r2
 8010266:	d01f      	beq.n	80102a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d018      	beq.n	80102a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	e853 3f00 	ldrex	r3, [r3]
 8010282:	613b      	str	r3, [r7, #16]
   return(result);
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801028a:	627b      	str	r3, [r7, #36]	; 0x24
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	461a      	mov	r2, r3
 8010292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010294:	623b      	str	r3, [r7, #32]
 8010296:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010298:	69f9      	ldr	r1, [r7, #28]
 801029a:	6a3a      	ldr	r2, [r7, #32]
 801029c:	e841 2300 	strex	r3, r2, [r1]
 80102a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1e6      	bne.n	8010276 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80102a8:	88fb      	ldrh	r3, [r7, #6]
 80102aa:	461a      	mov	r2, r3
 80102ac:	68b9      	ldr	r1, [r7, #8]
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f001 fc3c 	bl	8011b2c <UART_Start_Receive_IT>
 80102b4:	4603      	mov	r3, r0
 80102b6:	e000      	b.n	80102ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80102b8:	2302      	movs	r3, #2
  }
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3728      	adds	r7, #40	; 0x28
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	58000c00 	.word	0x58000c00

080102c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b08a      	sub	sp, #40	; 0x28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	4613      	mov	r3, r2
 80102d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102dc:	2b20      	cmp	r3, #32
 80102de:	d167      	bne.n	80103b0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <HAL_UART_Transmit_DMA+0x24>
 80102e6:	88fb      	ldrh	r3, [r7, #6]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80102ec:	2301      	movs	r3, #1
 80102ee:	e060      	b.n	80103b2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	68ba      	ldr	r2, [r7, #8]
 80102f4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	88fa      	ldrh	r2, [r7, #6]
 80102fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	88fa      	ldrh	r2, [r7, #6]
 8010302:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2200      	movs	r2, #0
 801030a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2221      	movs	r2, #33	; 0x21
 8010312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801031a:	2b00      	cmp	r3, #0
 801031c:	d028      	beq.n	8010370 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010322:	4a26      	ldr	r2, [pc, #152]	; (80103bc <HAL_UART_Transmit_DMA+0xf4>)
 8010324:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801032a:	4a25      	ldr	r2, [pc, #148]	; (80103c0 <HAL_UART_Transmit_DMA+0xf8>)
 801032c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010332:	4a24      	ldr	r2, [pc, #144]	; (80103c4 <HAL_UART_Transmit_DMA+0xfc>)
 8010334:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801033a:	2200      	movs	r2, #0
 801033c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010346:	4619      	mov	r1, r3
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3328      	adds	r3, #40	; 0x28
 801034e:	461a      	mov	r2, r3
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	f7f6 f9d5 	bl	8006700 <HAL_DMA_Start_IT>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d009      	beq.n	8010370 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2210      	movs	r2, #16
 8010360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2220      	movs	r2, #32
 8010368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801036c:	2301      	movs	r3, #1
 801036e:	e020      	b.n	80103b2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2240      	movs	r2, #64	; 0x40
 8010376:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3308      	adds	r3, #8
 801037e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	e853 3f00 	ldrex	r3, [r3]
 8010386:	613b      	str	r3, [r7, #16]
   return(result);
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801038e:	627b      	str	r3, [r7, #36]	; 0x24
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010398:	623a      	str	r2, [r7, #32]
 801039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039c:	69f9      	ldr	r1, [r7, #28]
 801039e:	6a3a      	ldr	r2, [r7, #32]
 80103a0:	e841 2300 	strex	r3, r2, [r1]
 80103a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1e5      	bne.n	8010378 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80103ac:	2300      	movs	r3, #0
 80103ae:	e000      	b.n	80103b2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80103b0:	2302      	movs	r3, #2
  }
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3728      	adds	r7, #40	; 0x28
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	08011ec1 	.word	0x08011ec1
 80103c0:	08011f57 	.word	0x08011f57
 80103c4:	08011f73 	.word	0x08011f73

080103c8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b09a      	sub	sp, #104	; 0x68
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103d8:	e853 3f00 	ldrex	r3, [r3]
 80103dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80103e4:	667b      	str	r3, [r7, #100]	; 0x64
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103ee:	657b      	str	r3, [r7, #84]	; 0x54
 80103f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103f6:	e841 2300 	strex	r3, r2, [r1]
 80103fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1e6      	bne.n	80103d0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010414:	4b46      	ldr	r3, [pc, #280]	; (8010530 <HAL_UART_AbortReceive+0x168>)
 8010416:	4013      	ands	r3, r2
 8010418:	663b      	str	r3, [r7, #96]	; 0x60
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3308      	adds	r3, #8
 8010420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010422:	643a      	str	r2, [r7, #64]	; 0x40
 8010424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801042a:	e841 2300 	strex	r3, r2, [r1]
 801042e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1e5      	bne.n	8010402 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043a:	2b01      	cmp	r3, #1
 801043c:	d118      	bne.n	8010470 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010444:	6a3b      	ldr	r3, [r7, #32]
 8010446:	e853 3f00 	ldrex	r3, [r3]
 801044a:	61fb      	str	r3, [r7, #28]
   return(result);
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	f023 0310 	bic.w	r3, r3, #16
 8010452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	461a      	mov	r2, r3
 801045a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801045c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801045e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010464:	e841 2300 	strex	r3, r2, [r1]
 8010468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1e6      	bne.n	801043e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801047a:	2b40      	cmp	r3, #64	; 0x40
 801047c:	d13b      	bne.n	80104f6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	3308      	adds	r3, #8
 8010484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	e853 3f00 	ldrex	r3, [r3]
 801048c:	60bb      	str	r3, [r7, #8]
   return(result);
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010494:	65bb      	str	r3, [r7, #88]	; 0x58
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	3308      	adds	r3, #8
 801049c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801049e:	61ba      	str	r2, [r7, #24]
 80104a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a2:	6979      	ldr	r1, [r7, #20]
 80104a4:	69ba      	ldr	r2, [r7, #24]
 80104a6:	e841 2300 	strex	r3, r2, [r1]
 80104aa:	613b      	str	r3, [r7, #16]
   return(result);
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1e5      	bne.n	801047e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d01c      	beq.n	80104f6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104c2:	2200      	movs	r2, #0
 80104c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7f6 fb81 	bl	8006bd4 <HAL_DMA_Abort>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00e      	beq.n	80104f6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f8 f806 	bl	80084f0 <HAL_DMA_GetError>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b20      	cmp	r3, #32
 80104e8:	d105      	bne.n	80104f6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2210      	movs	r2, #16
 80104ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80104f2:	2303      	movs	r3, #3
 80104f4:	e017      	b.n	8010526 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	220f      	movs	r2, #15
 8010504:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	699a      	ldr	r2, [r3, #24]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f042 0208 	orr.w	r2, r2, #8
 8010514:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2220      	movs	r2, #32
 801051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3768      	adds	r7, #104	; 0x68
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	effffffe 	.word	0xeffffffe

08010534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b0ba      	sub	sp, #232	; 0xe8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	69db      	ldr	r3, [r3, #28]
 8010542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801055a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801055e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010562:	4013      	ands	r3, r2
 8010564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801056c:	2b00      	cmp	r3, #0
 801056e:	d11b      	bne.n	80105a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010574:	f003 0320 	and.w	r3, r3, #32
 8010578:	2b00      	cmp	r3, #0
 801057a:	d015      	beq.n	80105a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801057c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010580:	f003 0320 	and.w	r3, r3, #32
 8010584:	2b00      	cmp	r3, #0
 8010586:	d105      	bne.n	8010594 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010598:	2b00      	cmp	r3, #0
 801059a:	f000 8377 	beq.w	8010c8c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	4798      	blx	r3
      }
      return;
 80105a6:	e371      	b.n	8010c8c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80105a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 8123 	beq.w	80107f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80105b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105b6:	4b8d      	ldr	r3, [pc, #564]	; (80107ec <HAL_UART_IRQHandler+0x2b8>)
 80105b8:	4013      	ands	r3, r2
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d106      	bne.n	80105cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80105be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80105c2:	4b8b      	ldr	r3, [pc, #556]	; (80107f0 <HAL_UART_IRQHandler+0x2bc>)
 80105c4:	4013      	ands	r3, r2
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	f000 8116 	beq.w	80107f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105d0:	f003 0301 	and.w	r3, r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d011      	beq.n	80105fc <HAL_UART_IRQHandler+0xc8>
 80105d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00b      	beq.n	80105fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2201      	movs	r2, #1
 80105ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105f2:	f043 0201 	orr.w	r2, r3, #1
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010600:	f003 0302 	and.w	r3, r3, #2
 8010604:	2b00      	cmp	r3, #0
 8010606:	d011      	beq.n	801062c <HAL_UART_IRQHandler+0xf8>
 8010608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00b      	beq.n	801062c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2202      	movs	r2, #2
 801061a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010622:	f043 0204 	orr.w	r2, r3, #4
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801062c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010630:	f003 0304 	and.w	r3, r3, #4
 8010634:	2b00      	cmp	r3, #0
 8010636:	d011      	beq.n	801065c <HAL_UART_IRQHandler+0x128>
 8010638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801063c:	f003 0301 	and.w	r3, r3, #1
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00b      	beq.n	801065c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2204      	movs	r2, #4
 801064a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010652:	f043 0202 	orr.w	r2, r3, #2
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801065c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010660:	f003 0308 	and.w	r3, r3, #8
 8010664:	2b00      	cmp	r3, #0
 8010666:	d017      	beq.n	8010698 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801066c:	f003 0320 	and.w	r3, r3, #32
 8010670:	2b00      	cmp	r3, #0
 8010672:	d105      	bne.n	8010680 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010674:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010678:	4b5c      	ldr	r3, [pc, #368]	; (80107ec <HAL_UART_IRQHandler+0x2b8>)
 801067a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00b      	beq.n	8010698 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2208      	movs	r2, #8
 8010686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801068e:	f043 0208 	orr.w	r2, r3, #8
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801069c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d012      	beq.n	80106ca <HAL_UART_IRQHandler+0x196>
 80106a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00c      	beq.n	80106ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106c0:	f043 0220 	orr.w	r2, r3, #32
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 82dd 	beq.w	8010c90 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80106d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106da:	f003 0320 	and.w	r3, r3, #32
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d013      	beq.n	801070a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80106e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106e6:	f003 0320 	and.w	r3, r3, #32
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d105      	bne.n	80106fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80106ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d007      	beq.n	801070a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d003      	beq.n	801070a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801071e:	2b40      	cmp	r3, #64	; 0x40
 8010720:	d005      	beq.n	801072e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010726:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801072a:	2b00      	cmp	r3, #0
 801072c:	d054      	beq.n	80107d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f001 fb60 	bl	8011df4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801073e:	2b40      	cmp	r3, #64	; 0x40
 8010740:	d146      	bne.n	80107d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	3308      	adds	r3, #8
 8010748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010750:	e853 3f00 	ldrex	r3, [r3]
 8010754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801075c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	3308      	adds	r3, #8
 801076a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801076e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801077a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801077e:	e841 2300 	strex	r3, r2, [r1]
 8010782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1d9      	bne.n	8010742 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010794:	2b00      	cmp	r3, #0
 8010796:	d017      	beq.n	80107c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801079e:	4a15      	ldr	r2, [pc, #84]	; (80107f4 <HAL_UART_IRQHandler+0x2c0>)
 80107a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7f6 fd31 	bl	8007210 <HAL_DMA_Abort_IT>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d019      	beq.n	80107e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80107c2:	4610      	mov	r0, r2
 80107c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107c6:	e00f      	b.n	80107e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 fa77 	bl	8010cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107ce:	e00b      	b.n	80107e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 fa73 	bl	8010cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107d6:	e007      	b.n	80107e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fa6f 	bl	8010cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80107e6:	e253      	b.n	8010c90 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107e8:	bf00      	nop
    return;
 80107ea:	e251      	b.n	8010c90 <HAL_UART_IRQHandler+0x75c>
 80107ec:	10000001 	.word	0x10000001
 80107f0:	04000120 	.word	0x04000120
 80107f4:	08011ff3 	.word	0x08011ff3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	f040 81e7 	bne.w	8010bd0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010806:	f003 0310 	and.w	r3, r3, #16
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 81e0 	beq.w	8010bd0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 81d9 	beq.w	8010bd0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2210      	movs	r2, #16
 8010824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010830:	2b40      	cmp	r3, #64	; 0x40
 8010832:	f040 8151 	bne.w	8010ad8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a96      	ldr	r2, [pc, #600]	; (8010a98 <HAL_UART_IRQHandler+0x564>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d068      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a93      	ldr	r2, [pc, #588]	; (8010a9c <HAL_UART_IRQHandler+0x568>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d061      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a91      	ldr	r2, [pc, #580]	; (8010aa0 <HAL_UART_IRQHandler+0x56c>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d05a      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a8e      	ldr	r2, [pc, #568]	; (8010aa4 <HAL_UART_IRQHandler+0x570>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d053      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a8c      	ldr	r2, [pc, #560]	; (8010aa8 <HAL_UART_IRQHandler+0x574>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d04c      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a89      	ldr	r2, [pc, #548]	; (8010aac <HAL_UART_IRQHandler+0x578>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d045      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a87      	ldr	r2, [pc, #540]	; (8010ab0 <HAL_UART_IRQHandler+0x57c>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d03e      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a84      	ldr	r2, [pc, #528]	; (8010ab4 <HAL_UART_IRQHandler+0x580>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d037      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a82      	ldr	r2, [pc, #520]	; (8010ab8 <HAL_UART_IRQHandler+0x584>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d030      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a7f      	ldr	r2, [pc, #508]	; (8010abc <HAL_UART_IRQHandler+0x588>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d029      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4a7d      	ldr	r2, [pc, #500]	; (8010ac0 <HAL_UART_IRQHandler+0x58c>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d022      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a7a      	ldr	r2, [pc, #488]	; (8010ac4 <HAL_UART_IRQHandler+0x590>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d01b      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a78      	ldr	r2, [pc, #480]	; (8010ac8 <HAL_UART_IRQHandler+0x594>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d014      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a75      	ldr	r2, [pc, #468]	; (8010acc <HAL_UART_IRQHandler+0x598>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d00d      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a73      	ldr	r2, [pc, #460]	; (8010ad0 <HAL_UART_IRQHandler+0x59c>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d006      	beq.n	8010916 <HAL_UART_IRQHandler+0x3e2>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a70      	ldr	r2, [pc, #448]	; (8010ad4 <HAL_UART_IRQHandler+0x5a0>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d106      	bne.n	8010924 <HAL_UART_IRQHandler+0x3f0>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	b29b      	uxth	r3, r3
 8010922:	e005      	b.n	8010930 <HAL_UART_IRQHandler+0x3fc>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	b29b      	uxth	r3, r3
 8010930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 81ab 	beq.w	8010c94 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010948:	429a      	cmp	r2, r3
 801094a:	f080 81a3 	bcs.w	8010c94 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010954:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801095e:	69db      	ldr	r3, [r3, #28]
 8010960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010964:	f000 8087 	beq.w	8010a76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010974:	e853 3f00 	ldrex	r3, [r3]
 8010978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801097c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	461a      	mov	r2, r3
 801098e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010996:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801099e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109a2:	e841 2300 	strex	r3, r2, [r1]
 80109a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80109aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1da      	bne.n	8010968 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3308      	adds	r3, #8
 80109b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109bc:	e853 3f00 	ldrex	r3, [r3]
 80109c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80109c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109c4:	f023 0301 	bic.w	r3, r3, #1
 80109c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	3308      	adds	r3, #8
 80109d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80109d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80109da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80109de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80109e2:	e841 2300 	strex	r3, r2, [r1]
 80109e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80109e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d1e1      	bne.n	80109b2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3308      	adds	r3, #8
 80109f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109f8:	e853 3f00 	ldrex	r3, [r3]
 80109fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80109fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	3308      	adds	r3, #8
 8010a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a1a:	e841 2300 	strex	r3, r2, [r1]
 8010a1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1e3      	bne.n	80109ee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2220      	movs	r2, #32
 8010a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a3c:	e853 3f00 	ldrex	r3, [r3]
 8010a40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a44:	f023 0310 	bic.w	r3, r3, #16
 8010a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	461a      	mov	r2, r3
 8010a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a5e:	e841 2300 	strex	r3, r2, [r1]
 8010a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1e4      	bne.n	8010a34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7f6 f8af 	bl	8006bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2202      	movs	r2, #2
 8010a7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 f91d 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010a96:	e0fd      	b.n	8010c94 <HAL_UART_IRQHandler+0x760>
 8010a98:	40020010 	.word	0x40020010
 8010a9c:	40020028 	.word	0x40020028
 8010aa0:	40020040 	.word	0x40020040
 8010aa4:	40020058 	.word	0x40020058
 8010aa8:	40020070 	.word	0x40020070
 8010aac:	40020088 	.word	0x40020088
 8010ab0:	400200a0 	.word	0x400200a0
 8010ab4:	400200b8 	.word	0x400200b8
 8010ab8:	40020410 	.word	0x40020410
 8010abc:	40020428 	.word	0x40020428
 8010ac0:	40020440 	.word	0x40020440
 8010ac4:	40020458 	.word	0x40020458
 8010ac8:	40020470 	.word	0x40020470
 8010acc:	40020488 	.word	0x40020488
 8010ad0:	400204a0 	.word	0x400204a0
 8010ad4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 80cf 	beq.w	8010c98 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f000 80ca 	beq.w	8010c98 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0c:	e853 3f00 	ldrex	r3, [r3]
 8010b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b26:	647b      	str	r3, [r7, #68]	; 0x44
 8010b28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b2e:	e841 2300 	strex	r3, r2, [r1]
 8010b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1e4      	bne.n	8010b04 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	e853 3f00 	ldrex	r3, [r3]
 8010b48:	623b      	str	r3, [r7, #32]
   return(result);
 8010b4a:	6a3a      	ldr	r2, [r7, #32]
 8010b4c:	4b55      	ldr	r3, [pc, #340]	; (8010ca4 <HAL_UART_IRQHandler+0x770>)
 8010b4e:	4013      	ands	r3, r2
 8010b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	3308      	adds	r3, #8
 8010b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8010b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b66:	e841 2300 	strex	r3, r2, [r1]
 8010b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1e3      	bne.n	8010b3a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2220      	movs	r2, #32
 8010b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	e853 3f00 	ldrex	r3, [r3]
 8010b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f023 0310 	bic.w	r3, r3, #16
 8010b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ba8:	61fb      	str	r3, [r7, #28]
 8010baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bac:	69b9      	ldr	r1, [r7, #24]
 8010bae:	69fa      	ldr	r2, [r7, #28]
 8010bb0:	e841 2300 	strex	r3, r2, [r1]
 8010bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1e4      	bne.n	8010b86 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2202      	movs	r2, #2
 8010bc0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 f881 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010bce:	e063      	b.n	8010c98 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00e      	beq.n	8010bfa <HAL_UART_IRQHandler+0x6c6>
 8010bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d008      	beq.n	8010bfa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f001 ff5a 	bl	8012aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010bf8:	e051      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d014      	beq.n	8010c30 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d105      	bne.n	8010c1e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d008      	beq.n	8010c30 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d03a      	beq.n	8010c9c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	4798      	blx	r3
    }
    return;
 8010c2e:	e035      	b.n	8010c9c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d009      	beq.n	8010c50 <HAL_UART_IRQHandler+0x71c>
 8010c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d003      	beq.n	8010c50 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f001 f9e8 	bl	801201e <UART_EndTransmit_IT>
    return;
 8010c4e:	e026      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d009      	beq.n	8010c70 <HAL_UART_IRQHandler+0x73c>
 8010c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d003      	beq.n	8010c70 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f001 ff33 	bl	8012ad4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c6e:	e016      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d010      	beq.n	8010c9e <HAL_UART_IRQHandler+0x76a>
 8010c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da0c      	bge.n	8010c9e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f001 ff1b 	bl	8012ac0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c8a:	e008      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
      return;
 8010c8c:	bf00      	nop
 8010c8e:	e006      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
    return;
 8010c90:	bf00      	nop
 8010c92:	e004      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
      return;
 8010c94:	bf00      	nop
 8010c96:	e002      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
      return;
 8010c98:	bf00      	nop
 8010c9a:	e000      	b.n	8010c9e <HAL_UART_IRQHandler+0x76a>
    return;
 8010c9c:	bf00      	nop
  }
}
 8010c9e:	37e8      	adds	r7, #232	; 0xe8
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	effffffe 	.word	0xeffffffe

08010ca8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010cec:	b092      	sub	sp, #72	; 0x48
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	689a      	ldr	r2, [r3, #8]
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	691b      	ldr	r3, [r3, #16]
 8010d00:	431a      	orrs	r2, r3
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	431a      	orrs	r2, r3
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	69db      	ldr	r3, [r3, #28]
 8010d0c:	4313      	orrs	r3, r2
 8010d0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	4bbe      	ldr	r3, [pc, #760]	; (8011010 <UART_SetConfig+0x328>)
 8010d18:	4013      	ands	r3, r2
 8010d1a:	697a      	ldr	r2, [r7, #20]
 8010d1c:	6812      	ldr	r2, [r2, #0]
 8010d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d20:	430b      	orrs	r3, r1
 8010d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	68da      	ldr	r2, [r3, #12]
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	430a      	orrs	r2, r1
 8010d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	699b      	ldr	r3, [r3, #24]
 8010d3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4ab3      	ldr	r2, [pc, #716]	; (8011014 <UART_SetConfig+0x32c>)
 8010d46:	4293      	cmp	r3, r2
 8010d48:	d004      	beq.n	8010d54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d50:	4313      	orrs	r3, r2
 8010d52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	689a      	ldr	r2, [r3, #8]
 8010d5a:	4baf      	ldr	r3, [pc, #700]	; (8011018 <UART_SetConfig+0x330>)
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	6812      	ldr	r2, [r2, #0]
 8010d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d64:	430b      	orrs	r3, r1
 8010d66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6e:	f023 010f 	bic.w	r1, r3, #15
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	430a      	orrs	r2, r1
 8010d7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4aa6      	ldr	r2, [pc, #664]	; (801101c <UART_SetConfig+0x334>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d177      	bne.n	8010e78 <UART_SetConfig+0x190>
 8010d88:	4ba5      	ldr	r3, [pc, #660]	; (8011020 <UART_SetConfig+0x338>)
 8010d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d90:	2b28      	cmp	r3, #40	; 0x28
 8010d92:	d86d      	bhi.n	8010e70 <UART_SetConfig+0x188>
 8010d94:	a201      	add	r2, pc, #4	; (adr r2, 8010d9c <UART_SetConfig+0xb4>)
 8010d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d9a:	bf00      	nop
 8010d9c:	08010e41 	.word	0x08010e41
 8010da0:	08010e71 	.word	0x08010e71
 8010da4:	08010e71 	.word	0x08010e71
 8010da8:	08010e71 	.word	0x08010e71
 8010dac:	08010e71 	.word	0x08010e71
 8010db0:	08010e71 	.word	0x08010e71
 8010db4:	08010e71 	.word	0x08010e71
 8010db8:	08010e71 	.word	0x08010e71
 8010dbc:	08010e49 	.word	0x08010e49
 8010dc0:	08010e71 	.word	0x08010e71
 8010dc4:	08010e71 	.word	0x08010e71
 8010dc8:	08010e71 	.word	0x08010e71
 8010dcc:	08010e71 	.word	0x08010e71
 8010dd0:	08010e71 	.word	0x08010e71
 8010dd4:	08010e71 	.word	0x08010e71
 8010dd8:	08010e71 	.word	0x08010e71
 8010ddc:	08010e51 	.word	0x08010e51
 8010de0:	08010e71 	.word	0x08010e71
 8010de4:	08010e71 	.word	0x08010e71
 8010de8:	08010e71 	.word	0x08010e71
 8010dec:	08010e71 	.word	0x08010e71
 8010df0:	08010e71 	.word	0x08010e71
 8010df4:	08010e71 	.word	0x08010e71
 8010df8:	08010e71 	.word	0x08010e71
 8010dfc:	08010e59 	.word	0x08010e59
 8010e00:	08010e71 	.word	0x08010e71
 8010e04:	08010e71 	.word	0x08010e71
 8010e08:	08010e71 	.word	0x08010e71
 8010e0c:	08010e71 	.word	0x08010e71
 8010e10:	08010e71 	.word	0x08010e71
 8010e14:	08010e71 	.word	0x08010e71
 8010e18:	08010e71 	.word	0x08010e71
 8010e1c:	08010e61 	.word	0x08010e61
 8010e20:	08010e71 	.word	0x08010e71
 8010e24:	08010e71 	.word	0x08010e71
 8010e28:	08010e71 	.word	0x08010e71
 8010e2c:	08010e71 	.word	0x08010e71
 8010e30:	08010e71 	.word	0x08010e71
 8010e34:	08010e71 	.word	0x08010e71
 8010e38:	08010e71 	.word	0x08010e71
 8010e3c:	08010e69 	.word	0x08010e69
 8010e40:	2301      	movs	r3, #1
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e222      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e21e      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e50:	2308      	movs	r3, #8
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e21a      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e58:	2310      	movs	r3, #16
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e216      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e60:	2320      	movs	r3, #32
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e212      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e68:	2340      	movs	r3, #64	; 0x40
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e20e      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e70:	2380      	movs	r3, #128	; 0x80
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e20a      	b.n	801128e <UART_SetConfig+0x5a6>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4a69      	ldr	r2, [pc, #420]	; (8011024 <UART_SetConfig+0x33c>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d130      	bne.n	8010ee4 <UART_SetConfig+0x1fc>
 8010e82:	4b67      	ldr	r3, [pc, #412]	; (8011020 <UART_SetConfig+0x338>)
 8010e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e86:	f003 0307 	and.w	r3, r3, #7
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	d826      	bhi.n	8010edc <UART_SetConfig+0x1f4>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <UART_SetConfig+0x1ac>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010ead 	.word	0x08010ead
 8010e98:	08010eb5 	.word	0x08010eb5
 8010e9c:	08010ebd 	.word	0x08010ebd
 8010ea0:	08010ec5 	.word	0x08010ec5
 8010ea4:	08010ecd 	.word	0x08010ecd
 8010ea8:	08010ed5 	.word	0x08010ed5
 8010eac:	2300      	movs	r3, #0
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e1ec      	b.n	801128e <UART_SetConfig+0x5a6>
 8010eb4:	2304      	movs	r3, #4
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e1e8      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e1e4      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e1e0      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ecc:	2320      	movs	r3, #32
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e1dc      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ed4:	2340      	movs	r3, #64	; 0x40
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e1d8      	b.n	801128e <UART_SetConfig+0x5a6>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e1d4      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a4f      	ldr	r2, [pc, #316]	; (8011028 <UART_SetConfig+0x340>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d130      	bne.n	8010f50 <UART_SetConfig+0x268>
 8010eee:	4b4c      	ldr	r3, [pc, #304]	; (8011020 <UART_SetConfig+0x338>)
 8010ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	2b05      	cmp	r3, #5
 8010ef8:	d826      	bhi.n	8010f48 <UART_SetConfig+0x260>
 8010efa:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <UART_SetConfig+0x218>)
 8010efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f21 	.word	0x08010f21
 8010f08:	08010f29 	.word	0x08010f29
 8010f0c:	08010f31 	.word	0x08010f31
 8010f10:	08010f39 	.word	0x08010f39
 8010f14:	08010f41 	.word	0x08010f41
 8010f18:	2300      	movs	r3, #0
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e1b6      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f20:	2304      	movs	r3, #4
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e1b2      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f28:	2308      	movs	r3, #8
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e1ae      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f30:	2310      	movs	r3, #16
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e1aa      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f38:	2320      	movs	r3, #32
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e1a6      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f40:	2340      	movs	r3, #64	; 0x40
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e1a2      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f48:	2380      	movs	r3, #128	; 0x80
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e19e      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a35      	ldr	r2, [pc, #212]	; (801102c <UART_SetConfig+0x344>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d130      	bne.n	8010fbc <UART_SetConfig+0x2d4>
 8010f5a:	4b31      	ldr	r3, [pc, #196]	; (8011020 <UART_SetConfig+0x338>)
 8010f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f5e:	f003 0307 	and.w	r3, r3, #7
 8010f62:	2b05      	cmp	r3, #5
 8010f64:	d826      	bhi.n	8010fb4 <UART_SetConfig+0x2cc>
 8010f66:	a201      	add	r2, pc, #4	; (adr r2, 8010f6c <UART_SetConfig+0x284>)
 8010f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f6c:	08010f85 	.word	0x08010f85
 8010f70:	08010f8d 	.word	0x08010f8d
 8010f74:	08010f95 	.word	0x08010f95
 8010f78:	08010f9d 	.word	0x08010f9d
 8010f7c:	08010fa5 	.word	0x08010fa5
 8010f80:	08010fad 	.word	0x08010fad
 8010f84:	2300      	movs	r3, #0
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8a:	e180      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f8c:	2304      	movs	r3, #4
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e17c      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f94:	2308      	movs	r3, #8
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e178      	b.n	801128e <UART_SetConfig+0x5a6>
 8010f9c:	2310      	movs	r3, #16
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa2:	e174      	b.n	801128e <UART_SetConfig+0x5a6>
 8010fa4:	2320      	movs	r3, #32
 8010fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010faa:	e170      	b.n	801128e <UART_SetConfig+0x5a6>
 8010fac:	2340      	movs	r3, #64	; 0x40
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e16c      	b.n	801128e <UART_SetConfig+0x5a6>
 8010fb4:	2380      	movs	r3, #128	; 0x80
 8010fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fba:	e168      	b.n	801128e <UART_SetConfig+0x5a6>
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a1b      	ldr	r2, [pc, #108]	; (8011030 <UART_SetConfig+0x348>)
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d142      	bne.n	801104c <UART_SetConfig+0x364>
 8010fc6:	4b16      	ldr	r3, [pc, #88]	; (8011020 <UART_SetConfig+0x338>)
 8010fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fca:	f003 0307 	and.w	r3, r3, #7
 8010fce:	2b05      	cmp	r3, #5
 8010fd0:	d838      	bhi.n	8011044 <UART_SetConfig+0x35c>
 8010fd2:	a201      	add	r2, pc, #4	; (adr r2, 8010fd8 <UART_SetConfig+0x2f0>)
 8010fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd8:	08010ff1 	.word	0x08010ff1
 8010fdc:	08010ff9 	.word	0x08010ff9
 8010fe0:	08011001 	.word	0x08011001
 8010fe4:	08011009 	.word	0x08011009
 8010fe8:	08011035 	.word	0x08011035
 8010fec:	0801103d 	.word	0x0801103d
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e14a      	b.n	801128e <UART_SetConfig+0x5a6>
 8010ff8:	2304      	movs	r3, #4
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e146      	b.n	801128e <UART_SetConfig+0x5a6>
 8011000:	2308      	movs	r3, #8
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e142      	b.n	801128e <UART_SetConfig+0x5a6>
 8011008:	2310      	movs	r3, #16
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e13e      	b.n	801128e <UART_SetConfig+0x5a6>
 8011010:	cfff69f3 	.word	0xcfff69f3
 8011014:	58000c00 	.word	0x58000c00
 8011018:	11fff4ff 	.word	0x11fff4ff
 801101c:	40011000 	.word	0x40011000
 8011020:	58024400 	.word	0x58024400
 8011024:	40004400 	.word	0x40004400
 8011028:	40004800 	.word	0x40004800
 801102c:	40004c00 	.word	0x40004c00
 8011030:	40005000 	.word	0x40005000
 8011034:	2320      	movs	r3, #32
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e128      	b.n	801128e <UART_SetConfig+0x5a6>
 801103c:	2340      	movs	r3, #64	; 0x40
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e124      	b.n	801128e <UART_SetConfig+0x5a6>
 8011044:	2380      	movs	r3, #128	; 0x80
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e120      	b.n	801128e <UART_SetConfig+0x5a6>
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4acb      	ldr	r2, [pc, #812]	; (8011380 <UART_SetConfig+0x698>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d176      	bne.n	8011144 <UART_SetConfig+0x45c>
 8011056:	4bcb      	ldr	r3, [pc, #812]	; (8011384 <UART_SetConfig+0x69c>)
 8011058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801105a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801105e:	2b28      	cmp	r3, #40	; 0x28
 8011060:	d86c      	bhi.n	801113c <UART_SetConfig+0x454>
 8011062:	a201      	add	r2, pc, #4	; (adr r2, 8011068 <UART_SetConfig+0x380>)
 8011064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011068:	0801110d 	.word	0x0801110d
 801106c:	0801113d 	.word	0x0801113d
 8011070:	0801113d 	.word	0x0801113d
 8011074:	0801113d 	.word	0x0801113d
 8011078:	0801113d 	.word	0x0801113d
 801107c:	0801113d 	.word	0x0801113d
 8011080:	0801113d 	.word	0x0801113d
 8011084:	0801113d 	.word	0x0801113d
 8011088:	08011115 	.word	0x08011115
 801108c:	0801113d 	.word	0x0801113d
 8011090:	0801113d 	.word	0x0801113d
 8011094:	0801113d 	.word	0x0801113d
 8011098:	0801113d 	.word	0x0801113d
 801109c:	0801113d 	.word	0x0801113d
 80110a0:	0801113d 	.word	0x0801113d
 80110a4:	0801113d 	.word	0x0801113d
 80110a8:	0801111d 	.word	0x0801111d
 80110ac:	0801113d 	.word	0x0801113d
 80110b0:	0801113d 	.word	0x0801113d
 80110b4:	0801113d 	.word	0x0801113d
 80110b8:	0801113d 	.word	0x0801113d
 80110bc:	0801113d 	.word	0x0801113d
 80110c0:	0801113d 	.word	0x0801113d
 80110c4:	0801113d 	.word	0x0801113d
 80110c8:	08011125 	.word	0x08011125
 80110cc:	0801113d 	.word	0x0801113d
 80110d0:	0801113d 	.word	0x0801113d
 80110d4:	0801113d 	.word	0x0801113d
 80110d8:	0801113d 	.word	0x0801113d
 80110dc:	0801113d 	.word	0x0801113d
 80110e0:	0801113d 	.word	0x0801113d
 80110e4:	0801113d 	.word	0x0801113d
 80110e8:	0801112d 	.word	0x0801112d
 80110ec:	0801113d 	.word	0x0801113d
 80110f0:	0801113d 	.word	0x0801113d
 80110f4:	0801113d 	.word	0x0801113d
 80110f8:	0801113d 	.word	0x0801113d
 80110fc:	0801113d 	.word	0x0801113d
 8011100:	0801113d 	.word	0x0801113d
 8011104:	0801113d 	.word	0x0801113d
 8011108:	08011135 	.word	0x08011135
 801110c:	2301      	movs	r3, #1
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e0bc      	b.n	801128e <UART_SetConfig+0x5a6>
 8011114:	2304      	movs	r3, #4
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e0b8      	b.n	801128e <UART_SetConfig+0x5a6>
 801111c:	2308      	movs	r3, #8
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e0b4      	b.n	801128e <UART_SetConfig+0x5a6>
 8011124:	2310      	movs	r3, #16
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e0b0      	b.n	801128e <UART_SetConfig+0x5a6>
 801112c:	2320      	movs	r3, #32
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e0ac      	b.n	801128e <UART_SetConfig+0x5a6>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e0a8      	b.n	801128e <UART_SetConfig+0x5a6>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e0a4      	b.n	801128e <UART_SetConfig+0x5a6>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a8f      	ldr	r2, [pc, #572]	; (8011388 <UART_SetConfig+0x6a0>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d130      	bne.n	80111b0 <UART_SetConfig+0x4c8>
 801114e:	4b8d      	ldr	r3, [pc, #564]	; (8011384 <UART_SetConfig+0x69c>)
 8011150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011152:	f003 0307 	and.w	r3, r3, #7
 8011156:	2b05      	cmp	r3, #5
 8011158:	d826      	bhi.n	80111a8 <UART_SetConfig+0x4c0>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <UART_SetConfig+0x478>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011179 	.word	0x08011179
 8011164:	08011181 	.word	0x08011181
 8011168:	08011189 	.word	0x08011189
 801116c:	08011191 	.word	0x08011191
 8011170:	08011199 	.word	0x08011199
 8011174:	080111a1 	.word	0x080111a1
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e086      	b.n	801128e <UART_SetConfig+0x5a6>
 8011180:	2304      	movs	r3, #4
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e082      	b.n	801128e <UART_SetConfig+0x5a6>
 8011188:	2308      	movs	r3, #8
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e07e      	b.n	801128e <UART_SetConfig+0x5a6>
 8011190:	2310      	movs	r3, #16
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e07a      	b.n	801128e <UART_SetConfig+0x5a6>
 8011198:	2320      	movs	r3, #32
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e076      	b.n	801128e <UART_SetConfig+0x5a6>
 80111a0:	2340      	movs	r3, #64	; 0x40
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e072      	b.n	801128e <UART_SetConfig+0x5a6>
 80111a8:	2380      	movs	r3, #128	; 0x80
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e06e      	b.n	801128e <UART_SetConfig+0x5a6>
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a75      	ldr	r2, [pc, #468]	; (801138c <UART_SetConfig+0x6a4>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d130      	bne.n	801121c <UART_SetConfig+0x534>
 80111ba:	4b72      	ldr	r3, [pc, #456]	; (8011384 <UART_SetConfig+0x69c>)
 80111bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	2b05      	cmp	r3, #5
 80111c4:	d826      	bhi.n	8011214 <UART_SetConfig+0x52c>
 80111c6:	a201      	add	r2, pc, #4	; (adr r2, 80111cc <UART_SetConfig+0x4e4>)
 80111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111cc:	080111e5 	.word	0x080111e5
 80111d0:	080111ed 	.word	0x080111ed
 80111d4:	080111f5 	.word	0x080111f5
 80111d8:	080111fd 	.word	0x080111fd
 80111dc:	08011205 	.word	0x08011205
 80111e0:	0801120d 	.word	0x0801120d
 80111e4:	2300      	movs	r3, #0
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e050      	b.n	801128e <UART_SetConfig+0x5a6>
 80111ec:	2304      	movs	r3, #4
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e04c      	b.n	801128e <UART_SetConfig+0x5a6>
 80111f4:	2308      	movs	r3, #8
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e048      	b.n	801128e <UART_SetConfig+0x5a6>
 80111fc:	2310      	movs	r3, #16
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e044      	b.n	801128e <UART_SetConfig+0x5a6>
 8011204:	2320      	movs	r3, #32
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e040      	b.n	801128e <UART_SetConfig+0x5a6>
 801120c:	2340      	movs	r3, #64	; 0x40
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e03c      	b.n	801128e <UART_SetConfig+0x5a6>
 8011214:	2380      	movs	r3, #128	; 0x80
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e038      	b.n	801128e <UART_SetConfig+0x5a6>
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a5b      	ldr	r2, [pc, #364]	; (8011390 <UART_SetConfig+0x6a8>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d130      	bne.n	8011288 <UART_SetConfig+0x5a0>
 8011226:	4b57      	ldr	r3, [pc, #348]	; (8011384 <UART_SetConfig+0x69c>)
 8011228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801122a:	f003 0307 	and.w	r3, r3, #7
 801122e:	2b05      	cmp	r3, #5
 8011230:	d826      	bhi.n	8011280 <UART_SetConfig+0x598>
 8011232:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <UART_SetConfig+0x550>)
 8011234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011238:	08011251 	.word	0x08011251
 801123c:	08011259 	.word	0x08011259
 8011240:	08011261 	.word	0x08011261
 8011244:	08011269 	.word	0x08011269
 8011248:	08011271 	.word	0x08011271
 801124c:	08011279 	.word	0x08011279
 8011250:	2302      	movs	r3, #2
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011256:	e01a      	b.n	801128e <UART_SetConfig+0x5a6>
 8011258:	2304      	movs	r3, #4
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e016      	b.n	801128e <UART_SetConfig+0x5a6>
 8011260:	2308      	movs	r3, #8
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011266:	e012      	b.n	801128e <UART_SetConfig+0x5a6>
 8011268:	2310      	movs	r3, #16
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e00e      	b.n	801128e <UART_SetConfig+0x5a6>
 8011270:	2320      	movs	r3, #32
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e00a      	b.n	801128e <UART_SetConfig+0x5a6>
 8011278:	2340      	movs	r3, #64	; 0x40
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e006      	b.n	801128e <UART_SetConfig+0x5a6>
 8011280:	2380      	movs	r3, #128	; 0x80
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e002      	b.n	801128e <UART_SetConfig+0x5a6>
 8011288:	2380      	movs	r3, #128	; 0x80
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a3f      	ldr	r2, [pc, #252]	; (8011390 <UART_SetConfig+0x6a8>)
 8011294:	4293      	cmp	r3, r2
 8011296:	f040 80f8 	bne.w	801148a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801129a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801129e:	2b20      	cmp	r3, #32
 80112a0:	dc46      	bgt.n	8011330 <UART_SetConfig+0x648>
 80112a2:	2b02      	cmp	r3, #2
 80112a4:	f2c0 8082 	blt.w	80113ac <UART_SetConfig+0x6c4>
 80112a8:	3b02      	subs	r3, #2
 80112aa:	2b1e      	cmp	r3, #30
 80112ac:	d87e      	bhi.n	80113ac <UART_SetConfig+0x6c4>
 80112ae:	a201      	add	r2, pc, #4	; (adr r2, 80112b4 <UART_SetConfig+0x5cc>)
 80112b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b4:	08011337 	.word	0x08011337
 80112b8:	080113ad 	.word	0x080113ad
 80112bc:	0801133f 	.word	0x0801133f
 80112c0:	080113ad 	.word	0x080113ad
 80112c4:	080113ad 	.word	0x080113ad
 80112c8:	080113ad 	.word	0x080113ad
 80112cc:	0801134f 	.word	0x0801134f
 80112d0:	080113ad 	.word	0x080113ad
 80112d4:	080113ad 	.word	0x080113ad
 80112d8:	080113ad 	.word	0x080113ad
 80112dc:	080113ad 	.word	0x080113ad
 80112e0:	080113ad 	.word	0x080113ad
 80112e4:	080113ad 	.word	0x080113ad
 80112e8:	080113ad 	.word	0x080113ad
 80112ec:	0801135f 	.word	0x0801135f
 80112f0:	080113ad 	.word	0x080113ad
 80112f4:	080113ad 	.word	0x080113ad
 80112f8:	080113ad 	.word	0x080113ad
 80112fc:	080113ad 	.word	0x080113ad
 8011300:	080113ad 	.word	0x080113ad
 8011304:	080113ad 	.word	0x080113ad
 8011308:	080113ad 	.word	0x080113ad
 801130c:	080113ad 	.word	0x080113ad
 8011310:	080113ad 	.word	0x080113ad
 8011314:	080113ad 	.word	0x080113ad
 8011318:	080113ad 	.word	0x080113ad
 801131c:	080113ad 	.word	0x080113ad
 8011320:	080113ad 	.word	0x080113ad
 8011324:	080113ad 	.word	0x080113ad
 8011328:	080113ad 	.word	0x080113ad
 801132c:	0801139f 	.word	0x0801139f
 8011330:	2b40      	cmp	r3, #64	; 0x40
 8011332:	d037      	beq.n	80113a4 <UART_SetConfig+0x6bc>
 8011334:	e03a      	b.n	80113ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011336:	f7fb fce5 	bl	800cd04 <HAL_RCCEx_GetD3PCLK1Freq>
 801133a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801133c:	e03c      	b.n	80113b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011342:	4618      	mov	r0, r3
 8011344:	f7fb fcf4 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801134c:	e034      	b.n	80113b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801134e:	f107 0318 	add.w	r3, r7, #24
 8011352:	4618      	mov	r0, r3
 8011354:	f7fb fe40 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801135c:	e02c      	b.n	80113b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801135e:	4b09      	ldr	r3, [pc, #36]	; (8011384 <UART_SetConfig+0x69c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f003 0320 	and.w	r3, r3, #32
 8011366:	2b00      	cmp	r3, #0
 8011368:	d016      	beq.n	8011398 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801136a:	4b06      	ldr	r3, [pc, #24]	; (8011384 <UART_SetConfig+0x69c>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	08db      	lsrs	r3, r3, #3
 8011370:	f003 0303 	and.w	r3, r3, #3
 8011374:	4a07      	ldr	r2, [pc, #28]	; (8011394 <UART_SetConfig+0x6ac>)
 8011376:	fa22 f303 	lsr.w	r3, r2, r3
 801137a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801137c:	e01c      	b.n	80113b8 <UART_SetConfig+0x6d0>
 801137e:	bf00      	nop
 8011380:	40011400 	.word	0x40011400
 8011384:	58024400 	.word	0x58024400
 8011388:	40007800 	.word	0x40007800
 801138c:	40007c00 	.word	0x40007c00
 8011390:	58000c00 	.word	0x58000c00
 8011394:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011398:	4b9d      	ldr	r3, [pc, #628]	; (8011610 <UART_SetConfig+0x928>)
 801139a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801139c:	e00c      	b.n	80113b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801139e:	4b9d      	ldr	r3, [pc, #628]	; (8011614 <UART_SetConfig+0x92c>)
 80113a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a2:	e009      	b.n	80113b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113aa:	e005      	b.n	80113b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80113ac:	2300      	movs	r3, #0
 80113ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113b0:	2301      	movs	r3, #1
 80113b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80113b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	f000 81de 	beq.w	801177c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c4:	4a94      	ldr	r2, [pc, #592]	; (8011618 <UART_SetConfig+0x930>)
 80113c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ca:	461a      	mov	r2, r3
 80113cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80113d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	685a      	ldr	r2, [r3, #4]
 80113d8:	4613      	mov	r3, r2
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	4413      	add	r3, r2
 80113de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d305      	bcc.n	80113f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80113ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d903      	bls.n	80113f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80113f0:	2301      	movs	r3, #1
 80113f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113f6:	e1c1      	b.n	801177c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113fa:	2200      	movs	r2, #0
 80113fc:	60bb      	str	r3, [r7, #8]
 80113fe:	60fa      	str	r2, [r7, #12]
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011404:	4a84      	ldr	r2, [pc, #528]	; (8011618 <UART_SetConfig+0x930>)
 8011406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801140a:	b29b      	uxth	r3, r3
 801140c:	2200      	movs	r2, #0
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	607a      	str	r2, [r7, #4]
 8011412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801141a:	f7ee ff61 	bl	80002e0 <__aeabi_uldivmod>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	4610      	mov	r0, r2
 8011424:	4619      	mov	r1, r3
 8011426:	f04f 0200 	mov.w	r2, #0
 801142a:	f04f 0300 	mov.w	r3, #0
 801142e:	020b      	lsls	r3, r1, #8
 8011430:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011434:	0202      	lsls	r2, r0, #8
 8011436:	6979      	ldr	r1, [r7, #20]
 8011438:	6849      	ldr	r1, [r1, #4]
 801143a:	0849      	lsrs	r1, r1, #1
 801143c:	2000      	movs	r0, #0
 801143e:	460c      	mov	r4, r1
 8011440:	4605      	mov	r5, r0
 8011442:	eb12 0804 	adds.w	r8, r2, r4
 8011446:	eb43 0905 	adc.w	r9, r3, r5
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	2200      	movs	r2, #0
 8011450:	469a      	mov	sl, r3
 8011452:	4693      	mov	fp, r2
 8011454:	4652      	mov	r2, sl
 8011456:	465b      	mov	r3, fp
 8011458:	4640      	mov	r0, r8
 801145a:	4649      	mov	r1, r9
 801145c:	f7ee ff40 	bl	80002e0 <__aeabi_uldivmod>
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	4613      	mov	r3, r2
 8011466:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801146e:	d308      	bcc.n	8011482 <UART_SetConfig+0x79a>
 8011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011476:	d204      	bcs.n	8011482 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801147e:	60da      	str	r2, [r3, #12]
 8011480:	e17c      	b.n	801177c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011488:	e178      	b.n	801177c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	69db      	ldr	r3, [r3, #28]
 801148e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011492:	f040 80c5 	bne.w	8011620 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801149a:	2b20      	cmp	r3, #32
 801149c:	dc48      	bgt.n	8011530 <UART_SetConfig+0x848>
 801149e:	2b00      	cmp	r3, #0
 80114a0:	db7b      	blt.n	801159a <UART_SetConfig+0x8b2>
 80114a2:	2b20      	cmp	r3, #32
 80114a4:	d879      	bhi.n	801159a <UART_SetConfig+0x8b2>
 80114a6:	a201      	add	r2, pc, #4	; (adr r2, 80114ac <UART_SetConfig+0x7c4>)
 80114a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ac:	08011537 	.word	0x08011537
 80114b0:	0801153f 	.word	0x0801153f
 80114b4:	0801159b 	.word	0x0801159b
 80114b8:	0801159b 	.word	0x0801159b
 80114bc:	08011547 	.word	0x08011547
 80114c0:	0801159b 	.word	0x0801159b
 80114c4:	0801159b 	.word	0x0801159b
 80114c8:	0801159b 	.word	0x0801159b
 80114cc:	08011557 	.word	0x08011557
 80114d0:	0801159b 	.word	0x0801159b
 80114d4:	0801159b 	.word	0x0801159b
 80114d8:	0801159b 	.word	0x0801159b
 80114dc:	0801159b 	.word	0x0801159b
 80114e0:	0801159b 	.word	0x0801159b
 80114e4:	0801159b 	.word	0x0801159b
 80114e8:	0801159b 	.word	0x0801159b
 80114ec:	08011567 	.word	0x08011567
 80114f0:	0801159b 	.word	0x0801159b
 80114f4:	0801159b 	.word	0x0801159b
 80114f8:	0801159b 	.word	0x0801159b
 80114fc:	0801159b 	.word	0x0801159b
 8011500:	0801159b 	.word	0x0801159b
 8011504:	0801159b 	.word	0x0801159b
 8011508:	0801159b 	.word	0x0801159b
 801150c:	0801159b 	.word	0x0801159b
 8011510:	0801159b 	.word	0x0801159b
 8011514:	0801159b 	.word	0x0801159b
 8011518:	0801159b 	.word	0x0801159b
 801151c:	0801159b 	.word	0x0801159b
 8011520:	0801159b 	.word	0x0801159b
 8011524:	0801159b 	.word	0x0801159b
 8011528:	0801159b 	.word	0x0801159b
 801152c:	0801158d 	.word	0x0801158d
 8011530:	2b40      	cmp	r3, #64	; 0x40
 8011532:	d02e      	beq.n	8011592 <UART_SetConfig+0x8aa>
 8011534:	e031      	b.n	801159a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011536:	f7f9 fbed 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 801153a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801153c:	e033      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801153e:	f7f9 fbff 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 8011542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011544:	e02f      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801154a:	4618      	mov	r0, r3
 801154c:	f7fb fbf0 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011554:	e027      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011556:	f107 0318 	add.w	r3, r7, #24
 801155a:	4618      	mov	r0, r3
 801155c:	f7fb fd3c 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011564:	e01f      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011566:	4b2d      	ldr	r3, [pc, #180]	; (801161c <UART_SetConfig+0x934>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f003 0320 	and.w	r3, r3, #32
 801156e:	2b00      	cmp	r3, #0
 8011570:	d009      	beq.n	8011586 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011572:	4b2a      	ldr	r3, [pc, #168]	; (801161c <UART_SetConfig+0x934>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	08db      	lsrs	r3, r3, #3
 8011578:	f003 0303 	and.w	r3, r3, #3
 801157c:	4a24      	ldr	r2, [pc, #144]	; (8011610 <UART_SetConfig+0x928>)
 801157e:	fa22 f303 	lsr.w	r3, r2, r3
 8011582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011584:	e00f      	b.n	80115a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011586:	4b22      	ldr	r3, [pc, #136]	; (8011610 <UART_SetConfig+0x928>)
 8011588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801158a:	e00c      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801158c:	4b21      	ldr	r3, [pc, #132]	; (8011614 <UART_SetConfig+0x92c>)
 801158e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011590:	e009      	b.n	80115a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011598:	e005      	b.n	80115a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801159a:	2300      	movs	r3, #0
 801159c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801159e:	2301      	movs	r3, #1
 80115a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80e7 	beq.w	801177c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b2:	4a19      	ldr	r2, [pc, #100]	; (8011618 <UART_SetConfig+0x930>)
 80115b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115b8:	461a      	mov	r2, r3
 80115ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80115c0:	005a      	lsls	r2, r3, #1
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	085b      	lsrs	r3, r3, #1
 80115c8:	441a      	add	r2, r3
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80115d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d6:	2b0f      	cmp	r3, #15
 80115d8:	d916      	bls.n	8011608 <UART_SetConfig+0x920>
 80115da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115e0:	d212      	bcs.n	8011608 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	f023 030f 	bic.w	r3, r3, #15
 80115ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	085b      	lsrs	r3, r3, #1
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	f003 0307 	and.w	r3, r3, #7
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80115fa:	4313      	orrs	r3, r2
 80115fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011604:	60da      	str	r2, [r3, #12]
 8011606:	e0b9      	b.n	801177c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011608:	2301      	movs	r3, #1
 801160a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801160e:	e0b5      	b.n	801177c <UART_SetConfig+0xa94>
 8011610:	03d09000 	.word	0x03d09000
 8011614:	003d0900 	.word	0x003d0900
 8011618:	080176f8 	.word	0x080176f8
 801161c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011620:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011624:	2b20      	cmp	r3, #32
 8011626:	dc49      	bgt.n	80116bc <UART_SetConfig+0x9d4>
 8011628:	2b00      	cmp	r3, #0
 801162a:	db7c      	blt.n	8011726 <UART_SetConfig+0xa3e>
 801162c:	2b20      	cmp	r3, #32
 801162e:	d87a      	bhi.n	8011726 <UART_SetConfig+0xa3e>
 8011630:	a201      	add	r2, pc, #4	; (adr r2, 8011638 <UART_SetConfig+0x950>)
 8011632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011636:	bf00      	nop
 8011638:	080116c3 	.word	0x080116c3
 801163c:	080116cb 	.word	0x080116cb
 8011640:	08011727 	.word	0x08011727
 8011644:	08011727 	.word	0x08011727
 8011648:	080116d3 	.word	0x080116d3
 801164c:	08011727 	.word	0x08011727
 8011650:	08011727 	.word	0x08011727
 8011654:	08011727 	.word	0x08011727
 8011658:	080116e3 	.word	0x080116e3
 801165c:	08011727 	.word	0x08011727
 8011660:	08011727 	.word	0x08011727
 8011664:	08011727 	.word	0x08011727
 8011668:	08011727 	.word	0x08011727
 801166c:	08011727 	.word	0x08011727
 8011670:	08011727 	.word	0x08011727
 8011674:	08011727 	.word	0x08011727
 8011678:	080116f3 	.word	0x080116f3
 801167c:	08011727 	.word	0x08011727
 8011680:	08011727 	.word	0x08011727
 8011684:	08011727 	.word	0x08011727
 8011688:	08011727 	.word	0x08011727
 801168c:	08011727 	.word	0x08011727
 8011690:	08011727 	.word	0x08011727
 8011694:	08011727 	.word	0x08011727
 8011698:	08011727 	.word	0x08011727
 801169c:	08011727 	.word	0x08011727
 80116a0:	08011727 	.word	0x08011727
 80116a4:	08011727 	.word	0x08011727
 80116a8:	08011727 	.word	0x08011727
 80116ac:	08011727 	.word	0x08011727
 80116b0:	08011727 	.word	0x08011727
 80116b4:	08011727 	.word	0x08011727
 80116b8:	08011719 	.word	0x08011719
 80116bc:	2b40      	cmp	r3, #64	; 0x40
 80116be:	d02e      	beq.n	801171e <UART_SetConfig+0xa36>
 80116c0:	e031      	b.n	8011726 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116c2:	f7f9 fb27 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 80116c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116c8:	e033      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116ca:	f7f9 fb39 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 80116ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116d0:	e02f      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7fb fb2a 	bl	800cd30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116e0:	e027      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116e2:	f107 0318 	add.w	r3, r7, #24
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fb fc76 	bl	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116f0:	e01f      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116f2:	4b2d      	ldr	r3, [pc, #180]	; (80117a8 <UART_SetConfig+0xac0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f003 0320 	and.w	r3, r3, #32
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d009      	beq.n	8011712 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116fe:	4b2a      	ldr	r3, [pc, #168]	; (80117a8 <UART_SetConfig+0xac0>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	08db      	lsrs	r3, r3, #3
 8011704:	f003 0303 	and.w	r3, r3, #3
 8011708:	4a28      	ldr	r2, [pc, #160]	; (80117ac <UART_SetConfig+0xac4>)
 801170a:	fa22 f303 	lsr.w	r3, r2, r3
 801170e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011710:	e00f      	b.n	8011732 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011712:	4b26      	ldr	r3, [pc, #152]	; (80117ac <UART_SetConfig+0xac4>)
 8011714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011716:	e00c      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011718:	4b25      	ldr	r3, [pc, #148]	; (80117b0 <UART_SetConfig+0xac8>)
 801171a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801171c:	e009      	b.n	8011732 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801171e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011724:	e005      	b.n	8011732 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011726:	2300      	movs	r3, #0
 8011728:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801172a:	2301      	movs	r3, #1
 801172c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011730:	bf00      	nop
    }

    if (pclk != 0U)
 8011732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011734:	2b00      	cmp	r3, #0
 8011736:	d021      	beq.n	801177c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173c:	4a1d      	ldr	r2, [pc, #116]	; (80117b4 <UART_SetConfig+0xacc>)
 801173e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011742:	461a      	mov	r2, r3
 8011744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011746:	fbb3 f2f2 	udiv	r2, r3, r2
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	085b      	lsrs	r3, r3, #1
 8011750:	441a      	add	r2, r3
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	fbb2 f3f3 	udiv	r3, r2, r3
 801175a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	2b0f      	cmp	r3, #15
 8011760:	d909      	bls.n	8011776 <UART_SetConfig+0xa8e>
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011768:	d205      	bcs.n	8011776 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176c:	b29a      	uxth	r2, r3
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	60da      	str	r2, [r3, #12]
 8011774:	e002      	b.n	801177c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2201      	movs	r2, #1
 8011780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2201      	movs	r2, #1
 8011788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2200      	movs	r2, #0
 8011790:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2200      	movs	r2, #0
 8011796:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011798:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801179c:	4618      	mov	r0, r3
 801179e:	3748      	adds	r7, #72	; 0x48
 80117a0:	46bd      	mov	sp, r7
 80117a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117a6:	bf00      	nop
 80117a8:	58024400 	.word	0x58024400
 80117ac:	03d09000 	.word	0x03d09000
 80117b0:	003d0900 	.word	0x003d0900
 80117b4:	080176f8 	.word	0x080176f8

080117b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c4:	f003 0308 	and.w	r3, r3, #8
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00a      	beq.n	80117e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	430a      	orrs	r2, r1
 80117e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e6:	f003 0301 	and.w	r3, r3, #1
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	430a      	orrs	r2, r1
 8011802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011808:	f003 0302 	and.w	r3, r3, #2
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00a      	beq.n	8011826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	430a      	orrs	r2, r1
 8011824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801182a:	f003 0304 	and.w	r3, r3, #4
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00a      	beq.n	8011848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	430a      	orrs	r2, r1
 8011846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801184c:	f003 0310 	and.w	r3, r3, #16
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	430a      	orrs	r2, r1
 8011868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801186e:	f003 0320 	and.w	r3, r3, #32
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00a      	beq.n	801188c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	430a      	orrs	r2, r1
 801188a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	2b00      	cmp	r3, #0
 8011896:	d01a      	beq.n	80118ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	430a      	orrs	r2, r1
 80118ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118b6:	d10a      	bne.n	80118ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	430a      	orrs	r2, r1
 80118cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00a      	beq.n	80118f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	430a      	orrs	r2, r1
 80118ee:	605a      	str	r2, [r3, #4]
  }
}
 80118f0:	bf00      	nop
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b098      	sub	sp, #96	; 0x60
 8011900:	af02      	add	r7, sp, #8
 8011902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801190c:	f7f2 fa74 	bl	8003df8 <HAL_GetTick>
 8011910:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 0308 	and.w	r3, r3, #8
 801191c:	2b08      	cmp	r3, #8
 801191e:	d12f      	bne.n	8011980 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011928:	2200      	movs	r2, #0
 801192a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f88e 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d022      	beq.n	8011980 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011942:	e853 3f00 	ldrex	r3, [r3]
 8011946:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801194e:	653b      	str	r3, [r7, #80]	; 0x50
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	461a      	mov	r2, r3
 8011956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011958:	647b      	str	r3, [r7, #68]	; 0x44
 801195a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801195c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801195e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011960:	e841 2300 	strex	r3, r2, [r1]
 8011964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1e6      	bne.n	801193a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2220      	movs	r2, #32
 8011970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801197c:	2303      	movs	r3, #3
 801197e:	e063      	b.n	8011a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f003 0304 	and.w	r3, r3, #4
 801198a:	2b04      	cmp	r3, #4
 801198c:	d149      	bne.n	8011a22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801198e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011992:	9300      	str	r3, [sp, #0]
 8011994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011996:	2200      	movs	r2, #0
 8011998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 f857 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d03c      	beq.n	8011a22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	e853 3f00 	ldrex	r3, [r3]
 80119b4:	623b      	str	r3, [r7, #32]
   return(result);
 80119b6:	6a3b      	ldr	r3, [r7, #32]
 80119b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	461a      	mov	r2, r3
 80119c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119c6:	633b      	str	r3, [r7, #48]	; 0x30
 80119c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ce:	e841 2300 	strex	r3, r2, [r1]
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1e6      	bne.n	80119a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	3308      	adds	r3, #8
 80119e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	e853 3f00 	ldrex	r3, [r3]
 80119e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f023 0301 	bic.w	r3, r3, #1
 80119f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	3308      	adds	r3, #8
 80119f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119fa:	61fa      	str	r2, [r7, #28]
 80119fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119fe:	69b9      	ldr	r1, [r7, #24]
 8011a00:	69fa      	ldr	r2, [r7, #28]
 8011a02:	e841 2300 	strex	r3, r2, [r1]
 8011a06:	617b      	str	r3, [r7, #20]
   return(result);
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d1e5      	bne.n	80119da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2220      	movs	r2, #32
 8011a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a1e:	2303      	movs	r3, #3
 8011a20:	e012      	b.n	8011a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2220      	movs	r2, #32
 8011a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3758      	adds	r7, #88	; 0x58
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a60:	e04f      	b.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a68:	d04b      	beq.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a6a:	f7f2 f9c5 	bl	8003df8 <HAL_GetTick>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	69ba      	ldr	r2, [r7, #24]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d302      	bcc.n	8011a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d101      	bne.n	8011a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a80:	2303      	movs	r3, #3
 8011a82:	e04e      	b.n	8011b22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f003 0304 	and.w	r3, r3, #4
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d037      	beq.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2b80      	cmp	r3, #128	; 0x80
 8011a96:	d034      	beq.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2b40      	cmp	r3, #64	; 0x40
 8011a9c:	d031      	beq.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	69db      	ldr	r3, [r3, #28]
 8011aa4:	f003 0308 	and.w	r3, r3, #8
 8011aa8:	2b08      	cmp	r3, #8
 8011aaa:	d110      	bne.n	8011ace <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f000 f99d 	bl	8011df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2208      	movs	r2, #8
 8011abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	e029      	b.n	8011b22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	69db      	ldr	r3, [r3, #28]
 8011ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011adc:	d111      	bne.n	8011b02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ae8:	68f8      	ldr	r0, [r7, #12]
 8011aea:	f000 f983 	bl	8011df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2220      	movs	r2, #32
 8011af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011afe:	2303      	movs	r3, #3
 8011b00:	e00f      	b.n	8011b22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	69da      	ldr	r2, [r3, #28]
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	bf0c      	ite	eq
 8011b12:	2301      	moveq	r3, #1
 8011b14:	2300      	movne	r3, #0
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	461a      	mov	r2, r3
 8011b1a:	79fb      	ldrb	r3, [r7, #7]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d0a0      	beq.n	8011a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b20:	2300      	movs	r3, #0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
	...

08011b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b0a3      	sub	sp, #140	; 0x8c
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	4613      	mov	r3, r2
 8011b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	88fa      	ldrh	r2, [r7, #6]
 8011b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	88fa      	ldrh	r2, [r7, #6]
 8011b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2200      	movs	r2, #0
 8011b54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	689b      	ldr	r3, [r3, #8]
 8011b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b5e:	d10e      	bne.n	8011b7e <UART_Start_Receive_IT+0x52>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d105      	bne.n	8011b74 <UART_Start_Receive_IT+0x48>
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b72:	e02d      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	22ff      	movs	r2, #255	; 0xff
 8011b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b7c:	e028      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10d      	bne.n	8011ba2 <UART_Start_Receive_IT+0x76>
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	691b      	ldr	r3, [r3, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d104      	bne.n	8011b98 <UART_Start_Receive_IT+0x6c>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	22ff      	movs	r2, #255	; 0xff
 8011b92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011b96:	e01b      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	227f      	movs	r2, #127	; 0x7f
 8011b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ba0:	e016      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011baa:	d10d      	bne.n	8011bc8 <UART_Start_Receive_IT+0x9c>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	691b      	ldr	r3, [r3, #16]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d104      	bne.n	8011bbe <UART_Start_Receive_IT+0x92>
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	227f      	movs	r2, #127	; 0x7f
 8011bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bbc:	e008      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	223f      	movs	r2, #63	; 0x3f
 8011bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bc6:	e003      	b.n	8011bd0 <UART_Start_Receive_IT+0xa4>
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2222      	movs	r2, #34	; 0x22
 8011bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	3308      	adds	r3, #8
 8011be6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011bea:	e853 3f00 	ldrex	r3, [r3]
 8011bee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bf2:	f043 0301 	orr.w	r3, r3, #1
 8011bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3308      	adds	r3, #8
 8011c00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011c04:	673a      	str	r2, [r7, #112]	; 0x70
 8011c06:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c0c:	e841 2300 	strex	r3, r2, [r1]
 8011c10:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1e3      	bne.n	8011be0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c20:	d14f      	bne.n	8011cc2 <UART_Start_Receive_IT+0x196>
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c28:	88fa      	ldrh	r2, [r7, #6]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d349      	bcc.n	8011cc2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c36:	d107      	bne.n	8011c48 <UART_Start_Receive_IT+0x11c>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d103      	bne.n	8011c48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	4a47      	ldr	r2, [pc, #284]	; (8011d60 <UART_Start_Receive_IT+0x234>)
 8011c44:	675a      	str	r2, [r3, #116]	; 0x74
 8011c46:	e002      	b.n	8011c4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	4a46      	ldr	r2, [pc, #280]	; (8011d64 <UART_Start_Receive_IT+0x238>)
 8011c4c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d01a      	beq.n	8011c8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c5e:	e853 3f00 	ldrex	r3, [r3]
 8011c62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c7a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011c7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011c80:	e841 2300 	strex	r3, r2, [r1]
 8011c84:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1e4      	bne.n	8011c56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	3308      	adds	r3, #8
 8011c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c96:	e853 3f00 	ldrex	r3, [r3]
 8011c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	3308      	adds	r3, #8
 8011caa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011cac:	64ba      	str	r2, [r7, #72]	; 0x48
 8011cae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cb4:	e841 2300 	strex	r3, r2, [r1]
 8011cb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1e5      	bne.n	8011c8c <UART_Start_Receive_IT+0x160>
 8011cc0:	e046      	b.n	8011d50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011cca:	d107      	bne.n	8011cdc <UART_Start_Receive_IT+0x1b0>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d103      	bne.n	8011cdc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	4a24      	ldr	r2, [pc, #144]	; (8011d68 <UART_Start_Receive_IT+0x23c>)
 8011cd8:	675a      	str	r2, [r3, #116]	; 0x74
 8011cda:	e002      	b.n	8011ce2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	4a23      	ldr	r2, [pc, #140]	; (8011d6c <UART_Start_Receive_IT+0x240>)
 8011ce0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d019      	beq.n	8011d1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf2:	e853 3f00 	ldrex	r3, [r3]
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011cfe:	677b      	str	r3, [r7, #116]	; 0x74
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	461a      	mov	r2, r3
 8011d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d08:	637b      	str	r3, [r7, #52]	; 0x34
 8011d0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d10:	e841 2300 	strex	r3, r2, [r1]
 8011d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1e6      	bne.n	8011cea <UART_Start_Receive_IT+0x1be>
 8011d1c:	e018      	b.n	8011d50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	e853 3f00 	ldrex	r3, [r3]
 8011d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	f043 0320 	orr.w	r3, r3, #32
 8011d32:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d3c:	623b      	str	r3, [r7, #32]
 8011d3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d40:	69f9      	ldr	r1, [r7, #28]
 8011d42:	6a3a      	ldr	r2, [r7, #32]
 8011d44:	e841 2300 	strex	r3, r2, [r1]
 8011d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1e6      	bne.n	8011d1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	378c      	adds	r7, #140	; 0x8c
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	08012745 	.word	0x08012745
 8011d64:	080123e5 	.word	0x080123e5
 8011d68:	0801222d 	.word	0x0801222d
 8011d6c:	08012075 	.word	0x08012075

08011d70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b08f      	sub	sp, #60	; 0x3c
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7e:	6a3b      	ldr	r3, [r7, #32]
 8011d80:	e853 3f00 	ldrex	r3, [r3]
 8011d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	461a      	mov	r2, r3
 8011d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d9e:	e841 2300 	strex	r3, r2, [r1]
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1e6      	bne.n	8011d78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	3308      	adds	r3, #8
 8011db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	e853 3f00 	ldrex	r3, [r3]
 8011db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3308      	adds	r3, #8
 8011dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dca:	61ba      	str	r2, [r7, #24]
 8011dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dce:	6979      	ldr	r1, [r7, #20]
 8011dd0:	69ba      	ldr	r2, [r7, #24]
 8011dd2:	e841 2300 	strex	r3, r2, [r1]
 8011dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d1e5      	bne.n	8011daa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2220      	movs	r2, #32
 8011de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011de6:	bf00      	nop
 8011de8:	373c      	adds	r7, #60	; 0x3c
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr
	...

08011df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b095      	sub	sp, #84	; 0x54
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e04:	e853 3f00 	ldrex	r3, [r3]
 8011e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	461a      	mov	r2, r3
 8011e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8011e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e22:	e841 2300 	strex	r3, r2, [r1]
 8011e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1e6      	bne.n	8011dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	3308      	adds	r3, #8
 8011e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	e853 3f00 	ldrex	r3, [r3]
 8011e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e3e:	69fa      	ldr	r2, [r7, #28]
 8011e40:	4b1e      	ldr	r3, [pc, #120]	; (8011ebc <UART_EndRxTransfer+0xc8>)
 8011e42:	4013      	ands	r3, r2
 8011e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	3308      	adds	r3, #8
 8011e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e56:	e841 2300 	strex	r3, r2, [r1]
 8011e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1e5      	bne.n	8011e2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d118      	bne.n	8011e9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	e853 3f00 	ldrex	r3, [r3]
 8011e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	f023 0310 	bic.w	r3, r3, #16
 8011e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	461a      	mov	r2, r3
 8011e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e88:	61bb      	str	r3, [r7, #24]
 8011e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e8c:	6979      	ldr	r1, [r7, #20]
 8011e8e:	69ba      	ldr	r2, [r7, #24]
 8011e90:	e841 2300 	strex	r3, r2, [r1]
 8011e94:	613b      	str	r3, [r7, #16]
   return(result);
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1e6      	bne.n	8011e6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2220      	movs	r2, #32
 8011ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011eb0:	bf00      	nop
 8011eb2:	3754      	adds	r7, #84	; 0x54
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	effffffe 	.word	0xeffffffe

08011ec0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b090      	sub	sp, #64	; 0x40
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ecc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	69db      	ldr	r3, [r3, #28]
 8011ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ed6:	d037      	beq.n	8011f48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eda:	2200      	movs	r2, #0
 8011edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	3308      	adds	r3, #8
 8011ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	e853 3f00 	ldrex	r3, [r3]
 8011eee:	623b      	str	r3, [r7, #32]
   return(result);
 8011ef0:	6a3b      	ldr	r3, [r7, #32]
 8011ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	3308      	adds	r3, #8
 8011efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f00:	633a      	str	r2, [r7, #48]	; 0x30
 8011f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f08:	e841 2300 	strex	r3, r2, [r1]
 8011f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d1e5      	bne.n	8011ee0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	e853 3f00 	ldrex	r3, [r3]
 8011f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f28:	637b      	str	r3, [r7, #52]	; 0x34
 8011f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f32:	61fb      	str	r3, [r7, #28]
 8011f34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f36:	69b9      	ldr	r1, [r7, #24]
 8011f38:	69fa      	ldr	r2, [r7, #28]
 8011f3a:	e841 2300 	strex	r3, r2, [r1]
 8011f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d1e6      	bne.n	8011f14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f46:	e002      	b.n	8011f4e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f4a:	f7f0 f983 	bl	8002254 <HAL_UART_TxCpltCallback>
}
 8011f4e:	bf00      	nop
 8011f50:	3740      	adds	r7, #64	; 0x40
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}

08011f56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f56:	b580      	push	{r7, lr}
 8011f58:	b084      	sub	sp, #16
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f7fe fe9f 	bl	8010ca8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f6a:	bf00      	nop
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b086      	sub	sp, #24
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f9a:	2b80      	cmp	r3, #128	; 0x80
 8011f9c:	d109      	bne.n	8011fb2 <UART_DMAError+0x40>
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	2b21      	cmp	r3, #33	; 0x21
 8011fa2:	d106      	bne.n	8011fb2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011fac:	6978      	ldr	r0, [r7, #20]
 8011fae:	f7ff fedf 	bl	8011d70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fbc:	2b40      	cmp	r3, #64	; 0x40
 8011fbe:	d109      	bne.n	8011fd4 <UART_DMAError+0x62>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2b22      	cmp	r3, #34	; 0x22
 8011fc4:	d106      	bne.n	8011fd4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	f7ff ff10 	bl	8011df4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fda:	f043 0210 	orr.w	r2, r3, #16
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011fe4:	6978      	ldr	r0, [r7, #20]
 8011fe6:	f7fe fe69 	bl	8010cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fea:	bf00      	nop
 8011fec:	3718      	adds	r7, #24
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b084      	sub	sp, #16
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2200      	movs	r2, #0
 8012004:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2200      	movs	r2, #0
 801200c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f7fe fe53 	bl	8010cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012016:	bf00      	nop
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b088      	sub	sp, #32
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	e853 3f00 	ldrex	r3, [r3]
 8012032:	60bb      	str	r3, [r7, #8]
   return(result);
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801203a:	61fb      	str	r3, [r7, #28]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	461a      	mov	r2, r3
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	61bb      	str	r3, [r7, #24]
 8012046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012048:	6979      	ldr	r1, [r7, #20]
 801204a:	69ba      	ldr	r2, [r7, #24]
 801204c:	e841 2300 	strex	r3, r2, [r1]
 8012050:	613b      	str	r3, [r7, #16]
   return(result);
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d1e6      	bne.n	8012026 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2220      	movs	r2, #32
 801205c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7f0 f8f4 	bl	8002254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801206c:	bf00      	nop
 801206e:	3720      	adds	r7, #32
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b09c      	sub	sp, #112	; 0x70
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012082:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801208c:	2b22      	cmp	r3, #34	; 0x22
 801208e:	f040 80be 	bne.w	801220e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012098:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801209c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120a0:	b2d9      	uxtb	r1, r3
 80120a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ac:	400a      	ands	r2, r1
 80120ae:	b2d2      	uxtb	r2, r2
 80120b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	3b01      	subs	r3, #1
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	f040 80a1 	bne.w	801221e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120e4:	e853 3f00 	ldrex	r3, [r3]
 80120e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80120ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80120fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80120fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012102:	e841 2300 	strex	r3, r2, [r1]
 8012106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	2b00      	cmp	r3, #0
 801210c:	d1e6      	bne.n	80120dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012118:	e853 3f00 	ldrex	r3, [r3]
 801211c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012120:	f023 0301 	bic.w	r3, r3, #1
 8012124:	667b      	str	r3, [r7, #100]	; 0x64
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3308      	adds	r3, #8
 801212c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801212e:	647a      	str	r2, [r7, #68]	; 0x44
 8012130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012136:	e841 2300 	strex	r3, r2, [r1]
 801213a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801213e:	2b00      	cmp	r3, #0
 8012140:	d1e5      	bne.n	801210e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2220      	movs	r2, #32
 8012146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2200      	movs	r2, #0
 801214e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2200      	movs	r2, #0
 8012154:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4a33      	ldr	r2, [pc, #204]	; (8012228 <UART_RxISR_8BIT+0x1b4>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d01f      	beq.n	80121a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801216a:	2b00      	cmp	r3, #0
 801216c:	d018      	beq.n	80121a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012176:	e853 3f00 	ldrex	r3, [r3]
 801217a:	623b      	str	r3, [r7, #32]
   return(result);
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012182:	663b      	str	r3, [r7, #96]	; 0x60
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	461a      	mov	r2, r3
 801218a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801218c:	633b      	str	r3, [r7, #48]	; 0x30
 801218e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012194:	e841 2300 	strex	r3, r2, [r1]
 8012198:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	2b00      	cmp	r3, #0
 801219e:	d1e6      	bne.n	801216e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d12e      	bne.n	8012206 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	e853 3f00 	ldrex	r3, [r3]
 80121ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f023 0310 	bic.w	r3, r3, #16
 80121c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121cc:	61fb      	str	r3, [r7, #28]
 80121ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d0:	69b9      	ldr	r1, [r7, #24]
 80121d2:	69fa      	ldr	r2, [r7, #28]
 80121d4:	e841 2300 	strex	r3, r2, [r1]
 80121d8:	617b      	str	r3, [r7, #20]
   return(result);
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1e6      	bne.n	80121ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	69db      	ldr	r3, [r3, #28]
 80121e6:	f003 0310 	and.w	r3, r3, #16
 80121ea:	2b10      	cmp	r3, #16
 80121ec:	d103      	bne.n	80121f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2210      	movs	r2, #16
 80121f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7fe fd66 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012204:	e00b      	b.n	801221e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7ee fa3e 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801220c:	e007      	b.n	801221e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	699a      	ldr	r2, [r3, #24]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f042 0208 	orr.w	r2, r2, #8
 801221c:	619a      	str	r2, [r3, #24]
}
 801221e:	bf00      	nop
 8012220:	3770      	adds	r7, #112	; 0x70
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	58000c00 	.word	0x58000c00

0801222c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b09c      	sub	sp, #112	; 0x70
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801223a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012244:	2b22      	cmp	r3, #34	; 0x22
 8012246:	f040 80be 	bne.w	80123c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012250:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012258:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801225a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801225e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012262:	4013      	ands	r3, r2
 8012264:	b29a      	uxth	r2, r3
 8012266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801226e:	1c9a      	adds	r2, r3, #2
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801227a:	b29b      	uxth	r3, r3
 801227c:	3b01      	subs	r3, #1
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801228c:	b29b      	uxth	r3, r3
 801228e:	2b00      	cmp	r3, #0
 8012290:	f040 80a1 	bne.w	80123d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801229c:	e853 3f00 	ldrex	r3, [r3]
 80122a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122a8:	667b      	str	r3, [r7, #100]	; 0x64
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122b2:	657b      	str	r3, [r7, #84]	; 0x54
 80122b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122ba:	e841 2300 	strex	r3, r2, [r1]
 80122be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1e6      	bne.n	8012294 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3308      	adds	r3, #8
 80122cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d0:	e853 3f00 	ldrex	r3, [r3]
 80122d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d8:	f023 0301 	bic.w	r3, r3, #1
 80122dc:	663b      	str	r3, [r7, #96]	; 0x60
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	3308      	adds	r3, #8
 80122e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122e6:	643a      	str	r2, [r7, #64]	; 0x40
 80122e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122ee:	e841 2300 	strex	r3, r2, [r1]
 80122f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d1e5      	bne.n	80122c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2220      	movs	r2, #32
 80122fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2200      	movs	r2, #0
 8012306:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	4a33      	ldr	r2, [pc, #204]	; (80123e0 <UART_RxISR_16BIT+0x1b4>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d01f      	beq.n	8012358 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012322:	2b00      	cmp	r3, #0
 8012324:	d018      	beq.n	8012358 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801232c:	6a3b      	ldr	r3, [r7, #32]
 801232e:	e853 3f00 	ldrex	r3, [r3]
 8012332:	61fb      	str	r3, [r7, #28]
   return(result);
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801233a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	461a      	mov	r2, r3
 8012342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012346:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801234c:	e841 2300 	strex	r3, r2, [r1]
 8012350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1e6      	bne.n	8012326 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235c:	2b01      	cmp	r3, #1
 801235e:	d12e      	bne.n	80123be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	e853 3f00 	ldrex	r3, [r3]
 8012372:	60bb      	str	r3, [r7, #8]
   return(result);
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	f023 0310 	bic.w	r3, r3, #16
 801237a:	65bb      	str	r3, [r7, #88]	; 0x58
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	461a      	mov	r2, r3
 8012382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012384:	61bb      	str	r3, [r7, #24]
 8012386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012388:	6979      	ldr	r1, [r7, #20]
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	e841 2300 	strex	r3, r2, [r1]
 8012390:	613b      	str	r3, [r7, #16]
   return(result);
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1e6      	bne.n	8012366 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	f003 0310 	and.w	r3, r3, #16
 80123a2:	2b10      	cmp	r3, #16
 80123a4:	d103      	bne.n	80123ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2210      	movs	r2, #16
 80123ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7fe fc8a 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123bc:	e00b      	b.n	80123d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7ee f962 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80123c4:	e007      	b.n	80123d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	699a      	ldr	r2, [r3, #24]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	f042 0208 	orr.w	r2, r2, #8
 80123d4:	619a      	str	r2, [r3, #24]
}
 80123d6:	bf00      	nop
 80123d8:	3770      	adds	r7, #112	; 0x70
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	58000c00 	.word	0x58000c00

080123e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b0ac      	sub	sp, #176	; 0xb0
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	69db      	ldr	r3, [r3, #28]
 80123fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801241a:	2b22      	cmp	r3, #34	; 0x22
 801241c:	f040 8180 	bne.w	8012720 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012426:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801242a:	e123      	b.n	8012674 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012432:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012436:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801243a:	b2d9      	uxtb	r1, r3
 801243c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012440:	b2da      	uxtb	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012446:	400a      	ands	r2, r1
 8012448:	b2d2      	uxtb	r2, r2
 801244a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801245c:	b29b      	uxth	r3, r3
 801245e:	3b01      	subs	r3, #1
 8012460:	b29a      	uxth	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012476:	f003 0307 	and.w	r3, r3, #7
 801247a:	2b00      	cmp	r3, #0
 801247c:	d053      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801247e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012482:	f003 0301 	and.w	r3, r3, #1
 8012486:	2b00      	cmp	r3, #0
 8012488:	d011      	beq.n	80124ae <UART_RxISR_8BIT_FIFOEN+0xca>
 801248a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00b      	beq.n	80124ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	2201      	movs	r2, #1
 801249c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124a4:	f043 0201 	orr.w	r2, r3, #1
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124b2:	f003 0302 	and.w	r3, r3, #2
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d011      	beq.n	80124de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80124ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124be:	f003 0301 	and.w	r3, r3, #1
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00b      	beq.n	80124de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2202      	movs	r2, #2
 80124cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d4:	f043 0204 	orr.w	r2, r3, #4
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124e2:	f003 0304 	and.w	r3, r3, #4
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d011      	beq.n	801250e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80124ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124ee:	f003 0301 	and.w	r3, r3, #1
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00b      	beq.n	801250e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2204      	movs	r2, #4
 80124fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012504:	f043 0202 	orr.w	r2, r3, #2
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012514:	2b00      	cmp	r3, #0
 8012516:	d006      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f7fe fbcf 	bl	8010cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801252c:	b29b      	uxth	r3, r3
 801252e:	2b00      	cmp	r3, #0
 8012530:	f040 80a0 	bne.w	8012674 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801253c:	e853 3f00 	ldrex	r3, [r3]
 8012540:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	461a      	mov	r2, r3
 8012552:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012556:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012558:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801255c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801255e:	e841 2300 	strex	r3, r2, [r1]
 8012562:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012566:	2b00      	cmp	r3, #0
 8012568:	d1e4      	bne.n	8012534 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	3308      	adds	r3, #8
 8012570:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012574:	e853 3f00 	ldrex	r3, [r3]
 8012578:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801257a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801257c:	4b6e      	ldr	r3, [pc, #440]	; (8012738 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801257e:	4013      	ands	r3, r2
 8012580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	3308      	adds	r3, #8
 801258a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801258e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012590:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012592:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012596:	e841 2300 	strex	r3, r2, [r1]
 801259a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801259c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1e3      	bne.n	801256a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2220      	movs	r2, #32
 80125a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2200      	movs	r2, #0
 80125ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2200      	movs	r2, #0
 80125b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4a60      	ldr	r2, [pc, #384]	; (801273c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d021      	beq.n	8012604 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d01a      	beq.n	8012604 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125d6:	e853 3f00 	ldrex	r3, [r3]
 80125da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80125dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	461a      	mov	r2, r3
 80125ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125f0:	657b      	str	r3, [r7, #84]	; 0x54
 80125f2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80125f8:	e841 2300 	strex	r3, r2, [r1]
 80125fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80125fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1e4      	bne.n	80125ce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012608:	2b01      	cmp	r3, #1
 801260a:	d130      	bne.n	801266e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801261a:	e853 3f00 	ldrex	r3, [r3]
 801261e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012622:	f023 0310 	bic.w	r3, r3, #16
 8012626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	461a      	mov	r2, r3
 8012630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012634:	643b      	str	r3, [r7, #64]	; 0x40
 8012636:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801263a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801263c:	e841 2300 	strex	r3, r2, [r1]
 8012640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1e4      	bne.n	8012612 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	69db      	ldr	r3, [r3, #28]
 801264e:	f003 0310 	and.w	r3, r3, #16
 8012652:	2b10      	cmp	r3, #16
 8012654:	d103      	bne.n	801265e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2210      	movs	r2, #16
 801265c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7fe fb32 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
 801266c:	e002      	b.n	8012674 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f7ee f80a 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012674:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801267c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012680:	f003 0320 	and.w	r3, r3, #32
 8012684:	2b00      	cmp	r3, #0
 8012686:	f47f aed1 	bne.w	801242c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012690:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012694:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012698:	2b00      	cmp	r3, #0
 801269a:	d049      	beq.n	8012730 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126a2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d242      	bcs.n	8012730 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	3308      	adds	r3, #8
 80126b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	e853 3f00 	ldrex	r3, [r3]
 80126b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	3308      	adds	r3, #8
 80126ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80126ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80126d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126d6:	e841 2300 	strex	r3, r2, [r1]
 80126da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d1e3      	bne.n	80126aa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4a16      	ldr	r2, [pc, #88]	; (8012740 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80126e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	e853 3f00 	ldrex	r3, [r3]
 80126f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	f043 0320 	orr.w	r3, r3, #32
 80126fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	461a      	mov	r2, r3
 8012706:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801270a:	61bb      	str	r3, [r7, #24]
 801270c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801270e:	6979      	ldr	r1, [r7, #20]
 8012710:	69ba      	ldr	r2, [r7, #24]
 8012712:	e841 2300 	strex	r3, r2, [r1]
 8012716:	613b      	str	r3, [r7, #16]
   return(result);
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1e4      	bne.n	80126e8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801271e:	e007      	b.n	8012730 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	699a      	ldr	r2, [r3, #24]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f042 0208 	orr.w	r2, r2, #8
 801272e:	619a      	str	r2, [r3, #24]
}
 8012730:	bf00      	nop
 8012732:	37b0      	adds	r7, #176	; 0xb0
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	effffffe 	.word	0xeffffffe
 801273c:	58000c00 	.word	0x58000c00
 8012740:	08012075 	.word	0x08012075

08012744 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b0ae      	sub	sp, #184	; 0xb8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012752:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	69db      	ldr	r3, [r3, #28]
 801275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801277a:	2b22      	cmp	r3, #34	; 0x22
 801277c:	f040 8184 	bne.w	8012a88 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012786:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801278a:	e127      	b.n	80129dc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012792:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801279a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801279e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127a6:	4013      	ands	r3, r2
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127b4:	1c9a      	adds	r2, r3, #2
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	3b01      	subs	r3, #1
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	69db      	ldr	r3, [r3, #28]
 80127d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127da:	f003 0307 	and.w	r3, r3, #7
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d053      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80127e6:	f003 0301 	and.w	r3, r3, #1
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d011      	beq.n	8012812 <UART_RxISR_16BIT_FIFOEN+0xce>
 80127ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00b      	beq.n	8012812 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2201      	movs	r2, #1
 8012800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012808:	f043 0201 	orr.w	r2, r3, #1
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d011      	beq.n	8012842 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801281e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012822:	f003 0301 	and.w	r3, r3, #1
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00b      	beq.n	8012842 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2202      	movs	r2, #2
 8012830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012838:	f043 0204 	orr.w	r2, r3, #4
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012846:	f003 0304 	and.w	r3, r3, #4
 801284a:	2b00      	cmp	r3, #0
 801284c:	d011      	beq.n	8012872 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801284e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012852:	f003 0301 	and.w	r3, r3, #1
 8012856:	2b00      	cmp	r3, #0
 8012858:	d00b      	beq.n	8012872 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2204      	movs	r2, #4
 8012860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012868:	f043 0202 	orr.w	r2, r3, #2
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012878:	2b00      	cmp	r3, #0
 801287a:	d006      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7fe fa1d 	bl	8010cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012890:	b29b      	uxth	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	f040 80a2 	bne.w	80129dc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128a0:	e853 3f00 	ldrex	r3, [r3]
 80128a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	461a      	mov	r2, r3
 80128b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80128c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128c6:	e841 2300 	strex	r3, r2, [r1]
 80128ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80128cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1e2      	bne.n	8012898 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	3308      	adds	r3, #8
 80128d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128dc:	e853 3f00 	ldrex	r3, [r3]
 80128e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80128e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80128e4:	4b6e      	ldr	r3, [pc, #440]	; (8012aa0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80128e6:	4013      	ands	r3, r2
 80128e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	3308      	adds	r3, #8
 80128f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80128f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80128f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80128fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80128fe:	e841 2300 	strex	r3, r2, [r1]
 8012902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1e3      	bne.n	80128d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2220      	movs	r2, #32
 801290e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2200      	movs	r2, #0
 8012916:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4a60      	ldr	r2, [pc, #384]	; (8012aa4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d021      	beq.n	801296c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012932:	2b00      	cmp	r3, #0
 8012934:	d01a      	beq.n	801296c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801293e:	e853 3f00 	ldrex	r3, [r3]
 8012942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801294a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	461a      	mov	r2, r3
 8012954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012958:	65bb      	str	r3, [r7, #88]	; 0x58
 801295a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801295c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801295e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012960:	e841 2300 	strex	r3, r2, [r1]
 8012964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012968:	2b00      	cmp	r3, #0
 801296a:	d1e4      	bne.n	8012936 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012970:	2b01      	cmp	r3, #1
 8012972:	d130      	bne.n	80129d6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2200      	movs	r2, #0
 8012978:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012982:	e853 3f00 	ldrex	r3, [r3]
 8012986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298a:	f023 0310 	bic.w	r3, r3, #16
 801298e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	461a      	mov	r2, r3
 8012998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801299c:	647b      	str	r3, [r7, #68]	; 0x44
 801299e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129a4:	e841 2300 	strex	r3, r2, [r1]
 80129a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1e4      	bne.n	801297a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	69db      	ldr	r3, [r3, #28]
 80129b6:	f003 0310 	and.w	r3, r3, #16
 80129ba:	2b10      	cmp	r3, #16
 80129bc:	d103      	bne.n	80129c6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2210      	movs	r2, #16
 80129c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129cc:	4619      	mov	r1, r3
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7fe f97e 	bl	8010cd0 <HAL_UARTEx_RxEventCallback>
 80129d4:	e002      	b.n	80129dc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f7ed fe56 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d006      	beq.n	80129f2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80129e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129e8:	f003 0320 	and.w	r3, r3, #32
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f47f aecd 	bne.w	801278c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80129fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d049      	beq.n	8012a98 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a0a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d242      	bcs.n	8012a98 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	3308      	adds	r3, #8
 8012a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	e853 3f00 	ldrex	r3, [r3]
 8012a20:	623b      	str	r3, [r7, #32]
   return(result);
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	3308      	adds	r3, #8
 8012a32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a36:	633a      	str	r2, [r7, #48]	; 0x30
 8012a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3e:	e841 2300 	strex	r3, r2, [r1]
 8012a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d1e3      	bne.n	8012a12 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4a16      	ldr	r2, [pc, #88]	; (8012aa8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012a4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	e853 3f00 	ldrex	r3, [r3]
 8012a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f043 0320 	orr.w	r3, r3, #32
 8012a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a72:	61fb      	str	r3, [r7, #28]
 8012a74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a76:	69b9      	ldr	r1, [r7, #24]
 8012a78:	69fa      	ldr	r2, [r7, #28]
 8012a7a:	e841 2300 	strex	r3, r2, [r1]
 8012a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1e4      	bne.n	8012a50 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a86:	e007      	b.n	8012a98 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	699a      	ldr	r2, [r3, #24]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f042 0208 	orr.w	r2, r2, #8
 8012a96:	619a      	str	r2, [r3, #24]
}
 8012a98:	bf00      	nop
 8012a9a:	37b8      	adds	r7, #184	; 0xb8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	effffffe 	.word	0xeffffffe
 8012aa4:	58000c00 	.word	0x58000c00
 8012aa8:	0801222d 	.word	0x0801222d

08012aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b083      	sub	sp, #12
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ab4:	bf00      	nop
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012ac8:	bf00      	nop
 8012aca:	370c      	adds	r7, #12
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr

08012ad4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012adc:	bf00      	nop
 8012ade:	370c      	adds	r7, #12
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b089      	sub	sp, #36	; 0x24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d101      	bne.n	8012afe <HAL_UARTEx_EnableStopMode+0x16>
 8012afa:	2302      	movs	r3, #2
 8012afc:	e021      	b.n	8012b42 <HAL_UARTEx_EnableStopMode+0x5a>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2201      	movs	r2, #1
 8012b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	e853 3f00 	ldrex	r3, [r3]
 8012b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	f043 0302 	orr.w	r3, r3, #2
 8012b1a:	61fb      	str	r3, [r7, #28]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	461a      	mov	r2, r3
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	61bb      	str	r3, [r7, #24]
 8012b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b28:	6979      	ldr	r1, [r7, #20]
 8012b2a:	69ba      	ldr	r2, [r7, #24]
 8012b2c:	e841 2300 	strex	r3, r2, [r1]
 8012b30:	613b      	str	r3, [r7, #16]
   return(result);
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1e6      	bne.n	8012b06 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3724      	adds	r7, #36	; 0x24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b4e:	b580      	push	{r7, lr}
 8012b50:	b084      	sub	sp, #16
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d101      	bne.n	8012b64 <HAL_UARTEx_EnableFifoMode+0x16>
 8012b60:	2302      	movs	r3, #2
 8012b62:	e02b      	b.n	8012bbc <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2201      	movs	r2, #1
 8012b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2224      	movs	r2, #36	; 0x24
 8012b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f022 0201 	bic.w	r2, r2, #1
 8012b8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012b9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f000 f8c3 	bl	8012d30 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2220      	movs	r2, #32
 8012bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3710      	adds	r7, #16
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d101      	bne.n	8012bda <HAL_UARTEx_DisableFifoMode+0x16>
 8012bd6:	2302      	movs	r3, #2
 8012bd8:	e027      	b.n	8012c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2201      	movs	r2, #1
 8012bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2224      	movs	r2, #36	; 0x24
 8012be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f022 0201 	bic.w	r2, r2, #1
 8012c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	68fa      	ldr	r2, [r7, #12]
 8012c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2220      	movs	r2, #32
 8012c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c28:	2300      	movs	r3, #0
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3714      	adds	r7, #20
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr

08012c36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b084      	sub	sp, #16
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
 8012c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d101      	bne.n	8012c4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e02d      	b.n	8012caa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2224      	movs	r2, #36	; 0x24
 8012c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f022 0201 	bic.w	r2, r2, #1
 8012c74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	689b      	ldr	r3, [r3, #8]
 8012c7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	430a      	orrs	r2, r1
 8012c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 f850 	bl	8012d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2220      	movs	r2, #32
 8012c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b084      	sub	sp, #16
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cc2:	2b01      	cmp	r3, #1
 8012cc4:	d101      	bne.n	8012cca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012cc6:	2302      	movs	r3, #2
 8012cc8:	e02d      	b.n	8012d26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2201      	movs	r2, #1
 8012cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2224      	movs	r2, #36	; 0x24
 8012cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f022 0201 	bic.w	r2, r2, #1
 8012cf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	683a      	ldr	r2, [r7, #0]
 8012d02:	430a      	orrs	r2, r1
 8012d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 f812 	bl	8012d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2220      	movs	r2, #32
 8012d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
	...

08012d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b085      	sub	sp, #20
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d108      	bne.n	8012d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2201      	movs	r2, #1
 8012d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d50:	e031      	b.n	8012db6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d52:	2310      	movs	r3, #16
 8012d54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d56:	2310      	movs	r3, #16
 8012d58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	0e5b      	lsrs	r3, r3, #25
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	f003 0307 	and.w	r3, r3, #7
 8012d68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	0f5b      	lsrs	r3, r3, #29
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f003 0307 	and.w	r3, r3, #7
 8012d78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d7a:	7bbb      	ldrb	r3, [r7, #14]
 8012d7c:	7b3a      	ldrb	r2, [r7, #12]
 8012d7e:	4911      	ldr	r1, [pc, #68]	; (8012dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012d80:	5c8a      	ldrb	r2, [r1, r2]
 8012d82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d86:	7b3a      	ldrb	r2, [r7, #12]
 8012d88:	490f      	ldr	r1, [pc, #60]	; (8012dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012d8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d98:	7bfb      	ldrb	r3, [r7, #15]
 8012d9a:	7b7a      	ldrb	r2, [r7, #13]
 8012d9c:	4909      	ldr	r1, [pc, #36]	; (8012dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012d9e:	5c8a      	ldrb	r2, [r1, r2]
 8012da0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012da4:	7b7a      	ldrb	r2, [r7, #13]
 8012da6:	4908      	ldr	r1, [pc, #32]	; (8012dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012da8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012daa:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012db6:	bf00      	nop
 8012db8:	3714      	adds	r7, #20
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	08017710 	.word	0x08017710
 8012dc8:	08017718 	.word	0x08017718

08012dcc <__NVIC_SetPriority>:
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	6039      	str	r1, [r7, #0]
 8012dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	db0a      	blt.n	8012df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	b2da      	uxtb	r2, r3
 8012de4:	490c      	ldr	r1, [pc, #48]	; (8012e18 <__NVIC_SetPriority+0x4c>)
 8012de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dea:	0112      	lsls	r2, r2, #4
 8012dec:	b2d2      	uxtb	r2, r2
 8012dee:	440b      	add	r3, r1
 8012df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012df4:	e00a      	b.n	8012e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	4908      	ldr	r1, [pc, #32]	; (8012e1c <__NVIC_SetPriority+0x50>)
 8012dfc:	88fb      	ldrh	r3, [r7, #6]
 8012dfe:	f003 030f 	and.w	r3, r3, #15
 8012e02:	3b04      	subs	r3, #4
 8012e04:	0112      	lsls	r2, r2, #4
 8012e06:	b2d2      	uxtb	r2, r2
 8012e08:	440b      	add	r3, r1
 8012e0a:	761a      	strb	r2, [r3, #24]
}
 8012e0c:	bf00      	nop
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	e000e100 	.word	0xe000e100
 8012e1c:	e000ed00 	.word	0xe000ed00

08012e20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012e20:	b580      	push	{r7, lr}
 8012e22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012e24:	4b05      	ldr	r3, [pc, #20]	; (8012e3c <SysTick_Handler+0x1c>)
 8012e26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012e28:	f002 fc92 	bl	8015750 <xTaskGetSchedulerState>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d001      	beq.n	8012e36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012e32:	f003 fab1 	bl	8016398 <xPortSysTickHandler>
  }
}
 8012e36:	bf00      	nop
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	e000e010 	.word	0xe000e010

08012e40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012e40:	b580      	push	{r7, lr}
 8012e42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012e44:	2100      	movs	r1, #0
 8012e46:	f06f 0004 	mvn.w	r0, #4
 8012e4a:	f7ff ffbf 	bl	8012dcc <__NVIC_SetPriority>
#endif
}
 8012e4e:	bf00      	nop
 8012e50:	bd80      	pop	{r7, pc}
	...

08012e54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e5a:	f3ef 8305 	mrs	r3, IPSR
 8012e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8012e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d003      	beq.n	8012e6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012e66:	f06f 0305 	mvn.w	r3, #5
 8012e6a:	607b      	str	r3, [r7, #4]
 8012e6c:	e00c      	b.n	8012e88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012e6e:	4b0a      	ldr	r3, [pc, #40]	; (8012e98 <osKernelInitialize+0x44>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d105      	bne.n	8012e82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012e76:	4b08      	ldr	r3, [pc, #32]	; (8012e98 <osKernelInitialize+0x44>)
 8012e78:	2201      	movs	r2, #1
 8012e7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	607b      	str	r3, [r7, #4]
 8012e80:	e002      	b.n	8012e88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012e88:	687b      	ldr	r3, [r7, #4]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	370c      	adds	r7, #12
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop
 8012e98:	24001130 	.word	0x24001130

08012e9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ea2:	f3ef 8305 	mrs	r3, IPSR
 8012ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8012ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d003      	beq.n	8012eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012eae:	f06f 0305 	mvn.w	r3, #5
 8012eb2:	607b      	str	r3, [r7, #4]
 8012eb4:	e010      	b.n	8012ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012eb6:	4b0b      	ldr	r3, [pc, #44]	; (8012ee4 <osKernelStart+0x48>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	d109      	bne.n	8012ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012ebe:	f7ff ffbf 	bl	8012e40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012ec2:	4b08      	ldr	r3, [pc, #32]	; (8012ee4 <osKernelStart+0x48>)
 8012ec4:	2202      	movs	r2, #2
 8012ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012ec8:	f001 ff54 	bl	8014d74 <vTaskStartScheduler>
      stat = osOK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	607b      	str	r3, [r7, #4]
 8012ed0:	e002      	b.n	8012ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ed8:	687b      	ldr	r3, [r7, #4]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	24001130 	.word	0x24001130

08012ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b08e      	sub	sp, #56	; 0x38
 8012eec:	af04      	add	r7, sp, #16
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ef8:	f3ef 8305 	mrs	r3, IPSR
 8012efc:	617b      	str	r3, [r7, #20]
  return(result);
 8012efe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d17e      	bne.n	8013002 <osThreadNew+0x11a>
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d07b      	beq.n	8013002 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012f0a:	2380      	movs	r3, #128	; 0x80
 8012f0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012f0e:	2318      	movs	r3, #24
 8012f10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012f12:	2300      	movs	r3, #0
 8012f14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d045      	beq.n	8012fae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d002      	beq.n	8012f30 <osThreadNew+0x48>
        name = attr->name;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	699b      	ldr	r3, [r3, #24]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d002      	beq.n	8012f3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	699b      	ldr	r3, [r3, #24]
 8012f3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d008      	beq.n	8012f56 <osThreadNew+0x6e>
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	2b38      	cmp	r3, #56	; 0x38
 8012f48:	d805      	bhi.n	8012f56 <osThreadNew+0x6e>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	f003 0301 	and.w	r3, r3, #1
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d001      	beq.n	8012f5a <osThreadNew+0x72>
        return (NULL);
 8012f56:	2300      	movs	r3, #0
 8012f58:	e054      	b.n	8013004 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	695b      	ldr	r3, [r3, #20]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d003      	beq.n	8012f6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	695b      	ldr	r3, [r3, #20]
 8012f66:	089b      	lsrs	r3, r3, #2
 8012f68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00e      	beq.n	8012f90 <osThreadNew+0xa8>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	2b5b      	cmp	r3, #91	; 0x5b
 8012f78:	d90a      	bls.n	8012f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d006      	beq.n	8012f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	695b      	ldr	r3, [r3, #20]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d002      	beq.n	8012f90 <osThreadNew+0xa8>
        mem = 1;
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	61bb      	str	r3, [r7, #24]
 8012f8e:	e010      	b.n	8012fb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10c      	bne.n	8012fb2 <osThreadNew+0xca>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d108      	bne.n	8012fb2 <osThreadNew+0xca>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d104      	bne.n	8012fb2 <osThreadNew+0xca>
          mem = 0;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	61bb      	str	r3, [r7, #24]
 8012fac:	e001      	b.n	8012fb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d110      	bne.n	8012fda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012fc0:	9202      	str	r2, [sp, #8]
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	69fb      	ldr	r3, [r7, #28]
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	6a3a      	ldr	r2, [r7, #32]
 8012fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fce:	68f8      	ldr	r0, [r7, #12]
 8012fd0:	f001 fbe0 	bl	8014794 <xTaskCreateStatic>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	613b      	str	r3, [r7, #16]
 8012fd8:	e013      	b.n	8013002 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d110      	bne.n	8013002 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012fe0:	6a3b      	ldr	r3, [r7, #32]
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	f107 0310 	add.w	r3, r7, #16
 8012fe8:	9301      	str	r3, [sp, #4]
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f001 fc2b 	bl	801484e <xTaskCreate>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d001      	beq.n	8013002 <osThreadNew+0x11a>
            hTask = NULL;
 8012ffe:	2300      	movs	r3, #0
 8013000:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013002:	693b      	ldr	r3, [r7, #16]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3728      	adds	r7, #40	; 0x28
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013012:	f3ef 8305 	mrs	r3, IPSR
 8013016:	603b      	str	r3, [r7, #0]
  return(result);
 8013018:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801301a:	2b00      	cmp	r3, #0
 801301c:	d003      	beq.n	8013026 <osThreadYield+0x1a>
    stat = osErrorISR;
 801301e:	f06f 0305 	mvn.w	r3, #5
 8013022:	607b      	str	r3, [r7, #4]
 8013024:	e009      	b.n	801303a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8013026:	2300      	movs	r3, #0
 8013028:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801302a:	4b07      	ldr	r3, [pc, #28]	; (8013048 <osThreadYield+0x3c>)
 801302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801303a:	687b      	ldr	r3, [r7, #4]
}
 801303c:	4618      	mov	r0, r3
 801303e:	370c      	adds	r7, #12
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr
 8013048:	e000ed04 	.word	0xe000ed04

0801304c <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801304c:	b580      	push	{r7, lr}
 801304e:	b086      	sub	sp, #24
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013058:	f3ef 8305 	mrs	r3, IPSR
 801305c:	60fb      	str	r3, [r7, #12]
  return(result);
 801305e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013060:	2b00      	cmp	r3, #0
 8013062:	d003      	beq.n	801306c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013064:	f06f 0305 	mvn.w	r3, #5
 8013068:	617b      	str	r3, [r7, #20]
 801306a:	e00b      	b.n	8013084 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d103      	bne.n	801307a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013072:	f06f 0303 	mvn.w	r3, #3
 8013076:	617b      	str	r3, [r7, #20]
 8013078:	e004      	b.n	8013084 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801307a:	2300      	movs	r3, #0
 801307c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801307e:	6938      	ldr	r0, [r7, #16]
 8013080:	f001 fd5e 	bl	8014b40 <vTaskSuspend>
  }

  return (stat);
 8013084:	697b      	ldr	r3, [r7, #20]
}
 8013086:	4618      	mov	r0, r3
 8013088:	3718      	adds	r7, #24
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801308e:	b580      	push	{r7, lr}
 8013090:	b084      	sub	sp, #16
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013096:	f3ef 8305 	mrs	r3, IPSR
 801309a:	60bb      	str	r3, [r7, #8]
  return(result);
 801309c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d003      	beq.n	80130aa <osDelay+0x1c>
    stat = osErrorISR;
 80130a2:	f06f 0305 	mvn.w	r3, #5
 80130a6:	60fb      	str	r3, [r7, #12]
 80130a8:	e007      	b.n	80130ba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d002      	beq.n	80130ba <osDelay+0x2c>
      vTaskDelay(ticks);
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f001 fd0f 	bl	8014ad8 <vTaskDelay>
    }
  }

  return (stat);
 80130ba:	68fb      	ldr	r3, [r7, #12]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b086      	sub	sp, #24
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80130cc:	2300      	movs	r3, #0
 80130ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130d0:	f3ef 8305 	mrs	r3, IPSR
 80130d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80130d6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d12d      	bne.n	8013138 <osEventFlagsNew+0x74>
    mem = -1;
 80130dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130e0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d015      	beq.n	8013114 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	689b      	ldr	r3, [r3, #8]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d006      	beq.n	80130fe <osEventFlagsNew+0x3a>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	2b1f      	cmp	r3, #31
 80130f6:	d902      	bls.n	80130fe <osEventFlagsNew+0x3a>
        mem = 1;
 80130f8:	2301      	movs	r3, #1
 80130fa:	613b      	str	r3, [r7, #16]
 80130fc:	e00c      	b.n	8013118 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d108      	bne.n	8013118 <osEventFlagsNew+0x54>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	68db      	ldr	r3, [r3, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d104      	bne.n	8013118 <osEventFlagsNew+0x54>
          mem = 0;
 801310e:	2300      	movs	r3, #0
 8013110:	613b      	str	r3, [r7, #16]
 8013112:	e001      	b.n	8013118 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013114:	2300      	movs	r3, #0
 8013116:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	2b01      	cmp	r3, #1
 801311c:	d106      	bne.n	801312c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	689b      	ldr	r3, [r3, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	f000 fa70 	bl	8013608 <xEventGroupCreateStatic>
 8013128:	6178      	str	r0, [r7, #20]
 801312a:	e005      	b.n	8013138 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d102      	bne.n	8013138 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013132:	f000 faa0 	bl	8013676 <xEventGroupCreate>
 8013136:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013138:	697b      	ldr	r3, [r7, #20]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3718      	adds	r7, #24
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013144:	b580      	push	{r7, lr}
 8013146:	b086      	sub	sp, #24
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d004      	beq.n	8013162 <osEventFlagsSet+0x1e>
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801315e:	2b00      	cmp	r3, #0
 8013160:	d003      	beq.n	801316a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013162:	f06f 0303 	mvn.w	r3, #3
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	e028      	b.n	80131bc <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801316a:	f3ef 8305 	mrs	r3, IPSR
 801316e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013170:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013172:	2b00      	cmp	r3, #0
 8013174:	d01d      	beq.n	80131b2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013176:	2300      	movs	r3, #0
 8013178:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801317a:	f107 0308 	add.w	r3, r7, #8
 801317e:	461a      	mov	r2, r3
 8013180:	6839      	ldr	r1, [r7, #0]
 8013182:	6938      	ldr	r0, [r7, #16]
 8013184:	f000 fc98 	bl	8013ab8 <xEventGroupSetBitsFromISR>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d103      	bne.n	8013196 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801318e:	f06f 0302 	mvn.w	r3, #2
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e012      	b.n	80131bc <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00d      	beq.n	80131bc <osEventFlagsSet+0x78>
 80131a0:	4b09      	ldr	r3, [pc, #36]	; (80131c8 <osEventFlagsSet+0x84>)
 80131a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a6:	601a      	str	r2, [r3, #0]
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	e004      	b.n	80131bc <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80131b2:	6839      	ldr	r1, [r7, #0]
 80131b4:	6938      	ldr	r0, [r7, #16]
 80131b6:	f000 fbb7 	bl	8013928 <xEventGroupSetBits>
 80131ba:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80131bc:	697b      	ldr	r3, [r7, #20]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3718      	adds	r7, #24
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	e000ed04 	.word	0xe000ed04

080131cc <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d004      	beq.n	80131ea <osEventFlagsClear+0x1e>
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d003      	beq.n	80131f2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80131ea:	f06f 0303 	mvn.w	r3, #3
 80131ee:	617b      	str	r3, [r7, #20]
 80131f0:	e019      	b.n	8013226 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131f2:	f3ef 8305 	mrs	r3, IPSR
 80131f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80131f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d00e      	beq.n	801321c <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80131fe:	6938      	ldr	r0, [r7, #16]
 8013200:	f000 fb6e 	bl	80138e0 <xEventGroupGetBitsFromISR>
 8013204:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6938      	ldr	r0, [r7, #16]
 801320a:	f000 fb55 	bl	80138b8 <xEventGroupClearBitsFromISR>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d108      	bne.n	8013226 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8013214:	f06f 0302 	mvn.w	r3, #2
 8013218:	617b      	str	r3, [r7, #20]
 801321a:	e004      	b.n	8013226 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 801321c:	6839      	ldr	r1, [r7, #0]
 801321e:	6938      	ldr	r0, [r7, #16]
 8013220:	f000 fb12 	bl	8013848 <xEventGroupClearBits>
 8013224:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013226:	697b      	ldr	r3, [r7, #20]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3718      	adds	r7, #24
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d102      	bne.n	8013248 <osEventFlagsGet+0x18>
    rflags = 0U;
 8013242:	2300      	movs	r3, #0
 8013244:	617b      	str	r3, [r7, #20]
 8013246:	e00f      	b.n	8013268 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013248:	f3ef 8305 	mrs	r3, IPSR
 801324c:	60fb      	str	r3, [r7, #12]
  return(result);
 801324e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013250:	2b00      	cmp	r3, #0
 8013252:	d004      	beq.n	801325e <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013254:	6938      	ldr	r0, [r7, #16]
 8013256:	f000 fb43 	bl	80138e0 <xEventGroupGetBitsFromISR>
 801325a:	6178      	str	r0, [r7, #20]
 801325c:	e004      	b.n	8013268 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 801325e:	2100      	movs	r1, #0
 8013260:	6938      	ldr	r0, [r7, #16]
 8013262:	f000 faf1 	bl	8013848 <xEventGroupClearBits>
 8013266:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013268:	697b      	ldr	r3, [r7, #20]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3718      	adds	r7, #24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013272:	b580      	push	{r7, lr}
 8013274:	b08c      	sub	sp, #48	; 0x30
 8013276:	af02      	add	r7, sp, #8
 8013278:	60f8      	str	r0, [r7, #12]
 801327a:	60b9      	str	r1, [r7, #8]
 801327c:	607a      	str	r2, [r7, #4]
 801327e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d004      	beq.n	8013294 <osEventFlagsWait+0x22>
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013290:	2b00      	cmp	r3, #0
 8013292:	d003      	beq.n	801329c <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013294:	f06f 0303 	mvn.w	r3, #3
 8013298:	61fb      	str	r3, [r7, #28]
 801329a:	e04b      	b.n	8013334 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801329c:	f3ef 8305 	mrs	r3, IPSR
 80132a0:	617b      	str	r3, [r7, #20]
  return(result);
 80132a2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d003      	beq.n	80132b0 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80132a8:	f06f 0305 	mvn.w	r3, #5
 80132ac:	61fb      	str	r3, [r7, #28]
 80132ae:	e041      	b.n	8013334 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d002      	beq.n	80132c0 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80132ba:	2301      	movs	r3, #1
 80132bc:	627b      	str	r3, [r7, #36]	; 0x24
 80132be:	e001      	b.n	80132c4 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80132c0:	2300      	movs	r3, #0
 80132c2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f003 0302 	and.w	r3, r3, #2
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	623b      	str	r3, [r7, #32]
 80132d2:	e001      	b.n	80132d8 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80132d4:	2301      	movs	r3, #1
 80132d6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132de:	6a3a      	ldr	r2, [r7, #32]
 80132e0:	68b9      	ldr	r1, [r7, #8]
 80132e2:	69b8      	ldr	r0, [r7, #24]
 80132e4:	f000 f9e2 	bl	80136ac <xEventGroupWaitBits>
 80132e8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f003 0301 	and.w	r3, r3, #1
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d010      	beq.n	8013316 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	4013      	ands	r3, r2
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d019      	beq.n	8013334 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d003      	beq.n	801330e <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013306:	f06f 0301 	mvn.w	r3, #1
 801330a:	61fb      	str	r3, [r7, #28]
 801330c:	e012      	b.n	8013334 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801330e:	f06f 0302 	mvn.w	r3, #2
 8013312:	61fb      	str	r3, [r7, #28]
 8013314:	e00e      	b.n	8013334 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013316:	68ba      	ldr	r2, [r7, #8]
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	4013      	ands	r3, r2
 801331c:	2b00      	cmp	r3, #0
 801331e:	d109      	bne.n	8013334 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d003      	beq.n	801332e <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013326:	f06f 0301 	mvn.w	r3, #1
 801332a:	61fb      	str	r3, [r7, #28]
 801332c:	e002      	b.n	8013334 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801332e:	f06f 0302 	mvn.w	r3, #2
 8013332:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013334:	69fb      	ldr	r3, [r7, #28]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3728      	adds	r7, #40	; 0x28
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801333e:	b580      	push	{r7, lr}
 8013340:	b08a      	sub	sp, #40	; 0x28
 8013342:	af02      	add	r7, sp, #8
 8013344:	60f8      	str	r0, [r7, #12]
 8013346:	60b9      	str	r1, [r7, #8]
 8013348:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801334e:	f3ef 8305 	mrs	r3, IPSR
 8013352:	613b      	str	r3, [r7, #16]
  return(result);
 8013354:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013356:	2b00      	cmp	r3, #0
 8013358:	d15f      	bne.n	801341a <osMessageQueueNew+0xdc>
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d05c      	beq.n	801341a <osMessageQueueNew+0xdc>
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d059      	beq.n	801341a <osMessageQueueNew+0xdc>
    mem = -1;
 8013366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801336a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d029      	beq.n	80133c6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	689b      	ldr	r3, [r3, #8]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d012      	beq.n	80133a0 <osMessageQueueNew+0x62>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	68db      	ldr	r3, [r3, #12]
 801337e:	2b4f      	cmp	r3, #79	; 0x4f
 8013380:	d90e      	bls.n	80133a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013386:	2b00      	cmp	r3, #0
 8013388:	d00a      	beq.n	80133a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	695a      	ldr	r2, [r3, #20]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	68b9      	ldr	r1, [r7, #8]
 8013392:	fb01 f303 	mul.w	r3, r1, r3
 8013396:	429a      	cmp	r2, r3
 8013398:	d302      	bcc.n	80133a0 <osMessageQueueNew+0x62>
        mem = 1;
 801339a:	2301      	movs	r3, #1
 801339c:	61bb      	str	r3, [r7, #24]
 801339e:	e014      	b.n	80133ca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d110      	bne.n	80133ca <osMessageQueueNew+0x8c>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d10c      	bne.n	80133ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d108      	bne.n	80133ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	695b      	ldr	r3, [r3, #20]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d104      	bne.n	80133ca <osMessageQueueNew+0x8c>
          mem = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	61bb      	str	r3, [r7, #24]
 80133c4:	e001      	b.n	80133ca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d10b      	bne.n	80133e8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	691a      	ldr	r2, [r3, #16]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	689b      	ldr	r3, [r3, #8]
 80133d8:	2100      	movs	r1, #0
 80133da:	9100      	str	r1, [sp, #0]
 80133dc:	68b9      	ldr	r1, [r7, #8]
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	f000 fc9a 	bl	8013d18 <xQueueGenericCreateStatic>
 80133e4:	61f8      	str	r0, [r7, #28]
 80133e6:	e008      	b.n	80133fa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d105      	bne.n	80133fa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80133ee:	2200      	movs	r2, #0
 80133f0:	68b9      	ldr	r1, [r7, #8]
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f000 fd08 	bl	8013e08 <xQueueGenericCreate>
 80133f8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00c      	beq.n	801341a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d003      	beq.n	801340e <osMessageQueueNew+0xd0>
        name = attr->name;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	617b      	str	r3, [r7, #20]
 801340c:	e001      	b.n	8013412 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801340e:	2300      	movs	r3, #0
 8013410:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013412:	6979      	ldr	r1, [r7, #20]
 8013414:	69f8      	ldr	r0, [r7, #28]
 8013416:	f001 f95f 	bl	80146d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801341a:	69fb      	ldr	r3, [r7, #28]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3720      	adds	r7, #32
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013424:	b580      	push	{r7, lr}
 8013426:	b088      	sub	sp, #32
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	603b      	str	r3, [r7, #0]
 8013430:	4613      	mov	r3, r2
 8013432:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013438:	2300      	movs	r3, #0
 801343a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801343c:	f3ef 8305 	mrs	r3, IPSR
 8013440:	617b      	str	r3, [r7, #20]
  return(result);
 8013442:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013444:	2b00      	cmp	r3, #0
 8013446:	d028      	beq.n	801349a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013448:	69bb      	ldr	r3, [r7, #24]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d005      	beq.n	801345a <osMessageQueuePut+0x36>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <osMessageQueuePut+0x36>
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d003      	beq.n	8013462 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801345a:	f06f 0303 	mvn.w	r3, #3
 801345e:	61fb      	str	r3, [r7, #28]
 8013460:	e038      	b.n	80134d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013462:	2300      	movs	r3, #0
 8013464:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013466:	f107 0210 	add.w	r2, r7, #16
 801346a:	2300      	movs	r3, #0
 801346c:	68b9      	ldr	r1, [r7, #8]
 801346e:	69b8      	ldr	r0, [r7, #24]
 8013470:	f000 fe26 	bl	80140c0 <xQueueGenericSendFromISR>
 8013474:	4603      	mov	r3, r0
 8013476:	2b01      	cmp	r3, #1
 8013478:	d003      	beq.n	8013482 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801347a:	f06f 0302 	mvn.w	r3, #2
 801347e:	61fb      	str	r3, [r7, #28]
 8013480:	e028      	b.n	80134d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d025      	beq.n	80134d4 <osMessageQueuePut+0xb0>
 8013488:	4b15      	ldr	r3, [pc, #84]	; (80134e0 <osMessageQueuePut+0xbc>)
 801348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801348e:	601a      	str	r2, [r3, #0]
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	e01c      	b.n	80134d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d002      	beq.n	80134a6 <osMessageQueuePut+0x82>
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d103      	bne.n	80134ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80134a6:	f06f 0303 	mvn.w	r3, #3
 80134aa:	61fb      	str	r3, [r7, #28]
 80134ac:	e012      	b.n	80134d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80134ae:	2300      	movs	r3, #0
 80134b0:	683a      	ldr	r2, [r7, #0]
 80134b2:	68b9      	ldr	r1, [r7, #8]
 80134b4:	69b8      	ldr	r0, [r7, #24]
 80134b6:	f000 fd05 	bl	8013ec4 <xQueueGenericSend>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d009      	beq.n	80134d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d003      	beq.n	80134ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80134c6:	f06f 0301 	mvn.w	r3, #1
 80134ca:	61fb      	str	r3, [r7, #28]
 80134cc:	e002      	b.n	80134d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80134ce:	f06f 0302 	mvn.w	r3, #2
 80134d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80134d4:	69fb      	ldr	r3, [r7, #28]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	e000ed04 	.word	0xe000ed04

080134e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b088      	sub	sp, #32
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80134f6:	2300      	movs	r3, #0
 80134f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134fa:	f3ef 8305 	mrs	r3, IPSR
 80134fe:	617b      	str	r3, [r7, #20]
  return(result);
 8013500:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013502:	2b00      	cmp	r3, #0
 8013504:	d028      	beq.n	8013558 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d005      	beq.n	8013518 <osMessageQueueGet+0x34>
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d002      	beq.n	8013518 <osMessageQueueGet+0x34>
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d003      	beq.n	8013520 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013518:	f06f 0303 	mvn.w	r3, #3
 801351c:	61fb      	str	r3, [r7, #28]
 801351e:	e037      	b.n	8013590 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013520:	2300      	movs	r3, #0
 8013522:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013524:	f107 0310 	add.w	r3, r7, #16
 8013528:	461a      	mov	r2, r3
 801352a:	68b9      	ldr	r1, [r7, #8]
 801352c:	69b8      	ldr	r0, [r7, #24]
 801352e:	f000 ff43 	bl	80143b8 <xQueueReceiveFromISR>
 8013532:	4603      	mov	r3, r0
 8013534:	2b01      	cmp	r3, #1
 8013536:	d003      	beq.n	8013540 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013538:	f06f 0302 	mvn.w	r3, #2
 801353c:	61fb      	str	r3, [r7, #28]
 801353e:	e027      	b.n	8013590 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d024      	beq.n	8013590 <osMessageQueueGet+0xac>
 8013546:	4b15      	ldr	r3, [pc, #84]	; (801359c <osMessageQueueGet+0xb8>)
 8013548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801354c:	601a      	str	r2, [r3, #0]
 801354e:	f3bf 8f4f 	dsb	sy
 8013552:	f3bf 8f6f 	isb	sy
 8013556:	e01b      	b.n	8013590 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <osMessageQueueGet+0x80>
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d103      	bne.n	801356c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013564:	f06f 0303 	mvn.w	r3, #3
 8013568:	61fb      	str	r3, [r7, #28]
 801356a:	e011      	b.n	8013590 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	69b8      	ldr	r0, [r7, #24]
 8013572:	f000 fe41 	bl	80141f8 <xQueueReceive>
 8013576:	4603      	mov	r3, r0
 8013578:	2b01      	cmp	r3, #1
 801357a:	d009      	beq.n	8013590 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d003      	beq.n	801358a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013582:	f06f 0301 	mvn.w	r3, #1
 8013586:	61fb      	str	r3, [r7, #28]
 8013588:	e002      	b.n	8013590 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801358a:	f06f 0302 	mvn.w	r3, #2
 801358e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013590:	69fb      	ldr	r3, [r7, #28]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3720      	adds	r7, #32
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	e000ed04 	.word	0xe000ed04

080135a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	4a07      	ldr	r2, [pc, #28]	; (80135cc <vApplicationGetIdleTaskMemory+0x2c>)
 80135b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	4a06      	ldr	r2, [pc, #24]	; (80135d0 <vApplicationGetIdleTaskMemory+0x30>)
 80135b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2280      	movs	r2, #128	; 0x80
 80135bc:	601a      	str	r2, [r3, #0]
}
 80135be:	bf00      	nop
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	24001134 	.word	0x24001134
 80135d0:	24001190 	.word	0x24001190

080135d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80135d4:	b480      	push	{r7}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	4a07      	ldr	r2, [pc, #28]	; (8013600 <vApplicationGetTimerTaskMemory+0x2c>)
 80135e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	4a06      	ldr	r2, [pc, #24]	; (8013604 <vApplicationGetTimerTaskMemory+0x30>)
 80135ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80135f2:	601a      	str	r2, [r3, #0]
}
 80135f4:	bf00      	nop
 80135f6:	3714      	adds	r7, #20
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr
 8013600:	24001390 	.word	0x24001390
 8013604:	240013ec 	.word	0x240013ec

08013608 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013608:	b580      	push	{r7, lr}
 801360a:	b086      	sub	sp, #24
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d10a      	bne.n	801362c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361a:	f383 8811 	msr	BASEPRI, r3
 801361e:	f3bf 8f6f 	isb	sy
 8013622:	f3bf 8f4f 	dsb	sy
 8013626:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013628:	bf00      	nop
 801362a:	e7fe      	b.n	801362a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801362c:	2320      	movs	r3, #32
 801362e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b20      	cmp	r3, #32
 8013634:	d00a      	beq.n	801364c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363a:	f383 8811 	msr	BASEPRI, r3
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f3bf 8f4f 	dsb	sy
 8013646:	60fb      	str	r3, [r7, #12]
}
 8013648:	bf00      	nop
 801364a:	e7fe      	b.n	801364a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00a      	beq.n	801366c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	2200      	movs	r2, #0
 801365a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	3304      	adds	r3, #4
 8013660:	4618      	mov	r0, r3
 8013662:	f000 fa3d 	bl	8013ae0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	2201      	movs	r2, #1
 801366a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801366c:	697b      	ldr	r3, [r7, #20]
	}
 801366e:	4618      	mov	r0, r3
 8013670:	3718      	adds	r7, #24
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}

08013676 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013676:	b580      	push	{r7, lr}
 8013678:	b082      	sub	sp, #8
 801367a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801367c:	2020      	movs	r0, #32
 801367e:	f002 ff1b 	bl	80164b8 <pvPortMalloc>
 8013682:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d00a      	beq.n	80136a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2200      	movs	r2, #0
 801368e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3304      	adds	r3, #4
 8013694:	4618      	mov	r0, r3
 8013696:	f000 fa23 	bl	8013ae0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80136a0:	687b      	ldr	r3, [r7, #4]
	}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3708      	adds	r7, #8
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
	...

080136ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b090      	sub	sp, #64	; 0x40
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	60f8      	str	r0, [r7, #12]
 80136b4:	60b9      	str	r1, [r7, #8]
 80136b6:	607a      	str	r2, [r7, #4]
 80136b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80136c2:	2300      	movs	r3, #0
 80136c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d10a      	bne.n	80136e2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80136cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d0:	f383 8811 	msr	BASEPRI, r3
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	f3bf 8f4f 	dsb	sy
 80136dc:	623b      	str	r3, [r7, #32]
}
 80136de:	bf00      	nop
 80136e0:	e7fe      	b.n	80136e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d00a      	beq.n	8013702 <xEventGroupWaitBits+0x56>
	__asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	61fb      	str	r3, [r7, #28]
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10a      	bne.n	801371e <xEventGroupWaitBits+0x72>
	__asm volatile
 8013708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370c:	f383 8811 	msr	BASEPRI, r3
 8013710:	f3bf 8f6f 	isb	sy
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	61bb      	str	r3, [r7, #24]
}
 801371a:	bf00      	nop
 801371c:	e7fe      	b.n	801371c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801371e:	f002 f817 	bl	8015750 <xTaskGetSchedulerState>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d102      	bne.n	801372e <xEventGroupWaitBits+0x82>
 8013728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <xEventGroupWaitBits+0x86>
 801372e:	2301      	movs	r3, #1
 8013730:	e000      	b.n	8013734 <xEventGroupWaitBits+0x88>
 8013732:	2300      	movs	r3, #0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373c:	f383 8811 	msr	BASEPRI, r3
 8013740:	f3bf 8f6f 	isb	sy
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	617b      	str	r3, [r7, #20]
}
 801374a:	bf00      	nop
 801374c:	e7fe      	b.n	801374c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801374e:	f001 fb77 	bl	8014e40 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	68b9      	ldr	r1, [r7, #8]
 801375c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801375e:	f000 f988 	bl	8013a72 <prvTestWaitCondition>
 8013762:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00e      	beq.n	8013788 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801376e:	2300      	movs	r3, #0
 8013770:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d028      	beq.n	80137ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377a:	681a      	ldr	r2, [r3, #0]
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	43db      	mvns	r3, r3
 8013780:	401a      	ands	r2, r3
 8013782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	e020      	b.n	80137ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801378a:	2b00      	cmp	r3, #0
 801378c:	d104      	bne.n	8013798 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013790:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013792:	2301      	movs	r3, #1
 8013794:	633b      	str	r3, [r7, #48]	; 0x30
 8013796:	e018      	b.n	80137ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d003      	beq.n	80137a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d003      	beq.n	80137b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80137ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80137b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80137b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b6:	1d18      	adds	r0, r3, #4
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137bc:	4313      	orrs	r3, r2
 80137be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80137c0:	4619      	mov	r1, r3
 80137c2:	f001 fd3d 	bl	8015240 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80137ca:	f001 fb47 	bl	8014e5c <xTaskResumeAll>
 80137ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80137d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d031      	beq.n	801383a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d107      	bne.n	80137ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80137dc:	4b19      	ldr	r3, [pc, #100]	; (8013844 <xEventGroupWaitBits+0x198>)
 80137de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137e2:	601a      	str	r2, [r3, #0]
 80137e4:	f3bf 8f4f 	dsb	sy
 80137e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80137ec:	f002 f83c 	bl	8015868 <uxTaskResetEventItemValue>
 80137f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80137f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d11a      	bne.n	8013832 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80137fc:	f002 fd3a 	bl	8016274 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013806:	683a      	ldr	r2, [r7, #0]
 8013808:	68b9      	ldr	r1, [r7, #8]
 801380a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801380c:	f000 f931 	bl	8013a72 <prvTestWaitCondition>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	d009      	beq.n	801382a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d006      	beq.n	801382a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	43db      	mvns	r3, r3
 8013824:	401a      	ands	r2, r3
 8013826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013828:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801382a:	2301      	movs	r3, #1
 801382c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801382e:	f002 fd51 	bl	80162d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013834:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013838:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801383c:	4618      	mov	r0, r3
 801383e:	3740      	adds	r7, #64	; 0x40
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	e000ed04 	.word	0xe000ed04

08013848 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b086      	sub	sp, #24
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d10a      	bne.n	8013872 <xEventGroupClearBits+0x2a>
	__asm volatile
 801385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013860:	f383 8811 	msr	BASEPRI, r3
 8013864:	f3bf 8f6f 	isb	sy
 8013868:	f3bf 8f4f 	dsb	sy
 801386c:	60fb      	str	r3, [r7, #12]
}
 801386e:	bf00      	nop
 8013870:	e7fe      	b.n	8013870 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00a      	beq.n	8013892 <xEventGroupClearBits+0x4a>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	60bb      	str	r3, [r7, #8]
}
 801388e:	bf00      	nop
 8013890:	e7fe      	b.n	8013890 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013892:	f002 fcef 	bl	8016274 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	43db      	mvns	r3, r3
 80138a4:	401a      	ands	r2, r3
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80138aa:	f002 fd13 	bl	80162d4 <vPortExitCritical>

	return uxReturn;
 80138ae:	693b      	ldr	r3, [r7, #16]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80138c2:	2300      	movs	r3, #0
 80138c4:	683a      	ldr	r2, [r7, #0]
 80138c6:	6879      	ldr	r1, [r7, #4]
 80138c8:	4804      	ldr	r0, [pc, #16]	; (80138dc <xEventGroupClearBitsFromISR+0x24>)
 80138ca:	f002 fb87 	bl	8015fdc <xTimerPendFunctionCallFromISR>
 80138ce:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80138d0:	68fb      	ldr	r3, [r7, #12]
	}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3710      	adds	r7, #16
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	08013a59 	.word	0x08013a59

080138e0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80138e0:	b480      	push	{r7}
 80138e2:	b089      	sub	sp, #36	; 0x24
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80138ec:	f3ef 8211 	mrs	r2, BASEPRI
 80138f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f4:	f383 8811 	msr	BASEPRI, r3
 80138f8:	f3bf 8f6f 	isb	sy
 80138fc:	f3bf 8f4f 	dsb	sy
 8013900:	60fa      	str	r2, [r7, #12]
 8013902:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013904:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013906:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	617b      	str	r3, [r7, #20]
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013918:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801391a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801391c:	4618      	mov	r0, r3
 801391e:	3724      	adds	r7, #36	; 0x24
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08e      	sub	sp, #56	; 0x38
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013932:	2300      	movs	r3, #0
 8013934:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801393a:	2300      	movs	r3, #0
 801393c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d10a      	bne.n	801395a <xEventGroupSetBits+0x32>
	__asm volatile
 8013944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	613b      	str	r3, [r7, #16]
}
 8013956:	bf00      	nop
 8013958:	e7fe      	b.n	8013958 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013960:	2b00      	cmp	r3, #0
 8013962:	d00a      	beq.n	801397a <xEventGroupSetBits+0x52>
	__asm volatile
 8013964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013968:	f383 8811 	msr	BASEPRI, r3
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	60fb      	str	r3, [r7, #12]
}
 8013976:	bf00      	nop
 8013978:	e7fe      	b.n	8013978 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397c:	3304      	adds	r3, #4
 801397e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013982:	3308      	adds	r3, #8
 8013984:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013986:	f001 fa5b 	bl	8014e40 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	431a      	orrs	r2, r3
 8013998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801399c:	e03c      	b.n	8013a18 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80139a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80139aa:	2300      	movs	r3, #0
 80139ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139b4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139bc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d108      	bne.n	80139da <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80139c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	4013      	ands	r3, r2
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d00b      	beq.n	80139ec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80139d4:	2301      	movs	r3, #1
 80139d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139d8:	e008      	b.n	80139ec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80139da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	4013      	ands	r3, r2
 80139e2:	69ba      	ldr	r2, [r7, #24]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d101      	bne.n	80139ec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80139e8:	2301      	movs	r3, #1
 80139ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80139ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d010      	beq.n	8013a14 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d003      	beq.n	8013a04 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80139fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	4313      	orrs	r3, r2
 8013a02:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a10:	f001 fce2 	bl	80153d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a1a:	6a3b      	ldr	r3, [r7, #32]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d1be      	bne.n	801399e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a26:	43db      	mvns	r3, r3
 8013a28:	401a      	ands	r2, r3
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013a2e:	f001 fa15 	bl	8014e5c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	681b      	ldr	r3, [r3, #0]
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3738      	adds	r7, #56	; 0x38
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b082      	sub	sp, #8
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
 8013a46:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013a48:	6839      	ldr	r1, [r7, #0]
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff ff6c 	bl	8013928 <xEventGroupSetBits>
}
 8013a50:	bf00      	nop
 8013a52:	3708      	adds	r7, #8
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}

08013a58 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013a62:	6839      	ldr	r1, [r7, #0]
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7ff feef 	bl	8013848 <xEventGroupClearBits>
}
 8013a6a:	bf00      	nop
 8013a6c:	3708      	adds	r7, #8
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013a72:	b480      	push	{r7}
 8013a74:	b087      	sub	sp, #28
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	60f8      	str	r0, [r7, #12]
 8013a7a:	60b9      	str	r1, [r7, #8]
 8013a7c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d107      	bne.n	8013a98 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013a88:	68fa      	ldr	r2, [r7, #12]
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	4013      	ands	r3, r2
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00a      	beq.n	8013aa8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013a92:	2301      	movs	r3, #1
 8013a94:	617b      	str	r3, [r7, #20]
 8013a96:	e007      	b.n	8013aa8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d101      	bne.n	8013aa8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013aa8:	697b      	ldr	r3, [r7, #20]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	371c      	adds	r7, #28
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
	...

08013ab8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b086      	sub	sp, #24
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	68f9      	ldr	r1, [r7, #12]
 8013aca:	4804      	ldr	r0, [pc, #16]	; (8013adc <xEventGroupSetBitsFromISR+0x24>)
 8013acc:	f002 fa86 	bl	8015fdc <xTimerPendFunctionCallFromISR>
 8013ad0:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013ad2:	697b      	ldr	r3, [r7, #20]
	}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3718      	adds	r7, #24
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	08013a3f 	.word	0x08013a3f

08013ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b083      	sub	sp, #12
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f103 0208 	add.w	r2, r3, #8
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f103 0208 	add.w	r2, r3, #8
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f103 0208 	add.w	r2, r3, #8
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013b14:	bf00      	nop
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013b2e:	bf00      	nop
 8013b30:	370c      	adds	r7, #12
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013b3a:	b480      	push	{r7}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	689a      	ldr	r2, [r3, #8]
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	683a      	ldr	r2, [r7, #0]
 8013b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	683a      	ldr	r2, [r7, #0]
 8013b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	1c5a      	adds	r2, r3, #1
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	601a      	str	r2, [r3, #0]
}
 8013b76:	bf00      	nop
 8013b78:	3714      	adds	r7, #20
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr

08013b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013b82:	b480      	push	{r7}
 8013b84:	b085      	sub	sp, #20
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
 8013b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b98:	d103      	bne.n	8013ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	691b      	ldr	r3, [r3, #16]
 8013b9e:	60fb      	str	r3, [r7, #12]
 8013ba0:	e00c      	b.n	8013bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	3308      	adds	r3, #8
 8013ba6:	60fb      	str	r3, [r7, #12]
 8013ba8:	e002      	b.n	8013bb0 <vListInsert+0x2e>
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	685b      	ldr	r3, [r3, #4]
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	68ba      	ldr	r2, [r7, #8]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d2f6      	bcs.n	8013baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	685a      	ldr	r2, [r3, #4]
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	683a      	ldr	r2, [r7, #0]
 8013bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	683a      	ldr	r2, [r7, #0]
 8013bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	1c5a      	adds	r2, r3, #1
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	601a      	str	r2, [r3, #0]
}
 8013be8:	bf00      	nop
 8013bea:	3714      	adds	r7, #20
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	691b      	ldr	r3, [r3, #16]
 8013c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	6892      	ldr	r2, [r2, #8]
 8013c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	6852      	ldr	r2, [r2, #4]
 8013c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d103      	bne.n	8013c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	689a      	ldr	r2, [r3, #8]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	1e5a      	subs	r2, r3, #1
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681b      	ldr	r3, [r3, #0]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3714      	adds	r7, #20
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <xQueueGenericReset+0x2a>
	__asm volatile
 8013c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c60:	f383 8811 	msr	BASEPRI, r3
 8013c64:	f3bf 8f6f 	isb	sy
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	60bb      	str	r3, [r7, #8]
}
 8013c6e:	bf00      	nop
 8013c70:	e7fe      	b.n	8013c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013c72:	f002 faff 	bl	8016274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c7e:	68f9      	ldr	r1, [r7, #12]
 8013c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013c82:	fb01 f303 	mul.w	r3, r1, r3
 8013c86:	441a      	add	r2, r3
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ca2:	3b01      	subs	r3, #1
 8013ca4:	68f9      	ldr	r1, [r7, #12]
 8013ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ca8:	fb01 f303 	mul.w	r3, r1, r3
 8013cac:	441a      	add	r2, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	22ff      	movs	r2, #255	; 0xff
 8013cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	22ff      	movs	r2, #255	; 0xff
 8013cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d114      	bne.n	8013cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	691b      	ldr	r3, [r3, #16]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d01a      	beq.n	8013d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3310      	adds	r3, #16
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f001 fb1b 	bl	8015310 <xTaskRemoveFromEventList>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d012      	beq.n	8013d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013ce0:	4b0c      	ldr	r3, [pc, #48]	; (8013d14 <xQueueGenericReset+0xcc>)
 8013ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ce6:	601a      	str	r2, [r3, #0]
 8013ce8:	f3bf 8f4f 	dsb	sy
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	e009      	b.n	8013d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	3310      	adds	r3, #16
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff fef2 	bl	8013ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	3324      	adds	r3, #36	; 0x24
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ff feed 	bl	8013ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013d06:	f002 fae5 	bl	80162d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013d0a:	2301      	movs	r3, #1
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	e000ed04 	.word	0xe000ed04

08013d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b08e      	sub	sp, #56	; 0x38
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d10a      	bne.n	8013d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d30:	f383 8811 	msr	BASEPRI, r3
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	f3bf 8f4f 	dsb	sy
 8013d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013d3e:	bf00      	nop
 8013d40:	e7fe      	b.n	8013d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10a      	bne.n	8013d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4c:	f383 8811 	msr	BASEPRI, r3
 8013d50:	f3bf 8f6f 	isb	sy
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013d5a:	bf00      	nop
 8013d5c:	e7fe      	b.n	8013d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d002      	beq.n	8013d6a <xQueueGenericCreateStatic+0x52>
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d001      	beq.n	8013d6e <xQueueGenericCreateStatic+0x56>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e000      	b.n	8013d70 <xQueueGenericCreateStatic+0x58>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d10a      	bne.n	8013d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d78:	f383 8811 	msr	BASEPRI, r3
 8013d7c:	f3bf 8f6f 	isb	sy
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	623b      	str	r3, [r7, #32]
}
 8013d86:	bf00      	nop
 8013d88:	e7fe      	b.n	8013d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d102      	bne.n	8013d96 <xQueueGenericCreateStatic+0x7e>
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d101      	bne.n	8013d9a <xQueueGenericCreateStatic+0x82>
 8013d96:	2301      	movs	r3, #1
 8013d98:	e000      	b.n	8013d9c <xQueueGenericCreateStatic+0x84>
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d10a      	bne.n	8013db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da4:	f383 8811 	msr	BASEPRI, r3
 8013da8:	f3bf 8f6f 	isb	sy
 8013dac:	f3bf 8f4f 	dsb	sy
 8013db0:	61fb      	str	r3, [r7, #28]
}
 8013db2:	bf00      	nop
 8013db4:	e7fe      	b.n	8013db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013db6:	2350      	movs	r3, #80	; 0x50
 8013db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	2b50      	cmp	r3, #80	; 0x50
 8013dbe:	d00a      	beq.n	8013dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	61bb      	str	r3, [r7, #24]
}
 8013dd2:	bf00      	nop
 8013dd4:	e7fe      	b.n	8013dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d00d      	beq.n	8013dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de4:	2201      	movs	r2, #1
 8013de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	4613      	mov	r3, r2
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	68b9      	ldr	r1, [r7, #8]
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f000 f83f 	bl	8013e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3730      	adds	r7, #48	; 0x30
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af02      	add	r7, sp, #8
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	4613      	mov	r3, r2
 8013e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10a      	bne.n	8013e32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e20:	f383 8811 	msr	BASEPRI, r3
 8013e24:	f3bf 8f6f 	isb	sy
 8013e28:	f3bf 8f4f 	dsb	sy
 8013e2c:	613b      	str	r3, [r7, #16]
}
 8013e2e:	bf00      	nop
 8013e30:	e7fe      	b.n	8013e30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	fb02 f303 	mul.w	r3, r2, r3
 8013e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	3350      	adds	r3, #80	; 0x50
 8013e40:	4618      	mov	r0, r3
 8013e42:	f002 fb39 	bl	80164b8 <pvPortMalloc>
 8013e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013e48:	69bb      	ldr	r3, [r7, #24]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d011      	beq.n	8013e72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	3350      	adds	r3, #80	; 0x50
 8013e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013e58:	69bb      	ldr	r3, [r7, #24]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013e60:	79fa      	ldrb	r2, [r7, #7]
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	9300      	str	r3, [sp, #0]
 8013e66:	4613      	mov	r3, r2
 8013e68:	697a      	ldr	r2, [r7, #20]
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f000 f805 	bl	8013e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013e72:	69bb      	ldr	r3, [r7, #24]
	}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3720      	adds	r7, #32
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
 8013e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d103      	bne.n	8013e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	69ba      	ldr	r2, [r7, #24]
 8013e94:	601a      	str	r2, [r3, #0]
 8013e96:	e002      	b.n	8013e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	68ba      	ldr	r2, [r7, #8]
 8013ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013eaa:	2101      	movs	r1, #1
 8013eac:	69b8      	ldr	r0, [r7, #24]
 8013eae:	f7ff fecb 	bl	8013c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	78fa      	ldrb	r2, [r7, #3]
 8013eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013eba:	bf00      	nop
 8013ebc:	3710      	adds	r7, #16
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
	...

08013ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b08e      	sub	sp, #56	; 0x38
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10a      	bne.n	8013ef6 <xQueueGenericSend+0x32>
	__asm volatile
 8013ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee4:	f383 8811 	msr	BASEPRI, r3
 8013ee8:	f3bf 8f6f 	isb	sy
 8013eec:	f3bf 8f4f 	dsb	sy
 8013ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ef2:	bf00      	nop
 8013ef4:	e7fe      	b.n	8013ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d103      	bne.n	8013f04 <xQueueGenericSend+0x40>
 8013efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d101      	bne.n	8013f08 <xQueueGenericSend+0x44>
 8013f04:	2301      	movs	r3, #1
 8013f06:	e000      	b.n	8013f0a <xQueueGenericSend+0x46>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d10a      	bne.n	8013f24 <xQueueGenericSend+0x60>
	__asm volatile
 8013f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f12:	f383 8811 	msr	BASEPRI, r3
 8013f16:	f3bf 8f6f 	isb	sy
 8013f1a:	f3bf 8f4f 	dsb	sy
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013f20:	bf00      	nop
 8013f22:	e7fe      	b.n	8013f22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	2b02      	cmp	r3, #2
 8013f28:	d103      	bne.n	8013f32 <xQueueGenericSend+0x6e>
 8013f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d101      	bne.n	8013f36 <xQueueGenericSend+0x72>
 8013f32:	2301      	movs	r3, #1
 8013f34:	e000      	b.n	8013f38 <xQueueGenericSend+0x74>
 8013f36:	2300      	movs	r3, #0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d10a      	bne.n	8013f52 <xQueueGenericSend+0x8e>
	__asm volatile
 8013f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f40:	f383 8811 	msr	BASEPRI, r3
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	f3bf 8f4f 	dsb	sy
 8013f4c:	623b      	str	r3, [r7, #32]
}
 8013f4e:	bf00      	nop
 8013f50:	e7fe      	b.n	8013f50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f52:	f001 fbfd 	bl	8015750 <xTaskGetSchedulerState>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d102      	bne.n	8013f62 <xQueueGenericSend+0x9e>
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d101      	bne.n	8013f66 <xQueueGenericSend+0xa2>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e000      	b.n	8013f68 <xQueueGenericSend+0xa4>
 8013f66:	2300      	movs	r3, #0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d10a      	bne.n	8013f82 <xQueueGenericSend+0xbe>
	__asm volatile
 8013f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f70:	f383 8811 	msr	BASEPRI, r3
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	f3bf 8f4f 	dsb	sy
 8013f7c:	61fb      	str	r3, [r7, #28]
}
 8013f7e:	bf00      	nop
 8013f80:	e7fe      	b.n	8013f80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013f82:	f002 f977 	bl	8016274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d302      	bcc.n	8013f98 <xQueueGenericSend+0xd4>
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b02      	cmp	r3, #2
 8013f96:	d129      	bne.n	8013fec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f98:	683a      	ldr	r2, [r7, #0]
 8013f9a:	68b9      	ldr	r1, [r7, #8]
 8013f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f9e:	f000 fa8b 	bl	80144b8 <prvCopyDataToQueue>
 8013fa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d010      	beq.n	8013fce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fae:	3324      	adds	r3, #36	; 0x24
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f001 f9ad 	bl	8015310 <xTaskRemoveFromEventList>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d013      	beq.n	8013fe4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013fbc:	4b3f      	ldr	r3, [pc, #252]	; (80140bc <xQueueGenericSend+0x1f8>)
 8013fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fc2:	601a      	str	r2, [r3, #0]
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	e00a      	b.n	8013fe4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d007      	beq.n	8013fe4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013fd4:	4b39      	ldr	r3, [pc, #228]	; (80140bc <xQueueGenericSend+0x1f8>)
 8013fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fda:	601a      	str	r2, [r3, #0]
 8013fdc:	f3bf 8f4f 	dsb	sy
 8013fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013fe4:	f002 f976 	bl	80162d4 <vPortExitCritical>
				return pdPASS;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	e063      	b.n	80140b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d103      	bne.n	8013ffa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ff2:	f002 f96f 	bl	80162d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	e05c      	b.n	80140b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d106      	bne.n	801400e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014000:	f107 0314 	add.w	r3, r7, #20
 8014004:	4618      	mov	r0, r3
 8014006:	f001 fa49 	bl	801549c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801400a:	2301      	movs	r3, #1
 801400c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801400e:	f002 f961 	bl	80162d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014012:	f000 ff15 	bl	8014e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014016:	f002 f92d 	bl	8016274 <vPortEnterCritical>
 801401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014020:	b25b      	sxtb	r3, r3
 8014022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014026:	d103      	bne.n	8014030 <xQueueGenericSend+0x16c>
 8014028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402a:	2200      	movs	r2, #0
 801402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014036:	b25b      	sxtb	r3, r3
 8014038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801403c:	d103      	bne.n	8014046 <xQueueGenericSend+0x182>
 801403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014040:	2200      	movs	r2, #0
 8014042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014046:	f002 f945 	bl	80162d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801404a:	1d3a      	adds	r2, r7, #4
 801404c:	f107 0314 	add.w	r3, r7, #20
 8014050:	4611      	mov	r1, r2
 8014052:	4618      	mov	r0, r3
 8014054:	f001 fa38 	bl	80154c8 <xTaskCheckForTimeOut>
 8014058:	4603      	mov	r3, r0
 801405a:	2b00      	cmp	r3, #0
 801405c:	d124      	bne.n	80140a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801405e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014060:	f000 fb22 	bl	80146a8 <prvIsQueueFull>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d018      	beq.n	801409c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406c:	3310      	adds	r3, #16
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	4611      	mov	r1, r2
 8014072:	4618      	mov	r0, r3
 8014074:	f001 f8c0 	bl	80151f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801407a:	f000 faad 	bl	80145d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801407e:	f000 feed 	bl	8014e5c <xTaskResumeAll>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	f47f af7c 	bne.w	8013f82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801408a:	4b0c      	ldr	r3, [pc, #48]	; (80140bc <xQueueGenericSend+0x1f8>)
 801408c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	e772      	b.n	8013f82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801409c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801409e:	f000 fa9b 	bl	80145d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80140a2:	f000 fedb 	bl	8014e5c <xTaskResumeAll>
 80140a6:	e76c      	b.n	8013f82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80140a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140aa:	f000 fa95 	bl	80145d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140ae:	f000 fed5 	bl	8014e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80140b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3738      	adds	r7, #56	; 0x38
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	e000ed04 	.word	0xe000ed04

080140c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b090      	sub	sp, #64	; 0x40
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
 80140cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80140d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d10a      	bne.n	80140ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80140d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80140ea:	bf00      	nop
 80140ec:	e7fe      	b.n	80140ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d103      	bne.n	80140fc <xQueueGenericSendFromISR+0x3c>
 80140f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d101      	bne.n	8014100 <xQueueGenericSendFromISR+0x40>
 80140fc:	2301      	movs	r3, #1
 80140fe:	e000      	b.n	8014102 <xQueueGenericSendFromISR+0x42>
 8014100:	2300      	movs	r3, #0
 8014102:	2b00      	cmp	r3, #0
 8014104:	d10a      	bne.n	801411c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801410a:	f383 8811 	msr	BASEPRI, r3
 801410e:	f3bf 8f6f 	isb	sy
 8014112:	f3bf 8f4f 	dsb	sy
 8014116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014118:	bf00      	nop
 801411a:	e7fe      	b.n	801411a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	2b02      	cmp	r3, #2
 8014120:	d103      	bne.n	801412a <xQueueGenericSendFromISR+0x6a>
 8014122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014126:	2b01      	cmp	r3, #1
 8014128:	d101      	bne.n	801412e <xQueueGenericSendFromISR+0x6e>
 801412a:	2301      	movs	r3, #1
 801412c:	e000      	b.n	8014130 <xQueueGenericSendFromISR+0x70>
 801412e:	2300      	movs	r3, #0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d10a      	bne.n	801414a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014138:	f383 8811 	msr	BASEPRI, r3
 801413c:	f3bf 8f6f 	isb	sy
 8014140:	f3bf 8f4f 	dsb	sy
 8014144:	623b      	str	r3, [r7, #32]
}
 8014146:	bf00      	nop
 8014148:	e7fe      	b.n	8014148 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801414a:	f002 f975 	bl	8016438 <vPortValidateInterruptPriority>
	__asm volatile
 801414e:	f3ef 8211 	mrs	r2, BASEPRI
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	f383 8811 	msr	BASEPRI, r3
 801415a:	f3bf 8f6f 	isb	sy
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	61fa      	str	r2, [r7, #28]
 8014164:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8014166:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014168:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014172:	429a      	cmp	r2, r3
 8014174:	d302      	bcc.n	801417c <xQueueGenericSendFromISR+0xbc>
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	2b02      	cmp	r3, #2
 801417a:	d12f      	bne.n	80141dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801418a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801418c:	683a      	ldr	r2, [r7, #0]
 801418e:	68b9      	ldr	r1, [r7, #8]
 8014190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014192:	f000 f991 	bl	80144b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014196:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801419a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801419e:	d112      	bne.n	80141c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d016      	beq.n	80141d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141aa:	3324      	adds	r3, #36	; 0x24
 80141ac:	4618      	mov	r0, r3
 80141ae:	f001 f8af 	bl	8015310 <xTaskRemoveFromEventList>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d00e      	beq.n	80141d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d00b      	beq.n	80141d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2201      	movs	r2, #1
 80141c2:	601a      	str	r2, [r3, #0]
 80141c4:	e007      	b.n	80141d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80141c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80141ca:	3301      	adds	r3, #1
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	b25a      	sxtb	r2, r3
 80141d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80141d6:	2301      	movs	r3, #1
 80141d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80141da:	e001      	b.n	80141e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80141dc:	2300      	movs	r3, #0
 80141de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80141e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141e2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	f383 8811 	msr	BASEPRI, r3
}
 80141ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80141ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3740      	adds	r7, #64	; 0x40
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
	...

080141f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b08c      	sub	sp, #48	; 0x30
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014204:	2300      	movs	r3, #0
 8014206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	2b00      	cmp	r3, #0
 8014210:	d10a      	bne.n	8014228 <xQueueReceive+0x30>
	__asm volatile
 8014212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014216:	f383 8811 	msr	BASEPRI, r3
 801421a:	f3bf 8f6f 	isb	sy
 801421e:	f3bf 8f4f 	dsb	sy
 8014222:	623b      	str	r3, [r7, #32]
}
 8014224:	bf00      	nop
 8014226:	e7fe      	b.n	8014226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d103      	bne.n	8014236 <xQueueReceive+0x3e>
 801422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014232:	2b00      	cmp	r3, #0
 8014234:	d101      	bne.n	801423a <xQueueReceive+0x42>
 8014236:	2301      	movs	r3, #1
 8014238:	e000      	b.n	801423c <xQueueReceive+0x44>
 801423a:	2300      	movs	r3, #0
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10a      	bne.n	8014256 <xQueueReceive+0x5e>
	__asm volatile
 8014240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014244:	f383 8811 	msr	BASEPRI, r3
 8014248:	f3bf 8f6f 	isb	sy
 801424c:	f3bf 8f4f 	dsb	sy
 8014250:	61fb      	str	r3, [r7, #28]
}
 8014252:	bf00      	nop
 8014254:	e7fe      	b.n	8014254 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014256:	f001 fa7b 	bl	8015750 <xTaskGetSchedulerState>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d102      	bne.n	8014266 <xQueueReceive+0x6e>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d101      	bne.n	801426a <xQueueReceive+0x72>
 8014266:	2301      	movs	r3, #1
 8014268:	e000      	b.n	801426c <xQueueReceive+0x74>
 801426a:	2300      	movs	r3, #0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d10a      	bne.n	8014286 <xQueueReceive+0x8e>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	61bb      	str	r3, [r7, #24]
}
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014286:	f001 fff5 	bl	8016274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801428e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014292:	2b00      	cmp	r3, #0
 8014294:	d01f      	beq.n	80142d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014296:	68b9      	ldr	r1, [r7, #8]
 8014298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801429a:	f000 f977 	bl	801458c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	1e5a      	subs	r2, r3, #1
 80142a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	691b      	ldr	r3, [r3, #16]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00f      	beq.n	80142ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b0:	3310      	adds	r3, #16
 80142b2:	4618      	mov	r0, r3
 80142b4:	f001 f82c 	bl	8015310 <xTaskRemoveFromEventList>
 80142b8:	4603      	mov	r3, r0
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d007      	beq.n	80142ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80142be:	4b3d      	ldr	r3, [pc, #244]	; (80143b4 <xQueueReceive+0x1bc>)
 80142c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80142ce:	f002 f801 	bl	80162d4 <vPortExitCritical>
				return pdPASS;
 80142d2:	2301      	movs	r3, #1
 80142d4:	e069      	b.n	80143aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d103      	bne.n	80142e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80142dc:	f001 fffa 	bl	80162d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80142e0:	2300      	movs	r3, #0
 80142e2:	e062      	b.n	80143aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d106      	bne.n	80142f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142ea:	f107 0310 	add.w	r3, r7, #16
 80142ee:	4618      	mov	r0, r3
 80142f0:	f001 f8d4 	bl	801549c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142f4:	2301      	movs	r3, #1
 80142f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142f8:	f001 ffec 	bl	80162d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142fc:	f000 fda0 	bl	8014e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014300:	f001 ffb8 	bl	8016274 <vPortEnterCritical>
 8014304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801430a:	b25b      	sxtb	r3, r3
 801430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014310:	d103      	bne.n	801431a <xQueueReceive+0x122>
 8014312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014314:	2200      	movs	r2, #0
 8014316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801431c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014320:	b25b      	sxtb	r3, r3
 8014322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014326:	d103      	bne.n	8014330 <xQueueReceive+0x138>
 8014328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432a:	2200      	movs	r2, #0
 801432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014330:	f001 ffd0 	bl	80162d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014334:	1d3a      	adds	r2, r7, #4
 8014336:	f107 0310 	add.w	r3, r7, #16
 801433a:	4611      	mov	r1, r2
 801433c:	4618      	mov	r0, r3
 801433e:	f001 f8c3 	bl	80154c8 <xTaskCheckForTimeOut>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d123      	bne.n	8014390 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801434a:	f000 f997 	bl	801467c <prvIsQueueEmpty>
 801434e:	4603      	mov	r3, r0
 8014350:	2b00      	cmp	r3, #0
 8014352:	d017      	beq.n	8014384 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014356:	3324      	adds	r3, #36	; 0x24
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	4611      	mov	r1, r2
 801435c:	4618      	mov	r0, r3
 801435e:	f000 ff4b 	bl	80151f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014364:	f000 f938 	bl	80145d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014368:	f000 fd78 	bl	8014e5c <xTaskResumeAll>
 801436c:	4603      	mov	r3, r0
 801436e:	2b00      	cmp	r3, #0
 8014370:	d189      	bne.n	8014286 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014372:	4b10      	ldr	r3, [pc, #64]	; (80143b4 <xQueueReceive+0x1bc>)
 8014374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014378:	601a      	str	r2, [r3, #0]
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	f3bf 8f6f 	isb	sy
 8014382:	e780      	b.n	8014286 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014386:	f000 f927 	bl	80145d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801438a:	f000 fd67 	bl	8014e5c <xTaskResumeAll>
 801438e:	e77a      	b.n	8014286 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014392:	f000 f921 	bl	80145d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014396:	f000 fd61 	bl	8014e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801439a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801439c:	f000 f96e 	bl	801467c <prvIsQueueEmpty>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f43f af6f 	beq.w	8014286 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80143a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3730      	adds	r7, #48	; 0x30
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	e000ed04 	.word	0xe000ed04

080143b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b08e      	sub	sp, #56	; 0x38
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10a      	bne.n	80143e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80143ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d2:	f383 8811 	msr	BASEPRI, r3
 80143d6:	f3bf 8f6f 	isb	sy
 80143da:	f3bf 8f4f 	dsb	sy
 80143de:	623b      	str	r3, [r7, #32]
}
 80143e0:	bf00      	nop
 80143e2:	e7fe      	b.n	80143e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d103      	bne.n	80143f2 <xQueueReceiveFromISR+0x3a>
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d101      	bne.n	80143f6 <xQueueReceiveFromISR+0x3e>
 80143f2:	2301      	movs	r3, #1
 80143f4:	e000      	b.n	80143f8 <xQueueReceiveFromISR+0x40>
 80143f6:	2300      	movs	r3, #0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10a      	bne.n	8014412 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80143fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	61fb      	str	r3, [r7, #28]
}
 801440e:	bf00      	nop
 8014410:	e7fe      	b.n	8014410 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014412:	f002 f811 	bl	8016438 <vPortValidateInterruptPriority>
	__asm volatile
 8014416:	f3ef 8211 	mrs	r2, BASEPRI
 801441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441e:	f383 8811 	msr	BASEPRI, r3
 8014422:	f3bf 8f6f 	isb	sy
 8014426:	f3bf 8f4f 	dsb	sy
 801442a:	61ba      	str	r2, [r7, #24]
 801442c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801442e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443a:	2b00      	cmp	r3, #0
 801443c:	d02f      	beq.n	801449e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014448:	68b9      	ldr	r1, [r7, #8]
 801444a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801444c:	f000 f89e 	bl	801458c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014452:	1e5a      	subs	r2, r3, #1
 8014454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801445c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014460:	d112      	bne.n	8014488 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	691b      	ldr	r3, [r3, #16]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d016      	beq.n	8014498 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446c:	3310      	adds	r3, #16
 801446e:	4618      	mov	r0, r3
 8014470:	f000 ff4e 	bl	8015310 <xTaskRemoveFromEventList>
 8014474:	4603      	mov	r3, r0
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00e      	beq.n	8014498 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d00b      	beq.n	8014498 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2201      	movs	r2, #1
 8014484:	601a      	str	r2, [r3, #0]
 8014486:	e007      	b.n	8014498 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801448c:	3301      	adds	r3, #1
 801448e:	b2db      	uxtb	r3, r3
 8014490:	b25a      	sxtb	r2, r3
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014498:	2301      	movs	r3, #1
 801449a:	637b      	str	r3, [r7, #52]	; 0x34
 801449c:	e001      	b.n	80144a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801449e:	2300      	movs	r3, #0
 80144a0:	637b      	str	r3, [r7, #52]	; 0x34
 80144a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	f383 8811 	msr	BASEPRI, r3
}
 80144ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3738      	adds	r7, #56	; 0x38
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80144c4:	2300      	movs	r3, #0
 80144c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d10d      	bne.n	80144f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d14d      	bne.n	801457a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	689b      	ldr	r3, [r3, #8]
 80144e2:	4618      	mov	r0, r3
 80144e4:	f001 f952 	bl	801578c <xTaskPriorityDisinherit>
 80144e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2200      	movs	r2, #0
 80144ee:	609a      	str	r2, [r3, #8]
 80144f0:	e043      	b.n	801457a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d119      	bne.n	801452c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6858      	ldr	r0, [r3, #4]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014500:	461a      	mov	r2, r3
 8014502:	68b9      	ldr	r1, [r7, #8]
 8014504:	f002 f9fc 	bl	8016900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014510:	441a      	add	r2, r3
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	685a      	ldr	r2, [r3, #4]
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	689b      	ldr	r3, [r3, #8]
 801451e:	429a      	cmp	r2, r3
 8014520:	d32b      	bcc.n	801457a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	605a      	str	r2, [r3, #4]
 801452a:	e026      	b.n	801457a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	68d8      	ldr	r0, [r3, #12]
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014534:	461a      	mov	r2, r3
 8014536:	68b9      	ldr	r1, [r7, #8]
 8014538:	f002 f9e2 	bl	8016900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	68da      	ldr	r2, [r3, #12]
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014544:	425b      	negs	r3, r3
 8014546:	441a      	add	r2, r3
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	68da      	ldr	r2, [r3, #12]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	429a      	cmp	r2, r3
 8014556:	d207      	bcs.n	8014568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	689a      	ldr	r2, [r3, #8]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014560:	425b      	negs	r3, r3
 8014562:	441a      	add	r2, r3
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b02      	cmp	r3, #2
 801456c:	d105      	bne.n	801457a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	3b01      	subs	r3, #1
 8014578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	1c5a      	adds	r2, r3, #1
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014582:	697b      	ldr	r3, [r7, #20]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3718      	adds	r7, #24
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801459a:	2b00      	cmp	r3, #0
 801459c:	d018      	beq.n	80145d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	68da      	ldr	r2, [r3, #12]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145a6:	441a      	add	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	68da      	ldr	r2, [r3, #12]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	689b      	ldr	r3, [r3, #8]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d303      	bcc.n	80145c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	68d9      	ldr	r1, [r3, #12]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145c8:	461a      	mov	r2, r3
 80145ca:	6838      	ldr	r0, [r7, #0]
 80145cc:	f002 f998 	bl	8016900 <memcpy>
	}
}
 80145d0:	bf00      	nop
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80145e0:	f001 fe48 	bl	8016274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80145ec:	e011      	b.n	8014612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d012      	beq.n	801461c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	3324      	adds	r3, #36	; 0x24
 80145fa:	4618      	mov	r0, r3
 80145fc:	f000 fe88 	bl	8015310 <xTaskRemoveFromEventList>
 8014600:	4603      	mov	r3, r0
 8014602:	2b00      	cmp	r3, #0
 8014604:	d001      	beq.n	801460a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014606:	f000 ffc1 	bl	801558c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801460a:	7bfb      	ldrb	r3, [r7, #15]
 801460c:	3b01      	subs	r3, #1
 801460e:	b2db      	uxtb	r3, r3
 8014610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014616:	2b00      	cmp	r3, #0
 8014618:	dce9      	bgt.n	80145ee <prvUnlockQueue+0x16>
 801461a:	e000      	b.n	801461e <prvUnlockQueue+0x46>
					break;
 801461c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	22ff      	movs	r2, #255	; 0xff
 8014622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014626:	f001 fe55 	bl	80162d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801462a:	f001 fe23 	bl	8016274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014636:	e011      	b.n	801465c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	691b      	ldr	r3, [r3, #16]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d012      	beq.n	8014666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	3310      	adds	r3, #16
 8014644:	4618      	mov	r0, r3
 8014646:	f000 fe63 	bl	8015310 <xTaskRemoveFromEventList>
 801464a:	4603      	mov	r3, r0
 801464c:	2b00      	cmp	r3, #0
 801464e:	d001      	beq.n	8014654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014650:	f000 ff9c 	bl	801558c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014654:	7bbb      	ldrb	r3, [r7, #14]
 8014656:	3b01      	subs	r3, #1
 8014658:	b2db      	uxtb	r3, r3
 801465a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801465c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014660:	2b00      	cmp	r3, #0
 8014662:	dce9      	bgt.n	8014638 <prvUnlockQueue+0x60>
 8014664:	e000      	b.n	8014668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	22ff      	movs	r2, #255	; 0xff
 801466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014670:	f001 fe30 	bl	80162d4 <vPortExitCritical>
}
 8014674:	bf00      	nop
 8014676:	3710      	adds	r7, #16
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014684:	f001 fdf6 	bl	8016274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801468c:	2b00      	cmp	r3, #0
 801468e:	d102      	bne.n	8014696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014690:	2301      	movs	r3, #1
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	e001      	b.n	801469a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014696:	2300      	movs	r3, #0
 8014698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801469a:	f001 fe1b 	bl	80162d4 <vPortExitCritical>

	return xReturn;
 801469e:	68fb      	ldr	r3, [r7, #12]
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3710      	adds	r7, #16
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80146b0:	f001 fde0 	bl	8016274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146bc:	429a      	cmp	r2, r3
 80146be:	d102      	bne.n	80146c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80146c0:	2301      	movs	r3, #1
 80146c2:	60fb      	str	r3, [r7, #12]
 80146c4:	e001      	b.n	80146ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80146c6:	2300      	movs	r3, #0
 80146c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80146ca:	f001 fe03 	bl	80162d4 <vPortExitCritical>

	return xReturn;
 80146ce:	68fb      	ldr	r3, [r7, #12]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3710      	adds	r7, #16
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80146d8:	b480      	push	{r7}
 80146da:	b085      	sub	sp, #20
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80146e2:	2300      	movs	r3, #0
 80146e4:	60fb      	str	r3, [r7, #12]
 80146e6:	e014      	b.n	8014712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80146e8:	4a0f      	ldr	r2, [pc, #60]	; (8014728 <vQueueAddToRegistry+0x50>)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d10b      	bne.n	801470c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80146f4:	490c      	ldr	r1, [pc, #48]	; (8014728 <vQueueAddToRegistry+0x50>)
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	683a      	ldr	r2, [r7, #0]
 80146fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80146fe:	4a0a      	ldr	r2, [pc, #40]	; (8014728 <vQueueAddToRegistry+0x50>)
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	00db      	lsls	r3, r3, #3
 8014704:	4413      	add	r3, r2
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801470a:	e006      	b.n	801471a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	3301      	adds	r3, #1
 8014710:	60fb      	str	r3, [r7, #12]
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2b07      	cmp	r3, #7
 8014716:	d9e7      	bls.n	80146e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014718:	bf00      	nop
 801471a:	bf00      	nop
 801471c:	3714      	adds	r7, #20
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr
 8014726:	bf00      	nop
 8014728:	240017ec 	.word	0x240017ec

0801472c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801473c:	f001 fd9a 	bl	8016274 <vPortEnterCritical>
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014746:	b25b      	sxtb	r3, r3
 8014748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474c:	d103      	bne.n	8014756 <vQueueWaitForMessageRestricted+0x2a>
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	2200      	movs	r2, #0
 8014752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801475c:	b25b      	sxtb	r3, r3
 801475e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014762:	d103      	bne.n	801476c <vQueueWaitForMessageRestricted+0x40>
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	2200      	movs	r2, #0
 8014768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801476c:	f001 fdb2 	bl	80162d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014774:	2b00      	cmp	r3, #0
 8014776:	d106      	bne.n	8014786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	3324      	adds	r3, #36	; 0x24
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	68b9      	ldr	r1, [r7, #8]
 8014780:	4618      	mov	r0, r3
 8014782:	f000 fd99 	bl	80152b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014786:	6978      	ldr	r0, [r7, #20]
 8014788:	f7ff ff26 	bl	80145d8 <prvUnlockQueue>
	}
 801478c:	bf00      	nop
 801478e:	3718      	adds	r7, #24
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014794:	b580      	push	{r7, lr}
 8014796:	b08e      	sub	sp, #56	; 0x38
 8014798:	af04      	add	r7, sp, #16
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80147a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d10a      	bne.n	80147be <xTaskCreateStatic+0x2a>
	__asm volatile
 80147a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ac:	f383 8811 	msr	BASEPRI, r3
 80147b0:	f3bf 8f6f 	isb	sy
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	623b      	str	r3, [r7, #32]
}
 80147ba:	bf00      	nop
 80147bc:	e7fe      	b.n	80147bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80147be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d10a      	bne.n	80147da <xTaskCreateStatic+0x46>
	__asm volatile
 80147c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c8:	f383 8811 	msr	BASEPRI, r3
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	f3bf 8f4f 	dsb	sy
 80147d4:	61fb      	str	r3, [r7, #28]
}
 80147d6:	bf00      	nop
 80147d8:	e7fe      	b.n	80147d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80147da:	235c      	movs	r3, #92	; 0x5c
 80147dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	2b5c      	cmp	r3, #92	; 0x5c
 80147e2:	d00a      	beq.n	80147fa <xTaskCreateStatic+0x66>
	__asm volatile
 80147e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e8:	f383 8811 	msr	BASEPRI, r3
 80147ec:	f3bf 8f6f 	isb	sy
 80147f0:	f3bf 8f4f 	dsb	sy
 80147f4:	61bb      	str	r3, [r7, #24]
}
 80147f6:	bf00      	nop
 80147f8:	e7fe      	b.n	80147f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80147fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80147fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d01e      	beq.n	8014840 <xTaskCreateStatic+0xac>
 8014802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014804:	2b00      	cmp	r3, #0
 8014806:	d01b      	beq.n	8014840 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014814:	2202      	movs	r2, #2
 8014816:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801481a:	2300      	movs	r3, #0
 801481c:	9303      	str	r3, [sp, #12]
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014820:	9302      	str	r3, [sp, #8]
 8014822:	f107 0314 	add.w	r3, r7, #20
 8014826:	9301      	str	r3, [sp, #4]
 8014828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	68b9      	ldr	r1, [r7, #8]
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f000 f850 	bl	80148d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801483a:	f000 f8dd 	bl	80149f8 <prvAddNewTaskToReadyList>
 801483e:	e001      	b.n	8014844 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014840:	2300      	movs	r3, #0
 8014842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014844:	697b      	ldr	r3, [r7, #20]
	}
 8014846:	4618      	mov	r0, r3
 8014848:	3728      	adds	r7, #40	; 0x28
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}

0801484e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801484e:	b580      	push	{r7, lr}
 8014850:	b08c      	sub	sp, #48	; 0x30
 8014852:	af04      	add	r7, sp, #16
 8014854:	60f8      	str	r0, [r7, #12]
 8014856:	60b9      	str	r1, [r7, #8]
 8014858:	603b      	str	r3, [r7, #0]
 801485a:	4613      	mov	r3, r2
 801485c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801485e:	88fb      	ldrh	r3, [r7, #6]
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	4618      	mov	r0, r3
 8014864:	f001 fe28 	bl	80164b8 <pvPortMalloc>
 8014868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d00e      	beq.n	801488e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014870:	205c      	movs	r0, #92	; 0x5c
 8014872:	f001 fe21 	bl	80164b8 <pvPortMalloc>
 8014876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d003      	beq.n	8014886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	697a      	ldr	r2, [r7, #20]
 8014882:	631a      	str	r2, [r3, #48]	; 0x30
 8014884:	e005      	b.n	8014892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014886:	6978      	ldr	r0, [r7, #20]
 8014888:	f001 fee2 	bl	8016650 <vPortFree>
 801488c:	e001      	b.n	8014892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801488e:	2300      	movs	r3, #0
 8014890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d017      	beq.n	80148c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	2200      	movs	r2, #0
 801489c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80148a0:	88fa      	ldrh	r2, [r7, #6]
 80148a2:	2300      	movs	r3, #0
 80148a4:	9303      	str	r3, [sp, #12]
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	9302      	str	r3, [sp, #8]
 80148aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ac:	9301      	str	r3, [sp, #4]
 80148ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	68b9      	ldr	r1, [r7, #8]
 80148b6:	68f8      	ldr	r0, [r7, #12]
 80148b8:	f000 f80e 	bl	80148d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80148bc:	69f8      	ldr	r0, [r7, #28]
 80148be:	f000 f89b 	bl	80149f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80148c2:	2301      	movs	r3, #1
 80148c4:	61bb      	str	r3, [r7, #24]
 80148c6:	e002      	b.n	80148ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80148c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80148ce:	69bb      	ldr	r3, [r7, #24]
	}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3720      	adds	r7, #32
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
 80148e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	461a      	mov	r2, r3
 80148f0:	21a5      	movs	r1, #165	; 0xa5
 80148f2:	f002 f813 	bl	801691c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80148f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80148fa:	6879      	ldr	r1, [r7, #4]
 80148fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014900:	440b      	add	r3, r1
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	4413      	add	r3, r2
 8014906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014908:	69bb      	ldr	r3, [r7, #24]
 801490a:	f023 0307 	bic.w	r3, r3, #7
 801490e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	f003 0307 	and.w	r3, r3, #7
 8014916:	2b00      	cmp	r3, #0
 8014918:	d00a      	beq.n	8014930 <prvInitialiseNewTask+0x58>
	__asm volatile
 801491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491e:	f383 8811 	msr	BASEPRI, r3
 8014922:	f3bf 8f6f 	isb	sy
 8014926:	f3bf 8f4f 	dsb	sy
 801492a:	617b      	str	r3, [r7, #20]
}
 801492c:	bf00      	nop
 801492e:	e7fe      	b.n	801492e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d01f      	beq.n	8014976 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014936:	2300      	movs	r3, #0
 8014938:	61fb      	str	r3, [r7, #28]
 801493a:	e012      	b.n	8014962 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801493c:	68ba      	ldr	r2, [r7, #8]
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	4413      	add	r3, r2
 8014942:	7819      	ldrb	r1, [r3, #0]
 8014944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	4413      	add	r3, r2
 801494a:	3334      	adds	r3, #52	; 0x34
 801494c:	460a      	mov	r2, r1
 801494e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014950:	68ba      	ldr	r2, [r7, #8]
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	4413      	add	r3, r2
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d006      	beq.n	801496a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	3301      	adds	r3, #1
 8014960:	61fb      	str	r3, [r7, #28]
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	2b0f      	cmp	r3, #15
 8014966:	d9e9      	bls.n	801493c <prvInitialiseNewTask+0x64>
 8014968:	e000      	b.n	801496c <prvInitialiseNewTask+0x94>
			{
				break;
 801496a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496e:	2200      	movs	r2, #0
 8014970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014974:	e003      	b.n	801497e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014978:	2200      	movs	r2, #0
 801497a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014980:	2b37      	cmp	r3, #55	; 0x37
 8014982:	d901      	bls.n	8014988 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014984:	2337      	movs	r3, #55	; 0x37
 8014986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801498c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014992:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014996:	2200      	movs	r2, #0
 8014998:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	3304      	adds	r3, #4
 801499e:	4618      	mov	r0, r3
 80149a0:	f7ff f8be 	bl	8013b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80149a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a6:	3318      	adds	r3, #24
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7ff f8b9 	bl	8013b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80149ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80149ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80149be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	2200      	movs	r2, #0
 80149c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80149ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149cc:	2200      	movs	r2, #0
 80149ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80149d2:	683a      	ldr	r2, [r7, #0]
 80149d4:	68f9      	ldr	r1, [r7, #12]
 80149d6:	69b8      	ldr	r0, [r7, #24]
 80149d8:	f001 fb20 	bl	801601c <pxPortInitialiseStack>
 80149dc:	4602      	mov	r2, r0
 80149de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80149e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d002      	beq.n	80149ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80149e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149ee:	bf00      	nop
 80149f0:	3720      	adds	r7, #32
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
	...

080149f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014a00:	f001 fc38 	bl	8016274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014a04:	4b2d      	ldr	r3, [pc, #180]	; (8014abc <prvAddNewTaskToReadyList+0xc4>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	4a2c      	ldr	r2, [pc, #176]	; (8014abc <prvAddNewTaskToReadyList+0xc4>)
 8014a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014a0e:	4b2c      	ldr	r3, [pc, #176]	; (8014ac0 <prvAddNewTaskToReadyList+0xc8>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d109      	bne.n	8014a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014a16:	4a2a      	ldr	r2, [pc, #168]	; (8014ac0 <prvAddNewTaskToReadyList+0xc8>)
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014a1c:	4b27      	ldr	r3, [pc, #156]	; (8014abc <prvAddNewTaskToReadyList+0xc4>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d110      	bne.n	8014a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014a24:	f000 fdd6 	bl	80155d4 <prvInitialiseTaskLists>
 8014a28:	e00d      	b.n	8014a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014a2a:	4b26      	ldr	r3, [pc, #152]	; (8014ac4 <prvAddNewTaskToReadyList+0xcc>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d109      	bne.n	8014a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014a32:	4b23      	ldr	r3, [pc, #140]	; (8014ac0 <prvAddNewTaskToReadyList+0xc8>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d802      	bhi.n	8014a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014a40:	4a1f      	ldr	r2, [pc, #124]	; (8014ac0 <prvAddNewTaskToReadyList+0xc8>)
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014a46:	4b20      	ldr	r3, [pc, #128]	; (8014ac8 <prvAddNewTaskToReadyList+0xd0>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	4a1e      	ldr	r2, [pc, #120]	; (8014ac8 <prvAddNewTaskToReadyList+0xd0>)
 8014a4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014a50:	4b1d      	ldr	r3, [pc, #116]	; (8014ac8 <prvAddNewTaskToReadyList+0xd0>)
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a5c:	4b1b      	ldr	r3, [pc, #108]	; (8014acc <prvAddNewTaskToReadyList+0xd4>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d903      	bls.n	8014a6c <prvAddNewTaskToReadyList+0x74>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a68:	4a18      	ldr	r2, [pc, #96]	; (8014acc <prvAddNewTaskToReadyList+0xd4>)
 8014a6a:	6013      	str	r3, [r2, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a70:	4613      	mov	r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4413      	add	r3, r2
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4a15      	ldr	r2, [pc, #84]	; (8014ad0 <prvAddNewTaskToReadyList+0xd8>)
 8014a7a:	441a      	add	r2, r3
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	3304      	adds	r3, #4
 8014a80:	4619      	mov	r1, r3
 8014a82:	4610      	mov	r0, r2
 8014a84:	f7ff f859 	bl	8013b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014a88:	f001 fc24 	bl	80162d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014a8c:	4b0d      	ldr	r3, [pc, #52]	; (8014ac4 <prvAddNewTaskToReadyList+0xcc>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00e      	beq.n	8014ab2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014a94:	4b0a      	ldr	r3, [pc, #40]	; (8014ac0 <prvAddNewTaskToReadyList+0xc8>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d207      	bcs.n	8014ab2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014aa2:	4b0c      	ldr	r3, [pc, #48]	; (8014ad4 <prvAddNewTaskToReadyList+0xdc>)
 8014aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aa8:	601a      	str	r2, [r3, #0]
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ab2:	bf00      	nop
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	24001d00 	.word	0x24001d00
 8014ac0:	2400182c 	.word	0x2400182c
 8014ac4:	24001d0c 	.word	0x24001d0c
 8014ac8:	24001d1c 	.word	0x24001d1c
 8014acc:	24001d08 	.word	0x24001d08
 8014ad0:	24001830 	.word	0x24001830
 8014ad4:	e000ed04 	.word	0xe000ed04

08014ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d017      	beq.n	8014b1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014aea:	4b13      	ldr	r3, [pc, #76]	; (8014b38 <vTaskDelay+0x60>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00a      	beq.n	8014b08 <vTaskDelay+0x30>
	__asm volatile
 8014af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af6:	f383 8811 	msr	BASEPRI, r3
 8014afa:	f3bf 8f6f 	isb	sy
 8014afe:	f3bf 8f4f 	dsb	sy
 8014b02:	60bb      	str	r3, [r7, #8]
}
 8014b04:	bf00      	nop
 8014b06:	e7fe      	b.n	8014b06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014b08:	f000 f99a 	bl	8014e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f000 fec2 	bl	8015898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014b14:	f000 f9a2 	bl	8014e5c <xTaskResumeAll>
 8014b18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d107      	bne.n	8014b30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014b20:	4b06      	ldr	r3, [pc, #24]	; (8014b3c <vTaskDelay+0x64>)
 8014b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b26:	601a      	str	r2, [r3, #0]
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b30:	bf00      	nop
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	24001d28 	.word	0x24001d28
 8014b3c:	e000ed04 	.word	0xe000ed04

08014b40 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014b48:	f001 fb94 	bl	8016274 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d102      	bne.n	8014b58 <vTaskSuspend+0x18>
 8014b52:	4b30      	ldr	r3, [pc, #192]	; (8014c14 <vTaskSuspend+0xd4>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	e000      	b.n	8014b5a <vTaskSuspend+0x1a>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	3304      	adds	r3, #4
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7ff f847 	bl	8013bf4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d004      	beq.n	8014b78 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	3318      	adds	r3, #24
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7ff f83e 	bl	8013bf4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	3304      	adds	r3, #4
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	4826      	ldr	r0, [pc, #152]	; (8014c18 <vTaskSuspend+0xd8>)
 8014b80:	f7fe ffdb 	bl	8013b3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014b8a:	b2db      	uxtb	r3, r3
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d103      	bne.n	8014b98 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014b98:	f001 fb9c 	bl	80162d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014b9c:	4b1f      	ldr	r3, [pc, #124]	; (8014c1c <vTaskSuspend+0xdc>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d005      	beq.n	8014bb0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014ba4:	f001 fb66 	bl	8016274 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014ba8:	f000 fdb2 	bl	8015710 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014bac:	f001 fb92 	bl	80162d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014bb0:	4b18      	ldr	r3, [pc, #96]	; (8014c14 <vTaskSuspend+0xd4>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	68fa      	ldr	r2, [r7, #12]
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d127      	bne.n	8014c0a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014bba:	4b18      	ldr	r3, [pc, #96]	; (8014c1c <vTaskSuspend+0xdc>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d017      	beq.n	8014bf2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014bc2:	4b17      	ldr	r3, [pc, #92]	; (8014c20 <vTaskSuspend+0xe0>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00a      	beq.n	8014be0 <vTaskSuspend+0xa0>
	__asm volatile
 8014bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bce:	f383 8811 	msr	BASEPRI, r3
 8014bd2:	f3bf 8f6f 	isb	sy
 8014bd6:	f3bf 8f4f 	dsb	sy
 8014bda:	60bb      	str	r3, [r7, #8]
}
 8014bdc:	bf00      	nop
 8014bde:	e7fe      	b.n	8014bde <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014be0:	4b10      	ldr	r3, [pc, #64]	; (8014c24 <vTaskSuspend+0xe4>)
 8014be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014be6:	601a      	str	r2, [r3, #0]
 8014be8:	f3bf 8f4f 	dsb	sy
 8014bec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014bf0:	e00b      	b.n	8014c0a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014bf2:	4b09      	ldr	r3, [pc, #36]	; (8014c18 <vTaskSuspend+0xd8>)
 8014bf4:	681a      	ldr	r2, [r3, #0]
 8014bf6:	4b0c      	ldr	r3, [pc, #48]	; (8014c28 <vTaskSuspend+0xe8>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d103      	bne.n	8014c06 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014bfe:	4b05      	ldr	r3, [pc, #20]	; (8014c14 <vTaskSuspend+0xd4>)
 8014c00:	2200      	movs	r2, #0
 8014c02:	601a      	str	r2, [r3, #0]
	}
 8014c04:	e001      	b.n	8014c0a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014c06:	f000 fa99 	bl	801513c <vTaskSwitchContext>
	}
 8014c0a:	bf00      	nop
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	2400182c 	.word	0x2400182c
 8014c18:	24001cec 	.word	0x24001cec
 8014c1c:	24001d0c 	.word	0x24001d0c
 8014c20:	24001d28 	.word	0x24001d28
 8014c24:	e000ed04 	.word	0xe000ed04
 8014c28:	24001d00 	.word	0x24001d00

08014c2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b087      	sub	sp, #28
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014c34:	2300      	movs	r3, #0
 8014c36:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d10a      	bne.n	8014c58 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c46:	f383 8811 	msr	BASEPRI, r3
 8014c4a:	f3bf 8f6f 	isb	sy
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	60fb      	str	r3, [r7, #12]
}
 8014c54:	bf00      	nop
 8014c56:	e7fe      	b.n	8014c56 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	695b      	ldr	r3, [r3, #20]
 8014c5c:	4a0a      	ldr	r2, [pc, #40]	; (8014c88 <prvTaskIsTaskSuspended+0x5c>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d10a      	bne.n	8014c78 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c66:	4a09      	ldr	r2, [pc, #36]	; (8014c8c <prvTaskIsTaskSuspended+0x60>)
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	d005      	beq.n	8014c78 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d101      	bne.n	8014c78 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014c74:	2301      	movs	r3, #1
 8014c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014c78:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	371c      	adds	r7, #28
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop
 8014c88:	24001cec 	.word	0x24001cec
 8014c8c:	24001cc0 	.word	0x24001cc0

08014c90 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b08a      	sub	sp, #40	; 0x28
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10a      	bne.n	8014cbc <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014caa:	f383 8811 	msr	BASEPRI, r3
 8014cae:	f3bf 8f6f 	isb	sy
 8014cb2:	f3bf 8f4f 	dsb	sy
 8014cb6:	61bb      	str	r3, [r7, #24]
}
 8014cb8:	bf00      	nop
 8014cba:	e7fe      	b.n	8014cba <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cbc:	f001 fbbc 	bl	8016438 <vPortValidateInterruptPriority>
	__asm volatile
 8014cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8014cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc8:	f383 8811 	msr	BASEPRI, r3
 8014ccc:	f3bf 8f6f 	isb	sy
 8014cd0:	f3bf 8f4f 	dsb	sy
 8014cd4:	617a      	str	r2, [r7, #20]
 8014cd6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014cd8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014cda:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014cdc:	6a38      	ldr	r0, [r7, #32]
 8014cde:	f7ff ffa5 	bl	8014c2c <prvTaskIsTaskSuspended>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d030      	beq.n	8014d4a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ce8:	4b1d      	ldr	r3, [pc, #116]	; (8014d60 <xTaskResumeFromISR+0xd0>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d126      	bne.n	8014d3e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cf4:	4b1b      	ldr	r3, [pc, #108]	; (8014d64 <xTaskResumeFromISR+0xd4>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d301      	bcc.n	8014d02 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d02:	6a3b      	ldr	r3, [r7, #32]
 8014d04:	3304      	adds	r3, #4
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe ff74 	bl	8013bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014d0c:	6a3b      	ldr	r3, [r7, #32]
 8014d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d10:	4b15      	ldr	r3, [pc, #84]	; (8014d68 <xTaskResumeFromISR+0xd8>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d903      	bls.n	8014d20 <xTaskResumeFromISR+0x90>
 8014d18:	6a3b      	ldr	r3, [r7, #32]
 8014d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d1c:	4a12      	ldr	r2, [pc, #72]	; (8014d68 <xTaskResumeFromISR+0xd8>)
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d24:	4613      	mov	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4a0f      	ldr	r2, [pc, #60]	; (8014d6c <xTaskResumeFromISR+0xdc>)
 8014d2e:	441a      	add	r2, r3
 8014d30:	6a3b      	ldr	r3, [r7, #32]
 8014d32:	3304      	adds	r3, #4
 8014d34:	4619      	mov	r1, r3
 8014d36:	4610      	mov	r0, r2
 8014d38:	f7fe feff 	bl	8013b3a <vListInsertEnd>
 8014d3c:	e005      	b.n	8014d4a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014d3e:	6a3b      	ldr	r3, [r7, #32]
 8014d40:	3318      	adds	r3, #24
 8014d42:	4619      	mov	r1, r3
 8014d44:	480a      	ldr	r0, [pc, #40]	; (8014d70 <xTaskResumeFromISR+0xe0>)
 8014d46:	f7fe fef8 	bl	8013b3a <vListInsertEnd>
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f383 8811 	msr	BASEPRI, r3
}
 8014d54:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3728      	adds	r7, #40	; 0x28
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	24001d28 	.word	0x24001d28
 8014d64:	2400182c 	.word	0x2400182c
 8014d68:	24001d08 	.word	0x24001d08
 8014d6c:	24001830 	.word	0x24001830
 8014d70:	24001cc0 	.word	0x24001cc0

08014d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b08a      	sub	sp, #40	; 0x28
 8014d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014d82:	463a      	mov	r2, r7
 8014d84:	1d39      	adds	r1, r7, #4
 8014d86:	f107 0308 	add.w	r3, r7, #8
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fe fc08 	bl	80135a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014d90:	6839      	ldr	r1, [r7, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	9202      	str	r2, [sp, #8]
 8014d98:	9301      	str	r3, [sp, #4]
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	9300      	str	r3, [sp, #0]
 8014d9e:	2300      	movs	r3, #0
 8014da0:	460a      	mov	r2, r1
 8014da2:	4921      	ldr	r1, [pc, #132]	; (8014e28 <vTaskStartScheduler+0xb4>)
 8014da4:	4821      	ldr	r0, [pc, #132]	; (8014e2c <vTaskStartScheduler+0xb8>)
 8014da6:	f7ff fcf5 	bl	8014794 <xTaskCreateStatic>
 8014daa:	4603      	mov	r3, r0
 8014dac:	4a20      	ldr	r2, [pc, #128]	; (8014e30 <vTaskStartScheduler+0xbc>)
 8014dae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014db0:	4b1f      	ldr	r3, [pc, #124]	; (8014e30 <vTaskStartScheduler+0xbc>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d002      	beq.n	8014dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014db8:	2301      	movs	r3, #1
 8014dba:	617b      	str	r3, [r7, #20]
 8014dbc:	e001      	b.n	8014dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d102      	bne.n	8014dce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014dc8:	f000 fdba 	bl	8015940 <xTimerCreateTimerTask>
 8014dcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d116      	bne.n	8014e02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd8:	f383 8811 	msr	BASEPRI, r3
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f3bf 8f4f 	dsb	sy
 8014de4:	613b      	str	r3, [r7, #16]
}
 8014de6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014de8:	4b12      	ldr	r3, [pc, #72]	; (8014e34 <vTaskStartScheduler+0xc0>)
 8014dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014df0:	4b11      	ldr	r3, [pc, #68]	; (8014e38 <vTaskStartScheduler+0xc4>)
 8014df2:	2201      	movs	r2, #1
 8014df4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014df6:	4b11      	ldr	r3, [pc, #68]	; (8014e3c <vTaskStartScheduler+0xc8>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014dfc:	f001 f998 	bl	8016130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014e00:	e00e      	b.n	8014e20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e08:	d10a      	bne.n	8014e20 <vTaskStartScheduler+0xac>
	__asm volatile
 8014e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0e:	f383 8811 	msr	BASEPRI, r3
 8014e12:	f3bf 8f6f 	isb	sy
 8014e16:	f3bf 8f4f 	dsb	sy
 8014e1a:	60fb      	str	r3, [r7, #12]
}
 8014e1c:	bf00      	nop
 8014e1e:	e7fe      	b.n	8014e1e <vTaskStartScheduler+0xaa>
}
 8014e20:	bf00      	nop
 8014e22:	3718      	adds	r7, #24
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	080175a8 	.word	0x080175a8
 8014e2c:	080155a5 	.word	0x080155a5
 8014e30:	24001d24 	.word	0x24001d24
 8014e34:	24001d20 	.word	0x24001d20
 8014e38:	24001d0c 	.word	0x24001d0c
 8014e3c:	24001d04 	.word	0x24001d04

08014e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014e40:	b480      	push	{r7}
 8014e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014e44:	4b04      	ldr	r3, [pc, #16]	; (8014e58 <vTaskSuspendAll+0x18>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	4a03      	ldr	r2, [pc, #12]	; (8014e58 <vTaskSuspendAll+0x18>)
 8014e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014e4e:	bf00      	nop
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr
 8014e58:	24001d28 	.word	0x24001d28

08014e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014e66:	2300      	movs	r3, #0
 8014e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014e6a:	4b42      	ldr	r3, [pc, #264]	; (8014f74 <xTaskResumeAll+0x118>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d10a      	bne.n	8014e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8014e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e76:	f383 8811 	msr	BASEPRI, r3
 8014e7a:	f3bf 8f6f 	isb	sy
 8014e7e:	f3bf 8f4f 	dsb	sy
 8014e82:	603b      	str	r3, [r7, #0]
}
 8014e84:	bf00      	nop
 8014e86:	e7fe      	b.n	8014e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014e88:	f001 f9f4 	bl	8016274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014e8c:	4b39      	ldr	r3, [pc, #228]	; (8014f74 <xTaskResumeAll+0x118>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	4a38      	ldr	r2, [pc, #224]	; (8014f74 <xTaskResumeAll+0x118>)
 8014e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e96:	4b37      	ldr	r3, [pc, #220]	; (8014f74 <xTaskResumeAll+0x118>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d162      	bne.n	8014f64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014e9e:	4b36      	ldr	r3, [pc, #216]	; (8014f78 <xTaskResumeAll+0x11c>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d05e      	beq.n	8014f64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ea6:	e02f      	b.n	8014f08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ea8:	4b34      	ldr	r3, [pc, #208]	; (8014f7c <xTaskResumeAll+0x120>)
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	3318      	adds	r3, #24
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fe fe9d 	bl	8013bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	3304      	adds	r3, #4
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fe fe98 	bl	8013bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ec8:	4b2d      	ldr	r3, [pc, #180]	; (8014f80 <xTaskResumeAll+0x124>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d903      	bls.n	8014ed8 <xTaskResumeAll+0x7c>
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ed4:	4a2a      	ldr	r2, [pc, #168]	; (8014f80 <xTaskResumeAll+0x124>)
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014edc:	4613      	mov	r3, r2
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4a27      	ldr	r2, [pc, #156]	; (8014f84 <xTaskResumeAll+0x128>)
 8014ee6:	441a      	add	r2, r3
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	3304      	adds	r3, #4
 8014eec:	4619      	mov	r1, r3
 8014eee:	4610      	mov	r0, r2
 8014ef0:	f7fe fe23 	bl	8013b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ef8:	4b23      	ldr	r3, [pc, #140]	; (8014f88 <xTaskResumeAll+0x12c>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d302      	bcc.n	8014f08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014f02:	4b22      	ldr	r3, [pc, #136]	; (8014f8c <xTaskResumeAll+0x130>)
 8014f04:	2201      	movs	r2, #1
 8014f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f08:	4b1c      	ldr	r3, [pc, #112]	; (8014f7c <xTaskResumeAll+0x120>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d1cb      	bne.n	8014ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d001      	beq.n	8014f1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014f16:	f000 fbfb 	bl	8015710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014f1a:	4b1d      	ldr	r3, [pc, #116]	; (8014f90 <xTaskResumeAll+0x134>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d010      	beq.n	8014f48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014f26:	f000 f847 	bl	8014fb8 <xTaskIncrementTick>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d002      	beq.n	8014f36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014f30:	4b16      	ldr	r3, [pc, #88]	; (8014f8c <xTaskResumeAll+0x130>)
 8014f32:	2201      	movs	r2, #1
 8014f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1f1      	bne.n	8014f26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014f42:	4b13      	ldr	r3, [pc, #76]	; (8014f90 <xTaskResumeAll+0x134>)
 8014f44:	2200      	movs	r2, #0
 8014f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014f48:	4b10      	ldr	r3, [pc, #64]	; (8014f8c <xTaskResumeAll+0x130>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d009      	beq.n	8014f64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014f50:	2301      	movs	r3, #1
 8014f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014f54:	4b0f      	ldr	r3, [pc, #60]	; (8014f94 <xTaskResumeAll+0x138>)
 8014f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f5a:	601a      	str	r2, [r3, #0]
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014f64:	f001 f9b6 	bl	80162d4 <vPortExitCritical>

	return xAlreadyYielded;
 8014f68:	68bb      	ldr	r3, [r7, #8]
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	24001d28 	.word	0x24001d28
 8014f78:	24001d00 	.word	0x24001d00
 8014f7c:	24001cc0 	.word	0x24001cc0
 8014f80:	24001d08 	.word	0x24001d08
 8014f84:	24001830 	.word	0x24001830
 8014f88:	2400182c 	.word	0x2400182c
 8014f8c:	24001d14 	.word	0x24001d14
 8014f90:	24001d10 	.word	0x24001d10
 8014f94:	e000ed04 	.word	0xe000ed04

08014f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014f9e:	4b05      	ldr	r3, [pc, #20]	; (8014fb4 <xTaskGetTickCount+0x1c>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014fa4:	687b      	ldr	r3, [r7, #4]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	370c      	adds	r7, #12
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	24001d04 	.word	0x24001d04

08014fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fc2:	4b53      	ldr	r3, [pc, #332]	; (8015110 <xTaskIncrementTick+0x158>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	f040 8095 	bne.w	80150f6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014fcc:	4b51      	ldr	r3, [pc, #324]	; (8015114 <xTaskIncrementTick+0x15c>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014fd4:	4a4f      	ldr	r2, [pc, #316]	; (8015114 <xTaskIncrementTick+0x15c>)
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d120      	bne.n	8015022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014fe0:	4b4d      	ldr	r3, [pc, #308]	; (8015118 <xTaskIncrementTick+0x160>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00a      	beq.n	8015000 <xTaskIncrementTick+0x48>
	__asm volatile
 8014fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fee:	f383 8811 	msr	BASEPRI, r3
 8014ff2:	f3bf 8f6f 	isb	sy
 8014ff6:	f3bf 8f4f 	dsb	sy
 8014ffa:	603b      	str	r3, [r7, #0]
}
 8014ffc:	bf00      	nop
 8014ffe:	e7fe      	b.n	8014ffe <xTaskIncrementTick+0x46>
 8015000:	4b45      	ldr	r3, [pc, #276]	; (8015118 <xTaskIncrementTick+0x160>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	60fb      	str	r3, [r7, #12]
 8015006:	4b45      	ldr	r3, [pc, #276]	; (801511c <xTaskIncrementTick+0x164>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4a43      	ldr	r2, [pc, #268]	; (8015118 <xTaskIncrementTick+0x160>)
 801500c:	6013      	str	r3, [r2, #0]
 801500e:	4a43      	ldr	r2, [pc, #268]	; (801511c <xTaskIncrementTick+0x164>)
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	6013      	str	r3, [r2, #0]
 8015014:	4b42      	ldr	r3, [pc, #264]	; (8015120 <xTaskIncrementTick+0x168>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	3301      	adds	r3, #1
 801501a:	4a41      	ldr	r2, [pc, #260]	; (8015120 <xTaskIncrementTick+0x168>)
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	f000 fb77 	bl	8015710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015022:	4b40      	ldr	r3, [pc, #256]	; (8015124 <xTaskIncrementTick+0x16c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	693a      	ldr	r2, [r7, #16]
 8015028:	429a      	cmp	r2, r3
 801502a:	d349      	bcc.n	80150c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801502c:	4b3a      	ldr	r3, [pc, #232]	; (8015118 <xTaskIncrementTick+0x160>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d104      	bne.n	8015040 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015036:	4b3b      	ldr	r3, [pc, #236]	; (8015124 <xTaskIncrementTick+0x16c>)
 8015038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801503c:	601a      	str	r2, [r3, #0]
					break;
 801503e:	e03f      	b.n	80150c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015040:	4b35      	ldr	r3, [pc, #212]	; (8015118 <xTaskIncrementTick+0x160>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	685b      	ldr	r3, [r3, #4]
 801504e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015050:	693a      	ldr	r2, [r7, #16]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	429a      	cmp	r2, r3
 8015056:	d203      	bcs.n	8015060 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015058:	4a32      	ldr	r2, [pc, #200]	; (8015124 <xTaskIncrementTick+0x16c>)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801505e:	e02f      	b.n	80150c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	3304      	adds	r3, #4
 8015064:	4618      	mov	r0, r3
 8015066:	f7fe fdc5 	bl	8013bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801506e:	2b00      	cmp	r3, #0
 8015070:	d004      	beq.n	801507c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	3318      	adds	r3, #24
 8015076:	4618      	mov	r0, r3
 8015078:	f7fe fdbc 	bl	8013bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015080:	4b29      	ldr	r3, [pc, #164]	; (8015128 <xTaskIncrementTick+0x170>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	429a      	cmp	r2, r3
 8015086:	d903      	bls.n	8015090 <xTaskIncrementTick+0xd8>
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801508c:	4a26      	ldr	r2, [pc, #152]	; (8015128 <xTaskIncrementTick+0x170>)
 801508e:	6013      	str	r3, [r2, #0]
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015094:	4613      	mov	r3, r2
 8015096:	009b      	lsls	r3, r3, #2
 8015098:	4413      	add	r3, r2
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	4a23      	ldr	r2, [pc, #140]	; (801512c <xTaskIncrementTick+0x174>)
 801509e:	441a      	add	r2, r3
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	3304      	adds	r3, #4
 80150a4:	4619      	mov	r1, r3
 80150a6:	4610      	mov	r0, r2
 80150a8:	f7fe fd47 	bl	8013b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b0:	4b1f      	ldr	r3, [pc, #124]	; (8015130 <xTaskIncrementTick+0x178>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d3b8      	bcc.n	801502c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80150ba:	2301      	movs	r3, #1
 80150bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80150be:	e7b5      	b.n	801502c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80150c0:	4b1b      	ldr	r3, [pc, #108]	; (8015130 <xTaskIncrementTick+0x178>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150c6:	4919      	ldr	r1, [pc, #100]	; (801512c <xTaskIncrementTick+0x174>)
 80150c8:	4613      	mov	r3, r2
 80150ca:	009b      	lsls	r3, r3, #2
 80150cc:	4413      	add	r3, r2
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	440b      	add	r3, r1
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b01      	cmp	r3, #1
 80150d6:	d901      	bls.n	80150dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80150d8:	2301      	movs	r3, #1
 80150da:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80150dc:	4b15      	ldr	r3, [pc, #84]	; (8015134 <xTaskIncrementTick+0x17c>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d101      	bne.n	80150e8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80150e4:	f7eb fa7e 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80150e8:	4b13      	ldr	r3, [pc, #76]	; (8015138 <xTaskIncrementTick+0x180>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d009      	beq.n	8015104 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80150f0:	2301      	movs	r3, #1
 80150f2:	617b      	str	r3, [r7, #20]
 80150f4:	e006      	b.n	8015104 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80150f6:	4b0f      	ldr	r3, [pc, #60]	; (8015134 <xTaskIncrementTick+0x17c>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	3301      	adds	r3, #1
 80150fc:	4a0d      	ldr	r2, [pc, #52]	; (8015134 <xTaskIncrementTick+0x17c>)
 80150fe:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015100:	f7eb fa70 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015104:	697b      	ldr	r3, [r7, #20]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3718      	adds	r7, #24
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	24001d28 	.word	0x24001d28
 8015114:	24001d04 	.word	0x24001d04
 8015118:	24001cb8 	.word	0x24001cb8
 801511c:	24001cbc 	.word	0x24001cbc
 8015120:	24001d18 	.word	0x24001d18
 8015124:	24001d20 	.word	0x24001d20
 8015128:	24001d08 	.word	0x24001d08
 801512c:	24001830 	.word	0x24001830
 8015130:	2400182c 	.word	0x2400182c
 8015134:	24001d10 	.word	0x24001d10
 8015138:	24001d14 	.word	0x24001d14

0801513c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801513c:	b480      	push	{r7}
 801513e:	b085      	sub	sp, #20
 8015140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015142:	4b28      	ldr	r3, [pc, #160]	; (80151e4 <vTaskSwitchContext+0xa8>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d003      	beq.n	8015152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801514a:	4b27      	ldr	r3, [pc, #156]	; (80151e8 <vTaskSwitchContext+0xac>)
 801514c:	2201      	movs	r2, #1
 801514e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015150:	e041      	b.n	80151d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015152:	4b25      	ldr	r3, [pc, #148]	; (80151e8 <vTaskSwitchContext+0xac>)
 8015154:	2200      	movs	r2, #0
 8015156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015158:	4b24      	ldr	r3, [pc, #144]	; (80151ec <vTaskSwitchContext+0xb0>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	60fb      	str	r3, [r7, #12]
 801515e:	e010      	b.n	8015182 <vTaskSwitchContext+0x46>
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d10a      	bne.n	801517c <vTaskSwitchContext+0x40>
	__asm volatile
 8015166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801516a:	f383 8811 	msr	BASEPRI, r3
 801516e:	f3bf 8f6f 	isb	sy
 8015172:	f3bf 8f4f 	dsb	sy
 8015176:	607b      	str	r3, [r7, #4]
}
 8015178:	bf00      	nop
 801517a:	e7fe      	b.n	801517a <vTaskSwitchContext+0x3e>
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	3b01      	subs	r3, #1
 8015180:	60fb      	str	r3, [r7, #12]
 8015182:	491b      	ldr	r1, [pc, #108]	; (80151f0 <vTaskSwitchContext+0xb4>)
 8015184:	68fa      	ldr	r2, [r7, #12]
 8015186:	4613      	mov	r3, r2
 8015188:	009b      	lsls	r3, r3, #2
 801518a:	4413      	add	r3, r2
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	440b      	add	r3, r1
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d0e4      	beq.n	8015160 <vTaskSwitchContext+0x24>
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	4613      	mov	r3, r2
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	4413      	add	r3, r2
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	4a13      	ldr	r2, [pc, #76]	; (80151f0 <vTaskSwitchContext+0xb4>)
 80151a2:	4413      	add	r3, r2
 80151a4:	60bb      	str	r3, [r7, #8]
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	685a      	ldr	r2, [r3, #4]
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	605a      	str	r2, [r3, #4]
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	685a      	ldr	r2, [r3, #4]
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	3308      	adds	r3, #8
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d104      	bne.n	80151c6 <vTaskSwitchContext+0x8a>
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	685a      	ldr	r2, [r3, #4]
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	605a      	str	r2, [r3, #4]
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	685b      	ldr	r3, [r3, #4]
 80151ca:	68db      	ldr	r3, [r3, #12]
 80151cc:	4a09      	ldr	r2, [pc, #36]	; (80151f4 <vTaskSwitchContext+0xb8>)
 80151ce:	6013      	str	r3, [r2, #0]
 80151d0:	4a06      	ldr	r2, [pc, #24]	; (80151ec <vTaskSwitchContext+0xb0>)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	6013      	str	r3, [r2, #0]
}
 80151d6:	bf00      	nop
 80151d8:	3714      	adds	r7, #20
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr
 80151e2:	bf00      	nop
 80151e4:	24001d28 	.word	0x24001d28
 80151e8:	24001d14 	.word	0x24001d14
 80151ec:	24001d08 	.word	0x24001d08
 80151f0:	24001830 	.word	0x24001830
 80151f4:	2400182c 	.word	0x2400182c

080151f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d10a      	bne.n	801521e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801520c:	f383 8811 	msr	BASEPRI, r3
 8015210:	f3bf 8f6f 	isb	sy
 8015214:	f3bf 8f4f 	dsb	sy
 8015218:	60fb      	str	r3, [r7, #12]
}
 801521a:	bf00      	nop
 801521c:	e7fe      	b.n	801521c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801521e:	4b07      	ldr	r3, [pc, #28]	; (801523c <vTaskPlaceOnEventList+0x44>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	3318      	adds	r3, #24
 8015224:	4619      	mov	r1, r3
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f7fe fcab 	bl	8013b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801522c:	2101      	movs	r1, #1
 801522e:	6838      	ldr	r0, [r7, #0]
 8015230:	f000 fb32 	bl	8015898 <prvAddCurrentTaskToDelayedList>
}
 8015234:	bf00      	nop
 8015236:	3710      	adds	r7, #16
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	2400182c 	.word	0x2400182c

08015240 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b086      	sub	sp, #24
 8015244:	af00      	add	r7, sp, #0
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	60b9      	str	r1, [r7, #8]
 801524a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10a      	bne.n	8015268 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015256:	f383 8811 	msr	BASEPRI, r3
 801525a:	f3bf 8f6f 	isb	sy
 801525e:	f3bf 8f4f 	dsb	sy
 8015262:	617b      	str	r3, [r7, #20]
}
 8015264:	bf00      	nop
 8015266:	e7fe      	b.n	8015266 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015268:	4b11      	ldr	r3, [pc, #68]	; (80152b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10a      	bne.n	8015286 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	613b      	str	r3, [r7, #16]
}
 8015282:	bf00      	nop
 8015284:	e7fe      	b.n	8015284 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015286:	4b0b      	ldr	r3, [pc, #44]	; (80152b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	68ba      	ldr	r2, [r7, #8]
 801528c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015290:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015292:	4b08      	ldr	r3, [pc, #32]	; (80152b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	3318      	adds	r3, #24
 8015298:	4619      	mov	r1, r3
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f7fe fc4d 	bl	8013b3a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80152a0:	2101      	movs	r1, #1
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 faf8 	bl	8015898 <prvAddCurrentTaskToDelayedList>
}
 80152a8:	bf00      	nop
 80152aa:	3718      	adds	r7, #24
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	24001d28 	.word	0x24001d28
 80152b4:	2400182c 	.word	0x2400182c

080152b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b086      	sub	sp, #24
 80152bc:	af00      	add	r7, sp, #0
 80152be:	60f8      	str	r0, [r7, #12]
 80152c0:	60b9      	str	r1, [r7, #8]
 80152c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10a      	bne.n	80152e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80152ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ce:	f383 8811 	msr	BASEPRI, r3
 80152d2:	f3bf 8f6f 	isb	sy
 80152d6:	f3bf 8f4f 	dsb	sy
 80152da:	617b      	str	r3, [r7, #20]
}
 80152dc:	bf00      	nop
 80152de:	e7fe      	b.n	80152de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80152e0:	4b0a      	ldr	r3, [pc, #40]	; (801530c <vTaskPlaceOnEventListRestricted+0x54>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	3318      	adds	r3, #24
 80152e6:	4619      	mov	r1, r3
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f7fe fc26 	bl	8013b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d002      	beq.n	80152fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80152f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80152fa:	6879      	ldr	r1, [r7, #4]
 80152fc:	68b8      	ldr	r0, [r7, #8]
 80152fe:	f000 facb 	bl	8015898 <prvAddCurrentTaskToDelayedList>
	}
 8015302:	bf00      	nop
 8015304:	3718      	adds	r7, #24
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	2400182c 	.word	0x2400182c

08015310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	68db      	ldr	r3, [r3, #12]
 801531e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d10a      	bne.n	801533c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801532a:	f383 8811 	msr	BASEPRI, r3
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	f3bf 8f4f 	dsb	sy
 8015336:	60fb      	str	r3, [r7, #12]
}
 8015338:	bf00      	nop
 801533a:	e7fe      	b.n	801533a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	3318      	adds	r3, #24
 8015340:	4618      	mov	r0, r3
 8015342:	f7fe fc57 	bl	8013bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015346:	4b1e      	ldr	r3, [pc, #120]	; (80153c0 <xTaskRemoveFromEventList+0xb0>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d11d      	bne.n	801538a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	3304      	adds	r3, #4
 8015352:	4618      	mov	r0, r3
 8015354:	f7fe fc4e 	bl	8013bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801535c:	4b19      	ldr	r3, [pc, #100]	; (80153c4 <xTaskRemoveFromEventList+0xb4>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	429a      	cmp	r2, r3
 8015362:	d903      	bls.n	801536c <xTaskRemoveFromEventList+0x5c>
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015368:	4a16      	ldr	r2, [pc, #88]	; (80153c4 <xTaskRemoveFromEventList+0xb4>)
 801536a:	6013      	str	r3, [r2, #0]
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015370:	4613      	mov	r3, r2
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	4413      	add	r3, r2
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	4a13      	ldr	r2, [pc, #76]	; (80153c8 <xTaskRemoveFromEventList+0xb8>)
 801537a:	441a      	add	r2, r3
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	3304      	adds	r3, #4
 8015380:	4619      	mov	r1, r3
 8015382:	4610      	mov	r0, r2
 8015384:	f7fe fbd9 	bl	8013b3a <vListInsertEnd>
 8015388:	e005      	b.n	8015396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	3318      	adds	r3, #24
 801538e:	4619      	mov	r1, r3
 8015390:	480e      	ldr	r0, [pc, #56]	; (80153cc <xTaskRemoveFromEventList+0xbc>)
 8015392:	f7fe fbd2 	bl	8013b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801539a:	4b0d      	ldr	r3, [pc, #52]	; (80153d0 <xTaskRemoveFromEventList+0xc0>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d905      	bls.n	80153b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80153a4:	2301      	movs	r3, #1
 80153a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80153a8:	4b0a      	ldr	r3, [pc, #40]	; (80153d4 <xTaskRemoveFromEventList+0xc4>)
 80153aa:	2201      	movs	r2, #1
 80153ac:	601a      	str	r2, [r3, #0]
 80153ae:	e001      	b.n	80153b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80153b0:	2300      	movs	r3, #0
 80153b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80153b4:	697b      	ldr	r3, [r7, #20]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	24001d28 	.word	0x24001d28
 80153c4:	24001d08 	.word	0x24001d08
 80153c8:	24001830 	.word	0x24001830
 80153cc:	24001cc0 	.word	0x24001cc0
 80153d0:	2400182c 	.word	0x2400182c
 80153d4:	24001d14 	.word	0x24001d14

080153d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80153e2:	4b29      	ldr	r3, [pc, #164]	; (8015488 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d10a      	bne.n	8015400 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80153ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	613b      	str	r3, [r7, #16]
}
 80153fc:	bf00      	nop
 80153fe:	e7fe      	b.n	80153fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d10a      	bne.n	801542c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8015416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	60fb      	str	r3, [r7, #12]
}
 8015428:	bf00      	nop
 801542a:	e7fe      	b.n	801542a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7fe fbe1 	bl	8013bf4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	3304      	adds	r3, #4
 8015436:	4618      	mov	r0, r3
 8015438:	f7fe fbdc 	bl	8013bf4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015440:	4b12      	ldr	r3, [pc, #72]	; (801548c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	429a      	cmp	r2, r3
 8015446:	d903      	bls.n	8015450 <vTaskRemoveFromUnorderedEventList+0x78>
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801544c:	4a0f      	ldr	r2, [pc, #60]	; (801548c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801544e:	6013      	str	r3, [r2, #0]
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015454:	4613      	mov	r3, r2
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	4413      	add	r3, r2
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	4a0c      	ldr	r2, [pc, #48]	; (8015490 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801545e:	441a      	add	r2, r3
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	3304      	adds	r3, #4
 8015464:	4619      	mov	r1, r3
 8015466:	4610      	mov	r0, r2
 8015468:	f7fe fb67 	bl	8013b3a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015470:	4b08      	ldr	r3, [pc, #32]	; (8015494 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015476:	429a      	cmp	r2, r3
 8015478:	d902      	bls.n	8015480 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801547a:	4b07      	ldr	r3, [pc, #28]	; (8015498 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801547c:	2201      	movs	r2, #1
 801547e:	601a      	str	r2, [r3, #0]
	}
}
 8015480:	bf00      	nop
 8015482:	3718      	adds	r7, #24
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	24001d28 	.word	0x24001d28
 801548c:	24001d08 	.word	0x24001d08
 8015490:	24001830 	.word	0x24001830
 8015494:	2400182c 	.word	0x2400182c
 8015498:	24001d14 	.word	0x24001d14

0801549c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801549c:	b480      	push	{r7}
 801549e:	b083      	sub	sp, #12
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80154a4:	4b06      	ldr	r3, [pc, #24]	; (80154c0 <vTaskInternalSetTimeOutState+0x24>)
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80154ac:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <vTaskInternalSetTimeOutState+0x28>)
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	605a      	str	r2, [r3, #4]
}
 80154b4:	bf00      	nop
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr
 80154c0:	24001d18 	.word	0x24001d18
 80154c4:	24001d04 	.word	0x24001d04

080154c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b088      	sub	sp, #32
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d10a      	bne.n	80154ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80154d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154dc:	f383 8811 	msr	BASEPRI, r3
 80154e0:	f3bf 8f6f 	isb	sy
 80154e4:	f3bf 8f4f 	dsb	sy
 80154e8:	613b      	str	r3, [r7, #16]
}
 80154ea:	bf00      	nop
 80154ec:	e7fe      	b.n	80154ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10a      	bne.n	801550a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80154f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f8:	f383 8811 	msr	BASEPRI, r3
 80154fc:	f3bf 8f6f 	isb	sy
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	60fb      	str	r3, [r7, #12]
}
 8015506:	bf00      	nop
 8015508:	e7fe      	b.n	8015508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801550a:	f000 feb3 	bl	8016274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801550e:	4b1d      	ldr	r3, [pc, #116]	; (8015584 <xTaskCheckForTimeOut+0xbc>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	69ba      	ldr	r2, [r7, #24]
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015526:	d102      	bne.n	801552e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015528:	2300      	movs	r3, #0
 801552a:	61fb      	str	r3, [r7, #28]
 801552c:	e023      	b.n	8015576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	4b15      	ldr	r3, [pc, #84]	; (8015588 <xTaskCheckForTimeOut+0xc0>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	429a      	cmp	r2, r3
 8015538:	d007      	beq.n	801554a <xTaskCheckForTimeOut+0x82>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	69ba      	ldr	r2, [r7, #24]
 8015540:	429a      	cmp	r2, r3
 8015542:	d302      	bcc.n	801554a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015544:	2301      	movs	r3, #1
 8015546:	61fb      	str	r3, [r7, #28]
 8015548:	e015      	b.n	8015576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	697a      	ldr	r2, [r7, #20]
 8015550:	429a      	cmp	r2, r3
 8015552:	d20b      	bcs.n	801556c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	1ad2      	subs	r2, r2, r3
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f7ff ff9b 	bl	801549c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015566:	2300      	movs	r3, #0
 8015568:	61fb      	str	r3, [r7, #28]
 801556a:	e004      	b.n	8015576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	2200      	movs	r2, #0
 8015570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015572:	2301      	movs	r3, #1
 8015574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015576:	f000 fead 	bl	80162d4 <vPortExitCritical>

	return xReturn;
 801557a:	69fb      	ldr	r3, [r7, #28]
}
 801557c:	4618      	mov	r0, r3
 801557e:	3720      	adds	r7, #32
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	24001d04 	.word	0x24001d04
 8015588:	24001d18 	.word	0x24001d18

0801558c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801558c:	b480      	push	{r7}
 801558e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015590:	4b03      	ldr	r3, [pc, #12]	; (80155a0 <vTaskMissedYield+0x14>)
 8015592:	2201      	movs	r2, #1
 8015594:	601a      	str	r2, [r3, #0]
}
 8015596:	bf00      	nop
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr
 80155a0:	24001d14 	.word	0x24001d14

080155a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b082      	sub	sp, #8
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80155ac:	f000 f852 	bl	8015654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80155b0:	4b06      	ldr	r3, [pc, #24]	; (80155cc <prvIdleTask+0x28>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	2b01      	cmp	r3, #1
 80155b6:	d9f9      	bls.n	80155ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80155b8:	4b05      	ldr	r3, [pc, #20]	; (80155d0 <prvIdleTask+0x2c>)
 80155ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155be:	601a      	str	r2, [r3, #0]
 80155c0:	f3bf 8f4f 	dsb	sy
 80155c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80155c8:	e7f0      	b.n	80155ac <prvIdleTask+0x8>
 80155ca:	bf00      	nop
 80155cc:	24001830 	.word	0x24001830
 80155d0:	e000ed04 	.word	0xe000ed04

080155d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80155da:	2300      	movs	r3, #0
 80155dc:	607b      	str	r3, [r7, #4]
 80155de:	e00c      	b.n	80155fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	4613      	mov	r3, r2
 80155e4:	009b      	lsls	r3, r3, #2
 80155e6:	4413      	add	r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	4a12      	ldr	r2, [pc, #72]	; (8015634 <prvInitialiseTaskLists+0x60>)
 80155ec:	4413      	add	r3, r2
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fe fa76 	bl	8013ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3301      	adds	r3, #1
 80155f8:	607b      	str	r3, [r7, #4]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2b37      	cmp	r3, #55	; 0x37
 80155fe:	d9ef      	bls.n	80155e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015600:	480d      	ldr	r0, [pc, #52]	; (8015638 <prvInitialiseTaskLists+0x64>)
 8015602:	f7fe fa6d 	bl	8013ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015606:	480d      	ldr	r0, [pc, #52]	; (801563c <prvInitialiseTaskLists+0x68>)
 8015608:	f7fe fa6a 	bl	8013ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801560c:	480c      	ldr	r0, [pc, #48]	; (8015640 <prvInitialiseTaskLists+0x6c>)
 801560e:	f7fe fa67 	bl	8013ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015612:	480c      	ldr	r0, [pc, #48]	; (8015644 <prvInitialiseTaskLists+0x70>)
 8015614:	f7fe fa64 	bl	8013ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015618:	480b      	ldr	r0, [pc, #44]	; (8015648 <prvInitialiseTaskLists+0x74>)
 801561a:	f7fe fa61 	bl	8013ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801561e:	4b0b      	ldr	r3, [pc, #44]	; (801564c <prvInitialiseTaskLists+0x78>)
 8015620:	4a05      	ldr	r2, [pc, #20]	; (8015638 <prvInitialiseTaskLists+0x64>)
 8015622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015624:	4b0a      	ldr	r3, [pc, #40]	; (8015650 <prvInitialiseTaskLists+0x7c>)
 8015626:	4a05      	ldr	r2, [pc, #20]	; (801563c <prvInitialiseTaskLists+0x68>)
 8015628:	601a      	str	r2, [r3, #0]
}
 801562a:	bf00      	nop
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	24001830 	.word	0x24001830
 8015638:	24001c90 	.word	0x24001c90
 801563c:	24001ca4 	.word	0x24001ca4
 8015640:	24001cc0 	.word	0x24001cc0
 8015644:	24001cd4 	.word	0x24001cd4
 8015648:	24001cec 	.word	0x24001cec
 801564c:	24001cb8 	.word	0x24001cb8
 8015650:	24001cbc 	.word	0x24001cbc

08015654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801565a:	e019      	b.n	8015690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801565c:	f000 fe0a 	bl	8016274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015660:	4b10      	ldr	r3, [pc, #64]	; (80156a4 <prvCheckTasksWaitingTermination+0x50>)
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	68db      	ldr	r3, [r3, #12]
 8015666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	3304      	adds	r3, #4
 801566c:	4618      	mov	r0, r3
 801566e:	f7fe fac1 	bl	8013bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015672:	4b0d      	ldr	r3, [pc, #52]	; (80156a8 <prvCheckTasksWaitingTermination+0x54>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	3b01      	subs	r3, #1
 8015678:	4a0b      	ldr	r2, [pc, #44]	; (80156a8 <prvCheckTasksWaitingTermination+0x54>)
 801567a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801567c:	4b0b      	ldr	r3, [pc, #44]	; (80156ac <prvCheckTasksWaitingTermination+0x58>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	3b01      	subs	r3, #1
 8015682:	4a0a      	ldr	r2, [pc, #40]	; (80156ac <prvCheckTasksWaitingTermination+0x58>)
 8015684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015686:	f000 fe25 	bl	80162d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f000 f810 	bl	80156b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015690:	4b06      	ldr	r3, [pc, #24]	; (80156ac <prvCheckTasksWaitingTermination+0x58>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1e1      	bne.n	801565c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015698:	bf00      	nop
 801569a:	bf00      	nop
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	24001cd4 	.word	0x24001cd4
 80156a8:	24001d00 	.word	0x24001d00
 80156ac:	24001ce8 	.word	0x24001ce8

080156b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d108      	bne.n	80156d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156c6:	4618      	mov	r0, r3
 80156c8:	f000 ffc2 	bl	8016650 <vPortFree>
				vPortFree( pxTCB );
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f000 ffbf 	bl	8016650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80156d2:	e018      	b.n	8015706 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80156da:	2b01      	cmp	r3, #1
 80156dc:	d103      	bne.n	80156e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 ffb6 	bl	8016650 <vPortFree>
	}
 80156e4:	e00f      	b.n	8015706 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d00a      	beq.n	8015706 <prvDeleteTCB+0x56>
	__asm volatile
 80156f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f4:	f383 8811 	msr	BASEPRI, r3
 80156f8:	f3bf 8f6f 	isb	sy
 80156fc:	f3bf 8f4f 	dsb	sy
 8015700:	60fb      	str	r3, [r7, #12]
}
 8015702:	bf00      	nop
 8015704:	e7fe      	b.n	8015704 <prvDeleteTCB+0x54>
	}
 8015706:	bf00      	nop
 8015708:	3710      	adds	r7, #16
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
	...

08015710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015716:	4b0c      	ldr	r3, [pc, #48]	; (8015748 <prvResetNextTaskUnblockTime+0x38>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d104      	bne.n	801572a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015720:	4b0a      	ldr	r3, [pc, #40]	; (801574c <prvResetNextTaskUnblockTime+0x3c>)
 8015722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015728:	e008      	b.n	801573c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801572a:	4b07      	ldr	r3, [pc, #28]	; (8015748 <prvResetNextTaskUnblockTime+0x38>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	68db      	ldr	r3, [r3, #12]
 8015730:	68db      	ldr	r3, [r3, #12]
 8015732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	4a04      	ldr	r2, [pc, #16]	; (801574c <prvResetNextTaskUnblockTime+0x3c>)
 801573a:	6013      	str	r3, [r2, #0]
}
 801573c:	bf00      	nop
 801573e:	370c      	adds	r7, #12
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr
 8015748:	24001cb8 	.word	0x24001cb8
 801574c:	24001d20 	.word	0x24001d20

08015750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015756:	4b0b      	ldr	r3, [pc, #44]	; (8015784 <xTaskGetSchedulerState+0x34>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d102      	bne.n	8015764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801575e:	2301      	movs	r3, #1
 8015760:	607b      	str	r3, [r7, #4]
 8015762:	e008      	b.n	8015776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015764:	4b08      	ldr	r3, [pc, #32]	; (8015788 <xTaskGetSchedulerState+0x38>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d102      	bne.n	8015772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801576c:	2302      	movs	r3, #2
 801576e:	607b      	str	r3, [r7, #4]
 8015770:	e001      	b.n	8015776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015772:	2300      	movs	r3, #0
 8015774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015776:	687b      	ldr	r3, [r7, #4]
	}
 8015778:	4618      	mov	r0, r3
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr
 8015784:	24001d0c 	.word	0x24001d0c
 8015788:	24001d28 	.word	0x24001d28

0801578c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801578c:	b580      	push	{r7, lr}
 801578e:	b086      	sub	sp, #24
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015798:	2300      	movs	r3, #0
 801579a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d056      	beq.n	8015850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80157a2:	4b2e      	ldr	r3, [pc, #184]	; (801585c <xTaskPriorityDisinherit+0xd0>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	693a      	ldr	r2, [r7, #16]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d00a      	beq.n	80157c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80157ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b0:	f383 8811 	msr	BASEPRI, r3
 80157b4:	f3bf 8f6f 	isb	sy
 80157b8:	f3bf 8f4f 	dsb	sy
 80157bc:	60fb      	str	r3, [r7, #12]
}
 80157be:	bf00      	nop
 80157c0:	e7fe      	b.n	80157c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d10a      	bne.n	80157e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80157ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ce:	f383 8811 	msr	BASEPRI, r3
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	60bb      	str	r3, [r7, #8]
}
 80157dc:	bf00      	nop
 80157de:	e7fe      	b.n	80157de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157e4:	1e5a      	subs	r2, r3, #1
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d02c      	beq.n	8015850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d128      	bne.n	8015850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	3304      	adds	r3, #4
 8015802:	4618      	mov	r0, r3
 8015804:	f7fe f9f6 	bl	8013bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015808:	693b      	ldr	r3, [r7, #16]
 801580a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015810:	693b      	ldr	r3, [r7, #16]
 8015812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015820:	4b0f      	ldr	r3, [pc, #60]	; (8015860 <xTaskPriorityDisinherit+0xd4>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	429a      	cmp	r2, r3
 8015826:	d903      	bls.n	8015830 <xTaskPriorityDisinherit+0xa4>
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582c:	4a0c      	ldr	r2, [pc, #48]	; (8015860 <xTaskPriorityDisinherit+0xd4>)
 801582e:	6013      	str	r3, [r2, #0]
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015834:	4613      	mov	r3, r2
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	4413      	add	r3, r2
 801583a:	009b      	lsls	r3, r3, #2
 801583c:	4a09      	ldr	r2, [pc, #36]	; (8015864 <xTaskPriorityDisinherit+0xd8>)
 801583e:	441a      	add	r2, r3
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	3304      	adds	r3, #4
 8015844:	4619      	mov	r1, r3
 8015846:	4610      	mov	r0, r2
 8015848:	f7fe f977 	bl	8013b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801584c:	2301      	movs	r3, #1
 801584e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015850:	697b      	ldr	r3, [r7, #20]
	}
 8015852:	4618      	mov	r0, r3
 8015854:	3718      	adds	r7, #24
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	2400182c 	.word	0x2400182c
 8015860:	24001d08 	.word	0x24001d08
 8015864:	24001830 	.word	0x24001830

08015868 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801586e:	4b09      	ldr	r3, [pc, #36]	; (8015894 <uxTaskResetEventItemValue+0x2c>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	699b      	ldr	r3, [r3, #24]
 8015874:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015876:	4b07      	ldr	r3, [pc, #28]	; (8015894 <uxTaskResetEventItemValue+0x2c>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801587c:	4b05      	ldr	r3, [pc, #20]	; (8015894 <uxTaskResetEventItemValue+0x2c>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015884:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015886:	687b      	ldr	r3, [r7, #4]
}
 8015888:	4618      	mov	r0, r3
 801588a:	370c      	adds	r7, #12
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr
 8015894:	2400182c 	.word	0x2400182c

08015898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80158a2:	4b21      	ldr	r3, [pc, #132]	; (8015928 <prvAddCurrentTaskToDelayedList+0x90>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158a8:	4b20      	ldr	r3, [pc, #128]	; (801592c <prvAddCurrentTaskToDelayedList+0x94>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	3304      	adds	r3, #4
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7fe f9a0 	bl	8013bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158ba:	d10a      	bne.n	80158d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d007      	beq.n	80158d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158c2:	4b1a      	ldr	r3, [pc, #104]	; (801592c <prvAddCurrentTaskToDelayedList+0x94>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	3304      	adds	r3, #4
 80158c8:	4619      	mov	r1, r3
 80158ca:	4819      	ldr	r0, [pc, #100]	; (8015930 <prvAddCurrentTaskToDelayedList+0x98>)
 80158cc:	f7fe f935 	bl	8013b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80158d0:	e026      	b.n	8015920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	4413      	add	r3, r2
 80158d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80158da:	4b14      	ldr	r3, [pc, #80]	; (801592c <prvAddCurrentTaskToDelayedList+0x94>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d209      	bcs.n	80158fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158ea:	4b12      	ldr	r3, [pc, #72]	; (8015934 <prvAddCurrentTaskToDelayedList+0x9c>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	4b0f      	ldr	r3, [pc, #60]	; (801592c <prvAddCurrentTaskToDelayedList+0x94>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	3304      	adds	r3, #4
 80158f4:	4619      	mov	r1, r3
 80158f6:	4610      	mov	r0, r2
 80158f8:	f7fe f943 	bl	8013b82 <vListInsert>
}
 80158fc:	e010      	b.n	8015920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158fe:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	4b0a      	ldr	r3, [pc, #40]	; (801592c <prvAddCurrentTaskToDelayedList+0x94>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	3304      	adds	r3, #4
 8015908:	4619      	mov	r1, r3
 801590a:	4610      	mov	r0, r2
 801590c:	f7fe f939 	bl	8013b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015910:	4b0a      	ldr	r3, [pc, #40]	; (801593c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	429a      	cmp	r2, r3
 8015918:	d202      	bcs.n	8015920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801591a:	4a08      	ldr	r2, [pc, #32]	; (801593c <prvAddCurrentTaskToDelayedList+0xa4>)
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	6013      	str	r3, [r2, #0]
}
 8015920:	bf00      	nop
 8015922:	3710      	adds	r7, #16
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	24001d04 	.word	0x24001d04
 801592c:	2400182c 	.word	0x2400182c
 8015930:	24001cec 	.word	0x24001cec
 8015934:	24001cbc 	.word	0x24001cbc
 8015938:	24001cb8 	.word	0x24001cb8
 801593c:	24001d20 	.word	0x24001d20

08015940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b08a      	sub	sp, #40	; 0x28
 8015944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015946:	2300      	movs	r3, #0
 8015948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801594a:	f000 fb07 	bl	8015f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801594e:	4b1c      	ldr	r3, [pc, #112]	; (80159c0 <xTimerCreateTimerTask+0x80>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d021      	beq.n	801599a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015956:	2300      	movs	r3, #0
 8015958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801595e:	1d3a      	adds	r2, r7, #4
 8015960:	f107 0108 	add.w	r1, r7, #8
 8015964:	f107 030c 	add.w	r3, r7, #12
 8015968:	4618      	mov	r0, r3
 801596a:	f7fd fe33 	bl	80135d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801596e:	6879      	ldr	r1, [r7, #4]
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	68fa      	ldr	r2, [r7, #12]
 8015974:	9202      	str	r2, [sp, #8]
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	2302      	movs	r3, #2
 801597a:	9300      	str	r3, [sp, #0]
 801597c:	2300      	movs	r3, #0
 801597e:	460a      	mov	r2, r1
 8015980:	4910      	ldr	r1, [pc, #64]	; (80159c4 <xTimerCreateTimerTask+0x84>)
 8015982:	4811      	ldr	r0, [pc, #68]	; (80159c8 <xTimerCreateTimerTask+0x88>)
 8015984:	f7fe ff06 	bl	8014794 <xTaskCreateStatic>
 8015988:	4603      	mov	r3, r0
 801598a:	4a10      	ldr	r2, [pc, #64]	; (80159cc <xTimerCreateTimerTask+0x8c>)
 801598c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801598e:	4b0f      	ldr	r3, [pc, #60]	; (80159cc <xTimerCreateTimerTask+0x8c>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d001      	beq.n	801599a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015996:	2301      	movs	r3, #1
 8015998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10a      	bne.n	80159b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	613b      	str	r3, [r7, #16]
}
 80159b2:	bf00      	nop
 80159b4:	e7fe      	b.n	80159b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80159b6:	697b      	ldr	r3, [r7, #20]
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3718      	adds	r7, #24
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	24001d5c 	.word	0x24001d5c
 80159c4:	080175b0 	.word	0x080175b0
 80159c8:	08015b05 	.word	0x08015b05
 80159cc:	24001d60 	.word	0x24001d60

080159d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b08a      	sub	sp, #40	; 0x28
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]
 80159dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80159de:	2300      	movs	r3, #0
 80159e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10a      	bne.n	80159fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	623b      	str	r3, [r7, #32]
}
 80159fa:	bf00      	nop
 80159fc:	e7fe      	b.n	80159fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80159fe:	4b1a      	ldr	r3, [pc, #104]	; (8015a68 <xTimerGenericCommand+0x98>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d02a      	beq.n	8015a5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	2b05      	cmp	r3, #5
 8015a16:	dc18      	bgt.n	8015a4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015a18:	f7ff fe9a 	bl	8015750 <xTaskGetSchedulerState>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	d109      	bne.n	8015a36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015a22:	4b11      	ldr	r3, [pc, #68]	; (8015a68 <xTimerGenericCommand+0x98>)
 8015a24:	6818      	ldr	r0, [r3, #0]
 8015a26:	f107 0110 	add.w	r1, r7, #16
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a2e:	f7fe fa49 	bl	8013ec4 <xQueueGenericSend>
 8015a32:	6278      	str	r0, [r7, #36]	; 0x24
 8015a34:	e012      	b.n	8015a5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015a36:	4b0c      	ldr	r3, [pc, #48]	; (8015a68 <xTimerGenericCommand+0x98>)
 8015a38:	6818      	ldr	r0, [r3, #0]
 8015a3a:	f107 0110 	add.w	r1, r7, #16
 8015a3e:	2300      	movs	r3, #0
 8015a40:	2200      	movs	r2, #0
 8015a42:	f7fe fa3f 	bl	8013ec4 <xQueueGenericSend>
 8015a46:	6278      	str	r0, [r7, #36]	; 0x24
 8015a48:	e008      	b.n	8015a5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015a4a:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <xTimerGenericCommand+0x98>)
 8015a4c:	6818      	ldr	r0, [r3, #0]
 8015a4e:	f107 0110 	add.w	r1, r7, #16
 8015a52:	2300      	movs	r3, #0
 8015a54:	683a      	ldr	r2, [r7, #0]
 8015a56:	f7fe fb33 	bl	80140c0 <xQueueGenericSendFromISR>
 8015a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3728      	adds	r7, #40	; 0x28
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	24001d5c 	.word	0x24001d5c

08015a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b088      	sub	sp, #32
 8015a70:	af02      	add	r7, sp, #8
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a76:	4b22      	ldr	r3, [pc, #136]	; (8015b00 <prvProcessExpiredTimer+0x94>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	68db      	ldr	r3, [r3, #12]
 8015a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	3304      	adds	r3, #4
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fe f8b5 	bl	8013bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a90:	f003 0304 	and.w	r3, r3, #4
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d022      	beq.n	8015ade <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	699a      	ldr	r2, [r3, #24]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	18d1      	adds	r1, r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	683a      	ldr	r2, [r7, #0]
 8015aa4:	6978      	ldr	r0, [r7, #20]
 8015aa6:	f000 f8d1 	bl	8015c4c <prvInsertTimerInActiveList>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d01f      	beq.n	8015af0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	2100      	movs	r1, #0
 8015aba:	6978      	ldr	r0, [r7, #20]
 8015abc:	f7ff ff88 	bl	80159d0 <xTimerGenericCommand>
 8015ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d113      	bne.n	8015af0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015acc:	f383 8811 	msr	BASEPRI, r3
 8015ad0:	f3bf 8f6f 	isb	sy
 8015ad4:	f3bf 8f4f 	dsb	sy
 8015ad8:	60fb      	str	r3, [r7, #12]
}
 8015ada:	bf00      	nop
 8015adc:	e7fe      	b.n	8015adc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ae4:	f023 0301 	bic.w	r3, r3, #1
 8015ae8:	b2da      	uxtb	r2, r3
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	6a1b      	ldr	r3, [r3, #32]
 8015af4:	6978      	ldr	r0, [r7, #20]
 8015af6:	4798      	blx	r3
}
 8015af8:	bf00      	nop
 8015afa:	3718      	adds	r7, #24
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	24001d54 	.word	0x24001d54

08015b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015b0c:	f107 0308 	add.w	r3, r7, #8
 8015b10:	4618      	mov	r0, r3
 8015b12:	f000 f857 	bl	8015bc4 <prvGetNextExpireTime>
 8015b16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f000 f803 	bl	8015b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015b22:	f000 f8d5 	bl	8015cd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015b26:	e7f1      	b.n	8015b0c <prvTimerTask+0x8>

08015b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b084      	sub	sp, #16
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015b32:	f7ff f985 	bl	8014e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015b36:	f107 0308 	add.w	r3, r7, #8
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 f866 	bl	8015c0c <prvSampleTimeNow>
 8015b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d130      	bne.n	8015baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10a      	bne.n	8015b64 <prvProcessTimerOrBlockTask+0x3c>
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d806      	bhi.n	8015b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015b56:	f7ff f981 	bl	8014e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015b5a:	68f9      	ldr	r1, [r7, #12]
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7ff ff85 	bl	8015a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015b62:	e024      	b.n	8015bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d008      	beq.n	8015b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015b6a:	4b13      	ldr	r3, [pc, #76]	; (8015bb8 <prvProcessTimerOrBlockTask+0x90>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d101      	bne.n	8015b78 <prvProcessTimerOrBlockTask+0x50>
 8015b74:	2301      	movs	r3, #1
 8015b76:	e000      	b.n	8015b7a <prvProcessTimerOrBlockTask+0x52>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015b7c:	4b0f      	ldr	r3, [pc, #60]	; (8015bbc <prvProcessTimerOrBlockTask+0x94>)
 8015b7e:	6818      	ldr	r0, [r3, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	4619      	mov	r1, r3
 8015b8a:	f7fe fdcf 	bl	801472c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015b8e:	f7ff f965 	bl	8014e5c <xTaskResumeAll>
 8015b92:	4603      	mov	r3, r0
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d10a      	bne.n	8015bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015b98:	4b09      	ldr	r3, [pc, #36]	; (8015bc0 <prvProcessTimerOrBlockTask+0x98>)
 8015b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b9e:	601a      	str	r2, [r3, #0]
 8015ba0:	f3bf 8f4f 	dsb	sy
 8015ba4:	f3bf 8f6f 	isb	sy
}
 8015ba8:	e001      	b.n	8015bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015baa:	f7ff f957 	bl	8014e5c <xTaskResumeAll>
}
 8015bae:	bf00      	nop
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	24001d58 	.word	0x24001d58
 8015bbc:	24001d5c 	.word	0x24001d5c
 8015bc0:	e000ed04 	.word	0xe000ed04

08015bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b085      	sub	sp, #20
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015bcc:	4b0e      	ldr	r3, [pc, #56]	; (8015c08 <prvGetNextExpireTime+0x44>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d101      	bne.n	8015bda <prvGetNextExpireTime+0x16>
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	e000      	b.n	8015bdc <prvGetNextExpireTime+0x18>
 8015bda:	2200      	movs	r2, #0
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d105      	bne.n	8015bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015be8:	4b07      	ldr	r3, [pc, #28]	; (8015c08 <prvGetNextExpireTime+0x44>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	60fb      	str	r3, [r7, #12]
 8015bf2:	e001      	b.n	8015bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3714      	adds	r7, #20
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop
 8015c08:	24001d54 	.word	0x24001d54

08015c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015c14:	f7ff f9c0 	bl	8014f98 <xTaskGetTickCount>
 8015c18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015c1a:	4b0b      	ldr	r3, [pc, #44]	; (8015c48 <prvSampleTimeNow+0x3c>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	68fa      	ldr	r2, [r7, #12]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d205      	bcs.n	8015c30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015c24:	f000 f936 	bl	8015e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	601a      	str	r2, [r3, #0]
 8015c2e:	e002      	b.n	8015c36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015c36:	4a04      	ldr	r2, [pc, #16]	; (8015c48 <prvSampleTimeNow+0x3c>)
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	24001d64 	.word	0x24001d64

08015c4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	60f8      	str	r0, [r7, #12]
 8015c54:	60b9      	str	r1, [r7, #8]
 8015c56:	607a      	str	r2, [r7, #4]
 8015c58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	68ba      	ldr	r2, [r7, #8]
 8015c62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	68fa      	ldr	r2, [r7, #12]
 8015c68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015c6a:	68ba      	ldr	r2, [r7, #8]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d812      	bhi.n	8015c98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	1ad2      	subs	r2, r2, r3
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	699b      	ldr	r3, [r3, #24]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d302      	bcc.n	8015c86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015c80:	2301      	movs	r3, #1
 8015c82:	617b      	str	r3, [r7, #20]
 8015c84:	e01b      	b.n	8015cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015c86:	4b10      	ldr	r3, [pc, #64]	; (8015cc8 <prvInsertTimerInActiveList+0x7c>)
 8015c88:	681a      	ldr	r2, [r3, #0]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	4619      	mov	r1, r3
 8015c90:	4610      	mov	r0, r2
 8015c92:	f7fd ff76 	bl	8013b82 <vListInsert>
 8015c96:	e012      	b.n	8015cbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d206      	bcs.n	8015cae <prvInsertTimerInActiveList+0x62>
 8015ca0:	68ba      	ldr	r2, [r7, #8]
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d302      	bcc.n	8015cae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015ca8:	2301      	movs	r3, #1
 8015caa:	617b      	str	r3, [r7, #20]
 8015cac:	e007      	b.n	8015cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015cae:	4b07      	ldr	r3, [pc, #28]	; (8015ccc <prvInsertTimerInActiveList+0x80>)
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3304      	adds	r3, #4
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	4610      	mov	r0, r2
 8015cba:	f7fd ff62 	bl	8013b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015cbe:	697b      	ldr	r3, [r7, #20]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3718      	adds	r7, #24
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	24001d58 	.word	0x24001d58
 8015ccc:	24001d54 	.word	0x24001d54

08015cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b08e      	sub	sp, #56	; 0x38
 8015cd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015cd6:	e0ca      	b.n	8015e6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	da18      	bge.n	8015d10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015cde:	1d3b      	adds	r3, r7, #4
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10a      	bne.n	8015d00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cee:	f383 8811 	msr	BASEPRI, r3
 8015cf2:	f3bf 8f6f 	isb	sy
 8015cf6:	f3bf 8f4f 	dsb	sy
 8015cfa:	61fb      	str	r3, [r7, #28]
}
 8015cfc:	bf00      	nop
 8015cfe:	e7fe      	b.n	8015cfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d06:	6850      	ldr	r0, [r2, #4]
 8015d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d0a:	6892      	ldr	r2, [r2, #8]
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	f2c0 80aa 	blt.w	8015e6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1e:	695b      	ldr	r3, [r3, #20]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d004      	beq.n	8015d2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d26:	3304      	adds	r3, #4
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7fd ff63 	bl	8013bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015d2e:	463b      	mov	r3, r7
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7ff ff6b 	bl	8015c0c <prvSampleTimeNow>
 8015d36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b09      	cmp	r3, #9
 8015d3c:	f200 8097 	bhi.w	8015e6e <prvProcessReceivedCommands+0x19e>
 8015d40:	a201      	add	r2, pc, #4	; (adr r2, 8015d48 <prvProcessReceivedCommands+0x78>)
 8015d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d46:	bf00      	nop
 8015d48:	08015d71 	.word	0x08015d71
 8015d4c:	08015d71 	.word	0x08015d71
 8015d50:	08015d71 	.word	0x08015d71
 8015d54:	08015de5 	.word	0x08015de5
 8015d58:	08015df9 	.word	0x08015df9
 8015d5c:	08015e43 	.word	0x08015e43
 8015d60:	08015d71 	.word	0x08015d71
 8015d64:	08015d71 	.word	0x08015d71
 8015d68:	08015de5 	.word	0x08015de5
 8015d6c:	08015df9 	.word	0x08015df9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d76:	f043 0301 	orr.w	r3, r3, #1
 8015d7a:	b2da      	uxtb	r2, r3
 8015d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015d82:	68ba      	ldr	r2, [r7, #8]
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	699b      	ldr	r3, [r3, #24]
 8015d88:	18d1      	adds	r1, r2, r3
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d90:	f7ff ff5c 	bl	8015c4c <prvInsertTimerInActiveList>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d069      	beq.n	8015e6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	6a1b      	ldr	r3, [r3, #32]
 8015d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015da0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015da8:	f003 0304 	and.w	r3, r3, #4
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d05e      	beq.n	8015e6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	699b      	ldr	r3, [r3, #24]
 8015db6:	441a      	add	r2, r3
 8015db8:	2300      	movs	r3, #0
 8015dba:	9300      	str	r3, [sp, #0]
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dc2:	f7ff fe05 	bl	80159d0 <xTimerGenericCommand>
 8015dc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015dc8:	6a3b      	ldr	r3, [r7, #32]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d14f      	bne.n	8015e6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	61bb      	str	r3, [r7, #24]
}
 8015de0:	bf00      	nop
 8015de2:	e7fe      	b.n	8015de2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dea:	f023 0301 	bic.w	r3, r3, #1
 8015dee:	b2da      	uxtb	r2, r3
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015df6:	e03a      	b.n	8015e6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dfe:	f043 0301 	orr.w	r3, r3, #1
 8015e02:	b2da      	uxtb	r2, r3
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015e0a:	68ba      	ldr	r2, [r7, #8]
 8015e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e12:	699b      	ldr	r3, [r3, #24]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d10a      	bne.n	8015e2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e1c:	f383 8811 	msr	BASEPRI, r3
 8015e20:	f3bf 8f6f 	isb	sy
 8015e24:	f3bf 8f4f 	dsb	sy
 8015e28:	617b      	str	r3, [r7, #20]
}
 8015e2a:	bf00      	nop
 8015e2c:	e7fe      	b.n	8015e2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e30:	699a      	ldr	r2, [r3, #24]
 8015e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e34:	18d1      	adds	r1, r2, r3
 8015e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e3c:	f7ff ff06 	bl	8015c4c <prvInsertTimerInActiveList>
					break;
 8015e40:	e015      	b.n	8015e6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e48:	f003 0302 	and.w	r3, r3, #2
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d103      	bne.n	8015e58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e52:	f000 fbfd 	bl	8016650 <vPortFree>
 8015e56:	e00a      	b.n	8015e6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e5e:	f023 0301 	bic.w	r3, r3, #1
 8015e62:	b2da      	uxtb	r2, r3
 8015e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015e6a:	e000      	b.n	8015e6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015e6e:	4b08      	ldr	r3, [pc, #32]	; (8015e90 <prvProcessReceivedCommands+0x1c0>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	1d39      	adds	r1, r7, #4
 8015e74:	2200      	movs	r2, #0
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7fe f9be 	bl	80141f8 <xQueueReceive>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	f47f af2a 	bne.w	8015cd8 <prvProcessReceivedCommands+0x8>
	}
}
 8015e84:	bf00      	nop
 8015e86:	bf00      	nop
 8015e88:	3730      	adds	r7, #48	; 0x30
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
 8015e8e:	bf00      	nop
 8015e90:	24001d5c 	.word	0x24001d5c

08015e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b088      	sub	sp, #32
 8015e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015e9a:	e048      	b.n	8015f2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015e9c:	4b2d      	ldr	r3, [pc, #180]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ea6:	4b2b      	ldr	r3, [pc, #172]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fd fe9d 	bl	8013bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6a1b      	ldr	r3, [r3, #32]
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ec8:	f003 0304 	and.w	r3, r3, #4
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d02e      	beq.n	8015f2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	699b      	ldr	r3, [r3, #24]
 8015ed4:	693a      	ldr	r2, [r7, #16]
 8015ed6:	4413      	add	r3, r2
 8015ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015eda:	68ba      	ldr	r2, [r7, #8]
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d90e      	bls.n	8015f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	68ba      	ldr	r2, [r7, #8]
 8015ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015eee:	4b19      	ldr	r3, [pc, #100]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	3304      	adds	r3, #4
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4610      	mov	r0, r2
 8015efa:	f7fd fe42 	bl	8013b82 <vListInsert>
 8015efe:	e016      	b.n	8015f2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015f00:	2300      	movs	r3, #0
 8015f02:	9300      	str	r3, [sp, #0]
 8015f04:	2300      	movs	r3, #0
 8015f06:	693a      	ldr	r2, [r7, #16]
 8015f08:	2100      	movs	r1, #0
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f7ff fd60 	bl	80159d0 <xTimerGenericCommand>
 8015f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d10a      	bne.n	8015f2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f1c:	f383 8811 	msr	BASEPRI, r3
 8015f20:	f3bf 8f6f 	isb	sy
 8015f24:	f3bf 8f4f 	dsb	sy
 8015f28:	603b      	str	r3, [r7, #0]
}
 8015f2a:	bf00      	nop
 8015f2c:	e7fe      	b.n	8015f2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015f2e:	4b09      	ldr	r3, [pc, #36]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1b1      	bne.n	8015e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015f38:	4b06      	ldr	r3, [pc, #24]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015f3e:	4b06      	ldr	r3, [pc, #24]	; (8015f58 <prvSwitchTimerLists+0xc4>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4a04      	ldr	r2, [pc, #16]	; (8015f54 <prvSwitchTimerLists+0xc0>)
 8015f44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015f46:	4a04      	ldr	r2, [pc, #16]	; (8015f58 <prvSwitchTimerLists+0xc4>)
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	6013      	str	r3, [r2, #0]
}
 8015f4c:	bf00      	nop
 8015f4e:	3718      	adds	r7, #24
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	24001d54 	.word	0x24001d54
 8015f58:	24001d58 	.word	0x24001d58

08015f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015f62:	f000 f987 	bl	8016274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015f66:	4b15      	ldr	r3, [pc, #84]	; (8015fbc <prvCheckForValidListAndQueue+0x60>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d120      	bne.n	8015fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015f6e:	4814      	ldr	r0, [pc, #80]	; (8015fc0 <prvCheckForValidListAndQueue+0x64>)
 8015f70:	f7fd fdb6 	bl	8013ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015f74:	4813      	ldr	r0, [pc, #76]	; (8015fc4 <prvCheckForValidListAndQueue+0x68>)
 8015f76:	f7fd fdb3 	bl	8013ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015f7a:	4b13      	ldr	r3, [pc, #76]	; (8015fc8 <prvCheckForValidListAndQueue+0x6c>)
 8015f7c:	4a10      	ldr	r2, [pc, #64]	; (8015fc0 <prvCheckForValidListAndQueue+0x64>)
 8015f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015f80:	4b12      	ldr	r3, [pc, #72]	; (8015fcc <prvCheckForValidListAndQueue+0x70>)
 8015f82:	4a10      	ldr	r2, [pc, #64]	; (8015fc4 <prvCheckForValidListAndQueue+0x68>)
 8015f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015f86:	2300      	movs	r3, #0
 8015f88:	9300      	str	r3, [sp, #0]
 8015f8a:	4b11      	ldr	r3, [pc, #68]	; (8015fd0 <prvCheckForValidListAndQueue+0x74>)
 8015f8c:	4a11      	ldr	r2, [pc, #68]	; (8015fd4 <prvCheckForValidListAndQueue+0x78>)
 8015f8e:	2110      	movs	r1, #16
 8015f90:	200a      	movs	r0, #10
 8015f92:	f7fd fec1 	bl	8013d18 <xQueueGenericCreateStatic>
 8015f96:	4603      	mov	r3, r0
 8015f98:	4a08      	ldr	r2, [pc, #32]	; (8015fbc <prvCheckForValidListAndQueue+0x60>)
 8015f9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015f9c:	4b07      	ldr	r3, [pc, #28]	; (8015fbc <prvCheckForValidListAndQueue+0x60>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d005      	beq.n	8015fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015fa4:	4b05      	ldr	r3, [pc, #20]	; (8015fbc <prvCheckForValidListAndQueue+0x60>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	490b      	ldr	r1, [pc, #44]	; (8015fd8 <prvCheckForValidListAndQueue+0x7c>)
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7fe fb94 	bl	80146d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015fb0:	f000 f990 	bl	80162d4 <vPortExitCritical>
}
 8015fb4:	bf00      	nop
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	24001d5c 	.word	0x24001d5c
 8015fc0:	24001d2c 	.word	0x24001d2c
 8015fc4:	24001d40 	.word	0x24001d40
 8015fc8:	24001d54 	.word	0x24001d54
 8015fcc:	24001d58 	.word	0x24001d58
 8015fd0:	24001e08 	.word	0x24001e08
 8015fd4:	24001d68 	.word	0x24001d68
 8015fd8:	080175b8 	.word	0x080175b8

08015fdc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b08a      	sub	sp, #40	; 0x28
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	607a      	str	r2, [r7, #4]
 8015fe8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015fea:	f06f 0301 	mvn.w	r3, #1
 8015fee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015ffc:	4b06      	ldr	r3, [pc, #24]	; (8016018 <xTimerPendFunctionCallFromISR+0x3c>)
 8015ffe:	6818      	ldr	r0, [r3, #0]
 8016000:	f107 0114 	add.w	r1, r7, #20
 8016004:	2300      	movs	r3, #0
 8016006:	683a      	ldr	r2, [r7, #0]
 8016008:	f7fe f85a 	bl	80140c0 <xQueueGenericSendFromISR>
 801600c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016010:	4618      	mov	r0, r3
 8016012:	3728      	adds	r7, #40	; 0x28
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}
 8016018:	24001d5c 	.word	0x24001d5c

0801601c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801601c:	b480      	push	{r7}
 801601e:	b085      	sub	sp, #20
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	3b04      	subs	r3, #4
 801602c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	3b04      	subs	r3, #4
 801603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	f023 0201 	bic.w	r2, r3, #1
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	3b04      	subs	r3, #4
 801604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801604c:	4a0c      	ldr	r2, [pc, #48]	; (8016080 <pxPortInitialiseStack+0x64>)
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	3b14      	subs	r3, #20
 8016056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016058:	687a      	ldr	r2, [r7, #4]
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	3b04      	subs	r3, #4
 8016062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f06f 0202 	mvn.w	r2, #2
 801606a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	3b20      	subs	r3, #32
 8016070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016072:	68fb      	ldr	r3, [r7, #12]
}
 8016074:	4618      	mov	r0, r3
 8016076:	3714      	adds	r7, #20
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr
 8016080:	08016085 	.word	0x08016085

08016084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016084:	b480      	push	{r7}
 8016086:	b085      	sub	sp, #20
 8016088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801608a:	2300      	movs	r3, #0
 801608c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801608e:	4b12      	ldr	r3, [pc, #72]	; (80160d8 <prvTaskExitError+0x54>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016096:	d00a      	beq.n	80160ae <prvTaskExitError+0x2a>
	__asm volatile
 8016098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609c:	f383 8811 	msr	BASEPRI, r3
 80160a0:	f3bf 8f6f 	isb	sy
 80160a4:	f3bf 8f4f 	dsb	sy
 80160a8:	60fb      	str	r3, [r7, #12]
}
 80160aa:	bf00      	nop
 80160ac:	e7fe      	b.n	80160ac <prvTaskExitError+0x28>
	__asm volatile
 80160ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b2:	f383 8811 	msr	BASEPRI, r3
 80160b6:	f3bf 8f6f 	isb	sy
 80160ba:	f3bf 8f4f 	dsb	sy
 80160be:	60bb      	str	r3, [r7, #8]
}
 80160c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80160c2:	bf00      	nop
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d0fc      	beq.n	80160c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80160ca:	bf00      	nop
 80160cc:	bf00      	nop
 80160ce:	3714      	adds	r7, #20
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	240000a0 	.word	0x240000a0
 80160dc:	00000000 	.word	0x00000000

080160e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80160e0:	4b07      	ldr	r3, [pc, #28]	; (8016100 <pxCurrentTCBConst2>)
 80160e2:	6819      	ldr	r1, [r3, #0]
 80160e4:	6808      	ldr	r0, [r1, #0]
 80160e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ea:	f380 8809 	msr	PSP, r0
 80160ee:	f3bf 8f6f 	isb	sy
 80160f2:	f04f 0000 	mov.w	r0, #0
 80160f6:	f380 8811 	msr	BASEPRI, r0
 80160fa:	4770      	bx	lr
 80160fc:	f3af 8000 	nop.w

08016100 <pxCurrentTCBConst2>:
 8016100:	2400182c 	.word	0x2400182c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016104:	bf00      	nop
 8016106:	bf00      	nop

08016108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016108:	4808      	ldr	r0, [pc, #32]	; (801612c <prvPortStartFirstTask+0x24>)
 801610a:	6800      	ldr	r0, [r0, #0]
 801610c:	6800      	ldr	r0, [r0, #0]
 801610e:	f380 8808 	msr	MSP, r0
 8016112:	f04f 0000 	mov.w	r0, #0
 8016116:	f380 8814 	msr	CONTROL, r0
 801611a:	b662      	cpsie	i
 801611c:	b661      	cpsie	f
 801611e:	f3bf 8f4f 	dsb	sy
 8016122:	f3bf 8f6f 	isb	sy
 8016126:	df00      	svc	0
 8016128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801612a:	bf00      	nop
 801612c:	e000ed08 	.word	0xe000ed08

08016130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b086      	sub	sp, #24
 8016134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016136:	4b46      	ldr	r3, [pc, #280]	; (8016250 <xPortStartScheduler+0x120>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	4a46      	ldr	r2, [pc, #280]	; (8016254 <xPortStartScheduler+0x124>)
 801613c:	4293      	cmp	r3, r2
 801613e:	d10a      	bne.n	8016156 <xPortStartScheduler+0x26>
	__asm volatile
 8016140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016144:	f383 8811 	msr	BASEPRI, r3
 8016148:	f3bf 8f6f 	isb	sy
 801614c:	f3bf 8f4f 	dsb	sy
 8016150:	613b      	str	r3, [r7, #16]
}
 8016152:	bf00      	nop
 8016154:	e7fe      	b.n	8016154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016156:	4b3e      	ldr	r3, [pc, #248]	; (8016250 <xPortStartScheduler+0x120>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4a3f      	ldr	r2, [pc, #252]	; (8016258 <xPortStartScheduler+0x128>)
 801615c:	4293      	cmp	r3, r2
 801615e:	d10a      	bne.n	8016176 <xPortStartScheduler+0x46>
	__asm volatile
 8016160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016164:	f383 8811 	msr	BASEPRI, r3
 8016168:	f3bf 8f6f 	isb	sy
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	60fb      	str	r3, [r7, #12]
}
 8016172:	bf00      	nop
 8016174:	e7fe      	b.n	8016174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016176:	4b39      	ldr	r3, [pc, #228]	; (801625c <xPortStartScheduler+0x12c>)
 8016178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	b2db      	uxtb	r3, r3
 8016180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	22ff      	movs	r2, #255	; 0xff
 8016186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	b2db      	uxtb	r3, r3
 801618e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016190:	78fb      	ldrb	r3, [r7, #3]
 8016192:	b2db      	uxtb	r3, r3
 8016194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016198:	b2da      	uxtb	r2, r3
 801619a:	4b31      	ldr	r3, [pc, #196]	; (8016260 <xPortStartScheduler+0x130>)
 801619c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801619e:	4b31      	ldr	r3, [pc, #196]	; (8016264 <xPortStartScheduler+0x134>)
 80161a0:	2207      	movs	r2, #7
 80161a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161a4:	e009      	b.n	80161ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80161a6:	4b2f      	ldr	r3, [pc, #188]	; (8016264 <xPortStartScheduler+0x134>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	3b01      	subs	r3, #1
 80161ac:	4a2d      	ldr	r2, [pc, #180]	; (8016264 <xPortStartScheduler+0x134>)
 80161ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80161b0:	78fb      	ldrb	r3, [r7, #3]
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	005b      	lsls	r3, r3, #1
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161ba:	78fb      	ldrb	r3, [r7, #3]
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161c2:	2b80      	cmp	r3, #128	; 0x80
 80161c4:	d0ef      	beq.n	80161a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80161c6:	4b27      	ldr	r3, [pc, #156]	; (8016264 <xPortStartScheduler+0x134>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	f1c3 0307 	rsb	r3, r3, #7
 80161ce:	2b04      	cmp	r3, #4
 80161d0:	d00a      	beq.n	80161e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80161d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d6:	f383 8811 	msr	BASEPRI, r3
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	f3bf 8f4f 	dsb	sy
 80161e2:	60bb      	str	r3, [r7, #8]
}
 80161e4:	bf00      	nop
 80161e6:	e7fe      	b.n	80161e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80161e8:	4b1e      	ldr	r3, [pc, #120]	; (8016264 <xPortStartScheduler+0x134>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	021b      	lsls	r3, r3, #8
 80161ee:	4a1d      	ldr	r2, [pc, #116]	; (8016264 <xPortStartScheduler+0x134>)
 80161f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80161f2:	4b1c      	ldr	r3, [pc, #112]	; (8016264 <xPortStartScheduler+0x134>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80161fa:	4a1a      	ldr	r2, [pc, #104]	; (8016264 <xPortStartScheduler+0x134>)
 80161fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	b2da      	uxtb	r2, r3
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016206:	4b18      	ldr	r3, [pc, #96]	; (8016268 <xPortStartScheduler+0x138>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4a17      	ldr	r2, [pc, #92]	; (8016268 <xPortStartScheduler+0x138>)
 801620c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016212:	4b15      	ldr	r3, [pc, #84]	; (8016268 <xPortStartScheduler+0x138>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	4a14      	ldr	r2, [pc, #80]	; (8016268 <xPortStartScheduler+0x138>)
 8016218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801621c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801621e:	f000 f8dd 	bl	80163dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016222:	4b12      	ldr	r3, [pc, #72]	; (801626c <xPortStartScheduler+0x13c>)
 8016224:	2200      	movs	r2, #0
 8016226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016228:	f000 f8fc 	bl	8016424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801622c:	4b10      	ldr	r3, [pc, #64]	; (8016270 <xPortStartScheduler+0x140>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4a0f      	ldr	r2, [pc, #60]	; (8016270 <xPortStartScheduler+0x140>)
 8016232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016238:	f7ff ff66 	bl	8016108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801623c:	f7fe ff7e 	bl	801513c <vTaskSwitchContext>
	prvTaskExitError();
 8016240:	f7ff ff20 	bl	8016084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016244:	2300      	movs	r3, #0
}
 8016246:	4618      	mov	r0, r3
 8016248:	3718      	adds	r7, #24
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	e000ed00 	.word	0xe000ed00
 8016254:	410fc271 	.word	0x410fc271
 8016258:	410fc270 	.word	0x410fc270
 801625c:	e000e400 	.word	0xe000e400
 8016260:	24001e58 	.word	0x24001e58
 8016264:	24001e5c 	.word	0x24001e5c
 8016268:	e000ed20 	.word	0xe000ed20
 801626c:	240000a0 	.word	0x240000a0
 8016270:	e000ef34 	.word	0xe000ef34

08016274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016274:	b480      	push	{r7}
 8016276:	b083      	sub	sp, #12
 8016278:	af00      	add	r7, sp, #0
	__asm volatile
 801627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801627e:	f383 8811 	msr	BASEPRI, r3
 8016282:	f3bf 8f6f 	isb	sy
 8016286:	f3bf 8f4f 	dsb	sy
 801628a:	607b      	str	r3, [r7, #4]
}
 801628c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801628e:	4b0f      	ldr	r3, [pc, #60]	; (80162cc <vPortEnterCritical+0x58>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	3301      	adds	r3, #1
 8016294:	4a0d      	ldr	r2, [pc, #52]	; (80162cc <vPortEnterCritical+0x58>)
 8016296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016298:	4b0c      	ldr	r3, [pc, #48]	; (80162cc <vPortEnterCritical+0x58>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2b01      	cmp	r3, #1
 801629e:	d10f      	bne.n	80162c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80162a0:	4b0b      	ldr	r3, [pc, #44]	; (80162d0 <vPortEnterCritical+0x5c>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d00a      	beq.n	80162c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80162aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ae:	f383 8811 	msr	BASEPRI, r3
 80162b2:	f3bf 8f6f 	isb	sy
 80162b6:	f3bf 8f4f 	dsb	sy
 80162ba:	603b      	str	r3, [r7, #0]
}
 80162bc:	bf00      	nop
 80162be:	e7fe      	b.n	80162be <vPortEnterCritical+0x4a>
	}
}
 80162c0:	bf00      	nop
 80162c2:	370c      	adds	r7, #12
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr
 80162cc:	240000a0 	.word	0x240000a0
 80162d0:	e000ed04 	.word	0xe000ed04

080162d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80162d4:	b480      	push	{r7}
 80162d6:	b083      	sub	sp, #12
 80162d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80162da:	4b12      	ldr	r3, [pc, #72]	; (8016324 <vPortExitCritical+0x50>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d10a      	bne.n	80162f8 <vPortExitCritical+0x24>
	__asm volatile
 80162e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e6:	f383 8811 	msr	BASEPRI, r3
 80162ea:	f3bf 8f6f 	isb	sy
 80162ee:	f3bf 8f4f 	dsb	sy
 80162f2:	607b      	str	r3, [r7, #4]
}
 80162f4:	bf00      	nop
 80162f6:	e7fe      	b.n	80162f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80162f8:	4b0a      	ldr	r3, [pc, #40]	; (8016324 <vPortExitCritical+0x50>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	3b01      	subs	r3, #1
 80162fe:	4a09      	ldr	r2, [pc, #36]	; (8016324 <vPortExitCritical+0x50>)
 8016300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016302:	4b08      	ldr	r3, [pc, #32]	; (8016324 <vPortExitCritical+0x50>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d105      	bne.n	8016316 <vPortExitCritical+0x42>
 801630a:	2300      	movs	r3, #0
 801630c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	f383 8811 	msr	BASEPRI, r3
}
 8016314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016316:	bf00      	nop
 8016318:	370c      	adds	r7, #12
 801631a:	46bd      	mov	sp, r7
 801631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016320:	4770      	bx	lr
 8016322:	bf00      	nop
 8016324:	240000a0 	.word	0x240000a0
	...

08016330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016330:	f3ef 8009 	mrs	r0, PSP
 8016334:	f3bf 8f6f 	isb	sy
 8016338:	4b15      	ldr	r3, [pc, #84]	; (8016390 <pxCurrentTCBConst>)
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	f01e 0f10 	tst.w	lr, #16
 8016340:	bf08      	it	eq
 8016342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634a:	6010      	str	r0, [r2, #0]
 801634c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016354:	f380 8811 	msr	BASEPRI, r0
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	f3bf 8f6f 	isb	sy
 8016360:	f7fe feec 	bl	801513c <vTaskSwitchContext>
 8016364:	f04f 0000 	mov.w	r0, #0
 8016368:	f380 8811 	msr	BASEPRI, r0
 801636c:	bc09      	pop	{r0, r3}
 801636e:	6819      	ldr	r1, [r3, #0]
 8016370:	6808      	ldr	r0, [r1, #0]
 8016372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016376:	f01e 0f10 	tst.w	lr, #16
 801637a:	bf08      	it	eq
 801637c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016380:	f380 8809 	msr	PSP, r0
 8016384:	f3bf 8f6f 	isb	sy
 8016388:	4770      	bx	lr
 801638a:	bf00      	nop
 801638c:	f3af 8000 	nop.w

08016390 <pxCurrentTCBConst>:
 8016390:	2400182c 	.word	0x2400182c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016394:	bf00      	nop
 8016396:	bf00      	nop

08016398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
	__asm volatile
 801639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a2:	f383 8811 	msr	BASEPRI, r3
 80163a6:	f3bf 8f6f 	isb	sy
 80163aa:	f3bf 8f4f 	dsb	sy
 80163ae:	607b      	str	r3, [r7, #4]
}
 80163b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80163b2:	f7fe fe01 	bl	8014fb8 <xTaskIncrementTick>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d003      	beq.n	80163c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80163bc:	4b06      	ldr	r3, [pc, #24]	; (80163d8 <xPortSysTickHandler+0x40>)
 80163be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163c2:	601a      	str	r2, [r3, #0]
 80163c4:	2300      	movs	r3, #0
 80163c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	f383 8811 	msr	BASEPRI, r3
}
 80163ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80163d0:	bf00      	nop
 80163d2:	3708      	adds	r7, #8
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	e000ed04 	.word	0xe000ed04

080163dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80163dc:	b480      	push	{r7}
 80163de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80163e0:	4b0b      	ldr	r3, [pc, #44]	; (8016410 <vPortSetupTimerInterrupt+0x34>)
 80163e2:	2200      	movs	r2, #0
 80163e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80163e6:	4b0b      	ldr	r3, [pc, #44]	; (8016414 <vPortSetupTimerInterrupt+0x38>)
 80163e8:	2200      	movs	r2, #0
 80163ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80163ec:	4b0a      	ldr	r3, [pc, #40]	; (8016418 <vPortSetupTimerInterrupt+0x3c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	4a0a      	ldr	r2, [pc, #40]	; (801641c <vPortSetupTimerInterrupt+0x40>)
 80163f2:	fba2 2303 	umull	r2, r3, r2, r3
 80163f6:	099b      	lsrs	r3, r3, #6
 80163f8:	4a09      	ldr	r2, [pc, #36]	; (8016420 <vPortSetupTimerInterrupt+0x44>)
 80163fa:	3b01      	subs	r3, #1
 80163fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80163fe:	4b04      	ldr	r3, [pc, #16]	; (8016410 <vPortSetupTimerInterrupt+0x34>)
 8016400:	2207      	movs	r2, #7
 8016402:	601a      	str	r2, [r3, #0]
}
 8016404:	bf00      	nop
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
 801640e:	bf00      	nop
 8016410:	e000e010 	.word	0xe000e010
 8016414:	e000e018 	.word	0xe000e018
 8016418:	24000090 	.word	0x24000090
 801641c:	10624dd3 	.word	0x10624dd3
 8016420:	e000e014 	.word	0xe000e014

08016424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016434 <vPortEnableVFP+0x10>
 8016428:	6801      	ldr	r1, [r0, #0]
 801642a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801642e:	6001      	str	r1, [r0, #0]
 8016430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016432:	bf00      	nop
 8016434:	e000ed88 	.word	0xe000ed88

08016438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016438:	b480      	push	{r7}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801643e:	f3ef 8305 	mrs	r3, IPSR
 8016442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2b0f      	cmp	r3, #15
 8016448:	d914      	bls.n	8016474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801644a:	4a17      	ldr	r2, [pc, #92]	; (80164a8 <vPortValidateInterruptPriority+0x70>)
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	4413      	add	r3, r2
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016454:	4b15      	ldr	r3, [pc, #84]	; (80164ac <vPortValidateInterruptPriority+0x74>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	7afa      	ldrb	r2, [r7, #11]
 801645a:	429a      	cmp	r2, r3
 801645c:	d20a      	bcs.n	8016474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016462:	f383 8811 	msr	BASEPRI, r3
 8016466:	f3bf 8f6f 	isb	sy
 801646a:	f3bf 8f4f 	dsb	sy
 801646e:	607b      	str	r3, [r7, #4]
}
 8016470:	bf00      	nop
 8016472:	e7fe      	b.n	8016472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016474:	4b0e      	ldr	r3, [pc, #56]	; (80164b0 <vPortValidateInterruptPriority+0x78>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801647c:	4b0d      	ldr	r3, [pc, #52]	; (80164b4 <vPortValidateInterruptPriority+0x7c>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	429a      	cmp	r2, r3
 8016482:	d90a      	bls.n	801649a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016488:	f383 8811 	msr	BASEPRI, r3
 801648c:	f3bf 8f6f 	isb	sy
 8016490:	f3bf 8f4f 	dsb	sy
 8016494:	603b      	str	r3, [r7, #0]
}
 8016496:	bf00      	nop
 8016498:	e7fe      	b.n	8016498 <vPortValidateInterruptPriority+0x60>
	}
 801649a:	bf00      	nop
 801649c:	3714      	adds	r7, #20
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	e000e3f0 	.word	0xe000e3f0
 80164ac:	24001e58 	.word	0x24001e58
 80164b0:	e000ed0c 	.word	0xe000ed0c
 80164b4:	24001e5c 	.word	0x24001e5c

080164b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b08a      	sub	sp, #40	; 0x28
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80164c0:	2300      	movs	r3, #0
 80164c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80164c4:	f7fe fcbc 	bl	8014e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80164c8:	4b5b      	ldr	r3, [pc, #364]	; (8016638 <pvPortMalloc+0x180>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d101      	bne.n	80164d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80164d0:	f000 f920 	bl	8016714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80164d4:	4b59      	ldr	r3, [pc, #356]	; (801663c <pvPortMalloc+0x184>)
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	4013      	ands	r3, r2
 80164dc:	2b00      	cmp	r3, #0
 80164de:	f040 8093 	bne.w	8016608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d01d      	beq.n	8016524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80164e8:	2208      	movs	r2, #8
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	4413      	add	r3, r2
 80164ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f003 0307 	and.w	r3, r3, #7
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d014      	beq.n	8016524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f023 0307 	bic.w	r3, r3, #7
 8016500:	3308      	adds	r3, #8
 8016502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f003 0307 	and.w	r3, r3, #7
 801650a:	2b00      	cmp	r3, #0
 801650c:	d00a      	beq.n	8016524 <pvPortMalloc+0x6c>
	__asm volatile
 801650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016512:	f383 8811 	msr	BASEPRI, r3
 8016516:	f3bf 8f6f 	isb	sy
 801651a:	f3bf 8f4f 	dsb	sy
 801651e:	617b      	str	r3, [r7, #20]
}
 8016520:	bf00      	nop
 8016522:	e7fe      	b.n	8016522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d06e      	beq.n	8016608 <pvPortMalloc+0x150>
 801652a:	4b45      	ldr	r3, [pc, #276]	; (8016640 <pvPortMalloc+0x188>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	429a      	cmp	r2, r3
 8016532:	d869      	bhi.n	8016608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016534:	4b43      	ldr	r3, [pc, #268]	; (8016644 <pvPortMalloc+0x18c>)
 8016536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016538:	4b42      	ldr	r3, [pc, #264]	; (8016644 <pvPortMalloc+0x18c>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801653e:	e004      	b.n	801654a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	429a      	cmp	r2, r3
 8016552:	d903      	bls.n	801655c <pvPortMalloc+0xa4>
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d1f1      	bne.n	8016540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801655c:	4b36      	ldr	r3, [pc, #216]	; (8016638 <pvPortMalloc+0x180>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016562:	429a      	cmp	r2, r3
 8016564:	d050      	beq.n	8016608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016566:	6a3b      	ldr	r3, [r7, #32]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	2208      	movs	r2, #8
 801656c:	4413      	add	r3, r2
 801656e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	6a3b      	ldr	r3, [r7, #32]
 8016576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657a:	685a      	ldr	r2, [r3, #4]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	1ad2      	subs	r2, r2, r3
 8016580:	2308      	movs	r3, #8
 8016582:	005b      	lsls	r3, r3, #1
 8016584:	429a      	cmp	r2, r3
 8016586:	d91f      	bls.n	80165c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	4413      	add	r3, r2
 801658e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	f003 0307 	and.w	r3, r3, #7
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00a      	beq.n	80165b0 <pvPortMalloc+0xf8>
	__asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	613b      	str	r3, [r7, #16]
}
 80165ac:	bf00      	nop
 80165ae:	e7fe      	b.n	80165ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80165b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b2:	685a      	ldr	r2, [r3, #4]
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	1ad2      	subs	r2, r2, r3
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80165bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165be:	687a      	ldr	r2, [r7, #4]
 80165c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80165c2:	69b8      	ldr	r0, [r7, #24]
 80165c4:	f000 f908 	bl	80167d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80165c8:	4b1d      	ldr	r3, [pc, #116]	; (8016640 <pvPortMalloc+0x188>)
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ce:	685b      	ldr	r3, [r3, #4]
 80165d0:	1ad3      	subs	r3, r2, r3
 80165d2:	4a1b      	ldr	r2, [pc, #108]	; (8016640 <pvPortMalloc+0x188>)
 80165d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80165d6:	4b1a      	ldr	r3, [pc, #104]	; (8016640 <pvPortMalloc+0x188>)
 80165d8:	681a      	ldr	r2, [r3, #0]
 80165da:	4b1b      	ldr	r3, [pc, #108]	; (8016648 <pvPortMalloc+0x190>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	429a      	cmp	r2, r3
 80165e0:	d203      	bcs.n	80165ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80165e2:	4b17      	ldr	r3, [pc, #92]	; (8016640 <pvPortMalloc+0x188>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4a18      	ldr	r2, [pc, #96]	; (8016648 <pvPortMalloc+0x190>)
 80165e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80165ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	4b13      	ldr	r3, [pc, #76]	; (801663c <pvPortMalloc+0x184>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	431a      	orrs	r2, r3
 80165f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80165f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fa:	2200      	movs	r2, #0
 80165fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80165fe:	4b13      	ldr	r3, [pc, #76]	; (801664c <pvPortMalloc+0x194>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	3301      	adds	r3, #1
 8016604:	4a11      	ldr	r2, [pc, #68]	; (801664c <pvPortMalloc+0x194>)
 8016606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016608:	f7fe fc28 	bl	8014e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801660c:	69fb      	ldr	r3, [r7, #28]
 801660e:	f003 0307 	and.w	r3, r3, #7
 8016612:	2b00      	cmp	r3, #0
 8016614:	d00a      	beq.n	801662c <pvPortMalloc+0x174>
	__asm volatile
 8016616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661a:	f383 8811 	msr	BASEPRI, r3
 801661e:	f3bf 8f6f 	isb	sy
 8016622:	f3bf 8f4f 	dsb	sy
 8016626:	60fb      	str	r3, [r7, #12]
}
 8016628:	bf00      	nop
 801662a:	e7fe      	b.n	801662a <pvPortMalloc+0x172>
	return pvReturn;
 801662c:	69fb      	ldr	r3, [r7, #28]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3728      	adds	r7, #40	; 0x28
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	24005a68 	.word	0x24005a68
 801663c:	24005a7c 	.word	0x24005a7c
 8016640:	24005a6c 	.word	0x24005a6c
 8016644:	24005a60 	.word	0x24005a60
 8016648:	24005a70 	.word	0x24005a70
 801664c:	24005a74 	.word	0x24005a74

08016650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d04d      	beq.n	80166fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016662:	2308      	movs	r3, #8
 8016664:	425b      	negs	r3, r3
 8016666:	697a      	ldr	r2, [r7, #20]
 8016668:	4413      	add	r3, r2
 801666a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	685a      	ldr	r2, [r3, #4]
 8016674:	4b24      	ldr	r3, [pc, #144]	; (8016708 <vPortFree+0xb8>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	4013      	ands	r3, r2
 801667a:	2b00      	cmp	r3, #0
 801667c:	d10a      	bne.n	8016694 <vPortFree+0x44>
	__asm volatile
 801667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016682:	f383 8811 	msr	BASEPRI, r3
 8016686:	f3bf 8f6f 	isb	sy
 801668a:	f3bf 8f4f 	dsb	sy
 801668e:	60fb      	str	r3, [r7, #12]
}
 8016690:	bf00      	nop
 8016692:	e7fe      	b.n	8016692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d00a      	beq.n	80166b2 <vPortFree+0x62>
	__asm volatile
 801669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a0:	f383 8811 	msr	BASEPRI, r3
 80166a4:	f3bf 8f6f 	isb	sy
 80166a8:	f3bf 8f4f 	dsb	sy
 80166ac:	60bb      	str	r3, [r7, #8]
}
 80166ae:	bf00      	nop
 80166b0:	e7fe      	b.n	80166b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	685a      	ldr	r2, [r3, #4]
 80166b6:	4b14      	ldr	r3, [pc, #80]	; (8016708 <vPortFree+0xb8>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4013      	ands	r3, r2
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d01e      	beq.n	80166fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d11a      	bne.n	80166fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	685a      	ldr	r2, [r3, #4]
 80166cc:	4b0e      	ldr	r3, [pc, #56]	; (8016708 <vPortFree+0xb8>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	43db      	mvns	r3, r3
 80166d2:	401a      	ands	r2, r3
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80166d8:	f7fe fbb2 	bl	8014e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	685a      	ldr	r2, [r3, #4]
 80166e0:	4b0a      	ldr	r3, [pc, #40]	; (801670c <vPortFree+0xbc>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4413      	add	r3, r2
 80166e6:	4a09      	ldr	r2, [pc, #36]	; (801670c <vPortFree+0xbc>)
 80166e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80166ea:	6938      	ldr	r0, [r7, #16]
 80166ec:	f000 f874 	bl	80167d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80166f0:	4b07      	ldr	r3, [pc, #28]	; (8016710 <vPortFree+0xc0>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	3301      	adds	r3, #1
 80166f6:	4a06      	ldr	r2, [pc, #24]	; (8016710 <vPortFree+0xc0>)
 80166f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80166fa:	f7fe fbaf 	bl	8014e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80166fe:	bf00      	nop
 8016700:	3718      	adds	r7, #24
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	24005a7c 	.word	0x24005a7c
 801670c:	24005a6c 	.word	0x24005a6c
 8016710:	24005a78 	.word	0x24005a78

08016714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016714:	b480      	push	{r7}
 8016716:	b085      	sub	sp, #20
 8016718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801671a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801671e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016720:	4b27      	ldr	r3, [pc, #156]	; (80167c0 <prvHeapInit+0xac>)
 8016722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f003 0307 	and.w	r3, r3, #7
 801672a:	2b00      	cmp	r3, #0
 801672c:	d00c      	beq.n	8016748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	3307      	adds	r3, #7
 8016732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	f023 0307 	bic.w	r3, r3, #7
 801673a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801673c:	68ba      	ldr	r2, [r7, #8]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	4a1f      	ldr	r2, [pc, #124]	; (80167c0 <prvHeapInit+0xac>)
 8016744:	4413      	add	r3, r2
 8016746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801674c:	4a1d      	ldr	r2, [pc, #116]	; (80167c4 <prvHeapInit+0xb0>)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016752:	4b1c      	ldr	r3, [pc, #112]	; (80167c4 <prvHeapInit+0xb0>)
 8016754:	2200      	movs	r2, #0
 8016756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	68ba      	ldr	r2, [r7, #8]
 801675c:	4413      	add	r3, r2
 801675e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016760:	2208      	movs	r2, #8
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	1a9b      	subs	r3, r3, r2
 8016766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	f023 0307 	bic.w	r3, r3, #7
 801676e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	4a15      	ldr	r2, [pc, #84]	; (80167c8 <prvHeapInit+0xb4>)
 8016774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016776:	4b14      	ldr	r3, [pc, #80]	; (80167c8 <prvHeapInit+0xb4>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2200      	movs	r2, #0
 801677c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801677e:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <prvHeapInit+0xb4>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2200      	movs	r2, #0
 8016784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	68fa      	ldr	r2, [r7, #12]
 801678e:	1ad2      	subs	r2, r2, r3
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016794:	4b0c      	ldr	r3, [pc, #48]	; (80167c8 <prvHeapInit+0xb4>)
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	685b      	ldr	r3, [r3, #4]
 80167a0:	4a0a      	ldr	r2, [pc, #40]	; (80167cc <prvHeapInit+0xb8>)
 80167a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4a09      	ldr	r2, [pc, #36]	; (80167d0 <prvHeapInit+0xbc>)
 80167aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80167ac:	4b09      	ldr	r3, [pc, #36]	; (80167d4 <prvHeapInit+0xc0>)
 80167ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80167b2:	601a      	str	r2, [r3, #0]
}
 80167b4:	bf00      	nop
 80167b6:	3714      	adds	r7, #20
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr
 80167c0:	24001e60 	.word	0x24001e60
 80167c4:	24005a60 	.word	0x24005a60
 80167c8:	24005a68 	.word	0x24005a68
 80167cc:	24005a70 	.word	0x24005a70
 80167d0:	24005a6c 	.word	0x24005a6c
 80167d4:	24005a7c 	.word	0x24005a7c

080167d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80167d8:	b480      	push	{r7}
 80167da:	b085      	sub	sp, #20
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80167e0:	4b28      	ldr	r3, [pc, #160]	; (8016884 <prvInsertBlockIntoFreeList+0xac>)
 80167e2:	60fb      	str	r3, [r7, #12]
 80167e4:	e002      	b.n	80167ec <prvInsertBlockIntoFreeList+0x14>
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	60fb      	str	r3, [r7, #12]
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d8f7      	bhi.n	80167e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	68ba      	ldr	r2, [r7, #8]
 8016800:	4413      	add	r3, r2
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	429a      	cmp	r2, r3
 8016806:	d108      	bne.n	801681a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	685a      	ldr	r2, [r3, #4]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	441a      	add	r2, r3
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	68ba      	ldr	r2, [r7, #8]
 8016824:	441a      	add	r2, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	429a      	cmp	r2, r3
 801682c:	d118      	bne.n	8016860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681a      	ldr	r2, [r3, #0]
 8016832:	4b15      	ldr	r3, [pc, #84]	; (8016888 <prvInsertBlockIntoFreeList+0xb0>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	429a      	cmp	r2, r3
 8016838:	d00d      	beq.n	8016856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685a      	ldr	r2, [r3, #4]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	441a      	add	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	601a      	str	r2, [r3, #0]
 8016854:	e008      	b.n	8016868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016856:	4b0c      	ldr	r3, [pc, #48]	; (8016888 <prvInsertBlockIntoFreeList+0xb0>)
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	601a      	str	r2, [r3, #0]
 801685e:	e003      	b.n	8016868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	681a      	ldr	r2, [r3, #0]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016868:	68fa      	ldr	r2, [r7, #12]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	429a      	cmp	r2, r3
 801686e:	d002      	beq.n	8016876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016876:	bf00      	nop
 8016878:	3714      	adds	r7, #20
 801687a:	46bd      	mov	sp, r7
 801687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016880:	4770      	bx	lr
 8016882:	bf00      	nop
 8016884:	24005a60 	.word	0x24005a60
 8016888:	24005a68 	.word	0x24005a68

0801688c <__errno>:
 801688c:	4b01      	ldr	r3, [pc, #4]	; (8016894 <__errno+0x8>)
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	4770      	bx	lr
 8016892:	bf00      	nop
 8016894:	240000a4 	.word	0x240000a4

08016898 <__libc_init_array>:
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	4d0d      	ldr	r5, [pc, #52]	; (80168d0 <__libc_init_array+0x38>)
 801689c:	4c0d      	ldr	r4, [pc, #52]	; (80168d4 <__libc_init_array+0x3c>)
 801689e:	1b64      	subs	r4, r4, r5
 80168a0:	10a4      	asrs	r4, r4, #2
 80168a2:	2600      	movs	r6, #0
 80168a4:	42a6      	cmp	r6, r4
 80168a6:	d109      	bne.n	80168bc <__libc_init_array+0x24>
 80168a8:	4d0b      	ldr	r5, [pc, #44]	; (80168d8 <__libc_init_array+0x40>)
 80168aa:	4c0c      	ldr	r4, [pc, #48]	; (80168dc <__libc_init_array+0x44>)
 80168ac:	f000 fd3c 	bl	8017328 <_init>
 80168b0:	1b64      	subs	r4, r4, r5
 80168b2:	10a4      	asrs	r4, r4, #2
 80168b4:	2600      	movs	r6, #0
 80168b6:	42a6      	cmp	r6, r4
 80168b8:	d105      	bne.n	80168c6 <__libc_init_array+0x2e>
 80168ba:	bd70      	pop	{r4, r5, r6, pc}
 80168bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80168c0:	4798      	blx	r3
 80168c2:	3601      	adds	r6, #1
 80168c4:	e7ee      	b.n	80168a4 <__libc_init_array+0xc>
 80168c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80168ca:	4798      	blx	r3
 80168cc:	3601      	adds	r6, #1
 80168ce:	e7f2      	b.n	80168b6 <__libc_init_array+0x1e>
 80168d0:	0801778c 	.word	0x0801778c
 80168d4:	0801778c 	.word	0x0801778c
 80168d8:	0801778c 	.word	0x0801778c
 80168dc:	08017790 	.word	0x08017790

080168e0 <malloc>:
 80168e0:	4b02      	ldr	r3, [pc, #8]	; (80168ec <malloc+0xc>)
 80168e2:	4601      	mov	r1, r0
 80168e4:	6818      	ldr	r0, [r3, #0]
 80168e6:	f000 b88d 	b.w	8016a04 <_malloc_r>
 80168ea:	bf00      	nop
 80168ec:	240000a4 	.word	0x240000a4

080168f0 <free>:
 80168f0:	4b02      	ldr	r3, [pc, #8]	; (80168fc <free+0xc>)
 80168f2:	4601      	mov	r1, r0
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	f000 b819 	b.w	801692c <_free_r>
 80168fa:	bf00      	nop
 80168fc:	240000a4 	.word	0x240000a4

08016900 <memcpy>:
 8016900:	440a      	add	r2, r1
 8016902:	4291      	cmp	r1, r2
 8016904:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016908:	d100      	bne.n	801690c <memcpy+0xc>
 801690a:	4770      	bx	lr
 801690c:	b510      	push	{r4, lr}
 801690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016916:	4291      	cmp	r1, r2
 8016918:	d1f9      	bne.n	801690e <memcpy+0xe>
 801691a:	bd10      	pop	{r4, pc}

0801691c <memset>:
 801691c:	4402      	add	r2, r0
 801691e:	4603      	mov	r3, r0
 8016920:	4293      	cmp	r3, r2
 8016922:	d100      	bne.n	8016926 <memset+0xa>
 8016924:	4770      	bx	lr
 8016926:	f803 1b01 	strb.w	r1, [r3], #1
 801692a:	e7f9      	b.n	8016920 <memset+0x4>

0801692c <_free_r>:
 801692c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801692e:	2900      	cmp	r1, #0
 8016930:	d044      	beq.n	80169bc <_free_r+0x90>
 8016932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016936:	9001      	str	r0, [sp, #4]
 8016938:	2b00      	cmp	r3, #0
 801693a:	f1a1 0404 	sub.w	r4, r1, #4
 801693e:	bfb8      	it	lt
 8016940:	18e4      	addlt	r4, r4, r3
 8016942:	f000 fc39 	bl	80171b8 <__malloc_lock>
 8016946:	4a1e      	ldr	r2, [pc, #120]	; (80169c0 <_free_r+0x94>)
 8016948:	9801      	ldr	r0, [sp, #4]
 801694a:	6813      	ldr	r3, [r2, #0]
 801694c:	b933      	cbnz	r3, 801695c <_free_r+0x30>
 801694e:	6063      	str	r3, [r4, #4]
 8016950:	6014      	str	r4, [r2, #0]
 8016952:	b003      	add	sp, #12
 8016954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016958:	f000 bc34 	b.w	80171c4 <__malloc_unlock>
 801695c:	42a3      	cmp	r3, r4
 801695e:	d908      	bls.n	8016972 <_free_r+0x46>
 8016960:	6825      	ldr	r5, [r4, #0]
 8016962:	1961      	adds	r1, r4, r5
 8016964:	428b      	cmp	r3, r1
 8016966:	bf01      	itttt	eq
 8016968:	6819      	ldreq	r1, [r3, #0]
 801696a:	685b      	ldreq	r3, [r3, #4]
 801696c:	1949      	addeq	r1, r1, r5
 801696e:	6021      	streq	r1, [r4, #0]
 8016970:	e7ed      	b.n	801694e <_free_r+0x22>
 8016972:	461a      	mov	r2, r3
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	b10b      	cbz	r3, 801697c <_free_r+0x50>
 8016978:	42a3      	cmp	r3, r4
 801697a:	d9fa      	bls.n	8016972 <_free_r+0x46>
 801697c:	6811      	ldr	r1, [r2, #0]
 801697e:	1855      	adds	r5, r2, r1
 8016980:	42a5      	cmp	r5, r4
 8016982:	d10b      	bne.n	801699c <_free_r+0x70>
 8016984:	6824      	ldr	r4, [r4, #0]
 8016986:	4421      	add	r1, r4
 8016988:	1854      	adds	r4, r2, r1
 801698a:	42a3      	cmp	r3, r4
 801698c:	6011      	str	r1, [r2, #0]
 801698e:	d1e0      	bne.n	8016952 <_free_r+0x26>
 8016990:	681c      	ldr	r4, [r3, #0]
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	6053      	str	r3, [r2, #4]
 8016996:	4421      	add	r1, r4
 8016998:	6011      	str	r1, [r2, #0]
 801699a:	e7da      	b.n	8016952 <_free_r+0x26>
 801699c:	d902      	bls.n	80169a4 <_free_r+0x78>
 801699e:	230c      	movs	r3, #12
 80169a0:	6003      	str	r3, [r0, #0]
 80169a2:	e7d6      	b.n	8016952 <_free_r+0x26>
 80169a4:	6825      	ldr	r5, [r4, #0]
 80169a6:	1961      	adds	r1, r4, r5
 80169a8:	428b      	cmp	r3, r1
 80169aa:	bf04      	itt	eq
 80169ac:	6819      	ldreq	r1, [r3, #0]
 80169ae:	685b      	ldreq	r3, [r3, #4]
 80169b0:	6063      	str	r3, [r4, #4]
 80169b2:	bf04      	itt	eq
 80169b4:	1949      	addeq	r1, r1, r5
 80169b6:	6021      	streq	r1, [r4, #0]
 80169b8:	6054      	str	r4, [r2, #4]
 80169ba:	e7ca      	b.n	8016952 <_free_r+0x26>
 80169bc:	b003      	add	sp, #12
 80169be:	bd30      	pop	{r4, r5, pc}
 80169c0:	24005a80 	.word	0x24005a80

080169c4 <sbrk_aligned>:
 80169c4:	b570      	push	{r4, r5, r6, lr}
 80169c6:	4e0e      	ldr	r6, [pc, #56]	; (8016a00 <sbrk_aligned+0x3c>)
 80169c8:	460c      	mov	r4, r1
 80169ca:	6831      	ldr	r1, [r6, #0]
 80169cc:	4605      	mov	r5, r0
 80169ce:	b911      	cbnz	r1, 80169d6 <sbrk_aligned+0x12>
 80169d0:	f000 f902 	bl	8016bd8 <_sbrk_r>
 80169d4:	6030      	str	r0, [r6, #0]
 80169d6:	4621      	mov	r1, r4
 80169d8:	4628      	mov	r0, r5
 80169da:	f000 f8fd 	bl	8016bd8 <_sbrk_r>
 80169de:	1c43      	adds	r3, r0, #1
 80169e0:	d00a      	beq.n	80169f8 <sbrk_aligned+0x34>
 80169e2:	1cc4      	adds	r4, r0, #3
 80169e4:	f024 0403 	bic.w	r4, r4, #3
 80169e8:	42a0      	cmp	r0, r4
 80169ea:	d007      	beq.n	80169fc <sbrk_aligned+0x38>
 80169ec:	1a21      	subs	r1, r4, r0
 80169ee:	4628      	mov	r0, r5
 80169f0:	f000 f8f2 	bl	8016bd8 <_sbrk_r>
 80169f4:	3001      	adds	r0, #1
 80169f6:	d101      	bne.n	80169fc <sbrk_aligned+0x38>
 80169f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80169fc:	4620      	mov	r0, r4
 80169fe:	bd70      	pop	{r4, r5, r6, pc}
 8016a00:	24005a84 	.word	0x24005a84

08016a04 <_malloc_r>:
 8016a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a08:	1ccd      	adds	r5, r1, #3
 8016a0a:	f025 0503 	bic.w	r5, r5, #3
 8016a0e:	3508      	adds	r5, #8
 8016a10:	2d0c      	cmp	r5, #12
 8016a12:	bf38      	it	cc
 8016a14:	250c      	movcc	r5, #12
 8016a16:	2d00      	cmp	r5, #0
 8016a18:	4607      	mov	r7, r0
 8016a1a:	db01      	blt.n	8016a20 <_malloc_r+0x1c>
 8016a1c:	42a9      	cmp	r1, r5
 8016a1e:	d905      	bls.n	8016a2c <_malloc_r+0x28>
 8016a20:	230c      	movs	r3, #12
 8016a22:	603b      	str	r3, [r7, #0]
 8016a24:	2600      	movs	r6, #0
 8016a26:	4630      	mov	r0, r6
 8016a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a2c:	4e2e      	ldr	r6, [pc, #184]	; (8016ae8 <_malloc_r+0xe4>)
 8016a2e:	f000 fbc3 	bl	80171b8 <__malloc_lock>
 8016a32:	6833      	ldr	r3, [r6, #0]
 8016a34:	461c      	mov	r4, r3
 8016a36:	bb34      	cbnz	r4, 8016a86 <_malloc_r+0x82>
 8016a38:	4629      	mov	r1, r5
 8016a3a:	4638      	mov	r0, r7
 8016a3c:	f7ff ffc2 	bl	80169c4 <sbrk_aligned>
 8016a40:	1c43      	adds	r3, r0, #1
 8016a42:	4604      	mov	r4, r0
 8016a44:	d14d      	bne.n	8016ae2 <_malloc_r+0xde>
 8016a46:	6834      	ldr	r4, [r6, #0]
 8016a48:	4626      	mov	r6, r4
 8016a4a:	2e00      	cmp	r6, #0
 8016a4c:	d140      	bne.n	8016ad0 <_malloc_r+0xcc>
 8016a4e:	6823      	ldr	r3, [r4, #0]
 8016a50:	4631      	mov	r1, r6
 8016a52:	4638      	mov	r0, r7
 8016a54:	eb04 0803 	add.w	r8, r4, r3
 8016a58:	f000 f8be 	bl	8016bd8 <_sbrk_r>
 8016a5c:	4580      	cmp	r8, r0
 8016a5e:	d13a      	bne.n	8016ad6 <_malloc_r+0xd2>
 8016a60:	6821      	ldr	r1, [r4, #0]
 8016a62:	3503      	adds	r5, #3
 8016a64:	1a6d      	subs	r5, r5, r1
 8016a66:	f025 0503 	bic.w	r5, r5, #3
 8016a6a:	3508      	adds	r5, #8
 8016a6c:	2d0c      	cmp	r5, #12
 8016a6e:	bf38      	it	cc
 8016a70:	250c      	movcc	r5, #12
 8016a72:	4629      	mov	r1, r5
 8016a74:	4638      	mov	r0, r7
 8016a76:	f7ff ffa5 	bl	80169c4 <sbrk_aligned>
 8016a7a:	3001      	adds	r0, #1
 8016a7c:	d02b      	beq.n	8016ad6 <_malloc_r+0xd2>
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	442b      	add	r3, r5
 8016a82:	6023      	str	r3, [r4, #0]
 8016a84:	e00e      	b.n	8016aa4 <_malloc_r+0xa0>
 8016a86:	6822      	ldr	r2, [r4, #0]
 8016a88:	1b52      	subs	r2, r2, r5
 8016a8a:	d41e      	bmi.n	8016aca <_malloc_r+0xc6>
 8016a8c:	2a0b      	cmp	r2, #11
 8016a8e:	d916      	bls.n	8016abe <_malloc_r+0xba>
 8016a90:	1961      	adds	r1, r4, r5
 8016a92:	42a3      	cmp	r3, r4
 8016a94:	6025      	str	r5, [r4, #0]
 8016a96:	bf18      	it	ne
 8016a98:	6059      	strne	r1, [r3, #4]
 8016a9a:	6863      	ldr	r3, [r4, #4]
 8016a9c:	bf08      	it	eq
 8016a9e:	6031      	streq	r1, [r6, #0]
 8016aa0:	5162      	str	r2, [r4, r5]
 8016aa2:	604b      	str	r3, [r1, #4]
 8016aa4:	4638      	mov	r0, r7
 8016aa6:	f104 060b 	add.w	r6, r4, #11
 8016aaa:	f000 fb8b 	bl	80171c4 <__malloc_unlock>
 8016aae:	f026 0607 	bic.w	r6, r6, #7
 8016ab2:	1d23      	adds	r3, r4, #4
 8016ab4:	1af2      	subs	r2, r6, r3
 8016ab6:	d0b6      	beq.n	8016a26 <_malloc_r+0x22>
 8016ab8:	1b9b      	subs	r3, r3, r6
 8016aba:	50a3      	str	r3, [r4, r2]
 8016abc:	e7b3      	b.n	8016a26 <_malloc_r+0x22>
 8016abe:	6862      	ldr	r2, [r4, #4]
 8016ac0:	42a3      	cmp	r3, r4
 8016ac2:	bf0c      	ite	eq
 8016ac4:	6032      	streq	r2, [r6, #0]
 8016ac6:	605a      	strne	r2, [r3, #4]
 8016ac8:	e7ec      	b.n	8016aa4 <_malloc_r+0xa0>
 8016aca:	4623      	mov	r3, r4
 8016acc:	6864      	ldr	r4, [r4, #4]
 8016ace:	e7b2      	b.n	8016a36 <_malloc_r+0x32>
 8016ad0:	4634      	mov	r4, r6
 8016ad2:	6876      	ldr	r6, [r6, #4]
 8016ad4:	e7b9      	b.n	8016a4a <_malloc_r+0x46>
 8016ad6:	230c      	movs	r3, #12
 8016ad8:	603b      	str	r3, [r7, #0]
 8016ada:	4638      	mov	r0, r7
 8016adc:	f000 fb72 	bl	80171c4 <__malloc_unlock>
 8016ae0:	e7a1      	b.n	8016a26 <_malloc_r+0x22>
 8016ae2:	6025      	str	r5, [r4, #0]
 8016ae4:	e7de      	b.n	8016aa4 <_malloc_r+0xa0>
 8016ae6:	bf00      	nop
 8016ae8:	24005a80 	.word	0x24005a80

08016aec <_puts_r>:
 8016aec:	b570      	push	{r4, r5, r6, lr}
 8016aee:	460e      	mov	r6, r1
 8016af0:	4605      	mov	r5, r0
 8016af2:	b118      	cbz	r0, 8016afc <_puts_r+0x10>
 8016af4:	6983      	ldr	r3, [r0, #24]
 8016af6:	b90b      	cbnz	r3, 8016afc <_puts_r+0x10>
 8016af8:	f000 fa58 	bl	8016fac <__sinit>
 8016afc:	69ab      	ldr	r3, [r5, #24]
 8016afe:	68ac      	ldr	r4, [r5, #8]
 8016b00:	b913      	cbnz	r3, 8016b08 <_puts_r+0x1c>
 8016b02:	4628      	mov	r0, r5
 8016b04:	f000 fa52 	bl	8016fac <__sinit>
 8016b08:	4b2c      	ldr	r3, [pc, #176]	; (8016bbc <_puts_r+0xd0>)
 8016b0a:	429c      	cmp	r4, r3
 8016b0c:	d120      	bne.n	8016b50 <_puts_r+0x64>
 8016b0e:	686c      	ldr	r4, [r5, #4]
 8016b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b12:	07db      	lsls	r3, r3, #31
 8016b14:	d405      	bmi.n	8016b22 <_puts_r+0x36>
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	0598      	lsls	r0, r3, #22
 8016b1a:	d402      	bmi.n	8016b22 <_puts_r+0x36>
 8016b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b1e:	f000 fae3 	bl	80170e8 <__retarget_lock_acquire_recursive>
 8016b22:	89a3      	ldrh	r3, [r4, #12]
 8016b24:	0719      	lsls	r1, r3, #28
 8016b26:	d51d      	bpl.n	8016b64 <_puts_r+0x78>
 8016b28:	6923      	ldr	r3, [r4, #16]
 8016b2a:	b1db      	cbz	r3, 8016b64 <_puts_r+0x78>
 8016b2c:	3e01      	subs	r6, #1
 8016b2e:	68a3      	ldr	r3, [r4, #8]
 8016b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b34:	3b01      	subs	r3, #1
 8016b36:	60a3      	str	r3, [r4, #8]
 8016b38:	bb39      	cbnz	r1, 8016b8a <_puts_r+0x9e>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	da38      	bge.n	8016bb0 <_puts_r+0xc4>
 8016b3e:	4622      	mov	r2, r4
 8016b40:	210a      	movs	r1, #10
 8016b42:	4628      	mov	r0, r5
 8016b44:	f000 f858 	bl	8016bf8 <__swbuf_r>
 8016b48:	3001      	adds	r0, #1
 8016b4a:	d011      	beq.n	8016b70 <_puts_r+0x84>
 8016b4c:	250a      	movs	r5, #10
 8016b4e:	e011      	b.n	8016b74 <_puts_r+0x88>
 8016b50:	4b1b      	ldr	r3, [pc, #108]	; (8016bc0 <_puts_r+0xd4>)
 8016b52:	429c      	cmp	r4, r3
 8016b54:	d101      	bne.n	8016b5a <_puts_r+0x6e>
 8016b56:	68ac      	ldr	r4, [r5, #8]
 8016b58:	e7da      	b.n	8016b10 <_puts_r+0x24>
 8016b5a:	4b1a      	ldr	r3, [pc, #104]	; (8016bc4 <_puts_r+0xd8>)
 8016b5c:	429c      	cmp	r4, r3
 8016b5e:	bf08      	it	eq
 8016b60:	68ec      	ldreq	r4, [r5, #12]
 8016b62:	e7d5      	b.n	8016b10 <_puts_r+0x24>
 8016b64:	4621      	mov	r1, r4
 8016b66:	4628      	mov	r0, r5
 8016b68:	f000 f898 	bl	8016c9c <__swsetup_r>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	d0dd      	beq.n	8016b2c <_puts_r+0x40>
 8016b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b76:	07da      	lsls	r2, r3, #31
 8016b78:	d405      	bmi.n	8016b86 <_puts_r+0x9a>
 8016b7a:	89a3      	ldrh	r3, [r4, #12]
 8016b7c:	059b      	lsls	r3, r3, #22
 8016b7e:	d402      	bmi.n	8016b86 <_puts_r+0x9a>
 8016b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b82:	f000 fab2 	bl	80170ea <__retarget_lock_release_recursive>
 8016b86:	4628      	mov	r0, r5
 8016b88:	bd70      	pop	{r4, r5, r6, pc}
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	da04      	bge.n	8016b98 <_puts_r+0xac>
 8016b8e:	69a2      	ldr	r2, [r4, #24]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	dc06      	bgt.n	8016ba2 <_puts_r+0xb6>
 8016b94:	290a      	cmp	r1, #10
 8016b96:	d004      	beq.n	8016ba2 <_puts_r+0xb6>
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	1c5a      	adds	r2, r3, #1
 8016b9c:	6022      	str	r2, [r4, #0]
 8016b9e:	7019      	strb	r1, [r3, #0]
 8016ba0:	e7c5      	b.n	8016b2e <_puts_r+0x42>
 8016ba2:	4622      	mov	r2, r4
 8016ba4:	4628      	mov	r0, r5
 8016ba6:	f000 f827 	bl	8016bf8 <__swbuf_r>
 8016baa:	3001      	adds	r0, #1
 8016bac:	d1bf      	bne.n	8016b2e <_puts_r+0x42>
 8016bae:	e7df      	b.n	8016b70 <_puts_r+0x84>
 8016bb0:	6823      	ldr	r3, [r4, #0]
 8016bb2:	250a      	movs	r5, #10
 8016bb4:	1c5a      	adds	r2, r3, #1
 8016bb6:	6022      	str	r2, [r4, #0]
 8016bb8:	701d      	strb	r5, [r3, #0]
 8016bba:	e7db      	b.n	8016b74 <_puts_r+0x88>
 8016bbc:	08017744 	.word	0x08017744
 8016bc0:	08017764 	.word	0x08017764
 8016bc4:	08017724 	.word	0x08017724

08016bc8 <puts>:
 8016bc8:	4b02      	ldr	r3, [pc, #8]	; (8016bd4 <puts+0xc>)
 8016bca:	4601      	mov	r1, r0
 8016bcc:	6818      	ldr	r0, [r3, #0]
 8016bce:	f7ff bf8d 	b.w	8016aec <_puts_r>
 8016bd2:	bf00      	nop
 8016bd4:	240000a4 	.word	0x240000a4

08016bd8 <_sbrk_r>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	4d06      	ldr	r5, [pc, #24]	; (8016bf4 <_sbrk_r+0x1c>)
 8016bdc:	2300      	movs	r3, #0
 8016bde:	4604      	mov	r4, r0
 8016be0:	4608      	mov	r0, r1
 8016be2:	602b      	str	r3, [r5, #0]
 8016be4:	f7ec ffd0 	bl	8003b88 <_sbrk>
 8016be8:	1c43      	adds	r3, r0, #1
 8016bea:	d102      	bne.n	8016bf2 <_sbrk_r+0x1a>
 8016bec:	682b      	ldr	r3, [r5, #0]
 8016bee:	b103      	cbz	r3, 8016bf2 <_sbrk_r+0x1a>
 8016bf0:	6023      	str	r3, [r4, #0]
 8016bf2:	bd38      	pop	{r3, r4, r5, pc}
 8016bf4:	24005a8c 	.word	0x24005a8c

08016bf8 <__swbuf_r>:
 8016bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bfa:	460e      	mov	r6, r1
 8016bfc:	4614      	mov	r4, r2
 8016bfe:	4605      	mov	r5, r0
 8016c00:	b118      	cbz	r0, 8016c0a <__swbuf_r+0x12>
 8016c02:	6983      	ldr	r3, [r0, #24]
 8016c04:	b90b      	cbnz	r3, 8016c0a <__swbuf_r+0x12>
 8016c06:	f000 f9d1 	bl	8016fac <__sinit>
 8016c0a:	4b21      	ldr	r3, [pc, #132]	; (8016c90 <__swbuf_r+0x98>)
 8016c0c:	429c      	cmp	r4, r3
 8016c0e:	d12b      	bne.n	8016c68 <__swbuf_r+0x70>
 8016c10:	686c      	ldr	r4, [r5, #4]
 8016c12:	69a3      	ldr	r3, [r4, #24]
 8016c14:	60a3      	str	r3, [r4, #8]
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	071a      	lsls	r2, r3, #28
 8016c1a:	d52f      	bpl.n	8016c7c <__swbuf_r+0x84>
 8016c1c:	6923      	ldr	r3, [r4, #16]
 8016c1e:	b36b      	cbz	r3, 8016c7c <__swbuf_r+0x84>
 8016c20:	6923      	ldr	r3, [r4, #16]
 8016c22:	6820      	ldr	r0, [r4, #0]
 8016c24:	1ac0      	subs	r0, r0, r3
 8016c26:	6963      	ldr	r3, [r4, #20]
 8016c28:	b2f6      	uxtb	r6, r6
 8016c2a:	4283      	cmp	r3, r0
 8016c2c:	4637      	mov	r7, r6
 8016c2e:	dc04      	bgt.n	8016c3a <__swbuf_r+0x42>
 8016c30:	4621      	mov	r1, r4
 8016c32:	4628      	mov	r0, r5
 8016c34:	f000 f926 	bl	8016e84 <_fflush_r>
 8016c38:	bb30      	cbnz	r0, 8016c88 <__swbuf_r+0x90>
 8016c3a:	68a3      	ldr	r3, [r4, #8]
 8016c3c:	3b01      	subs	r3, #1
 8016c3e:	60a3      	str	r3, [r4, #8]
 8016c40:	6823      	ldr	r3, [r4, #0]
 8016c42:	1c5a      	adds	r2, r3, #1
 8016c44:	6022      	str	r2, [r4, #0]
 8016c46:	701e      	strb	r6, [r3, #0]
 8016c48:	6963      	ldr	r3, [r4, #20]
 8016c4a:	3001      	adds	r0, #1
 8016c4c:	4283      	cmp	r3, r0
 8016c4e:	d004      	beq.n	8016c5a <__swbuf_r+0x62>
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	07db      	lsls	r3, r3, #31
 8016c54:	d506      	bpl.n	8016c64 <__swbuf_r+0x6c>
 8016c56:	2e0a      	cmp	r6, #10
 8016c58:	d104      	bne.n	8016c64 <__swbuf_r+0x6c>
 8016c5a:	4621      	mov	r1, r4
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	f000 f911 	bl	8016e84 <_fflush_r>
 8016c62:	b988      	cbnz	r0, 8016c88 <__swbuf_r+0x90>
 8016c64:	4638      	mov	r0, r7
 8016c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c68:	4b0a      	ldr	r3, [pc, #40]	; (8016c94 <__swbuf_r+0x9c>)
 8016c6a:	429c      	cmp	r4, r3
 8016c6c:	d101      	bne.n	8016c72 <__swbuf_r+0x7a>
 8016c6e:	68ac      	ldr	r4, [r5, #8]
 8016c70:	e7cf      	b.n	8016c12 <__swbuf_r+0x1a>
 8016c72:	4b09      	ldr	r3, [pc, #36]	; (8016c98 <__swbuf_r+0xa0>)
 8016c74:	429c      	cmp	r4, r3
 8016c76:	bf08      	it	eq
 8016c78:	68ec      	ldreq	r4, [r5, #12]
 8016c7a:	e7ca      	b.n	8016c12 <__swbuf_r+0x1a>
 8016c7c:	4621      	mov	r1, r4
 8016c7e:	4628      	mov	r0, r5
 8016c80:	f000 f80c 	bl	8016c9c <__swsetup_r>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d0cb      	beq.n	8016c20 <__swbuf_r+0x28>
 8016c88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016c8c:	e7ea      	b.n	8016c64 <__swbuf_r+0x6c>
 8016c8e:	bf00      	nop
 8016c90:	08017744 	.word	0x08017744
 8016c94:	08017764 	.word	0x08017764
 8016c98:	08017724 	.word	0x08017724

08016c9c <__swsetup_r>:
 8016c9c:	4b32      	ldr	r3, [pc, #200]	; (8016d68 <__swsetup_r+0xcc>)
 8016c9e:	b570      	push	{r4, r5, r6, lr}
 8016ca0:	681d      	ldr	r5, [r3, #0]
 8016ca2:	4606      	mov	r6, r0
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	b125      	cbz	r5, 8016cb2 <__swsetup_r+0x16>
 8016ca8:	69ab      	ldr	r3, [r5, #24]
 8016caa:	b913      	cbnz	r3, 8016cb2 <__swsetup_r+0x16>
 8016cac:	4628      	mov	r0, r5
 8016cae:	f000 f97d 	bl	8016fac <__sinit>
 8016cb2:	4b2e      	ldr	r3, [pc, #184]	; (8016d6c <__swsetup_r+0xd0>)
 8016cb4:	429c      	cmp	r4, r3
 8016cb6:	d10f      	bne.n	8016cd8 <__swsetup_r+0x3c>
 8016cb8:	686c      	ldr	r4, [r5, #4]
 8016cba:	89a3      	ldrh	r3, [r4, #12]
 8016cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cc0:	0719      	lsls	r1, r3, #28
 8016cc2:	d42c      	bmi.n	8016d1e <__swsetup_r+0x82>
 8016cc4:	06dd      	lsls	r5, r3, #27
 8016cc6:	d411      	bmi.n	8016cec <__swsetup_r+0x50>
 8016cc8:	2309      	movs	r3, #9
 8016cca:	6033      	str	r3, [r6, #0]
 8016ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016cd0:	81a3      	strh	r3, [r4, #12]
 8016cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cd6:	e03e      	b.n	8016d56 <__swsetup_r+0xba>
 8016cd8:	4b25      	ldr	r3, [pc, #148]	; (8016d70 <__swsetup_r+0xd4>)
 8016cda:	429c      	cmp	r4, r3
 8016cdc:	d101      	bne.n	8016ce2 <__swsetup_r+0x46>
 8016cde:	68ac      	ldr	r4, [r5, #8]
 8016ce0:	e7eb      	b.n	8016cba <__swsetup_r+0x1e>
 8016ce2:	4b24      	ldr	r3, [pc, #144]	; (8016d74 <__swsetup_r+0xd8>)
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	bf08      	it	eq
 8016ce8:	68ec      	ldreq	r4, [r5, #12]
 8016cea:	e7e6      	b.n	8016cba <__swsetup_r+0x1e>
 8016cec:	0758      	lsls	r0, r3, #29
 8016cee:	d512      	bpl.n	8016d16 <__swsetup_r+0x7a>
 8016cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cf2:	b141      	cbz	r1, 8016d06 <__swsetup_r+0x6a>
 8016cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cf8:	4299      	cmp	r1, r3
 8016cfa:	d002      	beq.n	8016d02 <__swsetup_r+0x66>
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f7ff fe15 	bl	801692c <_free_r>
 8016d02:	2300      	movs	r3, #0
 8016d04:	6363      	str	r3, [r4, #52]	; 0x34
 8016d06:	89a3      	ldrh	r3, [r4, #12]
 8016d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d0c:	81a3      	strh	r3, [r4, #12]
 8016d0e:	2300      	movs	r3, #0
 8016d10:	6063      	str	r3, [r4, #4]
 8016d12:	6923      	ldr	r3, [r4, #16]
 8016d14:	6023      	str	r3, [r4, #0]
 8016d16:	89a3      	ldrh	r3, [r4, #12]
 8016d18:	f043 0308 	orr.w	r3, r3, #8
 8016d1c:	81a3      	strh	r3, [r4, #12]
 8016d1e:	6923      	ldr	r3, [r4, #16]
 8016d20:	b94b      	cbnz	r3, 8016d36 <__swsetup_r+0x9a>
 8016d22:	89a3      	ldrh	r3, [r4, #12]
 8016d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d2c:	d003      	beq.n	8016d36 <__swsetup_r+0x9a>
 8016d2e:	4621      	mov	r1, r4
 8016d30:	4630      	mov	r0, r6
 8016d32:	f000 fa01 	bl	8017138 <__smakebuf_r>
 8016d36:	89a0      	ldrh	r0, [r4, #12]
 8016d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d3c:	f010 0301 	ands.w	r3, r0, #1
 8016d40:	d00a      	beq.n	8016d58 <__swsetup_r+0xbc>
 8016d42:	2300      	movs	r3, #0
 8016d44:	60a3      	str	r3, [r4, #8]
 8016d46:	6963      	ldr	r3, [r4, #20]
 8016d48:	425b      	negs	r3, r3
 8016d4a:	61a3      	str	r3, [r4, #24]
 8016d4c:	6923      	ldr	r3, [r4, #16]
 8016d4e:	b943      	cbnz	r3, 8016d62 <__swsetup_r+0xc6>
 8016d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d54:	d1ba      	bne.n	8016ccc <__swsetup_r+0x30>
 8016d56:	bd70      	pop	{r4, r5, r6, pc}
 8016d58:	0781      	lsls	r1, r0, #30
 8016d5a:	bf58      	it	pl
 8016d5c:	6963      	ldrpl	r3, [r4, #20]
 8016d5e:	60a3      	str	r3, [r4, #8]
 8016d60:	e7f4      	b.n	8016d4c <__swsetup_r+0xb0>
 8016d62:	2000      	movs	r0, #0
 8016d64:	e7f7      	b.n	8016d56 <__swsetup_r+0xba>
 8016d66:	bf00      	nop
 8016d68:	240000a4 	.word	0x240000a4
 8016d6c:	08017744 	.word	0x08017744
 8016d70:	08017764 	.word	0x08017764
 8016d74:	08017724 	.word	0x08017724

08016d78 <__sflush_r>:
 8016d78:	898a      	ldrh	r2, [r1, #12]
 8016d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d7e:	4605      	mov	r5, r0
 8016d80:	0710      	lsls	r0, r2, #28
 8016d82:	460c      	mov	r4, r1
 8016d84:	d458      	bmi.n	8016e38 <__sflush_r+0xc0>
 8016d86:	684b      	ldr	r3, [r1, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	dc05      	bgt.n	8016d98 <__sflush_r+0x20>
 8016d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	dc02      	bgt.n	8016d98 <__sflush_r+0x20>
 8016d92:	2000      	movs	r0, #0
 8016d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d9a:	2e00      	cmp	r6, #0
 8016d9c:	d0f9      	beq.n	8016d92 <__sflush_r+0x1a>
 8016d9e:	2300      	movs	r3, #0
 8016da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016da4:	682f      	ldr	r7, [r5, #0]
 8016da6:	602b      	str	r3, [r5, #0]
 8016da8:	d032      	beq.n	8016e10 <__sflush_r+0x98>
 8016daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016dac:	89a3      	ldrh	r3, [r4, #12]
 8016dae:	075a      	lsls	r2, r3, #29
 8016db0:	d505      	bpl.n	8016dbe <__sflush_r+0x46>
 8016db2:	6863      	ldr	r3, [r4, #4]
 8016db4:	1ac0      	subs	r0, r0, r3
 8016db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016db8:	b10b      	cbz	r3, 8016dbe <__sflush_r+0x46>
 8016dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016dbc:	1ac0      	subs	r0, r0, r3
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	4602      	mov	r2, r0
 8016dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016dc4:	6a21      	ldr	r1, [r4, #32]
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	47b0      	blx	r6
 8016dca:	1c43      	adds	r3, r0, #1
 8016dcc:	89a3      	ldrh	r3, [r4, #12]
 8016dce:	d106      	bne.n	8016dde <__sflush_r+0x66>
 8016dd0:	6829      	ldr	r1, [r5, #0]
 8016dd2:	291d      	cmp	r1, #29
 8016dd4:	d82c      	bhi.n	8016e30 <__sflush_r+0xb8>
 8016dd6:	4a2a      	ldr	r2, [pc, #168]	; (8016e80 <__sflush_r+0x108>)
 8016dd8:	40ca      	lsrs	r2, r1
 8016dda:	07d6      	lsls	r6, r2, #31
 8016ddc:	d528      	bpl.n	8016e30 <__sflush_r+0xb8>
 8016dde:	2200      	movs	r2, #0
 8016de0:	6062      	str	r2, [r4, #4]
 8016de2:	04d9      	lsls	r1, r3, #19
 8016de4:	6922      	ldr	r2, [r4, #16]
 8016de6:	6022      	str	r2, [r4, #0]
 8016de8:	d504      	bpl.n	8016df4 <__sflush_r+0x7c>
 8016dea:	1c42      	adds	r2, r0, #1
 8016dec:	d101      	bne.n	8016df2 <__sflush_r+0x7a>
 8016dee:	682b      	ldr	r3, [r5, #0]
 8016df0:	b903      	cbnz	r3, 8016df4 <__sflush_r+0x7c>
 8016df2:	6560      	str	r0, [r4, #84]	; 0x54
 8016df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016df6:	602f      	str	r7, [r5, #0]
 8016df8:	2900      	cmp	r1, #0
 8016dfa:	d0ca      	beq.n	8016d92 <__sflush_r+0x1a>
 8016dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e00:	4299      	cmp	r1, r3
 8016e02:	d002      	beq.n	8016e0a <__sflush_r+0x92>
 8016e04:	4628      	mov	r0, r5
 8016e06:	f7ff fd91 	bl	801692c <_free_r>
 8016e0a:	2000      	movs	r0, #0
 8016e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e0e:	e7c1      	b.n	8016d94 <__sflush_r+0x1c>
 8016e10:	6a21      	ldr	r1, [r4, #32]
 8016e12:	2301      	movs	r3, #1
 8016e14:	4628      	mov	r0, r5
 8016e16:	47b0      	blx	r6
 8016e18:	1c41      	adds	r1, r0, #1
 8016e1a:	d1c7      	bne.n	8016dac <__sflush_r+0x34>
 8016e1c:	682b      	ldr	r3, [r5, #0]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d0c4      	beq.n	8016dac <__sflush_r+0x34>
 8016e22:	2b1d      	cmp	r3, #29
 8016e24:	d001      	beq.n	8016e2a <__sflush_r+0xb2>
 8016e26:	2b16      	cmp	r3, #22
 8016e28:	d101      	bne.n	8016e2e <__sflush_r+0xb6>
 8016e2a:	602f      	str	r7, [r5, #0]
 8016e2c:	e7b1      	b.n	8016d92 <__sflush_r+0x1a>
 8016e2e:	89a3      	ldrh	r3, [r4, #12]
 8016e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e34:	81a3      	strh	r3, [r4, #12]
 8016e36:	e7ad      	b.n	8016d94 <__sflush_r+0x1c>
 8016e38:	690f      	ldr	r7, [r1, #16]
 8016e3a:	2f00      	cmp	r7, #0
 8016e3c:	d0a9      	beq.n	8016d92 <__sflush_r+0x1a>
 8016e3e:	0793      	lsls	r3, r2, #30
 8016e40:	680e      	ldr	r6, [r1, #0]
 8016e42:	bf08      	it	eq
 8016e44:	694b      	ldreq	r3, [r1, #20]
 8016e46:	600f      	str	r7, [r1, #0]
 8016e48:	bf18      	it	ne
 8016e4a:	2300      	movne	r3, #0
 8016e4c:	eba6 0807 	sub.w	r8, r6, r7
 8016e50:	608b      	str	r3, [r1, #8]
 8016e52:	f1b8 0f00 	cmp.w	r8, #0
 8016e56:	dd9c      	ble.n	8016d92 <__sflush_r+0x1a>
 8016e58:	6a21      	ldr	r1, [r4, #32]
 8016e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e5c:	4643      	mov	r3, r8
 8016e5e:	463a      	mov	r2, r7
 8016e60:	4628      	mov	r0, r5
 8016e62:	47b0      	blx	r6
 8016e64:	2800      	cmp	r0, #0
 8016e66:	dc06      	bgt.n	8016e76 <__sflush_r+0xfe>
 8016e68:	89a3      	ldrh	r3, [r4, #12]
 8016e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e6e:	81a3      	strh	r3, [r4, #12]
 8016e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e74:	e78e      	b.n	8016d94 <__sflush_r+0x1c>
 8016e76:	4407      	add	r7, r0
 8016e78:	eba8 0800 	sub.w	r8, r8, r0
 8016e7c:	e7e9      	b.n	8016e52 <__sflush_r+0xda>
 8016e7e:	bf00      	nop
 8016e80:	20400001 	.word	0x20400001

08016e84 <_fflush_r>:
 8016e84:	b538      	push	{r3, r4, r5, lr}
 8016e86:	690b      	ldr	r3, [r1, #16]
 8016e88:	4605      	mov	r5, r0
 8016e8a:	460c      	mov	r4, r1
 8016e8c:	b913      	cbnz	r3, 8016e94 <_fflush_r+0x10>
 8016e8e:	2500      	movs	r5, #0
 8016e90:	4628      	mov	r0, r5
 8016e92:	bd38      	pop	{r3, r4, r5, pc}
 8016e94:	b118      	cbz	r0, 8016e9e <_fflush_r+0x1a>
 8016e96:	6983      	ldr	r3, [r0, #24]
 8016e98:	b90b      	cbnz	r3, 8016e9e <_fflush_r+0x1a>
 8016e9a:	f000 f887 	bl	8016fac <__sinit>
 8016e9e:	4b14      	ldr	r3, [pc, #80]	; (8016ef0 <_fflush_r+0x6c>)
 8016ea0:	429c      	cmp	r4, r3
 8016ea2:	d11b      	bne.n	8016edc <_fflush_r+0x58>
 8016ea4:	686c      	ldr	r4, [r5, #4]
 8016ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d0ef      	beq.n	8016e8e <_fflush_r+0xa>
 8016eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016eb0:	07d0      	lsls	r0, r2, #31
 8016eb2:	d404      	bmi.n	8016ebe <_fflush_r+0x3a>
 8016eb4:	0599      	lsls	r1, r3, #22
 8016eb6:	d402      	bmi.n	8016ebe <_fflush_r+0x3a>
 8016eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016eba:	f000 f915 	bl	80170e8 <__retarget_lock_acquire_recursive>
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	f7ff ff59 	bl	8016d78 <__sflush_r>
 8016ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ec8:	07da      	lsls	r2, r3, #31
 8016eca:	4605      	mov	r5, r0
 8016ecc:	d4e0      	bmi.n	8016e90 <_fflush_r+0xc>
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	059b      	lsls	r3, r3, #22
 8016ed2:	d4dd      	bmi.n	8016e90 <_fflush_r+0xc>
 8016ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ed6:	f000 f908 	bl	80170ea <__retarget_lock_release_recursive>
 8016eda:	e7d9      	b.n	8016e90 <_fflush_r+0xc>
 8016edc:	4b05      	ldr	r3, [pc, #20]	; (8016ef4 <_fflush_r+0x70>)
 8016ede:	429c      	cmp	r4, r3
 8016ee0:	d101      	bne.n	8016ee6 <_fflush_r+0x62>
 8016ee2:	68ac      	ldr	r4, [r5, #8]
 8016ee4:	e7df      	b.n	8016ea6 <_fflush_r+0x22>
 8016ee6:	4b04      	ldr	r3, [pc, #16]	; (8016ef8 <_fflush_r+0x74>)
 8016ee8:	429c      	cmp	r4, r3
 8016eea:	bf08      	it	eq
 8016eec:	68ec      	ldreq	r4, [r5, #12]
 8016eee:	e7da      	b.n	8016ea6 <_fflush_r+0x22>
 8016ef0:	08017744 	.word	0x08017744
 8016ef4:	08017764 	.word	0x08017764
 8016ef8:	08017724 	.word	0x08017724

08016efc <std>:
 8016efc:	2300      	movs	r3, #0
 8016efe:	b510      	push	{r4, lr}
 8016f00:	4604      	mov	r4, r0
 8016f02:	e9c0 3300 	strd	r3, r3, [r0]
 8016f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f0a:	6083      	str	r3, [r0, #8]
 8016f0c:	8181      	strh	r1, [r0, #12]
 8016f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8016f10:	81c2      	strh	r2, [r0, #14]
 8016f12:	6183      	str	r3, [r0, #24]
 8016f14:	4619      	mov	r1, r3
 8016f16:	2208      	movs	r2, #8
 8016f18:	305c      	adds	r0, #92	; 0x5c
 8016f1a:	f7ff fcff 	bl	801691c <memset>
 8016f1e:	4b05      	ldr	r3, [pc, #20]	; (8016f34 <std+0x38>)
 8016f20:	6263      	str	r3, [r4, #36]	; 0x24
 8016f22:	4b05      	ldr	r3, [pc, #20]	; (8016f38 <std+0x3c>)
 8016f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f26:	4b05      	ldr	r3, [pc, #20]	; (8016f3c <std+0x40>)
 8016f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f2a:	4b05      	ldr	r3, [pc, #20]	; (8016f40 <std+0x44>)
 8016f2c:	6224      	str	r4, [r4, #32]
 8016f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	bf00      	nop
 8016f34:	080171d1 	.word	0x080171d1
 8016f38:	080171f3 	.word	0x080171f3
 8016f3c:	0801722b 	.word	0x0801722b
 8016f40:	0801724f 	.word	0x0801724f

08016f44 <_cleanup_r>:
 8016f44:	4901      	ldr	r1, [pc, #4]	; (8016f4c <_cleanup_r+0x8>)
 8016f46:	f000 b8af 	b.w	80170a8 <_fwalk_reent>
 8016f4a:	bf00      	nop
 8016f4c:	08016e85 	.word	0x08016e85

08016f50 <__sfmoreglue>:
 8016f50:	b570      	push	{r4, r5, r6, lr}
 8016f52:	2268      	movs	r2, #104	; 0x68
 8016f54:	1e4d      	subs	r5, r1, #1
 8016f56:	4355      	muls	r5, r2
 8016f58:	460e      	mov	r6, r1
 8016f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f5e:	f7ff fd51 	bl	8016a04 <_malloc_r>
 8016f62:	4604      	mov	r4, r0
 8016f64:	b140      	cbz	r0, 8016f78 <__sfmoreglue+0x28>
 8016f66:	2100      	movs	r1, #0
 8016f68:	e9c0 1600 	strd	r1, r6, [r0]
 8016f6c:	300c      	adds	r0, #12
 8016f6e:	60a0      	str	r0, [r4, #8]
 8016f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016f74:	f7ff fcd2 	bl	801691c <memset>
 8016f78:	4620      	mov	r0, r4
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}

08016f7c <__sfp_lock_acquire>:
 8016f7c:	4801      	ldr	r0, [pc, #4]	; (8016f84 <__sfp_lock_acquire+0x8>)
 8016f7e:	f000 b8b3 	b.w	80170e8 <__retarget_lock_acquire_recursive>
 8016f82:	bf00      	nop
 8016f84:	24005a89 	.word	0x24005a89

08016f88 <__sfp_lock_release>:
 8016f88:	4801      	ldr	r0, [pc, #4]	; (8016f90 <__sfp_lock_release+0x8>)
 8016f8a:	f000 b8ae 	b.w	80170ea <__retarget_lock_release_recursive>
 8016f8e:	bf00      	nop
 8016f90:	24005a89 	.word	0x24005a89

08016f94 <__sinit_lock_acquire>:
 8016f94:	4801      	ldr	r0, [pc, #4]	; (8016f9c <__sinit_lock_acquire+0x8>)
 8016f96:	f000 b8a7 	b.w	80170e8 <__retarget_lock_acquire_recursive>
 8016f9a:	bf00      	nop
 8016f9c:	24005a8a 	.word	0x24005a8a

08016fa0 <__sinit_lock_release>:
 8016fa0:	4801      	ldr	r0, [pc, #4]	; (8016fa8 <__sinit_lock_release+0x8>)
 8016fa2:	f000 b8a2 	b.w	80170ea <__retarget_lock_release_recursive>
 8016fa6:	bf00      	nop
 8016fa8:	24005a8a 	.word	0x24005a8a

08016fac <__sinit>:
 8016fac:	b510      	push	{r4, lr}
 8016fae:	4604      	mov	r4, r0
 8016fb0:	f7ff fff0 	bl	8016f94 <__sinit_lock_acquire>
 8016fb4:	69a3      	ldr	r3, [r4, #24]
 8016fb6:	b11b      	cbz	r3, 8016fc0 <__sinit+0x14>
 8016fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fbc:	f7ff bff0 	b.w	8016fa0 <__sinit_lock_release>
 8016fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8016fc6:	4b13      	ldr	r3, [pc, #76]	; (8017014 <__sinit+0x68>)
 8016fc8:	4a13      	ldr	r2, [pc, #76]	; (8017018 <__sinit+0x6c>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8016fce:	42a3      	cmp	r3, r4
 8016fd0:	bf04      	itt	eq
 8016fd2:	2301      	moveq	r3, #1
 8016fd4:	61a3      	streq	r3, [r4, #24]
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f000 f820 	bl	801701c <__sfp>
 8016fdc:	6060      	str	r0, [r4, #4]
 8016fde:	4620      	mov	r0, r4
 8016fe0:	f000 f81c 	bl	801701c <__sfp>
 8016fe4:	60a0      	str	r0, [r4, #8]
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f000 f818 	bl	801701c <__sfp>
 8016fec:	2200      	movs	r2, #0
 8016fee:	60e0      	str	r0, [r4, #12]
 8016ff0:	2104      	movs	r1, #4
 8016ff2:	6860      	ldr	r0, [r4, #4]
 8016ff4:	f7ff ff82 	bl	8016efc <std>
 8016ff8:	68a0      	ldr	r0, [r4, #8]
 8016ffa:	2201      	movs	r2, #1
 8016ffc:	2109      	movs	r1, #9
 8016ffe:	f7ff ff7d 	bl	8016efc <std>
 8017002:	68e0      	ldr	r0, [r4, #12]
 8017004:	2202      	movs	r2, #2
 8017006:	2112      	movs	r1, #18
 8017008:	f7ff ff78 	bl	8016efc <std>
 801700c:	2301      	movs	r3, #1
 801700e:	61a3      	str	r3, [r4, #24]
 8017010:	e7d2      	b.n	8016fb8 <__sinit+0xc>
 8017012:	bf00      	nop
 8017014:	08017720 	.word	0x08017720
 8017018:	08016f45 	.word	0x08016f45

0801701c <__sfp>:
 801701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701e:	4607      	mov	r7, r0
 8017020:	f7ff ffac 	bl	8016f7c <__sfp_lock_acquire>
 8017024:	4b1e      	ldr	r3, [pc, #120]	; (80170a0 <__sfp+0x84>)
 8017026:	681e      	ldr	r6, [r3, #0]
 8017028:	69b3      	ldr	r3, [r6, #24]
 801702a:	b913      	cbnz	r3, 8017032 <__sfp+0x16>
 801702c:	4630      	mov	r0, r6
 801702e:	f7ff ffbd 	bl	8016fac <__sinit>
 8017032:	3648      	adds	r6, #72	; 0x48
 8017034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017038:	3b01      	subs	r3, #1
 801703a:	d503      	bpl.n	8017044 <__sfp+0x28>
 801703c:	6833      	ldr	r3, [r6, #0]
 801703e:	b30b      	cbz	r3, 8017084 <__sfp+0x68>
 8017040:	6836      	ldr	r6, [r6, #0]
 8017042:	e7f7      	b.n	8017034 <__sfp+0x18>
 8017044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017048:	b9d5      	cbnz	r5, 8017080 <__sfp+0x64>
 801704a:	4b16      	ldr	r3, [pc, #88]	; (80170a4 <__sfp+0x88>)
 801704c:	60e3      	str	r3, [r4, #12]
 801704e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017052:	6665      	str	r5, [r4, #100]	; 0x64
 8017054:	f000 f847 	bl	80170e6 <__retarget_lock_init_recursive>
 8017058:	f7ff ff96 	bl	8016f88 <__sfp_lock_release>
 801705c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017064:	6025      	str	r5, [r4, #0]
 8017066:	61a5      	str	r5, [r4, #24]
 8017068:	2208      	movs	r2, #8
 801706a:	4629      	mov	r1, r5
 801706c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017070:	f7ff fc54 	bl	801691c <memset>
 8017074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801707c:	4620      	mov	r0, r4
 801707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017080:	3468      	adds	r4, #104	; 0x68
 8017082:	e7d9      	b.n	8017038 <__sfp+0x1c>
 8017084:	2104      	movs	r1, #4
 8017086:	4638      	mov	r0, r7
 8017088:	f7ff ff62 	bl	8016f50 <__sfmoreglue>
 801708c:	4604      	mov	r4, r0
 801708e:	6030      	str	r0, [r6, #0]
 8017090:	2800      	cmp	r0, #0
 8017092:	d1d5      	bne.n	8017040 <__sfp+0x24>
 8017094:	f7ff ff78 	bl	8016f88 <__sfp_lock_release>
 8017098:	230c      	movs	r3, #12
 801709a:	603b      	str	r3, [r7, #0]
 801709c:	e7ee      	b.n	801707c <__sfp+0x60>
 801709e:	bf00      	nop
 80170a0:	08017720 	.word	0x08017720
 80170a4:	ffff0001 	.word	0xffff0001

080170a8 <_fwalk_reent>:
 80170a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ac:	4606      	mov	r6, r0
 80170ae:	4688      	mov	r8, r1
 80170b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170b4:	2700      	movs	r7, #0
 80170b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170ba:	f1b9 0901 	subs.w	r9, r9, #1
 80170be:	d505      	bpl.n	80170cc <_fwalk_reent+0x24>
 80170c0:	6824      	ldr	r4, [r4, #0]
 80170c2:	2c00      	cmp	r4, #0
 80170c4:	d1f7      	bne.n	80170b6 <_fwalk_reent+0xe>
 80170c6:	4638      	mov	r0, r7
 80170c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170cc:	89ab      	ldrh	r3, [r5, #12]
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d907      	bls.n	80170e2 <_fwalk_reent+0x3a>
 80170d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80170d6:	3301      	adds	r3, #1
 80170d8:	d003      	beq.n	80170e2 <_fwalk_reent+0x3a>
 80170da:	4629      	mov	r1, r5
 80170dc:	4630      	mov	r0, r6
 80170de:	47c0      	blx	r8
 80170e0:	4307      	orrs	r7, r0
 80170e2:	3568      	adds	r5, #104	; 0x68
 80170e4:	e7e9      	b.n	80170ba <_fwalk_reent+0x12>

080170e6 <__retarget_lock_init_recursive>:
 80170e6:	4770      	bx	lr

080170e8 <__retarget_lock_acquire_recursive>:
 80170e8:	4770      	bx	lr

080170ea <__retarget_lock_release_recursive>:
 80170ea:	4770      	bx	lr

080170ec <__swhatbuf_r>:
 80170ec:	b570      	push	{r4, r5, r6, lr}
 80170ee:	460e      	mov	r6, r1
 80170f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170f4:	2900      	cmp	r1, #0
 80170f6:	b096      	sub	sp, #88	; 0x58
 80170f8:	4614      	mov	r4, r2
 80170fa:	461d      	mov	r5, r3
 80170fc:	da08      	bge.n	8017110 <__swhatbuf_r+0x24>
 80170fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017102:	2200      	movs	r2, #0
 8017104:	602a      	str	r2, [r5, #0]
 8017106:	061a      	lsls	r2, r3, #24
 8017108:	d410      	bmi.n	801712c <__swhatbuf_r+0x40>
 801710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801710e:	e00e      	b.n	801712e <__swhatbuf_r+0x42>
 8017110:	466a      	mov	r2, sp
 8017112:	f000 f8c3 	bl	801729c <_fstat_r>
 8017116:	2800      	cmp	r0, #0
 8017118:	dbf1      	blt.n	80170fe <__swhatbuf_r+0x12>
 801711a:	9a01      	ldr	r2, [sp, #4]
 801711c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017124:	425a      	negs	r2, r3
 8017126:	415a      	adcs	r2, r3
 8017128:	602a      	str	r2, [r5, #0]
 801712a:	e7ee      	b.n	801710a <__swhatbuf_r+0x1e>
 801712c:	2340      	movs	r3, #64	; 0x40
 801712e:	2000      	movs	r0, #0
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	b016      	add	sp, #88	; 0x58
 8017134:	bd70      	pop	{r4, r5, r6, pc}
	...

08017138 <__smakebuf_r>:
 8017138:	898b      	ldrh	r3, [r1, #12]
 801713a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801713c:	079d      	lsls	r5, r3, #30
 801713e:	4606      	mov	r6, r0
 8017140:	460c      	mov	r4, r1
 8017142:	d507      	bpl.n	8017154 <__smakebuf_r+0x1c>
 8017144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017148:	6023      	str	r3, [r4, #0]
 801714a:	6123      	str	r3, [r4, #16]
 801714c:	2301      	movs	r3, #1
 801714e:	6163      	str	r3, [r4, #20]
 8017150:	b002      	add	sp, #8
 8017152:	bd70      	pop	{r4, r5, r6, pc}
 8017154:	ab01      	add	r3, sp, #4
 8017156:	466a      	mov	r2, sp
 8017158:	f7ff ffc8 	bl	80170ec <__swhatbuf_r>
 801715c:	9900      	ldr	r1, [sp, #0]
 801715e:	4605      	mov	r5, r0
 8017160:	4630      	mov	r0, r6
 8017162:	f7ff fc4f 	bl	8016a04 <_malloc_r>
 8017166:	b948      	cbnz	r0, 801717c <__smakebuf_r+0x44>
 8017168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801716c:	059a      	lsls	r2, r3, #22
 801716e:	d4ef      	bmi.n	8017150 <__smakebuf_r+0x18>
 8017170:	f023 0303 	bic.w	r3, r3, #3
 8017174:	f043 0302 	orr.w	r3, r3, #2
 8017178:	81a3      	strh	r3, [r4, #12]
 801717a:	e7e3      	b.n	8017144 <__smakebuf_r+0xc>
 801717c:	4b0d      	ldr	r3, [pc, #52]	; (80171b4 <__smakebuf_r+0x7c>)
 801717e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017180:	89a3      	ldrh	r3, [r4, #12]
 8017182:	6020      	str	r0, [r4, #0]
 8017184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017188:	81a3      	strh	r3, [r4, #12]
 801718a:	9b00      	ldr	r3, [sp, #0]
 801718c:	6163      	str	r3, [r4, #20]
 801718e:	9b01      	ldr	r3, [sp, #4]
 8017190:	6120      	str	r0, [r4, #16]
 8017192:	b15b      	cbz	r3, 80171ac <__smakebuf_r+0x74>
 8017194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017198:	4630      	mov	r0, r6
 801719a:	f000 f891 	bl	80172c0 <_isatty_r>
 801719e:	b128      	cbz	r0, 80171ac <__smakebuf_r+0x74>
 80171a0:	89a3      	ldrh	r3, [r4, #12]
 80171a2:	f023 0303 	bic.w	r3, r3, #3
 80171a6:	f043 0301 	orr.w	r3, r3, #1
 80171aa:	81a3      	strh	r3, [r4, #12]
 80171ac:	89a0      	ldrh	r0, [r4, #12]
 80171ae:	4305      	orrs	r5, r0
 80171b0:	81a5      	strh	r5, [r4, #12]
 80171b2:	e7cd      	b.n	8017150 <__smakebuf_r+0x18>
 80171b4:	08016f45 	.word	0x08016f45

080171b8 <__malloc_lock>:
 80171b8:	4801      	ldr	r0, [pc, #4]	; (80171c0 <__malloc_lock+0x8>)
 80171ba:	f7ff bf95 	b.w	80170e8 <__retarget_lock_acquire_recursive>
 80171be:	bf00      	nop
 80171c0:	24005a88 	.word	0x24005a88

080171c4 <__malloc_unlock>:
 80171c4:	4801      	ldr	r0, [pc, #4]	; (80171cc <__malloc_unlock+0x8>)
 80171c6:	f7ff bf90 	b.w	80170ea <__retarget_lock_release_recursive>
 80171ca:	bf00      	nop
 80171cc:	24005a88 	.word	0x24005a88

080171d0 <__sread>:
 80171d0:	b510      	push	{r4, lr}
 80171d2:	460c      	mov	r4, r1
 80171d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171d8:	f000 f894 	bl	8017304 <_read_r>
 80171dc:	2800      	cmp	r0, #0
 80171de:	bfab      	itete	ge
 80171e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80171e2:	89a3      	ldrhlt	r3, [r4, #12]
 80171e4:	181b      	addge	r3, r3, r0
 80171e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80171ea:	bfac      	ite	ge
 80171ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80171ee:	81a3      	strhlt	r3, [r4, #12]
 80171f0:	bd10      	pop	{r4, pc}

080171f2 <__swrite>:
 80171f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f6:	461f      	mov	r7, r3
 80171f8:	898b      	ldrh	r3, [r1, #12]
 80171fa:	05db      	lsls	r3, r3, #23
 80171fc:	4605      	mov	r5, r0
 80171fe:	460c      	mov	r4, r1
 8017200:	4616      	mov	r6, r2
 8017202:	d505      	bpl.n	8017210 <__swrite+0x1e>
 8017204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017208:	2302      	movs	r3, #2
 801720a:	2200      	movs	r2, #0
 801720c:	f000 f868 	bl	80172e0 <_lseek_r>
 8017210:	89a3      	ldrh	r3, [r4, #12]
 8017212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801721a:	81a3      	strh	r3, [r4, #12]
 801721c:	4632      	mov	r2, r6
 801721e:	463b      	mov	r3, r7
 8017220:	4628      	mov	r0, r5
 8017222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017226:	f000 b817 	b.w	8017258 <_write_r>

0801722a <__sseek>:
 801722a:	b510      	push	{r4, lr}
 801722c:	460c      	mov	r4, r1
 801722e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017232:	f000 f855 	bl	80172e0 <_lseek_r>
 8017236:	1c43      	adds	r3, r0, #1
 8017238:	89a3      	ldrh	r3, [r4, #12]
 801723a:	bf15      	itete	ne
 801723c:	6560      	strne	r0, [r4, #84]	; 0x54
 801723e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017246:	81a3      	strheq	r3, [r4, #12]
 8017248:	bf18      	it	ne
 801724a:	81a3      	strhne	r3, [r4, #12]
 801724c:	bd10      	pop	{r4, pc}

0801724e <__sclose>:
 801724e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017252:	f000 b813 	b.w	801727c <_close_r>
	...

08017258 <_write_r>:
 8017258:	b538      	push	{r3, r4, r5, lr}
 801725a:	4d07      	ldr	r5, [pc, #28]	; (8017278 <_write_r+0x20>)
 801725c:	4604      	mov	r4, r0
 801725e:	4608      	mov	r0, r1
 8017260:	4611      	mov	r1, r2
 8017262:	2200      	movs	r2, #0
 8017264:	602a      	str	r2, [r5, #0]
 8017266:	461a      	mov	r2, r3
 8017268:	f7ec fc3d 	bl	8003ae6 <_write>
 801726c:	1c43      	adds	r3, r0, #1
 801726e:	d102      	bne.n	8017276 <_write_r+0x1e>
 8017270:	682b      	ldr	r3, [r5, #0]
 8017272:	b103      	cbz	r3, 8017276 <_write_r+0x1e>
 8017274:	6023      	str	r3, [r4, #0]
 8017276:	bd38      	pop	{r3, r4, r5, pc}
 8017278:	24005a8c 	.word	0x24005a8c

0801727c <_close_r>:
 801727c:	b538      	push	{r3, r4, r5, lr}
 801727e:	4d06      	ldr	r5, [pc, #24]	; (8017298 <_close_r+0x1c>)
 8017280:	2300      	movs	r3, #0
 8017282:	4604      	mov	r4, r0
 8017284:	4608      	mov	r0, r1
 8017286:	602b      	str	r3, [r5, #0]
 8017288:	f7ec fc49 	bl	8003b1e <_close>
 801728c:	1c43      	adds	r3, r0, #1
 801728e:	d102      	bne.n	8017296 <_close_r+0x1a>
 8017290:	682b      	ldr	r3, [r5, #0]
 8017292:	b103      	cbz	r3, 8017296 <_close_r+0x1a>
 8017294:	6023      	str	r3, [r4, #0]
 8017296:	bd38      	pop	{r3, r4, r5, pc}
 8017298:	24005a8c 	.word	0x24005a8c

0801729c <_fstat_r>:
 801729c:	b538      	push	{r3, r4, r5, lr}
 801729e:	4d07      	ldr	r5, [pc, #28]	; (80172bc <_fstat_r+0x20>)
 80172a0:	2300      	movs	r3, #0
 80172a2:	4604      	mov	r4, r0
 80172a4:	4608      	mov	r0, r1
 80172a6:	4611      	mov	r1, r2
 80172a8:	602b      	str	r3, [r5, #0]
 80172aa:	f7ec fc44 	bl	8003b36 <_fstat>
 80172ae:	1c43      	adds	r3, r0, #1
 80172b0:	d102      	bne.n	80172b8 <_fstat_r+0x1c>
 80172b2:	682b      	ldr	r3, [r5, #0]
 80172b4:	b103      	cbz	r3, 80172b8 <_fstat_r+0x1c>
 80172b6:	6023      	str	r3, [r4, #0]
 80172b8:	bd38      	pop	{r3, r4, r5, pc}
 80172ba:	bf00      	nop
 80172bc:	24005a8c 	.word	0x24005a8c

080172c0 <_isatty_r>:
 80172c0:	b538      	push	{r3, r4, r5, lr}
 80172c2:	4d06      	ldr	r5, [pc, #24]	; (80172dc <_isatty_r+0x1c>)
 80172c4:	2300      	movs	r3, #0
 80172c6:	4604      	mov	r4, r0
 80172c8:	4608      	mov	r0, r1
 80172ca:	602b      	str	r3, [r5, #0]
 80172cc:	f7ec fc43 	bl	8003b56 <_isatty>
 80172d0:	1c43      	adds	r3, r0, #1
 80172d2:	d102      	bne.n	80172da <_isatty_r+0x1a>
 80172d4:	682b      	ldr	r3, [r5, #0]
 80172d6:	b103      	cbz	r3, 80172da <_isatty_r+0x1a>
 80172d8:	6023      	str	r3, [r4, #0]
 80172da:	bd38      	pop	{r3, r4, r5, pc}
 80172dc:	24005a8c 	.word	0x24005a8c

080172e0 <_lseek_r>:
 80172e0:	b538      	push	{r3, r4, r5, lr}
 80172e2:	4d07      	ldr	r5, [pc, #28]	; (8017300 <_lseek_r+0x20>)
 80172e4:	4604      	mov	r4, r0
 80172e6:	4608      	mov	r0, r1
 80172e8:	4611      	mov	r1, r2
 80172ea:	2200      	movs	r2, #0
 80172ec:	602a      	str	r2, [r5, #0]
 80172ee:	461a      	mov	r2, r3
 80172f0:	f7ec fc3c 	bl	8003b6c <_lseek>
 80172f4:	1c43      	adds	r3, r0, #1
 80172f6:	d102      	bne.n	80172fe <_lseek_r+0x1e>
 80172f8:	682b      	ldr	r3, [r5, #0]
 80172fa:	b103      	cbz	r3, 80172fe <_lseek_r+0x1e>
 80172fc:	6023      	str	r3, [r4, #0]
 80172fe:	bd38      	pop	{r3, r4, r5, pc}
 8017300:	24005a8c 	.word	0x24005a8c

08017304 <_read_r>:
 8017304:	b538      	push	{r3, r4, r5, lr}
 8017306:	4d07      	ldr	r5, [pc, #28]	; (8017324 <_read_r+0x20>)
 8017308:	4604      	mov	r4, r0
 801730a:	4608      	mov	r0, r1
 801730c:	4611      	mov	r1, r2
 801730e:	2200      	movs	r2, #0
 8017310:	602a      	str	r2, [r5, #0]
 8017312:	461a      	mov	r2, r3
 8017314:	f7ec fbca 	bl	8003aac <_read>
 8017318:	1c43      	adds	r3, r0, #1
 801731a:	d102      	bne.n	8017322 <_read_r+0x1e>
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	b103      	cbz	r3, 8017322 <_read_r+0x1e>
 8017320:	6023      	str	r3, [r4, #0]
 8017322:	bd38      	pop	{r3, r4, r5, pc}
 8017324:	24005a8c 	.word	0x24005a8c

08017328 <_init>:
 8017328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732a:	bf00      	nop
 801732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801732e:	bc08      	pop	{r3}
 8017330:	469e      	mov	lr, r3
 8017332:	4770      	bx	lr

08017334 <_fini>:
 8017334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017336:	bf00      	nop
 8017338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801733a:	bc08      	pop	{r3}
 801733c:	469e      	mov	lr, r3
 801733e:	4770      	bx	lr
