
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b270  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b510  0801b510  0002b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b9a8  0801b9a8  0002b9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b9b0  0801b9b0  0002b9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b9b4  0801b9b4  0002b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  24000000  0801b9b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000068a8  24000140  0801baf8  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240069e8  0801baf8  000369e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .debug_info   000412dd  00000000  00000000  0003016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007dd4  00000000  00000000  0007144b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc8  00000000  00000000  00079220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002880  00000000  00000000  0007bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000434d5  00000000  00000000  000c4ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196bf3  00000000  00000000  00108392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029ef85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd2c  00000000  00000000  0029efd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b4f8 	.word	0x0801b4f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b4f8 	.word	0x0801b4f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f006 f8a9 	bl	80067c0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa88 	bl	8003b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f007 f9c4 	bl	8007a10 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa7b 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 fb07 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 fa62 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 faf9 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 fa54 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 faeb 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 fa46 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 fadd 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 fa38 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 face 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 fa29 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 fabf 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 fa1a 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 fab0 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 fa0b 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 faa1 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f9fc 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 fa92 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f9ed 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 fa83 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f9de 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 fa74 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f9cf 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 ff91 	bl	80067c0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f970 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 f9fc 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f957 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 f9ee 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f949 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 f9e0 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f93b 	bl	8003b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 f9d2 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f92d 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fefc 	bl	800b7f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fef0 	bl	800b7f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fee4 	bl	800b7f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fd8f 	bl	8008598 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f882 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fc4a 	bl	8006378 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fc44 	bl	8006378 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fd2f 	bl	8008598 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f003 f822 	bl	8003b88 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 ffad 	bl	801aaec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f007 f8f7 	bl	8007d8c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fff0 	bl	8003b88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 fb12 	bl	80081ec <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ffdb 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fdcf 	bl	800b7f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fc7a 	bl	8008598 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 ff6d 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f007 f83c 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f007 f853 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f007 f813 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f007 f82a 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f007 f80b 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f007 f822 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f007 f803 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f007 f81a 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fffb 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f007 f812 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fff3 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f007 f80a 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 ffeb 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f007 f802 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 ffe3 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fffa 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 ffdb 	bl	8007d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fff2 	bl	8007d70 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fe8e 	bl	801aaec <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a fb52 	bl	800b514 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a faf7 	bl	800b514 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00a f944 	bl	800b244 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1e      	cmp	r3, #30
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f00a f898 	bl	800b244 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a f9a4 	bl	800b514 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f941 	bl	800b514 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 ff8e 	bl	800b244 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f00a f86c 	bl	800b514 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1e      	cmp	r3, #30
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fe77 	bl	800b244 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 ff84 	bl	800b514 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f019 f97a 	bl	801aaec <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fe5f 	bl	800b514 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fcad 	bl	800b244 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fdc1 	bl	800b514 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f019 f815 	bl	801aaec <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f019 f80c 	bl	801aaec <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 fb79 	bl	800b244 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 fb66 	bl	800b244 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 ff57 	bl	801aaec <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 ff50 	bl	801aaec <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 fabf 	bl	800b244 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1e      	cmp	r3, #30
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 fad7 	bl	800b368 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 fb7f 	bl	800b514 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f009 f9cb 	bl	800b244 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	463b      	mov	r3, r7
 8001f64:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <handle_error+0x70>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f015 fbf4 	bl	801775c <osEventFlagsSet>
	while (!IDLING) {};
 8001f74:	bf00      	nop
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <handle_error+0x74>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0fa      	beq.n	8001f76 <handle_error+0x1a>
	increment_error_counter(error);
 8001f80:	463b      	mov	r3, r7
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f855 	bl	8002034 <increment_error_counter>
	set_previous_error(error);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f90:	f000 f8b6 	bl	8002100 <set_previous_error>
	send_current_error_packet(error);
 8001f94:	463b      	mov	r3, r7
 8001f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9a:	f000 fa7f 	bl	800249c <send_current_error_packet>
	send_junk_packet();
 8001f9e:	f000 fab9 	bl	8002514 <send_junk_packet>

	switch (error.category) {
 8001fa2:	783b      	ldrb	r3, [r7, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d008      	beq.n	8001fba <handle_error+0x5e>
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	dc08      	bgt.n	8001fbe <handle_error+0x62>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <handle_error+0x5a>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d006      	beq.n	8001fc2 <handle_error+0x66>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001fb4:	e003      	b.n	8001fbe <handle_error+0x62>
		NVIC_SystemReset();
 8001fb6:	f7ff ffbb 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001fba:	f7ff ffb9 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <handle_error+0x68>
		break;
 8001fc2:	bf00      	nop
	}
#endif
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24001a9c 	.word	0x24001a9c
 8001fd0:	240000c4 	.word	0x240000c4

08001fd4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fda:	f009 f9c5 	bl	800b368 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fde:	f7fe fedb 	bl	8000d98 <EE_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <error_counter_init+0x18>
		Error_Handler();
 8001fe8:	f001 fdce 	bl	8003b88 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e013      	b.n	800201a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <error_counter_init+0x58>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	490c      	ldr	r1, [pc, #48]	; (8002030 <error_counter_init+0x5c>)
 8002000:	440b      	add	r3, r1
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff fb7f 	bl	8001708 <EE_ReadVariable>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <error_counter_init+0x40>
			Error_Handler();
 8002010:	f001 fdba 	bl	8003b88 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b1c      	cmp	r3, #28
 800201e:	dde8      	ble.n	8001ff2 <error_counter_init+0x1e>
		}
	}
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	24000000 	.word	0x24000000
 8002030:	240003a4 	.word	0x240003a4

08002034 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	463b      	mov	r3, r7
 800203c:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 8002040:	783b      	ldrb	r3, [r7, #0]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <increment_error_counter+0x3c>)
 8002044:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002048:	3201      	adds	r2, #1
 800204a:	b291      	uxth	r1, r2
 800204c:	4a08      	ldr	r2, [pc, #32]	; (8002070 <increment_error_counter+0x3c>)
 800204e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 8002052:	787b      	ldrb	r3, [r7, #1]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <increment_error_counter+0x3c>)
 8002056:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800205a:	3201      	adds	r2, #1
 800205c:	b291      	uxth	r1, r2
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <increment_error_counter+0x3c>)
 8002060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002064:	f000 f806 	bl	8002074 <update_error_counter>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240003a4 	.word	0x240003a4

08002074 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	e013      	b.n	80020a8 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <update_error_counter+0x44>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <update_error_counter+0x48>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7ff fb80 	bl	8001798 <EE_WriteVariable>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <update_error_counter+0x2e>
			Error_Handler();
 800209e:	f001 fd73 	bl	8003b88 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b1c      	cmp	r3, #28
 80020ac:	dde8      	ble.n	8002080 <update_error_counter+0xc>
		}
	}
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	24000000 	.word	0x24000000
 80020bc:	240003a4 	.word	0x240003a4

080020c0 <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e00f      	b.n	80020ec <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <reset_error_counters+0x3c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fb5e 	bl	8001798 <EE_WriteVariable>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <reset_error_counters+0x26>
			Error_Handler();
 80020e2:	f001 fd51 	bl	8003b88 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3301      	adds	r3, #1
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b1c      	cmp	r3, #28
 80020f0:	ddec      	ble.n	80020cc <reset_error_counters+0xc>
		}
	}
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	24000000 	.word	0x24000000

08002100 <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	463b      	mov	r3, r7
 8002108:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <set_previous_error+0x48>)
 800210e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002110:	783a      	ldrb	r2, [r7, #0]
 8002112:	b292      	uxth	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fb3e 	bl	8001798 <EE_WriteVariable>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <set_previous_error+0x26>
		Error_Handler();
 8002122:	f001 fd31 	bl	8003b88 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <set_previous_error+0x48>)
 8002128:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800212a:	787a      	ldrb	r2, [r7, #1]
 800212c:	b292      	uxth	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb31 	bl	8001798 <EE_WriteVariable>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <set_previous_error+0x40>
		Error_Handler();
 800213c:	f001 fd24 	bl	8003b88 <Error_Handler>
	}
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000000 	.word	0x24000000

0800214c <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <get_previous_error+0x60>)
 8002156:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002158:	f107 020e 	add.w	r2, r7, #14
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fad2 	bl	8001708 <EE_ReadVariable>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <get_previous_error+0x22>
		Error_Handler();
 800216a:	f001 fd0d 	bl	8003b88 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <get_previous_error+0x60>)
 8002170:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fac5 	bl	8001708 <EE_ReadVariable>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <get_previous_error+0x3c>
		Error_Handler();
 8002184:	f001 fd00 	bl	8003b88 <Error_Handler>
	}

	prev_error.category = category;
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	747b      	strb	r3, [r7, #17]

	return prev_error;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	cb03      	ldmia	r3!, {r0, r1}
 800219e:	6010      	str	r0, [r2, #0]
 80021a0:	6051      	str	r1, [r2, #4]
}
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	24000000 	.word	0x24000000

080021b0 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b090      	sub	sp, #64	; 0x40
 80021b4:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 80021b6:	23cc      	movs	r3, #204	; 0xcc
 80021b8:	713b      	strb	r3, [r7, #4]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 80021ba:	23cc      	movs	r3, #204	; 0xcc
 80021bc:	717b      	strb	r3, [r7, #5]
	buffer[2] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 80021be:	4b9b      	ldr	r3, [pc, #620]	; (800242c <send_error_counter_packet+0x27c>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = (local_cpy[EC_power_supply_rail] & 0xFF);
 80021ca:	4b98      	ldr	r3, [pc, #608]	; (800242c <send_error_counter_packet+0x27c>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 80021d2:	4b96      	ldr	r3, [pc, #600]	; (800242c <send_error_counter_packet+0x27c>)
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	723b      	strb	r3, [r7, #8]
	buffer[5] = (local_cpy[EC_seu] & 0xFF);
 80021de:	4b93      	ldr	r3, [pc, #588]	; (800242c <send_error_counter_packet+0x27c>)
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	727b      	strb	r3, [r7, #9]
	buffer[6] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 80021e6:	4b91      	ldr	r3, [pc, #580]	; (800242c <send_error_counter_packet+0x27c>)
 80021e8:	889b      	ldrh	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = (local_cpy[EC_peripheral] & 0xFF);
 80021f2:	4b8e      	ldr	r3, [pc, #568]	; (800242c <send_error_counter_packet+0x27c>)
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	72fb      	strb	r3, [r7, #11]
	buffer[8] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 80021fa:	4b8c      	ldr	r3, [pc, #560]	; (800242c <send_error_counter_packet+0x27c>)
 80021fc:	88db      	ldrh	r3, [r3, #6]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	733b      	strb	r3, [r7, #12]
	buffer[9] = (local_cpy[EC_brownout] & 0xFF);
 8002206:	4b89      	ldr	r3, [pc, #548]	; (800242c <send_error_counter_packet+0x27c>)
 8002208:	88db      	ldrh	r3, [r3, #6]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	737b      	strb	r3, [r7, #13]
	buffer[10] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 800220e:	4b87      	ldr	r3, [pc, #540]	; (800242c <send_error_counter_packet+0x27c>)
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73bb      	strb	r3, [r7, #14]
	buffer[11] = (local_cpy[EC_watchdog] & 0xFF);
 800221a:	4b84      	ldr	r3, [pc, #528]	; (800242c <send_error_counter_packet+0x27c>)
 800221c:	891b      	ldrh	r3, [r3, #8]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	73fb      	strb	r3, [r7, #15]
	buffer[12] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <send_error_counter_packet+0x27c>)
 8002224:	895b      	ldrh	r3, [r3, #10]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	743b      	strb	r3, [r7, #16]
	buffer[13] = (local_cpy[EC_UNDEFINED] & 0xFF);
 800222e:	4b7f      	ldr	r3, [pc, #508]	; (800242c <send_error_counter_packet+0x27c>)
 8002230:	895b      	ldrh	r3, [r3, #10]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	747b      	strb	r3, [r7, #17]
	buffer[14] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <send_error_counter_packet+0x27c>)
 8002238:	899b      	ldrh	r3, [r3, #12]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	74bb      	strb	r3, [r7, #18]
	buffer[15] = (local_cpy[ED_vsense] & 0xFF);
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <send_error_counter_packet+0x27c>)
 8002244:	899b      	ldrh	r3, [r3, #12]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	74fb      	strb	r3, [r7, #19]
	buffer[16] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <send_error_counter_packet+0x27c>)
 800224c:	89db      	ldrh	r3, [r3, #14]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29b      	uxth	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	753b      	strb	r3, [r7, #20]
	buffer[17] = (local_cpy[ED_vrefint] & 0xFF);
 8002256:	4b75      	ldr	r3, [pc, #468]	; (800242c <send_error_counter_packet+0x27c>)
 8002258:	89db      	ldrh	r3, [r3, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	757b      	strb	r3, [r7, #21]
	buffer[18] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 800225e:	4b73      	ldr	r3, [pc, #460]	; (800242c <send_error_counter_packet+0x27c>)
 8002260:	8a1b      	ldrh	r3, [r3, #16]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	75bb      	strb	r3, [r7, #22]
	buffer[19] = (local_cpy[ED_TEMP1] & 0xFF);
 800226a:	4b70      	ldr	r3, [pc, #448]	; (800242c <send_error_counter_packet+0x27c>)
 800226c:	8a1b      	ldrh	r3, [r3, #16]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	75fb      	strb	r3, [r7, #23]
	buffer[20] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <send_error_counter_packet+0x27c>)
 8002274:	8a5b      	ldrh	r3, [r3, #18]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	763b      	strb	r3, [r7, #24]
	buffer[21] = (local_cpy[ED_TEMP2] & 0xFF);
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <send_error_counter_packet+0x27c>)
 8002280:	8a5b      	ldrh	r3, [r3, #18]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	767b      	strb	r3, [r7, #25]
	buffer[22] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 8002286:	4b69      	ldr	r3, [pc, #420]	; (800242c <send_error_counter_packet+0x27c>)
 8002288:	8a9b      	ldrh	r3, [r3, #20]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	76bb      	strb	r3, [r7, #26]
	buffer[23] = (local_cpy[ED_TEMP3] & 0xFF);
 8002292:	4b66      	ldr	r3, [pc, #408]	; (800242c <send_error_counter_packet+0x27c>)
 8002294:	8a9b      	ldrh	r3, [r3, #20]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	76fb      	strb	r3, [r7, #27]
	buffer[24] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 800229a:	4b64      	ldr	r3, [pc, #400]	; (800242c <send_error_counter_packet+0x27c>)
 800229c:	8adb      	ldrh	r3, [r3, #22]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	773b      	strb	r3, [r7, #28]
	buffer[25] = (local_cpy[ED_TEMP4] & 0xFF);
 80022a6:	4b61      	ldr	r3, [pc, #388]	; (800242c <send_error_counter_packet+0x27c>)
 80022a8:	8adb      	ldrh	r3, [r3, #22]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	777b      	strb	r3, [r7, #29]
	buffer[26] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <send_error_counter_packet+0x27c>)
 80022b0:	8b1b      	ldrh	r3, [r3, #24]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	77bb      	strb	r3, [r7, #30]
	buffer[27] = (local_cpy[ED_busvmon] & 0xFF);
 80022ba:	4b5c      	ldr	r3, [pc, #368]	; (800242c <send_error_counter_packet+0x27c>)
 80022bc:	8b1b      	ldrh	r3, [r3, #24]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	77fb      	strb	r3, [r7, #31]
	buffer[28] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <send_error_counter_packet+0x27c>)
 80022c4:	8b5b      	ldrh	r3, [r3, #26]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[29] = (local_cpy[ED_busimon] & 0xFF);
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <send_error_counter_packet+0x27c>)
 80022d2:	8b5b      	ldrh	r3, [r3, #26]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[30] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 80022da:	4b54      	ldr	r3, [pc, #336]	; (800242c <send_error_counter_packet+0x27c>)
 80022dc:	8b9b      	ldrh	r3, [r3, #28]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[31] = (local_cpy[ED_2v5] & 0xFF);
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <send_error_counter_packet+0x27c>)
 80022ea:	8b9b      	ldrh	r3, [r3, #28]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[32] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 80022f2:	4b4e      	ldr	r3, [pc, #312]	; (800242c <send_error_counter_packet+0x27c>)
 80022f4:	8bdb      	ldrh	r3, [r3, #30]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[33] = (local_cpy[ED_3v3] & 0xFF);
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <send_error_counter_packet+0x27c>)
 8002302:	8bdb      	ldrh	r3, [r3, #30]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[34] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 800230a:	4b48      	ldr	r3, [pc, #288]	; (800242c <send_error_counter_packet+0x27c>)
 800230c:	8c1b      	ldrh	r3, [r3, #32]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[35] = (local_cpy[ED_5v] & 0xFF);
 8002318:	4b44      	ldr	r3, [pc, #272]	; (800242c <send_error_counter_packet+0x27c>)
 800231a:	8c1b      	ldrh	r3, [r3, #32]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[36] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 8002322:	4b42      	ldr	r3, [pc, #264]	; (800242c <send_error_counter_packet+0x27c>)
 8002324:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[37] = (local_cpy[ED_n3v3] & 0xFF);
 8002330:	4b3e      	ldr	r3, [pc, #248]	; (800242c <send_error_counter_packet+0x27c>)
 8002332:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[38] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 800233a:	4b3c      	ldr	r3, [pc, #240]	; (800242c <send_error_counter_packet+0x27c>)
 800233c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[39] = (local_cpy[ED_n5v] & 0xFF);
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <send_error_counter_packet+0x27c>)
 800234a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[40] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <send_error_counter_packet+0x27c>)
 8002354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b29b      	uxth	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[41] = (local_cpy[ED_15v] & 0xFF);
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <send_error_counter_packet+0x27c>)
 8002362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[42] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <send_error_counter_packet+0x27c>)
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[43] = (local_cpy[ED_5vref] & 0xFF);
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <send_error_counter_packet+0x27c>)
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[44] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <send_error_counter_packet+0x27c>)
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[45] = (local_cpy[ED_n200v] & 0xFF);
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <send_error_counter_packet+0x27c>)
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[46] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <send_error_counter_packet+0x27c>)
 800239c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[47] = (local_cpy[ED_n800v] & 0xFF);
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <send_error_counter_packet+0x27c>)
 80023aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[48] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <send_error_counter_packet+0x27c>)
 80023b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[49] = (local_cpy[ED_TMP1] & 0xFF);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <send_error_counter_packet+0x27c>)
 80023c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[50] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <send_error_counter_packet+0x27c>)
 80023cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[51] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <send_error_counter_packet+0x27c>)
 80023da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[52] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <send_error_counter_packet+0x27c>)
 80023e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[53] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <send_error_counter_packet+0x27c>)
 80023f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[54] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <send_error_counter_packet+0x27c>)
 80023fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[55] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <send_error_counter_packet+0x27c>)
 800240a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[54] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <send_error_counter_packet+0x27c>)
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b29b      	uxth	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[55] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <send_error_counter_packet+0x27c>)
 8002422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800242a:	e001      	b.n	8002430 <send_error_counter_packet+0x280>
 800242c:	240003a4 	.word	0x240003a4
	buffer[54] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <send_error_counter_packet+0x2ac>)
 8002432:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[55] = (local_cpy[ED_UNDEFINED] & 0xFF);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <send_error_counter_packet+0x2ac>)
 8002440:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 8002448:	1d39      	adds	r1, r7, #4
 800244a:	2364      	movs	r3, #100	; 0x64
 800244c:	223c      	movs	r2, #60	; 0x3c
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <send_error_counter_packet+0x2b0>)
 8002450:	f012 f9de 	bl	8014810 <HAL_UART_Transmit>
}
 8002454:	bf00      	nop
 8002456:	3740      	adds	r7, #64	; 0x40
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	240003a4 	.word	0x240003a4
 8002460:	24001e3c 	.word	0x24001e3c

08002464 <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe6c 	bl	800214c <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 8002474:	23aa      	movs	r3, #170	; 0xaa
 8002476:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 8002478:	23aa      	movs	r3, #170	; 0xaa
 800247a:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 800247c:	7a3b      	ldrb	r3, [r7, #8]
 800247e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 8002480:	7a7b      	ldrb	r3, [r7, #9]
 8002482:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002484:	1d39      	adds	r1, r7, #4
 8002486:	2364      	movs	r3, #100	; 0x64
 8002488:	2204      	movs	r2, #4
 800248a:	4803      	ldr	r0, [pc, #12]	; (8002498 <send_previous_error_packet+0x34>)
 800248c:	f012 f9c0 	bl	8014810 <HAL_UART_Transmit>
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	24001e3c 	.word	0x24001e3c

0800249c <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	463b      	mov	r3, r7
 80024a4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail) {
 80024a8:	783b      	ldrb	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <send_current_error_packet+0x1e>
		error.OOB_1 = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 80024ba:	23bb      	movs	r3, #187	; 0xbb
 80024bc:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 80024be:	23bb      	movs	r3, #187	; 0xbb
 80024c0:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 80024c2:	783b      	ldrb	r3, [r7, #0]
 80024c4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, 100);
 80024fa:	f107 010c 	add.w	r1, r7, #12
 80024fe:	2364      	movs	r3, #100	; 0x64
 8002500:	220a      	movs	r2, #10
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <send_current_error_packet+0x74>)
 8002504:	f012 f984 	bl	8014810 <HAL_UART_Transmit>
}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	24001e3c 	.word	0x24001e3c

08002514 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002514:	b580      	push	{r7, lr}
 8002516:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800251a:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002522:	e00d      	b.n	8002540 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002524:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002528:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800252c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002530:	4413      	add	r3, r2
 8002532:	22ce      	movs	r2, #206	; 0xce
 8002534:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002536:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800253a:	3301      	adds	r3, #1
 800253c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002540:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	dbec      	blt.n	8002524 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 800254a:	1d39      	adds	r1, r7, #4
 800254c:	2364      	movs	r3, #100	; 0x64
 800254e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002552:	4804      	ldr	r0, [pc, #16]	; (8002564 <send_junk_packet+0x50>)
 8002554:	f012 f95c 	bl	8014810 <HAL_UART_Transmit>
}
 8002558:	bf00      	nop
 800255a:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	24001e3c 	.word	0x24001e3c

08002568 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <vApplicationTickHook+0x18>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a03      	ldr	r2, [pc, #12]	; (8002580 <vApplicationTickHook+0x18>)
 8002574:	6013      	str	r3, [r2, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	24001ae4 	.word	0x24001ae4

08002584 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <MX_FREERTOS_Init+0x98>)
 80025a2:	2100      	movs	r1, #0
 80025a4:	4824      	ldr	r0, [pc, #144]	; (8002638 <MX_FREERTOS_Init+0x9c>)
 80025a6:	f014 ff8b 	bl	80174c0 <osThreadNew>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a23      	ldr	r2, [pc, #140]	; (800263c <MX_FREERTOS_Init+0xa0>)
 80025ae:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <MX_FREERTOS_Init+0xa4>)
 80025b2:	2100      	movs	r1, #0
 80025b4:	4823      	ldr	r0, [pc, #140]	; (8002644 <MX_FREERTOS_Init+0xa8>)
 80025b6:	f014 ff83 	bl	80174c0 <osThreadNew>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <MX_FREERTOS_Init+0xac>)
 80025be:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80025c0:	4a22      	ldr	r2, [pc, #136]	; (800264c <MX_FREERTOS_Init+0xb0>)
 80025c2:	2100      	movs	r1, #0
 80025c4:	4822      	ldr	r0, [pc, #136]	; (8002650 <MX_FREERTOS_Init+0xb4>)
 80025c6:	f014 ff7b 	bl	80174c0 <osThreadNew>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <MX_FREERTOS_Init+0xb8>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <MX_FREERTOS_Init+0xbc>)
 80025d2:	2100      	movs	r1, #0
 80025d4:	4821      	ldr	r0, [pc, #132]	; (800265c <MX_FREERTOS_Init+0xc0>)
 80025d6:	f014 ff73 	bl	80174c0 <osThreadNew>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <MX_FREERTOS_Init+0xc4>)
 80025de:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <MX_FREERTOS_Init+0xc8>)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4820      	ldr	r0, [pc, #128]	; (8002668 <MX_FREERTOS_Init+0xcc>)
 80025e6:	f014 ff6b 	bl	80174c0 <osThreadNew>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a1f      	ldr	r2, [pc, #124]	; (800266c <MX_FREERTOS_Init+0xd0>)
 80025ee:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <MX_FREERTOS_Init+0xd4>)
 80025f2:	2100      	movs	r1, #0
 80025f4:	481f      	ldr	r0, [pc, #124]	; (8002674 <MX_FREERTOS_Init+0xd8>)
 80025f6:	f014 ff63 	bl	80174c0 <osThreadNew>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <MX_FREERTOS_Init+0xdc>)
 80025fe:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <MX_FREERTOS_Init+0xe0>)
 8002602:	2100      	movs	r1, #0
 8002604:	481e      	ldr	r0, [pc, #120]	; (8002680 <MX_FREERTOS_Init+0xe4>)
 8002606:	f014 ff5b 	bl	80174c0 <osThreadNew>
 800260a:	4603      	mov	r3, r0
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <MX_FREERTOS_Init+0xe8>)
 800260e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <MX_FREERTOS_Init+0xec>)
 8002612:	2100      	movs	r1, #0
 8002614:	481d      	ldr	r0, [pc, #116]	; (800268c <MX_FREERTOS_Init+0xf0>)
 8002616:	f014 ff53 	bl	80174c0 <osThreadNew>
 800261a:	4603      	mov	r3, r0
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <MX_FREERTOS_Init+0xf4>)
 800261e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002620:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <MX_FREERTOS_Init+0xf8>)
 8002622:	2100      	movs	r1, #0
 8002624:	481c      	ldr	r0, [pc, #112]	; (8002698 <MX_FREERTOS_Init+0xfc>)
 8002626:	f014 ff4b 	bl	80174c0 <osThreadNew>
 800262a:	4603      	mov	r3, r0
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <MX_FREERTOS_Init+0x100>)
 800262e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	0801b778 	.word	0x0801b778
 8002638:	080026a1 	.word	0x080026a1
 800263c:	240003e0 	.word	0x240003e0
 8002640:	0801b79c 	.word	0x0801b79c
 8002644:	080026c9 	.word	0x080026c9
 8002648:	24000640 	.word	0x24000640
 800264c:	0801b7c0 	.word	0x0801b7c0
 8002650:	080026f1 	.word	0x080026f1
 8002654:	240008a0 	.word	0x240008a0
 8002658:	0801b7e4 	.word	0x0801b7e4
 800265c:	08002719 	.word	0x08002719
 8002660:	24000b00 	.word	0x24000b00
 8002664:	0801b808 	.word	0x0801b808
 8002668:	08002791 	.word	0x08002791
 800266c:	24000d60 	.word	0x24000d60
 8002670:	0801b82c 	.word	0x0801b82c
 8002674:	08002809 	.word	0x08002809
 8002678:	24000fc0 	.word	0x24000fc0
 800267c:	0801b850 	.word	0x0801b850
 8002680:	08002831 	.word	0x08002831
 8002684:	24001220 	.word	0x24001220
 8002688:	0801b874 	.word	0x0801b874
 800268c:	08002881 	.word	0x08002881
 8002690:	24001480 	.word	0x24001480
 8002694:	0801b898 	.word	0x0801b898
 8002698:	08002981 	.word	0x08002981
 800269c:	240016e0 	.word	0x240016e0

080026a0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <PMT_init+0x24>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b0:	2200      	movs	r2, #0
 80026b2:	2101      	movs	r1, #1
 80026b4:	f015 f8c8 	bl	8017848 <osEventFlagsWait>

		create_pmt_packet();
 80026b8:	f001 fa76 	bl	8003ba8 <create_pmt_packet>

		osThreadYield();
 80026bc:	f014 ff92 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026c0:	e7f2      	b.n	80026a8 <PMT_init+0x8>
 80026c2:	bf00      	nop
 80026c4:	24001a94 	.word	0x24001a94

080026c8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <ERPA_init+0x24>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d8:	2200      	movs	r2, #0
 80026da:	2102      	movs	r1, #2
 80026dc:	f015 f8b4 	bl	8017848 <osEventFlagsWait>

		create_erpa_packet();
 80026e0:	f001 faa8 	bl	8003c34 <create_erpa_packet>

		osThreadYield();
 80026e4:	f014 ff7e 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026e8:	e7f2      	b.n	80026d0 <ERPA_init+0x8>
 80026ea:	bf00      	nop
 80026ec:	24001a94 	.word	0x24001a94

080026f0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HK_init+0x24>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002700:	2200      	movs	r2, #0
 8002702:	2104      	movs	r1, #4
 8002704:	f015 f8a0 	bl	8017848 <osEventFlagsWait>

		create_hk_packet();
 8002708:	f001 faf2 	bl	8003cf0 <create_hk_packet>

		osThreadYield();
 800270c:	f014 ff6a 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002710:	e7f2      	b.n	80026f8 <HK_init+0x8>
 8002712:	bf00      	nop
 8002714:	24001a94 	.word	0x24001a94

08002718 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <AUTOINIT_init+0x70>)
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002728:	2200      	movs	r2, #0
 800272a:	2104      	movs	r1, #4
 800272c:	f015 f88c 	bl	8017848 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e012      	b.n	800275c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <AUTOINIT_init+0x74>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <AUTOINIT_init+0x74>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	889b      	ldrh	r3, [r3, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	f009 fa1c 	bl	800bb88 <HAL_GPIO_WritePin>
			osDelay(100);
 8002750:	2064      	movs	r0, #100	; 0x64
 8002752:	f014 ffa9 	bl	80176a8 <osDelay>
		for (int i = 0; i < 7; i++) {
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3301      	adds	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b06      	cmp	r3, #6
 8002760:	dde9      	ble.n	8002736 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002762:	2308      	movs	r3, #8
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	e008      	b.n	800277a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f003 faba 	bl	8005ce8 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b0d      	cmp	r3, #13
 800277e:	ddf3      	ble.n	8002768 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002780:	f014 ff30 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002784:	e7cc      	b.n	8002720 <AUTOINIT_init+0x8>
 8002786:	bf00      	nop
 8002788:	24001a98 	.word	0x24001a98
 800278c:	0801b8bc 	.word	0x0801b8bc

08002790 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <AUTODEINIT_init+0x70>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a0:	2200      	movs	r2, #0
 80027a2:	2108      	movs	r1, #8
 80027a4:	f015 f850 	bl	8017848 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80027a8:	230d      	movs	r3, #13
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e008      	b.n	80027c0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fa97 	bl	8005ce8 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	dcf3      	bgt.n	80027ae <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80027c6:	2306      	movs	r3, #6
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	e012      	b.n	80027f2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <AUTODEINIT_init+0x74>)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <AUTODEINIT_init+0x74>)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	4619      	mov	r1, r3
 80027e2:	f009 f9d1 	bl	800bb88 <HAL_GPIO_WritePin>
			osDelay(100);
 80027e6:	2064      	movs	r0, #100	; 0x64
 80027e8:	f014 ff5e 	bl	80176a8 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dae9      	bge.n	80027cc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80027f8:	f014 fef4 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80027fc:	e7cc      	b.n	8002798 <AUTODEINIT_init+0x8>
 80027fe:	bf00      	nop
 8002800:	24001a98 	.word	0x24001a98
 8002804:	0801b8bc 	.word	0x0801b8bc

08002808 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <Voltage_Monitor_init+0x24>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	f015 f814 	bl	8017848 <osEventFlagsWait>
	  		osWaitForever);
	  set_rail_monitor();
 8002820:	f003 fa7e 	bl	8005d20 <set_rail_monitor>
	  monitor_rails();
 8002824:	f003 fb64 	bl	8005ef0 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002828:	e7f2      	b.n	8002810 <Voltage_Monitor_init+0x8>
 800282a:	bf00      	nop
 800282c:	24001a98 	.word	0x24001a98

08002830 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <STOP_init+0x44>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002840:	2200      	movs	r2, #0
 8002842:	2102      	movs	r1, #2
 8002844:	f015 f800 	bl	8017848 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <STOP_init+0x44>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f014 ffc8 	bl	80177e4 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <STOP_init+0x48>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2102      	movs	r1, #2
 800285a:	4618      	mov	r0, r3
 800285c:	f014 ff7e 	bl	801775c <osEventFlagsSet>
	  while (!IDLING) {};
 8002860:	bf00      	nop
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <STOP_init+0x4c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0fa      	beq.n	8002862 <STOP_init+0x32>

	  enter_stop();
 800286c:	f001 f96e 	bl	8003b4c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002870:	e7e2      	b.n	8002838 <STOP_init+0x8>
 8002872:	bf00      	nop
 8002874:	24001a98 	.word	0x24001a98
 8002878:	24001a9c 	.word	0x24001a9c
 800287c:	240000c4 	.word	0x240000c4

08002880 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <Science_init+0xd4>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002890:	2200      	movs	r2, #0
 8002892:	2101      	movs	r1, #1
 8002894:	f014 ffd8 	bl	8017848 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <Science_init+0xd8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f014 fec1 	bl	8017624 <osThreadSuspend>
		IDLING = 0;
 80028a2:	4b2e      	ldr	r3, [pc, #184]	; (800295c <Science_init+0xdc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e012      	b.n	80028d4 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <Science_init+0xe0>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <Science_init+0xe0>)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4619      	mov	r1, r3
 80028c4:	f009 f960 	bl	800bb88 <HAL_GPIO_WritePin>
			osDelay(200);
 80028c8:	20c8      	movs	r0, #200	; 0xc8
 80028ca:	f014 feed 	bl	80176a8 <osDelay>
		for (int i = 0; i < 9; i++) {
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	dde9      	ble.n	80028ae <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 80028da:	2306      	movs	r3, #6
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	e008      	b.n	80028f2 <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2101      	movs	r1, #1
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 f9fe 	bl	8005ce8 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	ddf3      	ble.n	80028e0 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <Science_init+0xd8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f014 feb2 	bl	8017666 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8002902:	b672      	cpsid	i
}
 8002904:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2320      	movs	r3, #32
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <Science_init+0xe4>)
 800290e:	2100      	movs	r1, #0
 8002910:	4815      	ldr	r0, [pc, #84]	; (8002968 <Science_init+0xe8>)
 8002912:	f005 fab5 	bl	8007e80 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <Science_init+0xec>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <Science_init+0xf0>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <Science_init+0xf4>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002928:	f001 fb24 	bl	8003f74 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <Science_init+0xf8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2104      	movs	r1, #4
 8002932:	4618      	mov	r0, r3
 8002934:	f014 ff12 	bl	801775c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002942:	2100      	movs	r1, #0
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <Science_init+0xfc>)
 8002946:	f010 fbd9 	bl	80130fc <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800294a:	b662      	cpsie	i
}
 800294c:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800294e:	f014 fe49 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002952:	e799      	b.n	8002888 <Science_init+0x8>
 8002954:	24001a9c 	.word	0x24001a9c
 8002958:	24000fc0 	.word	0x24000fc0
 800295c:	240000c4 	.word	0x240000c4
 8002960:	0801b8bc 	.word	0x0801b8bc
 8002964:	24000040 	.word	0x24000040
 8002968:	24000314 	.word	0x24000314
 800296c:	24001ae0 	.word	0x24001ae0
 8002970:	24001ae1 	.word	0x24001ae1
 8002974:	24001ae4 	.word	0x24001ae4
 8002978:	24001a94 	.word	0x24001a94
 800297c:	24001da4 	.word	0x24001da4

08002980 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002988:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <Idle_init+0xb4>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002990:	2200      	movs	r2, #0
 8002992:	2102      	movs	r1, #2
 8002994:	f014 ff58 	bl	8017848 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <Idle_init+0xb8>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800299e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80029a6:	2100      	movs	r1, #0
 80029a8:	4824      	ldr	r0, [pc, #144]	; (8002a3c <Idle_init+0xbc>)
 80029aa:	f010 fd01 	bl	80133b0 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <Idle_init+0xc0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80029b4:	2100      	movs	r1, #0
 80029b6:	4823      	ldr	r0, [pc, #140]	; (8002a44 <Idle_init+0xc4>)
 80029b8:	f005 fb22 	bl	8008000 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <Idle_init+0xc8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f014 fe2f 	bl	8017624 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 80029c6:	2311      	movs	r3, #17
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e008      	b.n	80029de <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f988 	bl	8005ce8 <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	dcf3      	bgt.n	80029cc <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80029e4:	2308      	movs	r3, #8
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	e012      	b.n	8002a10 <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <Idle_init+0xcc>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <Idle_init+0xcc>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	889b      	ldrh	r3, [r3, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	4619      	mov	r1, r3
 8002a00:	f009 f8c2 	bl	800bb88 <HAL_GPIO_WritePin>
			osDelay(200);
 8002a04:	20c8      	movs	r0, #200	; 0xc8
 8002a06:	f014 fe4f 	bl	80176a8 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dae9      	bge.n	80029ea <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 8002a16:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002a1a:	f014 fe45 	bl	80176a8 <osDelay>
		IDLING = 1;
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <Idle_init+0xd0>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <Idle_init+0xc8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f014 fe1c 	bl	8017666 <osThreadResume>

		// Yield thread control
		osThreadYield();
 8002a2e:	f014 fdd9 	bl	80175e4 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002a32:	e7a9      	b.n	8002988 <Idle_init+0x8>
 8002a34:	24001a9c 	.word	0x24001a9c
 8002a38:	24001ae1 	.word	0x24001ae1
 8002a3c:	24001da4 	.word	0x24001da4
 8002a40:	24001ae0 	.word	0x24001ae0
 8002a44:	24000314 	.word	0x24000314
 8002a48:	24000fc0 	.word	0x24000fc0
 8002a4c:	0801b8bc 	.word	0x0801b8bc
 8002a50:	240000c4 	.word	0x240000c4

08002a54 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <MX_GPIO_Init+0xe8>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002ae8:	4815      	ldr	r0, [pc, #84]	; (8002b40 <MX_GPIO_Init+0xec>)
 8002aea:	f009 f84d 	bl	800bb88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2164      	movs	r1, #100	; 0x64
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <MX_GPIO_Init+0xf0>)
 8002af4:	f009 f848 	bl	800bb88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002af8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002afc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <MX_GPIO_Init+0xec>)
 8002b12:	f008 fe71 	bl	800b7f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002b16:	2364      	movs	r3, #100	; 0x64
 8002b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_GPIO_Init+0xf0>)
 8002b2e:	f008 fe63 	bl	800b7f8 <HAL_GPIO_Init>

}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	58020800 	.word	0x58020800
 8002b44:	58020400 	.word	0x58020400

08002b48 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <MX_I2C1_Init+0x7c>)
 8002b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <MX_I2C1_Init+0x80>)
 8002b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b82:	480f      	ldr	r0, [pc, #60]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b84:	f009 f81a 	bl	800bbbc <HAL_I2C_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b8e:	f000 fffb 	bl	8003b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b92:	2100      	movs	r1, #0
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002b96:	f00b fab9 	bl	800e10c <HAL_I2CEx_ConfigAnalogFilter>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ba0:	f000 fff2 	bl	8003b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <MX_I2C1_Init+0x78>)
 8002ba8:	f00b fafb 	bl	800e1a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bb2:	f000 ffe9 	bl	8003b88 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f00b fb40 	bl	800e23c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	24001940 	.word	0x24001940
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	00100517 	.word	0x00100517

08002bcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0ba      	sub	sp, #232	; 0xe8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	22c0      	movs	r2, #192	; 0xc0
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f017 ff7d 	bl	801aaec <memset>
  if(i2cHandle->Instance==I2C1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_I2C_MspInit+0x1a0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	f040 80b3 	bne.w	8002d64 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bfe:	f04f 0208 	mov.w	r2, #8
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00c fbe3 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002c20:	f000 ffb2 	bl	8003b88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c24:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	4a51      	ldr	r2, [pc, #324]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4a:	2312      	movs	r3, #18
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4842      	ldr	r0, [pc, #264]	; (8002d74 <HAL_I2C_MspInit+0x1a8>)
 8002c6a:	f008 fdc5 	bl	800b7f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c74:	4a3e      	ldr	r2, [pc, #248]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <HAL_I2C_MspInit+0x1a4>)
 8002c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002c8e:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_I2C_MspInit+0x1b0>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002c94:	2222      	movs	r2, #34	; 0x22
 8002c96:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002caa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cac:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cc4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002ccc:	482a      	ldr	r0, [pc, #168]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002cce:	f005 fc63 	bl	8008598 <HAL_DMA_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002cd8:	f000 ff56 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <HAL_I2C_MspInit+0x1ac>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_I2C_MspInit+0x1b8>)
 8002cec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d20:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d28:	4815      	ldr	r0, [pc, #84]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d2a:	f005 fc35 	bl	8008598 <HAL_DMA_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002d34:	f000 ff28 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_I2C_MspInit+0x1b4>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2105      	movs	r1, #5
 8002d48:	201f      	movs	r0, #31
 8002d4a:	f004 fff7 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d4e:	201f      	movs	r0, #31
 8002d50:	f005 f80e 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2105      	movs	r1, #5
 8002d58:	2020      	movs	r0, #32
 8002d5a:	f004 ffef 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d5e:	2020      	movs	r0, #32
 8002d60:	f005 f806 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d64:	bf00      	nop
 8002d66:	37e8      	adds	r7, #232	; 0xe8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40005400 	.word	0x40005400
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58020400 	.word	0x58020400
 8002d78:	24001994 	.word	0x24001994
 8002d7c:	400200a0 	.word	0x400200a0
 8002d80:	24001a0c 	.word	0x24001a0c
 8002d84:	400200b8 	.word	0x400200b8

08002d88 <__NVIC_SystemReset>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d8c:	f3bf 8f4f 	dsb	sy
}
 8002d90:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <__NVIC_SystemReset+0x24>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <__NVIC_SystemReset+0x24>)
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_SystemReset+0x28>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002da2:	f3bf 8f4f 	dsb	sy
}
 8002da6:	bf00      	nop
    __NOP();
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <__NVIC_SystemReset+0x20>
 8002dac:	e000ed00 	.word	0xe000ed00
 8002db0:	05fa0004 	.word	0x05fa0004

08002db4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d106      	bne.n	8002dd2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f014 fcc6 	bl	801775c <osEventFlagsSet>


	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002dd0:	e035      	b.n	8002e3e <HAL_TIM_OC_DelayElapsedCallback+0x8a>
	else if (htim == &htim2) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12e      	bne.n	8002e38 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		if (ERPA_ENABLED) {
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f014 fcb6 	bl	801775c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d113      	bne.n	8002e22 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f014 fcab 	bl	801775c <osEventFlagsSet>
			if (HK_ENABLED){
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2104      	movs	r1, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f014 fca0 	bl	801775c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e2e:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002e32:	f00b fa27 	bl	800e284 <HAL_IWDG_Refresh>
}
 8002e36:	e002      	b.n	8002e3e <HAL_TIM_OC_DelayElapsedCallback+0x8a>
		printf("Unknown Timer Interrupt\n");
 8002e38:	480b      	ldr	r0, [pc, #44]	; (8002e68 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8002e3a:	f017 fecd 	bl	801abd8 <puts>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24001da4 	.word	0x24001da4
 8002e4c:	24001a94 	.word	0x24001a94
 8002e50:	24001df0 	.word	0x24001df0
 8002e54:	24001ae1 	.word	0x24001ae1
 8002e58:	24001ae8 	.word	0x24001ae8
 8002e5c:	24001a98 	.word	0x24001a98
 8002e60:	24001ae0 	.word	0x24001ae0
 8002e64:	24001a84 	.word	0x24001a84
 8002e68:	0801b588 	.word	0x0801b588

08002e6c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002e74:	2201      	movs	r2, #1
 8002e76:	49f7      	ldr	r1, [pc, #988]	; (8003254 <HAL_UART_RxCpltCallback+0x3e8>)
 8002e78:	48f7      	ldr	r0, [pc, #988]	; (8003258 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e7a:	f011 fe1f 	bl	8014abc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002e7e:	4bf5      	ldr	r3, [pc, #980]	; (8003254 <HAL_UART_RxCpltCallback+0x3e8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2bef      	cmp	r3, #239	; 0xef
 8002e88:	f200 843e 	bhi.w	8003708 <HAL_UART_RxCpltCallback+0x89c>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_UART_RxCpltCallback+0x28>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08003271 	.word	0x08003271
 8002e98:	080032a1 	.word	0x080032a1
 8002e9c:	08003311 	.word	0x08003311
 8002ea0:	0800334b 	.word	0x0800334b
 8002ea4:	08003383 	.word	0x08003383
 8002ea8:	080033bd 	.word	0x080033bd
 8002eac:	080033f9 	.word	0x080033f9
 8002eb0:	08003435 	.word	0x08003435
 8002eb4:	0800346f 	.word	0x0800346f
 8002eb8:	080034a3 	.word	0x080034a3
 8002ebc:	080034d7 	.word	0x080034d7
 8002ec0:	08003509 	.word	0x08003509
 8002ec4:	08003533 	.word	0x08003533
 8002ec8:	0800360f 	.word	0x0800360f
 8002ecc:	08003677 	.word	0x08003677
 8002ed0:	0800369f 	.word	0x0800369f
 8002ed4:	0800325d 	.word	0x0800325d
 8002ed8:	08003285 	.word	0x08003285
 8002edc:	080032f3 	.word	0x080032f3
 8002ee0:	0800332f 	.word	0x0800332f
 8002ee4:	08003367 	.word	0x08003367
 8002ee8:	0800339f 	.word	0x0800339f
 8002eec:	080033db 	.word	0x080033db
 8002ef0:	08003417 	.word	0x08003417
 8002ef4:	08003453 	.word	0x08003453
 8002ef8:	0800348b 	.word	0x0800348b
 8002efc:	080034b3 	.word	0x080034b3
 8002f00:	080034ed 	.word	0x080034ed
 8002f04:	08003519 	.word	0x08003519
 8002f08:	080035cd 	.word	0x080035cd
 8002f0c:	0800364f 	.word	0x0800364f
 8002f10:	08003709 	.word	0x08003709
 8002f14:	08003709 	.word	0x08003709
 8002f18:	08003709 	.word	0x08003709
 8002f1c:	08003709 	.word	0x08003709
 8002f20:	08003709 	.word	0x08003709
 8002f24:	08003709 	.word	0x08003709
 8002f28:	08003709 	.word	0x08003709
 8002f2c:	08003709 	.word	0x08003709
 8002f30:	08003709 	.word	0x08003709
 8002f34:	08003709 	.word	0x08003709
 8002f38:	08003709 	.word	0x08003709
 8002f3c:	08003709 	.word	0x08003709
 8002f40:	08003709 	.word	0x08003709
 8002f44:	08003709 	.word	0x08003709
 8002f48:	08003709 	.word	0x08003709
 8002f4c:	08003709 	.word	0x08003709
 8002f50:	08003709 	.word	0x08003709
 8002f54:	08003709 	.word	0x08003709
 8002f58:	08003709 	.word	0x08003709
 8002f5c:	08003709 	.word	0x08003709
 8002f60:	08003709 	.word	0x08003709
 8002f64:	08003709 	.word	0x08003709
 8002f68:	08003709 	.word	0x08003709
 8002f6c:	08003709 	.word	0x08003709
 8002f70:	08003709 	.word	0x08003709
 8002f74:	08003709 	.word	0x08003709
 8002f78:	08003709 	.word	0x08003709
 8002f7c:	08003709 	.word	0x08003709
 8002f80:	08003709 	.word	0x08003709
 8002f84:	08003709 	.word	0x08003709
 8002f88:	08003709 	.word	0x08003709
 8002f8c:	08003709 	.word	0x08003709
 8002f90:	08003709 	.word	0x08003709
 8002f94:	08003709 	.word	0x08003709
 8002f98:	08003709 	.word	0x08003709
 8002f9c:	08003709 	.word	0x08003709
 8002fa0:	08003709 	.word	0x08003709
 8002fa4:	08003709 	.word	0x08003709
 8002fa8:	08003709 	.word	0x08003709
 8002fac:	08003709 	.word	0x08003709
 8002fb0:	08003709 	.word	0x08003709
 8002fb4:	08003709 	.word	0x08003709
 8002fb8:	08003709 	.word	0x08003709
 8002fbc:	08003709 	.word	0x08003709
 8002fc0:	08003709 	.word	0x08003709
 8002fc4:	08003709 	.word	0x08003709
 8002fc8:	08003709 	.word	0x08003709
 8002fcc:	08003709 	.word	0x08003709
 8002fd0:	08003709 	.word	0x08003709
 8002fd4:	08003709 	.word	0x08003709
 8002fd8:	08003709 	.word	0x08003709
 8002fdc:	08003709 	.word	0x08003709
 8002fe0:	08003709 	.word	0x08003709
 8002fe4:	08003709 	.word	0x08003709
 8002fe8:	08003709 	.word	0x08003709
 8002fec:	08003709 	.word	0x08003709
 8002ff0:	08003709 	.word	0x08003709
 8002ff4:	08003709 	.word	0x08003709
 8002ff8:	08003709 	.word	0x08003709
 8002ffc:	08003709 	.word	0x08003709
 8003000:	08003709 	.word	0x08003709
 8003004:	08003709 	.word	0x08003709
 8003008:	08003709 	.word	0x08003709
 800300c:	08003709 	.word	0x08003709
 8003010:	08003709 	.word	0x08003709
 8003014:	08003709 	.word	0x08003709
 8003018:	08003709 	.word	0x08003709
 800301c:	08003709 	.word	0x08003709
 8003020:	08003709 	.word	0x08003709
 8003024:	08003709 	.word	0x08003709
 8003028:	08003709 	.word	0x08003709
 800302c:	08003709 	.word	0x08003709
 8003030:	08003709 	.word	0x08003709
 8003034:	08003709 	.word	0x08003709
 8003038:	08003709 	.word	0x08003709
 800303c:	08003709 	.word	0x08003709
 8003040:	08003709 	.word	0x08003709
 8003044:	08003709 	.word	0x08003709
 8003048:	08003709 	.word	0x08003709
 800304c:	08003709 	.word	0x08003709
 8003050:	08003709 	.word	0x08003709
 8003054:	08003709 	.word	0x08003709
 8003058:	08003709 	.word	0x08003709
 800305c:	08003709 	.word	0x08003709
 8003060:	08003709 	.word	0x08003709
 8003064:	08003709 	.word	0x08003709
 8003068:	08003709 	.word	0x08003709
 800306c:	08003709 	.word	0x08003709
 8003070:	08003709 	.word	0x08003709
 8003074:	08003709 	.word	0x08003709
 8003078:	08003709 	.word	0x08003709
 800307c:	08003709 	.word	0x08003709
 8003080:	08003709 	.word	0x08003709
 8003084:	08003709 	.word	0x08003709
 8003088:	08003709 	.word	0x08003709
 800308c:	08003709 	.word	0x08003709
 8003090:	08003709 	.word	0x08003709
 8003094:	08003709 	.word	0x08003709
 8003098:	08003709 	.word	0x08003709
 800309c:	08003709 	.word	0x08003709
 80030a0:	08003709 	.word	0x08003709
 80030a4:	08003709 	.word	0x08003709
 80030a8:	08003709 	.word	0x08003709
 80030ac:	08003709 	.word	0x08003709
 80030b0:	08003709 	.word	0x08003709
 80030b4:	08003709 	.word	0x08003709
 80030b8:	08003709 	.word	0x08003709
 80030bc:	08003709 	.word	0x08003709
 80030c0:	08003709 	.word	0x08003709
 80030c4:	08003709 	.word	0x08003709
 80030c8:	08003709 	.word	0x08003709
 80030cc:	08003709 	.word	0x08003709
 80030d0:	08003709 	.word	0x08003709
 80030d4:	08003709 	.word	0x08003709
 80030d8:	08003709 	.word	0x08003709
 80030dc:	08003709 	.word	0x08003709
 80030e0:	08003709 	.word	0x08003709
 80030e4:	08003709 	.word	0x08003709
 80030e8:	08003709 	.word	0x08003709
 80030ec:	08003709 	.word	0x08003709
 80030f0:	08003709 	.word	0x08003709
 80030f4:	08003709 	.word	0x08003709
 80030f8:	08003709 	.word	0x08003709
 80030fc:	08003709 	.word	0x08003709
 8003100:	08003709 	.word	0x08003709
 8003104:	08003709 	.word	0x08003709
 8003108:	08003709 	.word	0x08003709
 800310c:	08003709 	.word	0x08003709
 8003110:	08003709 	.word	0x08003709
 8003114:	08003709 	.word	0x08003709
 8003118:	08003709 	.word	0x08003709
 800311c:	08003709 	.word	0x08003709
 8003120:	08003709 	.word	0x08003709
 8003124:	08003709 	.word	0x08003709
 8003128:	08003709 	.word	0x08003709
 800312c:	08003709 	.word	0x08003709
 8003130:	08003709 	.word	0x08003709
 8003134:	08003709 	.word	0x08003709
 8003138:	08003709 	.word	0x08003709
 800313c:	08003709 	.word	0x08003709
 8003140:	08003709 	.word	0x08003709
 8003144:	08003709 	.word	0x08003709
 8003148:	08003709 	.word	0x08003709
 800314c:	08003709 	.word	0x08003709
 8003150:	080036db 	.word	0x080036db
 8003154:	08003709 	.word	0x08003709
 8003158:	08003709 	.word	0x08003709
 800315c:	08003709 	.word	0x08003709
 8003160:	08003709 	.word	0x08003709
 8003164:	08003709 	.word	0x08003709
 8003168:	08003709 	.word	0x08003709
 800316c:	08003709 	.word	0x08003709
 8003170:	08003709 	.word	0x08003709
 8003174:	08003709 	.word	0x08003709
 8003178:	08003709 	.word	0x08003709
 800317c:	08003709 	.word	0x08003709
 8003180:	08003709 	.word	0x08003709
 8003184:	08003709 	.word	0x08003709
 8003188:	08003709 	.word	0x08003709
 800318c:	08003709 	.word	0x08003709
 8003190:	080036e1 	.word	0x080036e1
 8003194:	08003709 	.word	0x08003709
 8003198:	08003709 	.word	0x08003709
 800319c:	08003709 	.word	0x08003709
 80031a0:	08003709 	.word	0x08003709
 80031a4:	08003709 	.word	0x08003709
 80031a8:	08003709 	.word	0x08003709
 80031ac:	08003709 	.word	0x08003709
 80031b0:	08003709 	.word	0x08003709
 80031b4:	08003709 	.word	0x08003709
 80031b8:	08003709 	.word	0x08003709
 80031bc:	08003709 	.word	0x08003709
 80031c0:	08003709 	.word	0x08003709
 80031c4:	08003709 	.word	0x08003709
 80031c8:	08003709 	.word	0x08003709
 80031cc:	08003709 	.word	0x08003709
 80031d0:	080036ef 	.word	0x080036ef
 80031d4:	080036c7 	.word	0x080036c7
 80031d8:	08003709 	.word	0x08003709
 80031dc:	08003709 	.word	0x08003709
 80031e0:	08003709 	.word	0x08003709
 80031e4:	08003709 	.word	0x08003709
 80031e8:	08003709 	.word	0x08003709
 80031ec:	08003709 	.word	0x08003709
 80031f0:	08003709 	.word	0x08003709
 80031f4:	08003709 	.word	0x08003709
 80031f8:	08003709 	.word	0x08003709
 80031fc:	08003709 	.word	0x08003709
 8003200:	08003709 	.word	0x08003709
 8003204:	08003709 	.word	0x08003709
 8003208:	08003709 	.word	0x08003709
 800320c:	08003709 	.word	0x08003709
 8003210:	080036fd 	.word	0x080036fd
 8003214:	080036b3 	.word	0x080036b3
 8003218:	08003709 	.word	0x08003709
 800321c:	08003709 	.word	0x08003709
 8003220:	08003709 	.word	0x08003709
 8003224:	08003709 	.word	0x08003709
 8003228:	08003709 	.word	0x08003709
 800322c:	08003709 	.word	0x08003709
 8003230:	08003709 	.word	0x08003709
 8003234:	08003709 	.word	0x08003709
 8003238:	08003709 	.word	0x08003709
 800323c:	08003709 	.word	0x08003709
 8003240:	08003709 	.word	0x08003709
 8003244:	08003709 	.word	0x08003709
 8003248:	08003709 	.word	0x08003709
 800324c:	08003709 	.word	0x08003709
 8003250:	08003703 	.word	0x08003703
 8003254:	24001aa0 	.word	0x24001aa0
 8003258:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 800325c:	48b8      	ldr	r0, [pc, #736]	; (8003540 <HAL_UART_RxCpltCallback+0x6d4>)
 800325e:	f017 fcbb 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003262:	4bb8      	ldr	r3, [pc, #736]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003264:	2104      	movs	r1, #4
 8003266:	2201      	movs	r2, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f008 fc8d 	bl	800bb88 <HAL_GPIO_WritePin>
		break;
 800326e:	e256      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003270:	48b5      	ldr	r0, [pc, #724]	; (8003548 <HAL_UART_RxCpltCallback+0x6dc>)
 8003272:	f017 fcb1 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003276:	4bb3      	ldr	r3, [pc, #716]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003278:	2104      	movs	r1, #4
 800327a:	2200      	movs	r2, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f008 fc83 	bl	800bb88 <HAL_GPIO_WritePin>
		break;
 8003282:	e24c      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003284:	48b1      	ldr	r0, [pc, #708]	; (800354c <HAL_UART_RxCpltCallback+0x6e0>)
 8003286:	f017 fca7 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800328a:	4bae      	ldr	r3, [pc, #696]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 800328c:	2120      	movs	r1, #32
 800328e:	2201      	movs	r2, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f008 fc79 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003296:	2101      	movs	r1, #1
 8003298:	2008      	movs	r0, #8
 800329a:	f002 fd25 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 800329e:	e23e      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80032a0:	48ab      	ldr	r0, [pc, #684]	; (8003550 <HAL_UART_RxCpltCallback+0x6e4>)
 80032a2:	f017 fc99 	bl	801abd8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80032a6:	2308      	movs	r3, #8
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e00f      	b.n	80032cc <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80032ac:	4aa9      	ldr	r2, [pc, #676]	; (8003554 <HAL_UART_RxCpltCallback+0x6e8>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80032b4:	4aa7      	ldr	r2, [pc, #668]	; (8003554 <HAL_UART_RxCpltCallback+0x6e8>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	889b      	ldrh	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	f008 fc61 	bl	800bb88 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	dcec      	bgt.n	80032ac <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80032d2:	2310      	movs	r3, #16
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e008      	b.n	80032ea <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fd02 	bl	8005ce8 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	dcf3      	bgt.n	80032d8 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 80032f0:	e215      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80032f2:	4899      	ldr	r0, [pc, #612]	; (8003558 <HAL_UART_RxCpltCallback+0x6ec>)
 80032f4:	f017 fc70 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80032f8:	4b98      	ldr	r3, [pc, #608]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80032fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032fe:	2201      	movs	r2, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f008 fc41 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003306:	2101      	movs	r1, #1
 8003308:	2009      	movs	r0, #9
 800330a:	f002 fced 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 800330e:	e206      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003310:	4893      	ldr	r0, [pc, #588]	; (8003560 <HAL_UART_RxCpltCallback+0x6f4>)
 8003312:	f017 fc61 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003316:	4b91      	ldr	r3, [pc, #580]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800331c:	2200      	movs	r2, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f008 fc32 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003324:	2100      	movs	r1, #0
 8003326:	2009      	movs	r0, #9
 8003328:	f002 fcde 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 800332c:	e1f7      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800332e:	488d      	ldr	r0, [pc, #564]	; (8003564 <HAL_UART_RxCpltCallback+0x6f8>)
 8003330:	f017 fc52 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003334:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	2201      	movs	r2, #1
 800333a:	4618      	mov	r0, r3
 800333c:	f008 fc24 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003340:	2101      	movs	r1, #1
 8003342:	200a      	movs	r0, #10
 8003344:	f002 fcd0 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 8003348:	e1e9      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800334a:	4887      	ldr	r0, [pc, #540]	; (8003568 <HAL_UART_RxCpltCallback+0x6fc>)
 800334c:	f017 fc44 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f008 fc16 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800335c:	2100      	movs	r1, #0
 800335e:	200a      	movs	r0, #10
 8003360:	f002 fcc2 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 8003364:	e1db      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8003366:	4881      	ldr	r0, [pc, #516]	; (800356c <HAL_UART_RxCpltCallback+0x700>)
 8003368:	f017 fc36 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800336c:	4b7b      	ldr	r3, [pc, #492]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	2201      	movs	r2, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f008 fc08 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003378:	2101      	movs	r1, #1
 800337a:	200b      	movs	r0, #11
 800337c:	f002 fcb4 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 8003380:	e1cd      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003382:	487b      	ldr	r0, [pc, #492]	; (8003570 <HAL_UART_RxCpltCallback+0x704>)
 8003384:	f017 fc28 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003388:	4b74      	ldr	r3, [pc, #464]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	2200      	movs	r2, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f008 fbfa 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003394:	2100      	movs	r1, #0
 8003396:	200b      	movs	r0, #11
 8003398:	f002 fca6 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 800339c:	e1bf      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800339e:	4875      	ldr	r0, [pc, #468]	; (8003574 <HAL_UART_RxCpltCallback+0x708>)
 80033a0:	f017 fc1a 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80033a4:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033aa:	2201      	movs	r2, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f008 fbeb 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80033b2:	2101      	movs	r1, #1
 80033b4:	200c      	movs	r0, #12
 80033b6:	f002 fc97 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 80033ba:	e1b0      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80033bc:	486e      	ldr	r0, [pc, #440]	; (8003578 <HAL_UART_RxCpltCallback+0x70c>)
 80033be:	f017 fc0b 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033c8:	2200      	movs	r2, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f008 fbdc 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	200c      	movs	r0, #12
 80033d4:	f002 fc88 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 80033d8:	e1a1      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80033da:	4868      	ldr	r0, [pc, #416]	; (800357c <HAL_UART_RxCpltCallback+0x710>)
 80033dc:	f017 fbfc 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e6:	2201      	movs	r2, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f008 fbcd 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80033ee:	2101      	movs	r1, #1
 80033f0:	200d      	movs	r0, #13
 80033f2:	f002 fc79 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 80033f6:	e192      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80033f8:	4861      	ldr	r0, [pc, #388]	; (8003580 <HAL_UART_RxCpltCallback+0x714>)
 80033fa:	f017 fbed 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003404:	2200      	movs	r2, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f008 fbbe 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800340c:	2100      	movs	r1, #0
 800340e:	200d      	movs	r0, #13
 8003410:	f002 fc6a 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 8003414:	e183      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003416:	485b      	ldr	r0, [pc, #364]	; (8003584 <HAL_UART_RxCpltCallback+0x718>)
 8003418:	f017 fbde 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800341e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003422:	2201      	movs	r2, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f008 fbaf 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800342a:	2101      	movs	r1, #1
 800342c:	200f      	movs	r0, #15
 800342e:	f002 fc5b 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 8003432:	e174      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003434:	4854      	ldr	r0, [pc, #336]	; (8003588 <HAL_UART_RxCpltCallback+0x71c>)
 8003436:	f017 fbcf 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800343c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f008 fba0 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003448:	2100      	movs	r1, #0
 800344a:	200f      	movs	r0, #15
 800344c:	f002 fc4c 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 8003450:	e165      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003452:	484e      	ldr	r0, [pc, #312]	; (800358c <HAL_UART_RxCpltCallback+0x720>)
 8003454:	f017 fbc0 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	2201      	movs	r2, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f008 fb92 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003464:	2101      	movs	r1, #1
 8003466:	2010      	movs	r0, #16
 8003468:	f002 fc3e 	bl	8005ce8 <set_rail_monitor_enable>

		break;
 800346c:	e157      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800346e:	4848      	ldr	r0, [pc, #288]	; (8003590 <HAL_UART_RxCpltCallback+0x724>)
 8003470:	f017 fbb2 	bl	801abd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003474:	4b33      	ldr	r3, [pc, #204]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f008 fb84 	bl	800bb88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003480:	2100      	movs	r1, #0
 8003482:	2010      	movs	r0, #16
 8003484:	f002 fc30 	bl	8005ce8 <set_rail_monitor_enable>
		break;
 8003488:	e149      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800348a:	4842      	ldr	r0, [pc, #264]	; (8003594 <HAL_UART_RxCpltCallback+0x728>)
 800348c:	f017 fba4 	bl	801abd8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2320      	movs	r3, #32
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <HAL_UART_RxCpltCallback+0x72c>)
 8003498:	2100      	movs	r1, #0
 800349a:	4840      	ldr	r0, [pc, #256]	; (800359c <HAL_UART_RxCpltCallback+0x730>)
 800349c:	f004 fcf0 	bl	8007e80 <HAL_DAC_Start_DMA>
		break;
 80034a0:	e13d      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80034a2:	483f      	ldr	r0, [pc, #252]	; (80035a0 <HAL_UART_RxCpltCallback+0x734>)
 80034a4:	f017 fb98 	bl	801abd8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80034a8:	2100      	movs	r1, #0
 80034aa:	483c      	ldr	r0, [pc, #240]	; (800359c <HAL_UART_RxCpltCallback+0x730>)
 80034ac:	f004 fda8 	bl	8008000 <HAL_DAC_Stop_DMA>
		break;
 80034b0:	e135      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80034b2:	483c      	ldr	r0, [pc, #240]	; (80035a4 <HAL_UART_RxCpltCallback+0x738>)
 80034b4:	f017 fb90 	bl	801abd8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f014 f94c 	bl	801775c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80034c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_UART_RxCpltCallback+0x740>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]

		break;
 80034d4:	e123      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80034d6:	4836      	ldr	r0, [pc, #216]	; (80035b0 <HAL_UART_RxCpltCallback+0x744>)
 80034d8:	f017 fb7e 	bl	801abd8 <puts>
		ERPA_ENABLED = 0;
 80034dc:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_UART_RxCpltCallback+0x740>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80034e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80034ea:	e118      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80034ec:	4831      	ldr	r0, [pc, #196]	; (80035b4 <HAL_UART_RxCpltCallback+0x748>)
 80034ee:	f017 fb73 	bl	801abd8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80034f2:	2100      	movs	r1, #0
 80034f4:	4830      	ldr	r0, [pc, #192]	; (80035b8 <HAL_UART_RxCpltCallback+0x74c>)
 80034f6:	f00f fe01 	bl	80130fc <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f014 f92b 	bl	801775c <osEventFlagsSet>
		break;
 8003506:	e10a      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003508:	482c      	ldr	r0, [pc, #176]	; (80035bc <HAL_UART_RxCpltCallback+0x750>)
 800350a:	f017 fb65 	bl	801abd8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800350e:	2100      	movs	r1, #0
 8003510:	4829      	ldr	r0, [pc, #164]	; (80035b8 <HAL_UART_RxCpltCallback+0x74c>)
 8003512:	f00f ff4d 	bl	80133b0 <HAL_TIM_OC_Stop_IT>
		break;
 8003516:	e102      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003518:	4829      	ldr	r0, [pc, #164]	; (80035c0 <HAL_UART_RxCpltCallback+0x754>)
 800351a:	f017 fb5d 	bl	801abd8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2104      	movs	r1, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f014 f919 	bl	801775c <osEventFlagsSet>
		HK_ENABLED = 1;
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_UART_RxCpltCallback+0x758>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
		break;
 8003530:	e0f5      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003532:	4825      	ldr	r0, [pc, #148]	; (80035c8 <HAL_UART_RxCpltCallback+0x75c>)
 8003534:	f017 fb50 	bl	801abd8 <puts>
		HK_ENABLED = 0;
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_UART_RxCpltCallback+0x758>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
		break;
 800353e:	e0ee      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
 8003540:	0801b5a0 	.word	0x0801b5a0
 8003544:	58020400 	.word	0x58020400
 8003548:	0801b5a8 	.word	0x0801b5a8
 800354c:	0801b5b4 	.word	0x0801b5b4
 8003550:	0801b5c0 	.word	0x0801b5c0
 8003554:	0801b8bc 	.word	0x0801b8bc
 8003558:	0801b5cc 	.word	0x0801b5cc
 800355c:	58020800 	.word	0x58020800
 8003560:	0801b5d8 	.word	0x0801b5d8
 8003564:	0801b5e8 	.word	0x0801b5e8
 8003568:	0801b5f4 	.word	0x0801b5f4
 800356c:	0801b600 	.word	0x0801b600
 8003570:	0801b60c 	.word	0x0801b60c
 8003574:	0801b61c 	.word	0x0801b61c
 8003578:	0801b628 	.word	0x0801b628
 800357c:	0801b634 	.word	0x0801b634
 8003580:	0801b640 	.word	0x0801b640
 8003584:	0801b64c 	.word	0x0801b64c
 8003588:	0801b65c 	.word	0x0801b65c
 800358c:	0801b66c 	.word	0x0801b66c
 8003590:	0801b678 	.word	0x0801b678
 8003594:	0801b688 	.word	0x0801b688
 8003598:	24000040 	.word	0x24000040
 800359c:	24000314 	.word	0x24000314
 80035a0:	0801b698 	.word	0x0801b698
 80035a4:	0801b6a8 	.word	0x0801b6a8
 80035a8:	24001a94 	.word	0x24001a94
 80035ac:	24001ae1 	.word	0x24001ae1
 80035b0:	0801b6b0 	.word	0x0801b6b0
 80035b4:	0801b6bc 	.word	0x0801b6bc
 80035b8:	24001da4 	.word	0x24001da4
 80035bc:	0801b6c4 	.word	0x0801b6c4
 80035c0:	0801b6cc 	.word	0x0801b6cc
 80035c4:	24001ae0 	.word	0x24001ae0
 80035c8:	0801b6d4 	.word	0x0801b6d4
	}
	case 0x1D: {
		printf("Step Up\n");
 80035cc:	4856      	ldr	r0, [pc, #344]	; (8003728 <HAL_UART_RxCpltCallback+0x8bc>)
 80035ce:	f017 fb03 	bl	801abd8 <puts>
		if (step < 14) {
 80035d2:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b0d      	cmp	r3, #13
 80035da:	f200 8099 	bhi.w	8003710 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 80035de:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3302      	adds	r3, #2
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035ea:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80035ec:	4b4f      	ldr	r3, [pc, #316]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <HAL_UART_RxCpltCallback+0x8c4>)
 80035f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	484d      	ldr	r0, [pc, #308]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003600:	f004 fda1 	bl	8008146 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003604:	2100      	movs	r1, #0
 8003606:	484b      	ldr	r0, [pc, #300]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003608:	f004 fbe2 	bl	8007dd0 <HAL_DAC_Start>
		}
		break;
 800360c:	e080      	b.n	8003710 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800360e:	484a      	ldr	r0, [pc, #296]	; (8003738 <HAL_UART_RxCpltCallback+0x8cc>)
 8003610:	f017 fae2 	bl	801abd8 <puts>
		if (step > 1) {
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d97a      	bls.n	8003714 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b02      	subs	r3, #2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 800362a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_UART_RxCpltCallback+0x8c4>)
 8003636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	483d      	ldr	r0, [pc, #244]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003640:	f004 fd81 	bl	8008146 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003644:	2100      	movs	r1, #0
 8003646:	483b      	ldr	r0, [pc, #236]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003648:	f004 fbc2 	bl	8007dd0 <HAL_DAC_Start>
		}
		break;
 800364c:	e062      	b.n	8003714 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <HAL_UART_RxCpltCallback+0x8d0>)
 8003650:	f017 fac2 	bl	801abd8 <puts>
		if (cadence <= 50000) {
 8003654:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f24c 3250 	movw	r2, #50000	; 0xc350
 800365c:	4293      	cmp	r3, r2
 800365e:	d85b      	bhi.n	8003718 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4a36      	ldr	r2, [pc, #216]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003668:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800366a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003674:	e050      	b.n	8003718 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003676:	4833      	ldr	r0, [pc, #204]	; (8003744 <HAL_UART_RxCpltCallback+0x8d8>)
 8003678:	f017 faae 	bl	801abd8 <puts>
		if (cadence >= 6250) {
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f641 0269 	movw	r2, #6249	; 0x1869
 8003684:	4293      	cmp	r3, r2
 8003686:	d949      	bls.n	800371c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003690:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800369c:	e03e      	b.n	800371c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800369e:	482a      	ldr	r0, [pc, #168]	; (8003748 <HAL_UART_RxCpltCallback+0x8dc>)
 80036a0:	f017 fa9a 	bl	801abd8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f014 f856 	bl	801775c <osEventFlagsSet>
		break;
 80036b0:	e035      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80036b2:	4827      	ldr	r0, [pc, #156]	; (8003750 <HAL_UART_RxCpltCallback+0x8e4>)
 80036b4:	f017 fa90 	bl	801abd8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2104      	movs	r1, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f014 f84c 	bl	801775c <osEventFlagsSet>
		break;
 80036c4:	e02b      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80036c6:	4823      	ldr	r0, [pc, #140]	; (8003754 <HAL_UART_RxCpltCallback+0x8e8>)
 80036c8:	f017 fa86 	bl	801abd8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80036cc:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2108      	movs	r1, #8
 80036d2:	4618      	mov	r0, r3
 80036d4:	f014 f842 	bl	801775c <osEventFlagsSet>
		break;
 80036d8:	e021      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 80036da:	f000 f99d 	bl	8003a18 <sync>
		break;
 80036de:	e01e      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_UART_RxCpltCallback+0x8ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f014 f838 	bl	801775c <osEventFlagsSet>
		break;
 80036ec:	e017      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_UART_RxCpltCallback+0x8ec>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f014 f831 	bl	801775c <osEventFlagsSet>
		break;
 80036fa:	e010      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 80036fc:	f7fe fce0 	bl	80020c0 <reset_error_counters>
		break;
 8003700:	e00d      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003702:	f7fe feaf 	bl	8002464 <send_previous_error_packet>
#endif
		break;
 8003706:	e00a      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003708:	4814      	ldr	r0, [pc, #80]	; (800375c <HAL_UART_RxCpltCallback+0x8f0>)
 800370a:	f017 fa65 	bl	801abd8 <puts>
		break;
 800370e:	e006      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800371c:	bf00      	nop
	}
	}
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0801b6dc 	.word	0x0801b6dc
 800372c:	24001ae2 	.word	0x24001ae2
 8003730:	24000040 	.word	0x24000040
 8003734:	24000314 	.word	0x24000314
 8003738:	0801b6e4 	.word	0x0801b6e4
 800373c:	0801b6f0 	.word	0x0801b6f0
 8003740:	240000c0 	.word	0x240000c0
 8003744:	0801b6fc 	.word	0x0801b6fc
 8003748:	0801b708 	.word	0x0801b708
 800374c:	24001a98 	.word	0x24001a98
 8003750:	0801b718 	.word	0x0801b718
 8003754:	0801b724 	.word	0x0801b724
 8003758:	24001a9c 	.word	0x24001a9c
 800375c:	0801b730 	.word	0x0801b730

08003760 <get_reset_cause>:

void get_reset_cause()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <get_reset_cause+0x60>)
 8003768:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800376c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <get_reset_cause+0x28>
    {
        error.category = EC_watchdog;
 8003774:	2304      	movs	r3, #4
 8003776:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 8003778:	231c      	movs	r3, #28
 800377a:	707b      	strb	r3, [r7, #1]
        handle_error(error);
 800377c:	463b      	mov	r3, r7
 800377e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003782:	f7fe fbeb 	bl	8001f5c <handle_error>
 8003786:	e00f      	b.n	80037a8 <get_reset_cause+0x48>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <get_reset_cause+0x60>)
 800378a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <get_reset_cause+0x48>
    {
        error.category = EC_brownout;
 8003796:	2303      	movs	r3, #3
 8003798:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 800379a:	231c      	movs	r3, #28
 800379c:	707b      	strb	r3, [r7, #1]
        handle_error(error);
 800379e:	463b      	mov	r3, r7
 80037a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037a4:	f7fe fbda 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <get_reset_cause+0x60>)
 80037aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <get_reset_cause+0x60>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58024400 	.word	0x58024400

080037c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037c8:	f002 fd6e 	bl	80062a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037cc:	f000 f828 	bl	8003820 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80037d0:	f000 f8a8 	bl	8003924 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037d4:	f7ff f93e 	bl	8002a54 <MX_GPIO_Init>
  MX_DMA_Init();
 80037d8:	f7fd fa86 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80037dc:	f001 fedc 	bl	8005598 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80037e0:	f7ff f9b2 	bl	8002b48 <MX_I2C1_Init>
  MX_SPI2_Init();
 80037e4:	f000 fe66 	bl	80044b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80037e8:	f001 fb52 	bl	8004e90 <MX_TIM2_Init>
  MX_TIM1_Init();
 80037ec:	f001 faa2 	bl	8004d34 <MX_TIM1_Init>
  MX_ADC3_Init();
 80037f0:	f7fd f81a 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80037f4:	f7fc fef6 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80037f8:	f7fd f9c2 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80037fc:	f000 fe02 	bl	8004404 <MX_SPI1_Init>
  MX_RTC_Init();
 8003800:	f000 fbce 	bl	8003fa0 <MX_RTC_Init>
#endif

  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 8003804:	f7fe fbe6 	bl	8001fd4 <error_counter_init>
  	get_reset_cause();
 8003808:	f7ff ffaa 	bl	8003760 <get_reset_cause>
#endif

  system_setup();
 800380c:	f000 f8ba 	bl	8003984 <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003810:	f013 fe0c 	bl	801742c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003814:	f7fe fec2 	bl	800259c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003818:	f013 fe2c 	bl	8017474 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800381c:	e7fe      	b.n	800381c <main+0x58>
	...

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b09c      	sub	sp, #112	; 0x70
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382a:	224c      	movs	r2, #76	; 0x4c
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f017 f95c 	bl	801aaec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2220      	movs	r2, #32
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f017 f956 	bl	801aaec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003840:	2002      	movs	r0, #2
 8003842:	f00a fd6b 	bl	800e31c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003846:	2300      	movs	r3, #0
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <SystemClock_Config+0xfc>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4a33      	ldr	r2, [pc, #204]	; (800391c <SystemClock_Config+0xfc>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <SystemClock_Config+0xfc>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <SystemClock_Config+0x100>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <SystemClock_Config+0x100>)
 800386a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <SystemClock_Config+0x100>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800387c:	bf00      	nop
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <SystemClock_Config+0x100>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388a:	d1f8      	bne.n	800387e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800388c:	230b      	movs	r3, #11
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003896:	2309      	movs	r3, #9
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800389a:	2340      	movs	r3, #64	; 0x40
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800389e:	2301      	movs	r3, #1
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a2:	2302      	movs	r3, #2
 80038a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038a6:	2302      	movs	r3, #2
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038aa:	2304      	movs	r3, #4
 80038ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80038ae:	2318      	movs	r3, #24
 80038b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80038b2:	2302      	movs	r3, #2
 80038b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038b6:	2302      	movs	r3, #2
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038ba:	2302      	movs	r3, #2
 80038bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038be:	2308      	movs	r3, #8
 80038c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80038c2:	2302      	movs	r3, #2
 80038c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00a fd5e 	bl	800e390 <HAL_RCC_OscConfig>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80038da:	f000 f955 	bl	8003b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038de:	233f      	movs	r3, #63	; 0x3f
 80038e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e2:	2303      	movs	r3, #3
 80038e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f00b f99e 	bl	800ec44 <HAL_RCC_ClockConfig>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800390e:	f000 f93b 	bl	8003b88 <Error_Handler>
  }
}
 8003912:	bf00      	nop
 8003914:	3770      	adds	r7, #112	; 0x70
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	58000400 	.word	0x58000400
 8003920:	58024800 	.word	0x58024800

08003924 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0b0      	sub	sp, #192	; 0xc0
 8003928:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800392a:	463b      	mov	r3, r7
 800392c:	22c0      	movs	r2, #192	; 0xc0
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f017 f8db 	bl	801aaec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003936:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003942:	2304      	movs	r3, #4
 8003944:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003946:	2318      	movs	r3, #24
 8003948:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800394a:	2308      	movs	r3, #8
 800394c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800394e:	2302      	movs	r3, #2
 8003950:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003952:	2302      	movs	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800395a:	2320      	movs	r3, #32
 800395c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003968:	463b      	mov	r3, r7
 800396a:	4618      	mov	r0, r3
 800396c:	f00b fd38 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003976:	f000 f907 	bl	8003b88 <Error_Handler>
  }
}
 800397a:	bf00      	nop
 800397c:	37c0      	adds	r7, #192	; 0xc0
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8003988:	2000      	movs	r0, #0
 800398a:	f013 fea8 	bl	80176de <osEventFlagsNew>
 800398e:	4603      	mov	r3, r0
 8003990:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <system_setup+0x7c>)
 8003992:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <system_setup+0x7c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d100      	bne.n	800399e <system_setup+0x1a>
        while (1);
 800399c:	e7fe      	b.n	800399c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800399e:	2000      	movs	r0, #0
 80039a0:	f013 fe9d 	bl	80176de <osEventFlagsNew>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <system_setup+0x80>)
 80039a8:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <system_setup+0x80>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d100      	bne.n	80039b4 <system_setup+0x30>
        while (1);
 80039b2:	e7fe      	b.n	80039b2 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f013 fe92 	bl	80176de <osEventFlagsNew>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <system_setup+0x84>)
 80039be:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <system_setup+0x84>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d100      	bne.n	80039ca <system_setup+0x46>
        while (1);
 80039c8:	e7fe      	b.n	80039c8 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80039ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80039d2:	210c      	movs	r1, #12
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <system_setup+0x88>)
 80039d6:	f00f fb91 	bl	80130fc <HAL_TIM_OC_Start_IT>

#ifdef ERROR_HANDLING_ENABLED
	if (!voltage_monitor_init()) {
 80039da:	f001 fee7 	bl	80057ac <voltage_monitor_init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d100      	bne.n	80039e6 <system_setup+0x62>
		while (1);
 80039e4:	e7fe      	b.n	80039e4 <system_setup+0x60>
	}
#endif

	if (!init_adc_dma()) {
 80039e6:	f000 fb6d 	bl	80040c4 <init_adc_dma>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d100      	bne.n	80039f2 <system_setup+0x6e>
		while (1);
 80039f0:	e7fe      	b.n	80039f0 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80039f2:	2201      	movs	r2, #1
 80039f4:	4906      	ldr	r1, [pc, #24]	; (8003a10 <system_setup+0x8c>)
 80039f6:	4807      	ldr	r0, [pc, #28]	; (8003a14 <system_setup+0x90>)
 80039f8:	f011 f860 	bl	8014abc <HAL_UART_Receive_IT>


}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	24001a94 	.word	0x24001a94
 8003a04:	24001a98 	.word	0x24001a98
 8003a08:	24001a9c 	.word	0x24001a9c
 8003a0c:	24001df0 	.word	0x24001df0
 8003a10:	24001aa0 	.word	0x24001aa0
 8003a14:	24001e3c 	.word	0x24001e3c

08003a18 <sync>:

void sync() {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	send_ACK();
 8003a1e:	f000 f821 	bl	8003a64 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8003a22:	480e      	ldr	r0, [pc, #56]	; (8003a5c <sync+0x44>)
 8003a24:	f011 f896 	bl	8014b54 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003a28:	2364      	movs	r3, #100	; 0x64
 8003a2a:	2209      	movs	r2, #9
 8003a2c:	490c      	ldr	r1, [pc, #48]	; (8003a60 <sync+0x48>)
 8003a2e:	480b      	ldr	r0, [pc, #44]	; (8003a5c <sync+0x44>)
 8003a30:	f010 ff7c 	bl	801492c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <sync+0x48>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2bff      	cmp	r3, #255	; 0xff
 8003a3e:	d1f3      	bne.n	8003a28 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003a40:	4807      	ldr	r0, [pc, #28]	; (8003a60 <sync+0x48>)
 8003a42:	f001 fce7 	bl	8005414 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003a46:	2201      	movs	r2, #1
 8003a48:	4905      	ldr	r1, [pc, #20]	; (8003a60 <sync+0x48>)
 8003a4a:	4804      	ldr	r0, [pc, #16]	; (8003a5c <sync+0x44>)
 8003a4c:	f011 f836 	bl	8014abc <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8003a50:	f7fe fbae 	bl	80021b0 <send_error_counter_packet>
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	24001e3c 	.word	0x24001e3c
 8003a60:	24001aa0 	.word	0x24001aa0

08003a64 <send_ACK>:

void send_ACK() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <send_ACK+0x1c>)
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003a6e:	2364      	movs	r3, #100	; 0x64
 8003a70:	2201      	movs	r2, #1
 8003a72:	4903      	ldr	r1, [pc, #12]	; (8003a80 <send_ACK+0x1c>)
 8003a74:	4803      	ldr	r0, [pc, #12]	; (8003a84 <send_ACK+0x20>)
 8003a76:	f010 fecb 	bl	8014810 <HAL_UART_Transmit>
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	24001aec 	.word	0x24001aec
 8003a84:	24001e3c 	.word	0x24001e3c

08003a88 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <get_current_step+0xc0>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04a      	beq.n	8003b34 <get_current_step+0xac>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa4:	da48      	bge.n	8003b38 <get_current_step+0xb0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d03f      	beq.n	8003b30 <get_current_step+0xa8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	dc3e      	bgt.n	8003b38 <get_current_step+0xb0>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d033      	beq.n	8003b2c <get_current_step+0xa4>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003aca:	da35      	bge.n	8003b38 <get_current_step+0xb0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d028      	beq.n	8003b28 <get_current_step+0xa0>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003adc:	4293      	cmp	r3, r2
 8003ade:	dc2b      	bgt.n	8003b38 <get_current_step+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f240 7245 	movw	r2, #1861	; 0x745
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01c      	beq.n	8003b24 <get_current_step+0x9c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f240 7245 	movw	r2, #1861	; 0x745
 8003af0:	4293      	cmp	r3, r2
 8003af2:	dc21      	bgt.n	8003b38 <get_current_step+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d010      	beq.n	8003b20 <get_current_step+0x98>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003b04:	4293      	cmp	r3, r2
 8003b06:	dc17      	bgt.n	8003b38 <get_current_step+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <get_current_step+0x90>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003b14:	d002      	beq.n	8003b1c <get_current_step+0x94>
 8003b16:	e00f      	b.n	8003b38 <get_current_step+0xb0>
	case 0:
		return 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e00e      	b.n	8003b3a <get_current_step+0xb2>
	case 620:
		return 1;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00c      	b.n	8003b3a <get_current_step+0xb2>
	case 1241:
		return 2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	e00a      	b.n	8003b3a <get_current_step+0xb2>
	case 1861:
		return 3;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e008      	b.n	8003b3a <get_current_step+0xb2>
	case 2482:
		return 4;
 8003b28:	2304      	movs	r3, #4
 8003b2a:	e006      	b.n	8003b3a <get_current_step+0xb2>
	case 3103:
		return 5;
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	e004      	b.n	8003b3a <get_current_step+0xb2>
	case 3723:
		return 6;
 8003b30:	2306      	movs	r3, #6
 8003b32:	e002      	b.n	8003b3a <get_current_step+0xb2>
	case 4095:
		return 7;
 8003b34:	2307      	movs	r3, #7
 8003b36:	e000      	b.n	8003b3a <get_current_step+0xb2>
	default:
		return -1;
 8003b38:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40007400 	.word	0x40007400

08003b4c <enter_stop>:

void enter_stop() {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	  send_ACK();
 8003b50:	f7ff ff88 	bl	8003a64 <send_ACK>

	  vTaskSuspendAll();
 8003b54:	f015 fa60 	bl	8019018 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f00a fba2 	bl	800e2a4 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003b60:	f7ff f912 	bl	8002d88 <__NVIC_SystemReset>

08003b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b76:	f002 fbd3 	bl	8006320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40001000 	.word	0x40001000

08003b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003b92:	231c      	movs	r3, #28
 8003b94:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003b96:	463b      	mov	r3, r7
 8003b98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b9c:	f7fe f9de 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003bae:	bf00      	nop
 8003bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb4:	481c      	ldr	r0, [pc, #112]	; (8003c28 <create_pmt_packet+0x80>)
 8003bb6:	f007 ffcf 	bl	800bb58 <HAL_GPIO_ReadPin>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f7      	bne.n	8003bb0 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003bc0:	1d3b      	adds	r3, r7, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fa9c 	bl	8005100 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003bc8:	f107 0308 	add.w	r3, r7, #8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 facd 	bl	800416c <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003bd2:	23ff      	movs	r3, #255	; 0xff
 8003bd4:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003bd6:	23ff      	movs	r3, #255	; 0xff
 8003bd8:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <create_pmt_packet+0x84>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <create_pmt_packet+0x84>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003bee:	7a3b      	ldrb	r3, [r7, #8]
 8003bf0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003bf2:	7a7b      	ldrb	r3, [r7, #9]
 8003bf4:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003bf6:	793b      	ldrb	r3, [r7, #4]
 8003bf8:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003bfa:	797b      	ldrb	r3, [r7, #5]
 8003bfc:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003bfe:	79bb      	ldrb	r3, [r7, #6]
 8003c00:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003c06:	f107 010c 	add.w	r1, r7, #12
 8003c0a:	2364      	movs	r3, #100	; 0x64
 8003c0c:	220a      	movs	r2, #10
 8003c0e:	4808      	ldr	r0, [pc, #32]	; (8003c30 <create_pmt_packet+0x88>)
 8003c10:	f010 fdfe 	bl	8014810 <HAL_UART_Transmit>

	pmt_seq++;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <create_pmt_packet+0x84>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <create_pmt_packet+0x84>)
 8003c1e:	801a      	strh	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	58020000 	.word	0x58020000
 8003c2c:	24001aee 	.word	0x24001aee
 8003c30:	24001e3c 	.word	0x24001e3c

08003c34 <create_erpa_packet>:


void create_erpa_packet() {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003c3a:	bf00      	nop
 8003c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c40:	4828      	ldr	r0, [pc, #160]	; (8003ce4 <create_erpa_packet+0xb0>)
 8003c42:	f007 ff89 	bl	800bb58 <HAL_GPIO_ReadPin>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f7      	bne.n	8003c3c <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003c4c:	23ff      	movs	r3, #255	; 0xff
 8003c4e:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fa54 	bl	8005100 <get_uptime>
	sweep_step = get_current_step();
 8003c58:	f7ff ff16 	bl	8003a88 <get_current_step>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 faa1 	bl	80041ac <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fabc 	bl	80041ec <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003c74:	23ee      	movs	r3, #238	; 0xee
 8003c76:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003c78:	23ee      	movs	r3, #238	; 0xee
 8003c7a:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <create_erpa_packet+0xb4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <create_erpa_packet+0xb4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <create_erpa_packet+0xb4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
 8003c9a:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003c9c:	893b      	ldrh	r3, [r7, #8]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003ca6:	893b      	ldrh	r3, [r7, #8]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003cac:	7b3b      	ldrb	r3, [r7, #12]
 8003cae:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003cb0:	7b7b      	ldrb	r3, [r7, #13]
 8003cb2:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003cb4:	793b      	ldrb	r3, [r7, #4]
 8003cb6:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003cb8:	797b      	ldrb	r3, [r7, #5]
 8003cba:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003cbc:	79bb      	ldrb	r3, [r7, #6]
 8003cbe:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003cc4:	f107 0110 	add.w	r1, r7, #16
 8003cc8:	2364      	movs	r3, #100	; 0x64
 8003cca:	220e      	movs	r2, #14
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <create_erpa_packet+0xb8>)
 8003cce:	f010 fd9f 	bl	8014810 <HAL_UART_Transmit>

	erpa_seq++;
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <create_erpa_packet+0xb4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a03      	ldr	r2, [pc, #12]	; (8003ce8 <create_erpa_packet+0xb4>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	58020400 	.word	0x58020400
 8003ce8:	24001af0 	.word	0x24001af0
 8003cec:	24001e3c 	.word	0x24001e3c

08003cf0 <create_hk_packet>:


void create_hk_packet() {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b092      	sub	sp, #72	; 0x48
 8003cf4:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fa01 	bl	8005100 <get_uptime>
	get_unix_time(timestamp);
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fa4c 	bl	80051a0 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003d08:	f002 f86e 	bl	8005de8 <get_rail_monitor>
 8003d0c:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003d0e:	23dd      	movs	r3, #221	; 0xdd
 8003d10:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003d12:	23dd      	movs	r3, #221	; 0xdd
 8003d14:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003d16:	4b95      	ldr	r3, [pc, #596]	; (8003f6c <create_hk_packet+0x27c>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003d22:	4b92      	ldr	r3, [pc, #584]	; (8003f6c <create_hk_packet+0x27c>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	889b      	ldrh	r3, [r3, #4]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	889b      	ldrh	r3, [r3, #4]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	3310      	adds	r3, #16
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	3310      	adds	r3, #16
 8003d50:	889b      	ldrh	r3, [r3, #4]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	3320      	adds	r3, #32
 8003d5a:	889b      	ldrh	r3, [r3, #4]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d66:	3320      	adds	r3, #32
 8003d68:	889b      	ldrh	r3, [r3, #4]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	3330      	adds	r3, #48	; 0x30
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7e:	3330      	adds	r3, #48	; 0x30
 8003d80:	889b      	ldrh	r3, [r3, #4]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d88:	3340      	adds	r3, #64	; 0x40
 8003d8a:	889b      	ldrh	r3, [r3, #4]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	3340      	adds	r3, #64	; 0x40
 8003d98:	889b      	ldrh	r3, [r3, #4]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da0:	3350      	adds	r3, #80	; 0x50
 8003da2:	889b      	ldrh	r3, [r3, #4]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dae:	3350      	adds	r3, #80	; 0x50
 8003db0:	889b      	ldrh	r3, [r3, #4]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	889b      	ldrh	r3, [r3, #4]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	3360      	adds	r3, #96	; 0x60
 8003dca:	889b      	ldrh	r3, [r3, #4]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd4:	3370      	adds	r3, #112	; 0x70
 8003dd6:	889b      	ldrh	r3, [r3, #4]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de4:	3370      	adds	r3, #112	; 0x70
 8003de6:	889b      	ldrh	r3, [r3, #4]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	3380      	adds	r3, #128	; 0x80
 8003df2:	889b      	ldrh	r3, [r3, #4]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	3380      	adds	r3, #128	; 0x80
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	3390      	adds	r3, #144	; 0x90
 8003e0e:	889b      	ldrh	r3, [r3, #4]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1c:	3390      	adds	r3, #144	; 0x90
 8003e1e:	889b      	ldrh	r3, [r3, #4]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e28:	33a0      	adds	r3, #160	; 0xa0
 8003e2a:	889b      	ldrh	r3, [r3, #4]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e38:	33a0      	adds	r3, #160	; 0xa0
 8003e3a:	889b      	ldrh	r3, [r3, #4]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e44:	33b0      	adds	r3, #176	; 0xb0
 8003e46:	889b      	ldrh	r3, [r3, #4]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e54:	33b0      	adds	r3, #176	; 0xb0
 8003e56:	889b      	ldrh	r3, [r3, #4]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	33c0      	adds	r3, #192	; 0xc0
 8003e62:	889b      	ldrh	r3, [r3, #4]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e70:	33c0      	adds	r3, #192	; 0xc0
 8003e72:	889b      	ldrh	r3, [r3, #4]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7c:	33d0      	adds	r3, #208	; 0xd0
 8003e7e:	889b      	ldrh	r3, [r3, #4]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8c:	33d0      	adds	r3, #208	; 0xd0
 8003e8e:	889b      	ldrh	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e98:	33e0      	adds	r3, #224	; 0xe0
 8003e9a:	889b      	ldrh	r3, [r3, #4]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	33e0      	adds	r3, #224	; 0xe0
 8003eaa:	889b      	ldrh	r3, [r3, #4]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb4:	33f0      	adds	r3, #240	; 0xf0
 8003eb6:	889b      	ldrh	r3, [r3, #4]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	33f0      	adds	r3, #240	; 0xf0
 8003ec6:	889b      	ldrh	r3, [r3, #4]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ee6:	889b      	ldrh	r3, [r3, #4]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003ef4:	889b      	ldrh	r3, [r3, #4]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f02:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003f0e:	7a3b      	ldrb	r3, [r7, #8]
 8003f10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003f14:	7a7b      	ldrb	r3, [r7, #9]
 8003f16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003f1a:	7abb      	ldrb	r3, [r7, #10]
 8003f1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003f26:	7b3b      	ldrb	r3, [r7, #12]
 8003f28:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003f2c:	7b7b      	ldrb	r3, [r7, #13]
 8003f2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003f32:	793b      	ldrb	r3, [r7, #4]
 8003f34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003f38:	797b      	ldrb	r3, [r7, #5]
 8003f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003f3e:	79bb      	ldrb	r3, [r7, #6]
 8003f40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003f4a:	f107 0110 	add.w	r1, r7, #16
 8003f4e:	2364      	movs	r3, #100	; 0x64
 8003f50:	2232      	movs	r2, #50	; 0x32
 8003f52:	4807      	ldr	r0, [pc, #28]	; (8003f70 <create_hk_packet+0x280>)
 8003f54:	f010 fc5c 	bl	8014810 <HAL_UART_Transmit>

	hk_seq++;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <create_hk_packet+0x27c>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <create_hk_packet+0x27c>)
 8003f62:	801a      	strh	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3748      	adds	r7, #72	; 0x48
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	24001af4 	.word	0x24001af4
 8003f70:	24001e3c 	.word	0x24001e3c

08003f74 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <reset_packet_sequence_numbers+0x20>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <reset_packet_sequence_numbers+0x24>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <reset_packet_sequence_numbers+0x28>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	801a      	strh	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	24001aee 	.word	0x24001aee
 8003f98:	24001af0 	.word	0x24001af0
 8003f9c:	24001af4 	.word	0x24001af4

08003fa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fb8:	4b26      	ldr	r3, [pc, #152]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fba:	4a27      	ldr	r2, [pc, #156]	; (8004058 <MX_RTC_Init+0xb8>)
 8003fbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fbe:	4b25      	ldr	r3, [pc, #148]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fc6:	2263      	movs	r2, #99	; 0x63
 8003fc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fea:	481a      	ldr	r0, [pc, #104]	; (8004054 <MX_RTC_Init+0xb4>)
 8003fec:	f00d fef6 	bl	8011ddc <HAL_RTC_Init>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003ff6:	f7ff fdc7 	bl	8003b88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004002:	2300      	movs	r3, #0
 8004004:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	2201      	movs	r2, #1
 8004012:	4619      	mov	r1, r3
 8004014:	480f      	ldr	r0, [pc, #60]	; (8004054 <MX_RTC_Init+0xb4>)
 8004016:	f00d ff63 	bl	8011ee0 <HAL_RTC_SetTime>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004020:	f7ff fdb2 	bl	8003b88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004024:	2301      	movs	r3, #1
 8004026:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004028:	2301      	movs	r3, #1
 800402a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800402c:	2301      	movs	r3, #1
 800402e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004030:	2300      	movs	r3, #0
 8004032:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004034:	463b      	mov	r3, r7
 8004036:	2201      	movs	r2, #1
 8004038:	4619      	mov	r1, r3
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <MX_RTC_Init+0xb4>)
 800403c:	f00e f84a 	bl	80120d4 <HAL_RTC_SetDate>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8004046:	f7ff fd9f 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	24001af8 	.word	0x24001af8
 8004058:	58004000 	.word	0x58004000

0800405c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b0b2      	sub	sp, #200	; 0xc8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004064:	f107 0308 	add.w	r3, r7, #8
 8004068:	22c0      	movs	r2, #192	; 0xc0
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f016 fd3d 	bl	801aaec <memset>
  if(rtcHandle->Instance==RTC)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_RTC_MspInit+0x5c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d118      	bne.n	80040ae <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800407c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RTC_MspInit+0x60>)
 800408a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	4618      	mov	r0, r3
 8004094:	f00b f9a4 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800409e:	f7ff fd73 	bl	8003b88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_RTC_MspInit+0x64>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_RTC_MspInit+0x64>)
 80040a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80040ae:	bf00      	nop
 80040b0:	37c8      	adds	r7, #200	; 0xc8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	58004000 	.word	0x58004000
 80040bc:	00019300 	.word	0x00019300
 80040c0:	58024400 	.word	0x58024400

080040c4 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80040ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80040d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d6:	481f      	ldr	r0, [pc, #124]	; (8004154 <init_adc_dma+0x90>)
 80040d8:	f003 fc36 	bl	8007948 <HAL_ADCEx_Calibration_Start>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80040e2:	f7ff fd51 	bl	8003b88 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80040e6:	220b      	movs	r2, #11
 80040e8:	491b      	ldr	r1, [pc, #108]	; (8004158 <init_adc_dma+0x94>)
 80040ea:	481a      	ldr	r0, [pc, #104]	; (8004154 <init_adc_dma+0x90>)
 80040ec:	f002 fd0a 	bl	8006b04 <HAL_ADC_Start_DMA>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80040f6:	f7ff fd47 	bl	8003b88 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80040fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80040fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004102:	4816      	ldr	r0, [pc, #88]	; (800415c <init_adc_dma+0x98>)
 8004104:	f003 fc20 	bl	8007948 <HAL_ADCEx_Calibration_Start>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800410e:	f7ff fd3b 	bl	8003b88 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8004112:	2204      	movs	r2, #4
 8004114:	4912      	ldr	r1, [pc, #72]	; (8004160 <init_adc_dma+0x9c>)
 8004116:	4811      	ldr	r0, [pc, #68]	; (800415c <init_adc_dma+0x98>)
 8004118:	f002 fcf4 	bl	8006b04 <HAL_ADC_Start_DMA>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004122:	f7ff fd31 	bl	8003b88 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <init_adc_dma+0xa0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <init_adc_dma+0xa0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004134:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <init_adc_dma+0xa4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <init_adc_dma+0xa4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]


	status = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	71fb      	strb	r3, [r7, #7]

	return status;
 800414a:	79fb      	ldrb	r3, [r7, #7]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2400015c 	.word	0x2400015c
 8004158:	24001b20 	.word	0x24001b20
 800415c:	240001c0 	.word	0x240001c0
 8004160:	24001b40 	.word	0x24001b40
 8004164:	24001bdc 	.word	0x24001bdc
 8004168:	24001b54 	.word	0x24001b54

0800416c <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004174:	2201      	movs	r2, #1
 8004176:	490b      	ldr	r1, [pc, #44]	; (80041a4 <sample_pmt_spi+0x38>)
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <sample_pmt_spi+0x3c>)
 800417a:	f00e fa75 	bl	8012668 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <sample_pmt_spi+0x38>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	b29b      	uxth	r3, r3
 8004186:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <sample_pmt_spi+0x38>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3301      	adds	r3, #1
 8004198:	7bba      	ldrb	r2, [r7, #14]
 800419a:	701a      	strb	r2, [r3, #0]
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	24001b4c 	.word	0x24001b4c
 80041a8:	24001b54 	.word	0x24001b54

080041ac <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80041b4:	2201      	movs	r2, #1
 80041b6:	490b      	ldr	r1, [pc, #44]	; (80041e4 <sample_erpa_spi+0x38>)
 80041b8:	480b      	ldr	r0, [pc, #44]	; (80041e8 <sample_erpa_spi+0x3c>)
 80041ba:	f00e fa55 	bl	8012668 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <sample_erpa_spi+0x38>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <sample_erpa_spi+0x38>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	7bba      	ldrb	r2, [r7, #14]
 80041da:	701a      	strb	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	24001b48 	.word	0x24001b48
 80041e8:	24001bdc 	.word	0x24001bdc

080041ec <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <sample_erpa_adc+0x20>)
 80041f6:	885b      	ldrh	r3, [r3, #2]
 80041f8:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	89fa      	ldrh	r2, [r7, #14]
 80041fe:	801a      	strh	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	24001b20 	.word	0x24001b20

08004210 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004218:	2390      	movs	r3, #144	; 0x90
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f8a2 	bl	8004364 <poll_i2c_sensor>
 8004220:	4603      	mov	r3, r0
 8004222:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004224:	2394      	movs	r3, #148	; 0x94
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f89c 	bl	8004364 <poll_i2c_sensor>
 800422c:	4603      	mov	r3, r0
 800422e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004230:	2392      	movs	r3, #146	; 0x92
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f896 	bl	8004364 <poll_i2c_sensor>
 8004238:	4603      	mov	r3, r0
 800423a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800423c:	2396      	movs	r3, #150	; 0x96
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f890 	bl	8004364 <poll_i2c_sensor>
 8004244:	4603      	mov	r3, r0
 8004246:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	89fa      	ldrh	r2, [r7, #14]
 800424c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3302      	adds	r3, #2
 8004252:	89ba      	ldrh	r2, [r7, #12]
 8004254:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	897a      	ldrh	r2, [r7, #10]
 800425c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3306      	adds	r3, #6
 8004262:	893a      	ldrh	r2, [r7, #8]
 8004264:	801a      	strh	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <sample_hk_adc1+0xa0>)
 800427a:	8a9b      	ldrh	r3, [r3, #20]
 800427c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <sample_hk_adc1+0xa0>)
 8004280:	8a1b      	ldrh	r3, [r3, #16]
 8004282:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <sample_hk_adc1+0xa0>)
 8004286:	899b      	ldrh	r3, [r3, #12]
 8004288:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <sample_hk_adc1+0xa0>)
 800428c:	8a5b      	ldrh	r3, [r3, #18]
 800428e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <sample_hk_adc1+0xa0>)
 8004292:	889b      	ldrh	r3, [r3, #4]
 8004294:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <sample_hk_adc1+0xa0>)
 8004298:	88db      	ldrh	r3, [r3, #6]
 800429a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <sample_hk_adc1+0xa0>)
 800429e:	89db      	ldrh	r3, [r3, #14]
 80042a0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <sample_hk_adc1+0xa0>)
 80042a4:	891b      	ldrh	r3, [r3, #8]
 80042a6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <sample_hk_adc1+0xa0>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <sample_hk_adc1+0xa0>)
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8bfa      	ldrh	r2, [r7, #30]
 80042b8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3302      	adds	r3, #2
 80042be:	8bba      	ldrh	r2, [r7, #28]
 80042c0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	8b7a      	ldrh	r2, [r7, #26]
 80042c8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3306      	adds	r3, #6
 80042ce:	8b3a      	ldrh	r2, [r7, #24]
 80042d0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3308      	adds	r3, #8
 80042d6:	8afa      	ldrh	r2, [r7, #22]
 80042d8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	330a      	adds	r3, #10
 80042de:	8aba      	ldrh	r2, [r7, #20]
 80042e0:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	330c      	adds	r3, #12
 80042e6:	8a7a      	ldrh	r2, [r7, #18]
 80042e8:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	330e      	adds	r3, #14
 80042ee:	8a3a      	ldrh	r2, [r7, #16]
 80042f0:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3310      	adds	r3, #16
 80042f6:	89fa      	ldrh	r2, [r7, #14]
 80042f8:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3312      	adds	r3, #18
 80042fe:	89ba      	ldrh	r2, [r7, #12]
 8004300:	801a      	strh	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	24001b20 	.word	0x24001b20

08004314 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <sample_hk_adc3+0x4c>)
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <sample_hk_adc3+0x4c>)
 8004324:	885b      	ldrh	r3, [r3, #2]
 8004326:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <sample_hk_adc3+0x4c>)
 800432a:	889b      	ldrh	r3, [r3, #4]
 800432c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <sample_hk_adc3+0x4c>)
 8004330:	88db      	ldrh	r3, [r3, #6]
 8004332:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	89fa      	ldrh	r2, [r7, #14]
 8004338:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3302      	adds	r3, #2
 800433e:	89ba      	ldrh	r2, [r7, #12]
 8004340:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	897a      	ldrh	r2, [r7, #10]
 8004348:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3306      	adds	r3, #6
 800434e:	893a      	ldrh	r2, [r7, #8]
 8004350:	801a      	strh	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	24001b40 	.word	0x24001b40

08004364 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800436e:	2200      	movs	r2, #0
 8004370:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <poll_i2c_sensor+0x90>)
 8004372:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	b299      	uxth	r1, r3
 8004378:	2301      	movs	r3, #1
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <poll_i2c_sensor+0x90>)
 800437c:	481e      	ldr	r0, [pc, #120]	; (80043f8 <poll_i2c_sensor+0x94>)
 800437e:	f007 fcb9 	bl	800bcf4 <HAL_I2C_Master_Transmit_DMA>
 8004382:	4603      	mov	r3, r0
 8004384:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004386:	7b7b      	ldrb	r3, [r7, #13]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 800438c:	481b      	ldr	r0, [pc, #108]	; (80043fc <poll_i2c_sensor+0x98>)
 800438e:	f016 fc23 	bl	801abd8 <puts>
 8004392:	e028      	b.n	80043e6 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004394:	bf00      	nop
 8004396:	4818      	ldr	r0, [pc, #96]	; (80043f8 <poll_i2c_sensor+0x94>)
 8004398:	f007 ff93 	bl	800c2c2 <HAL_I2C_GetState>
 800439c:	4603      	mov	r3, r0
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d1f9      	bne.n	8004396 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	b299      	uxth	r1, r3
 80043a6:	2302      	movs	r3, #2
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <poll_i2c_sensor+0x90>)
 80043aa:	4813      	ldr	r0, [pc, #76]	; (80043f8 <poll_i2c_sensor+0x94>)
 80043ac:	f007 fdb6 	bl	800bf1c <HAL_I2C_Master_Receive_DMA>
 80043b0:	4603      	mov	r3, r0
 80043b2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80043b4:	7b7b      	ldrb	r3, [r7, #13]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80043ba:	4811      	ldr	r0, [pc, #68]	; (8004400 <poll_i2c_sensor+0x9c>)
 80043bc:	f016 fc0c 	bl	801abd8 <puts>
 80043c0:	e011      	b.n	80043e6 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80043c2:	bf00      	nop
 80043c4:	480c      	ldr	r0, [pc, #48]	; (80043f8 <poll_i2c_sensor+0x94>)
 80043c6:	f007 ff7c 	bl	800c2c2 <HAL_I2C_GetState>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d1f9      	bne.n	80043c4 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <poll_i2c_sensor+0x90>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80043d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043dc:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <poll_i2c_sensor+0x90>)
 80043de:	7852      	ldrb	r2, [r2, #1]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	10db      	asrs	r3, r3, #3
 80043e4:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80043e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	24001b50 	.word	0x24001b50
 80043f8:	24001940 	.word	0x24001940
 80043fc:	0801b740 	.word	0x0801b740
 8004400:	0801b750 	.word	0x0801b750

08004404 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004408:	4b28      	ldr	r3, [pc, #160]	; (80044ac <MX_SPI1_Init+0xa8>)
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <MX_SPI1_Init+0xac>)
 800440c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004410:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004416:	4b25      	ldr	r3, [pc, #148]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800441c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004420:	220f      	movs	r2, #15
 8004422:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <MX_SPI1_Init+0xa8>)
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004432:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004436:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <MX_SPI1_Init+0xa8>)
 800443a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800443e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004442:	2200      	movs	r2, #0
 8004444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004448:	2200      	movs	r2, #0
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <MX_SPI1_Init+0xa8>)
 800444e:	2200      	movs	r2, #0
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004454:	2200      	movs	r2, #0
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MX_SPI1_Init+0xa8>)
 800445a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800445e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004462:	2200      	movs	r2, #0
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_SPI1_Init+0xa8>)
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004474:	2200      	movs	r2, #0
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <MX_SPI1_Init+0xa8>)
 800447a:	2200      	movs	r2, #0
 800447c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004480:	2200      	movs	r2, #0
 8004482:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004486:	2200      	movs	r2, #0
 8004488:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <MX_SPI1_Init+0xa8>)
 800448c:	2200      	movs	r2, #0
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004492:	2200      	movs	r2, #0
 8004494:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <MX_SPI1_Init+0xa8>)
 8004498:	f00d ffc2 	bl	8012420 <HAL_SPI_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80044a2:	f7ff fb71 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	24001b54 	.word	0x24001b54
 80044b0:	40013000 	.word	0x40013000

080044b4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <MX_SPI2_Init+0xa8>)
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <MX_SPI2_Init+0xac>)
 80044bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <MX_SPI2_Init+0xa8>)
 80044c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <MX_SPI2_Init+0xa8>)
 80044c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <MX_SPI2_Init+0xa8>)
 80044d0:	220f      	movs	r2, #15
 80044d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <MX_SPI2_Init+0xa8>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <MX_SPI2_Init+0xa8>)
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80044e0:	4b1e      	ldr	r3, [pc, #120]	; (800455c <MX_SPI2_Init+0xa8>)
 80044e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <MX_SPI2_Init+0xa8>)
 80044ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80044ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044f0:	4b1a      	ldr	r3, [pc, #104]	; (800455c <MX_SPI2_Init+0xa8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044f6:	4b19      	ldr	r3, [pc, #100]	; (800455c <MX_SPI2_Init+0xa8>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <MX_SPI2_Init+0xa8>)
 80044fe:	2200      	movs	r2, #0
 8004500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <MX_SPI2_Init+0xa8>)
 8004504:	2200      	movs	r2, #0
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <MX_SPI2_Init+0xa8>)
 800450a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800450e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <MX_SPI2_Init+0xa8>)
 8004512:	2200      	movs	r2, #0
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <MX_SPI2_Init+0xa8>)
 8004518:	2200      	movs	r2, #0
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <MX_SPI2_Init+0xa8>)
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <MX_SPI2_Init+0xa8>)
 8004524:	2200      	movs	r2, #0
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <MX_SPI2_Init+0xa8>)
 800452a:	2200      	movs	r2, #0
 800452c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <MX_SPI2_Init+0xa8>)
 8004530:	2200      	movs	r2, #0
 8004532:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <MX_SPI2_Init+0xa8>)
 8004536:	2200      	movs	r2, #0
 8004538:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <MX_SPI2_Init+0xa8>)
 800453c:	2200      	movs	r2, #0
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <MX_SPI2_Init+0xa8>)
 8004542:	2200      	movs	r2, #0
 8004544:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004546:	4805      	ldr	r0, [pc, #20]	; (800455c <MX_SPI2_Init+0xa8>)
 8004548:	f00d ff6a 	bl	8012420 <HAL_SPI_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004552:	f7ff fb19 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	24001bdc 	.word	0x24001bdc
 8004560:	40003800 	.word	0x40003800

08004564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b0bc      	sub	sp, #240	; 0xf0
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800457c:	f107 0318 	add.w	r3, r7, #24
 8004580:	22c0      	movs	r2, #192	; 0xc0
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f016 fab1 	bl	801aaec <memset>
  if(spiHandle->Instance==SPI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a83      	ldr	r2, [pc, #524]	; (800479c <HAL_SPI_MspInit+0x238>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d17c      	bne.n	800468e <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a4:	f107 0318 	add.w	r3, r7, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f00a ff19 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80045b4:	f7ff fae8 	bl	8003b88 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045b8:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045be:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045c8:	4b75      	ldr	r3, [pc, #468]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	4b72      	ldr	r3, [pc, #456]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045dc:	4a70      	ldr	r2, [pc, #448]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045e6:	4b6e      	ldr	r3, [pc, #440]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80045e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80045f4:	2318      	movs	r3, #24
 80045f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800460c:	2305      	movs	r3, #5
 800460e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004612:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004616:	4619      	mov	r1, r3
 8004618:	4862      	ldr	r0, [pc, #392]	; (80047a4 <HAL_SPI_MspInit+0x240>)
 800461a:	f007 f8ed 	bl	800b7f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800461e:	4b62      	ldr	r3, [pc, #392]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004620:	4a62      	ldr	r2, [pc, #392]	; (80047ac <HAL_SPI_MspInit+0x248>)
 8004622:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004624:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004626:	2225      	movs	r2, #37	; 0x25
 8004628:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800462a:	4b5f      	ldr	r3, [pc, #380]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004630:	4b5d      	ldr	r3, [pc, #372]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004636:	4b5c      	ldr	r3, [pc, #368]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800463e:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004644:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004646:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800464c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800464e:	4b56      	ldr	r3, [pc, #344]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004650:	2200      	movs	r2, #0
 8004652:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004654:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004656:	2200      	movs	r2, #0
 8004658:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800465a:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 800465c:	2200      	movs	r2, #0
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004660:	4851      	ldr	r0, [pc, #324]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004662:	f003 ff99 	bl	8008598 <HAL_DMA_Init>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 800466c:	f7ff fa8c 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a4d      	ldr	r2, [pc, #308]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
 8004676:	4a4c      	ldr	r2, [pc, #304]	; (80047a8 <HAL_SPI_MspInit+0x244>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800467c:	2200      	movs	r2, #0
 800467e:	2105      	movs	r1, #5
 8004680:	2023      	movs	r0, #35	; 0x23
 8004682:	f003 fb5b 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004686:	2023      	movs	r0, #35	; 0x23
 8004688:	f003 fb72 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800468c:	e081      	b.n	8004792 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a47      	ldr	r2, [pc, #284]	; (80047b0 <HAL_SPI_MspInit+0x24c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d17c      	bne.n	8004792 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046a8:	f107 0318 	add.w	r3, r7, #24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00a fe97 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80046b8:	f7ff fa66 	bl	8003b88 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046bc:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c2:	4a37      	ldr	r2, [pc, #220]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046cc:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e0:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_SPI_MspInit+0x23c>)
 80046ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80046f8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80046fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004712:	2305      	movs	r3, #5
 8004714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004718:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800471c:	4619      	mov	r1, r3
 800471e:	4821      	ldr	r0, [pc, #132]	; (80047a4 <HAL_SPI_MspInit+0x240>)
 8004720:	f007 f86a 	bl	800b7f8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <HAL_SPI_MspInit+0x254>)
 8004728:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800472c:	2227      	movs	r2, #39	; 0x27
 800472e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800473e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004742:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800474e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004752:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004756:	2200      	movs	r2, #0
 8004758:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800475c:	2200      	movs	r2, #0
 800475e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004762:	2200      	movs	r2, #0
 8004764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004766:	4813      	ldr	r0, [pc, #76]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 8004768:	f003 ff16 	bl	8008598 <HAL_DMA_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004772:	f7ff fa09 	bl	8003b88 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800477a:	67da      	str	r2, [r3, #124]	; 0x7c
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_SPI_MspInit+0x250>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2105      	movs	r1, #5
 8004786:	2024      	movs	r0, #36	; 0x24
 8004788:	f003 fad8 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800478c:	2024      	movs	r0, #36	; 0x24
 800478e:	f003 faef 	bl	8007d70 <HAL_NVIC_EnableIRQ>
}
 8004792:	bf00      	nop
 8004794:	37f0      	adds	r7, #240	; 0xf0
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40013000 	.word	0x40013000
 80047a0:	58024400 	.word	0x58024400
 80047a4:	58020400 	.word	0x58020400
 80047a8:	24001c64 	.word	0x24001c64
 80047ac:	40020070 	.word	0x40020070
 80047b0:	40003800 	.word	0x40003800
 80047b4:	24001cdc 	.word	0x24001cdc
 80047b8:	40020058 	.word	0x40020058

080047bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_MspInit+0x38>)
 80047c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_MspInit+0x38>)
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_MspInit+0x38>)
 80047d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047e0:	2200      	movs	r2, #0
 80047e2:	210f      	movs	r1, #15
 80047e4:	f06f 0001 	mvn.w	r0, #1
 80047e8:	f003 faa8 	bl	8007d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58024400 	.word	0x58024400

080047f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b090      	sub	sp, #64	; 0x40
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d827      	bhi.n	8004856 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004806:	2200      	movs	r2, #0
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	2036      	movs	r0, #54	; 0x36
 800480c:	f003 fa96 	bl	8007d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004810:	2036      	movs	r0, #54	; 0x36
 8004812:	f003 faad 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004816:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_InitTick+0xc4>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_InitTick+0xc8>)
 800481e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004822:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <HAL_InitTick+0xc8>)
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_InitTick+0xc8>)
 800482e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800483a:	f107 0210 	add.w	r2, r7, #16
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f00a fd89 	bl	800f35c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_InitTick+0x6a>
 8004854:	e001      	b.n	800485a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e02b      	b.n	80048b2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800485a:	f00a fd53 	bl	800f304 <HAL_RCC_GetPCLK1Freq>
 800485e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004860:	e004      	b.n	800486c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004862:	f00a fd4f 	bl	800f304 <HAL_RCC_GetPCLK1Freq>
 8004866:	4603      	mov	r3, r0
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <HAL_InitTick+0xcc>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	0c9b      	lsrs	r3, r3, #18
 8004876:	3b01      	subs	r3, #1
 8004878:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_InitTick+0xd0>)
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_InitTick+0xd4>)
 800487e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <HAL_InitTick+0xd0>)
 8004882:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004886:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_InitTick+0xd0>)
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_InitTick+0xd0>)
 8004890:	2200      	movs	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_InitTick+0xd0>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800489a:	480b      	ldr	r0, [pc, #44]	; (80048c8 <HAL_InitTick+0xd0>)
 800489c:	f00e fb5f 	bl	8012f5e <HAL_TIM_Base_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80048a6:	4808      	ldr	r0, [pc, #32]	; (80048c8 <HAL_InitTick+0xd0>)
 80048a8:	f00e fbb0 	bl	801300c <HAL_TIM_Base_Start_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	e000      	b.n	80048b2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3740      	adds	r7, #64	; 0x40
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	240000d0 	.word	0x240000d0
 80048c0:	58024400 	.word	0x58024400
 80048c4:	431bde83 	.word	0x431bde83
 80048c8:	24001d54 	.word	0x24001d54
 80048cc:	40001000 	.word	0x40001000

080048d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80048d4:	e7fe      	b.n	80048d4 <NMI_Handler+0x4>

080048d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048da:	e7fe      	b.n	80048da <HardFault_Handler+0x4>

080048dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048e0:	e7fe      	b.n	80048e0 <MemManage_Handler+0x4>

080048e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048e6:	e7fe      	b.n	80048e6 <BusFault_Handler+0x4>

080048e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048ec:	e7fe      	b.n	80048ec <UsageFault_Handler+0x4>

080048ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004900:	4802      	ldr	r0, [pc, #8]	; (800490c <DMA1_Stream0_IRQHandler+0x10>)
 8004902:	f005 f973 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	24000224 	.word	0x24000224

08004910 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004914:	4802      	ldr	r0, [pc, #8]	; (8004920 <DMA1_Stream1_IRQHandler+0x10>)
 8004916:	f005 f969 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2400029c 	.word	0x2400029c

08004924 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004928:	4802      	ldr	r0, [pc, #8]	; (8004934 <DMA1_Stream2_IRQHandler+0x10>)
 800492a:	f005 f95f 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	24001ed0 	.word	0x24001ed0

08004938 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <DMA1_Stream3_IRQHandler+0x10>)
 800493e:	f005 f955 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	24001cdc 	.word	0x24001cdc

0800494c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004950:	4802      	ldr	r0, [pc, #8]	; (800495c <DMA1_Stream4_IRQHandler+0x10>)
 8004952:	f005 f94b 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	24001c64 	.word	0x24001c64

08004960 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <DMA1_Stream5_IRQHandler+0x10>)
 8004966:	f005 f941 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	24000328 	.word	0x24000328

08004974 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004978:	4802      	ldr	r0, [pc, #8]	; (8004984 <DMA1_Stream6_IRQHandler+0x10>)
 800497a:	f005 f937 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	24001994 	.word	0x24001994

08004988 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800498c:	4802      	ldr	r0, [pc, #8]	; (8004998 <TIM1_BRK_IRQHandler+0x10>)
 800498e:	f00e fe54 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	24001da4 	.word	0x24001da4

0800499c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049a0:	4802      	ldr	r0, [pc, #8]	; (80049ac <TIM1_UP_IRQHandler+0x10>)
 80049a2:	f00e fe4a 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	24001da4 	.word	0x24001da4

080049b0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049b4:	4802      	ldr	r0, [pc, #8]	; (80049c0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80049b6:	f00e fe40 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	24001da4 	.word	0x24001da4

080049c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049c8:	4802      	ldr	r0, [pc, #8]	; (80049d4 <TIM1_CC_IRQHandler+0x10>)
 80049ca:	f00e fe36 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	24001da4 	.word	0x24001da4

080049d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049dc:	4802      	ldr	r0, [pc, #8]	; (80049e8 <TIM2_IRQHandler+0x10>)
 80049de:	f00e fe2c 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	24001df0 	.word	0x24001df0

080049ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <I2C1_EV_IRQHandler+0x10>)
 80049f2:	f007 fb83 	bl	800c0fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	24001940 	.word	0x24001940

08004a00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <I2C1_ER_IRQHandler+0x10>)
 8004a06:	f007 fb93 	bl	800c130 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	24001940 	.word	0x24001940

08004a14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <SPI1_IRQHandler+0x10>)
 8004a1a:	f00d ff6d 	bl	80128f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	24001b54 	.word	0x24001b54

08004a28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <SPI2_IRQHandler+0x10>)
 8004a2e:	f00d ff63 	bl	80128f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	24001bdc 	.word	0x24001bdc

08004a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <USART1_IRQHandler+0x10>)
 8004a42:	f010 f93d 	bl	8014cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	24001e3c 	.word	0x24001e3c

08004a50 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <DMA1_Stream7_IRQHandler+0x10>)
 8004a56:	f005 f8c9 	bl	8009bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	24001a0c 	.word	0x24001a0c

08004a64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <TIM6_DAC_IRQHandler+0x20>)
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004a72:	4804      	ldr	r0, [pc, #16]	; (8004a84 <TIM6_DAC_IRQHandler+0x20>)
 8004a74:	f003 fb11 	bl	800809a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004a78:	4803      	ldr	r0, [pc, #12]	; (8004a88 <TIM6_DAC_IRQHandler+0x24>)
 8004a7a:	f00e fdde 	bl	801363a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	24000314 	.word	0x24000314
 8004a88:	24001d54 	.word	0x24001d54

08004a8c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <ITM_SendChar+0x48>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <ITM_SendChar+0x48>)
 8004a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <ITM_SendChar+0x4c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <ITM_SendChar+0x4c>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8004aae:	bf00      	nop
 8004ab0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f8      	beq.n	8004ab0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8004abe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	6013      	str	r3, [r2, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000edfc 	.word	0xe000edfc
 8004ad8:	e0000e00 	.word	0xe0000e00

08004adc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e00a      	b.n	8004b04 <_read+0x28>
		*ptr++ = __io_getchar();
 8004aee:	f3af 8000 	nop.w
 8004af2:	4601      	mov	r1, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	60ba      	str	r2, [r7, #8]
 8004afa:	b2ca      	uxtb	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	3301      	adds	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	dbf0      	blt.n	8004aee <_read+0x12>
	}

	return len;
 8004b0c:	687b      	ldr	r3, [r7, #4]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e009      	b.n	8004b3c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	60ba      	str	r2, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ffab 	bl	8004a8c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	dbf1      	blt.n	8004b28 <_write+0x12>
	}
	return len;
 8004b44:	687b      	ldr	r3, [r7, #4]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_close>:

int _close(int file) {
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b76:	605a      	str	r2, [r3, #4]
	return 0;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <_isatty>:

int _isatty(int file) {
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004b8e:	2301      	movs	r3, #1
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <_sbrk+0x64>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <_sbrk+0x64>)
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <_sbrk+0x68>)
 8004bd8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <_sbrk+0x64>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d207      	bcs.n	8004bf8 <_sbrk+0x40>
		errno = ENOMEM;
 8004be8:	f015 ff48 	bl	801aa7c <__errno>
 8004bec:	4603      	mov	r3, r0
 8004bee:	220c      	movs	r2, #12
 8004bf0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bf6:	e009      	b.n	8004c0c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <_sbrk+0x64>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <_sbrk+0x64>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <_sbrk+0x64>)
 8004c08:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	24080000 	.word	0x24080000
 8004c18:	00000400 	.word	0x00000400
 8004c1c:	24001da0 	.word	0x24001da0
 8004c20:	240069e8 	.word	0x240069e8

08004c24 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <SystemInit+0xe4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	4a36      	ldr	r2, [pc, #216]	; (8004d08 <SystemInit+0xe4>)
 8004c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004c38:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <SystemInit+0xe8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	2b06      	cmp	r3, #6
 8004c42:	d807      	bhi.n	8004c54 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004c44:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <SystemInit+0xe8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <SystemInit+0xe8>)
 8004c4e:	f043 0307 	orr.w	r3, r3, #7
 8004c52:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004c54:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <SystemInit+0xec>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <SystemInit+0xec>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <SystemInit+0xec>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004c66:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <SystemInit+0xec>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4929      	ldr	r1, [pc, #164]	; (8004d10 <SystemInit+0xec>)
 8004c6c:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <SystemInit+0xf0>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <SystemInit+0xe8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <SystemInit+0xe8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 030f 	bic.w	r3, r3, #15
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <SystemInit+0xe8>)
 8004c88:	f043 0307 	orr.w	r3, r3, #7
 8004c8c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <SystemInit+0xec>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <SystemInit+0xec>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <SystemInit+0xec>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <SystemInit+0xec>)
 8004ca2:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <SystemInit+0xf4>)
 8004ca4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <SystemInit+0xec>)
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <SystemInit+0xf8>)
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <SystemInit+0xec>)
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <SystemInit+0xfc>)
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <SystemInit+0xec>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <SystemInit+0xec>)
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <SystemInit+0xfc>)
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <SystemInit+0xec>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <SystemInit+0xec>)
 8004cc6:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <SystemInit+0xfc>)
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <SystemInit+0xec>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <SystemInit+0xec>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <SystemInit+0xec>)
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cda:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <SystemInit+0xec>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <SystemInit+0x100>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <SystemInit+0x104>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cee:	d202      	bcs.n	8004cf6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <SystemInit+0x108>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <SystemInit+0x10c>)
 8004cf8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004cfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004cfe:	bf00      	nop
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000ed00 	.word	0xe000ed00
 8004d0c:	52002000 	.word	0x52002000
 8004d10:	58024400 	.word	0x58024400
 8004d14:	eaf6ed7f 	.word	0xeaf6ed7f
 8004d18:	02020200 	.word	0x02020200
 8004d1c:	01ff0000 	.word	0x01ff0000
 8004d20:	01010280 	.word	0x01010280
 8004d24:	5c001000 	.word	0x5c001000
 8004d28:	ffff0000 	.word	0xffff0000
 8004d2c:	51008108 	.word	0x51008108
 8004d30:	52004000 	.word	0x52004000

08004d34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b09a      	sub	sp, #104	; 0x68
 8004d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	611a      	str	r2, [r3, #16]
 8004d64:	615a      	str	r2, [r3, #20]
 8004d66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	222c      	movs	r2, #44	; 0x2c
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f015 febc 	bl	801aaec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d74:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d76:	4a45      	ldr	r2, [pc, #276]	; (8004e8c <MX_TIM1_Init+0x158>)
 8004d78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004d7a:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d7c:	224a      	movs	r2, #74	; 0x4a
 8004d7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004d86:	4b40      	ldr	r3, [pc, #256]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d88:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d8e:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9a:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004da0:	4839      	ldr	r0, [pc, #228]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004da2:	f00e f8dc 	bl	8012f5e <HAL_TIM_Base_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004dac:	f7fe feec 	bl	8003b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4832      	ldr	r0, [pc, #200]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004dbe:	f00e fe57 	bl	8013a70 <HAL_TIM_ConfigClockSource>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004dc8:	f7fe fede 	bl	8003b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004dcc:	482e      	ldr	r0, [pc, #184]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004dce:	f00e fbd3 	bl	8013578 <HAL_TIM_PWM_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004dd8:	f7fe fed6 	bl	8003b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004de8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004dec:	4619      	mov	r1, r3
 8004dee:	4826      	ldr	r0, [pc, #152]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004df0:	f00f fb94 	bl	801451c <HAL_TIMEx_MasterConfigSynchronization>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004dfa:	f7fe fec5 	bl	8003b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dfe:	2360      	movs	r3, #96	; 0x60
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004e02:	f240 13df 	movw	r3, #479	; 0x1df
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e14:	2300      	movs	r3, #0
 8004e16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	4619      	mov	r1, r3
 8004e24:	4818      	ldr	r0, [pc, #96]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004e26:	f00e fd0f 	bl	8013848 <HAL_TIM_PWM_ConfigChannel>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004e30:	f7fe feaa 	bl	8003b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4807      	ldr	r0, [pc, #28]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004e6a:	f00f fbe5 	bl	8014638 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004e74:	f7fe fe88 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e78:	4803      	ldr	r0, [pc, #12]	; (8004e88 <MX_TIM1_Init+0x154>)
 8004e7a:	f000 f8dd 	bl	8005038 <HAL_TIM_MspPostInit>

}
 8004e7e:	bf00      	nop
 8004e80:	3768      	adds	r7, #104	; 0x68
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	24001da4 	.word	0x24001da4
 8004e8c:	40010000 	.word	0x40010000

08004e90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08e      	sub	sp, #56	; 0x38
 8004e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
 8004eba:	60da      	str	r2, [r3, #12]
 8004ebc:	611a      	str	r2, [r3, #16]
 8004ebe:	615a      	str	r2, [r3, #20]
 8004ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ec8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ecc:	224a      	movs	r2, #74	; 0x4a
 8004ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ed8:	f640 4234 	movw	r2, #3124	; 0xc34
 8004edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ee4:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004eea:	4823      	ldr	r0, [pc, #140]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004eec:	f00e f837 	bl	8012f5e <HAL_TIM_Base_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004ef6:	f7fe fe47 	bl	8003b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f04:	4619      	mov	r1, r3
 8004f06:	481c      	ldr	r0, [pc, #112]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004f08:	f00e fdb2 	bl	8013a70 <HAL_TIM_ConfigClockSource>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004f12:	f7fe fe39 	bl	8003b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f16:	4818      	ldr	r0, [pc, #96]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004f18:	f00e fb2e 	bl	8013578 <HAL_TIM_PWM_Init>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004f22:	f7fe fe31 	bl	8003b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004f26:	2320      	movs	r3, #32
 8004f28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f2e:	f107 031c 	add.w	r3, r7, #28
 8004f32:	4619      	mov	r1, r3
 8004f34:	4810      	ldr	r0, [pc, #64]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004f36:	f00f faf1 	bl	801451c <HAL_TIMEx_MasterConfigSynchronization>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004f40:	f7fe fe22 	bl	8003b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f44:	2360      	movs	r3, #96	; 0x60
 8004f46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f54:	463b      	mov	r3, r7
 8004f56:	220c      	movs	r2, #12
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4807      	ldr	r0, [pc, #28]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004f5c:	f00e fc74 	bl	8013848 <HAL_TIM_PWM_ConfigChannel>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004f66:	f7fe fe0f 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004f6a:	4803      	ldr	r0, [pc, #12]	; (8004f78 <MX_TIM2_Init+0xe8>)
 8004f6c:	f000 f864 	bl	8005038 <HAL_TIM_MspPostInit>

}
 8004f70:	bf00      	nop
 8004f72:	3738      	adds	r7, #56	; 0x38
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	24001df0 	.word	0x24001df0

08004f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <HAL_TIM_Base_MspInit+0xb4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d12f      	bne.n	8004fee <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 8004f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f9e:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 8004fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2105      	movs	r1, #5
 8004fb0:	2018      	movs	r0, #24
 8004fb2:	f002 fec3 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004fb6:	2018      	movs	r0, #24
 8004fb8:	f002 feda 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2105      	movs	r1, #5
 8004fc0:	2019      	movs	r0, #25
 8004fc2:	f002 febb 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004fc6:	2019      	movs	r0, #25
 8004fc8:	f002 fed2 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2105      	movs	r1, #5
 8004fd0:	201a      	movs	r0, #26
 8004fd2:	f002 feb3 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004fd6:	201a      	movs	r0, #26
 8004fd8:	f002 feca 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2105      	movs	r1, #5
 8004fe0:	201b      	movs	r0, #27
 8004fe2:	f002 feab 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004fe6:	201b      	movs	r0, #27
 8004fe8:	f002 fec2 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004fec:	e01b      	b.n	8005026 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff6:	d116      	bne.n	8005026 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 8004ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ffe:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_TIM_Base_MspInit+0xb8>)
 800500a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005016:	2200      	movs	r2, #0
 8005018:	2105      	movs	r1, #5
 800501a:	201c      	movs	r0, #28
 800501c:	f002 fe8e 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005020:	201c      	movs	r0, #28
 8005022:	f002 fea5 	bl	8007d70 <HAL_NVIC_EnableIRQ>
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	58024400 	.word	0x58024400

08005038 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <HAL_TIM_MspPostInit+0xb8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d120      	bne.n	800509c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005060:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 800506c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	2302      	movs	r3, #2
 8005080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800508a:	2301      	movs	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	4619      	mov	r1, r3
 8005094:	4818      	ldr	r0, [pc, #96]	; (80050f8 <HAL_TIM_MspPostInit+0xc0>)
 8005096:	f006 fbaf 	bl	800b7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800509a:	e024      	b.n	80050e6 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d11f      	bne.n	80050e6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 80050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_TIM_MspPostInit+0xbc>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050d6:	2301      	movs	r3, #1
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	4619      	mov	r1, r3
 80050e0:	4806      	ldr	r0, [pc, #24]	; (80050fc <HAL_TIM_MspPostInit+0xc4>)
 80050e2:	f006 fb89 	bl	800b7f8 <HAL_GPIO_Init>
}
 80050e6:	bf00      	nop
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000
 80050f4:	58024400 	.word	0x58024400
 80050f8:	58020000 	.word	0x58020000
 80050fc:	58020400 	.word	0x58020400

08005100 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <get_uptime+0x94>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <get_uptime+0x98>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <get_uptime+0x94>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d005      	beq.n	800512e <get_uptime+0x2e>
		ms = uptime_millis;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <get_uptime+0x94>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <get_uptime+0x98>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005134:	fb03 f202 	mul.w	r2, r3, r2
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <get_uptime+0x98>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	3301      	adds	r3, #1
 800513e:	4917      	ldr	r1, [pc, #92]	; (800519c <get_uptime+0x9c>)
 8005140:	fba1 1303 	umull	r1, r3, r1, r3
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	fbb1 f3f3 	udiv	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <get_uptime+0x5a>
		uptime = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	0e1b      	lsrs	r3, r3, #24
 800515e:	b2da      	uxtb	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	0c1a      	lsrs	r2, r3, #16
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3301      	adds	r3, #1
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	0a1a      	lsrs	r2, r3, #8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3302      	adds	r3, #2
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3303      	adds	r3, #3
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	24001ae4 	.word	0x24001ae4
 8005198:	e000e010 	.word	0xe000e010
 800519c:	10624dd3 	.word	0x10624dd3

080051a0 <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b09d      	sub	sp, #116	; 0x74
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80051aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051ae:	2200      	movs	r2, #0
 80051b0:	4619      	mov	r1, r3
 80051b2:	4893      	ldr	r0, [pc, #588]	; (8005400 <get_unix_time+0x260>)
 80051b4:	f00c ff32 	bl	801201c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80051b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051bc:	2200      	movs	r2, #0
 80051be:	4619      	mov	r1, r3
 80051c0:	488f      	ldr	r0, [pc, #572]	; (8005400 <get_unix_time+0x260>)
 80051c2:	f00d f80f 	bl	80121e4 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	4b8d      	ldr	r3, [pc, #564]	; (8005404 <get_unix_time+0x264>)
 80051d0:	fba3 2302 	umull	r2, r3, r3, r2
 80051d4:	08db      	lsrs	r3, r3, #3
 80051d6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	y = current_date.Year + 2000;
 80051e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80051f0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 80051f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051f8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 80051fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005204:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005208:	2b02      	cmp	r3, #2
 800520a:	d809      	bhi.n	8005220 <get_unix_time+0x80>
	{
		m += 12;
 800520c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005210:	330c      	adds	r3, #12
 8005212:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 8005216:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800521a:	3b01      	subs	r3, #1
 800521c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005220:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005224:	f240 136d 	movw	r3, #365	; 0x16d
 8005228:	fb03 f202 	mul.w	r2, r3, r2
 800522c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	b29b      	uxth	r3, r3
 8005234:	18d1      	adds	r1, r2, r3
 8005236:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800523a:	4b73      	ldr	r3, [pc, #460]	; (8005408 <get_unix_time+0x268>)
 800523c:	fba3 2302 	umull	r2, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	b29b      	uxth	r3, r3
 8005244:	1ac9      	subs	r1, r1, r3
 8005246:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800524a:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <get_unix_time+0x268>)
 800524c:	fba3 2302 	umull	r2, r3, r3, r2
 8005250:	09db      	lsrs	r3, r3, #7
 8005252:	b29b      	uxth	r3, r3
 8005254:	440b      	add	r3, r1
 8005256:	17da      	asrs	r2, r3, #31
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	627a      	str	r2, [r7, #36]	; 0x24
 800525c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005260:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005264:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	1899      	adds	r1, r3, r2
 800527e:	4b63      	ldr	r3, [pc, #396]	; (800540c <get_unix_time+0x26c>)
 8005280:	fb83 2301 	smull	r2, r3, r3, r1
 8005284:	105a      	asrs	r2, r3, #1
 8005286:	17cb      	asrs	r3, r1, #31
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	18c2      	adds	r2, r0, r3
 800528c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005290:	4413      	add	r3, r2
 8005292:	17da      	asrs	r2, r3, #31
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
 8005296:	637a      	str	r2, [r7, #52]	; 0x34
 8005298:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800529c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	61b9      	str	r1, [r7, #24]
 80052a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052a4:	eb43 0101 	adc.w	r1, r3, r1
 80052a8:	61f9      	str	r1, [r7, #28]
 80052aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 80052b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052b6:	4956      	ldr	r1, [pc, #344]	; (8005410 <get_unix_time+0x270>)
 80052b8:	1851      	adds	r1, r2, r1
 80052ba:	6139      	str	r1, [r7, #16]
 80052bc:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 80052ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	1896      	adds	r6, r2, r2
 80052d4:	60be      	str	r6, [r7, #8]
 80052d6:	415b      	adcs	r3, r3
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052de:	eb12 0800 	adds.w	r8, r2, r0
 80052e2:	eb43 0901 	adc.w	r9, r3, r1
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80052f2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80052f6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80052fa:	ebb2 0408 	subs.w	r4, r2, r8
 80052fe:	eb63 0509 	sbc.w	r5, r3, r9
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	012b      	lsls	r3, r5, #4
 800530c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005310:	0122      	lsls	r2, r4, #4
 8005312:	ebb2 0a04 	subs.w	sl, r2, r4
 8005316:	eb63 0b05 	sbc.w	fp, r3, r5
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005326:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 800532a:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 800532e:	4692      	mov	sl, r2
 8005330:	469b      	mov	fp, r3
 8005332:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 8005336:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800533a:	461a      	mov	r2, r3
 800533c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005340:	fb03 f202 	mul.w	r2, r3, r2
 8005344:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005348:	4619      	mov	r1, r3
 800534a:	460b      	mov	r3, r1
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a5b      	subs	r3, r3, r1
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005358:	4413      	add	r3, r2
 800535a:	2200      	movs	r2, #0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
 800535e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005360:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005364:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005368:	4621      	mov	r1, r4
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	4629      	mov	r1, r5
 8005370:	eb43 0101 	adc.w	r1, r3, r1
 8005374:	6079      	str	r1, [r7, #4]
 8005376:	e9d7 3400 	ldrd	r3, r4, [r7]
 800537a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 800537e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	0e02      	lsrs	r2, r0, #24
 800538c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005390:	0e0b      	lsrs	r3, r1, #24
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005396:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005398:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	0c02      	lsrs	r2, r0, #16
 80053a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053aa:	0c0b      	lsrs	r3, r1, #16
 80053ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ae:	3101      	adds	r1, #1
 80053b0:	b2d3      	uxtb	r3, r2
 80053b2:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 80053b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	0a02      	lsrs	r2, r0, #8
 80053c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80053c6:	0a0b      	lsrs	r3, r1, #8
 80053c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ca:	3102      	adds	r1, #2
 80053cc:	b2d3      	uxtb	r3, r2
 80053ce:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	3303      	adds	r3, #3
 80053d4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80053d8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 80053da:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e4:	3304      	adds	r3, #4
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	3305      	adds	r3, #5
 80053ee:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3774      	adds	r7, #116	; 0x74
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005400:	24001af8 	.word	0x24001af8
 8005404:	cccccccd 	.word	0xcccccccd
 8005408:	51eb851f 	.word	0x51eb851f
 800540c:	66666667 	.word	0x66666667
 8005410:	fff50537 	.word	0xfff50537

08005414 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	789b      	ldrb	r3, [r3, #2]
 8005428:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	795b      	ldrb	r3, [r3, #5]
 8005440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	799b      	ldrb	r3, [r3, #6]
 8005448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3307      	adds	r3, #7
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	b21a      	sxth	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3308      	adds	r3, #8
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b21b      	sxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b21b      	sxth	r3, r3
 8005462:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 800546c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005470:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005474:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 800547c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005480:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005486:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005488:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800548c:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800548e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005490:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005492:	f107 0320 	add.w	r3, r7, #32
 8005496:	2200      	movs	r2, #0
 8005498:	4619      	mov	r1, r3
 800549a:	480b      	ldr	r0, [pc, #44]	; (80054c8 <calibrateRTC+0xb4>)
 800549c:	f00c fe1a 	bl	80120d4 <HAL_RTC_SetDate>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80054a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <calibrateRTC+0x9e>
		Error_Handler();
 80054ae:	f7fe fb6b 	bl	8003b88 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	2200      	movs	r2, #0
 80054b8:	4619      	mov	r1, r3
 80054ba:	4803      	ldr	r0, [pc, #12]	; (80054c8 <calibrateRTC+0xb4>)
 80054bc:	f000 f806 	bl	80054cc <RTC_SetTime>
}
 80054c0:	bf00      	nop
 80054c2:	3730      	adds	r7, #48	; 0x30
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	24001af8 	.word	0x24001af8

080054cc <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <RTC_SetTime+0x1a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e051      	b.n	800558a <RTC_SetTime+0xbe>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	22ca      	movs	r2, #202	; 0xca
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2253      	movs	r2, #83	; 0x53
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f00c fede 	bl	80122c8 <RTC_EnterInitMode>
 800550c:	4603      	mov	r3, r0
 800550e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d129      	bne.n	800556a <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f00c ff43 	bl	80123ac <RTC_ByteToBcd2>
 8005526:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005528:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	4618      	mov	r0, r3
 8005530:	f00c ff3c 	bl	80123ac <RTC_ByteToBcd2>
 8005534:	4603      	mov	r3, r0
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	789b      	ldrb	r3, [r3, #2]
 800553e:	4618      	mov	r0, r3
 8005540:	f00c ff34 	bl	80123ac <RTC_ByteToBcd2>
 8005544:	4603      	mov	r3, r0
 8005546:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <RTC_SetTime+0xc8>)
 800555c:	400b      	ands	r3, r1
 800555e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f00c fee5 	bl	8012330 <RTC_ExitInitMode>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	22ff      	movs	r2, #255	; 0xff
 8005570:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005588:	7dfb      	ldrb	r3, [r7, #23]

}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	007f7f7f 	.word	0x007f7f7f

08005598 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800559c:	4b30      	ldr	r3, [pc, #192]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 800559e:	4a31      	ldr	r2, [pc, #196]	; (8005664 <MX_USART1_UART_Init+0xcc>)
 80055a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80055a2:	4b2f      	ldr	r3, [pc, #188]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055a4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80055a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055aa:	4b2d      	ldr	r3, [pc, #180]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055b0:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055b6:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055bc:	4b28      	ldr	r3, [pc, #160]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055be:	220c      	movs	r2, #12
 80055c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055c2:	4b27      	ldr	r3, [pc, #156]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055d4:	4b22      	ldr	r3, [pc, #136]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055dc:	2200      	movs	r2, #0
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055e0:	481f      	ldr	r0, [pc, #124]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055e2:	f00f f8c5 	bl	8014770 <HAL_UART_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80055ec:	f7fe facc 	bl	8003b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055f0:	2100      	movs	r1, #0
 80055f2:	481b      	ldr	r0, [pc, #108]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 80055f4:	f011 fe0b 	bl	801720e <HAL_UARTEx_SetTxFifoThreshold>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80055fe:	f7fe fac3 	bl	8003b88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005602:	2100      	movs	r1, #0
 8005604:	4816      	ldr	r0, [pc, #88]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005606:	f011 fe40 	bl	801728a <HAL_UARTEx_SetRxFifoThreshold>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005610:	f7fe faba 	bl	8003b88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005614:	4812      	ldr	r0, [pc, #72]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005616:	f011 fdc1 	bl	801719c <HAL_UARTEx_DisableFifoMode>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005620:	f7fe fab2 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005628:	480d      	ldr	r0, [pc, #52]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 800562a:	f011 fe2e 	bl	801728a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800562e:	480c      	ldr	r0, [pc, #48]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005630:	f011 fd79 	bl	8017126 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005634:	480a      	ldr	r0, [pc, #40]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005636:	f011 fd43 	bl	80170c0 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005648:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <MX_USART1_UART_Init+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005658:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	24001e3c 	.word	0x24001e3c
 8005664:	40011000 	.word	0x40011000

08005668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b0ba      	sub	sp, #232	; 0xe8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005670:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	22c0      	movs	r2, #192	; 0xc0
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f015 fa2f 	bl	801aaec <memset>
  if(uartHandle->Instance==USART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <HAL_UART_MspInit+0x130>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d17b      	bne.n	8005790 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005698:	f04f 0201 	mov.w	r2, #1
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80056a4:	2318      	movs	r3, #24
 80056a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	4618      	mov	r0, r3
 80056b0:	f009 fe96 	bl	800f3e0 <HAL_RCCEx_PeriphCLKConfig>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80056ba:	f7fe fa65 	bl	8003b88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <HAL_UART_MspInit+0x134>)
 80056c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056c4:	4a35      	ldr	r2, [pc, #212]	; (800579c <HAL_UART_MspInit+0x134>)
 80056c6:	f043 0310 	orr.w	r3, r3, #16
 80056ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056ce:	4b33      	ldr	r3, [pc, #204]	; (800579c <HAL_UART_MspInit+0x134>)
 80056d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_UART_MspInit+0x134>)
 80056de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056e2:	4a2e      	ldr	r2, [pc, #184]	; (800579c <HAL_UART_MspInit+0x134>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056ec:	4b2b      	ldr	r3, [pc, #172]	; (800579c <HAL_UART_MspInit+0x134>)
 80056ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005714:	2307      	movs	r3, #7
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800571a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800571e:	4619      	mov	r1, r3
 8005720:	481f      	ldr	r0, [pc, #124]	; (80057a0 <HAL_UART_MspInit+0x138>)
 8005722:	f006 f869 	bl	800b7f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005726:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_UART_MspInit+0x140>)
 800572a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 800572e:	222a      	movs	r2, #42	; 0x2a
 8005730:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005744:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005748:	2200      	movs	r2, #0
 800574a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 800574e:	2200      	movs	r2, #0
 8005750:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005758:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 800575a:	2200      	movs	r2, #0
 800575c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005760:	2200      	movs	r2, #0
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005764:	480f      	ldr	r0, [pc, #60]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005766:	f002 ff17 	bl	8008598 <HAL_DMA_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005770:	f7fe fa0a 	bl	8003b88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <HAL_UART_MspInit+0x13c>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2105      	movs	r1, #5
 8005784:	2025      	movs	r0, #37	; 0x25
 8005786:	f002 fad9 	bl	8007d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800578a:	2025      	movs	r0, #37	; 0x25
 800578c:	f002 faf0 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005790:	bf00      	nop
 8005792:	37e8      	adds	r7, #232	; 0xe8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40011000 	.word	0x40011000
 800579c:	58024400 	.word	0x58024400
 80057a0:	58020000 	.word	0x58020000
 80057a4:	24001ed0 	.word	0x24001ed0
 80057a8:	40020040 	.word	0x40020040

080057ac <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80057b6:	4bc1      	ldr	r3, [pc, #772]	; (8005abc <voltage_monitor_init+0x310>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80057bc:	4bbf      	ldr	r3, [pc, #764]	; (8005abc <voltage_monitor_init+0x310>)
 80057be:	2200      	movs	r2, #0
 80057c0:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80057c2:	4bbe      	ldr	r3, [pc, #760]	; (8005abc <voltage_monitor_init+0x310>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80057c8:	4bbc      	ldr	r3, [pc, #752]	; (8005abc <voltage_monitor_init+0x310>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 819;		// 50c
 80057ce:	4bbb      	ldr	r3, [pc, #748]	; (8005abc <voltage_monitor_init+0x310>)
 80057d0:	f240 3233 	movw	r2, #819	; 0x333
 80057d4:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 645;		// -20c
 80057d6:	4bb9      	ldr	r3, [pc, #740]	; (8005abc <voltage_monitor_init+0x310>)
 80057d8:	f240 2285 	movw	r2, #645	; 0x285
 80057dc:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 80057de:	4bb7      	ldr	r3, [pc, #732]	; (8005abc <voltage_monitor_init+0x310>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 80057e4:	4bb5      	ldr	r3, [pc, #724]	; (8005abc <voltage_monitor_init+0x310>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 80057ea:	4bb4      	ldr	r3, [pc, #720]	; (8005abc <voltage_monitor_init+0x310>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	81da      	strh	r2, [r3, #14]


	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80057f0:	4bb2      	ldr	r3, [pc, #712]	; (8005abc <voltage_monitor_init+0x310>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80057f6:	4bb1      	ldr	r3, [pc, #708]	; (8005abc <voltage_monitor_init+0x310>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80057fc:	4baf      	ldr	r3, [pc, #700]	; (8005abc <voltage_monitor_init+0x310>)
 80057fe:	2201      	movs	r2, #1
 8005800:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 8005802:	4bae      	ldr	r3, [pc, #696]	; (8005abc <voltage_monitor_init+0x310>)
 8005804:	2200      	movs	r2, #0
 8005806:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = 1557;		// 1.255v
 8005808:	4bac      	ldr	r3, [pc, #688]	; (8005abc <voltage_monitor_init+0x310>)
 800580a:	f240 6215 	movw	r2, #1557	; 0x615
 800580e:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = 1464;		// 1.180v
 8005810:	4baa      	ldr	r3, [pc, #680]	; (8005abc <voltage_monitor_init+0x310>)
 8005812:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8005816:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 8005818:	4ba8      	ldr	r3, [pc, #672]	; (8005abc <voltage_monitor_init+0x310>)
 800581a:	2200      	movs	r2, #0
 800581c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 800581e:	4ba7      	ldr	r3, [pc, #668]	; (8005abc <voltage_monitor_init+0x310>)
 8005820:	2200      	movs	r2, #0
 8005822:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 8005824:	4ba5      	ldr	r3, [pc, #660]	; (8005abc <voltage_monitor_init+0x310>)
 8005826:	2200      	movs	r2, #0
 8005828:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800582a:	4ba4      	ldr	r3, [pc, #656]	; (8005abc <voltage_monitor_init+0x310>)
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005832:	4ba2      	ldr	r3, [pc, #648]	; (8005abc <voltage_monitor_init+0x310>)
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800583a:	4ba0      	ldr	r3, [pc, #640]	; (8005abc <voltage_monitor_init+0x310>)
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 8005842:	4b9e      	ldr	r3, [pc, #632]	; (8005abc <voltage_monitor_init+0x310>)
 8005844:	2200      	movs	r2, #0
 8005846:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = 800;			// 50c
 8005848:	4b9c      	ldr	r3, [pc, #624]	; (8005abc <voltage_monitor_init+0x310>)
 800584a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800584e:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = 7872;		// -20c
 8005850:	4b9a      	ldr	r3, [pc, #616]	; (8005abc <voltage_monitor_init+0x310>)
 8005852:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 8005858:	4b98      	ldr	r3, [pc, #608]	; (8005abc <voltage_monitor_init+0x310>)
 800585a:	2200      	movs	r2, #0
 800585c:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 800585e:	4b97      	ldr	r3, [pc, #604]	; (8005abc <voltage_monitor_init+0x310>)
 8005860:	2200      	movs	r2, #0
 8005862:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 8005864:	4b95      	ldr	r3, [pc, #596]	; (8005abc <voltage_monitor_init+0x310>)
 8005866:	2200      	movs	r2, #0
 8005868:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 800586a:	4b94      	ldr	r3, [pc, #592]	; (8005abc <voltage_monitor_init+0x310>)
 800586c:	2203      	movs	r2, #3
 800586e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8005872:	4b92      	ldr	r3, [pc, #584]	; (8005abc <voltage_monitor_init+0x310>)
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800587a:	4b90      	ldr	r3, [pc, #576]	; (8005abc <voltage_monitor_init+0x310>)
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 8005882:	4b8e      	ldr	r3, [pc, #568]	; (8005abc <voltage_monitor_init+0x310>)
 8005884:	2200      	movs	r2, #0
 8005886:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = 800;			// 50c
 8005888:	4b8c      	ldr	r3, [pc, #560]	; (8005abc <voltage_monitor_init+0x310>)
 800588a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800588e:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = 7872;		// -20c
 8005890:	4b8a      	ldr	r3, [pc, #552]	; (8005abc <voltage_monitor_init+0x310>)
 8005892:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8005896:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 8005898:	4b88      	ldr	r3, [pc, #544]	; (8005abc <voltage_monitor_init+0x310>)
 800589a:	2200      	movs	r2, #0
 800589c:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 800589e:	4b87      	ldr	r3, [pc, #540]	; (8005abc <voltage_monitor_init+0x310>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 80058a4:	4b85      	ldr	r3, [pc, #532]	; (8005abc <voltage_monitor_init+0x310>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80058aa:	4b84      	ldr	r3, [pc, #528]	; (8005abc <voltage_monitor_init+0x310>)
 80058ac:	2204      	movs	r2, #4
 80058ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80058b2:	4b82      	ldr	r3, [pc, #520]	; (8005abc <voltage_monitor_init+0x310>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80058ba:	4b80      	ldr	r3, [pc, #512]	; (8005abc <voltage_monitor_init+0x310>)
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 80058c2:	4b7e      	ldr	r3, [pc, #504]	; (8005abc <voltage_monitor_init+0x310>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = 800;			// 50c
 80058ca:	4b7c      	ldr	r3, [pc, #496]	; (8005abc <voltage_monitor_init+0x310>)
 80058cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = 7872;		// -20c
 80058d4:	4b79      	ldr	r3, [pc, #484]	; (8005abc <voltage_monitor_init+0x310>)
 80058d6:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80058da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 80058de:	4b77      	ldr	r3, [pc, #476]	; (8005abc <voltage_monitor_init+0x310>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 80058e6:	4b75      	ldr	r3, [pc, #468]	; (8005abc <voltage_monitor_init+0x310>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 80058ee:	4b73      	ldr	r3, [pc, #460]	; (8005abc <voltage_monitor_init+0x310>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80058f6:	4b71      	ldr	r3, [pc, #452]	; (8005abc <voltage_monitor_init+0x310>)
 80058f8:	2205      	movs	r2, #5
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80058fe:	4b6f      	ldr	r3, [pc, #444]	; (8005abc <voltage_monitor_init+0x310>)
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005906:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <voltage_monitor_init+0x310>)
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 800590e:	4b6b      	ldr	r3, [pc, #428]	; (8005abc <voltage_monitor_init+0x310>)
 8005910:	2200      	movs	r2, #0
 8005912:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = 800;			// 50c
 8005916:	4b69      	ldr	r3, [pc, #420]	; (8005abc <voltage_monitor_init+0x310>)
 8005918:	f44f 7248 	mov.w	r2, #800	; 0x320
 800591c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = 7872;		// -20c
 8005920:	4b66      	ldr	r3, [pc, #408]	; (8005abc <voltage_monitor_init+0x310>)
 8005922:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8005926:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 800592a:	4b64      	ldr	r3, [pc, #400]	; (8005abc <voltage_monitor_init+0x310>)
 800592c:	2200      	movs	r2, #0
 800592e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 8005932:	4b62      	ldr	r3, [pc, #392]	; (8005abc <voltage_monitor_init+0x310>)
 8005934:	2200      	movs	r2, #0
 8005936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 800593a:	4b60      	ldr	r3, [pc, #384]	; (8005abc <voltage_monitor_init+0x310>)
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005942:	4b5e      	ldr	r3, [pc, #376]	; (8005abc <voltage_monitor_init+0x310>)
 8005944:	2206      	movs	r2, #6
 8005946:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 800594a:	4b5c      	ldr	r3, [pc, #368]	; (8005abc <voltage_monitor_init+0x310>)
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005952:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <voltage_monitor_init+0x310>)
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 800595a:	4b58      	ldr	r3, [pc, #352]	; (8005abc <voltage_monitor_init+0x310>)
 800595c:	2200      	movs	r2, #0
 800595e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005962:	4b56      	ldr	r3, [pc, #344]	; (8005abc <voltage_monitor_init+0x310>)
 8005964:	f242 7210 	movw	r2, #10000	; 0x2710
 8005968:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 800596c:	4b53      	ldr	r3, [pc, #332]	; (8005abc <voltage_monitor_init+0x310>)
 800596e:	2200      	movs	r2, #0
 8005970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 8005974:	4b51      	ldr	r3, [pc, #324]	; (8005abc <voltage_monitor_init+0x310>)
 8005976:	2200      	movs	r2, #0
 8005978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 800597c:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <voltage_monitor_init+0x310>)
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <voltage_monitor_init+0x310>)
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800598c:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <voltage_monitor_init+0x310>)
 800598e:	2207      	movs	r2, #7
 8005990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 8005994:	4b49      	ldr	r3, [pc, #292]	; (8005abc <voltage_monitor_init+0x310>)
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = 0;
 800599c:	4b47      	ldr	r3, [pc, #284]	; (8005abc <voltage_monitor_init+0x310>)
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 80059a4:	4b45      	ldr	r3, [pc, #276]	; (8005abc <voltage_monitor_init+0x310>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80059ac:	4b43      	ldr	r3, [pc, #268]	; (8005abc <voltage_monitor_init+0x310>)
 80059ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80059b2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80059b6:	4b41      	ldr	r3, [pc, #260]	; (8005abc <voltage_monitor_init+0x310>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 80059be:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <voltage_monitor_init+0x310>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <voltage_monitor_init+0x310>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 80059ce:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <voltage_monitor_init+0x310>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80059d6:	4b39      	ldr	r3, [pc, #228]	; (8005abc <voltage_monitor_init+0x310>)
 80059d8:	2208      	movs	r2, #8
 80059da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 80059de:	4b37      	ldr	r3, [pc, #220]	; (8005abc <voltage_monitor_init+0x310>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <voltage_monitor_init+0x310>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 80059ee:	4b33      	ldr	r3, [pc, #204]	; (8005abc <voltage_monitor_init+0x310>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = 3414;			// 2.75v
 80059f6:	4b31      	ldr	r3, [pc, #196]	; (8005abc <voltage_monitor_init+0x310>)
 80059f8:	f640 5256 	movw	r2, #3414	; 0xd56
 80059fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = 2792;			// 2.25v
 8005a00:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <voltage_monitor_init+0x310>)
 8005a02:	f640 22e8 	movw	r2, #2792	; 0xae8
 8005a06:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <voltage_monitor_init+0x310>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 8005a12:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <voltage_monitor_init+0x310>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 8005a1a:	4b28      	ldr	r3, [pc, #160]	; (8005abc <voltage_monitor_init+0x310>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005a22:	4b26      	ldr	r3, [pc, #152]	; (8005abc <voltage_monitor_init+0x310>)
 8005a24:	2209      	movs	r2, #9
 8005a26:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <voltage_monitor_init+0x310>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <voltage_monitor_init+0x310>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <voltage_monitor_init+0x310>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
//	rail_monitor[RAIL_3v3].max_voltage = 4095;			// 3.30v
//	rail_monitor[RAIL_3v3].min_voltage = 3350;			// 2.70v
	rail_monitor[RAIL_3v3].max_voltage = 10000;			// TODO: Erroring out at 1.19v, wait for Sanj
 8005a42:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <voltage_monitor_init+0x310>)
 8005a44:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a48:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <voltage_monitor_init+0x310>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <voltage_monitor_init+0x310>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <voltage_monitor_init+0x310>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 8005a64:	4b15      	ldr	r3, [pc, #84]	; (8005abc <voltage_monitor_init+0x310>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <voltage_monitor_init+0x310>)
 8005a6e:	220a      	movs	r2, #10
 8005a70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <voltage_monitor_init+0x310>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <voltage_monitor_init+0x310>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <voltage_monitor_init+0x310>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = 4095;			// 3.30v
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <voltage_monitor_init+0x310>)
 8005a8e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005a92:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = 3350;			// 2.70v
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <voltage_monitor_init+0x310>)
 8005a98:	f640 5216 	movw	r2, #3350	; 0xd16
 8005a9c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <voltage_monitor_init+0x310>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <voltage_monitor_init+0x310>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <voltage_monitor_init+0x310>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005ab8:	e002      	b.n	8005ac0 <voltage_monitor_init+0x314>
 8005aba:	bf00      	nop
 8005abc:	24001f48 	.word	0x24001f48

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005ac0:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ac2:	220b      	movs	r2, #11
 8005ac4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 8005ac8:	4b86      	ldr	r3, [pc, #536]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005ad0:	4b84      	ldr	r3, [pc, #528]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 8005ad8:	4b82      	ldr	r3, [pc, #520]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = 4286;			// 3.45v
 8005ae0:	4b80      	ldr	r3, [pc, #512]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ae2:	f241 02be 	movw	r2, #4286	; 0x10be
 8005ae6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = 3507;			// 2.83v
 8005aea:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005aec:	f640 52b3 	movw	r2, #3507	; 0xdb3
 8005af0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 8005af4:	4b7b      	ldr	r3, [pc, #492]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 8005afc:	4b79      	ldr	r3, [pc, #484]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 8005b04:	4b77      	ldr	r3, [pc, #476]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005b0c:	4b75      	ldr	r3, [pc, #468]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b0e:	220c      	movs	r2, #12
 8005b10:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 8005b14:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005b1c:	4b71      	ldr	r3, [pc, #452]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 8005b24:	4b6f      	ldr	r3, [pc, #444]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
//	rail_monitor[RAIL_n5v].max_voltage = 4150;			// 3.34v
//	rail_monitor[RAIL_n5v].min_voltage = 3395;			// 2.74v
	rail_monitor[RAIL_n5v].max_voltage = 10000;			// TODO: Erroring out at 0v, wait for Sanj
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b32:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005b36:	4b6b      	ldr	r3, [pc, #428]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 8005b3e:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 8005b46:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 8005b4e:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b58:	220d      	movs	r2, #13
 8005b5a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 8005b5e:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005b66:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 8005b6e:	4b5d      	ldr	r3, [pc, #372]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = 4095;			// 3.30v
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b78:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005b7c:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = 3350;			// 2.70v
 8005b80:	4b58      	ldr	r3, [pc, #352]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b82:	f640 5216 	movw	r2, #3350	; 0xd16
 8005b86:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 8005b8a:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 8005b92:	4b54      	ldr	r3, [pc, #336]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 8005b9a:	4b52      	ldr	r3, [pc, #328]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005ba2:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ba4:	220e      	movs	r2, #14
 8005ba6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 8005baa:	4b4e      	ldr	r3, [pc, #312]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005bb2:	4b4c      	ldr	r3, [pc, #304]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 8005bba:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = 4095;		// 3.30v
 8005bc2:	4b48      	ldr	r3, [pc, #288]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bc4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005bc8:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = 3350;		// 2.70v
 8005bcc:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bce:	f640 5216 	movw	r2, #3350	; 0xd16
 8005bd2:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 8005be6:	4b3f      	ldr	r3, [pc, #252]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005bee:	4b3d      	ldr	r3, [pc, #244]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 8005bf6:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005bfe:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = 3686;		// 2.97v
 8005c0e:	4b35      	ldr	r3, [pc, #212]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c10:	f640 6266 	movw	r2, #3686	; 0xe66
 8005c14:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = 3015;		// 2.43v
 8005c18:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c1a:	f640 32c7 	movw	r2, #3015	; 0xbc7
 8005c1e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 8005c22:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 8005c2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005c3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005c4a:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = 3494;		// 2.82v
 8005c5a:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c5c:	f640 52a6 	movw	r2, #3494	; 0xda6
 8005c60:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = 2859;		// 2.30v
 8005c64:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c66:	f640 322b 	movw	r2, #2859	; 0xb2b
 8005c6a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c88:	2211      	movs	r2, #17
 8005c8a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = 0;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = 2720;			// -40c NOTE: these are swapped because the conversion from int -> temp is inverse
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ca8:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 8005cac:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = 2023;			// 85c
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005cb2:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8005cb6:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <voltage_monitor_init+0x538>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

	status = 1;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	71fb      	strb	r3, [r7, #7]

	return status;
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	24001f48 	.word	0x24001f48

08005ce8 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	460a      	mov	r2, r1
 8005cf2:	71fb      	strb	r3, [r7, #7]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <set_rail_monitor_enable+0x34>)
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	4413      	add	r3, r2
 8005d04:	3302      	adds	r3, #2
 8005d06:	79ba      	ldrb	r2, [r7, #6]
 8005d08:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]

	return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	24001f48 	.word	0x24001f48

08005d20 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fa6e 	bl	8004210 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005d34:	f107 0310 	add.w	r3, r7, #16
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fa99 	bl	8004270 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005d3e:	f107 0308 	add.w	r3, r7, #8
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fae6 	bl	8004314 <sample_hk_adc3>
 8005d48:	893a      	ldrh	r2, [r7, #8]


	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 8005d4a:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d4c:	809a      	strh	r2, [r3, #4]
 8005d4e:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8005d50:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d52:	829a      	strh	r2, [r3, #20]
 8005d54:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d58:	849a      	strh	r2, [r3, #36]	; 0x24
 8005d5a:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d5e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005d60:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005d68:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005d70:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005d78:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d7c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005d80:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005d82:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d84:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005d88:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d8c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005d90:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d94:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005d98:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <set_rail_monitor+0xc4>)
 8005d9c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005da0:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <set_rail_monitor+0xc4>)
 8005da4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005da8:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <set_rail_monitor+0xc4>)
 8005dac:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8005db0:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <set_rail_monitor+0xc4>)
 8005db4:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8005db8:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <set_rail_monitor+0xc4>)
 8005dbc:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8005dc0:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005dc2:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <set_rail_monitor+0xc4>)
 8005dc4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005dc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <set_rail_monitor+0xc4>)
 8005dcc:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

	status = 1;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	24001f48 	.word	0x24001f48

08005de8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <get_rail_monitor+0x10>)
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	24001f48 	.word	0x24001f48

08005dfc <convert_ADT7410>:

int16_t convert_ADT7410(int16_t raw) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8005e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e12:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000) {
 8005e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1e:	db07      	blt.n	8005e30 <convert_ADT7410+0x34>
        ret -= 8192;
 8005e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005e58 <convert_ADT7410+0x5c>
 8005e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e2c:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 8005e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005e38:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8005e3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005e40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005e44:	ee17 3a90 	vmov	r3, s15
 8005e48:	b21b      	sxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	46000000 	.word	0x46000000

08005e5c <in_range>:

uint8_t in_range(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60ba      	str	r2, [r7, #8]
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4){
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d008      	beq.n	8005e86 <in_range+0x2a>
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d005      	beq.n	8005e86 <in_range+0x2a>
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d002      	beq.n	8005e86 <in_range+0x2a>
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d124      	bne.n	8005ed0 <in_range+0x74>
		int16_t converted_max = convert_ADT7410(max);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	b21b      	sxth	r3, r3
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ffb6 	bl	8005dfc <convert_ADT7410>
 8005e90:	4603      	mov	r3, r0
 8005e92:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ffaf 	bl	8005dfc <convert_ADT7410>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 8005ea2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ffa8 	bl	8005dfc <convert_ADT7410>
 8005eac:	4603      	mov	r3, r0
 8005eae:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min) {
 8005eb0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	dc07      	bgt.n	8005ecc <in_range+0x70>
 8005ebc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	db01      	blt.n	8005ecc <in_range+0x70>
			return 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e00c      	b.n	8005ee6 <in_range+0x8a>
		}
		return 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e00a      	b.n	8005ee6 <in_range+0x8a>
	}

	if (raw <= max && raw >= min) {
 8005ed0:	89bb      	ldrh	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	db05      	blt.n	8005ee4 <in_range+0x88>
 8005ed8:	89bb      	ldrh	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	dc01      	bgt.n	8005ee4 <in_range+0x88>
		return 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <in_range+0x8a>
	}
	return 0;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <monitor_rails>:


void monitor_rails() {
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e140      	b.n	800617e <monitor_rails+0x28e>
		if (rail_monitor[i].is_enabled){
 8005efc:	4aa6      	ldr	r2, [pc, #664]	; (8006198 <monitor_rails+0x2a8>)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	4413      	add	r3, r2
 8005f04:	3302      	adds	r3, #2
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8099 	beq.w	8006040 <monitor_rails+0x150>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005f0e:	4aa2      	ldr	r2, [pc, #648]	; (8006198 <monitor_rails+0x2a8>)
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4413      	add	r3, r2
 8005f16:	7818      	ldrb	r0, [r3, #0]
 8005f18:	4a9f      	ldr	r2, [pc, #636]	; (8006198 <monitor_rails+0x2a8>)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4413      	add	r3, r2
 8005f20:	3304      	adds	r3, #4
 8005f22:	8819      	ldrh	r1, [r3, #0]
 8005f24:	4a9c      	ldr	r2, [pc, #624]	; (8006198 <monitor_rails+0x2a8>)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	461c      	mov	r4, r3
 8005f32:	4a99      	ldr	r2, [pc, #612]	; (8006198 <monitor_rails+0x2a8>)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	4413      	add	r3, r2
 8005f3a:	3306      	adds	r3, #6
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	4622      	mov	r2, r4
 8005f40:	f7ff ff8c 	bl	8005e5c <in_range>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 8116 	bne.w	8006178 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005f4c:	4a92      	ldr	r2, [pc, #584]	; (8006198 <monitor_rails+0x2a8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	4413      	add	r3, r2
 8005f54:	3301      	adds	r3, #1
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2d9      	uxtb	r1, r3
 8005f5c:	4a8e      	ldr	r2, [pc, #568]	; (8006198 <monitor_rails+0x2a8>)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	3301      	adds	r3, #1
 8005f66:	460a      	mov	r2, r1
 8005f68:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 8005f6a:	4a8b      	ldr	r2, [pc, #556]	; (8006198 <monitor_rails+0x2a8>)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	3301      	adds	r3, #1
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d022      	beq.n	8005fc0 <monitor_rails+0xd0>
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	dc2e      	bgt.n	8005fdc <monitor_rails+0xec>
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d002      	beq.n	8005f88 <monitor_rails+0x98>
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d00e      	beq.n	8005fa4 <monitor_rails+0xb4>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 8005f86:	e029      	b.n	8005fdc <monitor_rails+0xec>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 8005f88:	4a83      	ldr	r2, [pc, #524]	; (8006198 <monitor_rails+0x2a8>)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	4413      	add	r3, r2
 8005f90:	3304      	adds	r3, #4
 8005f92:	8819      	ldrh	r1, [r3, #0]
 8005f94:	4a80      	ldr	r2, [pc, #512]	; (8006198 <monitor_rails+0x2a8>)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	330a      	adds	r3, #10
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	801a      	strh	r2, [r3, #0]
					break;
 8005fa2:	e01c      	b.n	8005fde <monitor_rails+0xee>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8005fa4:	4a7c      	ldr	r2, [pc, #496]	; (8006198 <monitor_rails+0x2a8>)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	8819      	ldrh	r1, [r3, #0]
 8005fb0:	4a79      	ldr	r2, [pc, #484]	; (8006198 <monitor_rails+0x2a8>)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	4413      	add	r3, r2
 8005fb8:	330c      	adds	r3, #12
 8005fba:	460a      	mov	r2, r1
 8005fbc:	801a      	strh	r2, [r3, #0]
					break;
 8005fbe:	e00e      	b.n	8005fde <monitor_rails+0xee>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8005fc0:	4a75      	ldr	r2, [pc, #468]	; (8006198 <monitor_rails+0x2a8>)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3304      	adds	r3, #4
 8005fca:	8819      	ldrh	r1, [r3, #0]
 8005fcc:	4a72      	ldr	r2, [pc, #456]	; (8006198 <monitor_rails+0x2a8>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	330e      	adds	r3, #14
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	801a      	strh	r2, [r3, #0]
					break;
 8005fda:	e000      	b.n	8005fde <monitor_rails+0xee>
					break;
 8005fdc:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005fde:	4a6e      	ldr	r2, [pc, #440]	; (8006198 <monitor_rails+0x2a8>)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	f040 80c4 	bne.w	8006178 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005ff0:	4a69      	ldr	r2, [pc, #420]	; (8006198 <monitor_rails+0x2a8>)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	4413      	add	r3, r2
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f8ce 	bl	800619c <get_rail_name_error_detail>
 8006000:	4603      	mov	r3, r0
 8006002:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8006004:	2300      	movs	r3, #0
 8006006:	723b      	strb	r3, [r7, #8]
					error.OOB_1 = rail_monitor[i].OOB_1;
 8006008:	4a63      	ldr	r2, [pc, #396]	; (8006198 <monitor_rails+0x2a8>)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	4413      	add	r3, r2
 8006010:	330a      	adds	r3, #10
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	817b      	strh	r3, [r7, #10]
					error.OOB_2 = rail_monitor[i].OOB_2;
 8006016:	4a60      	ldr	r2, [pc, #384]	; (8006198 <monitor_rails+0x2a8>)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	4413      	add	r3, r2
 800601e:	330c      	adds	r3, #12
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	81bb      	strh	r3, [r7, #12]
					error.OOB_3 = rail_monitor[i].OOB_3;
 8006024:	4a5c      	ldr	r2, [pc, #368]	; (8006198 <monitor_rails+0x2a8>)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	4413      	add	r3, r2
 800602c:	330e      	adds	r3, #14
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	81fb      	strh	r3, [r7, #14]

					handle_error(error);
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800603a:	f7fb ff8f 	bl	8001f5c <handle_error>
 800603e:	e09b      	b.n	8006178 <monitor_rails+0x288>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8006040:	4a55      	ldr	r2, [pc, #340]	; (8006198 <monitor_rails+0x2a8>)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	3306      	adds	r3, #6
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006054:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006190 <monitor_rails+0x2a0>
 8006058:	ee27 7b06 	vmul.f64	d7, d7, d6
 800605c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006060:	ee17 3a90 	vmov	r3, s15
 8006064:	827b      	strh	r3, [r7, #18]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance)) {
 8006066:	4a4c      	ldr	r2, [pc, #304]	; (8006198 <monitor_rails+0x2a8>)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	4413      	add	r3, r2
 800606e:	7818      	ldrb	r0, [r3, #0]
 8006070:	4a49      	ldr	r2, [pc, #292]	; (8006198 <monitor_rails+0x2a8>)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	4413      	add	r3, r2
 8006078:	3304      	adds	r3, #4
 800607a:	8819      	ldrh	r1, [r3, #0]
 800607c:	8a7b      	ldrh	r3, [r7, #18]
 800607e:	2200      	movs	r2, #0
 8006080:	f7ff feec 	bl	8005e5c <in_range>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d176      	bne.n	8006178 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 800608a:	4a43      	ldr	r2, [pc, #268]	; (8006198 <monitor_rails+0x2a8>)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	4413      	add	r3, r2
 8006092:	3301      	adds	r3, #1
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	b2d9      	uxtb	r1, r3
 800609a:	4a3f      	ldr	r2, [pc, #252]	; (8006198 <monitor_rails+0x2a8>)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	3301      	adds	r3, #1
 80060a4:	460a      	mov	r2, r1
 80060a6:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 80060a8:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <monitor_rails+0x2a8>)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4413      	add	r3, r2
 80060b0:	3301      	adds	r3, #1
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d022      	beq.n	80060fe <monitor_rails+0x20e>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	dc2e      	bgt.n	800611a <monitor_rails+0x22a>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <monitor_rails+0x1d6>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d00e      	beq.n	80060e2 <monitor_rails+0x1f2>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 80060c4:	e029      	b.n	800611a <monitor_rails+0x22a>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 80060c6:	4a34      	ldr	r2, [pc, #208]	; (8006198 <monitor_rails+0x2a8>)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	8819      	ldrh	r1, [r3, #0]
 80060d2:	4a31      	ldr	r2, [pc, #196]	; (8006198 <monitor_rails+0x2a8>)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	330a      	adds	r3, #10
 80060dc:	460a      	mov	r2, r1
 80060de:	801a      	strh	r2, [r3, #0]
					break;
 80060e0:	e01c      	b.n	800611c <monitor_rails+0x22c>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <monitor_rails+0x2a8>)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	4413      	add	r3, r2
 80060ea:	3304      	adds	r3, #4
 80060ec:	8819      	ldrh	r1, [r3, #0]
 80060ee:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <monitor_rails+0x2a8>)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4413      	add	r3, r2
 80060f6:	330c      	adds	r3, #12
 80060f8:	460a      	mov	r2, r1
 80060fa:	801a      	strh	r2, [r3, #0]
					break;
 80060fc:	e00e      	b.n	800611c <monitor_rails+0x22c>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 80060fe:	4a26      	ldr	r2, [pc, #152]	; (8006198 <monitor_rails+0x2a8>)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	8819      	ldrh	r1, [r3, #0]
 800610a:	4a23      	ldr	r2, [pc, #140]	; (8006198 <monitor_rails+0x2a8>)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	4413      	add	r3, r2
 8006112:	330e      	adds	r3, #14
 8006114:	460a      	mov	r2, r1
 8006116:	801a      	strh	r2, [r3, #0]
					break;
 8006118:	e000      	b.n	800611c <monitor_rails+0x22c>
					break;
 800611a:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 800611c:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <monitor_rails+0x2a8>)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	4413      	add	r3, r2
 8006124:	3301      	adds	r3, #1
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d125      	bne.n	8006178 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <monitor_rails+0x2a8>)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f830 	bl	800619c <get_rail_name_error_detail>
 800613c:	4603      	mov	r3, r0
 800613e:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8006140:	2300      	movs	r3, #0
 8006142:	703b      	strb	r3, [r7, #0]
					error.OOB_1 = rail_monitor[i].OOB_1;
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <monitor_rails+0x2a8>)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	4413      	add	r3, r2
 800614c:	330a      	adds	r3, #10
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	807b      	strh	r3, [r7, #2]
					error.OOB_2 = rail_monitor[i].OOB_2;
 8006152:	4a11      	ldr	r2, [pc, #68]	; (8006198 <monitor_rails+0x2a8>)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	4413      	add	r3, r2
 800615a:	330c      	adds	r3, #12
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	80bb      	strh	r3, [r7, #4]
					error.OOB_3 = rail_monitor[i].OOB_3;
 8006160:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <monitor_rails+0x2a8>)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	4413      	add	r3, r2
 8006168:	330e      	adds	r3, #14
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	80fb      	strh	r3, [r7, #6]
					handle_error(error);
 800616e:	463b      	mov	r3, r7
 8006170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006174:	f7fb fef2 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	3301      	adds	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b11      	cmp	r3, #17
 8006182:	f77f aebb 	ble.w	8005efc <monitor_rails+0xc>
				}
			}
		}
	}
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd90      	pop	{r4, r7, pc}
 8006190:	9999999a 	.word	0x9999999a
 8006194:	3fb99999 	.word	0x3fb99999
 8006198:	24001f48 	.word	0x24001f48

0800619c <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	2b11      	cmp	r3, #17
 80061aa:	d84b      	bhi.n	8006244 <get_rail_name_error_detail+0xa8>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <get_rail_name_error_detail+0x18>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	08006201 	.word	0x08006201
 80061bc:	08006205 	.word	0x08006205
 80061c0:	08006209 	.word	0x08006209
 80061c4:	0800620d 	.word	0x0800620d
 80061c8:	08006211 	.word	0x08006211
 80061cc:	08006215 	.word	0x08006215
 80061d0:	08006219 	.word	0x08006219
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	08006221 	.word	0x08006221
 80061dc:	08006225 	.word	0x08006225
 80061e0:	08006229 	.word	0x08006229
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	08006231 	.word	0x08006231
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006239 	.word	0x08006239
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	08006241 	.word	0x08006241
	case RAIL_vsense:
		return ED_vsense;
 80061fc:	2306      	movs	r3, #6
 80061fe:	e022      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8006200:	2307      	movs	r3, #7
 8006202:	e020      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8006204:	2308      	movs	r3, #8
 8006206:	e01e      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8006208:	2309      	movs	r3, #9
 800620a:	e01c      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 800620c:	230a      	movs	r3, #10
 800620e:	e01a      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8006210:	230b      	movs	r3, #11
 8006212:	e018      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8006214:	230c      	movs	r3, #12
 8006216:	e016      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8006218:	230d      	movs	r3, #13
 800621a:	e014      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 800621c:	230e      	movs	r3, #14
 800621e:	e012      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8006220:	230f      	movs	r3, #15
 8006222:	e010      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8006224:	2310      	movs	r3, #16
 8006226:	e00e      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8006228:	2311      	movs	r3, #17
 800622a:	e00c      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 800622c:	2312      	movs	r3, #18
 800622e:	e00a      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8006230:	2313      	movs	r3, #19
 8006232:	e008      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8006234:	2314      	movs	r3, #20
 8006236:	e006      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8006238:	2315      	movs	r3, #21
 800623a:	e004      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 800623c:	2316      	movs	r3, #22
 800623e:	e002      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8006240:	2317      	movs	r3, #23
 8006242:	e000      	b.n	8006246 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8006244:	231c      	movs	r3, #28
	}
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800628c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006258:	f7fe fce4 	bl	8004c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800625c:	480c      	ldr	r0, [pc, #48]	; (8006290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800625e:	490d      	ldr	r1, [pc, #52]	; (8006294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006260:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006264:	e002      	b.n	800626c <LoopCopyDataInit>

08006266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800626a:	3304      	adds	r3, #4

0800626c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800626c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800626e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006270:	d3f9      	bcc.n	8006266 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006274:	4c0a      	ldr	r4, [pc, #40]	; (80062a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006278:	e001      	b.n	800627e <LoopFillZerobss>

0800627a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800627a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800627c:	3204      	adds	r2, #4

0800627e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800627e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006280:	d3fb      	bcc.n	800627a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006282:	f014 fc01 	bl	801aa88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006286:	f7fd fa9d 	bl	80037c4 <main>
  bx  lr
 800628a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800628c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006290:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006294:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8006298:	0801b9b8 	.word	0x0801b9b8
  ldr r2, =_sbss
 800629c:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 80062a0:	240069e8 	.word	0x240069e8

080062a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062a4:	e7fe      	b.n	80062a4 <ADC3_IRQHandler>
	...

080062a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062ae:	2003      	movs	r0, #3
 80062b0:	f001 fd39 	bl	8007d26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062b4:	f008 fe7c 	bl	800efb0 <HAL_RCC_GetSysClockFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <HAL_Init+0x68>)
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	4913      	ldr	r1, [pc, #76]	; (8006314 <HAL_Init+0x6c>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
 80062d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <HAL_Init+0x68>)
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <HAL_Init+0x6c>)
 80062dc:	5cd3      	ldrb	r3, [r2, r3]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
 80062e8:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <HAL_Init+0x70>)
 80062ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <HAL_Init+0x74>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062f2:	2005      	movs	r0, #5
 80062f4:	f7fe fa80 	bl	80047f8 <HAL_InitTick>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e002      	b.n	8006308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006302:	f7fe fa5b 	bl	80047bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	58024400 	.word	0x58024400
 8006314:	0801b904 	.word	0x0801b904
 8006318:	240000cc 	.word	0x240000cc
 800631c:	240000c8 	.word	0x240000c8

08006320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_IncTick+0x20>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_IncTick+0x24>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4413      	add	r3, r2
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <HAL_IncTick+0x24>)
 8006332:	6013      	str	r3, [r2, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	240000d4 	.word	0x240000d4
 8006344:	24002068 	.word	0x24002068

08006348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return uwTick;
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <HAL_GetTick+0x14>)
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	24002068 	.word	0x24002068

08006360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006364:	4b03      	ldr	r3, [pc, #12]	; (8006374 <HAL_GetREVID+0x14>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0c1b      	lsrs	r3, r3, #16
}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	5c001000 	.word	0x5c001000

08006378 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	43db      	mvns	r3, r3
 800638a:	401a      	ands	r2, r3
 800638c:	4904      	ldr	r1, [pc, #16]	; (80063a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	58000400 	.word	0x58000400

080063a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	609a      	str	r2, [r3, #8]
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3360      	adds	r3, #96	; 0x60
 800641e:	461a      	mov	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	430b      	orrs	r3, r1
 800643a:	431a      	orrs	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	611a      	str	r2, [r3, #16]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3360      	adds	r3, #96	; 0x60
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	601a      	str	r2, [r3, #0]
  }
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3330      	adds	r3, #48	; 0x30
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	4413      	add	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	211f      	movs	r1, #31
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	401a      	ands	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0e9b      	lsrs	r3, r3, #26
 8006512:	f003 011f 	and.w	r1, r3, #31
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f023 0203 	bic.w	r2, r3, #3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3314      	adds	r3, #20
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	0e5b      	lsrs	r3, r3, #25
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	4413      	add	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	0d1b      	lsrs	r3, r3, #20
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2107      	movs	r1, #7
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	43db      	mvns	r3, r3
 800658c:	401a      	ands	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	0d1b      	lsrs	r3, r3, #20
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	431a      	orrs	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c8:	43db      	mvns	r3, r3
 80065ca:	401a      	ands	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f003 0318 	and.w	r3, r3, #24
 80065d2:	4908      	ldr	r1, [pc, #32]	; (80065f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80065d4:	40d9      	lsrs	r1, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	400b      	ands	r3, r1
 80065da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065de:	431a      	orrs	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	000fffff 	.word	0x000fffff

080065f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 031f 	and.w	r3, r3, #31
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006622:	4013      	ands	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6093      	str	r3, [r2, #8]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	5fffffc0 	.word	0x5fffffc0

08006638 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664c:	d101      	bne.n	8006652 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <LL_ADC_EnableInternalRegulator+0x24>)
 800666e:	4013      	ands	r3, r2
 8006670:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	6fffffc0 	.word	0x6fffffc0

08006688 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669c:	d101      	bne.n	80066a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <LL_ADC_Enable+0x24>)
 80066be:	4013      	ands	r3, r2
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	7fffffc0 	.word	0x7fffffc0

080066d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <LL_ADC_Disable+0x24>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	f043 0202 	orr.w	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	7fffffc0 	.word	0x7fffffc0

08006700 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <LL_ADC_IsEnabled+0x18>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <LL_ADC_IsEnabled+0x1a>
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d101      	bne.n	800673e <LL_ADC_IsDisableOngoing+0x18>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <LL_ADC_IsDisableOngoing+0x1a>
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <LL_ADC_REG_StartConversion+0x24>)
 800675a:	4013      	ands	r3, r2
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	7fffffc0 	.word	0x7fffffc0

08006774 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b04      	cmp	r3, #4
 8006786:	d101      	bne.n	800678c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d101      	bne.n	80067b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e18f      	b.n	8006afa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fa f8af 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff19 	bl	8006638 <LL_ADC_IsDeepPowerDownEnabled>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff feff 	bl	8006614 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff ff34 	bl	8006688 <LL_ADC_IsInternalRegulatorEnabled>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d114      	bne.n	8006850 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff ff18 	bl	8006660 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006830:	4b87      	ldr	r3, [pc, #540]	; (8006a50 <HAL_ADC_Init+0x290>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	4a87      	ldr	r2, [pc, #540]	; (8006a54 <HAL_ADC_Init+0x294>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	099b      	lsrs	r3, r3, #6
 800683e:	3301      	adds	r3, #1
 8006840:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006842:	e002      	b.n	800684a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3b01      	subs	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f9      	bne.n	8006844 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff17 	bl	8006688 <LL_ADC_IsInternalRegulatorEnabled>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10d      	bne.n	800687c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	f043 0210 	orr.w	r2, r3, #16
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	f043 0201 	orr.w	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff ff77 	bl	8006774 <LL_ADC_REG_IsConversionOngoing>
 8006886:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8129 	bne.w	8006ae8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 8125 	bne.w	8006ae8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff ff24 	bl	8006700 <LL_ADC_IsEnabled>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d136      	bne.n	800692c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a65      	ldr	r2, [pc, #404]	; (8006a58 <HAL_ADC_Init+0x298>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_ADC_Init+0x112>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a63      	ldr	r2, [pc, #396]	; (8006a5c <HAL_ADC_Init+0x29c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10e      	bne.n	80068f0 <HAL_ADC_Init+0x130>
 80068d2:	4861      	ldr	r0, [pc, #388]	; (8006a58 <HAL_ADC_Init+0x298>)
 80068d4:	f7ff ff14 	bl	8006700 <LL_ADC_IsEnabled>
 80068d8:	4604      	mov	r4, r0
 80068da:	4860      	ldr	r0, [pc, #384]	; (8006a5c <HAL_ADC_Init+0x29c>)
 80068dc:	f7ff ff10 	bl	8006700 <LL_ADC_IsEnabled>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4323      	orrs	r3, r4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e008      	b.n	8006902 <HAL_ADC_Init+0x142>
 80068f0:	485b      	ldr	r0, [pc, #364]	; (8006a60 <HAL_ADC_Init+0x2a0>)
 80068f2:	f7ff ff05 	bl	8006700 <LL_ADC_IsEnabled>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a53      	ldr	r2, [pc, #332]	; (8006a58 <HAL_ADC_Init+0x298>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_ADC_Init+0x15a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a51      	ldr	r2, [pc, #324]	; (8006a5c <HAL_ADC_Init+0x29c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d101      	bne.n	800691e <HAL_ADC_Init+0x15e>
 800691a:	4a52      	ldr	r2, [pc, #328]	; (8006a64 <HAL_ADC_Init+0x2a4>)
 800691c:	e000      	b.n	8006920 <HAL_ADC_Init+0x160>
 800691e:	4a52      	ldr	r2, [pc, #328]	; (8006a68 <HAL_ADC_Init+0x2a8>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f7ff fd3c 	bl	80063a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800692c:	f7ff fd18 	bl	8006360 <HAL_GetREVID>
 8006930:	4603      	mov	r3, r0
 8006932:	f241 0203 	movw	r2, #4099	; 0x1003
 8006936:	4293      	cmp	r3, r2
 8006938:	d914      	bls.n	8006964 <HAL_ADC_Init+0x1a4>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b10      	cmp	r3, #16
 8006940:	d110      	bne.n	8006964 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7d5b      	ldrb	r3, [r3, #21]
 8006946:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800694c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006952:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7f1b      	ldrb	r3, [r3, #28]
 8006958:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800695a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800695c:	f043 030c 	orr.w	r3, r3, #12
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e00d      	b.n	8006980 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7d5b      	ldrb	r3, [r3, #21]
 8006968:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800696e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006974:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7f1b      	ldrb	r3, [r3, #28]
 800697a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7f1b      	ldrb	r3, [r3, #28]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d106      	bne.n	8006996 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	3b01      	subs	r3, #1
 800698e:	045b      	lsls	r3, r3, #17
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <HAL_ADC_Init+0x2ac>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	430b      	orrs	r3, r1
 80069c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fed2 	bl	8006774 <LL_ADC_REG_IsConversionOngoing>
 80069d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fedf 	bl	800679a <LL_ADC_INJ_IsConversionOngoing>
 80069dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d15f      	bne.n	8006aa4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d15c      	bne.n	8006aa4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7d1b      	ldrb	r3, [r3, #20]
 80069ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_ADC_Init+0x2b0>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d130      	bne.n	8006a78 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <HAL_ADC_Init+0x2b4>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	0411      	lsls	r1, r2, #16
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a32:	4311      	orrs	r1, r2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	611a      	str	r2, [r3, #16]
 8006a4c:	e01c      	b.n	8006a88 <HAL_ADC_Init+0x2c8>
 8006a4e:	bf00      	nop
 8006a50:	240000c8 	.word	0x240000c8
 8006a54:	053e2d63 	.word	0x053e2d63
 8006a58:	40022000 	.word	0x40022000
 8006a5c:	40022100 	.word	0x40022100
 8006a60:	58026000 	.word	0x58026000
 8006a64:	40022300 	.word	0x40022300
 8006a68:	58026300 	.word	0x58026300
 8006a6c:	fff0c003 	.word	0xfff0c003
 8006a70:	ffffbffc 	.word	0xffffbffc
 8006a74:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fdec 	bl	800767c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10c      	bne.n	8006ac6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	f023 010f 	bic.w	r1, r3, #15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	1e5a      	subs	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac4:	e007      	b.n	8006ad6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 020f 	bic.w	r2, r2, #15
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	655a      	str	r2, [r3, #84]	; 0x54
 8006ae6:	e007      	b.n	8006af8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aec:	f043 0210 	orr.w	r2, r3, #16
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3724      	adds	r7, #36	; 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}
 8006b02:	bf00      	nop

08006b04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a55      	ldr	r2, [pc, #340]	; (8006c6c <HAL_ADC_Start_DMA+0x168>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_ADC_Start_DMA+0x20>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a54      	ldr	r2, [pc, #336]	; (8006c70 <HAL_ADC_Start_DMA+0x16c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d101      	bne.n	8006b28 <HAL_ADC_Start_DMA+0x24>
 8006b24:	4b53      	ldr	r3, [pc, #332]	; (8006c74 <HAL_ADC_Start_DMA+0x170>)
 8006b26:	e000      	b.n	8006b2a <HAL_ADC_Start_DMA+0x26>
 8006b28:	4b53      	ldr	r3, [pc, #332]	; (8006c78 <HAL_ADC_Start_DMA+0x174>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fd64 	bl	80065f8 <LL_ADC_GetMultimode>
 8006b30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fe1c 	bl	8006774 <LL_ADC_REG_IsConversionOngoing>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f040 808c 	bne.w	8006c5c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_ADC_Start_DMA+0x4e>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e087      	b.n	8006c62 <HAL_ADC_Start_DMA+0x15e>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d002      	beq.n	8006b6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d170      	bne.n	8006c4e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fc07 	bl	8007380 <ADC_Enable>
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d163      	bne.n	8006c44 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b80:	4b3e      	ldr	r3, [pc, #248]	; (8006c7c <HAL_ADC_Start_DMA+0x178>)
 8006b82:	4013      	ands	r3, r2
 8006b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a37      	ldr	r2, [pc, #220]	; (8006c70 <HAL_ADC_Start_DMA+0x16c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d002      	beq.n	8006b9c <HAL_ADC_Start_DMA+0x98>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	e000      	b.n	8006b9e <HAL_ADC_Start_DMA+0x9a>
 8006b9c:	4b33      	ldr	r3, [pc, #204]	; (8006c6c <HAL_ADC_Start_DMA+0x168>)
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d002      	beq.n	8006bac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	f023 0206 	bic.w	r2, r3, #6
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58
 8006bd0:	e002      	b.n	8006bd8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bdc:	4a28      	ldr	r2, [pc, #160]	; (8006c80 <HAL_ADC_Start_DMA+0x17c>)
 8006bde:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_ADC_Start_DMA+0x180>)
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_ADC_Start_DMA+0x184>)
 8006bee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	221c      	movs	r2, #28
 8006bf6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0210 	orr.w	r2, r2, #16
 8006c0e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7ff fc89 	bl	8006532 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3340      	adds	r3, #64	; 0x40
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f002 f80e 	bl	8008c50 <HAL_DMA_Start_IT>
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fd85 	bl	800674c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006c42:	e00d      	b.n	8006c60 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006c4c:	e008      	b.n	8006c60 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006c5a:	e001      	b.n	8006c60 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	40022100 	.word	0x40022100
 8006c74:	40022300 	.word	0x40022300
 8006c78:	58026300 	.word	0x58026300
 8006c7c:	fffff0fe 	.word	0xfffff0fe
 8006c80:	08007553 	.word	0x08007553
 8006c84:	0800762b 	.word	0x0800762b
 8006c88:	08007647 	.word	0x08007647

08006c8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006cc8:	b590      	push	{r4, r7, lr}
 8006cca:	b0a1      	sub	sp, #132	; 0x84
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_ADC_ConfigChannel+0x1b0>)
 8006ce2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x2a>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e32e      	b.n	8007350 <HAL_ADC_ConfigChannel+0x688>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fd38 	bl	8006774 <LL_ADC_REG_IsConversionOngoing>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 8313 	bne.w	8007332 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db2c      	blt.n	8006d6e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d108      	bne.n	8006d32 <HAL_ADC_ConfigChannel+0x6a>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	0e9b      	lsrs	r3, r3, #26
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	e016      	b.n	8006d60 <HAL_ADC_ConfigChannel+0x98>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d3a:	fa93 f3a3 	rbit	r3, r3
 8006d3e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d42:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	e003      	b.n	8006d56 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d50:	fab3 f383 	clz	r3, r3
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	69d1      	ldr	r1, [r2, #28]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6859      	ldr	r1, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7ff fbad 	bl	80064da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fcf5 	bl	8006774 <LL_ADC_REG_IsConversionOngoing>
 8006d8a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fd02 	bl	800679a <LL_ADC_INJ_IsConversionOngoing>
 8006d96:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 80b8 	bne.w	8006f10 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 80b4 	bne.w	8006f10 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f7ff fbcf 	bl	8006558 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006dba:	4b30      	ldr	r3, [pc, #192]	; (8006e7c <HAL_ADC_ConfigChannel+0x1b4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dc6:	d10b      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x118>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	e01d      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x154>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x13e>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695a      	ldr	r2, [r3, #20]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	e00a      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x154>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d02c      	beq.n	8006e80 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6919      	ldr	r1, [r3, #16]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e34:	f7ff faea 	bl	800640c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6919      	ldr	r1, [r3, #16]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	7e5b      	ldrb	r3, [r3, #25]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d102      	bne.n	8006e4e <HAL_ADC_ConfigChannel+0x186>
 8006e48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e4c:	e000      	b.n	8006e50 <HAL_ADC_ConfigChannel+0x188>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	461a      	mov	r2, r3
 8006e52:	f7ff fb14 	bl	800647e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	6919      	ldr	r1, [r3, #16]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	7e1b      	ldrb	r3, [r3, #24]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d102      	bne.n	8006e6c <HAL_ADC_ConfigChannel+0x1a4>
 8006e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e6a:	e000      	b.n	8006e6e <HAL_ADC_ConfigChannel+0x1a6>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7ff faec 	bl	800644c <LL_ADC_SetDataRightShift>
 8006e74:	e04c      	b.n	8006f10 <HAL_ADC_ConfigChannel+0x248>
 8006e76:	bf00      	nop
 8006e78:	47ff0000 	.word	0x47ff0000
 8006e7c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	069b      	lsls	r3, r3, #26
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d107      	bne.n	8006ea4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	069b      	lsls	r3, r3, #26
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d107      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ec6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	069b      	lsls	r3, r3, #26
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d107      	bne.n	8006eec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006eea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	069b      	lsls	r3, r3, #26
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d107      	bne.n	8006f10 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006f0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fbf3 	bl	8006700 <LL_ADC_IsEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8211 	bne.w	8007344 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6819      	ldr	r1, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7ff fb3e 	bl	80065b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4aa1      	ldr	r2, [pc, #644]	; (80071c0 <HAL_ADC_ConfigChannel+0x4f8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f040 812e 	bne.w	800719c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x2a0>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0e9b      	lsrs	r3, r3, #26
 8006f56:	3301      	adds	r3, #1
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	bf94      	ite	ls
 8006f60:	2301      	movls	r3, #1
 8006f62:	2300      	movhi	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e019      	b.n	8006f9c <HAL_ADC_ConfigChannel+0x2d4>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f70:	fa93 f3a3 	rbit	r3, r3
 8006f74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006f80:	2320      	movs	r3, #32
 8006f82:	e003      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	bf94      	ite	ls
 8006f96:	2301      	movls	r3, #1
 8006f98:	2300      	movhi	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d079      	beq.n	8007094 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x2f4>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	0e9b      	lsrs	r3, r3, #26
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	069b      	lsls	r3, r3, #26
 8006fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fba:	e015      	b.n	8006fe8 <HAL_ADC_ConfigChannel+0x320>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc4:	fa93 f3a3 	rbit	r3, r3
 8006fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fcc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	e003      	b.n	8006fe0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fda:	fab3 f383 	clz	r3, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	069b      	lsls	r3, r3, #26
 8006fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x340>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	0e9b      	lsrs	r3, r3, #26
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2101      	movs	r1, #1
 8007002:	fa01 f303 	lsl.w	r3, r1, r3
 8007006:	e017      	b.n	8007038 <HAL_ADC_ConfigChannel+0x370>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007010:	fa93 f3a3 	rbit	r3, r3
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8007020:	2320      	movs	r3, #32
 8007022:	e003      	b.n	800702c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8007024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007026:	fab3 f383 	clz	r3, r3
 800702a:	b2db      	uxtb	r3, r3
 800702c:	3301      	adds	r3, #1
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	ea42 0103 	orr.w	r1, r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <HAL_ADC_ConfigChannel+0x396>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	0e9b      	lsrs	r3, r3, #26
 800704e:	3301      	adds	r3, #1
 8007050:	f003 021f 	and.w	r2, r3, #31
 8007054:	4613      	mov	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4413      	add	r3, r2
 800705a:	051b      	lsls	r3, r3, #20
 800705c:	e018      	b.n	8007090 <HAL_ADC_ConfigChannel+0x3c8>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	fa93 f3a3 	rbit	r3, r3
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8007076:	2320      	movs	r3, #32
 8007078:	e003      	b.n	8007082 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	fab3 f383 	clz	r3, r3
 8007080:	b2db      	uxtb	r3, r3
 8007082:	3301      	adds	r3, #1
 8007084:	f003 021f 	and.w	r2, r3, #31
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007090:	430b      	orrs	r3, r1
 8007092:	e07e      	b.n	8007192 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709c:	2b00      	cmp	r3, #0
 800709e:	d107      	bne.n	80070b0 <HAL_ADC_ConfigChannel+0x3e8>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	0e9b      	lsrs	r3, r3, #26
 80070a6:	3301      	adds	r3, #1
 80070a8:	069b      	lsls	r3, r3, #26
 80070aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070ae:	e015      	b.n	80070dc <HAL_ADC_ConfigChannel+0x414>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	fa93 f3a3 	rbit	r3, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80070c8:	2320      	movs	r3, #32
 80070ca:	e003      	b.n	80070d4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	fab3 f383 	clz	r3, r3
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	3301      	adds	r3, #1
 80070d6:	069b      	lsls	r3, r3, #26
 80070d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_ADC_ConfigChannel+0x434>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	0e9b      	lsrs	r3, r3, #26
 80070ee:	3301      	adds	r3, #1
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	e017      	b.n	800712c <HAL_ADC_ConfigChannel+0x464>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	fa93 f3a3 	rbit	r3, r3
 8007108:	61bb      	str	r3, [r7, #24]
  return result;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8007114:	2320      	movs	r3, #32
 8007116:	e003      	b.n	8007120 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	fab3 f383 	clz	r3, r3
 800711e:	b2db      	uxtb	r3, r3
 8007120:	3301      	adds	r3, #1
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2101      	movs	r1, #1
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	ea42 0103 	orr.w	r1, r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10d      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x490>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	0e9b      	lsrs	r3, r3, #26
 8007142:	3301      	adds	r3, #1
 8007144:	f003 021f 	and.w	r2, r3, #31
 8007148:	4613      	mov	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	3b1e      	subs	r3, #30
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007156:	e01b      	b.n	8007190 <HAL_ADC_ConfigChannel+0x4c8>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	fa93 f3a3 	rbit	r3, r3
 8007164:	60fb      	str	r3, [r7, #12]
  return result;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007170:	2320      	movs	r3, #32
 8007172:	e003      	b.n	800717c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	fab3 f383 	clz	r3, r3
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3301      	adds	r3, #1
 800717e:	f003 021f 	and.w	r2, r3, #31
 8007182:	4613      	mov	r3, r2
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	4413      	add	r3, r2
 8007188:	3b1e      	subs	r3, #30
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007190:	430b      	orrs	r3, r1
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	4619      	mov	r1, r3
 8007198:	f7ff f9de 	bl	8006558 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f280 80cf 	bge.w	8007344 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a06      	ldr	r2, [pc, #24]	; (80071c4 <HAL_ADC_ConfigChannel+0x4fc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_ADC_ConfigChannel+0x4f2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <HAL_ADC_ConfigChannel+0x500>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d10a      	bne.n	80071d0 <HAL_ADC_ConfigChannel+0x508>
 80071ba:	4b04      	ldr	r3, [pc, #16]	; (80071cc <HAL_ADC_ConfigChannel+0x504>)
 80071bc:	e009      	b.n	80071d2 <HAL_ADC_ConfigChannel+0x50a>
 80071be:	bf00      	nop
 80071c0:	47ff0000 	.word	0x47ff0000
 80071c4:	40022000 	.word	0x40022000
 80071c8:	40022100 	.word	0x40022100
 80071cc:	40022300 	.word	0x40022300
 80071d0:	4b61      	ldr	r3, [pc, #388]	; (8007358 <HAL_ADC_ConfigChannel+0x690>)
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff f90c 	bl	80063f0 <LL_ADC_GetCommonPathInternalCh>
 80071d8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a5f      	ldr	r2, [pc, #380]	; (800735c <HAL_ADC_ConfigChannel+0x694>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_ADC_ConfigChannel+0x526>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a5d      	ldr	r2, [pc, #372]	; (8007360 <HAL_ADC_ConfigChannel+0x698>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d10e      	bne.n	800720c <HAL_ADC_ConfigChannel+0x544>
 80071ee:	485b      	ldr	r0, [pc, #364]	; (800735c <HAL_ADC_ConfigChannel+0x694>)
 80071f0:	f7ff fa86 	bl	8006700 <LL_ADC_IsEnabled>
 80071f4:	4604      	mov	r4, r0
 80071f6:	485a      	ldr	r0, [pc, #360]	; (8007360 <HAL_ADC_ConfigChannel+0x698>)
 80071f8:	f7ff fa82 	bl	8006700 <LL_ADC_IsEnabled>
 80071fc:	4603      	mov	r3, r0
 80071fe:	4323      	orrs	r3, r4
 8007200:	2b00      	cmp	r3, #0
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	e008      	b.n	800721e <HAL_ADC_ConfigChannel+0x556>
 800720c:	4855      	ldr	r0, [pc, #340]	; (8007364 <HAL_ADC_ConfigChannel+0x69c>)
 800720e:	f7ff fa77 	bl	8006700 <LL_ADC_IsEnabled>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	bf0c      	ite	eq
 8007218:	2301      	moveq	r3, #1
 800721a:	2300      	movne	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d07d      	beq.n	800731e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a50      	ldr	r2, [pc, #320]	; (8007368 <HAL_ADC_ConfigChannel+0x6a0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d130      	bne.n	800728e <HAL_ADC_ConfigChannel+0x5c6>
 800722c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d12b      	bne.n	800728e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a4a      	ldr	r2, [pc, #296]	; (8007364 <HAL_ADC_ConfigChannel+0x69c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	f040 8081 	bne.w	8007344 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a45      	ldr	r2, [pc, #276]	; (800735c <HAL_ADC_ConfigChannel+0x694>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_ADC_ConfigChannel+0x58e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a43      	ldr	r2, [pc, #268]	; (8007360 <HAL_ADC_ConfigChannel+0x698>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d101      	bne.n	800725a <HAL_ADC_ConfigChannel+0x592>
 8007256:	4a45      	ldr	r2, [pc, #276]	; (800736c <HAL_ADC_ConfigChannel+0x6a4>)
 8007258:	e000      	b.n	800725c <HAL_ADC_ConfigChannel+0x594>
 800725a:	4a3f      	ldr	r2, [pc, #252]	; (8007358 <HAL_ADC_ConfigChannel+0x690>)
 800725c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff f8b0 	bl	80063ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800726a:	4b41      	ldr	r3, [pc, #260]	; (8007370 <HAL_ADC_ConfigChannel+0x6a8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	099b      	lsrs	r3, r3, #6
 8007270:	4a40      	ldr	r2, [pc, #256]	; (8007374 <HAL_ADC_ConfigChannel+0x6ac>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	3301      	adds	r3, #1
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800727e:	e002      	b.n	8007286 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3b01      	subs	r3, #1
 8007284:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f9      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800728c:	e05a      	b.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a39      	ldr	r2, [pc, #228]	; (8007378 <HAL_ADC_ConfigChannel+0x6b0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d11e      	bne.n	80072d6 <HAL_ADC_ConfigChannel+0x60e>
 8007298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d119      	bne.n	80072d6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2f      	ldr	r2, [pc, #188]	; (8007364 <HAL_ADC_ConfigChannel+0x69c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d14b      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <HAL_ADC_ConfigChannel+0x694>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_ADC_ConfigChannel+0x5f8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a29      	ldr	r2, [pc, #164]	; (8007360 <HAL_ADC_ConfigChannel+0x698>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d101      	bne.n	80072c4 <HAL_ADC_ConfigChannel+0x5fc>
 80072c0:	4a2a      	ldr	r2, [pc, #168]	; (800736c <HAL_ADC_ConfigChannel+0x6a4>)
 80072c2:	e000      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x5fe>
 80072c4:	4a24      	ldr	r2, [pc, #144]	; (8007358 <HAL_ADC_ConfigChannel+0x690>)
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7ff f87b 	bl	80063ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072d4:	e036      	b.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a28      	ldr	r2, [pc, #160]	; (800737c <HAL_ADC_ConfigChannel+0x6b4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d131      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d12c      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1d      	ldr	r2, [pc, #116]	; (8007364 <HAL_ADC_ConfigChannel+0x69c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d127      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a18      	ldr	r2, [pc, #96]	; (800735c <HAL_ADC_ConfigChannel+0x694>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_ADC_ConfigChannel+0x640>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <HAL_ADC_ConfigChannel+0x698>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d101      	bne.n	800730c <HAL_ADC_ConfigChannel+0x644>
 8007308:	4a18      	ldr	r2, [pc, #96]	; (800736c <HAL_ADC_ConfigChannel+0x6a4>)
 800730a:	e000      	b.n	800730e <HAL_ADC_ConfigChannel+0x646>
 800730c:	4a12      	ldr	r2, [pc, #72]	; (8007358 <HAL_ADC_ConfigChannel+0x690>)
 800730e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7ff f857 	bl	80063ca <LL_ADC_SetCommonPathInternalCh>
 800731c:	e012      	b.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f043 0220 	orr.w	r2, r3, #32
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007330:	e008      	b.n	8007344 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f043 0220 	orr.w	r2, r3, #32
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800734c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007350:	4618      	mov	r0, r3
 8007352:	3784      	adds	r7, #132	; 0x84
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}
 8007358:	58026300 	.word	0x58026300
 800735c:	40022000 	.word	0x40022000
 8007360:	40022100 	.word	0x40022100
 8007364:	58026000 	.word	0x58026000
 8007368:	cb840000 	.word	0xcb840000
 800736c:	40022300 	.word	0x40022300
 8007370:	240000c8 	.word	0x240000c8
 8007374:	053e2d63 	.word	0x053e2d63
 8007378:	c7520000 	.word	0xc7520000
 800737c:	cfb80000 	.word	0xcfb80000

08007380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff f9b7 	bl	8006700 <LL_ADC_IsEnabled>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d16e      	bne.n	8007476 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	4b38      	ldr	r3, [pc, #224]	; (8007480 <ADC_Enable+0x100>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f043 0210 	orr.w	r2, r3, #16
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e05a      	b.n	8007478 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f972 	bl	80066b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80073cc:	f7fe ffbc 	bl	8006348 <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2b      	ldr	r2, [pc, #172]	; (8007484 <ADC_Enable+0x104>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <ADC_Enable+0x66>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a29      	ldr	r2, [pc, #164]	; (8007488 <ADC_Enable+0x108>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <ADC_Enable+0x6a>
 80073e6:	4b29      	ldr	r3, [pc, #164]	; (800748c <ADC_Enable+0x10c>)
 80073e8:	e000      	b.n	80073ec <ADC_Enable+0x6c>
 80073ea:	4b29      	ldr	r3, [pc, #164]	; (8007490 <ADC_Enable+0x110>)
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff f903 	bl	80065f8 <LL_ADC_GetMultimode>
 80073f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a23      	ldr	r2, [pc, #140]	; (8007488 <ADC_Enable+0x108>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d002      	beq.n	8007404 <ADC_Enable+0x84>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	e000      	b.n	8007406 <ADC_Enable+0x86>
 8007404:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <ADC_Enable+0x104>)
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	4293      	cmp	r3, r2
 800740c:	d02c      	beq.n	8007468 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d130      	bne.n	8007476 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007414:	e028      	b.n	8007468 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff f970 	bl	8006700 <LL_ADC_IsEnabled>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff f940 	bl	80066b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007430:	f7fe ff8a 	bl	8006348 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d914      	bls.n	8007468 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	d00d      	beq.n	8007468 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	f043 0210 	orr.w	r2, r3, #16
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745c:	f043 0201 	orr.w	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e007      	b.n	8007478 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d1cf      	bne.n	8007416 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	8000003f 	.word	0x8000003f
 8007484:	40022000 	.word	0x40022000
 8007488:	40022100 	.word	0x40022100
 800748c:	40022300 	.word	0x40022300
 8007490:	58026300 	.word	0x58026300

08007494 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff f940 	bl	8006726 <LL_ADC_IsDisableOngoing>
 80074a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff f927 	bl	8006700 <LL_ADC_IsEnabled>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d047      	beq.n	8007548 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d144      	bne.n	8007548 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 030d 	and.w	r3, r3, #13
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d10c      	bne.n	80074e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff f901 	bl	80066d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2203      	movs	r2, #3
 80074dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80074de:	f7fe ff33 	bl	8006348 <HAL_GetTick>
 80074e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074e4:	e029      	b.n	800753a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	f043 0210 	orr.w	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f6:	f043 0201 	orr.w	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e023      	b.n	800754a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007502:	f7fe ff21 	bl	8006348 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d914      	bls.n	800753a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	f043 0210 	orr.w	r2, r3, #16
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e007      	b.n	800754a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1dc      	bne.n	8007502 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007568:	2b00      	cmp	r3, #0
 800756a:	d14b      	bne.n	8007604 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d021      	beq.n	80075ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe ff92 	bl	80064b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d032      	beq.n	80075fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d12b      	bne.n	80075fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11f      	bne.n	80075fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
 80075c8:	e018      	b.n	80075fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d111      	bne.n	80075fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fb45 	bl	8006c8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007602:	e00e      	b.n	8007622 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff fb4f 	bl	8006cb4 <HAL_ADC_ErrorCallback>
}
 8007616:	e004      	b.n	8007622 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fb31 	bl	8006ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007664:	f043 0204 	orr.w	r2, r3, #4
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fb21 	bl	8006cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a7a      	ldr	r2, [pc, #488]	; (8007874 <ADC_ConfigureBoostMode+0x1f8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <ADC_ConfigureBoostMode+0x1c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a79      	ldr	r2, [pc, #484]	; (8007878 <ADC_ConfigureBoostMode+0x1fc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d109      	bne.n	80076ac <ADC_ConfigureBoostMode+0x30>
 8007698:	4b78      	ldr	r3, [pc, #480]	; (800787c <ADC_ConfigureBoostMode+0x200>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e008      	b.n	80076be <ADC_ConfigureBoostMode+0x42>
 80076ac:	4b74      	ldr	r3, [pc, #464]	; (8007880 <ADC_ConfigureBoostMode+0x204>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bf14      	ite	ne
 80076b8:	2301      	movne	r3, #1
 80076ba:	2300      	moveq	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01c      	beq.n	80076fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80076c2:	f007 fdef 	bl	800f2a4 <HAL_RCC_GetHCLKFreq>
 80076c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d0:	d010      	beq.n	80076f4 <ADC_ConfigureBoostMode+0x78>
 80076d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d6:	d873      	bhi.n	80077c0 <ADC_ConfigureBoostMode+0x144>
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d002      	beq.n	80076e4 <ADC_ConfigureBoostMode+0x68>
 80076de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e2:	d16d      	bne.n	80077c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	60fb      	str	r3, [r7, #12]
        break;
 80076f2:	e068      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	089b      	lsrs	r3, r3, #2
 80076f8:	60fb      	str	r3, [r7, #12]
        break;
 80076fa:	e064      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80076fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007700:	f04f 0100 	mov.w	r1, #0
 8007704:	f009 f876 	bl	80107f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007708:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007712:	d051      	beq.n	80077b8 <ADC_ConfigureBoostMode+0x13c>
 8007714:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007718:	d854      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 800771a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800771e:	d047      	beq.n	80077b0 <ADC_ConfigureBoostMode+0x134>
 8007720:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007724:	d84e      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 8007726:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800772a:	d03d      	beq.n	80077a8 <ADC_ConfigureBoostMode+0x12c>
 800772c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007730:	d848      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 8007732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007736:	d033      	beq.n	80077a0 <ADC_ConfigureBoostMode+0x124>
 8007738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800773c:	d842      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 800773e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007742:	d029      	beq.n	8007798 <ADC_ConfigureBoostMode+0x11c>
 8007744:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007748:	d83c      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 800774a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800774e:	d01a      	beq.n	8007786 <ADC_ConfigureBoostMode+0x10a>
 8007750:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007754:	d836      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 8007756:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800775a:	d014      	beq.n	8007786 <ADC_ConfigureBoostMode+0x10a>
 800775c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007760:	d830      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 8007762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007766:	d00e      	beq.n	8007786 <ADC_ConfigureBoostMode+0x10a>
 8007768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776c:	d82a      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 800776e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007772:	d008      	beq.n	8007786 <ADC_ConfigureBoostMode+0x10a>
 8007774:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007778:	d824      	bhi.n	80077c4 <ADC_ConfigureBoostMode+0x148>
 800777a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800777e:	d002      	beq.n	8007786 <ADC_ConfigureBoostMode+0x10a>
 8007780:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007784:	d11e      	bne.n	80077c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	0c9b      	lsrs	r3, r3, #18
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	fbb2 f3f3 	udiv	r3, r2, r3
 8007794:	60fb      	str	r3, [r7, #12]
        break;
 8007796:	e016      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	091b      	lsrs	r3, r3, #4
 800779c:	60fb      	str	r3, [r7, #12]
        break;
 800779e:	e012      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	60fb      	str	r3, [r7, #12]
        break;
 80077a6:	e00e      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	099b      	lsrs	r3, r3, #6
 80077ac:	60fb      	str	r3, [r7, #12]
        break;
 80077ae:	e00a      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	09db      	lsrs	r3, r3, #7
 80077b4:	60fb      	str	r3, [r7, #12]
        break;
 80077b6:	e006      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	60fb      	str	r3, [r7, #12]
        break;
 80077be:	e002      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80077c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80077c6:	f7fe fdcb 	bl	8006360 <HAL_GetREVID>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d815      	bhi.n	8007800 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a2b      	ldr	r2, [pc, #172]	; (8007884 <ADC_ConfigureBoostMode+0x208>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d908      	bls.n	80077ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80077ec:	e03e      	b.n	800786c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	e035      	b.n	800786c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a1f      	ldr	r2, [pc, #124]	; (8007888 <ADC_ConfigureBoostMode+0x20c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d808      	bhi.n	8007820 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800781c:	609a      	str	r2, [r3, #8]
}
 800781e:	e025      	b.n	800786c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a1a      	ldr	r2, [pc, #104]	; (800788c <ADC_ConfigureBoostMode+0x210>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d80a      	bhi.n	800783e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783a:	609a      	str	r2, [r3, #8]
}
 800783c:	e016      	b.n	800786c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <ADC_ConfigureBoostMode+0x214>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d80a      	bhi.n	800785c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007858:	609a      	str	r2, [r3, #8]
}
 800785a:	e007      	b.n	800786c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800786a:	609a      	str	r2, [r3, #8]
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40022000 	.word	0x40022000
 8007878:	40022100 	.word	0x40022100
 800787c:	40022300 	.word	0x40022300
 8007880:	58026300 	.word	0x58026300
 8007884:	01312d00 	.word	0x01312d00
 8007888:	005f5e10 	.word	0x005f5e10
 800788c:	00bebc20 	.word	0x00bebc20
 8007890:	017d7840 	.word	0x017d7840

08007894 <LL_ADC_IsEnabled>:
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <LL_ADC_IsEnabled+0x18>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <LL_ADC_IsEnabled+0x1a>
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <LL_ADC_StartCalibration>:
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <LL_ADC_StartCalibration+0x38>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078dc:	430a      	orrs	r2, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	3ffeffc0 	.word	0x3ffeffc0

080078f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d101      	bne.n	8007912 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <LL_ADC_REG_IsConversionOngoing>:
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b04      	cmp	r3, #4
 8007932:	d101      	bne.n	8007938 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_ADCEx_Calibration_Start+0x1e>
 8007962:	2302      	movs	r3, #2
 8007964:	e04c      	b.n	8007a00 <HAL_ADCEx_Calibration_Start+0xb8>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fd90 	bl	8007494 <ADC_Disable>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d135      	bne.n	80079ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007982:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007984:	4013      	ands	r3, r2
 8007986:	f043 0202 	orr.w	r2, r3, #2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff ff90 	bl	80078bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800799c:	e014      	b.n	80079c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	3301      	adds	r3, #1
 80079a2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <HAL_ADCEx_Calibration_Start+0xc4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d30d      	bcc.n	80079c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f023 0312 	bic.w	r3, r3, #18
 80079b4:	f043 0210 	orr.w	r2, r3, #16
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e01b      	b.n	8007a00 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ff93 	bl	80078f8 <LL_ADC_IsCalibrationOnGoing>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e2      	bne.n	800799e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	f043 0201 	orr.w	r2, r3, #1
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
 80079e8:	e005      	b.n	80079f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	f043 0210 	orr.w	r2, r3, #16
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	ffffeefd 	.word	0xffffeefd
 8007a0c:	25c3f800 	.word	0x25c3f800

08007a10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b09f      	sub	sp, #124	; 0x7c
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0be      	b.n	8007bac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007a36:	2300      	movs	r3, #0
 8007a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a5c      	ldr	r2, [pc, #368]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d102      	bne.n	8007a4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007a48:	4b5b      	ldr	r3, [pc, #364]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	e001      	b.n	8007a52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e09d      	b.n	8007bac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff ff54 	bl	8007920 <LL_ADC_REG_IsConversionOngoing>
 8007a78:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff ff4e 	bl	8007920 <LL_ADC_REG_IsConversionOngoing>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d17f      	bne.n	8007b8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d17c      	bne.n	8007b8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a47      	ldr	r2, [pc, #284]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a46      	ldr	r2, [pc, #280]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d101      	bne.n	8007aa8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007aa4:	4b45      	ldr	r3, [pc, #276]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007aa6:	e000      	b.n	8007aaa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007aa8:	4b45      	ldr	r3, [pc, #276]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007aaa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d039      	beq.n	8007b28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3a      	ldr	r2, [pc, #232]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a38      	ldr	r2, [pc, #224]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10e      	bne.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007ada:	4836      	ldr	r0, [pc, #216]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007adc:	f7ff feda 	bl	8007894 <LL_ADC_IsEnabled>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4835      	ldr	r0, [pc, #212]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007ae4:	f7ff fed6 	bl	8007894 <LL_ADC_IsEnabled>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4323      	orrs	r3, r4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf0c      	ite	eq
 8007af0:	2301      	moveq	r3, #1
 8007af2:	2300      	movne	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e008      	b.n	8007b0a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007af8:	4832      	ldr	r0, [pc, #200]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007afa:	f7ff fecb 	bl	8007894 <LL_ADC_IsEnabled>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d047      	beq.n	8007b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	6892      	ldr	r2, [r2, #8]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	431a      	orrs	r2, r3
 8007b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b26:	e03a      	b.n	8007b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1e      	ldr	r2, [pc, #120]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1d      	ldr	r2, [pc, #116]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d10e      	bne.n	8007b66 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007b48:	481a      	ldr	r0, [pc, #104]	; (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b4a:	f7ff fea3 	bl	8007894 <LL_ADC_IsEnabled>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4819      	ldr	r0, [pc, #100]	; (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b52:	f7ff fe9f 	bl	8007894 <LL_ADC_IsEnabled>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4323      	orrs	r3, r4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	e008      	b.n	8007b78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007b66:	4817      	ldr	r0, [pc, #92]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007b68:	f7ff fe94 	bl	8007894 <LL_ADC_IsEnabled>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bf0c      	ite	eq
 8007b72:	2301      	moveq	r3, #1
 8007b74:	2300      	movne	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b88:	e009      	b.n	8007b9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	f043 0220 	orr.w	r2, r3, #32
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007b9c:	e000      	b.n	8007ba0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007ba8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	377c      	adds	r7, #124	; 0x7c
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd90      	pop	{r4, r7, pc}
 8007bb4:	40022000 	.word	0x40022000
 8007bb8:	40022100 	.word	0x40022100
 8007bbc:	40022300 	.word	0x40022300
 8007bc0:	58026300 	.word	0x58026300
 8007bc4:	58026000 	.word	0x58026000
 8007bc8:	fffff0e0 	.word	0xfffff0e0

08007bcc <__NVIC_SetPriorityGrouping>:
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <__NVIC_SetPriorityGrouping+0x40>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007be8:	4013      	ands	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <__NVIC_SetPriorityGrouping+0x44>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bfa:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <__NVIC_SetPriorityGrouping+0x40>)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	60d3      	str	r3, [r2, #12]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	e000ed00 	.word	0xe000ed00
 8007c10:	05fa0000 	.word	0x05fa0000

08007c14 <__NVIC_GetPriorityGrouping>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <__NVIC_GetPriorityGrouping+0x18>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	f003 0307 	and.w	r3, r3, #7
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <__NVIC_EnableIRQ>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	db0b      	blt.n	8007c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	f003 021f 	and.w	r2, r3, #31
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <__NVIC_EnableIRQ+0x38>)
 8007c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	2001      	movs	r0, #1
 8007c52:	fa00 f202 	lsl.w	r2, r0, r2
 8007c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000e100 	.word	0xe000e100

08007c6c <__NVIC_SetPriority>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db0a      	blt.n	8007c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	490c      	ldr	r1, [pc, #48]	; (8007cb8 <__NVIC_SetPriority+0x4c>)
 8007c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c8a:	0112      	lsls	r2, r2, #4
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	440b      	add	r3, r1
 8007c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c94:	e00a      	b.n	8007cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4908      	ldr	r1, [pc, #32]	; (8007cbc <__NVIC_SetPriority+0x50>)
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	3b04      	subs	r3, #4
 8007ca4:	0112      	lsls	r2, r2, #4
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	440b      	add	r3, r1
 8007caa:	761a      	strb	r2, [r3, #24]
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	e000e100 	.word	0xe000e100
 8007cbc:	e000ed00 	.word	0xe000ed00

08007cc0 <NVIC_EncodePriority>:
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b089      	sub	sp, #36	; 0x24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f1c3 0307 	rsb	r3, r3, #7
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	bf28      	it	cs
 8007cde:	2304      	movcs	r3, #4
 8007ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	2b06      	cmp	r3, #6
 8007ce8:	d902      	bls.n	8007cf0 <NVIC_EncodePriority+0x30>
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	3b03      	subs	r3, #3
 8007cee:	e000      	b.n	8007cf2 <NVIC_EncodePriority+0x32>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	43da      	mvns	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	401a      	ands	r2, r3
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	43d9      	mvns	r1, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d18:	4313      	orrs	r3, r2
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3724      	adds	r7, #36	; 0x24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ff4c 	bl	8007bcc <__NVIC_SetPriorityGrouping>
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d4a:	f7ff ff63 	bl	8007c14 <__NVIC_GetPriorityGrouping>
 8007d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	6978      	ldr	r0, [r7, #20]
 8007d56:	f7ff ffb3 	bl	8007cc0 <NVIC_EncodePriority>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ff82 	bl	8007c6c <__NVIC_SetPriority>
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff ff56 	bl	8007c30 <__NVIC_EnableIRQ>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e014      	b.n	8007dc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7f8 ff18 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e046      	b.n	8007e72 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	795b      	ldrb	r3, [r3, #5]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_DAC_Start+0x20>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e040      	b.n	8007e72 <HAL_DAC_Start+0xa2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6819      	ldr	r1, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2201      	movs	r2, #1
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d11d      	bne.n	8007e64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	605a      	str	r2, [r3, #4]
 8007e38:	e014      	b.n	8007e64 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d107      	bne.n	8007e64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0202 	orr.w	r2, r2, #2
 8007e62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0a2      	b.n	8007fde <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	795b      	ldrb	r3, [r3, #5]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_DAC_Start_DMA+0x24>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e09c      	b.n	8007fde <HAL_DAC_Start_DMA+0x15e>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2202      	movs	r2, #2
 8007eae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d129      	bne.n	8007f0a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	4a4b      	ldr	r2, [pc, #300]	; (8007fe8 <HAL_DAC_Start_DMA+0x168>)
 8007ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	4a4a      	ldr	r2, [pc, #296]	; (8007fec <HAL_DAC_Start_DMA+0x16c>)
 8007ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	4a49      	ldr	r2, [pc, #292]	; (8007ff0 <HAL_DAC_Start_DMA+0x170>)
 8007ecc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007edc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_DAC_Start_DMA+0x6c>
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d005      	beq.n	8007ef6 <HAL_DAC_Start_DMA+0x76>
 8007eea:	e009      	b.n	8007f00 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	613b      	str	r3, [r7, #16]
        break;
 8007ef4:	e033      	b.n	8007f5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	613b      	str	r3, [r7, #16]
        break;
 8007efe:	e02e      	b.n	8007f5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3310      	adds	r3, #16
 8007f06:	613b      	str	r3, [r7, #16]
        break;
 8007f08:	e029      	b.n	8007f5e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	4a39      	ldr	r2, [pc, #228]	; (8007ff4 <HAL_DAC_Start_DMA+0x174>)
 8007f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	4a38      	ldr	r2, [pc, #224]	; (8007ff8 <HAL_DAC_Start_DMA+0x178>)
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	4a37      	ldr	r2, [pc, #220]	; (8007ffc <HAL_DAC_Start_DMA+0x17c>)
 8007f20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_DAC_Start_DMA+0xc0>
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	d005      	beq.n	8007f4a <HAL_DAC_Start_DMA+0xca>
 8007f3e:	e009      	b.n	8007f54 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3314      	adds	r3, #20
 8007f46:	613b      	str	r3, [r7, #16]
        break;
 8007f48:	e009      	b.n	8007f5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3318      	adds	r3, #24
 8007f50:	613b      	str	r3, [r7, #16]
        break;
 8007f52:	e004      	b.n	8007f5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	331c      	adds	r3, #28
 8007f5a:	613b      	str	r3, [r7, #16]
        break;
 8007f5c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d111      	bne.n	8007f88 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6898      	ldr	r0, [r3, #8]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	f000 fe67 	bl	8008c50 <HAL_DMA_Start_IT>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
 8007f86:	e010      	b.n	8007faa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007f96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68d8      	ldr	r0, [r3, #12]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	f000 fe55 	bl	8008c50 <HAL_DMA_Start_IT>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0310 	and.w	r3, r3, #16
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e005      	b.n	8007fdc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f043 0204 	orr.w	r2, r3, #4
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	08008471 	.word	0x08008471
 8007fec:	08008493 	.word	0x08008493
 8007ff0:	080084af 	.word	0x080084af
 8007ff4:	0800852d 	.word	0x0800852d
 8007ff8:	0800854f 	.word	0x0800854f
 8007ffc:	0800856b 	.word	0x0800856b

08008000 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e03e      	b.n	8008092 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6819      	ldr	r1, [r3, #0]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	43da      	mvns	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	400a      	ands	r2, r1
 8008030:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6819      	ldr	r1, [r3, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2201      	movs	r2, #1
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43da      	mvns	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	400a      	ands	r2, r1
 800804c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10d      	bne.n	8008070 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f863 	bl	8009124 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e00c      	b.n	800808a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 f855 	bl	8009124 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008088:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01d      	beq.n	80080f8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d018      	beq.n	80080f8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2204      	movs	r2, #4
 80080ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f043 0201 	orr.w	r2, r3, #1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80080e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f86f 	bl	80081d6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01d      	beq.n	800813e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d018      	beq.n	800813e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2204      	movs	r2, #4
 8008110:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f043 0202 	orr.w	r2, r3, #2
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f9ed 	bl	8008518 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008146:	b480      	push	{r7}
 8008148:	b087      	sub	sp, #28
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e015      	b.n	800818e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d105      	bne.n	800817a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	3308      	adds	r3, #8
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e004      	b.n	8008184 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	3314      	adds	r3, #20
 8008182:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	461a      	mov	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <HAL_DAC_ConfigChannel+0x1e>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e12a      	b.n	8008464 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	795b      	ldrb	r3, [r3, #5]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_DAC_ConfigChannel+0x2e>
 8008216:	2302      	movs	r3, #2
 8008218:	e124      	b.n	8008464 <HAL_DAC_ConfigChannel+0x278>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2202      	movs	r2, #2
 8008224:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b04      	cmp	r3, #4
 800822c:	d17a      	bne.n	8008324 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800822e:	f7fe f88b 	bl	8006348 <HAL_GetTick>
 8008232:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d13d      	bne.n	80082b6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800823a:	e018      	b.n	800826e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800823c:	f7fe f884 	bl	8006348 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d911      	bls.n	800826e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008250:	4b86      	ldr	r3, [pc, #536]	; (800846c <HAL_DAC_ConfigChannel+0x280>)
 8008252:	4013      	ands	r3, r2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f043 0208 	orr.w	r2, r3, #8
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2203      	movs	r2, #3
 8008268:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e0fa      	b.n	8008464 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008274:	4b7d      	ldr	r3, [pc, #500]	; (800846c <HAL_DAC_ConfigChannel+0x280>)
 8008276:	4013      	ands	r3, r2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1df      	bne.n	800823c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	6992      	ldr	r2, [r2, #24]
 8008284:	641a      	str	r2, [r3, #64]	; 0x40
 8008286:	e020      	b.n	80082ca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008288:	f7fe f85e 	bl	8006348 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b01      	cmp	r3, #1
 8008294:	d90f      	bls.n	80082b6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0a      	bge.n	80082b6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f043 0208 	orr.w	r2, r3, #8
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2203      	movs	r2, #3
 80082b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0d6      	b.n	8008464 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dbe3      	blt.n	8008288 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	6992      	ldr	r2, [r2, #24]
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	43db      	mvns	r3, r3
 80082e0:	ea02 0103 	and.w	r1, r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	409a      	lsls	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f003 0310 	and.w	r3, r3, #16
 8008304:	21ff      	movs	r1, #255	; 0xff
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	43db      	mvns	r3, r3
 800830c:	ea02 0103 	and.w	r1, r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6a1a      	ldr	r2, [r3, #32]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	409a      	lsls	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d11d      	bne.n	8008368 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	221f      	movs	r2, #31
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	43db      	mvns	r3, r3
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	4013      	ands	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4313      	orrs	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2207      	movs	r2, #7
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	43db      	mvns	r3, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4013      	ands	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800838c:	2300      	movs	r3, #0
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
 8008390:	e00f      	b.n	80083b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d102      	bne.n	80083a0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800839a:	2301      	movs	r3, #1
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e008      	b.n	80083b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80083a8:	2301      	movs	r3, #1
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
 80083ac:	e001      	b.n	80083b2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	43da      	mvns	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	400a      	ands	r2, r1
 80083f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	f640 72fe 	movw	r2, #4094	; 0xffe
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43db      	mvns	r3, r3
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	4013      	ands	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	4313      	orrs	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6819      	ldr	r1, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	22c0      	movs	r2, #192	; 0xc0
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	43da      	mvns	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	400a      	ands	r2, r1
 8008452:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	; 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20008000 	.word	0x20008000

08008470 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fe8b 	bl	800819a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	711a      	strb	r2, [r3, #4]
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fe84 	bl	80081ae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f043 0204 	orr.w	r2, r3, #4
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff fe7a 	bl	80081c2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	711a      	strb	r2, [r3, #4]
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff ffce 	bl	80084dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	711a      	strb	r2, [r3, #4]
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff ffc7 	bl	80084f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f043 0204 	orr.w	r2, r3, #4
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff ffbd 	bl	8008504 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	711a      	strb	r2, [r3, #4]
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80085a0:	f7fd fed2 	bl	8006348 <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e316      	b.n	8008bde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a66      	ldr	r2, [pc, #408]	; (8008750 <HAL_DMA_Init+0x1b8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d04a      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a65      	ldr	r2, [pc, #404]	; (8008754 <HAL_DMA_Init+0x1bc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d045      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a63      	ldr	r2, [pc, #396]	; (8008758 <HAL_DMA_Init+0x1c0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d040      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a62      	ldr	r2, [pc, #392]	; (800875c <HAL_DMA_Init+0x1c4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d03b      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a60      	ldr	r2, [pc, #384]	; (8008760 <HAL_DMA_Init+0x1c8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d036      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a5f      	ldr	r2, [pc, #380]	; (8008764 <HAL_DMA_Init+0x1cc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d031      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a5d      	ldr	r2, [pc, #372]	; (8008768 <HAL_DMA_Init+0x1d0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d02c      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a5c      	ldr	r2, [pc, #368]	; (800876c <HAL_DMA_Init+0x1d4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d027      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a5a      	ldr	r2, [pc, #360]	; (8008770 <HAL_DMA_Init+0x1d8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d022      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a59      	ldr	r2, [pc, #356]	; (8008774 <HAL_DMA_Init+0x1dc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d01d      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a57      	ldr	r2, [pc, #348]	; (8008778 <HAL_DMA_Init+0x1e0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d018      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a56      	ldr	r2, [pc, #344]	; (800877c <HAL_DMA_Init+0x1e4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d013      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a54      	ldr	r2, [pc, #336]	; (8008780 <HAL_DMA_Init+0x1e8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00e      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a53      	ldr	r2, [pc, #332]	; (8008784 <HAL_DMA_Init+0x1ec>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d009      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a51      	ldr	r2, [pc, #324]	; (8008788 <HAL_DMA_Init+0x1f0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d004      	beq.n	8008650 <HAL_DMA_Init+0xb8>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a50      	ldr	r2, [pc, #320]	; (800878c <HAL_DMA_Init+0x1f4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d101      	bne.n	8008654 <HAL_DMA_Init+0xbc>
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <HAL_DMA_Init+0xbe>
 8008654:	2300      	movs	r3, #0
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 813b 	beq.w	80088d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a37      	ldr	r2, [pc, #220]	; (8008750 <HAL_DMA_Init+0x1b8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d04a      	beq.n	800870c <HAL_DMA_Init+0x174>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a36      	ldr	r2, [pc, #216]	; (8008754 <HAL_DMA_Init+0x1bc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d045      	beq.n	800870c <HAL_DMA_Init+0x174>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a34      	ldr	r2, [pc, #208]	; (8008758 <HAL_DMA_Init+0x1c0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d040      	beq.n	800870c <HAL_DMA_Init+0x174>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a33      	ldr	r2, [pc, #204]	; (800875c <HAL_DMA_Init+0x1c4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d03b      	beq.n	800870c <HAL_DMA_Init+0x174>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a31      	ldr	r2, [pc, #196]	; (8008760 <HAL_DMA_Init+0x1c8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d036      	beq.n	800870c <HAL_DMA_Init+0x174>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a30      	ldr	r2, [pc, #192]	; (8008764 <HAL_DMA_Init+0x1cc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d031      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a2e      	ldr	r2, [pc, #184]	; (8008768 <HAL_DMA_Init+0x1d0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02c      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a2d      	ldr	r2, [pc, #180]	; (800876c <HAL_DMA_Init+0x1d4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d027      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a2b      	ldr	r2, [pc, #172]	; (8008770 <HAL_DMA_Init+0x1d8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d022      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a2a      	ldr	r2, [pc, #168]	; (8008774 <HAL_DMA_Init+0x1dc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d01d      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a28      	ldr	r2, [pc, #160]	; (8008778 <HAL_DMA_Init+0x1e0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d018      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a27      	ldr	r2, [pc, #156]	; (800877c <HAL_DMA_Init+0x1e4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d013      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a25      	ldr	r2, [pc, #148]	; (8008780 <HAL_DMA_Init+0x1e8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d00e      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a24      	ldr	r2, [pc, #144]	; (8008784 <HAL_DMA_Init+0x1ec>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d009      	beq.n	800870c <HAL_DMA_Init+0x174>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a22      	ldr	r2, [pc, #136]	; (8008788 <HAL_DMA_Init+0x1f0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d004      	beq.n	800870c <HAL_DMA_Init+0x174>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a21      	ldr	r2, [pc, #132]	; (800878c <HAL_DMA_Init+0x1f4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d108      	bne.n	800871e <HAL_DMA_Init+0x186>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e007      	b.n	800872e <HAL_DMA_Init+0x196>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800872e:	e02f      	b.n	8008790 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008730:	f7fd fe0a 	bl	8006348 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b05      	cmp	r3, #5
 800873c:	d928      	bls.n	8008790 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2203      	movs	r2, #3
 8008748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e246      	b.n	8008bde <HAL_DMA_Init+0x646>
 8008750:	40020010 	.word	0x40020010
 8008754:	40020028 	.word	0x40020028
 8008758:	40020040 	.word	0x40020040
 800875c:	40020058 	.word	0x40020058
 8008760:	40020070 	.word	0x40020070
 8008764:	40020088 	.word	0x40020088
 8008768:	400200a0 	.word	0x400200a0
 800876c:	400200b8 	.word	0x400200b8
 8008770:	40020410 	.word	0x40020410
 8008774:	40020428 	.word	0x40020428
 8008778:	40020440 	.word	0x40020440
 800877c:	40020458 	.word	0x40020458
 8008780:	40020470 	.word	0x40020470
 8008784:	40020488 	.word	0x40020488
 8008788:	400204a0 	.word	0x400204a0
 800878c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1c8      	bne.n	8008730 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	4b83      	ldr	r3, [pc, #524]	; (80089b8 <HAL_DMA_Init+0x420>)
 80087aa:	4013      	ands	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80087b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d107      	bne.n	80087f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	4313      	orrs	r3, r2
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80087f4:	4b71      	ldr	r3, [pc, #452]	; (80089bc <HAL_DMA_Init+0x424>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4b71      	ldr	r3, [pc, #452]	; (80089c0 <HAL_DMA_Init+0x428>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008800:	d328      	bcc.n	8008854 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b28      	cmp	r3, #40	; 0x28
 8008808:	d903      	bls.n	8008812 <HAL_DMA_Init+0x27a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b2e      	cmp	r3, #46	; 0x2e
 8008810:	d917      	bls.n	8008842 <HAL_DMA_Init+0x2aa>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b3e      	cmp	r3, #62	; 0x3e
 8008818:	d903      	bls.n	8008822 <HAL_DMA_Init+0x28a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b42      	cmp	r3, #66	; 0x42
 8008820:	d90f      	bls.n	8008842 <HAL_DMA_Init+0x2aa>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b46      	cmp	r3, #70	; 0x46
 8008828:	d903      	bls.n	8008832 <HAL_DMA_Init+0x29a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b48      	cmp	r3, #72	; 0x48
 8008830:	d907      	bls.n	8008842 <HAL_DMA_Init+0x2aa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b4e      	cmp	r3, #78	; 0x4e
 8008838:	d905      	bls.n	8008846 <HAL_DMA_Init+0x2ae>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b52      	cmp	r3, #82	; 0x52
 8008840:	d801      	bhi.n	8008846 <HAL_DMA_Init+0x2ae>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <HAL_DMA_Init+0x2b0>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008852:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b04      	cmp	r3, #4
 800887c:	d117      	bne.n	80088ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00e      	beq.n	80088ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f002 fb4d 	bl	800af30 <DMA_CheckFifoParam>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2240      	movs	r2, #64	; 0x40
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e197      	b.n	8008bde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f002 fa88 	bl	800adcc <DMA_CalcBaseAndBitshift>
 80088bc:	4603      	mov	r3, r0
 80088be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	223f      	movs	r2, #63	; 0x3f
 80088ca:	409a      	lsls	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	e0cd      	b.n	8008a6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a3b      	ldr	r2, [pc, #236]	; (80089c4 <HAL_DMA_Init+0x42c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d022      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a39      	ldr	r2, [pc, #228]	; (80089c8 <HAL_DMA_Init+0x430>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01d      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a38      	ldr	r2, [pc, #224]	; (80089cc <HAL_DMA_Init+0x434>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d018      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a36      	ldr	r2, [pc, #216]	; (80089d0 <HAL_DMA_Init+0x438>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a35      	ldr	r2, [pc, #212]	; (80089d4 <HAL_DMA_Init+0x43c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00e      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a33      	ldr	r2, [pc, #204]	; (80089d8 <HAL_DMA_Init+0x440>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a32      	ldr	r2, [pc, #200]	; (80089dc <HAL_DMA_Init+0x444>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_DMA_Init+0x38a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a30      	ldr	r2, [pc, #192]	; (80089e0 <HAL_DMA_Init+0x448>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d101      	bne.n	8008926 <HAL_DMA_Init+0x38e>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <HAL_DMA_Init+0x390>
 8008926:	2300      	movs	r3, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8097 	beq.w	8008a5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a24      	ldr	r2, [pc, #144]	; (80089c4 <HAL_DMA_Init+0x42c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d021      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a22      	ldr	r2, [pc, #136]	; (80089c8 <HAL_DMA_Init+0x430>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d01c      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a21      	ldr	r2, [pc, #132]	; (80089cc <HAL_DMA_Init+0x434>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d017      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_DMA_Init+0x438>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d012      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a1e      	ldr	r2, [pc, #120]	; (80089d4 <HAL_DMA_Init+0x43c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00d      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <HAL_DMA_Init+0x440>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d008      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1b      	ldr	r2, [pc, #108]	; (80089dc <HAL_DMA_Init+0x444>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <HAL_DMA_Init+0x3e4>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <HAL_DMA_Init+0x448>)
 800897a:	4293      	cmp	r3, r2
 800897c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <HAL_DMA_Init+0x44c>)
 800899a:	4013      	ands	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b40      	cmp	r3, #64	; 0x40
 80089a4:	d020      	beq.n	80089e8 <HAL_DMA_Init+0x450>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b80      	cmp	r3, #128	; 0x80
 80089ac:	d102      	bne.n	80089b4 <HAL_DMA_Init+0x41c>
 80089ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089b2:	e01a      	b.n	80089ea <HAL_DMA_Init+0x452>
 80089b4:	2300      	movs	r3, #0
 80089b6:	e018      	b.n	80089ea <HAL_DMA_Init+0x452>
 80089b8:	fe10803f 	.word	0xfe10803f
 80089bc:	5c001000 	.word	0x5c001000
 80089c0:	ffff0000 	.word	0xffff0000
 80089c4:	58025408 	.word	0x58025408
 80089c8:	5802541c 	.word	0x5802541c
 80089cc:	58025430 	.word	0x58025430
 80089d0:	58025444 	.word	0x58025444
 80089d4:	58025458 	.word	0x58025458
 80089d8:	5802546c 	.word	0x5802546c
 80089dc:	58025480 	.word	0x58025480
 80089e0:	58025494 	.word	0x58025494
 80089e4:	fffe000f 	.word	0xfffe000f
 80089e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68d2      	ldr	r2, [r2, #12]
 80089ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80089f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80089f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4b6e      	ldr	r3, [pc, #440]	; (8008be8 <HAL_DMA_Init+0x650>)
 8008a30:	4413      	add	r3, r2
 8008a32:	4a6e      	ldr	r2, [pc, #440]	; (8008bec <HAL_DMA_Init+0x654>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	091b      	lsrs	r3, r3, #4
 8008a3a:	009a      	lsls	r2, r3, #2
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f002 f9c3 	bl	800adcc <DMA_CalcBaseAndBitshift>
 8008a46:	4603      	mov	r3, r0
 8008a48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	2201      	movs	r2, #1
 8008a54:	409a      	lsls	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	e008      	b.n	8008a6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2203      	movs	r2, #3
 8008a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e0b7      	b.n	8008bde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a5f      	ldr	r2, [pc, #380]	; (8008bf0 <HAL_DMA_Init+0x658>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d072      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a5d      	ldr	r2, [pc, #372]	; (8008bf4 <HAL_DMA_Init+0x65c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d06d      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a5c      	ldr	r2, [pc, #368]	; (8008bf8 <HAL_DMA_Init+0x660>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d068      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a5a      	ldr	r2, [pc, #360]	; (8008bfc <HAL_DMA_Init+0x664>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d063      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a59      	ldr	r2, [pc, #356]	; (8008c00 <HAL_DMA_Init+0x668>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d05e      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a57      	ldr	r2, [pc, #348]	; (8008c04 <HAL_DMA_Init+0x66c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d059      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a56      	ldr	r2, [pc, #344]	; (8008c08 <HAL_DMA_Init+0x670>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d054      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a54      	ldr	r2, [pc, #336]	; (8008c0c <HAL_DMA_Init+0x674>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d04f      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a53      	ldr	r2, [pc, #332]	; (8008c10 <HAL_DMA_Init+0x678>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d04a      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a51      	ldr	r2, [pc, #324]	; (8008c14 <HAL_DMA_Init+0x67c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d045      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a50      	ldr	r2, [pc, #320]	; (8008c18 <HAL_DMA_Init+0x680>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d040      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a4e      	ldr	r2, [pc, #312]	; (8008c1c <HAL_DMA_Init+0x684>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d03b      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a4d      	ldr	r2, [pc, #308]	; (8008c20 <HAL_DMA_Init+0x688>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d036      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a4b      	ldr	r2, [pc, #300]	; (8008c24 <HAL_DMA_Init+0x68c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d031      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a4a      	ldr	r2, [pc, #296]	; (8008c28 <HAL_DMA_Init+0x690>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d02c      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a48      	ldr	r2, [pc, #288]	; (8008c2c <HAL_DMA_Init+0x694>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d027      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a47      	ldr	r2, [pc, #284]	; (8008c30 <HAL_DMA_Init+0x698>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d022      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a45      	ldr	r2, [pc, #276]	; (8008c34 <HAL_DMA_Init+0x69c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01d      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a44      	ldr	r2, [pc, #272]	; (8008c38 <HAL_DMA_Init+0x6a0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d018      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a42      	ldr	r2, [pc, #264]	; (8008c3c <HAL_DMA_Init+0x6a4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a41      	ldr	r2, [pc, #260]	; (8008c40 <HAL_DMA_Init+0x6a8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a3f      	ldr	r2, [pc, #252]	; (8008c44 <HAL_DMA_Init+0x6ac>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a3e      	ldr	r2, [pc, #248]	; (8008c48 <HAL_DMA_Init+0x6b0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_DMA_Init+0x5c6>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a3c      	ldr	r2, [pc, #240]	; (8008c4c <HAL_DMA_Init+0x6b4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d101      	bne.n	8008b62 <HAL_DMA_Init+0x5ca>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <HAL_DMA_Init+0x5cc>
 8008b62:	2300      	movs	r3, #0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d032      	beq.n	8008bce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f002 fa5d 	bl	800b028 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	2b80      	cmp	r3, #128	; 0x80
 8008b74:	d102      	bne.n	8008b7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d010      	beq.n	8008bbc <HAL_DMA_Init+0x624>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d80c      	bhi.n	8008bbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f002 fada 	bl	800b15c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	e008      	b.n	8008bce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	a7fdabf8 	.word	0xa7fdabf8
 8008bec:	cccccccd 	.word	0xcccccccd
 8008bf0:	40020010 	.word	0x40020010
 8008bf4:	40020028 	.word	0x40020028
 8008bf8:	40020040 	.word	0x40020040
 8008bfc:	40020058 	.word	0x40020058
 8008c00:	40020070 	.word	0x40020070
 8008c04:	40020088 	.word	0x40020088
 8008c08:	400200a0 	.word	0x400200a0
 8008c0c:	400200b8 	.word	0x400200b8
 8008c10:	40020410 	.word	0x40020410
 8008c14:	40020428 	.word	0x40020428
 8008c18:	40020440 	.word	0x40020440
 8008c1c:	40020458 	.word	0x40020458
 8008c20:	40020470 	.word	0x40020470
 8008c24:	40020488 	.word	0x40020488
 8008c28:	400204a0 	.word	0x400204a0
 8008c2c:	400204b8 	.word	0x400204b8
 8008c30:	58025408 	.word	0x58025408
 8008c34:	5802541c 	.word	0x5802541c
 8008c38:	58025430 	.word	0x58025430
 8008c3c:	58025444 	.word	0x58025444
 8008c40:	58025458 	.word	0x58025458
 8008c44:	5802546c 	.word	0x5802546c
 8008c48:	58025480 	.word	0x58025480
 8008c4c:	58025494 	.word	0x58025494

08008c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e226      	b.n	80090ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_DMA_Start_IT+0x2a>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e21f      	b.n	80090ba <HAL_DMA_Start_IT+0x46a>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	f040 820a 	bne.w	80090a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <HAL_DMA_Start_IT+0x1f4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d04a      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a66      	ldr	r2, [pc, #408]	; (8008e48 <HAL_DMA_Start_IT+0x1f8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d045      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a65      	ldr	r2, [pc, #404]	; (8008e4c <HAL_DMA_Start_IT+0x1fc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d040      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a63      	ldr	r2, [pc, #396]	; (8008e50 <HAL_DMA_Start_IT+0x200>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d03b      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a62      	ldr	r2, [pc, #392]	; (8008e54 <HAL_DMA_Start_IT+0x204>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d036      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a60      	ldr	r2, [pc, #384]	; (8008e58 <HAL_DMA_Start_IT+0x208>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d031      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a5f      	ldr	r2, [pc, #380]	; (8008e5c <HAL_DMA_Start_IT+0x20c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d02c      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a5d      	ldr	r2, [pc, #372]	; (8008e60 <HAL_DMA_Start_IT+0x210>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d027      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a5c      	ldr	r2, [pc, #368]	; (8008e64 <HAL_DMA_Start_IT+0x214>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d022      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a5a      	ldr	r2, [pc, #360]	; (8008e68 <HAL_DMA_Start_IT+0x218>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01d      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a59      	ldr	r2, [pc, #356]	; (8008e6c <HAL_DMA_Start_IT+0x21c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d018      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a57      	ldr	r2, [pc, #348]	; (8008e70 <HAL_DMA_Start_IT+0x220>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a56      	ldr	r2, [pc, #344]	; (8008e74 <HAL_DMA_Start_IT+0x224>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00e      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a54      	ldr	r2, [pc, #336]	; (8008e78 <HAL_DMA_Start_IT+0x228>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a53      	ldr	r2, [pc, #332]	; (8008e7c <HAL_DMA_Start_IT+0x22c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <HAL_DMA_Start_IT+0xee>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a51      	ldr	r2, [pc, #324]	; (8008e80 <HAL_DMA_Start_IT+0x230>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d108      	bne.n	8008d50 <HAL_DMA_Start_IT+0x100>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0201 	bic.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e007      	b.n	8008d60 <HAL_DMA_Start_IT+0x110>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0201 	bic.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f001 fe84 	bl	800aa74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a34      	ldr	r2, [pc, #208]	; (8008e44 <HAL_DMA_Start_IT+0x1f4>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d04a      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a33      	ldr	r2, [pc, #204]	; (8008e48 <HAL_DMA_Start_IT+0x1f8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d045      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a31      	ldr	r2, [pc, #196]	; (8008e4c <HAL_DMA_Start_IT+0x1fc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d040      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a30      	ldr	r2, [pc, #192]	; (8008e50 <HAL_DMA_Start_IT+0x200>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d03b      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a2e      	ldr	r2, [pc, #184]	; (8008e54 <HAL_DMA_Start_IT+0x204>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d036      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a2d      	ldr	r2, [pc, #180]	; (8008e58 <HAL_DMA_Start_IT+0x208>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d031      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2b      	ldr	r2, [pc, #172]	; (8008e5c <HAL_DMA_Start_IT+0x20c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d02c      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <HAL_DMA_Start_IT+0x210>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d027      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a28      	ldr	r2, [pc, #160]	; (8008e64 <HAL_DMA_Start_IT+0x214>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d022      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a27      	ldr	r2, [pc, #156]	; (8008e68 <HAL_DMA_Start_IT+0x218>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d01d      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a25      	ldr	r2, [pc, #148]	; (8008e6c <HAL_DMA_Start_IT+0x21c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d018      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a24      	ldr	r2, [pc, #144]	; (8008e70 <HAL_DMA_Start_IT+0x220>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d013      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a22      	ldr	r2, [pc, #136]	; (8008e74 <HAL_DMA_Start_IT+0x224>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00e      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <HAL_DMA_Start_IT+0x228>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d009      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <HAL_DMA_Start_IT+0x22c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d004      	beq.n	8008e0c <HAL_DMA_Start_IT+0x1bc>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <HAL_DMA_Start_IT+0x230>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d101      	bne.n	8008e10 <HAL_DMA_Start_IT+0x1c0>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e000      	b.n	8008e12 <HAL_DMA_Start_IT+0x1c2>
 8008e10:	2300      	movs	r3, #0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d036      	beq.n	8008e84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f023 021e 	bic.w	r2, r3, #30
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0216 	orr.w	r2, r2, #22
 8008e28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d03e      	beq.n	8008eb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0208 	orr.w	r2, r2, #8
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e035      	b.n	8008eb0 <HAL_DMA_Start_IT+0x260>
 8008e44:	40020010 	.word	0x40020010
 8008e48:	40020028 	.word	0x40020028
 8008e4c:	40020040 	.word	0x40020040
 8008e50:	40020058 	.word	0x40020058
 8008e54:	40020070 	.word	0x40020070
 8008e58:	40020088 	.word	0x40020088
 8008e5c:	400200a0 	.word	0x400200a0
 8008e60:	400200b8 	.word	0x400200b8
 8008e64:	40020410 	.word	0x40020410
 8008e68:	40020428 	.word	0x40020428
 8008e6c:	40020440 	.word	0x40020440
 8008e70:	40020458 	.word	0x40020458
 8008e74:	40020470 	.word	0x40020470
 8008e78:	40020488 	.word	0x40020488
 8008e7c:	400204a0 	.word	0x400204a0
 8008e80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f023 020e 	bic.w	r2, r3, #14
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 020a 	orr.w	r2, r2, #10
 8008e96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0204 	orr.w	r2, r2, #4
 8008eae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a83      	ldr	r2, [pc, #524]	; (80090c4 <HAL_DMA_Start_IT+0x474>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d072      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a82      	ldr	r2, [pc, #520]	; (80090c8 <HAL_DMA_Start_IT+0x478>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d06d      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a80      	ldr	r2, [pc, #512]	; (80090cc <HAL_DMA_Start_IT+0x47c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d068      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a7f      	ldr	r2, [pc, #508]	; (80090d0 <HAL_DMA_Start_IT+0x480>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d063      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a7d      	ldr	r2, [pc, #500]	; (80090d4 <HAL_DMA_Start_IT+0x484>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d05e      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a7c      	ldr	r2, [pc, #496]	; (80090d8 <HAL_DMA_Start_IT+0x488>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d059      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a7a      	ldr	r2, [pc, #488]	; (80090dc <HAL_DMA_Start_IT+0x48c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d054      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a79      	ldr	r2, [pc, #484]	; (80090e0 <HAL_DMA_Start_IT+0x490>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d04f      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a77      	ldr	r2, [pc, #476]	; (80090e4 <HAL_DMA_Start_IT+0x494>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d04a      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a76      	ldr	r2, [pc, #472]	; (80090e8 <HAL_DMA_Start_IT+0x498>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d045      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a74      	ldr	r2, [pc, #464]	; (80090ec <HAL_DMA_Start_IT+0x49c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d040      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a73      	ldr	r2, [pc, #460]	; (80090f0 <HAL_DMA_Start_IT+0x4a0>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d03b      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a71      	ldr	r2, [pc, #452]	; (80090f4 <HAL_DMA_Start_IT+0x4a4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d036      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a70      	ldr	r2, [pc, #448]	; (80090f8 <HAL_DMA_Start_IT+0x4a8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d031      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a6e      	ldr	r2, [pc, #440]	; (80090fc <HAL_DMA_Start_IT+0x4ac>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d02c      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a6d      	ldr	r2, [pc, #436]	; (8009100 <HAL_DMA_Start_IT+0x4b0>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d027      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a6b      	ldr	r2, [pc, #428]	; (8009104 <HAL_DMA_Start_IT+0x4b4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d022      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a6a      	ldr	r2, [pc, #424]	; (8009108 <HAL_DMA_Start_IT+0x4b8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d01d      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a68      	ldr	r2, [pc, #416]	; (800910c <HAL_DMA_Start_IT+0x4bc>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d018      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a67      	ldr	r2, [pc, #412]	; (8009110 <HAL_DMA_Start_IT+0x4c0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a65      	ldr	r2, [pc, #404]	; (8009114 <HAL_DMA_Start_IT+0x4c4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00e      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a64      	ldr	r2, [pc, #400]	; (8009118 <HAL_DMA_Start_IT+0x4c8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a62      	ldr	r2, [pc, #392]	; (800911c <HAL_DMA_Start_IT+0x4cc>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d004      	beq.n	8008fa0 <HAL_DMA_Start_IT+0x350>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a61      	ldr	r2, [pc, #388]	; (8009120 <HAL_DMA_Start_IT+0x4d0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d101      	bne.n	8008fa4 <HAL_DMA_Start_IT+0x354>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <HAL_DMA_Start_IT+0x356>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d01a      	beq.n	8008fe0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a37      	ldr	r2, [pc, #220]	; (80090c4 <HAL_DMA_Start_IT+0x474>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d04a      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a36      	ldr	r2, [pc, #216]	; (80090c8 <HAL_DMA_Start_IT+0x478>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d045      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a34      	ldr	r2, [pc, #208]	; (80090cc <HAL_DMA_Start_IT+0x47c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d040      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a33      	ldr	r2, [pc, #204]	; (80090d0 <HAL_DMA_Start_IT+0x480>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d03b      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a31      	ldr	r2, [pc, #196]	; (80090d4 <HAL_DMA_Start_IT+0x484>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d036      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a30      	ldr	r2, [pc, #192]	; (80090d8 <HAL_DMA_Start_IT+0x488>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d031      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a2e      	ldr	r2, [pc, #184]	; (80090dc <HAL_DMA_Start_IT+0x48c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d02c      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a2d      	ldr	r2, [pc, #180]	; (80090e0 <HAL_DMA_Start_IT+0x490>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d027      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a2b      	ldr	r2, [pc, #172]	; (80090e4 <HAL_DMA_Start_IT+0x494>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d022      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a2a      	ldr	r2, [pc, #168]	; (80090e8 <HAL_DMA_Start_IT+0x498>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d01d      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a28      	ldr	r2, [pc, #160]	; (80090ec <HAL_DMA_Start_IT+0x49c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d018      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a27      	ldr	r2, [pc, #156]	; (80090f0 <HAL_DMA_Start_IT+0x4a0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d013      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_DMA_Start_IT+0x4a4>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00e      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <HAL_DMA_Start_IT+0x4a8>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d009      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a22      	ldr	r2, [pc, #136]	; (80090fc <HAL_DMA_Start_IT+0x4ac>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d004      	beq.n	8009080 <HAL_DMA_Start_IT+0x430>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a21      	ldr	r2, [pc, #132]	; (8009100 <HAL_DMA_Start_IT+0x4b0>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d108      	bne.n	8009092 <HAL_DMA_Start_IT+0x442>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	e012      	b.n	80090b8 <HAL_DMA_Start_IT+0x468>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f042 0201 	orr.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e009      	b.n	80090b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40020010 	.word	0x40020010
 80090c8:	40020028 	.word	0x40020028
 80090cc:	40020040 	.word	0x40020040
 80090d0:	40020058 	.word	0x40020058
 80090d4:	40020070 	.word	0x40020070
 80090d8:	40020088 	.word	0x40020088
 80090dc:	400200a0 	.word	0x400200a0
 80090e0:	400200b8 	.word	0x400200b8
 80090e4:	40020410 	.word	0x40020410
 80090e8:	40020428 	.word	0x40020428
 80090ec:	40020440 	.word	0x40020440
 80090f0:	40020458 	.word	0x40020458
 80090f4:	40020470 	.word	0x40020470
 80090f8:	40020488 	.word	0x40020488
 80090fc:	400204a0 	.word	0x400204a0
 8009100:	400204b8 	.word	0x400204b8
 8009104:	58025408 	.word	0x58025408
 8009108:	5802541c 	.word	0x5802541c
 800910c:	58025430 	.word	0x58025430
 8009110:	58025444 	.word	0x58025444
 8009114:	58025458 	.word	0x58025458
 8009118:	5802546c 	.word	0x5802546c
 800911c:	58025480 	.word	0x58025480
 8009120:	58025494 	.word	0x58025494

08009124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800912c:	f7fd f90c 	bl	8006348 <HAL_GetTick>
 8009130:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e2dc      	b.n	80096f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	d008      	beq.n	800915a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2280      	movs	r2, #128	; 0x80
 800914c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e2cd      	b.n	80096f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a76      	ldr	r2, [pc, #472]	; (8009338 <HAL_DMA_Abort+0x214>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d04a      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a74      	ldr	r2, [pc, #464]	; (800933c <HAL_DMA_Abort+0x218>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d045      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a73      	ldr	r2, [pc, #460]	; (8009340 <HAL_DMA_Abort+0x21c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d040      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a71      	ldr	r2, [pc, #452]	; (8009344 <HAL_DMA_Abort+0x220>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d03b      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a70      	ldr	r2, [pc, #448]	; (8009348 <HAL_DMA_Abort+0x224>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d036      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a6e      	ldr	r2, [pc, #440]	; (800934c <HAL_DMA_Abort+0x228>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d031      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a6d      	ldr	r2, [pc, #436]	; (8009350 <HAL_DMA_Abort+0x22c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d02c      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a6b      	ldr	r2, [pc, #428]	; (8009354 <HAL_DMA_Abort+0x230>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d027      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a6a      	ldr	r2, [pc, #424]	; (8009358 <HAL_DMA_Abort+0x234>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d022      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a68      	ldr	r2, [pc, #416]	; (800935c <HAL_DMA_Abort+0x238>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d01d      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a67      	ldr	r2, [pc, #412]	; (8009360 <HAL_DMA_Abort+0x23c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d018      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a65      	ldr	r2, [pc, #404]	; (8009364 <HAL_DMA_Abort+0x240>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d013      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a64      	ldr	r2, [pc, #400]	; (8009368 <HAL_DMA_Abort+0x244>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00e      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a62      	ldr	r2, [pc, #392]	; (800936c <HAL_DMA_Abort+0x248>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d009      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a61      	ldr	r2, [pc, #388]	; (8009370 <HAL_DMA_Abort+0x24c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <HAL_DMA_Abort+0xd6>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a5f      	ldr	r2, [pc, #380]	; (8009374 <HAL_DMA_Abort+0x250>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d101      	bne.n	80091fe <HAL_DMA_Abort+0xda>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <HAL_DMA_Abort+0xdc>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d013      	beq.n	800922c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 021e 	bic.w	r2, r2, #30
 8009212:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009222:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e00a      	b.n	8009242 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 020e 	bic.w	r2, r2, #14
 800923a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a3c      	ldr	r2, [pc, #240]	; (8009338 <HAL_DMA_Abort+0x214>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d072      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a3a      	ldr	r2, [pc, #232]	; (800933c <HAL_DMA_Abort+0x218>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d06d      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a39      	ldr	r2, [pc, #228]	; (8009340 <HAL_DMA_Abort+0x21c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d068      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a37      	ldr	r2, [pc, #220]	; (8009344 <HAL_DMA_Abort+0x220>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d063      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a36      	ldr	r2, [pc, #216]	; (8009348 <HAL_DMA_Abort+0x224>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d05e      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a34      	ldr	r2, [pc, #208]	; (800934c <HAL_DMA_Abort+0x228>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d059      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a33      	ldr	r2, [pc, #204]	; (8009350 <HAL_DMA_Abort+0x22c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d054      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a31      	ldr	r2, [pc, #196]	; (8009354 <HAL_DMA_Abort+0x230>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d04f      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a30      	ldr	r2, [pc, #192]	; (8009358 <HAL_DMA_Abort+0x234>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d04a      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a2e      	ldr	r2, [pc, #184]	; (800935c <HAL_DMA_Abort+0x238>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d045      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a2d      	ldr	r2, [pc, #180]	; (8009360 <HAL_DMA_Abort+0x23c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d040      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a2b      	ldr	r2, [pc, #172]	; (8009364 <HAL_DMA_Abort+0x240>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d03b      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a2a      	ldr	r2, [pc, #168]	; (8009368 <HAL_DMA_Abort+0x244>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d036      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a28      	ldr	r2, [pc, #160]	; (800936c <HAL_DMA_Abort+0x248>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d031      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a27      	ldr	r2, [pc, #156]	; (8009370 <HAL_DMA_Abort+0x24c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d02c      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a25      	ldr	r2, [pc, #148]	; (8009374 <HAL_DMA_Abort+0x250>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d027      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a24      	ldr	r2, [pc, #144]	; (8009378 <HAL_DMA_Abort+0x254>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d022      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a22      	ldr	r2, [pc, #136]	; (800937c <HAL_DMA_Abort+0x258>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01d      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a21      	ldr	r2, [pc, #132]	; (8009380 <HAL_DMA_Abort+0x25c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <HAL_DMA_Abort+0x260>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a1e      	ldr	r2, [pc, #120]	; (8009388 <HAL_DMA_Abort+0x264>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1c      	ldr	r2, [pc, #112]	; (800938c <HAL_DMA_Abort+0x268>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1b      	ldr	r2, [pc, #108]	; (8009390 <HAL_DMA_Abort+0x26c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_DMA_Abort+0x20e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <HAL_DMA_Abort+0x270>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d132      	bne.n	8009398 <HAL_DMA_Abort+0x274>
 8009332:	2301      	movs	r3, #1
 8009334:	e031      	b.n	800939a <HAL_DMA_Abort+0x276>
 8009336:	bf00      	nop
 8009338:	40020010 	.word	0x40020010
 800933c:	40020028 	.word	0x40020028
 8009340:	40020040 	.word	0x40020040
 8009344:	40020058 	.word	0x40020058
 8009348:	40020070 	.word	0x40020070
 800934c:	40020088 	.word	0x40020088
 8009350:	400200a0 	.word	0x400200a0
 8009354:	400200b8 	.word	0x400200b8
 8009358:	40020410 	.word	0x40020410
 800935c:	40020428 	.word	0x40020428
 8009360:	40020440 	.word	0x40020440
 8009364:	40020458 	.word	0x40020458
 8009368:	40020470 	.word	0x40020470
 800936c:	40020488 	.word	0x40020488
 8009370:	400204a0 	.word	0x400204a0
 8009374:	400204b8 	.word	0x400204b8
 8009378:	58025408 	.word	0x58025408
 800937c:	5802541c 	.word	0x5802541c
 8009380:	58025430 	.word	0x58025430
 8009384:	58025444 	.word	0x58025444
 8009388:	58025458 	.word	0x58025458
 800938c:	5802546c 	.word	0x5802546c
 8009390:	58025480 	.word	0x58025480
 8009394:	58025494 	.word	0x58025494
 8009398:	2300      	movs	r3, #0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a6d      	ldr	r2, [pc, #436]	; (8009568 <HAL_DMA_Abort+0x444>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d04a      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a6b      	ldr	r2, [pc, #428]	; (800956c <HAL_DMA_Abort+0x448>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d045      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a6a      	ldr	r2, [pc, #424]	; (8009570 <HAL_DMA_Abort+0x44c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d040      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a68      	ldr	r2, [pc, #416]	; (8009574 <HAL_DMA_Abort+0x450>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d03b      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a67      	ldr	r2, [pc, #412]	; (8009578 <HAL_DMA_Abort+0x454>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d036      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a65      	ldr	r2, [pc, #404]	; (800957c <HAL_DMA_Abort+0x458>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d031      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a64      	ldr	r2, [pc, #400]	; (8009580 <HAL_DMA_Abort+0x45c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d02c      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a62      	ldr	r2, [pc, #392]	; (8009584 <HAL_DMA_Abort+0x460>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d027      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a61      	ldr	r2, [pc, #388]	; (8009588 <HAL_DMA_Abort+0x464>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d022      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a5f      	ldr	r2, [pc, #380]	; (800958c <HAL_DMA_Abort+0x468>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d01d      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a5e      	ldr	r2, [pc, #376]	; (8009590 <HAL_DMA_Abort+0x46c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d018      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a5c      	ldr	r2, [pc, #368]	; (8009594 <HAL_DMA_Abort+0x470>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a5b      	ldr	r2, [pc, #364]	; (8009598 <HAL_DMA_Abort+0x474>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00e      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a59      	ldr	r2, [pc, #356]	; (800959c <HAL_DMA_Abort+0x478>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d009      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a58      	ldr	r2, [pc, #352]	; (80095a0 <HAL_DMA_Abort+0x47c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d004      	beq.n	800944e <HAL_DMA_Abort+0x32a>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a56      	ldr	r2, [pc, #344]	; (80095a4 <HAL_DMA_Abort+0x480>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d108      	bne.n	8009460 <HAL_DMA_Abort+0x33c>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0201 	bic.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e007      	b.n	8009470 <HAL_DMA_Abort+0x34c>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009470:	e013      	b.n	800949a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009472:	f7fc ff69 	bl	8006348 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b05      	cmp	r3, #5
 800947e:	d90c      	bls.n	800949a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2203      	movs	r2, #3
 800948a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e12d      	b.n	80096f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2f      	ldr	r2, [pc, #188]	; (8009568 <HAL_DMA_Abort+0x444>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d04a      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	; (800956c <HAL_DMA_Abort+0x448>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d045      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2c      	ldr	r2, [pc, #176]	; (8009570 <HAL_DMA_Abort+0x44c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d040      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a2a      	ldr	r2, [pc, #168]	; (8009574 <HAL_DMA_Abort+0x450>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d03b      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a29      	ldr	r2, [pc, #164]	; (8009578 <HAL_DMA_Abort+0x454>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d036      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a27      	ldr	r2, [pc, #156]	; (800957c <HAL_DMA_Abort+0x458>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d031      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a26      	ldr	r2, [pc, #152]	; (8009580 <HAL_DMA_Abort+0x45c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d02c      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a24      	ldr	r2, [pc, #144]	; (8009584 <HAL_DMA_Abort+0x460>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d027      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a23      	ldr	r2, [pc, #140]	; (8009588 <HAL_DMA_Abort+0x464>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d022      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a21      	ldr	r2, [pc, #132]	; (800958c <HAL_DMA_Abort+0x468>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d01d      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a20      	ldr	r2, [pc, #128]	; (8009590 <HAL_DMA_Abort+0x46c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d018      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1e      	ldr	r2, [pc, #120]	; (8009594 <HAL_DMA_Abort+0x470>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1d      	ldr	r2, [pc, #116]	; (8009598 <HAL_DMA_Abort+0x474>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00e      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1b      	ldr	r2, [pc, #108]	; (800959c <HAL_DMA_Abort+0x478>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a1a      	ldr	r2, [pc, #104]	; (80095a0 <HAL_DMA_Abort+0x47c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_DMA_Abort+0x422>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a18      	ldr	r2, [pc, #96]	; (80095a4 <HAL_DMA_Abort+0x480>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d101      	bne.n	800954a <HAL_DMA_Abort+0x426>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <HAL_DMA_Abort+0x428>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d02b      	beq.n	80095a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009554:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955a:	f003 031f 	and.w	r3, r3, #31
 800955e:	223f      	movs	r2, #63	; 0x3f
 8009560:	409a      	lsls	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	609a      	str	r2, [r3, #8]
 8009566:	e02a      	b.n	80095be <HAL_DMA_Abort+0x49a>
 8009568:	40020010 	.word	0x40020010
 800956c:	40020028 	.word	0x40020028
 8009570:	40020040 	.word	0x40020040
 8009574:	40020058 	.word	0x40020058
 8009578:	40020070 	.word	0x40020070
 800957c:	40020088 	.word	0x40020088
 8009580:	400200a0 	.word	0x400200a0
 8009584:	400200b8 	.word	0x400200b8
 8009588:	40020410 	.word	0x40020410
 800958c:	40020428 	.word	0x40020428
 8009590:	40020440 	.word	0x40020440
 8009594:	40020458 	.word	0x40020458
 8009598:	40020470 	.word	0x40020470
 800959c:	40020488 	.word	0x40020488
 80095a0:	400204a0 	.word	0x400204a0
 80095a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2201      	movs	r2, #1
 80095b8:	409a      	lsls	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a4f      	ldr	r2, [pc, #316]	; (8009700 <HAL_DMA_Abort+0x5dc>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d072      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a4d      	ldr	r2, [pc, #308]	; (8009704 <HAL_DMA_Abort+0x5e0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d06d      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a4c      	ldr	r2, [pc, #304]	; (8009708 <HAL_DMA_Abort+0x5e4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d068      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a4a      	ldr	r2, [pc, #296]	; (800970c <HAL_DMA_Abort+0x5e8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d063      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a49      	ldr	r2, [pc, #292]	; (8009710 <HAL_DMA_Abort+0x5ec>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d05e      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a47      	ldr	r2, [pc, #284]	; (8009714 <HAL_DMA_Abort+0x5f0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d059      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a46      	ldr	r2, [pc, #280]	; (8009718 <HAL_DMA_Abort+0x5f4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d054      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a44      	ldr	r2, [pc, #272]	; (800971c <HAL_DMA_Abort+0x5f8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d04f      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a43      	ldr	r2, [pc, #268]	; (8009720 <HAL_DMA_Abort+0x5fc>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d04a      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a41      	ldr	r2, [pc, #260]	; (8009724 <HAL_DMA_Abort+0x600>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d045      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a40      	ldr	r2, [pc, #256]	; (8009728 <HAL_DMA_Abort+0x604>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d040      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a3e      	ldr	r2, [pc, #248]	; (800972c <HAL_DMA_Abort+0x608>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d03b      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a3d      	ldr	r2, [pc, #244]	; (8009730 <HAL_DMA_Abort+0x60c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d036      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a3b      	ldr	r2, [pc, #236]	; (8009734 <HAL_DMA_Abort+0x610>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d031      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a3a      	ldr	r2, [pc, #232]	; (8009738 <HAL_DMA_Abort+0x614>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d02c      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a38      	ldr	r2, [pc, #224]	; (800973c <HAL_DMA_Abort+0x618>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d027      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a37      	ldr	r2, [pc, #220]	; (8009740 <HAL_DMA_Abort+0x61c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d022      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a35      	ldr	r2, [pc, #212]	; (8009744 <HAL_DMA_Abort+0x620>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d01d      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a34      	ldr	r2, [pc, #208]	; (8009748 <HAL_DMA_Abort+0x624>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d018      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a32      	ldr	r2, [pc, #200]	; (800974c <HAL_DMA_Abort+0x628>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a31      	ldr	r2, [pc, #196]	; (8009750 <HAL_DMA_Abort+0x62c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00e      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a2f      	ldr	r2, [pc, #188]	; (8009754 <HAL_DMA_Abort+0x630>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d009      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a2e      	ldr	r2, [pc, #184]	; (8009758 <HAL_DMA_Abort+0x634>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d004      	beq.n	80096ae <HAL_DMA_Abort+0x58a>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a2c      	ldr	r2, [pc, #176]	; (800975c <HAL_DMA_Abort+0x638>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d101      	bne.n	80096b2 <HAL_DMA_Abort+0x58e>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <HAL_DMA_Abort+0x590>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d015      	beq.n	80096e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00c      	beq.n	80096e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80096e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40020010 	.word	0x40020010
 8009704:	40020028 	.word	0x40020028
 8009708:	40020040 	.word	0x40020040
 800970c:	40020058 	.word	0x40020058
 8009710:	40020070 	.word	0x40020070
 8009714:	40020088 	.word	0x40020088
 8009718:	400200a0 	.word	0x400200a0
 800971c:	400200b8 	.word	0x400200b8
 8009720:	40020410 	.word	0x40020410
 8009724:	40020428 	.word	0x40020428
 8009728:	40020440 	.word	0x40020440
 800972c:	40020458 	.word	0x40020458
 8009730:	40020470 	.word	0x40020470
 8009734:	40020488 	.word	0x40020488
 8009738:	400204a0 	.word	0x400204a0
 800973c:	400204b8 	.word	0x400204b8
 8009740:	58025408 	.word	0x58025408
 8009744:	5802541c 	.word	0x5802541c
 8009748:	58025430 	.word	0x58025430
 800974c:	58025444 	.word	0x58025444
 8009750:	58025458 	.word	0x58025458
 8009754:	5802546c 	.word	0x5802546c
 8009758:	58025480 	.word	0x58025480
 800975c:	58025494 	.word	0x58025494

08009760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e237      	b.n	8009be2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d004      	beq.n	8009788 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2280      	movs	r2, #128	; 0x80
 8009782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e22c      	b.n	8009be2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a5c      	ldr	r2, [pc, #368]	; (8009900 <HAL_DMA_Abort_IT+0x1a0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d04a      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a5b      	ldr	r2, [pc, #364]	; (8009904 <HAL_DMA_Abort_IT+0x1a4>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d045      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a59      	ldr	r2, [pc, #356]	; (8009908 <HAL_DMA_Abort_IT+0x1a8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d040      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a58      	ldr	r2, [pc, #352]	; (800990c <HAL_DMA_Abort_IT+0x1ac>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d03b      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a56      	ldr	r2, [pc, #344]	; (8009910 <HAL_DMA_Abort_IT+0x1b0>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d036      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a55      	ldr	r2, [pc, #340]	; (8009914 <HAL_DMA_Abort_IT+0x1b4>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d031      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a53      	ldr	r2, [pc, #332]	; (8009918 <HAL_DMA_Abort_IT+0x1b8>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d02c      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a52      	ldr	r2, [pc, #328]	; (800991c <HAL_DMA_Abort_IT+0x1bc>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d027      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a50      	ldr	r2, [pc, #320]	; (8009920 <HAL_DMA_Abort_IT+0x1c0>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d022      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a4f      	ldr	r2, [pc, #316]	; (8009924 <HAL_DMA_Abort_IT+0x1c4>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d01d      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a4d      	ldr	r2, [pc, #308]	; (8009928 <HAL_DMA_Abort_IT+0x1c8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d018      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a4c      	ldr	r2, [pc, #304]	; (800992c <HAL_DMA_Abort_IT+0x1cc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d013      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a4a      	ldr	r2, [pc, #296]	; (8009930 <HAL_DMA_Abort_IT+0x1d0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00e      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a49      	ldr	r2, [pc, #292]	; (8009934 <HAL_DMA_Abort_IT+0x1d4>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d009      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a47      	ldr	r2, [pc, #284]	; (8009938 <HAL_DMA_Abort_IT+0x1d8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d004      	beq.n	8009828 <HAL_DMA_Abort_IT+0xc8>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a46      	ldr	r2, [pc, #280]	; (800993c <HAL_DMA_Abort_IT+0x1dc>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d101      	bne.n	800982c <HAL_DMA_Abort_IT+0xcc>
 8009828:	2301      	movs	r3, #1
 800982a:	e000      	b.n	800982e <HAL_DMA_Abort_IT+0xce>
 800982c:	2300      	movs	r3, #0
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8086 	beq.w	8009940 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a2f      	ldr	r2, [pc, #188]	; (8009900 <HAL_DMA_Abort_IT+0x1a0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d04a      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a2e      	ldr	r2, [pc, #184]	; (8009904 <HAL_DMA_Abort_IT+0x1a4>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d045      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a2c      	ldr	r2, [pc, #176]	; (8009908 <HAL_DMA_Abort_IT+0x1a8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d040      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a2b      	ldr	r2, [pc, #172]	; (800990c <HAL_DMA_Abort_IT+0x1ac>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d03b      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <HAL_DMA_Abort_IT+0x1b0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d036      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a28      	ldr	r2, [pc, #160]	; (8009914 <HAL_DMA_Abort_IT+0x1b4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d031      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a26      	ldr	r2, [pc, #152]	; (8009918 <HAL_DMA_Abort_IT+0x1b8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d02c      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a25      	ldr	r2, [pc, #148]	; (800991c <HAL_DMA_Abort_IT+0x1bc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d027      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a23      	ldr	r2, [pc, #140]	; (8009920 <HAL_DMA_Abort_IT+0x1c0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d022      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a22      	ldr	r2, [pc, #136]	; (8009924 <HAL_DMA_Abort_IT+0x1c4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d01d      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a20      	ldr	r2, [pc, #128]	; (8009928 <HAL_DMA_Abort_IT+0x1c8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d018      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1f      	ldr	r2, [pc, #124]	; (800992c <HAL_DMA_Abort_IT+0x1cc>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d013      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1d      	ldr	r2, [pc, #116]	; (8009930 <HAL_DMA_Abort_IT+0x1d0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00e      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1c      	ldr	r2, [pc, #112]	; (8009934 <HAL_DMA_Abort_IT+0x1d4>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d009      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1a      	ldr	r2, [pc, #104]	; (8009938 <HAL_DMA_Abort_IT+0x1d8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d004      	beq.n	80098dc <HAL_DMA_Abort_IT+0x17c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a19      	ldr	r2, [pc, #100]	; (800993c <HAL_DMA_Abort_IT+0x1dc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d108      	bne.n	80098ee <HAL_DMA_Abort_IT+0x18e>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0201 	bic.w	r2, r2, #1
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	e178      	b.n	8009be0 <HAL_DMA_Abort_IT+0x480>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0201 	bic.w	r2, r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e16f      	b.n	8009be0 <HAL_DMA_Abort_IT+0x480>
 8009900:	40020010 	.word	0x40020010
 8009904:	40020028 	.word	0x40020028
 8009908:	40020040 	.word	0x40020040
 800990c:	40020058 	.word	0x40020058
 8009910:	40020070 	.word	0x40020070
 8009914:	40020088 	.word	0x40020088
 8009918:	400200a0 	.word	0x400200a0
 800991c:	400200b8 	.word	0x400200b8
 8009920:	40020410 	.word	0x40020410
 8009924:	40020428 	.word	0x40020428
 8009928:	40020440 	.word	0x40020440
 800992c:	40020458 	.word	0x40020458
 8009930:	40020470 	.word	0x40020470
 8009934:	40020488 	.word	0x40020488
 8009938:	400204a0 	.word	0x400204a0
 800993c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 020e 	bic.w	r2, r2, #14
 800994e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a6c      	ldr	r2, [pc, #432]	; (8009b08 <HAL_DMA_Abort_IT+0x3a8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d04a      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a6b      	ldr	r2, [pc, #428]	; (8009b0c <HAL_DMA_Abort_IT+0x3ac>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d045      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a69      	ldr	r2, [pc, #420]	; (8009b10 <HAL_DMA_Abort_IT+0x3b0>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d040      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a68      	ldr	r2, [pc, #416]	; (8009b14 <HAL_DMA_Abort_IT+0x3b4>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d03b      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a66      	ldr	r2, [pc, #408]	; (8009b18 <HAL_DMA_Abort_IT+0x3b8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d036      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a65      	ldr	r2, [pc, #404]	; (8009b1c <HAL_DMA_Abort_IT+0x3bc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d031      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a63      	ldr	r2, [pc, #396]	; (8009b20 <HAL_DMA_Abort_IT+0x3c0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d02c      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a62      	ldr	r2, [pc, #392]	; (8009b24 <HAL_DMA_Abort_IT+0x3c4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d027      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a60      	ldr	r2, [pc, #384]	; (8009b28 <HAL_DMA_Abort_IT+0x3c8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d022      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a5f      	ldr	r2, [pc, #380]	; (8009b2c <HAL_DMA_Abort_IT+0x3cc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d01d      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a5d      	ldr	r2, [pc, #372]	; (8009b30 <HAL_DMA_Abort_IT+0x3d0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d018      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a5c      	ldr	r2, [pc, #368]	; (8009b34 <HAL_DMA_Abort_IT+0x3d4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d013      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a5a      	ldr	r2, [pc, #360]	; (8009b38 <HAL_DMA_Abort_IT+0x3d8>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00e      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a59      	ldr	r2, [pc, #356]	; (8009b3c <HAL_DMA_Abort_IT+0x3dc>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d009      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a57      	ldr	r2, [pc, #348]	; (8009b40 <HAL_DMA_Abort_IT+0x3e0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <HAL_DMA_Abort_IT+0x290>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a56      	ldr	r2, [pc, #344]	; (8009b44 <HAL_DMA_Abort_IT+0x3e4>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d108      	bne.n	8009a02 <HAL_DMA_Abort_IT+0x2a2>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0201 	bic.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e007      	b.n	8009a12 <HAL_DMA_Abort_IT+0x2b2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a3c      	ldr	r2, [pc, #240]	; (8009b08 <HAL_DMA_Abort_IT+0x3a8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d072      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a3a      	ldr	r2, [pc, #232]	; (8009b0c <HAL_DMA_Abort_IT+0x3ac>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d06d      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a39      	ldr	r2, [pc, #228]	; (8009b10 <HAL_DMA_Abort_IT+0x3b0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d068      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a37      	ldr	r2, [pc, #220]	; (8009b14 <HAL_DMA_Abort_IT+0x3b4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d063      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a36      	ldr	r2, [pc, #216]	; (8009b18 <HAL_DMA_Abort_IT+0x3b8>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d05e      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a34      	ldr	r2, [pc, #208]	; (8009b1c <HAL_DMA_Abort_IT+0x3bc>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d059      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a33      	ldr	r2, [pc, #204]	; (8009b20 <HAL_DMA_Abort_IT+0x3c0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d054      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a31      	ldr	r2, [pc, #196]	; (8009b24 <HAL_DMA_Abort_IT+0x3c4>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d04f      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a30      	ldr	r2, [pc, #192]	; (8009b28 <HAL_DMA_Abort_IT+0x3c8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d04a      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a2e      	ldr	r2, [pc, #184]	; (8009b2c <HAL_DMA_Abort_IT+0x3cc>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d045      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a2d      	ldr	r2, [pc, #180]	; (8009b30 <HAL_DMA_Abort_IT+0x3d0>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d040      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a2b      	ldr	r2, [pc, #172]	; (8009b34 <HAL_DMA_Abort_IT+0x3d4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d03b      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <HAL_DMA_Abort_IT+0x3d8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d036      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a28      	ldr	r2, [pc, #160]	; (8009b3c <HAL_DMA_Abort_IT+0x3dc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d031      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a27      	ldr	r2, [pc, #156]	; (8009b40 <HAL_DMA_Abort_IT+0x3e0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d02c      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a25      	ldr	r2, [pc, #148]	; (8009b44 <HAL_DMA_Abort_IT+0x3e4>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d027      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a24      	ldr	r2, [pc, #144]	; (8009b48 <HAL_DMA_Abort_IT+0x3e8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d022      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a22      	ldr	r2, [pc, #136]	; (8009b4c <HAL_DMA_Abort_IT+0x3ec>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d01d      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a21      	ldr	r2, [pc, #132]	; (8009b50 <HAL_DMA_Abort_IT+0x3f0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d018      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a1f      	ldr	r2, [pc, #124]	; (8009b54 <HAL_DMA_Abort_IT+0x3f4>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a1e      	ldr	r2, [pc, #120]	; (8009b58 <HAL_DMA_Abort_IT+0x3f8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00e      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <HAL_DMA_Abort_IT+0x3fc>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d009      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a1b      	ldr	r2, [pc, #108]	; (8009b60 <HAL_DMA_Abort_IT+0x400>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d004      	beq.n	8009b02 <HAL_DMA_Abort_IT+0x3a2>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <HAL_DMA_Abort_IT+0x404>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d132      	bne.n	8009b68 <HAL_DMA_Abort_IT+0x408>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e031      	b.n	8009b6a <HAL_DMA_Abort_IT+0x40a>
 8009b06:	bf00      	nop
 8009b08:	40020010 	.word	0x40020010
 8009b0c:	40020028 	.word	0x40020028
 8009b10:	40020040 	.word	0x40020040
 8009b14:	40020058 	.word	0x40020058
 8009b18:	40020070 	.word	0x40020070
 8009b1c:	40020088 	.word	0x40020088
 8009b20:	400200a0 	.word	0x400200a0
 8009b24:	400200b8 	.word	0x400200b8
 8009b28:	40020410 	.word	0x40020410
 8009b2c:	40020428 	.word	0x40020428
 8009b30:	40020440 	.word	0x40020440
 8009b34:	40020458 	.word	0x40020458
 8009b38:	40020470 	.word	0x40020470
 8009b3c:	40020488 	.word	0x40020488
 8009b40:	400204a0 	.word	0x400204a0
 8009b44:	400204b8 	.word	0x400204b8
 8009b48:	58025408 	.word	0x58025408
 8009b4c:	5802541c 	.word	0x5802541c
 8009b50:	58025430 	.word	0x58025430
 8009b54:	58025444 	.word	0x58025444
 8009b58:	58025458 	.word	0x58025458
 8009b5c:	5802546c 	.word	0x5802546c
 8009b60:	58025480 	.word	0x58025480
 8009b64:	58025494 	.word	0x58025494
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d028      	beq.n	8009bc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b88:	f003 031f 	and.w	r3, r3, #31
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	409a      	lsls	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009b9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00c      	beq.n	8009bc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009bbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop

08009bec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	; 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009bf8:	4b67      	ldr	r3, [pc, #412]	; (8009d98 <HAL_DMA_IRQHandler+0x1ac>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a67      	ldr	r2, [pc, #412]	; (8009d9c <HAL_DMA_IRQHandler+0x1b0>)
 8009bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009c02:	0a9b      	lsrs	r3, r3, #10
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a5f      	ldr	r2, [pc, #380]	; (8009da0 <HAL_DMA_IRQHandler+0x1b4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d04a      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a5d      	ldr	r2, [pc, #372]	; (8009da4 <HAL_DMA_IRQHandler+0x1b8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d045      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a5c      	ldr	r2, [pc, #368]	; (8009da8 <HAL_DMA_IRQHandler+0x1bc>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d040      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a5a      	ldr	r2, [pc, #360]	; (8009dac <HAL_DMA_IRQHandler+0x1c0>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d03b      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a59      	ldr	r2, [pc, #356]	; (8009db0 <HAL_DMA_IRQHandler+0x1c4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d036      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a57      	ldr	r2, [pc, #348]	; (8009db4 <HAL_DMA_IRQHandler+0x1c8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d031      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a56      	ldr	r2, [pc, #344]	; (8009db8 <HAL_DMA_IRQHandler+0x1cc>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d02c      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a54      	ldr	r2, [pc, #336]	; (8009dbc <HAL_DMA_IRQHandler+0x1d0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d027      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a53      	ldr	r2, [pc, #332]	; (8009dc0 <HAL_DMA_IRQHandler+0x1d4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d022      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a51      	ldr	r2, [pc, #324]	; (8009dc4 <HAL_DMA_IRQHandler+0x1d8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d01d      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a50      	ldr	r2, [pc, #320]	; (8009dc8 <HAL_DMA_IRQHandler+0x1dc>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d018      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a4e      	ldr	r2, [pc, #312]	; (8009dcc <HAL_DMA_IRQHandler+0x1e0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d013      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a4d      	ldr	r2, [pc, #308]	; (8009dd0 <HAL_DMA_IRQHandler+0x1e4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00e      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a4b      	ldr	r2, [pc, #300]	; (8009dd4 <HAL_DMA_IRQHandler+0x1e8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d009      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a4a      	ldr	r2, [pc, #296]	; (8009dd8 <HAL_DMA_IRQHandler+0x1ec>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d004      	beq.n	8009cbe <HAL_DMA_IRQHandler+0xd2>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a48      	ldr	r2, [pc, #288]	; (8009ddc <HAL_DMA_IRQHandler+0x1f0>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d101      	bne.n	8009cc2 <HAL_DMA_IRQHandler+0xd6>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e000      	b.n	8009cc4 <HAL_DMA_IRQHandler+0xd8>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 842b 	beq.w	800a520 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	409a      	lsls	r2, r3
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a2 	beq.w	8009e24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a2e      	ldr	r2, [pc, #184]	; (8009da0 <HAL_DMA_IRQHandler+0x1b4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d04a      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <HAL_DMA_IRQHandler+0x1b8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d045      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a2b      	ldr	r2, [pc, #172]	; (8009da8 <HAL_DMA_IRQHandler+0x1bc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d040      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a2a      	ldr	r2, [pc, #168]	; (8009dac <HAL_DMA_IRQHandler+0x1c0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d03b      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <HAL_DMA_IRQHandler+0x1c4>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d036      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <HAL_DMA_IRQHandler+0x1c8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d031      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a25      	ldr	r2, [pc, #148]	; (8009db8 <HAL_DMA_IRQHandler+0x1cc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d02c      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a24      	ldr	r2, [pc, #144]	; (8009dbc <HAL_DMA_IRQHandler+0x1d0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d027      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a22      	ldr	r2, [pc, #136]	; (8009dc0 <HAL_DMA_IRQHandler+0x1d4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d022      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <HAL_DMA_IRQHandler+0x1d8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d01d      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <HAL_DMA_IRQHandler+0x1dc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d018      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a1e      	ldr	r2, [pc, #120]	; (8009dcc <HAL_DMA_IRQHandler+0x1e0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d013      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a1c      	ldr	r2, [pc, #112]	; (8009dd0 <HAL_DMA_IRQHandler+0x1e4>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00e      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a1b      	ldr	r2, [pc, #108]	; (8009dd4 <HAL_DMA_IRQHandler+0x1e8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a19      	ldr	r2, [pc, #100]	; (8009dd8 <HAL_DMA_IRQHandler+0x1ec>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <HAL_DMA_IRQHandler+0x194>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <HAL_DMA_IRQHandler+0x1f0>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d12f      	bne.n	8009de0 <HAL_DMA_IRQHandler+0x1f4>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0304 	and.w	r3, r3, #4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	bf14      	ite	ne
 8009d8e:	2301      	movne	r3, #1
 8009d90:	2300      	moveq	r3, #0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	e02e      	b.n	8009df4 <HAL_DMA_IRQHandler+0x208>
 8009d96:	bf00      	nop
 8009d98:	240000c8 	.word	0x240000c8
 8009d9c:	1b4e81b5 	.word	0x1b4e81b5
 8009da0:	40020010 	.word	0x40020010
 8009da4:	40020028 	.word	0x40020028
 8009da8:	40020040 	.word	0x40020040
 8009dac:	40020058 	.word	0x40020058
 8009db0:	40020070 	.word	0x40020070
 8009db4:	40020088 	.word	0x40020088
 8009db8:	400200a0 	.word	0x400200a0
 8009dbc:	400200b8 	.word	0x400200b8
 8009dc0:	40020410 	.word	0x40020410
 8009dc4:	40020428 	.word	0x40020428
 8009dc8:	40020440 	.word	0x40020440
 8009dcc:	40020458 	.word	0x40020458
 8009dd0:	40020470 	.word	0x40020470
 8009dd4:	40020488 	.word	0x40020488
 8009dd8:	400204a0 	.word	0x400204a0
 8009ddc:	400204b8 	.word	0x400204b8
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bf14      	ite	ne
 8009dee:	2301      	movne	r3, #1
 8009df0:	2300      	moveq	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d015      	beq.n	8009e24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0204 	bic.w	r2, r2, #4
 8009e06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0c:	f003 031f 	and.w	r3, r3, #31
 8009e10:	2208      	movs	r2, #8
 8009e12:	409a      	lsls	r2, r3
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	f043 0201 	orr.w	r2, r3, #1
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e28:	f003 031f 	and.w	r3, r3, #31
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d06e      	beq.n	8009f18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a69      	ldr	r2, [pc, #420]	; (8009fe4 <HAL_DMA_IRQHandler+0x3f8>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d04a      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a67      	ldr	r2, [pc, #412]	; (8009fe8 <HAL_DMA_IRQHandler+0x3fc>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d045      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a66      	ldr	r2, [pc, #408]	; (8009fec <HAL_DMA_IRQHandler+0x400>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d040      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a64      	ldr	r2, [pc, #400]	; (8009ff0 <HAL_DMA_IRQHandler+0x404>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d03b      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a63      	ldr	r2, [pc, #396]	; (8009ff4 <HAL_DMA_IRQHandler+0x408>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d036      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a61      	ldr	r2, [pc, #388]	; (8009ff8 <HAL_DMA_IRQHandler+0x40c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d031      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a60      	ldr	r2, [pc, #384]	; (8009ffc <HAL_DMA_IRQHandler+0x410>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d02c      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a5e      	ldr	r2, [pc, #376]	; (800a000 <HAL_DMA_IRQHandler+0x414>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d027      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a5d      	ldr	r2, [pc, #372]	; (800a004 <HAL_DMA_IRQHandler+0x418>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d022      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a5b      	ldr	r2, [pc, #364]	; (800a008 <HAL_DMA_IRQHandler+0x41c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d01d      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a5a      	ldr	r2, [pc, #360]	; (800a00c <HAL_DMA_IRQHandler+0x420>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d018      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a58      	ldr	r2, [pc, #352]	; (800a010 <HAL_DMA_IRQHandler+0x424>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d013      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a57      	ldr	r2, [pc, #348]	; (800a014 <HAL_DMA_IRQHandler+0x428>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d00e      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a55      	ldr	r2, [pc, #340]	; (800a018 <HAL_DMA_IRQHandler+0x42c>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d009      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a54      	ldr	r2, [pc, #336]	; (800a01c <HAL_DMA_IRQHandler+0x430>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d004      	beq.n	8009eda <HAL_DMA_IRQHandler+0x2ee>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a52      	ldr	r2, [pc, #328]	; (800a020 <HAL_DMA_IRQHandler+0x434>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d10a      	bne.n	8009ef0 <HAL_DMA_IRQHandler+0x304>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bf14      	ite	ne
 8009ee8:	2301      	movne	r3, #1
 8009eea:	2300      	moveq	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	e003      	b.n	8009ef8 <HAL_DMA_IRQHandler+0x30c>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	2201      	movs	r2, #1
 8009f06:	409a      	lsls	r2, r3
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f10:	f043 0202 	orr.w	r2, r3, #2
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f1c:	f003 031f 	and.w	r3, r3, #31
 8009f20:	2204      	movs	r2, #4
 8009f22:	409a      	lsls	r2, r3
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 808f 	beq.w	800a04c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a2c      	ldr	r2, [pc, #176]	; (8009fe4 <HAL_DMA_IRQHandler+0x3f8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d04a      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a2a      	ldr	r2, [pc, #168]	; (8009fe8 <HAL_DMA_IRQHandler+0x3fc>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d045      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a29      	ldr	r2, [pc, #164]	; (8009fec <HAL_DMA_IRQHandler+0x400>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d040      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a27      	ldr	r2, [pc, #156]	; (8009ff0 <HAL_DMA_IRQHandler+0x404>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d03b      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <HAL_DMA_IRQHandler+0x408>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d036      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a24      	ldr	r2, [pc, #144]	; (8009ff8 <HAL_DMA_IRQHandler+0x40c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d031      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a23      	ldr	r2, [pc, #140]	; (8009ffc <HAL_DMA_IRQHandler+0x410>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d02c      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a21      	ldr	r2, [pc, #132]	; (800a000 <HAL_DMA_IRQHandler+0x414>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d027      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a20      	ldr	r2, [pc, #128]	; (800a004 <HAL_DMA_IRQHandler+0x418>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d022      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <HAL_DMA_IRQHandler+0x41c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d01d      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a1d      	ldr	r2, [pc, #116]	; (800a00c <HAL_DMA_IRQHandler+0x420>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d018      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1b      	ldr	r2, [pc, #108]	; (800a010 <HAL_DMA_IRQHandler+0x424>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d013      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1a      	ldr	r2, [pc, #104]	; (800a014 <HAL_DMA_IRQHandler+0x428>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00e      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a18      	ldr	r2, [pc, #96]	; (800a018 <HAL_DMA_IRQHandler+0x42c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d009      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a17      	ldr	r2, [pc, #92]	; (800a01c <HAL_DMA_IRQHandler+0x430>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d004      	beq.n	8009fce <HAL_DMA_IRQHandler+0x3e2>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a15      	ldr	r2, [pc, #84]	; (800a020 <HAL_DMA_IRQHandler+0x434>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d12a      	bne.n	800a024 <HAL_DMA_IRQHandler+0x438>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bf14      	ite	ne
 8009fdc:	2301      	movne	r3, #1
 8009fde:	2300      	moveq	r3, #0
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	e023      	b.n	800a02c <HAL_DMA_IRQHandler+0x440>
 8009fe4:	40020010 	.word	0x40020010
 8009fe8:	40020028 	.word	0x40020028
 8009fec:	40020040 	.word	0x40020040
 8009ff0:	40020058 	.word	0x40020058
 8009ff4:	40020070 	.word	0x40020070
 8009ff8:	40020088 	.word	0x40020088
 8009ffc:	400200a0 	.word	0x400200a0
 800a000:	400200b8 	.word	0x400200b8
 800a004:	40020410 	.word	0x40020410
 800a008:	40020428 	.word	0x40020428
 800a00c:	40020440 	.word	0x40020440
 800a010:	40020458 	.word	0x40020458
 800a014:	40020470 	.word	0x40020470
 800a018:	40020488 	.word	0x40020488
 800a01c:	400204a0 	.word	0x400204a0
 800a020:	400204b8 	.word	0x400204b8
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2204      	movs	r2, #4
 800a03a:	409a      	lsls	r2, r3
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a044:	f043 0204 	orr.w	r2, r3, #4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a050:	f003 031f 	and.w	r3, r3, #31
 800a054:	2210      	movs	r2, #16
 800a056:	409a      	lsls	r2, r3
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	4013      	ands	r3, r2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80a6 	beq.w	800a1ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a85      	ldr	r2, [pc, #532]	; (800a27c <HAL_DMA_IRQHandler+0x690>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d04a      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a83      	ldr	r2, [pc, #524]	; (800a280 <HAL_DMA_IRQHandler+0x694>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d045      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a82      	ldr	r2, [pc, #520]	; (800a284 <HAL_DMA_IRQHandler+0x698>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d040      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a80      	ldr	r2, [pc, #512]	; (800a288 <HAL_DMA_IRQHandler+0x69c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d03b      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a7f      	ldr	r2, [pc, #508]	; (800a28c <HAL_DMA_IRQHandler+0x6a0>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d036      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a7d      	ldr	r2, [pc, #500]	; (800a290 <HAL_DMA_IRQHandler+0x6a4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d031      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a7c      	ldr	r2, [pc, #496]	; (800a294 <HAL_DMA_IRQHandler+0x6a8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d02c      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a7a      	ldr	r2, [pc, #488]	; (800a298 <HAL_DMA_IRQHandler+0x6ac>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d027      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a79      	ldr	r2, [pc, #484]	; (800a29c <HAL_DMA_IRQHandler+0x6b0>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d022      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a77      	ldr	r2, [pc, #476]	; (800a2a0 <HAL_DMA_IRQHandler+0x6b4>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d01d      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a76      	ldr	r2, [pc, #472]	; (800a2a4 <HAL_DMA_IRQHandler+0x6b8>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d018      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a74      	ldr	r2, [pc, #464]	; (800a2a8 <HAL_DMA_IRQHandler+0x6bc>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d013      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a73      	ldr	r2, [pc, #460]	; (800a2ac <HAL_DMA_IRQHandler+0x6c0>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00e      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a71      	ldr	r2, [pc, #452]	; (800a2b0 <HAL_DMA_IRQHandler+0x6c4>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d009      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a70      	ldr	r2, [pc, #448]	; (800a2b4 <HAL_DMA_IRQHandler+0x6c8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_DMA_IRQHandler+0x516>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a6e      	ldr	r2, [pc, #440]	; (800a2b8 <HAL_DMA_IRQHandler+0x6cc>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d10a      	bne.n	800a118 <HAL_DMA_IRQHandler+0x52c>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e009      	b.n	800a12c <HAL_DMA_IRQHandler+0x540>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	2b00      	cmp	r3, #0
 800a124:	bf14      	ite	ne
 800a126:	2301      	movne	r3, #1
 800a128:	2300      	moveq	r3, #0
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d03e      	beq.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	2210      	movs	r2, #16
 800a13a:	409a      	lsls	r2, r3
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d018      	beq.n	800a180 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d024      	beq.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	4798      	blx	r3
 800a16c:	e01f      	b.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01b      	beq.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	4798      	blx	r3
 800a17e:	e016      	b.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d107      	bne.n	800a19e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0208 	bic.w	r2, r2, #8
 800a19c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b2:	f003 031f 	and.w	r3, r3, #31
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f000 8110 	beq.w	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a2c      	ldr	r2, [pc, #176]	; (800a27c <HAL_DMA_IRQHandler+0x690>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d04a      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a2b      	ldr	r2, [pc, #172]	; (800a280 <HAL_DMA_IRQHandler+0x694>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d045      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a29      	ldr	r2, [pc, #164]	; (800a284 <HAL_DMA_IRQHandler+0x698>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d040      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a28      	ldr	r2, [pc, #160]	; (800a288 <HAL_DMA_IRQHandler+0x69c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d03b      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a26      	ldr	r2, [pc, #152]	; (800a28c <HAL_DMA_IRQHandler+0x6a0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d036      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a25      	ldr	r2, [pc, #148]	; (800a290 <HAL_DMA_IRQHandler+0x6a4>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d031      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a23      	ldr	r2, [pc, #140]	; (800a294 <HAL_DMA_IRQHandler+0x6a8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d02c      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a22      	ldr	r2, [pc, #136]	; (800a298 <HAL_DMA_IRQHandler+0x6ac>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d027      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a20      	ldr	r2, [pc, #128]	; (800a29c <HAL_DMA_IRQHandler+0x6b0>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d022      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <HAL_DMA_IRQHandler+0x6b4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d01d      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a1d      	ldr	r2, [pc, #116]	; (800a2a4 <HAL_DMA_IRQHandler+0x6b8>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d018      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <HAL_DMA_IRQHandler+0x6bc>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d013      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1a      	ldr	r2, [pc, #104]	; (800a2ac <HAL_DMA_IRQHandler+0x6c0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00e      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a19      	ldr	r2, [pc, #100]	; (800a2b0 <HAL_DMA_IRQHandler+0x6c4>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d009      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a17      	ldr	r2, [pc, #92]	; (800a2b4 <HAL_DMA_IRQHandler+0x6c8>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d004      	beq.n	800a264 <HAL_DMA_IRQHandler+0x678>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a16      	ldr	r2, [pc, #88]	; (800a2b8 <HAL_DMA_IRQHandler+0x6cc>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d12b      	bne.n	800a2bc <HAL_DMA_IRQHandler+0x6d0>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0310 	and.w	r3, r3, #16
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bf14      	ite	ne
 800a272:	2301      	movne	r3, #1
 800a274:	2300      	moveq	r3, #0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	e02a      	b.n	800a2d0 <HAL_DMA_IRQHandler+0x6e4>
 800a27a:	bf00      	nop
 800a27c:	40020010 	.word	0x40020010
 800a280:	40020028 	.word	0x40020028
 800a284:	40020040 	.word	0x40020040
 800a288:	40020058 	.word	0x40020058
 800a28c:	40020070 	.word	0x40020070
 800a290:	40020088 	.word	0x40020088
 800a294:	400200a0 	.word	0x400200a0
 800a298:	400200b8 	.word	0x400200b8
 800a29c:	40020410 	.word	0x40020410
 800a2a0:	40020428 	.word	0x40020428
 800a2a4:	40020440 	.word	0x40020440
 800a2a8:	40020458 	.word	0x40020458
 800a2ac:	40020470 	.word	0x40020470
 800a2b0:	40020488 	.word	0x40020488
 800a2b4:	400204a0 	.word	0x400204a0
 800a2b8:	400204b8 	.word	0x400204b8
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	bf14      	ite	ne
 800a2ca:	2301      	movne	r3, #1
 800a2cc:	2300      	moveq	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 8087 	beq.w	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2da:	f003 031f 	and.w	r3, r3, #31
 800a2de:	2220      	movs	r2, #32
 800a2e0:	409a      	lsls	r2, r3
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d139      	bne.n	800a366 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0216 	bic.w	r2, r2, #22
 800a300:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	695a      	ldr	r2, [r3, #20]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a310:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <HAL_DMA_IRQHandler+0x736>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0208 	bic.w	r2, r2, #8
 800a330:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a336:	f003 031f 	and.w	r3, r3, #31
 800a33a:	223f      	movs	r2, #63	; 0x3f
 800a33c:	409a      	lsls	r2, r3
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 834a 	beq.w	800a9f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
          }
          return;
 800a364:	e344      	b.n	800a9f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d018      	beq.n	800a3a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d108      	bne.n	800a394 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02c      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
 800a392:	e027      	b.n	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d023      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	4798      	blx	r3
 800a3a4:	e01e      	b.n	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10f      	bne.n	800a3d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0210 	bic.w	r2, r2, #16
 800a3c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 8306 	beq.w	800a9fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 8088 	beq.w	800a50c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2204      	movs	r2, #4
 800a400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a7a      	ldr	r2, [pc, #488]	; (800a5f4 <HAL_DMA_IRQHandler+0xa08>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d04a      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a79      	ldr	r2, [pc, #484]	; (800a5f8 <HAL_DMA_IRQHandler+0xa0c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d045      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a77      	ldr	r2, [pc, #476]	; (800a5fc <HAL_DMA_IRQHandler+0xa10>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d040      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a76      	ldr	r2, [pc, #472]	; (800a600 <HAL_DMA_IRQHandler+0xa14>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d03b      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a74      	ldr	r2, [pc, #464]	; (800a604 <HAL_DMA_IRQHandler+0xa18>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d036      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a73      	ldr	r2, [pc, #460]	; (800a608 <HAL_DMA_IRQHandler+0xa1c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d031      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a71      	ldr	r2, [pc, #452]	; (800a60c <HAL_DMA_IRQHandler+0xa20>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d02c      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a70      	ldr	r2, [pc, #448]	; (800a610 <HAL_DMA_IRQHandler+0xa24>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d027      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a6e      	ldr	r2, [pc, #440]	; (800a614 <HAL_DMA_IRQHandler+0xa28>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d022      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a6d      	ldr	r2, [pc, #436]	; (800a618 <HAL_DMA_IRQHandler+0xa2c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d01d      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a6b      	ldr	r2, [pc, #428]	; (800a61c <HAL_DMA_IRQHandler+0xa30>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d018      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a6a      	ldr	r2, [pc, #424]	; (800a620 <HAL_DMA_IRQHandler+0xa34>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d013      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a68      	ldr	r2, [pc, #416]	; (800a624 <HAL_DMA_IRQHandler+0xa38>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00e      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a67      	ldr	r2, [pc, #412]	; (800a628 <HAL_DMA_IRQHandler+0xa3c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d009      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a65      	ldr	r2, [pc, #404]	; (800a62c <HAL_DMA_IRQHandler+0xa40>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x8b8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a64      	ldr	r2, [pc, #400]	; (800a630 <HAL_DMA_IRQHandler+0xa44>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d108      	bne.n	800a4b6 <HAL_DMA_IRQHandler+0x8ca>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0201 	bic.w	r2, r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e007      	b.n	800a4c6 <HAL_DMA_IRQHandler+0x8da>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0201 	bic.w	r2, r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d307      	bcc.n	800a4e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1f2      	bne.n	800a4c6 <HAL_DMA_IRQHandler+0x8da>
 800a4e0:	e000      	b.n	800a4e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a4e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a4fa:	e003      	b.n	800a504 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8272 	beq.w	800a9fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	4798      	blx	r3
 800a51e:	e26c      	b.n	800a9fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a43      	ldr	r2, [pc, #268]	; (800a634 <HAL_DMA_IRQHandler+0xa48>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d022      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a42      	ldr	r2, [pc, #264]	; (800a638 <HAL_DMA_IRQHandler+0xa4c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d01d      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a40      	ldr	r2, [pc, #256]	; (800a63c <HAL_DMA_IRQHandler+0xa50>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d018      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a3f      	ldr	r2, [pc, #252]	; (800a640 <HAL_DMA_IRQHandler+0xa54>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d013      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3d      	ldr	r2, [pc, #244]	; (800a644 <HAL_DMA_IRQHandler+0xa58>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00e      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a3c      	ldr	r2, [pc, #240]	; (800a648 <HAL_DMA_IRQHandler+0xa5c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d009      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a3a      	ldr	r2, [pc, #232]	; (800a64c <HAL_DMA_IRQHandler+0xa60>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d004      	beq.n	800a570 <HAL_DMA_IRQHandler+0x984>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a39      	ldr	r2, [pc, #228]	; (800a650 <HAL_DMA_IRQHandler+0xa64>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d101      	bne.n	800a574 <HAL_DMA_IRQHandler+0x988>
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <HAL_DMA_IRQHandler+0x98a>
 800a574:	2300      	movs	r3, #0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 823f 	beq.w	800a9fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a588:	f003 031f 	and.w	r3, r3, #31
 800a58c:	2204      	movs	r2, #4
 800a58e:	409a      	lsls	r2, r3
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	4013      	ands	r3, r2
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80cd 	beq.w	800a734 <HAL_DMA_IRQHandler+0xb48>
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80c7 	beq.w	800a734 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5aa:	f003 031f 	and.w	r3, r3, #31
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	409a      	lsls	r2, r3
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d049      	beq.n	800a654 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8210 	beq.w	800a9f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5dc:	e20a      	b.n	800a9f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8206 	beq.w	800a9f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5f0:	e200      	b.n	800a9f4 <HAL_DMA_IRQHandler+0xe08>
 800a5f2:	bf00      	nop
 800a5f4:	40020010 	.word	0x40020010
 800a5f8:	40020028 	.word	0x40020028
 800a5fc:	40020040 	.word	0x40020040
 800a600:	40020058 	.word	0x40020058
 800a604:	40020070 	.word	0x40020070
 800a608:	40020088 	.word	0x40020088
 800a60c:	400200a0 	.word	0x400200a0
 800a610:	400200b8 	.word	0x400200b8
 800a614:	40020410 	.word	0x40020410
 800a618:	40020428 	.word	0x40020428
 800a61c:	40020440 	.word	0x40020440
 800a620:	40020458 	.word	0x40020458
 800a624:	40020470 	.word	0x40020470
 800a628:	40020488 	.word	0x40020488
 800a62c:	400204a0 	.word	0x400204a0
 800a630:	400204b8 	.word	0x400204b8
 800a634:	58025408 	.word	0x58025408
 800a638:	5802541c 	.word	0x5802541c
 800a63c:	58025430 	.word	0x58025430
 800a640:	58025444 	.word	0x58025444
 800a644:	58025458 	.word	0x58025458
 800a648:	5802546c 	.word	0x5802546c
 800a64c:	58025480 	.word	0x58025480
 800a650:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d160      	bne.n	800a720 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a7f      	ldr	r2, [pc, #508]	; (800a860 <HAL_DMA_IRQHandler+0xc74>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d04a      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a7d      	ldr	r2, [pc, #500]	; (800a864 <HAL_DMA_IRQHandler+0xc78>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d045      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a7c      	ldr	r2, [pc, #496]	; (800a868 <HAL_DMA_IRQHandler+0xc7c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d040      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a7a      	ldr	r2, [pc, #488]	; (800a86c <HAL_DMA_IRQHandler+0xc80>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d03b      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a79      	ldr	r2, [pc, #484]	; (800a870 <HAL_DMA_IRQHandler+0xc84>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d036      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a77      	ldr	r2, [pc, #476]	; (800a874 <HAL_DMA_IRQHandler+0xc88>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d031      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a76      	ldr	r2, [pc, #472]	; (800a878 <HAL_DMA_IRQHandler+0xc8c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d02c      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a74      	ldr	r2, [pc, #464]	; (800a87c <HAL_DMA_IRQHandler+0xc90>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d027      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a73      	ldr	r2, [pc, #460]	; (800a880 <HAL_DMA_IRQHandler+0xc94>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d022      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a71      	ldr	r2, [pc, #452]	; (800a884 <HAL_DMA_IRQHandler+0xc98>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d01d      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a70      	ldr	r2, [pc, #448]	; (800a888 <HAL_DMA_IRQHandler+0xc9c>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d018      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a6e      	ldr	r2, [pc, #440]	; (800a88c <HAL_DMA_IRQHandler+0xca0>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d013      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a6d      	ldr	r2, [pc, #436]	; (800a890 <HAL_DMA_IRQHandler+0xca4>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d00e      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a6b      	ldr	r2, [pc, #428]	; (800a894 <HAL_DMA_IRQHandler+0xca8>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d009      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a6a      	ldr	r2, [pc, #424]	; (800a898 <HAL_DMA_IRQHandler+0xcac>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d004      	beq.n	800a6fe <HAL_DMA_IRQHandler+0xb12>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a68      	ldr	r2, [pc, #416]	; (800a89c <HAL_DMA_IRQHandler+0xcb0>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d108      	bne.n	800a710 <HAL_DMA_IRQHandler+0xb24>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 0208 	bic.w	r2, r2, #8
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e007      	b.n	800a720 <HAL_DMA_IRQHandler+0xb34>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0204 	bic.w	r2, r2, #4
 800a71e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8165 	beq.w	800a9f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a732:	e15f      	b.n	800a9f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a738:	f003 031f 	and.w	r3, r3, #31
 800a73c:	2202      	movs	r2, #2
 800a73e:	409a      	lsls	r2, r3
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	4013      	ands	r3, r2
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 80c5 	beq.w	800a8d4 <HAL_DMA_IRQHandler+0xce8>
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80bf 	beq.w	800a8d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75a:	f003 031f 	and.w	r3, r3, #31
 800a75e:	2202      	movs	r2, #2
 800a760:	409a      	lsls	r2, r3
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d018      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d109      	bne.n	800a78e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 813a 	beq.w	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a78c:	e134      	b.n	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 8130 	beq.w	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7a0:	e12a      	b.n	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f003 0320 	and.w	r3, r3, #32
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f040 8089 	bne.w	800a8c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a2b      	ldr	r2, [pc, #172]	; (800a860 <HAL_DMA_IRQHandler+0xc74>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d04a      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a29      	ldr	r2, [pc, #164]	; (800a864 <HAL_DMA_IRQHandler+0xc78>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d045      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a28      	ldr	r2, [pc, #160]	; (800a868 <HAL_DMA_IRQHandler+0xc7c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d040      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a26      	ldr	r2, [pc, #152]	; (800a86c <HAL_DMA_IRQHandler+0xc80>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d03b      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a25      	ldr	r2, [pc, #148]	; (800a870 <HAL_DMA_IRQHandler+0xc84>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d036      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a23      	ldr	r2, [pc, #140]	; (800a874 <HAL_DMA_IRQHandler+0xc88>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d031      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a22      	ldr	r2, [pc, #136]	; (800a878 <HAL_DMA_IRQHandler+0xc8c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d02c      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a20      	ldr	r2, [pc, #128]	; (800a87c <HAL_DMA_IRQHandler+0xc90>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d027      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <HAL_DMA_IRQHandler+0xc94>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d022      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <HAL_DMA_IRQHandler+0xc98>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d01d      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a1c      	ldr	r2, [pc, #112]	; (800a888 <HAL_DMA_IRQHandler+0xc9c>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d018      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a1a      	ldr	r2, [pc, #104]	; (800a88c <HAL_DMA_IRQHandler+0xca0>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a19      	ldr	r2, [pc, #100]	; (800a890 <HAL_DMA_IRQHandler+0xca4>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00e      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a17      	ldr	r2, [pc, #92]	; (800a894 <HAL_DMA_IRQHandler+0xca8>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d009      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <HAL_DMA_IRQHandler+0xcac>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d004      	beq.n	800a84e <HAL_DMA_IRQHandler+0xc62>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a14      	ldr	r2, [pc, #80]	; (800a89c <HAL_DMA_IRQHandler+0xcb0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d128      	bne.n	800a8a0 <HAL_DMA_IRQHandler+0xcb4>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0214 	bic.w	r2, r2, #20
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e027      	b.n	800a8b0 <HAL_DMA_IRQHandler+0xcc4>
 800a860:	40020010 	.word	0x40020010
 800a864:	40020028 	.word	0x40020028
 800a868:	40020040 	.word	0x40020040
 800a86c:	40020058 	.word	0x40020058
 800a870:	40020070 	.word	0x40020070
 800a874:	40020088 	.word	0x40020088
 800a878:	400200a0 	.word	0x400200a0
 800a87c:	400200b8 	.word	0x400200b8
 800a880:	40020410 	.word	0x40020410
 800a884:	40020428 	.word	0x40020428
 800a888:	40020440 	.word	0x40020440
 800a88c:	40020458 	.word	0x40020458
 800a890:	40020470 	.word	0x40020470
 800a894:	40020488 	.word	0x40020488
 800a898:	400204a0 	.word	0x400204a0
 800a89c:	400204b8 	.word	0x400204b8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 020a 	bic.w	r2, r2, #10
 800a8ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 8097 	beq.w	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a8d2:	e091      	b.n	800a9f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d8:	f003 031f 	and.w	r3, r3, #31
 800a8dc:	2208      	movs	r2, #8
 800a8de:	409a      	lsls	r2, r3
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 8088 	beq.w	800a9fa <HAL_DMA_IRQHandler+0xe0e>
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f003 0308 	and.w	r3, r3, #8
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8082 	beq.w	800a9fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a41      	ldr	r2, [pc, #260]	; (800aa00 <HAL_DMA_IRQHandler+0xe14>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d04a      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a3f      	ldr	r2, [pc, #252]	; (800aa04 <HAL_DMA_IRQHandler+0xe18>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d045      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a3e      	ldr	r2, [pc, #248]	; (800aa08 <HAL_DMA_IRQHandler+0xe1c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d040      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a3c      	ldr	r2, [pc, #240]	; (800aa0c <HAL_DMA_IRQHandler+0xe20>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d03b      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a3b      	ldr	r2, [pc, #236]	; (800aa10 <HAL_DMA_IRQHandler+0xe24>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d036      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a39      	ldr	r2, [pc, #228]	; (800aa14 <HAL_DMA_IRQHandler+0xe28>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d031      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a38      	ldr	r2, [pc, #224]	; (800aa18 <HAL_DMA_IRQHandler+0xe2c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d02c      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a36      	ldr	r2, [pc, #216]	; (800aa1c <HAL_DMA_IRQHandler+0xe30>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d027      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a35      	ldr	r2, [pc, #212]	; (800aa20 <HAL_DMA_IRQHandler+0xe34>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d022      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a33      	ldr	r2, [pc, #204]	; (800aa24 <HAL_DMA_IRQHandler+0xe38>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01d      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a32      	ldr	r2, [pc, #200]	; (800aa28 <HAL_DMA_IRQHandler+0xe3c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d018      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a30      	ldr	r2, [pc, #192]	; (800aa2c <HAL_DMA_IRQHandler+0xe40>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d013      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a2f      	ldr	r2, [pc, #188]	; (800aa30 <HAL_DMA_IRQHandler+0xe44>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d00e      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a2d      	ldr	r2, [pc, #180]	; (800aa34 <HAL_DMA_IRQHandler+0xe48>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d009      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a2c      	ldr	r2, [pc, #176]	; (800aa38 <HAL_DMA_IRQHandler+0xe4c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d004      	beq.n	800a996 <HAL_DMA_IRQHandler+0xdaa>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a2a      	ldr	r2, [pc, #168]	; (800aa3c <HAL_DMA_IRQHandler+0xe50>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d108      	bne.n	800a9a8 <HAL_DMA_IRQHandler+0xdbc>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 021c 	bic.w	r2, r2, #28
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	e007      	b.n	800a9b8 <HAL_DMA_IRQHandler+0xdcc>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 020e 	bic.w	r2, r2, #14
 800a9b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9bc:	f003 031f 	and.w	r3, r3, #31
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	409a      	lsls	r2, r3
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d009      	beq.n	800a9fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
 800a9ee:	e004      	b.n	800a9fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a9f0:	bf00      	nop
 800a9f2:	e002      	b.n	800a9fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a9fa:	3728      	adds	r7, #40	; 0x28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	40020010 	.word	0x40020010
 800aa04:	40020028 	.word	0x40020028
 800aa08:	40020040 	.word	0x40020040
 800aa0c:	40020058 	.word	0x40020058
 800aa10:	40020070 	.word	0x40020070
 800aa14:	40020088 	.word	0x40020088
 800aa18:	400200a0 	.word	0x400200a0
 800aa1c:	400200b8 	.word	0x400200b8
 800aa20:	40020410 	.word	0x40020410
 800aa24:	40020428 	.word	0x40020428
 800aa28:	40020440 	.word	0x40020440
 800aa2c:	40020458 	.word	0x40020458
 800aa30:	40020470 	.word	0x40020470
 800aa34:	40020488 	.word	0x40020488
 800aa38:	400204a0 	.word	0x400204a0
 800aa3c:	400204b8 	.word	0x400204b8

0800aa40 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa4e:	b2db      	uxtb	r3, r3
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a7f      	ldr	r2, [pc, #508]	; (800ac90 <DMA_SetConfig+0x21c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d072      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a7d      	ldr	r2, [pc, #500]	; (800ac94 <DMA_SetConfig+0x220>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d06d      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a7c      	ldr	r2, [pc, #496]	; (800ac98 <DMA_SetConfig+0x224>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d068      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a7a      	ldr	r2, [pc, #488]	; (800ac9c <DMA_SetConfig+0x228>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d063      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a79      	ldr	r2, [pc, #484]	; (800aca0 <DMA_SetConfig+0x22c>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d05e      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a77      	ldr	r2, [pc, #476]	; (800aca4 <DMA_SetConfig+0x230>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d059      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a76      	ldr	r2, [pc, #472]	; (800aca8 <DMA_SetConfig+0x234>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d054      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a74      	ldr	r2, [pc, #464]	; (800acac <DMA_SetConfig+0x238>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d04f      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a73      	ldr	r2, [pc, #460]	; (800acb0 <DMA_SetConfig+0x23c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d04a      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a71      	ldr	r2, [pc, #452]	; (800acb4 <DMA_SetConfig+0x240>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d045      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a70      	ldr	r2, [pc, #448]	; (800acb8 <DMA_SetConfig+0x244>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d040      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a6e      	ldr	r2, [pc, #440]	; (800acbc <DMA_SetConfig+0x248>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d03b      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a6d      	ldr	r2, [pc, #436]	; (800acc0 <DMA_SetConfig+0x24c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d036      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a6b      	ldr	r2, [pc, #428]	; (800acc4 <DMA_SetConfig+0x250>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d031      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a6a      	ldr	r2, [pc, #424]	; (800acc8 <DMA_SetConfig+0x254>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d02c      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a68      	ldr	r2, [pc, #416]	; (800accc <DMA_SetConfig+0x258>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d027      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a67      	ldr	r2, [pc, #412]	; (800acd0 <DMA_SetConfig+0x25c>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d022      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a65      	ldr	r2, [pc, #404]	; (800acd4 <DMA_SetConfig+0x260>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01d      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a64      	ldr	r2, [pc, #400]	; (800acd8 <DMA_SetConfig+0x264>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d018      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a62      	ldr	r2, [pc, #392]	; (800acdc <DMA_SetConfig+0x268>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d013      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a61      	ldr	r2, [pc, #388]	; (800ace0 <DMA_SetConfig+0x26c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d00e      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a5f      	ldr	r2, [pc, #380]	; (800ace4 <DMA_SetConfig+0x270>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d009      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a5e      	ldr	r2, [pc, #376]	; (800ace8 <DMA_SetConfig+0x274>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d004      	beq.n	800ab7e <DMA_SetConfig+0x10a>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a5c      	ldr	r2, [pc, #368]	; (800acec <DMA_SetConfig+0x278>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d101      	bne.n	800ab82 <DMA_SetConfig+0x10e>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e000      	b.n	800ab84 <DMA_SetConfig+0x110>
 800ab82:	2300      	movs	r3, #0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00d      	beq.n	800aba4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ab90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d004      	beq.n	800aba4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aba2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a39      	ldr	r2, [pc, #228]	; (800ac90 <DMA_SetConfig+0x21c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d04a      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a38      	ldr	r2, [pc, #224]	; (800ac94 <DMA_SetConfig+0x220>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d045      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a36      	ldr	r2, [pc, #216]	; (800ac98 <DMA_SetConfig+0x224>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d040      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a35      	ldr	r2, [pc, #212]	; (800ac9c <DMA_SetConfig+0x228>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d03b      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a33      	ldr	r2, [pc, #204]	; (800aca0 <DMA_SetConfig+0x22c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d036      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a32      	ldr	r2, [pc, #200]	; (800aca4 <DMA_SetConfig+0x230>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d031      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a30      	ldr	r2, [pc, #192]	; (800aca8 <DMA_SetConfig+0x234>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d02c      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a2f      	ldr	r2, [pc, #188]	; (800acac <DMA_SetConfig+0x238>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d027      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a2d      	ldr	r2, [pc, #180]	; (800acb0 <DMA_SetConfig+0x23c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d022      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a2c      	ldr	r2, [pc, #176]	; (800acb4 <DMA_SetConfig+0x240>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d01d      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a2a      	ldr	r2, [pc, #168]	; (800acb8 <DMA_SetConfig+0x244>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d018      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a29      	ldr	r2, [pc, #164]	; (800acbc <DMA_SetConfig+0x248>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <DMA_SetConfig+0x24c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00e      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a26      	ldr	r2, [pc, #152]	; (800acc4 <DMA_SetConfig+0x250>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d009      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a24      	ldr	r2, [pc, #144]	; (800acc8 <DMA_SetConfig+0x254>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d004      	beq.n	800ac44 <DMA_SetConfig+0x1d0>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a23      	ldr	r2, [pc, #140]	; (800accc <DMA_SetConfig+0x258>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d101      	bne.n	800ac48 <DMA_SetConfig+0x1d4>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <DMA_SetConfig+0x1d6>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d059      	beq.n	800ad02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	223f      	movs	r2, #63	; 0x3f
 800ac58:	409a      	lsls	r2, r3
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b40      	cmp	r3, #64	; 0x40
 800ac7c:	d138      	bne.n	800acf0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ac8e:	e086      	b.n	800ad9e <DMA_SetConfig+0x32a>
 800ac90:	40020010 	.word	0x40020010
 800ac94:	40020028 	.word	0x40020028
 800ac98:	40020040 	.word	0x40020040
 800ac9c:	40020058 	.word	0x40020058
 800aca0:	40020070 	.word	0x40020070
 800aca4:	40020088 	.word	0x40020088
 800aca8:	400200a0 	.word	0x400200a0
 800acac:	400200b8 	.word	0x400200b8
 800acb0:	40020410 	.word	0x40020410
 800acb4:	40020428 	.word	0x40020428
 800acb8:	40020440 	.word	0x40020440
 800acbc:	40020458 	.word	0x40020458
 800acc0:	40020470 	.word	0x40020470
 800acc4:	40020488 	.word	0x40020488
 800acc8:	400204a0 	.word	0x400204a0
 800accc:	400204b8 	.word	0x400204b8
 800acd0:	58025408 	.word	0x58025408
 800acd4:	5802541c 	.word	0x5802541c
 800acd8:	58025430 	.word	0x58025430
 800acdc:	58025444 	.word	0x58025444
 800ace0:	58025458 	.word	0x58025458
 800ace4:	5802546c 	.word	0x5802546c
 800ace8:	58025480 	.word	0x58025480
 800acec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	60da      	str	r2, [r3, #12]
}
 800ad00:	e04d      	b.n	800ad9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a29      	ldr	r2, [pc, #164]	; (800adac <DMA_SetConfig+0x338>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d022      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a27      	ldr	r2, [pc, #156]	; (800adb0 <DMA_SetConfig+0x33c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d01d      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a26      	ldr	r2, [pc, #152]	; (800adb4 <DMA_SetConfig+0x340>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d018      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a24      	ldr	r2, [pc, #144]	; (800adb8 <DMA_SetConfig+0x344>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d013      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a23      	ldr	r2, [pc, #140]	; (800adbc <DMA_SetConfig+0x348>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00e      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <DMA_SetConfig+0x34c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d009      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a20      	ldr	r2, [pc, #128]	; (800adc4 <DMA_SetConfig+0x350>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d004      	beq.n	800ad52 <DMA_SetConfig+0x2de>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <DMA_SetConfig+0x354>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d101      	bne.n	800ad56 <DMA_SetConfig+0x2e2>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <DMA_SetConfig+0x2e4>
 800ad56:	2300      	movs	r3, #0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d020      	beq.n	800ad9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad60:	f003 031f 	and.w	r3, r3, #31
 800ad64:	2201      	movs	r2, #1
 800ad66:	409a      	lsls	r2, r3
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	2b40      	cmp	r3, #64	; 0x40
 800ad7a:	d108      	bne.n	800ad8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	60da      	str	r2, [r3, #12]
}
 800ad8c:	e007      	b.n	800ad9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	60da      	str	r2, [r3, #12]
}
 800ad9e:	bf00      	nop
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	58025408 	.word	0x58025408
 800adb0:	5802541c 	.word	0x5802541c
 800adb4:	58025430 	.word	0x58025430
 800adb8:	58025444 	.word	0x58025444
 800adbc:	58025458 	.word	0x58025458
 800adc0:	5802546c 	.word	0x5802546c
 800adc4:	58025480 	.word	0x58025480
 800adc8:	58025494 	.word	0x58025494

0800adcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a42      	ldr	r2, [pc, #264]	; (800aee4 <DMA_CalcBaseAndBitshift+0x118>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d04a      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a41      	ldr	r2, [pc, #260]	; (800aee8 <DMA_CalcBaseAndBitshift+0x11c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d045      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a3f      	ldr	r2, [pc, #252]	; (800aeec <DMA_CalcBaseAndBitshift+0x120>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d040      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a3e      	ldr	r2, [pc, #248]	; (800aef0 <DMA_CalcBaseAndBitshift+0x124>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d03b      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a3c      	ldr	r2, [pc, #240]	; (800aef4 <DMA_CalcBaseAndBitshift+0x128>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d036      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a3b      	ldr	r2, [pc, #236]	; (800aef8 <DMA_CalcBaseAndBitshift+0x12c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d031      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a39      	ldr	r2, [pc, #228]	; (800aefc <DMA_CalcBaseAndBitshift+0x130>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d02c      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a38      	ldr	r2, [pc, #224]	; (800af00 <DMA_CalcBaseAndBitshift+0x134>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d027      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a36      	ldr	r2, [pc, #216]	; (800af04 <DMA_CalcBaseAndBitshift+0x138>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d022      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a35      	ldr	r2, [pc, #212]	; (800af08 <DMA_CalcBaseAndBitshift+0x13c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d01d      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a33      	ldr	r2, [pc, #204]	; (800af0c <DMA_CalcBaseAndBitshift+0x140>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d018      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a32      	ldr	r2, [pc, #200]	; (800af10 <DMA_CalcBaseAndBitshift+0x144>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d013      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a30      	ldr	r2, [pc, #192]	; (800af14 <DMA_CalcBaseAndBitshift+0x148>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00e      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a2f      	ldr	r2, [pc, #188]	; (800af18 <DMA_CalcBaseAndBitshift+0x14c>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d009      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a2d      	ldr	r2, [pc, #180]	; (800af1c <DMA_CalcBaseAndBitshift+0x150>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <DMA_CalcBaseAndBitshift+0xa8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a2c      	ldr	r2, [pc, #176]	; (800af20 <DMA_CalcBaseAndBitshift+0x154>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d101      	bne.n	800ae78 <DMA_CalcBaseAndBitshift+0xac>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <DMA_CalcBaseAndBitshift+0xae>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d024      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	3b10      	subs	r3, #16
 800ae86:	4a27      	ldr	r2, [pc, #156]	; (800af24 <DMA_CalcBaseAndBitshift+0x158>)
 800ae88:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8c:	091b      	lsrs	r3, r3, #4
 800ae8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	4a24      	ldr	r2, [pc, #144]	; (800af28 <DMA_CalcBaseAndBitshift+0x15c>)
 800ae98:	5cd3      	ldrb	r3, [r2, r3]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d908      	bls.n	800aeb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <DMA_CalcBaseAndBitshift+0x160>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	659a      	str	r2, [r3, #88]	; 0x58
 800aeb6:	e00d      	b.n	800aed4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <DMA_CalcBaseAndBitshift+0x160>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6593      	str	r3, [r2, #88]	; 0x58
 800aec6:	e005      	b.n	800aed4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	40020010 	.word	0x40020010
 800aee8:	40020028 	.word	0x40020028
 800aeec:	40020040 	.word	0x40020040
 800aef0:	40020058 	.word	0x40020058
 800aef4:	40020070 	.word	0x40020070
 800aef8:	40020088 	.word	0x40020088
 800aefc:	400200a0 	.word	0x400200a0
 800af00:	400200b8 	.word	0x400200b8
 800af04:	40020410 	.word	0x40020410
 800af08:	40020428 	.word	0x40020428
 800af0c:	40020440 	.word	0x40020440
 800af10:	40020458 	.word	0x40020458
 800af14:	40020470 	.word	0x40020470
 800af18:	40020488 	.word	0x40020488
 800af1c:	400204a0 	.word	0x400204a0
 800af20:	400204b8 	.word	0x400204b8
 800af24:	aaaaaaab 	.word	0xaaaaaaab
 800af28:	0801b914 	.word	0x0801b914
 800af2c:	fffffc00 	.word	0xfffffc00

0800af30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d120      	bne.n	800af86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d858      	bhi.n	800affe <DMA_CheckFifoParam+0xce>
 800af4c:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <DMA_CheckFifoParam+0x24>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800af65 	.word	0x0800af65
 800af58:	0800af77 	.word	0x0800af77
 800af5c:	0800af65 	.word	0x0800af65
 800af60:	0800afff 	.word	0x0800afff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d048      	beq.n	800b002 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800af74:	e045      	b.n	800b002 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af7e:	d142      	bne.n	800b006 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800af84:	e03f      	b.n	800b006 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af8e:	d123      	bne.n	800afd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af94:	2b03      	cmp	r3, #3
 800af96:	d838      	bhi.n	800b00a <DMA_CheckFifoParam+0xda>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <DMA_CheckFifoParam+0x70>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800afb1 	.word	0x0800afb1
 800afa4:	0800afb7 	.word	0x0800afb7
 800afa8:	0800afb1 	.word	0x0800afb1
 800afac:	0800afc9 	.word	0x0800afc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
        break;
 800afb4:	e030      	b.n	800b018 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d025      	beq.n	800b00e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afc6:	e022      	b.n	800b00e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afd0:	d11f      	bne.n	800b012 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afd6:	e01c      	b.n	800b012 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d902      	bls.n	800afe6 <DMA_CheckFifoParam+0xb6>
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d003      	beq.n	800afec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800afe4:	e018      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	73fb      	strb	r3, [r7, #15]
        break;
 800afea:	e015      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00e      	beq.n	800b016 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
    break;
 800affc:	e00b      	b.n	800b016 <DMA_CheckFifoParam+0xe6>
        break;
 800affe:	bf00      	nop
 800b000:	e00a      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        break;
 800b002:	bf00      	nop
 800b004:	e008      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        break;
 800b006:	bf00      	nop
 800b008:	e006      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        break;
 800b00a:	bf00      	nop
 800b00c:	e004      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        break;
 800b00e:	bf00      	nop
 800b010:	e002      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
        break;
 800b012:	bf00      	nop
 800b014:	e000      	b.n	800b018 <DMA_CheckFifoParam+0xe8>
    break;
 800b016:	bf00      	nop
    }
  }

  return status;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a38      	ldr	r2, [pc, #224]	; (800b11c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d022      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a36      	ldr	r2, [pc, #216]	; (800b120 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d01d      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a35      	ldr	r2, [pc, #212]	; (800b124 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d018      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a33      	ldr	r2, [pc, #204]	; (800b128 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d013      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a32      	ldr	r2, [pc, #200]	; (800b12c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00e      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a30      	ldr	r2, [pc, #192]	; (800b130 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d009      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a2f      	ldr	r2, [pc, #188]	; (800b134 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d004      	beq.n	800b086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a2d      	ldr	r2, [pc, #180]	; (800b138 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d101      	bne.n	800b08a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b08a:	2300      	movs	r3, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01a      	beq.n	800b0c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	b2db      	uxtb	r3, r3
 800b096:	3b08      	subs	r3, #8
 800b098:	4a28      	ldr	r2, [pc, #160]	; (800b13c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b09a:	fba2 2303 	umull	r2, r3, r2, r3
 800b09e:	091b      	lsrs	r3, r3, #4
 800b0a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4b26      	ldr	r3, [pc, #152]	; (800b140 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a24      	ldr	r2, [pc, #144]	; (800b144 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b0b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f003 031f 	and.w	r3, r3, #31
 800b0bc:	2201      	movs	r2, #1
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b0c4:	e024      	b.n	800b110 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	3b10      	subs	r3, #16
 800b0ce:	4a1e      	ldr	r2, [pc, #120]	; (800b148 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d4:	091b      	lsrs	r3, r3, #4
 800b0d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4a1c      	ldr	r2, [pc, #112]	; (800b14c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d806      	bhi.n	800b0ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4a1b      	ldr	r2, [pc, #108]	; (800b150 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d902      	bls.n	800b0ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4b18      	ldr	r3, [pc, #96]	; (800b154 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a16      	ldr	r2, [pc, #88]	; (800b158 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b100:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f003 031f 	and.w	r3, r3, #31
 800b108:	2201      	movs	r2, #1
 800b10a:	409a      	lsls	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b110:	bf00      	nop
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	58025408 	.word	0x58025408
 800b120:	5802541c 	.word	0x5802541c
 800b124:	58025430 	.word	0x58025430
 800b128:	58025444 	.word	0x58025444
 800b12c:	58025458 	.word	0x58025458
 800b130:	5802546c 	.word	0x5802546c
 800b134:	58025480 	.word	0x58025480
 800b138:	58025494 	.word	0x58025494
 800b13c:	cccccccd 	.word	0xcccccccd
 800b140:	16009600 	.word	0x16009600
 800b144:	58025880 	.word	0x58025880
 800b148:	aaaaaaab 	.word	0xaaaaaaab
 800b14c:	400204b8 	.word	0x400204b8
 800b150:	4002040f 	.word	0x4002040f
 800b154:	10008200 	.word	0x10008200
 800b158:	40020880 	.word	0x40020880

0800b15c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d04a      	beq.n	800b208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d847      	bhi.n	800b208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a25      	ldr	r2, [pc, #148]	; (800b214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d022      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a24      	ldr	r2, [pc, #144]	; (800b218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d01d      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a22      	ldr	r2, [pc, #136]	; (800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d018      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a21      	ldr	r2, [pc, #132]	; (800b220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d013      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00e      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	; (800b228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d009      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1c      	ldr	r2, [pc, #112]	; (800b22c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a1b      	ldr	r2, [pc, #108]	; (800b230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d101      	bne.n	800b1cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00a      	beq.n	800b1e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4b17      	ldr	r3, [pc, #92]	; (800b234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	461a      	mov	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	; (800b238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b1e4:	671a      	str	r2, [r3, #112]	; 0x70
 800b1e6:	e009      	b.n	800b1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4b14      	ldr	r3, [pc, #80]	; (800b23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a11      	ldr	r2, [pc, #68]	; (800b240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b1fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	2201      	movs	r2, #1
 800b202:	409a      	lsls	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b208:	bf00      	nop
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	58025408 	.word	0x58025408
 800b218:	5802541c 	.word	0x5802541c
 800b21c:	58025430 	.word	0x58025430
 800b220:	58025444 	.word	0x58025444
 800b224:	58025458 	.word	0x58025458
 800b228:	5802546c 	.word	0x5802546c
 800b22c:	58025480 	.word	0x58025480
 800b230:	58025494 	.word	0x58025494
 800b234:	1600963f 	.word	0x1600963f
 800b238:	58025940 	.word	0x58025940
 800b23c:	1000823f 	.word	0x1000823f
 800b240:	40020940 	.word	0x40020940

0800b244 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	; 0x28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800b258:	2308      	movs	r3, #8
 800b25a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b25c:	4b40      	ldr	r3, [pc, #256]	; (800b360 <HAL_FLASH_Program+0x11c>)
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_FLASH_Program+0x24>
 800b264:	2302      	movs	r3, #2
 800b266:	e076      	b.n	800b356 <HAL_FLASH_Program+0x112>
 800b268:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <HAL_FLASH_Program+0x11c>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b274:	d306      	bcc.n	800b284 <HAL_FLASH_Program+0x40>
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b27c:	d202      	bcs.n	800b284 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800b27e:	2301      	movs	r3, #1
 800b280:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800b282:	e00c      	b.n	800b29e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b28a:	d306      	bcc.n	800b29a <HAL_FLASH_Program+0x56>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800b292:	d202      	bcs.n	800b29a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800b294:	2302      	movs	r3, #2
 800b296:	61bb      	str	r3, [r7, #24]
 800b298:	e001      	b.n	800b29e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e05b      	b.n	800b356 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b29e:	4b30      	ldr	r3, [pc, #192]	; (800b360 <HAL_FLASH_Program+0x11c>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2aa:	f000 f897 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800b2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d147      	bne.n	800b34c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d106      	bne.n	800b2d0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800b2c2:	4b28      	ldr	r3, [pc, #160]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	4a27      	ldr	r2, [pc, #156]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b2c8:	f043 0302 	orr.w	r3, r3, #2
 800b2cc:	60d3      	str	r3, [r2, #12]
 800b2ce:	e007      	b.n	800b2e0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800b2d0:	4b24      	ldr	r3, [pc, #144]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b2d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b2d6:	4a23      	ldr	r2, [pc, #140]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b2d8:	f043 0302 	orr.w	r3, r3, #2
 800b2dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800b2e0:	f3bf 8f6f 	isb	sy
}
 800b2e4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b2e6:	f3bf 8f4f 	dsb	sy
}
 800b2ea:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	623b      	str	r3, [r7, #32]
        src_addr++;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	61fb      	str	r3, [r7, #28]
        row_index--;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	3b01      	subs	r3, #1
 800b304:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1ef      	bne.n	800b2ec <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800b30c:	f3bf 8f6f 	isb	sy
}
 800b310:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b312:	f3bf 8f4f 	dsb	sy
}
 800b316:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b318:	69b9      	ldr	r1, [r7, #24]
 800b31a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b31e:	f000 f85d 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d106      	bne.n	800b33c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800b32e:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4a0c      	ldr	r2, [pc, #48]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b334:	f023 0302 	bic.w	r3, r3, #2
 800b338:	60d3      	str	r3, [r2, #12]
 800b33a:	e007      	b.n	800b34c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b33e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b342:	4a08      	ldr	r2, [pc, #32]	; (800b364 <HAL_FLASH_Program+0x120>)
 800b344:	f023 0302 	bic.w	r3, r3, #2
 800b348:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <HAL_FLASH_Program+0x11c>)
 800b34e:	2200      	movs	r2, #0
 800b350:	751a      	strb	r2, [r3, #20]

  return status;
 800b352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b356:	4618      	mov	r0, r3
 800b358:	3728      	adds	r7, #40	; 0x28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2400206c 	.word	0x2400206c
 800b364:	52002000 	.word	0x52002000

0800b368 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800b36c:	4b18      	ldr	r3, [pc, #96]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00d      	beq.n	800b394 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800b378:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b37a:	4a16      	ldr	r2, [pc, #88]	; (800b3d4 <HAL_FLASH_Unlock+0x6c>)
 800b37c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800b37e:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b380:	4a15      	ldr	r2, [pc, #84]	; (800b3d8 <HAL_FLASH_Unlock+0x70>)
 800b382:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800b384:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e018      	b.n	800b3c6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800b394:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b396:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d010      	beq.n	800b3c4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b3a4:	4a0b      	ldr	r2, [pc, #44]	; (800b3d4 <HAL_FLASH_Unlock+0x6c>)
 800b3a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b3ac:	4a0a      	ldr	r2, [pc, #40]	; (800b3d8 <HAL_FLASH_Unlock+0x70>)
 800b3ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800b3b2:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <HAL_FLASH_Unlock+0x68>)
 800b3b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e000      	b.n	800b3c6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	52002000 	.word	0x52002000
 800b3d4:	45670123 	.word	0x45670123
 800b3d8:	cdef89ab 	.word	0xcdef89ab

0800b3dc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800b3e6:	2304      	movs	r3, #4
 800b3e8:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800b3ee:	f7fa ffab 	bl	8006348 <HAL_GetTick>
 800b3f2:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d113      	bne.n	800b422 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800b3fa:	4b41      	ldr	r3, [pc, #260]	; (800b500 <FLASH_WaitForLastOperation+0x124>)
 800b3fc:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b3fe:	e010      	b.n	800b422 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b406:	d00c      	beq.n	800b422 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b408:	f7fa ff9e 	bl	8006348 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d302      	bcc.n	800b41e <FLASH_WaitForLastOperation+0x42>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b41e:	2303      	movs	r3, #3
 800b420:	e06a      	b.n	800b4f8 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	4b37      	ldr	r3, [pc, #220]	; (800b504 <FLASH_WaitForLastOperation+0x128>)
 800b426:	4013      	ands	r3, r2
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d10a      	bne.n	800b444 <FLASH_WaitForLastOperation+0x68>
 800b42e:	4b36      	ldr	r3, [pc, #216]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b430:	691a      	ldr	r2, [r3, #16]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4013      	ands	r3, r2
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	429a      	cmp	r2, r3
 800b43a:	bf0c      	ite	eq
 800b43c:	2301      	moveq	r3, #1
 800b43e:	2300      	movne	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	e00c      	b.n	800b45e <FLASH_WaitForLastOperation+0x82>
 800b444:	4b30      	ldr	r3, [pc, #192]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b446:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b44a:	43da      	mvns	r2, r3
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	4013      	ands	r3, r2
 800b450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b454:	2b00      	cmp	r3, #0
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1ce      	bne.n	800b400 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d105      	bne.n	800b474 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b468:	4b27      	ldr	r3, [pc, #156]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b46a:	691a      	ldr	r2, [r3, #16]
 800b46c:	4b27      	ldr	r3, [pc, #156]	; (800b50c <FLASH_WaitForLastOperation+0x130>)
 800b46e:	4013      	ands	r3, r2
 800b470:	613b      	str	r3, [r7, #16]
 800b472:	e007      	b.n	800b484 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b474:	4b24      	ldr	r3, [pc, #144]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b476:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <FLASH_WaitForLastOperation+0x130>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b482:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d017      	beq.n	800b4be <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b48e:	4b20      	ldr	r3, [pc, #128]	; (800b510 <FLASH_WaitForLastOperation+0x134>)
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	4313      	orrs	r3, r2
 800b496:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <FLASH_WaitForLastOperation+0x134>)
 800b498:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	4b19      	ldr	r3, [pc, #100]	; (800b504 <FLASH_WaitForLastOperation+0x128>)
 800b49e:	4013      	ands	r3, r2
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d103      	bne.n	800b4ae <FLASH_WaitForLastOperation+0xd2>
 800b4a6:	4a18      	ldr	r2, [pc, #96]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	6153      	str	r3, [r2, #20]
 800b4ac:	e005      	b.n	800b4ba <FLASH_WaitForLastOperation+0xde>
 800b4ae:	4a16      	ldr	r2, [pc, #88]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e01c      	b.n	800b4f8 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d10b      	bne.n	800b4dc <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d0:	d111      	bne.n	800b4f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4d8:	615a      	str	r2, [r3, #20]
 800b4da:	e00c      	b.n	800b4f6 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ea:	d104      	bne.n	800b4f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <FLASH_WaitForLastOperation+0x12c>)
 800b4ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	80000004 	.word	0x80000004
 800b504:	1fef000f 	.word	0x1fef000f
 800b508:	52002000 	.word	0x52002000
 800b50c:	17ee0000 	.word	0x17ee0000
 800b510:	2400206c 	.word	0x2400206c

0800b514 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b522:	4b5e      	ldr	r3, [pc, #376]	; (800b69c <HAL_FLASHEx_Erase+0x188>)
 800b524:	7d1b      	ldrb	r3, [r3, #20]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d101      	bne.n	800b52e <HAL_FLASHEx_Erase+0x1a>
 800b52a:	2302      	movs	r3, #2
 800b52c:	e0b2      	b.n	800b694 <HAL_FLASHEx_Erase+0x180>
 800b52e:	4b5b      	ldr	r3, [pc, #364]	; (800b69c <HAL_FLASHEx_Erase+0x188>)
 800b530:	2201      	movs	r2, #1
 800b532:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b534:	4b59      	ldr	r3, [pc, #356]	; (800b69c <HAL_FLASHEx_Erase+0x188>)
 800b536:	2200      	movs	r2, #0
 800b538:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d009      	beq.n	800b55a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b546:	2101      	movs	r1, #1
 800b548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b54c:	f7ff ff46 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b566:	2102      	movs	r1, #2
 800b568:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b56c:	f7ff ff36 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f040 8085 	bne.w	800b68c <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d136      	bne.n	800b5f8 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691a      	ldr	r2, [r3, #16]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f000 f887 	bl	800b6a8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00f      	beq.n	800b5c6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b5ac:	f7ff ff16 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b5ba:	4b39      	ldr	r3, [pc, #228]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	4a38      	ldr	r2, [pc, #224]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b5c0:	f023 0308 	bic.w	r3, r3, #8
 800b5c4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d05c      	beq.n	800b68c <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b5d8:	f7ff ff00 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b5e6:	4b2e      	ldr	r3, [pc, #184]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b5e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b5ec:	4a2c      	ldr	r2, [pc, #176]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b5ee:	f023 0308 	bic.w	r3, r3, #8
 800b5f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b5f6:	e049      	b.n	800b68c <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5fe:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	60bb      	str	r3, [r7, #8]
 800b606:	e039      	b.n	800b67c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6859      	ldr	r1, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	461a      	mov	r2, r3
 800b612:	68b8      	ldr	r0, [r7, #8]
 800b614:	f000 f8b2 	bl	800b77c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00c      	beq.n	800b63e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b624:	2101      	movs	r1, #1
 800b626:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b62a:	f7ff fed7 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b62e:	4603      	mov	r3, r0
 800b630:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b632:	4b1b      	ldr	r3, [pc, #108]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	491a      	ldr	r1, [pc, #104]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b638:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <HAL_FLASHEx_Erase+0x190>)
 800b63a:	4013      	ands	r3, r2
 800b63c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00e      	beq.n	800b668 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b64a:	2102      	movs	r1, #2
 800b64c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b650:	f7ff fec4 	bl	800b3dc <FLASH_WaitForLastOperation>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b658:	4b11      	ldr	r3, [pc, #68]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b65a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b65e:	4910      	ldr	r1, [pc, #64]	; (800b6a0 <HAL_FLASHEx_Erase+0x18c>)
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <HAL_FLASHEx_Erase+0x190>)
 800b662:	4013      	ands	r3, r2
 800b664:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	601a      	str	r2, [r3, #0]
          break;
 800b674:	e00a      	b.n	800b68c <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	3301      	adds	r3, #1
 800b67a:	60bb      	str	r3, [r7, #8]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68da      	ldr	r2, [r3, #12]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	4413      	add	r3, r2
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d3bd      	bcc.n	800b608 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b68c:	4b03      	ldr	r3, [pc, #12]	; (800b69c <HAL_FLASHEx_Erase+0x188>)
 800b68e:	2200      	movs	r2, #0
 800b690:	751a      	strb	r2, [r3, #20]

  return status;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	2400206c 	.word	0x2400206c
 800b6a0:	52002000 	.word	0x52002000
 800b6a4:	fffff8fb 	.word	0xfffff8fb

0800b6a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	f003 0303 	and.w	r3, r3, #3
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d122      	bne.n	800b702 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b6bc:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	4a2d      	ldr	r2, [pc, #180]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b6c6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b6c8:	4b2b      	ldr	r3, [pc, #172]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b6ce:	4a2a      	ldr	r2, [pc, #168]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b6d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b6d8:	4b27      	ldr	r3, [pc, #156]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	4926      	ldr	r1, [pc, #152]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b6e4:	4b24      	ldr	r3, [pc, #144]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b6ea:	4923      	ldr	r1, [pc, #140]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b6f4:	4b20      	ldr	r3, [pc, #128]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	4a1f      	ldr	r2, [pc, #124]	; (800b778 <FLASH_MassErase+0xd0>)
 800b6fa:	f043 0310 	orr.w	r3, r3, #16
 800b6fe:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b700:	e033      	b.n	800b76a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d011      	beq.n	800b730 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <FLASH_MassErase+0xd0>)
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	4a19      	ldr	r2, [pc, #100]	; (800b778 <FLASH_MassErase+0xd0>)
 800b712:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b716:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b718:	4b17      	ldr	r3, [pc, #92]	; (800b778 <FLASH_MassErase+0xd0>)
 800b71a:	68da      	ldr	r2, [r3, #12]
 800b71c:	4916      	ldr	r1, [pc, #88]	; (800b778 <FLASH_MassErase+0xd0>)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4313      	orrs	r3, r2
 800b722:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b724:	4b14      	ldr	r3, [pc, #80]	; (800b778 <FLASH_MassErase+0xd0>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	4a13      	ldr	r2, [pc, #76]	; (800b778 <FLASH_MassErase+0xd0>)
 800b72a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b72e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b00      	cmp	r3, #0
 800b738:	d017      	beq.n	800b76a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b73a:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <FLASH_MassErase+0xd0>)
 800b73c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b740:	4a0d      	ldr	r2, [pc, #52]	; (800b778 <FLASH_MassErase+0xd0>)
 800b742:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b746:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <FLASH_MassErase+0xd0>)
 800b74c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b750:	4909      	ldr	r1, [pc, #36]	; (800b778 <FLASH_MassErase+0xd0>)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4313      	orrs	r3, r2
 800b756:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b75a:	4b07      	ldr	r3, [pc, #28]	; (800b778 <FLASH_MassErase+0xd0>)
 800b75c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b760:	4a05      	ldr	r2, [pc, #20]	; (800b778 <FLASH_MassErase+0xd0>)
 800b762:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b766:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	52002000 	.word	0x52002000

0800b77c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d010      	beq.n	800b7b4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b792:	4b18      	ldr	r3, [pc, #96]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	4a17      	ldr	r2, [pc, #92]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b798:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b79c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b79e:	4b15      	ldr	r3, [pc, #84]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	0219      	lsls	r1, r3, #8
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	430b      	orrs	r3, r1
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	4a11      	ldr	r2, [pc, #68]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7ae:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b7b2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f003 0302 	and.w	r3, r3, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d014      	beq.n	800b7e8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b7be:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b7c4:	4a0b      	ldr	r2, [pc, #44]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7c6:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b7ca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b7ce:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	0219      	lsls	r1, r3, #8
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	4a05      	ldr	r2, [pc, #20]	; (800b7f4 <FLASH_Erase_Sector+0x78>)
 800b7e0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b7e4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b7e8:	bf00      	nop
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	52002000 	.word	0x52002000

0800b7f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b089      	sub	sp, #36	; 0x24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b802:	2300      	movs	r3, #0
 800b804:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b806:	4b89      	ldr	r3, [pc, #548]	; (800ba2c <HAL_GPIO_Init+0x234>)
 800b808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b80a:	e194      	b.n	800bb36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	2101      	movs	r1, #1
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	fa01 f303 	lsl.w	r3, r1, r3
 800b818:	4013      	ands	r3, r2
 800b81a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 8186 	beq.w	800bb30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f003 0303 	and.w	r3, r3, #3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d005      	beq.n	800b83c <HAL_GPIO_Init+0x44>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d130      	bne.n	800b89e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	2203      	movs	r2, #3
 800b848:	fa02 f303 	lsl.w	r3, r2, r3
 800b84c:	43db      	mvns	r3, r3
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	4013      	ands	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	69ba      	ldr	r2, [r7, #24]
 800b862:	4313      	orrs	r3, r2
 800b864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	69ba      	ldr	r2, [r7, #24]
 800b86a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b872:	2201      	movs	r2, #1
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	fa02 f303 	lsl.w	r3, r2, r3
 800b87a:	43db      	mvns	r3, r3
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	4013      	ands	r3, r2
 800b880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	091b      	lsrs	r3, r3, #4
 800b888:	f003 0201 	and.w	r2, r3, #1
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	fa02 f303 	lsl.w	r3, r2, r3
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	4313      	orrs	r3, r2
 800b896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f003 0303 	and.w	r3, r3, #3
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d017      	beq.n	800b8da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	2203      	movs	r2, #3
 800b8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ba:	43db      	mvns	r3, r3
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d123      	bne.n	800b92e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	08da      	lsrs	r2, r3, #3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3208      	adds	r2, #8
 800b8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	220f      	movs	r2, #15
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	43db      	mvns	r3, r3
 800b904:	69ba      	ldr	r2, [r7, #24]
 800b906:	4013      	ands	r3, r2
 800b908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	fa02 f303 	lsl.w	r3, r2, r3
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	08da      	lsrs	r2, r3, #3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3208      	adds	r2, #8
 800b928:	69b9      	ldr	r1, [r7, #24]
 800b92a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	2203      	movs	r2, #3
 800b93a:	fa02 f303 	lsl.w	r3, r2, r3
 800b93e:	43db      	mvns	r3, r3
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	4013      	ands	r3, r2
 800b944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f003 0203 	and.w	r2, r3, #3
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	fa02 f303 	lsl.w	r3, r2, r3
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	4313      	orrs	r3, r2
 800b95a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80e0 	beq.w	800bb30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b970:	4b2f      	ldr	r3, [pc, #188]	; (800ba30 <HAL_GPIO_Init+0x238>)
 800b972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b976:	4a2e      	ldr	r2, [pc, #184]	; (800ba30 <HAL_GPIO_Init+0x238>)
 800b978:	f043 0302 	orr.w	r3, r3, #2
 800b97c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b980:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <HAL_GPIO_Init+0x238>)
 800b982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b986:	f003 0302 	and.w	r3, r3, #2
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b98e:	4a29      	ldr	r2, [pc, #164]	; (800ba34 <HAL_GPIO_Init+0x23c>)
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	089b      	lsrs	r3, r3, #2
 800b994:	3302      	adds	r3, #2
 800b996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b99a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	220f      	movs	r2, #15
 800b9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9aa:	43db      	mvns	r3, r3
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a20      	ldr	r2, [pc, #128]	; (800ba38 <HAL_GPIO_Init+0x240>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d052      	beq.n	800ba60 <HAL_GPIO_Init+0x268>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a1f      	ldr	r2, [pc, #124]	; (800ba3c <HAL_GPIO_Init+0x244>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d031      	beq.n	800ba26 <HAL_GPIO_Init+0x22e>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a1e      	ldr	r2, [pc, #120]	; (800ba40 <HAL_GPIO_Init+0x248>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d02b      	beq.n	800ba22 <HAL_GPIO_Init+0x22a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ba44 <HAL_GPIO_Init+0x24c>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d025      	beq.n	800ba1e <HAL_GPIO_Init+0x226>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1c      	ldr	r2, [pc, #112]	; (800ba48 <HAL_GPIO_Init+0x250>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d01f      	beq.n	800ba1a <HAL_GPIO_Init+0x222>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ba4c <HAL_GPIO_Init+0x254>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d019      	beq.n	800ba16 <HAL_GPIO_Init+0x21e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a1a      	ldr	r2, [pc, #104]	; (800ba50 <HAL_GPIO_Init+0x258>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d013      	beq.n	800ba12 <HAL_GPIO_Init+0x21a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a19      	ldr	r2, [pc, #100]	; (800ba54 <HAL_GPIO_Init+0x25c>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00d      	beq.n	800ba0e <HAL_GPIO_Init+0x216>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <HAL_GPIO_Init+0x260>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <HAL_GPIO_Init+0x212>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a17      	ldr	r2, [pc, #92]	; (800ba5c <HAL_GPIO_Init+0x264>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d101      	bne.n	800ba06 <HAL_GPIO_Init+0x20e>
 800ba02:	2309      	movs	r3, #9
 800ba04:	e02d      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba06:	230a      	movs	r3, #10
 800ba08:	e02b      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	e029      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba0e:	2307      	movs	r3, #7
 800ba10:	e027      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba12:	2306      	movs	r3, #6
 800ba14:	e025      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba16:	2305      	movs	r3, #5
 800ba18:	e023      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	e021      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e01f      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e01d      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e01b      	b.n	800ba62 <HAL_GPIO_Init+0x26a>
 800ba2a:	bf00      	nop
 800ba2c:	58000080 	.word	0x58000080
 800ba30:	58024400 	.word	0x58024400
 800ba34:	58000400 	.word	0x58000400
 800ba38:	58020000 	.word	0x58020000
 800ba3c:	58020400 	.word	0x58020400
 800ba40:	58020800 	.word	0x58020800
 800ba44:	58020c00 	.word	0x58020c00
 800ba48:	58021000 	.word	0x58021000
 800ba4c:	58021400 	.word	0x58021400
 800ba50:	58021800 	.word	0x58021800
 800ba54:	58021c00 	.word	0x58021c00
 800ba58:	58022000 	.word	0x58022000
 800ba5c:	58022400 	.word	0x58022400
 800ba60:	2300      	movs	r3, #0
 800ba62:	69fa      	ldr	r2, [r7, #28]
 800ba64:	f002 0203 	and.w	r2, r2, #3
 800ba68:	0092      	lsls	r2, r2, #2
 800ba6a:	4093      	lsls	r3, r2
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba72:	4938      	ldr	r1, [pc, #224]	; (800bb54 <HAL_GPIO_Init+0x35c>)
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	089b      	lsrs	r3, r3, #2
 800ba78:	3302      	adds	r3, #2
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	43db      	mvns	r3, r3
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ba9e:	69ba      	ldr	r2, [r7, #24]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800baa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800baae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	43db      	mvns	r3, r3
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	4013      	ands	r3, r2
 800babe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	43db      	mvns	r3, r3
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	4013      	ands	r3, r2
 800baea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	43db      	mvns	r3, r3
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	4013      	ands	r3, r2
 800bb14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800bb22:	69ba      	ldr	r2, [r7, #24]
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	3301      	adds	r3, #1
 800bb34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f47f ae63 	bne.w	800b80c <HAL_GPIO_Init+0x14>
  }
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	3724      	adds	r7, #36	; 0x24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	58000400 	.word	0x58000400

0800bb58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	887b      	ldrh	r3, [r7, #2]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
 800bb74:	e001      	b.n	800bb7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	807b      	strh	r3, [r7, #2]
 800bb94:	4613      	mov	r3, r2
 800bb96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bb98:	787b      	ldrb	r3, [r7, #1]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bb9e:	887a      	ldrh	r2, [r7, #2]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bba4:	e003      	b.n	800bbae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	041a      	lsls	r2, r3, #16
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	619a      	str	r2, [r3, #24]
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
	...

0800bbbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e08b      	b.n	800bce6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7f6 fff2 	bl	8002bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2224      	movs	r2, #36	; 0x24
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0201 	bic.w	r2, r2, #1
 800bbfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bc0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d107      	bne.n	800bc36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	689a      	ldr	r2, [r3, #8]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc32:	609a      	str	r2, [r3, #8]
 800bc34:	e006      	b.n	800bc44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bc42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d108      	bne.n	800bc5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc5a:	605a      	str	r2, [r3, #4]
 800bc5c:	e007      	b.n	800bc6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6859      	ldr	r1, [r3, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	4b1d      	ldr	r3, [pc, #116]	; (800bcf0 <HAL_I2C_Init+0x134>)
 800bc7a:	430b      	orrs	r3, r1
 800bc7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68da      	ldr	r2, [r3, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	691a      	ldr	r2, [r3, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	69d9      	ldr	r1, [r3, #28]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f042 0201 	orr.w	r2, r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	02008000 	.word	0x02008000

0800bcf4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	; 0x28
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	460b      	mov	r3, r1
 800bd02:	817b      	strh	r3, [r7, #10]
 800bd04:	4613      	mov	r3, r2
 800bd06:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	f040 80ef 	bne.w	800bef8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd28:	d101      	bne.n	800bd2e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e0e5      	b.n	800befa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d101      	bne.n	800bd3c <HAL_I2C_Master_Transmit_DMA+0x48>
 800bd38:	2302      	movs	r3, #2
 800bd3a:	e0de      	b.n	800befa <HAL_I2C_Master_Transmit_DMA+0x206>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2221      	movs	r2, #33	; 0x21
 800bd48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2210      	movs	r2, #16
 800bd50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	893a      	ldrh	r2, [r7, #8]
 800bd64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	4a66      	ldr	r2, [pc, #408]	; (800bf04 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800bd6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4a66      	ldr	r2, [pc, #408]	; (800bf08 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800bd70:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	2bff      	cmp	r3, #255	; 0xff
 800bd7a:	d906      	bls.n	800bd8a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	22ff      	movs	r2, #255	; 0xff
 800bd80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bd82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd86:	61fb      	str	r3, [r7, #28]
 800bd88:	e007      	b.n	800bd9a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bd94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd98:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d01a      	beq.n	800bdd8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdbc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d074      	beq.n	800beca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d022      	beq.n	800be2e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	4a47      	ldr	r2, [pc, #284]	; (800bf0c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800bdee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf4:	4a46      	ldr	r2, [pc, #280]	; (800bf10 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800bdf6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	2200      	movs	r2, #0
 800be06:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be18:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be1e:	f7fc ff17 	bl	8008c50 <HAL_DMA_Start_IT>
 800be22:	4603      	mov	r3, r0
 800be24:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d13a      	bne.n	800bea2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800be2c:	e013      	b.n	800be56 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2220      	movs	r2, #32
 800be32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e051      	b.n	800befa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	3301      	adds	r3, #1
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	8979      	ldrh	r1, [r7, #10]
 800be62:	4b2c      	ldr	r3, [pc, #176]	; (800bf14 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f002 f83b 	bl	800dee4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be72:	b29a      	uxth	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800be88:	2110      	movs	r1, #16
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f002 f85c 	bl	800df48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e028      	b.n	800bef4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb6:	f043 0210 	orr.w	r2, r3, #16
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e017      	b.n	800befa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	4a12      	ldr	r2, [pc, #72]	; (800bf18 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800bece:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	8979      	ldrh	r1, [r7, #10]
 800bed6:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f002 f800 	bl	800dee4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800beec:	2101      	movs	r1, #1
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f002 f82a 	bl	800df48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	e000      	b.n	800befa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bef8:	2302      	movs	r3, #2
  }
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	ffff0000 	.word	0xffff0000
 800bf08:	0800c74f 	.word	0x0800c74f
 800bf0c:	0800db07 	.word	0x0800db07
 800bf10:	0800dc35 	.word	0x0800dc35
 800bf14:	80002000 	.word	0x80002000
 800bf18:	0800c2df 	.word	0x0800c2df

0800bf1c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	461a      	mov	r2, r3
 800bf28:	460b      	mov	r3, r1
 800bf2a:	817b      	strh	r3, [r7, #10]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	f040 80cd 	bne.w	800c0d8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf4c:	d101      	bne.n	800bf52 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e0c3      	b.n	800c0da <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d101      	bne.n	800bf60 <HAL_I2C_Master_Receive_DMA+0x44>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e0bc      	b.n	800c0da <HAL_I2C_Master_Receive_DMA+0x1be>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2222      	movs	r2, #34	; 0x22
 800bf6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2210      	movs	r2, #16
 800bf74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	893a      	ldrh	r2, [r7, #8]
 800bf88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	4a55      	ldr	r2, [pc, #340]	; (800c0e4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bf8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a55      	ldr	r2, [pc, #340]	; (800c0e8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bf94:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2bff      	cmp	r3, #255	; 0xff
 800bf9e:	d906      	bls.n	800bfae <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	22ff      	movs	r2, #255	; 0xff
 800bfa4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bfa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e007      	b.n	800bfbe <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bfb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfbc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d070      	beq.n	800c0a8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d020      	beq.n	800c010 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	4a46      	ldr	r2, [pc, #280]	; (800c0ec <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bfd4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfda:	4a45      	ldr	r2, [pc, #276]	; (800c0f0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bfdc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	2200      	movs	r2, #0
 800bfec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3324      	adds	r3, #36	; 0x24
 800bff8:	4619      	mov	r1, r3
 800bffa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800c000:	f7fc fe26 	bl	8008c50 <HAL_DMA_Start_IT>
 800c004:	4603      	mov	r3, r0
 800c006:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c008:	7cfb      	ldrb	r3, [r7, #19]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d138      	bne.n	800c080 <HAL_I2C_Master_Receive_DMA+0x164>
 800c00e:	e013      	b.n	800c038 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2220      	movs	r2, #32
 800c014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e050      	b.n	800c0da <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	8979      	ldrh	r1, [r7, #10]
 800c040:	4b2c      	ldr	r3, [pc, #176]	; (800c0f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f001 ff4c 	bl	800dee4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	b29a      	uxth	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c066:	2110      	movs	r1, #16
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f001 ff6d 	bl	800df48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e029      	b.n	800c0d4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2220      	movs	r2, #32
 800c084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c094:	f043 0210 	orr.w	r2, r3, #16
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e018      	b.n	800c0da <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	4a13      	ldr	r2, [pc, #76]	; (800c0f8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800c0ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	8979      	ldrh	r1, [r7, #10]
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 ff10 	bl	800dee4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c0cc:	2102      	movs	r1, #2
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f001 ff3a 	bl	800df48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	e000      	b.n	800c0da <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800c0d8:	2302      	movs	r3, #2
  }
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	ffff0000 	.word	0xffff0000
 800c0e8:	0800c74f 	.word	0x0800c74f
 800c0ec:	0800db9d 	.word	0x0800db9d
 800c0f0:	0800dc35 	.word	0x0800dc35
 800c0f4:	80002400 	.word	0x80002400
 800c0f8:	0800c2df 	.word	0x0800c2df

0800c0fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d005      	beq.n	800c128 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	68f9      	ldr	r1, [r7, #12]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
  }
}
 800c128:	bf00      	nop
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	0a1b      	lsrs	r3, r3, #8
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d010      	beq.n	800c176 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	09db      	lsrs	r3, r3, #7
 800c158:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00a      	beq.n	800c176 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c164:	f043 0201 	orr.w	r2, r3, #1
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c174:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	0a9b      	lsrs	r3, r3, #10
 800c17a:	f003 0301 	and.w	r3, r3, #1
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d010      	beq.n	800c1a4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	09db      	lsrs	r3, r3, #7
 800c186:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c192:	f043 0208 	orr.w	r2, r3, #8
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	0a5b      	lsrs	r3, r3, #9
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d010      	beq.n	800c1d2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	09db      	lsrs	r3, r3, #7
 800c1b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c0:	f043 0202 	orr.w	r2, r3, #2
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f003 030b 	and.w	r3, r3, #11
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c1e2:	68f9      	ldr	r1, [r7, #12]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 fb53 	bl	800d890 <I2C_ITError>
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c242:	b480      	push	{r7}
 800c244:	b083      	sub	sp, #12
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	460b      	mov	r3, r1
 800c24c:	70fb      	strb	r3, [r7, #3]
 800c24e:	4613      	mov	r3, r2
 800c250:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c266:	bf00      	nop
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c286:	b480      	push	{r7}
 800c288:	b083      	sub	sp, #12
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c28e:	bf00      	nop
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b083      	sub	sp, #12
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2d0:	b2db      	uxtb	r3, r3
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b088      	sub	sp, #32
 800c2e2:	af02      	add	r7, sp, #8
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	60b9      	str	r1, [r7, #8]
 800c2e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <I2C_Master_ISR_IT+0x1e>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e120      	b.n	800c53e <I2C_Master_ISR_IT+0x260>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	091b      	lsrs	r3, r3, #4
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d013      	beq.n	800c338 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	091b      	lsrs	r3, r3, #4
 800c314:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00d      	beq.n	800c338 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2210      	movs	r2, #16
 800c322:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c328:	f043 0204 	orr.w	r2, r3, #4
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f001 fbc4 	bl	800dabe <I2C_Flush_TXDR>
 800c336:	e0ed      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	089b      	lsrs	r3, r3, #2
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d023      	beq.n	800c38c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	089b      	lsrs	r3, r3, #2
 800c348:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01d      	beq.n	800c38c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f023 0304 	bic.w	r3, r3, #4
 800c356:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c374:	3b01      	subs	r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c380:	b29b      	uxth	r3, r3
 800c382:	3b01      	subs	r3, #1
 800c384:	b29a      	uxth	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c38a:	e0c3      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	099b      	lsrs	r3, r3, #6
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d12a      	bne.n	800c3ee <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	085b      	lsrs	r3, r3, #1
 800c39c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d024      	beq.n	800c3ee <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	085b      	lsrs	r3, r3, #1
 800c3a8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01e      	beq.n	800c3ee <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80ac 	beq.w	800c514 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c0:	781a      	ldrb	r2, [r3, #0]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800c3ec:	e092      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	09db      	lsrs	r3, r3, #7
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d05d      	beq.n	800c4b6 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	099b      	lsrs	r3, r3, #6
 800c3fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c402:	2b00      	cmp	r3, #0
 800c404:	d057      	beq.n	800c4b6 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d040      	beq.n	800c492 <I2C_Master_ISR_IT+0x1b4>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c414:	2b00      	cmp	r3, #0
 800c416:	d13c      	bne.n	800c492 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c424:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2bff      	cmp	r3, #255	; 0xff
 800c42e:	d90e      	bls.n	800c44e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	22ff      	movs	r2, #255	; 0xff
 800c434:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c43a:	b2da      	uxtb	r2, r3
 800c43c:	8a79      	ldrh	r1, [r7, #18]
 800c43e:	2300      	movs	r3, #0
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f001 fd4c 	bl	800dee4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c44c:	e032      	b.n	800c4b4 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c452:	b29a      	uxth	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c460:	d00b      	beq.n	800c47a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c466:	b2da      	uxtb	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	8a79      	ldrh	r1, [r7, #18]
 800c46e:	2000      	movs	r0, #0
 800c470:	9000      	str	r0, [sp, #0]
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f001 fd36 	bl	800dee4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c478:	e01c      	b.n	800c4b4 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	8a79      	ldrh	r1, [r7, #18]
 800c482:	2300      	movs	r3, #0
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f001 fd2a 	bl	800dee4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c490:	e010      	b.n	800c4b4 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c49c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4a0:	d003      	beq.n	800c4aa <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f000 fdde 	bl	800d064 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4a8:	e034      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4aa:	2140      	movs	r1, #64	; 0x40
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f001 f9ef 	bl	800d890 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4b2:	e02f      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
 800c4b4:	e02e      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	099b      	lsrs	r3, r3, #6
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d028      	beq.n	800c514 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	099b      	lsrs	r3, r3, #6
 800c4c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d022      	beq.n	800c514 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d119      	bne.n	800c50c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4e6:	d015      	beq.n	800c514 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4f0:	d108      	bne.n	800c504 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c500:	605a      	str	r2, [r3, #4]
 800c502:	e007      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 fdad 	bl	800d064 <I2C_ITMasterSeqCplt>
 800c50a:	e003      	b.n	800c514 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c50c:	2140      	movs	r1, #64	; 0x40
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f001 f9be 	bl	800d890 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	095b      	lsrs	r3, r3, #5
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d009      	beq.n	800c534 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	095b      	lsrs	r3, r3, #5
 800c524:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c52c:	6979      	ldr	r1, [r7, #20]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fe34 	bl	800d19c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b086      	sub	sp, #24
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <I2C_Slave_ISR_IT+0x24>
 800c566:	2302      	movs	r3, #2
 800c568:	e0ed      	b.n	800c746 <I2C_Slave_ISR_IT+0x200>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	095b      	lsrs	r3, r3, #5
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	095b      	lsrs	r3, r3, #5
 800c582:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c58a:	6939      	ldr	r1, [r7, #16]
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fecf 	bl	800d330 <I2C_ITSlaveCplt>
 800c592:	e0d3      	b.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	091b      	lsrs	r3, r3, #4
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d04d      	beq.n	800c63c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	091b      	lsrs	r3, r3, #4
 800c5a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d047      	beq.n	800c63c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d128      	bne.n	800c608 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b28      	cmp	r3, #40	; 0x28
 800c5c0:	d108      	bne.n	800c5d4 <I2C_Slave_ISR_IT+0x8e>
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5c8:	d104      	bne.n	800c5d4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f001 f909 	bl	800d7e4 <I2C_ITListenCplt>
 800c5d2:	e032      	b.n	800c63a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b29      	cmp	r3, #41	; 0x29
 800c5de:	d10e      	bne.n	800c5fe <I2C_Slave_ISR_IT+0xb8>
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c5e6:	d00a      	beq.n	800c5fe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2210      	movs	r2, #16
 800c5ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f001 fa64 	bl	800dabe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 fd71 	bl	800d0de <I2C_ITSlaveSeqCplt>
 800c5fc:	e01d      	b.n	800c63a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2210      	movs	r2, #16
 800c604:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c606:	e096      	b.n	800c736 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2210      	movs	r2, #16
 800c60e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c614:	f043 0204 	orr.w	r2, r3, #4
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d004      	beq.n	800c62c <I2C_Slave_ISR_IT+0xe6>
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c628:	f040 8085 	bne.w	800c736 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c630:	4619      	mov	r1, r3
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f001 f92c 	bl	800d890 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c638:	e07d      	b.n	800c736 <I2C_Slave_ISR_IT+0x1f0>
 800c63a:	e07c      	b.n	800c736 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	089b      	lsrs	r3, r3, #2
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d030      	beq.n	800c6aa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	089b      	lsrs	r3, r3, #2
 800c64c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c650:	2b00      	cmp	r3, #0
 800c652:	d02a      	beq.n	800c6aa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d018      	beq.n	800c690 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c67a:	3b01      	subs	r3, #1
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c686:	b29b      	uxth	r3, r3
 800c688:	3b01      	subs	r3, #1
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c694:	b29b      	uxth	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d14f      	bne.n	800c73a <I2C_Slave_ISR_IT+0x1f4>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c6a0:	d04b      	beq.n	800c73a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f000 fd1b 	bl	800d0de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c6a8:	e047      	b.n	800c73a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	08db      	lsrs	r3, r3, #3
 800c6ae:	f003 0301 	and.w	r3, r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	08db      	lsrs	r3, r3, #3
 800c6ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d004      	beq.n	800c6cc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c6c2:	6939      	ldr	r1, [r7, #16]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f000 fc49 	bl	800cf5c <I2C_ITAddrCplt>
 800c6ca:	e037      	b.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	085b      	lsrs	r3, r3, #1
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d031      	beq.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	085b      	lsrs	r3, r3, #1
 800c6dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d02b      	beq.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d018      	beq.n	800c720 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c708:	b29b      	uxth	r3, r3
 800c70a:	3b01      	subs	r3, #1
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c716:	3b01      	subs	r3, #1
 800c718:	b29a      	uxth	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c71e:	e00d      	b.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c726:	d002      	beq.n	800c72e <I2C_Slave_ISR_IT+0x1e8>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 fcd5 	bl	800d0de <I2C_ITSlaveSeqCplt>
 800c734:	e002      	b.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c736:	bf00      	nop
 800c738:	e000      	b.n	800c73c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c73a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b088      	sub	sp, #32
 800c752:	af02      	add	r7, sp, #8
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c760:	2b01      	cmp	r3, #1
 800c762:	d101      	bne.n	800c768 <I2C_Master_ISR_DMA+0x1a>
 800c764:	2302      	movs	r3, #2
 800c766:	e0e1      	b.n	800c92c <I2C_Master_ISR_DMA+0x1de>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	091b      	lsrs	r3, r3, #4
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d017      	beq.n	800c7ac <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	091b      	lsrs	r3, r3, #4
 800c780:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c784:	2b00      	cmp	r3, #0
 800c786:	d011      	beq.n	800c7ac <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2210      	movs	r2, #16
 800c78e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c794:	f043 0204 	orr.w	r2, r3, #4
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c79c:	2120      	movs	r1, #32
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f001 fbd2 	bl	800df48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f001 f98a 	bl	800dabe <I2C_Flush_TXDR>
 800c7aa:	e0ba      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	09db      	lsrs	r3, r3, #7
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d072      	beq.n	800c89e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	099b      	lsrs	r3, r3, #6
 800c7bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d06c      	beq.n	800c89e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d04e      	beq.n	800c87c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	2bff      	cmp	r3, #255	; 0xff
 800c7f4:	d906      	bls.n	800c804 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	22ff      	movs	r2, #255	; 0xff
 800c7fa:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c7fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c800:	617b      	str	r3, [r7, #20]
 800c802:	e010      	b.n	800c826 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c808:	b29a      	uxth	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c816:	d003      	beq.n	800c820 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81c:	617b      	str	r3, [r7, #20]
 800c81e:	e002      	b.n	800c826 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c824:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	8a79      	ldrh	r1, [r7, #18]
 800c82e:	2300      	movs	r3, #0
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f001 fb55 	bl	800dee4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	b29a      	uxth	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b22      	cmp	r3, #34	; 0x22
 800c856:	d108      	bne.n	800c86a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c866:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c868:	e05b      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c878:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c87a:	e052      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c88a:	d003      	beq.n	800c894 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fbe9 	bl	800d064 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c892:	e046      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c894:	2140      	movs	r1, #64	; 0x40
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f000 fffa 	bl	800d890 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c89c:	e041      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	099b      	lsrs	r3, r3, #6
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d029      	beq.n	800c8fe <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	099b      	lsrs	r3, r3, #6
 800c8ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d023      	beq.n	800c8fe <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d119      	bne.n	800c8f4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ce:	d027      	beq.n	800c920 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c8d8:	d108      	bne.n	800c8ec <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c8ea:	e019      	b.n	800c920 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 fbb9 	bl	800d064 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c8f2:	e015      	b.n	800c920 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c8f4:	2140      	movs	r1, #64	; 0x40
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 ffca 	bl	800d890 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c8fc:	e010      	b.n	800c920 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	095b      	lsrs	r3, r3, #5
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	095b      	lsrs	r3, r3, #5
 800c90e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c912:	2b00      	cmp	r3, #0
 800c914:	d005      	beq.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 fc3f 	bl	800d19c <I2C_ITMasterCplt>
 800c91e:	e000      	b.n	800c922 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c920:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af02      	add	r7, sp, #8
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c940:	4b92      	ldr	r3, [pc, #584]	; (800cb8c <I2C_Mem_ISR_DMA+0x258>)
 800c942:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d101      	bne.n	800c952 <I2C_Mem_ISR_DMA+0x1e>
 800c94e:	2302      	movs	r3, #2
 800c950:	e118      	b.n	800cb84 <I2C_Mem_ISR_DMA+0x250>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	091b      	lsrs	r3, r3, #4
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d017      	beq.n	800c996 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	091b      	lsrs	r3, r3, #4
 800c96a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d011      	beq.n	800c996 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2210      	movs	r2, #16
 800c978:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c97e:	f043 0204 	orr.w	r2, r3, #4
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c986:	2120      	movs	r1, #32
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f001 fadd 	bl	800df48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f001 f895 	bl	800dabe <I2C_Flush_TXDR>
 800c994:	e0f1      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	085b      	lsrs	r3, r3, #1
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00f      	beq.n	800c9c2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	085b      	lsrs	r3, r3, #1
 800c9a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d009      	beq.n	800c9c2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9be:	651a      	str	r2, [r3, #80]	; 0x50
 800c9c0:	e0db      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	09db      	lsrs	r3, r3, #7
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d060      	beq.n	800ca90 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	099b      	lsrs	r3, r3, #6
 800c9d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d05a      	beq.n	800ca90 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c9da:	2101      	movs	r1, #1
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f001 fb37 	bl	800e050 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c9e2:	2110      	movs	r1, #16
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f001 faaf 	bl	800df48 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d048      	beq.n	800ca86 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	2bff      	cmp	r3, #255	; 0xff
 800c9fc:	d910      	bls.n	800ca20 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	22ff      	movs	r2, #255	; 0xff
 800ca02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca08:	b299      	uxth	r1, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f001 fa63 	bl	800dee4 <I2C_TransferConfig>
 800ca1e:	e011      	b.n	800ca44 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca2e:	b299      	uxth	r1, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	2300      	movs	r3, #0
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f001 fa50 	bl	800dee4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b22      	cmp	r3, #34	; 0x22
 800ca60:	d108      	bne.n	800ca74 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ca72:	e082      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ca84:	e079      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ca86:	2140      	movs	r1, #64	; 0x40
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 ff01 	bl	800d890 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ca8e:	e074      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	099b      	lsrs	r3, r3, #6
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d05e      	beq.n	800cb5a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	099b      	lsrs	r3, r3, #6
 800caa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d058      	beq.n	800cb5a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800caa8:	2101      	movs	r1, #1
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f001 fad0 	bl	800e050 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cab0:	2110      	movs	r1, #16
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f001 fa48 	bl	800df48 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b22      	cmp	r3, #34	; 0x22
 800cac2:	d101      	bne.n	800cac8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800cac4:	4b32      	ldr	r3, [pc, #200]	; (800cb90 <I2C_Mem_ISR_DMA+0x25c>)
 800cac6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cacc:	b29b      	uxth	r3, r3
 800cace:	2bff      	cmp	r3, #255	; 0xff
 800cad0:	d910      	bls.n	800caf4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	22ff      	movs	r2, #255	; 0xff
 800cad6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cadc:	b299      	uxth	r1, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f001 f9f9 	bl	800dee4 <I2C_TransferConfig>
 800caf2:	e011      	b.n	800cb18 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb02:	b299      	uxth	r1, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f001 f9e6 	bl	800dee4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b22      	cmp	r3, #34	; 0x22
 800cb34:	d108      	bne.n	800cb48 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb44:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb46:	e018      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb56:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb58:	e00f      	b.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	095b      	lsrs	r3, r3, #5
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	095b      	lsrs	r3, r3, #5
 800cb6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 fb11 	bl	800d19c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	80002000 	.word	0x80002000
 800cb90:	80002400 	.word	0x80002400

0800cb94 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d101      	bne.n	800cbb8 <I2C_Slave_ISR_DMA+0x24>
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	e1cc      	b.n	800cf52 <I2C_Slave_ISR_DMA+0x3be>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	095b      	lsrs	r3, r3, #5
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00a      	beq.n	800cbe2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d004      	beq.n	800cbe2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800cbd8:	68b9      	ldr	r1, [r7, #8]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 fba8 	bl	800d330 <I2C_ITSlaveCplt>
 800cbe0:	e1b2      	b.n	800cf48 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	091b      	lsrs	r3, r3, #4
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f000 819c 	beq.w	800cf28 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	091b      	lsrs	r3, r3, #4
 800cbf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 8195 	beq.w	800cf28 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	0b9b      	lsrs	r3, r3, #14
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d106      	bne.n	800cc18 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	0bdb      	lsrs	r3, r3, #15
 800cc0e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 8181 	beq.w	800cf1a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d07c      	beq.n	800cd1a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	0bdb      	lsrs	r3, r3, #15
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d076      	beq.n	800cd1a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a75      	ldr	r2, [pc, #468]	; (800ce08 <I2C_Slave_ISR_DMA+0x274>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d059      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a73      	ldr	r2, [pc, #460]	; (800ce0c <I2C_Slave_ISR_DMA+0x278>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d053      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a71      	ldr	r2, [pc, #452]	; (800ce10 <I2C_Slave_ISR_DMA+0x27c>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d04d      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a6f      	ldr	r2, [pc, #444]	; (800ce14 <I2C_Slave_ISR_DMA+0x280>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d047      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a6d      	ldr	r2, [pc, #436]	; (800ce18 <I2C_Slave_ISR_DMA+0x284>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d041      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a6b      	ldr	r2, [pc, #428]	; (800ce1c <I2C_Slave_ISR_DMA+0x288>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d03b      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a69      	ldr	r2, [pc, #420]	; (800ce20 <I2C_Slave_ISR_DMA+0x28c>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d035      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a67      	ldr	r2, [pc, #412]	; (800ce24 <I2C_Slave_ISR_DMA+0x290>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d02f      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a65      	ldr	r2, [pc, #404]	; (800ce28 <I2C_Slave_ISR_DMA+0x294>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d029      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a63      	ldr	r2, [pc, #396]	; (800ce2c <I2C_Slave_ISR_DMA+0x298>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d023      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a61      	ldr	r2, [pc, #388]	; (800ce30 <I2C_Slave_ISR_DMA+0x29c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d01d      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a5f      	ldr	r2, [pc, #380]	; (800ce34 <I2C_Slave_ISR_DMA+0x2a0>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d017      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a5d      	ldr	r2, [pc, #372]	; (800ce38 <I2C_Slave_ISR_DMA+0x2a4>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d011      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a5b      	ldr	r2, [pc, #364]	; (800ce3c <I2C_Slave_ISR_DMA+0x2a8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d00b      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a59      	ldr	r2, [pc, #356]	; (800ce40 <I2C_Slave_ISR_DMA+0x2ac>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d005      	beq.n	800ccec <I2C_Slave_ISR_DMA+0x158>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a57      	ldr	r2, [pc, #348]	; (800ce44 <I2C_Slave_ISR_DMA+0x2b0>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d109      	bne.n	800cd00 <I2C_Slave_ISR_DMA+0x16c>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2301      	moveq	r3, #1
 800ccfa:	2300      	movne	r3, #0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	e008      	b.n	800cd12 <I2C_Slave_ISR_DMA+0x17e>
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bf0c      	ite	eq
 800cd0c:	2301      	moveq	r3, #1
 800cd0e:	2300      	movne	r3, #0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800cd16:	2301      	movs	r3, #1
 800cd18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f000 809f 	beq.w	800ce62 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0b9b      	lsrs	r3, r3, #14
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 8098 	beq.w	800ce62 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a33      	ldr	r2, [pc, #204]	; (800ce08 <I2C_Slave_ISR_DMA+0x274>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d059      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a31      	ldr	r2, [pc, #196]	; (800ce0c <I2C_Slave_ISR_DMA+0x278>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d053      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a2f      	ldr	r2, [pc, #188]	; (800ce10 <I2C_Slave_ISR_DMA+0x27c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d04d      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a2d      	ldr	r2, [pc, #180]	; (800ce14 <I2C_Slave_ISR_DMA+0x280>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d047      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a2b      	ldr	r2, [pc, #172]	; (800ce18 <I2C_Slave_ISR_DMA+0x284>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d041      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a29      	ldr	r2, [pc, #164]	; (800ce1c <I2C_Slave_ISR_DMA+0x288>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d03b      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a27      	ldr	r2, [pc, #156]	; (800ce20 <I2C_Slave_ISR_DMA+0x28c>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d035      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a25      	ldr	r2, [pc, #148]	; (800ce24 <I2C_Slave_ISR_DMA+0x290>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d02f      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a23      	ldr	r2, [pc, #140]	; (800ce28 <I2C_Slave_ISR_DMA+0x294>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d029      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a21      	ldr	r2, [pc, #132]	; (800ce2c <I2C_Slave_ISR_DMA+0x298>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d023      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a1f      	ldr	r2, [pc, #124]	; (800ce30 <I2C_Slave_ISR_DMA+0x29c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d01d      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a1d      	ldr	r2, [pc, #116]	; (800ce34 <I2C_Slave_ISR_DMA+0x2a0>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d017      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a1b      	ldr	r2, [pc, #108]	; (800ce38 <I2C_Slave_ISR_DMA+0x2a4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d011      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a19      	ldr	r2, [pc, #100]	; (800ce3c <I2C_Slave_ISR_DMA+0x2a8>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d00b      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a17      	ldr	r2, [pc, #92]	; (800ce40 <I2C_Slave_ISR_DMA+0x2ac>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d005      	beq.n	800cdf2 <I2C_Slave_ISR_DMA+0x25e>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a15      	ldr	r2, [pc, #84]	; (800ce44 <I2C_Slave_ISR_DMA+0x2b0>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d12a      	bne.n	800ce48 <I2C_Slave_ISR_DMA+0x2b4>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf0c      	ite	eq
 800cdfe:	2301      	moveq	r3, #1
 800ce00:	2300      	movne	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	e029      	b.n	800ce5a <I2C_Slave_ISR_DMA+0x2c6>
 800ce06:	bf00      	nop
 800ce08:	40020010 	.word	0x40020010
 800ce0c:	40020028 	.word	0x40020028
 800ce10:	40020040 	.word	0x40020040
 800ce14:	40020058 	.word	0x40020058
 800ce18:	40020070 	.word	0x40020070
 800ce1c:	40020088 	.word	0x40020088
 800ce20:	400200a0 	.word	0x400200a0
 800ce24:	400200b8 	.word	0x400200b8
 800ce28:	40020410 	.word	0x40020410
 800ce2c:	40020428 	.word	0x40020428
 800ce30:	40020440 	.word	0x40020440
 800ce34:	40020458 	.word	0x40020458
 800ce38:	40020470 	.word	0x40020470
 800ce3c:	40020488 	.word	0x40020488
 800ce40:	400204a0 	.word	0x400204a0
 800ce44:	400204b8 	.word	0x400204b8
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bf0c      	ite	eq
 800ce54:	2301      	moveq	r3, #1
 800ce56:	2300      	movne	r3, #0
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d128      	bne.n	800ceba <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b28      	cmp	r3, #40	; 0x28
 800ce72:	d108      	bne.n	800ce86 <I2C_Slave_ISR_DMA+0x2f2>
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce7a:	d104      	bne.n	800ce86 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ce7c:	68b9      	ldr	r1, [r7, #8]
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f000 fcb0 	bl	800d7e4 <I2C_ITListenCplt>
 800ce84:	e048      	b.n	800cf18 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b29      	cmp	r3, #41	; 0x29
 800ce90:	d10e      	bne.n	800ceb0 <I2C_Slave_ISR_DMA+0x31c>
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce98:	d00a      	beq.n	800ceb0 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2210      	movs	r2, #16
 800cea0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 fe0b 	bl	800dabe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 f918 	bl	800d0de <I2C_ITSlaveSeqCplt>
 800ceae:	e033      	b.n	800cf18 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2210      	movs	r2, #16
 800ceb6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ceb8:	e034      	b.n	800cf24 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2210      	movs	r2, #16
 800cec0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec6:	f043 0204 	orr.w	r2, r3, #4
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ced4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <I2C_Slave_ISR_DMA+0x350>
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cee2:	d11f      	bne.n	800cf24 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	2b21      	cmp	r3, #33	; 0x21
 800cee8:	d002      	beq.n	800cef0 <I2C_Slave_ISR_DMA+0x35c>
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	2b29      	cmp	r3, #41	; 0x29
 800ceee:	d103      	bne.n	800cef8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2221      	movs	r2, #33	; 0x21
 800cef4:	631a      	str	r2, [r3, #48]	; 0x30
 800cef6:	e008      	b.n	800cf0a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b22      	cmp	r3, #34	; 0x22
 800cefc:	d002      	beq.n	800cf04 <I2C_Slave_ISR_DMA+0x370>
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	2b2a      	cmp	r3, #42	; 0x2a
 800cf02:	d102      	bne.n	800cf0a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2222      	movs	r2, #34	; 0x22
 800cf08:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0e:	4619      	mov	r1, r3
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 fcbd 	bl	800d890 <I2C_ITError>
      if (treatdmanack == 1U)
 800cf16:	e005      	b.n	800cf24 <I2C_Slave_ISR_DMA+0x390>
 800cf18:	e004      	b.n	800cf24 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2210      	movs	r2, #16
 800cf20:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cf22:	e011      	b.n	800cf48 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cf24:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cf26:	e00f      	b.n	800cf48 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d009      	beq.n	800cf48 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	08db      	lsrs	r3, r3, #3
 800cf38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cf40:	68b9      	ldr	r1, [r7, #8]
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f000 f80a 	bl	800cf5c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3720      	adds	r7, #32
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop

0800cf5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf72:	2b28      	cmp	r3, #40	; 0x28
 800cf74:	d16a      	bne.n	800d04c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	0c1b      	lsrs	r3, r3, #16
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	0c1b      	lsrs	r3, r3, #16
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cf94:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfa2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cfb0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d138      	bne.n	800d02c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cfba:	897b      	ldrh	r3, [r7, #10]
 800cfbc:	09db      	lsrs	r3, r3, #7
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	89bb      	ldrh	r3, [r7, #12]
 800cfc2:	4053      	eors	r3, r2
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	f003 0306 	and.w	r3, r3, #6
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d11c      	bne.n	800d008 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cfce:	897b      	ldrh	r3, [r7, #10]
 800cfd0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d13b      	bne.n	800d05c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2208      	movs	r2, #8
 800cff0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cffa:	89ba      	ldrh	r2, [r7, #12]
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff f91e 	bl	800c242 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d006:	e029      	b.n	800d05c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d008:	893b      	ldrh	r3, [r7, #8]
 800d00a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d00c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f001 f81d 	bl	800e050 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d01e:	89ba      	ldrh	r2, [r7, #12]
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff f90c 	bl	800c242 <HAL_I2C_AddrCallback>
}
 800d02a:	e017      	b.n	800d05c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d02c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f001 f80d 	bl	800e050 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d03e:	89ba      	ldrh	r2, [r7, #12]
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff f8fc 	bl	800c242 <HAL_I2C_AddrCallback>
}
 800d04a:	e007      	b.n	800d05c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2208      	movs	r2, #8
 800d052:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b21      	cmp	r3, #33	; 0x21
 800d07e:	d115      	bne.n	800d0ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2220      	movs	r2, #32
 800d084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2211      	movs	r2, #17
 800d08c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d094:	2101      	movs	r1, #1
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 ffda 	bl	800e050 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff f8a4 	bl	800c1f2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d0aa:	e014      	b.n	800d0d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2212      	movs	r2, #18
 800d0b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d0c0:	2102      	movs	r1, #2
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 ffc4 	bl	800e050 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff f898 	bl	800c206 <HAL_I2C_MasterRxCpltCallback>
}
 800d0d6:	bf00      	nop
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	0b9b      	lsrs	r3, r3, #14
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d008      	beq.n	800d114 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	e00d      	b.n	800d130 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	0bdb      	lsrs	r3, r3, #15
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d12e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b29      	cmp	r3, #41	; 0x29
 800d13a:	d112      	bne.n	800d162 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2228      	movs	r2, #40	; 0x28
 800d140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2221      	movs	r2, #33	; 0x21
 800d148:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d14a:	2101      	movs	r1, #1
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 ff7f 	bl	800e050 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff f85d 	bl	800c21a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d160:	e017      	b.n	800d192 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b2a      	cmp	r3, #42	; 0x2a
 800d16c:	d111      	bne.n	800d192 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2228      	movs	r2, #40	; 0x28
 800d172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2222      	movs	r2, #34	; 0x22
 800d17a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d17c:	2102      	movs	r1, #2
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 ff66 	bl	800e050 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff f84e 	bl	800c22e <HAL_I2C_SlaveRxCpltCallback>
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
	...

0800d19c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b21      	cmp	r3, #33	; 0x21
 800d1bc:	d107      	bne.n	800d1ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d1be:	2101      	movs	r1, #1
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 ff45 	bl	800e050 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2211      	movs	r2, #17
 800d1ca:	631a      	str	r2, [r3, #48]	; 0x30
 800d1cc:	e00c      	b.n	800d1e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b22      	cmp	r3, #34	; 0x22
 800d1d8:	d106      	bne.n	800d1e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d1da:	2102      	movs	r1, #2
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 ff37 	bl	800e050 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2212      	movs	r2, #18
 800d1e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6859      	ldr	r1, [r3, #4]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	4b4d      	ldr	r3, [pc, #308]	; (800d328 <I2C_ITMasterCplt+0x18c>)
 800d1f4:	400b      	ands	r3, r1
 800d1f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a4a      	ldr	r2, [pc, #296]	; (800d32c <I2C_ITMasterCplt+0x190>)
 800d202:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	091b      	lsrs	r3, r3, #4
 800d208:	f003 0301 	and.w	r3, r3, #1
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d009      	beq.n	800d224 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2210      	movs	r2, #16
 800d216:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d21c:	f043 0204 	orr.w	r2, r3, #4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b60      	cmp	r3, #96	; 0x60
 800d22e:	d10b      	bne.n	800d248 <I2C_ITMasterCplt+0xac>
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	089b      	lsrs	r3, r3, #2
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d005      	beq.n	800d248 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	b2db      	uxtb	r3, r3
 800d244:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800d246:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fc38 	bl	800dabe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d252:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b60      	cmp	r3, #96	; 0x60
 800d25e:	d002      	beq.n	800d266 <I2C_ITMasterCplt+0xca>
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d006      	beq.n	800d274 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fb0f 	bl	800d890 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d272:	e054      	b.n	800d31e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b21      	cmp	r3, #33	; 0x21
 800d27e:	d124      	bne.n	800d2ca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2220      	movs	r2, #32
 800d284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b40      	cmp	r3, #64	; 0x40
 800d298:	d10b      	bne.n	800d2b2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7fe ffe1 	bl	800c272 <HAL_I2C_MemTxCpltCallback>
}
 800d2b0:	e035      	b.n	800d31e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7fe ff95 	bl	800c1f2 <HAL_I2C_MasterTxCpltCallback>
}
 800d2c8:	e029      	b.n	800d31e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b22      	cmp	r3, #34	; 0x22
 800d2d4:	d123      	bne.n	800d31e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2220      	movs	r2, #32
 800d2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b40      	cmp	r3, #64	; 0x40
 800d2ee:	d10b      	bne.n	800d308 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7fe ffc0 	bl	800c286 <HAL_I2C_MemRxCpltCallback>
}
 800d306:	e00a      	b.n	800d31e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7fe ff74 	bl	800c206 <HAL_I2C_MasterRxCpltCallback>
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	fe00e800 	.word	0xfe00e800
 800d32c:	ffff0000 	.word	0xffff0000

0800d330 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d352:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2220      	movs	r2, #32
 800d35a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d35c:	7afb      	ldrb	r3, [r7, #11]
 800d35e:	2b21      	cmp	r3, #33	; 0x21
 800d360:	d002      	beq.n	800d368 <I2C_ITSlaveCplt+0x38>
 800d362:	7afb      	ldrb	r3, [r7, #11]
 800d364:	2b29      	cmp	r3, #41	; 0x29
 800d366:	d108      	bne.n	800d37a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d368:	f248 0101 	movw	r1, #32769	; 0x8001
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fe6f 	bl	800e050 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2221      	movs	r2, #33	; 0x21
 800d376:	631a      	str	r2, [r3, #48]	; 0x30
 800d378:	e019      	b.n	800d3ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	2b22      	cmp	r3, #34	; 0x22
 800d37e:	d002      	beq.n	800d386 <I2C_ITSlaveCplt+0x56>
 800d380:	7afb      	ldrb	r3, [r7, #11]
 800d382:	2b2a      	cmp	r3, #42	; 0x2a
 800d384:	d108      	bne.n	800d398 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d386:	f248 0102 	movw	r1, #32770	; 0x8002
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fe60 	bl	800e050 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2222      	movs	r2, #34	; 0x22
 800d394:	631a      	str	r2, [r3, #48]	; 0x30
 800d396:	e00a      	b.n	800d3ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800d398:	7afb      	ldrb	r3, [r7, #11]
 800d39a:	2b28      	cmp	r3, #40	; 0x28
 800d39c:	d107      	bne.n	800d3ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800d39e:	f248 0103 	movw	r1, #32771	; 0x8003
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fe54 	bl	800e050 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6859      	ldr	r1, [r3, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	4b80      	ldr	r3, [pc, #512]	; (800d5cc <I2C_ITSlaveCplt+0x29c>)
 800d3ca:	400b      	ands	r3, r1
 800d3cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fb75 	bl	800dabe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	0b9b      	lsrs	r3, r3, #14
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d07a      	beq.n	800d4d6 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8112 	beq.w	800d61e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a73      	ldr	r2, [pc, #460]	; (800d5d0 <I2C_ITSlaveCplt+0x2a0>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d059      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a71      	ldr	r2, [pc, #452]	; (800d5d4 <I2C_ITSlaveCplt+0x2a4>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d053      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a6f      	ldr	r2, [pc, #444]	; (800d5d8 <I2C_ITSlaveCplt+0x2a8>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d04d      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a6d      	ldr	r2, [pc, #436]	; (800d5dc <I2C_ITSlaveCplt+0x2ac>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d047      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a6b      	ldr	r2, [pc, #428]	; (800d5e0 <I2C_ITSlaveCplt+0x2b0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d041      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a69      	ldr	r2, [pc, #420]	; (800d5e4 <I2C_ITSlaveCplt+0x2b4>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d03b      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a67      	ldr	r2, [pc, #412]	; (800d5e8 <I2C_ITSlaveCplt+0x2b8>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d035      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a65      	ldr	r2, [pc, #404]	; (800d5ec <I2C_ITSlaveCplt+0x2bc>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d02f      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a63      	ldr	r2, [pc, #396]	; (800d5f0 <I2C_ITSlaveCplt+0x2c0>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d029      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a61      	ldr	r2, [pc, #388]	; (800d5f4 <I2C_ITSlaveCplt+0x2c4>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d023      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a5f      	ldr	r2, [pc, #380]	; (800d5f8 <I2C_ITSlaveCplt+0x2c8>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d01d      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a5d      	ldr	r2, [pc, #372]	; (800d5fc <I2C_ITSlaveCplt+0x2cc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d017      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a5b      	ldr	r2, [pc, #364]	; (800d600 <I2C_ITSlaveCplt+0x2d0>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d011      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a59      	ldr	r2, [pc, #356]	; (800d604 <I2C_ITSlaveCplt+0x2d4>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d00b      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a57      	ldr	r2, [pc, #348]	; (800d608 <I2C_ITSlaveCplt+0x2d8>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d005      	beq.n	800d4ba <I2C_ITSlaveCplt+0x18a>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a55      	ldr	r2, [pc, #340]	; (800d60c <I2C_ITSlaveCplt+0x2dc>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d105      	bne.n	800d4c6 <I2C_ITSlaveCplt+0x196>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	e004      	b.n	800d4d0 <I2C_ITSlaveCplt+0x1a0>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d4d4:	e0a3      	b.n	800d61e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	0bdb      	lsrs	r3, r3, #15
 800d4da:	f003 0301 	and.w	r3, r3, #1
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 809d 	beq.w	800d61e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 8090 	beq.w	800d61e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a32      	ldr	r2, [pc, #200]	; (800d5d0 <I2C_ITSlaveCplt+0x2a0>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d059      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a30      	ldr	r2, [pc, #192]	; (800d5d4 <I2C_ITSlaveCplt+0x2a4>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d053      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2e      	ldr	r2, [pc, #184]	; (800d5d8 <I2C_ITSlaveCplt+0x2a8>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d04d      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a2c      	ldr	r2, [pc, #176]	; (800d5dc <I2C_ITSlaveCplt+0x2ac>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d047      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a2a      	ldr	r2, [pc, #168]	; (800d5e0 <I2C_ITSlaveCplt+0x2b0>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d041      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a28      	ldr	r2, [pc, #160]	; (800d5e4 <I2C_ITSlaveCplt+0x2b4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d03b      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a26      	ldr	r2, [pc, #152]	; (800d5e8 <I2C_ITSlaveCplt+0x2b8>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d035      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a24      	ldr	r2, [pc, #144]	; (800d5ec <I2C_ITSlaveCplt+0x2bc>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d02f      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a22      	ldr	r2, [pc, #136]	; (800d5f0 <I2C_ITSlaveCplt+0x2c0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d029      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a20      	ldr	r2, [pc, #128]	; (800d5f4 <I2C_ITSlaveCplt+0x2c4>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d023      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a1e      	ldr	r2, [pc, #120]	; (800d5f8 <I2C_ITSlaveCplt+0x2c8>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d01d      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a1c      	ldr	r2, [pc, #112]	; (800d5fc <I2C_ITSlaveCplt+0x2cc>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d017      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a1a      	ldr	r2, [pc, #104]	; (800d600 <I2C_ITSlaveCplt+0x2d0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d011      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a18      	ldr	r2, [pc, #96]	; (800d604 <I2C_ITSlaveCplt+0x2d4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d00b      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a16      	ldr	r2, [pc, #88]	; (800d608 <I2C_ITSlaveCplt+0x2d8>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d005      	beq.n	800d5be <I2C_ITSlaveCplt+0x28e>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a14      	ldr	r2, [pc, #80]	; (800d60c <I2C_ITSlaveCplt+0x2dc>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d128      	bne.n	800d610 <I2C_ITSlaveCplt+0x2e0>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	e027      	b.n	800d61a <I2C_ITSlaveCplt+0x2ea>
 800d5ca:	bf00      	nop
 800d5cc:	fe00e800 	.word	0xfe00e800
 800d5d0:	40020010 	.word	0x40020010
 800d5d4:	40020028 	.word	0x40020028
 800d5d8:	40020040 	.word	0x40020040
 800d5dc:	40020058 	.word	0x40020058
 800d5e0:	40020070 	.word	0x40020070
 800d5e4:	40020088 	.word	0x40020088
 800d5e8:	400200a0 	.word	0x400200a0
 800d5ec:	400200b8 	.word	0x400200b8
 800d5f0:	40020410 	.word	0x40020410
 800d5f4:	40020428 	.word	0x40020428
 800d5f8:	40020440 	.word	0x40020440
 800d5fc:	40020458 	.word	0x40020458
 800d600:	40020470 	.word	0x40020470
 800d604:	40020488 	.word	0x40020488
 800d608:	400204a0 	.word	0x400204a0
 800d60c:	400204b8 	.word	0x400204b8
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d020      	beq.n	800d66c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f023 0304 	bic.w	r3, r3, #4
 800d630:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00c      	beq.n	800d66c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d656:	3b01      	subs	r3, #1
 800d658:	b29a      	uxth	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d662:	b29b      	uxth	r3, r3
 800d664:	3b01      	subs	r3, #1
 800d666:	b29a      	uxth	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d670:	b29b      	uxth	r3, r3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d67a:	f043 0204 	orr.w	r2, r3, #4
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	091b      	lsrs	r3, r3, #4
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d04a      	beq.n	800d724 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	091b      	lsrs	r3, r3, #4
 800d692:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d696:	2b00      	cmp	r3, #0
 800d698:	d044      	beq.n	800d724 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d128      	bne.n	800d6f6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b28      	cmp	r3, #40	; 0x28
 800d6ae:	d108      	bne.n	800d6c2 <I2C_ITSlaveCplt+0x392>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6b6:	d104      	bne.n	800d6c2 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d6b8:	6979      	ldr	r1, [r7, #20]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f892 	bl	800d7e4 <I2C_ITListenCplt>
 800d6c0:	e030      	b.n	800d724 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b29      	cmp	r3, #41	; 0x29
 800d6cc:	d10e      	bne.n	800d6ec <I2C_ITSlaveCplt+0x3bc>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6d4:	d00a      	beq.n	800d6ec <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2210      	movs	r2, #16
 800d6dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f9ed 	bl	800dabe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff fcfa 	bl	800d0de <I2C_ITSlaveSeqCplt>
 800d6ea:	e01b      	b.n	800d724 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2210      	movs	r2, #16
 800d6f2:	61da      	str	r2, [r3, #28]
 800d6f4:	e016      	b.n	800d724 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2210      	movs	r2, #16
 800d6fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d702:	f043 0204 	orr.w	r2, r3, #4
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d003      	beq.n	800d718 <I2C_ITSlaveCplt+0x3e8>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d716:	d105      	bne.n	800d724 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d71c:	4619      	mov	r1, r3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f8b6 	bl	800d890 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d736:	2b00      	cmp	r3, #0
 800d738:	d010      	beq.n	800d75c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f8a5 	bl	800d890 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	2b28      	cmp	r3, #40	; 0x28
 800d750:	d141      	bne.n	800d7d6 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d752:	6979      	ldr	r1, [r7, #20]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f845 	bl	800d7e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d75a:	e03c      	b.n	800d7d6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d764:	d014      	beq.n	800d790 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fcb9 	bl	800d0de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a1c      	ldr	r2, [pc, #112]	; (800d7e0 <I2C_ITSlaveCplt+0x4b0>)
 800d770:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe fd68 	bl	800c25e <HAL_I2C_ListenCpltCallback>
}
 800d78e:	e022      	b.n	800d7d6 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b22      	cmp	r3, #34	; 0x22
 800d79a:	d10e      	bne.n	800d7ba <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7fe fd3b 	bl	800c22e <HAL_I2C_SlaveRxCpltCallback>
}
 800d7b8:	e00d      	b.n	800d7d6 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7fe fd22 	bl	800c21a <HAL_I2C_SlaveTxCpltCallback>
}
 800d7d6:	bf00      	nop
 800d7d8:	3718      	adds	r7, #24
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	ffff0000 	.word	0xffff0000

0800d7e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a26      	ldr	r2, [pc, #152]	; (800d88c <I2C_ITListenCplt+0xa8>)
 800d7f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	089b      	lsrs	r3, r3, #2
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d022      	beq.n	800d862 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	b2d2      	uxtb	r2, r2
 800d828:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d012      	beq.n	800d862 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d840:	3b01      	subs	r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	3b01      	subs	r3, #1
 800d850:	b29a      	uxth	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85a:	f043 0204 	orr.w	r2, r3, #4
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d862:	f248 0103 	movw	r1, #32771	; 0x8003
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fbf2 	bl	800e050 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2210      	movs	r2, #16
 800d872:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7fe fcee 	bl	800c25e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	ffff0000 	.word	0xffff0000

0800d890 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a6d      	ldr	r2, [pc, #436]	; (800da64 <I2C_ITError+0x1d4>)
 800d8ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d8c2:	7bfb      	ldrb	r3, [r7, #15]
 800d8c4:	2b28      	cmp	r3, #40	; 0x28
 800d8c6:	d005      	beq.n	800d8d4 <I2C_ITError+0x44>
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	2b29      	cmp	r3, #41	; 0x29
 800d8cc:	d002      	beq.n	800d8d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d2:	d10b      	bne.n	800d8ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d8d4:	2103      	movs	r1, #3
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fbba 	bl	800e050 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2228      	movs	r2, #40	; 0x28
 800d8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a60      	ldr	r2, [pc, #384]	; (800da68 <I2C_ITError+0x1d8>)
 800d8e8:	635a      	str	r2, [r3, #52]	; 0x34
 800d8ea:	e030      	b.n	800d94e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d8ec:	f248 0103 	movw	r1, #32771	; 0x8003
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fbad 	bl	800e050 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f8e1 	bl	800dabe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b60      	cmp	r3, #96	; 0x60
 800d906:	d01f      	beq.n	800d948 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2220      	movs	r2, #32
 800d90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d114      	bne.n	800d948 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	f003 0310 	and.w	r3, r3, #16
 800d928:	2b10      	cmp	r3, #16
 800d92a:	d109      	bne.n	800d940 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2210      	movs	r2, #16
 800d932:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d938:	f043 0204 	orr.w	r2, r3, #4
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2220      	movs	r2, #32
 800d946:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d952:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d039      	beq.n	800d9d0 <I2C_ITError+0x140>
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2b11      	cmp	r3, #17
 800d960:	d002      	beq.n	800d968 <I2C_ITError+0xd8>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b21      	cmp	r3, #33	; 0x21
 800d966:	d133      	bne.n	800d9d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d976:	d107      	bne.n	800d988 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d986:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fd f857 	bl	800aa40 <HAL_DMA_GetState>
 800d992:	4603      	mov	r3, r0
 800d994:	2b01      	cmp	r3, #1
 800d996:	d017      	beq.n	800d9c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99c:	4a33      	ldr	r2, [pc, #204]	; (800da6c <I2C_ITError+0x1dc>)
 800d99e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fb fed7 	bl	8009760 <HAL_DMA_Abort_IT>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d04d      	beq.n	800da54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9c6:	e045      	b.n	800da54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f851 	bl	800da70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9ce:	e041      	b.n	800da54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d039      	beq.n	800da4c <I2C_ITError+0x1bc>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2b12      	cmp	r3, #18
 800d9dc:	d002      	beq.n	800d9e4 <I2C_ITError+0x154>
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b22      	cmp	r3, #34	; 0x22
 800d9e2:	d133      	bne.n	800da4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9f2:	d107      	bne.n	800da04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fd f819 	bl	800aa40 <HAL_DMA_GetState>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b01      	cmp	r3, #1
 800da12:	d017      	beq.n	800da44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da18:	4a14      	ldr	r2, [pc, #80]	; (800da6c <I2C_ITError+0x1dc>)
 800da1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fb fe99 	bl	8009760 <HAL_DMA_Abort_IT>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d011      	beq.n	800da58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800da3e:	4610      	mov	r0, r2
 800da40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da42:	e009      	b.n	800da58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f813 	bl	800da70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da4a:	e005      	b.n	800da58 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f80f 	bl	800da70 <I2C_TreatErrorCallback>
  }
}
 800da52:	e002      	b.n	800da5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800da54:	bf00      	nop
 800da56:	e000      	b.n	800da5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da58:	bf00      	nop
}
 800da5a:	bf00      	nop
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	ffff0000 	.word	0xffff0000
 800da68:	0800c547 	.word	0x0800c547
 800da6c:	0800dea9 	.word	0x0800dea9

0800da70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b60      	cmp	r3, #96	; 0x60
 800da82:	d10e      	bne.n	800daa2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2220      	movs	r2, #32
 800da88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7fe fc07 	bl	800c2ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800daa0:	e009      	b.n	800dab6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7fe fbf2 	bl	800c29a <HAL_I2C_ErrorCallback>
}
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dabe:	b480      	push	{r7}
 800dac0:	b083      	sub	sp, #12
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	f003 0302 	and.w	r3, r3, #2
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	d103      	bne.n	800dadc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2200      	movs	r2, #0
 800dada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	699b      	ldr	r3, [r3, #24]
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d007      	beq.n	800dafa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	699a      	ldr	r2, [r3, #24]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f042 0201 	orr.w	r2, r2, #1
 800daf8:	619a      	str	r2, [r3, #24]
  }
}
 800dafa:	bf00      	nop
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800db22:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db28:	b29b      	uxth	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d104      	bne.n	800db38 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800db2e:	2120      	movs	r1, #32
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 fa09 	bl	800df48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800db36:	e02d      	b.n	800db94 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800db40:	441a      	add	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	2bff      	cmp	r3, #255	; 0xff
 800db4e:	d903      	bls.n	800db58 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	22ff      	movs	r2, #255	; 0xff
 800db54:	851a      	strh	r2, [r3, #40]	; 0x28
 800db56:	e004      	b.n	800db62 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6a:	4619      	mov	r1, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	3328      	adds	r3, #40	; 0x28
 800db72:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800db78:	f7fb f86a 	bl	8008c50 <HAL_DMA_Start_IT>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d004      	beq.n	800db8c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800db82:	2110      	movs	r1, #16
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f7ff fe83 	bl	800d890 <I2C_ITError>
}
 800db8a:	e003      	b.n	800db94 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800db8c:	2140      	movs	r1, #64	; 0x40
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 f9da 	bl	800df48 <I2C_Enable_IRQ>
}
 800db94:	bf00      	nop
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbb8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d104      	bne.n	800dbce <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800dbc4:	2120      	movs	r1, #32
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f000 f9be 	bl	800df48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800dbcc:	e02d      	b.n	800dc2a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dbd6:	441a      	add	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	2bff      	cmp	r3, #255	; 0xff
 800dbe4:	d903      	bls.n	800dbee <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	22ff      	movs	r2, #255	; 0xff
 800dbea:	851a      	strh	r2, [r3, #40]	; 0x28
 800dbec:	e004      	b.n	800dbf8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3324      	adds	r3, #36	; 0x24
 800dc02:	4619      	mov	r1, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800dc0e:	f7fb f81f 	bl	8008c50 <HAL_DMA_Start_IT>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800dc18:	2110      	movs	r1, #16
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7ff fe38 	bl	800d890 <I2C_ITError>
}
 800dc20:	e003      	b.n	800dc2a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800dc22:	2140      	movs	r1, #64	; 0x40
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 f98f 	bl	800df48 <I2C_Enable_IRQ>
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc44:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d076      	beq.n	800dd3c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a71      	ldr	r2, [pc, #452]	; (800de1c <I2C_DMAError+0x1e8>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d059      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a6f      	ldr	r2, [pc, #444]	; (800de20 <I2C_DMAError+0x1ec>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d053      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a6d      	ldr	r2, [pc, #436]	; (800de24 <I2C_DMAError+0x1f0>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d04d      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a6b      	ldr	r2, [pc, #428]	; (800de28 <I2C_DMAError+0x1f4>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d047      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a69      	ldr	r2, [pc, #420]	; (800de2c <I2C_DMAError+0x1f8>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d041      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a67      	ldr	r2, [pc, #412]	; (800de30 <I2C_DMAError+0x1fc>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d03b      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a65      	ldr	r2, [pc, #404]	; (800de34 <I2C_DMAError+0x200>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d035      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a63      	ldr	r2, [pc, #396]	; (800de38 <I2C_DMAError+0x204>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d02f      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a61      	ldr	r2, [pc, #388]	; (800de3c <I2C_DMAError+0x208>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d029      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a5f      	ldr	r2, [pc, #380]	; (800de40 <I2C_DMAError+0x20c>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d023      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a5d      	ldr	r2, [pc, #372]	; (800de44 <I2C_DMAError+0x210>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d01d      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a5b      	ldr	r2, [pc, #364]	; (800de48 <I2C_DMAError+0x214>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d017      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a59      	ldr	r2, [pc, #356]	; (800de4c <I2C_DMAError+0x218>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d011      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a57      	ldr	r2, [pc, #348]	; (800de50 <I2C_DMAError+0x21c>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d00b      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a55      	ldr	r2, [pc, #340]	; (800de54 <I2C_DMAError+0x220>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d005      	beq.n	800dd0e <I2C_DMAError+0xda>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a53      	ldr	r2, [pc, #332]	; (800de58 <I2C_DMAError+0x224>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d109      	bne.n	800dd22 <I2C_DMAError+0xee>
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bf0c      	ite	eq
 800dd1a:	2301      	moveq	r3, #1
 800dd1c:	2300      	movne	r3, #0
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	e008      	b.n	800dd34 <I2C_DMAError+0x100>
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bf0c      	ite	eq
 800dd2e:	2301      	moveq	r3, #1
 800dd30:	2300      	movne	r3, #0
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f000 8098 	beq.w	800de76 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a33      	ldr	r2, [pc, #204]	; (800de1c <I2C_DMAError+0x1e8>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d059      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a31      	ldr	r2, [pc, #196]	; (800de20 <I2C_DMAError+0x1ec>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d053      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a2f      	ldr	r2, [pc, #188]	; (800de24 <I2C_DMAError+0x1f0>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d04d      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a2d      	ldr	r2, [pc, #180]	; (800de28 <I2C_DMAError+0x1f4>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d047      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a2b      	ldr	r2, [pc, #172]	; (800de2c <I2C_DMAError+0x1f8>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d041      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a29      	ldr	r2, [pc, #164]	; (800de30 <I2C_DMAError+0x1fc>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d03b      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a27      	ldr	r2, [pc, #156]	; (800de34 <I2C_DMAError+0x200>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d035      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a25      	ldr	r2, [pc, #148]	; (800de38 <I2C_DMAError+0x204>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d02f      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a23      	ldr	r2, [pc, #140]	; (800de3c <I2C_DMAError+0x208>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d029      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a21      	ldr	r2, [pc, #132]	; (800de40 <I2C_DMAError+0x20c>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d023      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a1f      	ldr	r2, [pc, #124]	; (800de44 <I2C_DMAError+0x210>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d01d      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a1d      	ldr	r2, [pc, #116]	; (800de48 <I2C_DMAError+0x214>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d017      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a1b      	ldr	r2, [pc, #108]	; (800de4c <I2C_DMAError+0x218>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d011      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a19      	ldr	r2, [pc, #100]	; (800de50 <I2C_DMAError+0x21c>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d00b      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a17      	ldr	r2, [pc, #92]	; (800de54 <I2C_DMAError+0x220>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d005      	beq.n	800de06 <I2C_DMAError+0x1d2>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a15      	ldr	r2, [pc, #84]	; (800de58 <I2C_DMAError+0x224>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d12a      	bne.n	800de5c <I2C_DMAError+0x228>
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	bf0c      	ite	eq
 800de12:	2301      	moveq	r3, #1
 800de14:	2300      	movne	r3, #0
 800de16:	b2db      	uxtb	r3, r3
 800de18:	e029      	b.n	800de6e <I2C_DMAError+0x23a>
 800de1a:	bf00      	nop
 800de1c:	40020010 	.word	0x40020010
 800de20:	40020028 	.word	0x40020028
 800de24:	40020040 	.word	0x40020040
 800de28:	40020058 	.word	0x40020058
 800de2c:	40020070 	.word	0x40020070
 800de30:	40020088 	.word	0x40020088
 800de34:	400200a0 	.word	0x400200a0
 800de38:	400200b8 	.word	0x400200b8
 800de3c:	40020410 	.word	0x40020410
 800de40:	40020428 	.word	0x40020428
 800de44:	40020440 	.word	0x40020440
 800de48:	40020458 	.word	0x40020458
 800de4c:	40020470 	.word	0x40020470
 800de50:	40020488 	.word	0x40020488
 800de54:	400204a0 	.word	0x400204a0
 800de58:	400204b8 	.word	0x400204b8
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	bf0c      	ite	eq
 800de68:	2301      	moveq	r3, #1
 800de6a:	2300      	movne	r3, #0
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800de72:	2301      	movs	r3, #1
 800de74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7fc fdf0 	bl	800aa5c <HAL_DMA_GetError>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d00e      	beq.n	800dea0 <I2C_DMAError+0x26c>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	685a      	ldr	r2, [r3, #4]
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de96:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800de98:	2110      	movs	r1, #16
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7ff fcf8 	bl	800d890 <I2C_ITError>
  }
}
 800dea0:	bf00      	nop
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec2:	2200      	movs	r2, #0
 800dec4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded2:	2200      	movs	r2, #0
 800ded4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff fdca 	bl	800da70 <I2C_TreatErrorCallback>
}
 800dedc:	bf00      	nop
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b087      	sub	sp, #28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	607b      	str	r3, [r7, #4]
 800deee:	460b      	mov	r3, r1
 800def0:	817b      	strh	r3, [r7, #10]
 800def2:	4613      	mov	r3, r2
 800def4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800def6:	897b      	ldrh	r3, [r7, #10]
 800def8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800defc:	7a7b      	ldrb	r3, [r7, #9]
 800defe:	041b      	lsls	r3, r3, #16
 800df00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800df04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	0d5b      	lsrs	r3, r3, #21
 800df1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800df22:	4b08      	ldr	r3, [pc, #32]	; (800df44 <I2C_TransferConfig+0x60>)
 800df24:	430b      	orrs	r3, r1
 800df26:	43db      	mvns	r3, r3
 800df28:	ea02 0103 	and.w	r1, r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	430a      	orrs	r2, r1
 800df34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800df36:	bf00      	nop
 800df38:	371c      	adds	r7, #28
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	03ff63ff 	.word	0x03ff63ff

0800df48 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5c:	4a39      	ldr	r2, [pc, #228]	; (800e044 <I2C_Enable_IRQ+0xfc>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d032      	beq.n	800dfc8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800df66:	4a38      	ldr	r2, [pc, #224]	; (800e048 <I2C_Enable_IRQ+0x100>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d02d      	beq.n	800dfc8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800df70:	4a36      	ldr	r2, [pc, #216]	; (800e04c <I2C_Enable_IRQ+0x104>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d028      	beq.n	800dfc8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800df76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da03      	bge.n	800df86 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800df84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800df86:	887b      	ldrh	r3, [r7, #2]
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800df96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800df98:	887b      	ldrh	r3, [r7, #2]
 800df9a:	f003 0302 	and.w	r3, r3, #2
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dfa8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dfaa:	887b      	ldrh	r3, [r7, #2]
 800dfac:	2b10      	cmp	r3, #16
 800dfae:	d103      	bne.n	800dfb8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dfb6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dfb8:	887b      	ldrh	r3, [r7, #2]
 800dfba:	2b20      	cmp	r3, #32
 800dfbc:	d133      	bne.n	800e026 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f043 0320 	orr.w	r3, r3, #32
 800dfc4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dfc6:	e02e      	b.n	800e026 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dfc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da03      	bge.n	800dfd8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dfd6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dfd8:	887b      	ldrh	r3, [r7, #2]
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dfe8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dfea:	887b      	ldrh	r3, [r7, #2]
 800dfec:	f003 0302 	and.w	r3, r3, #2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d003      	beq.n	800dffc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dffa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dffc:	887b      	ldrh	r3, [r7, #2]
 800dffe:	2b10      	cmp	r3, #16
 800e000:	d103      	bne.n	800e00a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e008:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e00a:	887b      	ldrh	r3, [r7, #2]
 800e00c:	2b20      	cmp	r3, #32
 800e00e:	d103      	bne.n	800e018 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e016:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e018:	887b      	ldrh	r3, [r7, #2]
 800e01a:	2b40      	cmp	r3, #64	; 0x40
 800e01c:	d103      	bne.n	800e026 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e024:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	6819      	ldr	r1, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	430a      	orrs	r2, r1
 800e034:	601a      	str	r2, [r3, #0]
}
 800e036:	bf00      	nop
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	0800c74f 	.word	0x0800c74f
 800e048:	0800cb95 	.word	0x0800cb95
 800e04c:	0800c935 	.word	0x0800c935

0800e050 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e05c:	2300      	movs	r3, #0
 800e05e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e060:	887b      	ldrh	r3, [r7, #2]
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00f      	beq.n	800e08a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e070:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e07e:	2b28      	cmp	r3, #40	; 0x28
 800e080:	d003      	beq.n	800e08a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e088:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e08a:	887b      	ldrh	r3, [r7, #2]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00f      	beq.n	800e0b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e09a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e0a8:	2b28      	cmp	r3, #40	; 0x28
 800e0aa:	d003      	beq.n	800e0b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e0b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e0b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	da03      	bge.n	800e0c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e0c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e0c4:	887b      	ldrh	r3, [r7, #2]
 800e0c6:	2b10      	cmp	r3, #16
 800e0c8:	d103      	bne.n	800e0d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e0d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e0d2:	887b      	ldrh	r3, [r7, #2]
 800e0d4:	2b20      	cmp	r3, #32
 800e0d6:	d103      	bne.n	800e0e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f043 0320 	orr.w	r3, r3, #32
 800e0de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e0e0:	887b      	ldrh	r3, [r7, #2]
 800e0e2:	2b40      	cmp	r3, #64	; 0x40
 800e0e4:	d103      	bne.n	800e0ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6819      	ldr	r1, [r3, #0]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	43da      	mvns	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	400a      	ands	r2, r1
 800e0fe:	601a      	str	r2, [r3, #0]
}
 800e100:	bf00      	nop
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d138      	bne.n	800e194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d101      	bne.n	800e130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e12c:	2302      	movs	r3, #2
 800e12e:	e032      	b.n	800e196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2224      	movs	r2, #36	; 0x24
 800e13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f022 0201 	bic.w	r2, r2, #1
 800e14e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e15e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6819      	ldr	r1, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	430a      	orrs	r2, r1
 800e16e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f042 0201 	orr.w	r2, r2, #1
 800e17e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2220      	movs	r2, #32
 800e184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	e000      	b.n	800e196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e194:	2302      	movs	r3, #2
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b085      	sub	sp, #20
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b20      	cmp	r3, #32
 800e1b6:	d139      	bne.n	800e22c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d101      	bne.n	800e1c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e033      	b.n	800e22e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2224      	movs	r2, #36	; 0x24
 800e1d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f022 0201 	bic.w	r2, r2, #1
 800e1e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e1f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	021b      	lsls	r3, r3, #8
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f042 0201 	orr.w	r2, r2, #1
 800e216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2220      	movs	r2, #32
 800e21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	e000      	b.n	800e22e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e22c:	2302      	movs	r3, #2
  }
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
	...

0800e23c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e244:	4b0d      	ldr	r3, [pc, #52]	; (800e27c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e24a:	4a0c      	ldr	r2, [pc, #48]	; (800e27c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e24c:	f043 0302 	orr.w	r3, r3, #2
 800e250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800e254:	4b09      	ldr	r3, [pc, #36]	; (800e27c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e25a:	f003 0302 	and.w	r3, r3, #2
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800e262:	4b07      	ldr	r3, [pc, #28]	; (800e280 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	4906      	ldr	r1, [pc, #24]	; (800e280 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	604b      	str	r3, [r1, #4]
}
 800e26e:	bf00      	nop
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	58024400 	.word	0x58024400
 800e280:	58000400 	.word	0x58000400

0800e284 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800e2b0:	4b18      	ldr	r3, [pc, #96]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f023 0201 	bic.w	r2, r3, #1
 800e2b8:	4916      	ldr	r1, [pc, #88]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800e2c0:	4b14      	ldr	r3, [pc, #80]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	4a13      	ldr	r2, [pc, #76]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2c6:	f023 0305 	bic.w	r3, r3, #5
 800e2ca:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800e2cc:	4b11      	ldr	r3, [pc, #68]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	4a10      	ldr	r2, [pc, #64]	; (800e314 <HAL_PWR_EnterSTOPMode+0x70>)
 800e2d2:	f023 0302 	bic.w	r3, r3, #2
 800e2d6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800e2d8:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <HAL_PWR_EnterSTOPMode+0x74>)
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	4a0e      	ldr	r2, [pc, #56]	; (800e318 <HAL_PWR_EnterSTOPMode+0x74>)
 800e2de:	f043 0304 	orr.w	r3, r3, #4
 800e2e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800e2e4:	f3bf 8f4f 	dsb	sy
}
 800e2e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e2ea:	f3bf 8f6f 	isb	sy
}
 800e2ee:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800e2f0:	78fb      	ldrb	r3, [r7, #3]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d101      	bne.n	800e2fa <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800e2f6:	bf30      	wfi
 800e2f8:	e000      	b.n	800e2fc <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800e2fa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800e2fc:	4b06      	ldr	r3, [pc, #24]	; (800e318 <HAL_PWR_EnterSTOPMode+0x74>)
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	4a05      	ldr	r2, [pc, #20]	; (800e318 <HAL_PWR_EnterSTOPMode+0x74>)
 800e302:	f023 0304 	bic.w	r3, r3, #4
 800e306:	6113      	str	r3, [r2, #16]
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	58024800 	.word	0x58024800
 800e318:	e000ed00 	.word	0xe000ed00

0800e31c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e324:	4b19      	ldr	r3, [pc, #100]	; (800e38c <HAL_PWREx_ConfigSupply+0x70>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f003 0304 	and.w	r3, r3, #4
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d00a      	beq.n	800e346 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e330:	4b16      	ldr	r3, [pc, #88]	; (800e38c <HAL_PWREx_ConfigSupply+0x70>)
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	f003 0307 	and.w	r3, r3, #7
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d001      	beq.n	800e342 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e01f      	b.n	800e382 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	e01d      	b.n	800e382 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e346:	4b11      	ldr	r3, [pc, #68]	; (800e38c <HAL_PWREx_ConfigSupply+0x70>)
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	f023 0207 	bic.w	r2, r3, #7
 800e34e:	490f      	ldr	r1, [pc, #60]	; (800e38c <HAL_PWREx_ConfigSupply+0x70>)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4313      	orrs	r3, r2
 800e354:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e356:	f7f7 fff7 	bl	8006348 <HAL_GetTick>
 800e35a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e35c:	e009      	b.n	800e372 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e35e:	f7f7 fff3 	bl	8006348 <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e36c:	d901      	bls.n	800e372 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e007      	b.n	800e382 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e372:	4b06      	ldr	r3, [pc, #24]	; (800e38c <HAL_PWREx_ConfigSupply+0x70>)
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e37e:	d1ee      	bne.n	800e35e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	58024800 	.word	0x58024800

0800e390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08c      	sub	sp, #48	; 0x30
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	f000 bc48 	b.w	800ec34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f000 8088 	beq.w	800e4c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e3b2:	4b99      	ldr	r3, [pc, #612]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e3bc:	4b96      	ldr	r3, [pc, #600]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	2b10      	cmp	r3, #16
 800e3c6:	d007      	beq.n	800e3d8 <HAL_RCC_OscConfig+0x48>
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	2b18      	cmp	r3, #24
 800e3cc:	d111      	bne.n	800e3f2 <HAL_RCC_OscConfig+0x62>
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	f003 0303 	and.w	r3, r3, #3
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d10c      	bne.n	800e3f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e3d8:	4b8f      	ldr	r3, [pc, #572]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d06d      	beq.n	800e4c0 <HAL_RCC_OscConfig+0x130>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d169      	bne.n	800e4c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f000 bc21 	b.w	800ec34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3fa:	d106      	bne.n	800e40a <HAL_RCC_OscConfig+0x7a>
 800e3fc:	4b86      	ldr	r3, [pc, #536]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a85      	ldr	r2, [pc, #532]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	e02e      	b.n	800e468 <HAL_RCC_OscConfig+0xd8>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10c      	bne.n	800e42c <HAL_RCC_OscConfig+0x9c>
 800e412:	4b81      	ldr	r3, [pc, #516]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	4a80      	ldr	r2, [pc, #512]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e41c:	6013      	str	r3, [r2, #0]
 800e41e:	4b7e      	ldr	r3, [pc, #504]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a7d      	ldr	r2, [pc, #500]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e428:	6013      	str	r3, [r2, #0]
 800e42a:	e01d      	b.n	800e468 <HAL_RCC_OscConfig+0xd8>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e434:	d10c      	bne.n	800e450 <HAL_RCC_OscConfig+0xc0>
 800e436:	4b78      	ldr	r3, [pc, #480]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a77      	ldr	r2, [pc, #476]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e43c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e440:	6013      	str	r3, [r2, #0]
 800e442:	4b75      	ldr	r3, [pc, #468]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a74      	ldr	r2, [pc, #464]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e44c:	6013      	str	r3, [r2, #0]
 800e44e:	e00b      	b.n	800e468 <HAL_RCC_OscConfig+0xd8>
 800e450:	4b71      	ldr	r3, [pc, #452]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a70      	ldr	r2, [pc, #448]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e45a:	6013      	str	r3, [r2, #0]
 800e45c:	4b6e      	ldr	r3, [pc, #440]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a6d      	ldr	r2, [pc, #436]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d013      	beq.n	800e498 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e470:	f7f7 ff6a 	bl	8006348 <HAL_GetTick>
 800e474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e476:	e008      	b.n	800e48a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e478:	f7f7 ff66 	bl	8006348 <HAL_GetTick>
 800e47c:	4602      	mov	r2, r0
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	2b64      	cmp	r3, #100	; 0x64
 800e484:	d901      	bls.n	800e48a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e486:	2303      	movs	r3, #3
 800e488:	e3d4      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e48a:	4b63      	ldr	r3, [pc, #396]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e492:	2b00      	cmp	r3, #0
 800e494:	d0f0      	beq.n	800e478 <HAL_RCC_OscConfig+0xe8>
 800e496:	e014      	b.n	800e4c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e498:	f7f7 ff56 	bl	8006348 <HAL_GetTick>
 800e49c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e49e:	e008      	b.n	800e4b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e4a0:	f7f7 ff52 	bl	8006348 <HAL_GetTick>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	2b64      	cmp	r3, #100	; 0x64
 800e4ac:	d901      	bls.n	800e4b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	e3c0      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e4b2:	4b59      	ldr	r3, [pc, #356]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1f0      	bne.n	800e4a0 <HAL_RCC_OscConfig+0x110>
 800e4be:	e000      	b.n	800e4c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e4c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f003 0302 	and.w	r3, r3, #2
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 80ca 	beq.w	800e664 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e4d0:	4b51      	ldr	r3, [pc, #324]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e4da:	4b4f      	ldr	r3, [pc, #316]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d007      	beq.n	800e4f6 <HAL_RCC_OscConfig+0x166>
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2b18      	cmp	r3, #24
 800e4ea:	d156      	bne.n	800e59a <HAL_RCC_OscConfig+0x20a>
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	f003 0303 	and.w	r3, r3, #3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d151      	bne.n	800e59a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e4f6:	4b48      	ldr	r3, [pc, #288]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f003 0304 	and.w	r3, r3, #4
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d005      	beq.n	800e50e <HAL_RCC_OscConfig+0x17e>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e392      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e50e:	4b42      	ldr	r3, [pc, #264]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f023 0219 	bic.w	r2, r3, #25
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	493f      	ldr	r1, [pc, #252]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e51c:	4313      	orrs	r3, r2
 800e51e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e520:	f7f7 ff12 	bl	8006348 <HAL_GetTick>
 800e524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e526:	e008      	b.n	800e53a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e528:	f7f7 ff0e 	bl	8006348 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	2b02      	cmp	r3, #2
 800e534:	d901      	bls.n	800e53a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e536:	2303      	movs	r3, #3
 800e538:	e37c      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e53a:	4b37      	ldr	r3, [pc, #220]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f003 0304 	and.w	r3, r3, #4
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0f0      	beq.n	800e528 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e546:	f7f7 ff0b 	bl	8006360 <HAL_GetREVID>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f241 0203 	movw	r2, #4099	; 0x1003
 800e550:	4293      	cmp	r3, r2
 800e552:	d817      	bhi.n	800e584 <HAL_RCC_OscConfig+0x1f4>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	2b40      	cmp	r3, #64	; 0x40
 800e55a:	d108      	bne.n	800e56e <HAL_RCC_OscConfig+0x1de>
 800e55c:	4b2e      	ldr	r3, [pc, #184]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e564:	4a2c      	ldr	r2, [pc, #176]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e56a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e56c:	e07a      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e56e:	4b2a      	ldr	r3, [pc, #168]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	031b      	lsls	r3, r3, #12
 800e57c:	4926      	ldr	r1, [pc, #152]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e57e:	4313      	orrs	r3, r2
 800e580:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e582:	e06f      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e584:	4b24      	ldr	r3, [pc, #144]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	691b      	ldr	r3, [r3, #16]
 800e590:	061b      	lsls	r3, r3, #24
 800e592:	4921      	ldr	r1, [pc, #132]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e594:	4313      	orrs	r3, r2
 800e596:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e598:	e064      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d047      	beq.n	800e632 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e5a2:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f023 0219 	bic.w	r2, r3, #25
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	491a      	ldr	r1, [pc, #104]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5b4:	f7f7 fec8 	bl	8006348 <HAL_GetTick>
 800e5b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5ba:	e008      	b.n	800e5ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e5bc:	f7f7 fec4 	bl	8006348 <HAL_GetTick>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d901      	bls.n	800e5ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	e332      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5ce:	4b12      	ldr	r3, [pc, #72]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 0304 	and.w	r3, r3, #4
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0f0      	beq.n	800e5bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5da:	f7f7 fec1 	bl	8006360 <HAL_GetREVID>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	f241 0203 	movw	r2, #4099	; 0x1003
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d819      	bhi.n	800e61c <HAL_RCC_OscConfig+0x28c>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	2b40      	cmp	r3, #64	; 0x40
 800e5ee:	d108      	bne.n	800e602 <HAL_RCC_OscConfig+0x272>
 800e5f0:	4b09      	ldr	r3, [pc, #36]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e5f8:	4a07      	ldr	r2, [pc, #28]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e5fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5fe:	6053      	str	r3, [r2, #4]
 800e600:	e030      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	031b      	lsls	r3, r3, #12
 800e610:	4901      	ldr	r1, [pc, #4]	; (800e618 <HAL_RCC_OscConfig+0x288>)
 800e612:	4313      	orrs	r3, r2
 800e614:	604b      	str	r3, [r1, #4]
 800e616:	e025      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
 800e618:	58024400 	.word	0x58024400
 800e61c:	4b9a      	ldr	r3, [pc, #616]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	061b      	lsls	r3, r3, #24
 800e62a:	4997      	ldr	r1, [pc, #604]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e62c:	4313      	orrs	r3, r2
 800e62e:	604b      	str	r3, [r1, #4]
 800e630:	e018      	b.n	800e664 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e632:	4b95      	ldr	r3, [pc, #596]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a94      	ldr	r2, [pc, #592]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e638:	f023 0301 	bic.w	r3, r3, #1
 800e63c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e63e:	f7f7 fe83 	bl	8006348 <HAL_GetTick>
 800e642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e644:	e008      	b.n	800e658 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e646:	f7f7 fe7f 	bl	8006348 <HAL_GetTick>
 800e64a:	4602      	mov	r2, r0
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	2b02      	cmp	r3, #2
 800e652:	d901      	bls.n	800e658 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e654:	2303      	movs	r3, #3
 800e656:	e2ed      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e658:	4b8b      	ldr	r3, [pc, #556]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1f0      	bne.n	800e646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0310 	and.w	r3, r3, #16
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 80a9 	beq.w	800e7c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e672:	4b85      	ldr	r3, [pc, #532]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e67a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e67c:	4b82      	ldr	r3, [pc, #520]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2b08      	cmp	r3, #8
 800e686:	d007      	beq.n	800e698 <HAL_RCC_OscConfig+0x308>
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	2b18      	cmp	r3, #24
 800e68c:	d13a      	bne.n	800e704 <HAL_RCC_OscConfig+0x374>
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f003 0303 	and.w	r3, r3, #3
 800e694:	2b01      	cmp	r3, #1
 800e696:	d135      	bne.n	800e704 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e698:	4b7b      	ldr	r3, [pc, #492]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d005      	beq.n	800e6b0 <HAL_RCC_OscConfig+0x320>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	2b80      	cmp	r3, #128	; 0x80
 800e6aa:	d001      	beq.n	800e6b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e2c1      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e6b0:	f7f7 fe56 	bl	8006360 <HAL_GetREVID>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f241 0203 	movw	r2, #4099	; 0x1003
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d817      	bhi.n	800e6ee <HAL_RCC_OscConfig+0x35e>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	2b20      	cmp	r3, #32
 800e6c4:	d108      	bne.n	800e6d8 <HAL_RCC_OscConfig+0x348>
 800e6c6:	4b70      	ldr	r3, [pc, #448]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e6ce:	4a6e      	ldr	r2, [pc, #440]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e6d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e6d6:	e075      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e6d8:	4b6b      	ldr	r3, [pc, #428]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a1b      	ldr	r3, [r3, #32]
 800e6e4:	069b      	lsls	r3, r3, #26
 800e6e6:	4968      	ldr	r1, [pc, #416]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e6ec:	e06a      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e6ee:	4b66      	ldr	r3, [pc, #408]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a1b      	ldr	r3, [r3, #32]
 800e6fa:	061b      	lsls	r3, r3, #24
 800e6fc:	4962      	ldr	r1, [pc, #392]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e702:	e05f      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	69db      	ldr	r3, [r3, #28]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d042      	beq.n	800e792 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e70c:	4b5e      	ldr	r3, [pc, #376]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a5d      	ldr	r2, [pc, #372]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e718:	f7f7 fe16 	bl	8006348 <HAL_GetTick>
 800e71c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e71e:	e008      	b.n	800e732 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e720:	f7f7 fe12 	bl	8006348 <HAL_GetTick>
 800e724:	4602      	mov	r2, r0
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d901      	bls.n	800e732 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e72e:	2303      	movs	r3, #3
 800e730:	e280      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e732:	4b55      	ldr	r3, [pc, #340]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0f0      	beq.n	800e720 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e73e:	f7f7 fe0f 	bl	8006360 <HAL_GetREVID>
 800e742:	4603      	mov	r3, r0
 800e744:	f241 0203 	movw	r2, #4099	; 0x1003
 800e748:	4293      	cmp	r3, r2
 800e74a:	d817      	bhi.n	800e77c <HAL_RCC_OscConfig+0x3ec>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a1b      	ldr	r3, [r3, #32]
 800e750:	2b20      	cmp	r3, #32
 800e752:	d108      	bne.n	800e766 <HAL_RCC_OscConfig+0x3d6>
 800e754:	4b4c      	ldr	r3, [pc, #304]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e75c:	4a4a      	ldr	r2, [pc, #296]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e75e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e762:	6053      	str	r3, [r2, #4]
 800e764:	e02e      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
 800e766:	4b48      	ldr	r3, [pc, #288]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	069b      	lsls	r3, r3, #26
 800e774:	4944      	ldr	r1, [pc, #272]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e776:	4313      	orrs	r3, r2
 800e778:	604b      	str	r3, [r1, #4]
 800e77a:	e023      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
 800e77c:	4b42      	ldr	r3, [pc, #264]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a1b      	ldr	r3, [r3, #32]
 800e788:	061b      	lsls	r3, r3, #24
 800e78a:	493f      	ldr	r1, [pc, #252]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60cb      	str	r3, [r1, #12]
 800e790:	e018      	b.n	800e7c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e792:	4b3d      	ldr	r3, [pc, #244]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a3c      	ldr	r2, [pc, #240]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e79c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e79e:	f7f7 fdd3 	bl	8006348 <HAL_GetTick>
 800e7a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e7a4:	e008      	b.n	800e7b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e7a6:	f7f7 fdcf 	bl	8006348 <HAL_GetTick>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d901      	bls.n	800e7b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	e23d      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e7b8:	4b33      	ldr	r3, [pc, #204]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1f0      	bne.n	800e7a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f003 0308 	and.w	r3, r3, #8
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d036      	beq.n	800e83e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	695b      	ldr	r3, [r3, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d019      	beq.n	800e80c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e7d8:	4b2b      	ldr	r3, [pc, #172]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7dc:	4a2a      	ldr	r2, [pc, #168]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e7de:	f043 0301 	orr.w	r3, r3, #1
 800e7e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7e4:	f7f7 fdb0 	bl	8006348 <HAL_GetTick>
 800e7e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e7ea:	e008      	b.n	800e7fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e7ec:	f7f7 fdac 	bl	8006348 <HAL_GetTick>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d901      	bls.n	800e7fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e21a      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e7fe:	4b22      	ldr	r3, [pc, #136]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e802:	f003 0302 	and.w	r3, r3, #2
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0f0      	beq.n	800e7ec <HAL_RCC_OscConfig+0x45c>
 800e80a:	e018      	b.n	800e83e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e80c:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e810:	4a1d      	ldr	r2, [pc, #116]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e812:	f023 0301 	bic.w	r3, r3, #1
 800e816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e818:	f7f7 fd96 	bl	8006348 <HAL_GetTick>
 800e81c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e81e:	e008      	b.n	800e832 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e820:	f7f7 fd92 	bl	8006348 <HAL_GetTick>
 800e824:	4602      	mov	r2, r0
 800e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e828:	1ad3      	subs	r3, r2, r3
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	d901      	bls.n	800e832 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e82e:	2303      	movs	r3, #3
 800e830:	e200      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e832:	4b15      	ldr	r3, [pc, #84]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e836:	f003 0302 	and.w	r3, r3, #2
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1f0      	bne.n	800e820 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f003 0320 	and.w	r3, r3, #32
 800e846:	2b00      	cmp	r3, #0
 800e848:	d039      	beq.n	800e8be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d01c      	beq.n	800e88c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e852:	4b0d      	ldr	r3, [pc, #52]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a0c      	ldr	r2, [pc, #48]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e85c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e85e:	f7f7 fd73 	bl	8006348 <HAL_GetTick>
 800e862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e864:	e008      	b.n	800e878 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e866:	f7f7 fd6f 	bl	8006348 <HAL_GetTick>
 800e86a:	4602      	mov	r2, r0
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	2b02      	cmp	r3, #2
 800e872:	d901      	bls.n	800e878 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e874:	2303      	movs	r3, #3
 800e876:	e1dd      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e878:	4b03      	ldr	r3, [pc, #12]	; (800e888 <HAL_RCC_OscConfig+0x4f8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e880:	2b00      	cmp	r3, #0
 800e882:	d0f0      	beq.n	800e866 <HAL_RCC_OscConfig+0x4d6>
 800e884:	e01b      	b.n	800e8be <HAL_RCC_OscConfig+0x52e>
 800e886:	bf00      	nop
 800e888:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e88c:	4b9b      	ldr	r3, [pc, #620]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a9a      	ldr	r2, [pc, #616]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e898:	f7f7 fd56 	bl	8006348 <HAL_GetTick>
 800e89c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e89e:	e008      	b.n	800e8b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e8a0:	f7f7 fd52 	bl	8006348 <HAL_GetTick>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d901      	bls.n	800e8b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	e1c0      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e8b2:	4b92      	ldr	r3, [pc, #584]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1f0      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 8081 	beq.w	800e9ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e8cc:	4b8c      	ldr	r3, [pc, #560]	; (800eb00 <HAL_RCC_OscConfig+0x770>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a8b      	ldr	r2, [pc, #556]	; (800eb00 <HAL_RCC_OscConfig+0x770>)
 800e8d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e8d8:	f7f7 fd36 	bl	8006348 <HAL_GetTick>
 800e8dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e8de:	e008      	b.n	800e8f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8e0:	f7f7 fd32 	bl	8006348 <HAL_GetTick>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	1ad3      	subs	r3, r2, r3
 800e8ea:	2b64      	cmp	r3, #100	; 0x64
 800e8ec:	d901      	bls.n	800e8f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e1a0      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e8f2:	4b83      	ldr	r3, [pc, #524]	; (800eb00 <HAL_RCC_OscConfig+0x770>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0f0      	beq.n	800e8e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d106      	bne.n	800e914 <HAL_RCC_OscConfig+0x584>
 800e906:	4b7d      	ldr	r3, [pc, #500]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	4a7c      	ldr	r2, [pc, #496]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e90c:	f043 0301 	orr.w	r3, r3, #1
 800e910:	6713      	str	r3, [r2, #112]	; 0x70
 800e912:	e02d      	b.n	800e970 <HAL_RCC_OscConfig+0x5e0>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10c      	bne.n	800e936 <HAL_RCC_OscConfig+0x5a6>
 800e91c:	4b77      	ldr	r3, [pc, #476]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e920:	4a76      	ldr	r2, [pc, #472]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e922:	f023 0301 	bic.w	r3, r3, #1
 800e926:	6713      	str	r3, [r2, #112]	; 0x70
 800e928:	4b74      	ldr	r3, [pc, #464]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e92c:	4a73      	ldr	r2, [pc, #460]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e92e:	f023 0304 	bic.w	r3, r3, #4
 800e932:	6713      	str	r3, [r2, #112]	; 0x70
 800e934:	e01c      	b.n	800e970 <HAL_RCC_OscConfig+0x5e0>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	2b05      	cmp	r3, #5
 800e93c:	d10c      	bne.n	800e958 <HAL_RCC_OscConfig+0x5c8>
 800e93e:	4b6f      	ldr	r3, [pc, #444]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e942:	4a6e      	ldr	r2, [pc, #440]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e944:	f043 0304 	orr.w	r3, r3, #4
 800e948:	6713      	str	r3, [r2, #112]	; 0x70
 800e94a:	4b6c      	ldr	r3, [pc, #432]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94e:	4a6b      	ldr	r2, [pc, #428]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e950:	f043 0301 	orr.w	r3, r3, #1
 800e954:	6713      	str	r3, [r2, #112]	; 0x70
 800e956:	e00b      	b.n	800e970 <HAL_RCC_OscConfig+0x5e0>
 800e958:	4b68      	ldr	r3, [pc, #416]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95c:	4a67      	ldr	r2, [pc, #412]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e95e:	f023 0301 	bic.w	r3, r3, #1
 800e962:	6713      	str	r3, [r2, #112]	; 0x70
 800e964:	4b65      	ldr	r3, [pc, #404]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e968:	4a64      	ldr	r2, [pc, #400]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e96a:	f023 0304 	bic.w	r3, r3, #4
 800e96e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d015      	beq.n	800e9a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e978:	f7f7 fce6 	bl	8006348 <HAL_GetTick>
 800e97c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e97e:	e00a      	b.n	800e996 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e980:	f7f7 fce2 	bl	8006348 <HAL_GetTick>
 800e984:	4602      	mov	r2, r0
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e98e:	4293      	cmp	r3, r2
 800e990:	d901      	bls.n	800e996 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e992:	2303      	movs	r3, #3
 800e994:	e14e      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e996:	4b59      	ldr	r3, [pc, #356]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0ee      	beq.n	800e980 <HAL_RCC_OscConfig+0x5f0>
 800e9a2:	e014      	b.n	800e9ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9a4:	f7f7 fcd0 	bl	8006348 <HAL_GetTick>
 800e9a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e9aa:	e00a      	b.n	800e9c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e9ac:	f7f7 fccc 	bl	8006348 <HAL_GetTick>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d901      	bls.n	800e9c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e9be:	2303      	movs	r3, #3
 800e9c0:	e138      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e9c2:	4b4e      	ldr	r3, [pc, #312]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c6:	f003 0302 	and.w	r3, r3, #2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1ee      	bne.n	800e9ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 812d 	beq.w	800ec32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e9d8:	4b48      	ldr	r3, [pc, #288]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9e0:	2b18      	cmp	r3, #24
 800e9e2:	f000 80bd 	beq.w	800eb60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	f040 809e 	bne.w	800eb2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9f0:	4b42      	ldr	r3, [pc, #264]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a41      	ldr	r2, [pc, #260]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800e9f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9fc:	f7f7 fca4 	bl	8006348 <HAL_GetTick>
 800ea00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ea02:	e008      	b.n	800ea16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea04:	f7f7 fca0 	bl	8006348 <HAL_GetTick>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d901      	bls.n	800ea16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ea12:	2303      	movs	r3, #3
 800ea14:	e10e      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ea16:	4b39      	ldr	r3, [pc, #228]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1f0      	bne.n	800ea04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ea22:	4b36      	ldr	r3, [pc, #216]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea26:	4b37      	ldr	r3, [pc, #220]	; (800eb04 <HAL_RCC_OscConfig+0x774>)
 800ea28:	4013      	ands	r3, r2
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ea32:	0112      	lsls	r2, r2, #4
 800ea34:	430a      	orrs	r2, r1
 800ea36:	4931      	ldr	r1, [pc, #196]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	628b      	str	r3, [r1, #40]	; 0x28
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea40:	3b01      	subs	r3, #1
 800ea42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	025b      	lsls	r3, r3, #9
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	431a      	orrs	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea56:	3b01      	subs	r3, #1
 800ea58:	041b      	lsls	r3, r3, #16
 800ea5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea64:	3b01      	subs	r3, #1
 800ea66:	061b      	lsls	r3, r3, #24
 800ea68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ea6c:	4923      	ldr	r1, [pc, #140]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ea72:	4b22      	ldr	r3, [pc, #136]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	4a21      	ldr	r2, [pc, #132]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea78:	f023 0301 	bic.w	r3, r3, #1
 800ea7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ea7e:	4b1f      	ldr	r3, [pc, #124]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea82:	4b21      	ldr	r3, [pc, #132]	; (800eb08 <HAL_RCC_OscConfig+0x778>)
 800ea84:	4013      	ands	r3, r2
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ea8a:	00d2      	lsls	r2, r2, #3
 800ea8c:	491b      	ldr	r1, [pc, #108]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ea92:	4b1a      	ldr	r3, [pc, #104]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ea94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea96:	f023 020c 	bic.w	r2, r3, #12
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea9e:	4917      	ldr	r1, [pc, #92]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800eaa4:	4b15      	ldr	r3, [pc, #84]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa8:	f023 0202 	bic.w	r2, r3, #2
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab0:	4912      	ldr	r1, [pc, #72]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eab2:	4313      	orrs	r3, r2
 800eab4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eab6:	4b11      	ldr	r3, [pc, #68]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eabc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eac2:	4b0e      	ldr	r3, [pc, #56]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac6:	4a0d      	ldr	r2, [pc, #52]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eacc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800eace:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	4a0a      	ldr	r2, [pc, #40]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800ead4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ead8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800eada:	4b08      	ldr	r3, [pc, #32]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	4a07      	ldr	r2, [pc, #28]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eae0:	f043 0301 	orr.w	r3, r3, #1
 800eae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eae6:	4b05      	ldr	r3, [pc, #20]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a04      	ldr	r2, [pc, #16]	; (800eafc <HAL_RCC_OscConfig+0x76c>)
 800eaec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eaf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaf2:	f7f7 fc29 	bl	8006348 <HAL_GetTick>
 800eaf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eaf8:	e011      	b.n	800eb1e <HAL_RCC_OscConfig+0x78e>
 800eafa:	bf00      	nop
 800eafc:	58024400 	.word	0x58024400
 800eb00:	58024800 	.word	0x58024800
 800eb04:	fffffc0c 	.word	0xfffffc0c
 800eb08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb0c:	f7f7 fc1c 	bl	8006348 <HAL_GetTick>
 800eb10:	4602      	mov	r2, r0
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d901      	bls.n	800eb1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	e08a      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eb1e:	4b47      	ldr	r3, [pc, #284]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d0f0      	beq.n	800eb0c <HAL_RCC_OscConfig+0x77c>
 800eb2a:	e082      	b.n	800ec32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb2c:	4b43      	ldr	r3, [pc, #268]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a42      	ldr	r2, [pc, #264]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eb36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb38:	f7f7 fc06 	bl	8006348 <HAL_GetTick>
 800eb3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eb3e:	e008      	b.n	800eb52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb40:	f7f7 fc02 	bl	8006348 <HAL_GetTick>
 800eb44:	4602      	mov	r2, r0
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	1ad3      	subs	r3, r2, r3
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d901      	bls.n	800eb52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800eb4e:	2303      	movs	r3, #3
 800eb50:	e070      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eb52:	4b3a      	ldr	r3, [pc, #232]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f0      	bne.n	800eb40 <HAL_RCC_OscConfig+0x7b0>
 800eb5e:	e068      	b.n	800ec32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800eb60:	4b36      	ldr	r3, [pc, #216]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800eb66:	4b35      	ldr	r3, [pc, #212]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800eb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d031      	beq.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	f003 0203 	and.w	r2, r3, #3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d12a      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	091b      	lsrs	r3, r3, #4
 800eb86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d122      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d11a      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	0a5b      	lsrs	r3, r3, #9
 800eba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d111      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	0c1b      	lsrs	r3, r3, #16
 800ebb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d108      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	0e1b      	lsrs	r3, r3, #24
 800ebca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d001      	beq.n	800ebdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e02b      	b.n	800ec34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ebdc:	4b17      	ldr	r3, [pc, #92]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ebde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe0:	08db      	lsrs	r3, r3, #3
 800ebe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebe6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d01f      	beq.n	800ec32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ebf2:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ebf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf6:	4a11      	ldr	r2, [pc, #68]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ebf8:	f023 0301 	bic.w	r3, r3, #1
 800ebfc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ebfe:	f7f7 fba3 	bl	8006348 <HAL_GetTick>
 800ec02:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ec04:	bf00      	nop
 800ec06:	f7f7 fb9f 	bl	8006348 <HAL_GetTick>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d0f9      	beq.n	800ec06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ec14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec16:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <HAL_RCC_OscConfig+0x8b0>)
 800ec18:	4013      	ands	r3, r2
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ec1e:	00d2      	lsls	r2, r2, #3
 800ec20:	4906      	ldr	r1, [pc, #24]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ec22:	4313      	orrs	r3, r2
 800ec24:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ec26:	4b05      	ldr	r3, [pc, #20]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ec28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2a:	4a04      	ldr	r2, [pc, #16]	; (800ec3c <HAL_RCC_OscConfig+0x8ac>)
 800ec2c:	f043 0301 	orr.w	r3, r3, #1
 800ec30:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3730      	adds	r7, #48	; 0x30
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	58024400 	.word	0x58024400
 800ec40:	ffff0007 	.word	0xffff0007

0800ec44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e19c      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec58:	4b8a      	ldr	r3, [pc, #552]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d910      	bls.n	800ec88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec66:	4b87      	ldr	r3, [pc, #540]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f023 020f 	bic.w	r2, r3, #15
 800ec6e:	4985      	ldr	r1, [pc, #532]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec76:	4b83      	ldr	r3, [pc, #524]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 030f 	and.w	r3, r3, #15
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d001      	beq.n	800ec88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e184      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d010      	beq.n	800ecb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	691a      	ldr	r2, [r3, #16]
 800ec98:	4b7b      	ldr	r3, [pc, #492]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d908      	bls.n	800ecb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eca4:	4b78      	ldr	r3, [pc, #480]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	4975      	ldr	r1, [pc, #468]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f003 0308 	and.w	r3, r3, #8
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d010      	beq.n	800ece4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695a      	ldr	r2, [r3, #20]
 800ecc6:	4b70      	ldr	r3, [pc, #448]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ecc8:	69db      	ldr	r3, [r3, #28]
 800ecca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d908      	bls.n	800ece4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ecd2:	4b6d      	ldr	r3, [pc, #436]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ecd4:	69db      	ldr	r3, [r3, #28]
 800ecd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	695b      	ldr	r3, [r3, #20]
 800ecde:	496a      	ldr	r1, [pc, #424]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ece0:	4313      	orrs	r3, r2
 800ece2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0310 	and.w	r3, r3, #16
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d010      	beq.n	800ed12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	699a      	ldr	r2, [r3, #24]
 800ecf4:	4b64      	ldr	r3, [pc, #400]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ecf6:	69db      	ldr	r3, [r3, #28]
 800ecf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d908      	bls.n	800ed12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ed00:	4b61      	ldr	r3, [pc, #388]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	495e      	ldr	r1, [pc, #376]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f003 0320 	and.w	r3, r3, #32
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d010      	beq.n	800ed40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	69da      	ldr	r2, [r3, #28]
 800ed22:	4b59      	ldr	r3, [pc, #356]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d908      	bls.n	800ed40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ed2e:	4b56      	ldr	r3, [pc, #344]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	4953      	ldr	r1, [pc, #332]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f003 0302 	and.w	r3, r3, #2
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d010      	beq.n	800ed6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68da      	ldr	r2, [r3, #12]
 800ed50:	4b4d      	ldr	r3, [pc, #308]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	f003 030f 	and.w	r3, r3, #15
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d908      	bls.n	800ed6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed5c:	4b4a      	ldr	r3, [pc, #296]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	f023 020f 	bic.w	r2, r3, #15
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	4947      	ldr	r1, [pc, #284]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d055      	beq.n	800ee26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ed7a:	4b43      	ldr	r3, [pc, #268]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	4940      	ldr	r1, [pc, #256]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d107      	bne.n	800eda4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ed94:	4b3c      	ldr	r3, [pc, #240]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d121      	bne.n	800ede4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e0f6      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	2b03      	cmp	r3, #3
 800edaa:	d107      	bne.n	800edbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800edac:	4b36      	ldr	r3, [pc, #216]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d115      	bne.n	800ede4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800edb8:	2301      	movs	r3, #1
 800edba:	e0ea      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d107      	bne.n	800edd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800edc4:	4b30      	ldr	r3, [pc, #192]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d109      	bne.n	800ede4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e0de      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800edd4:	4b2c      	ldr	r3, [pc, #176]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 0304 	and.w	r3, r3, #4
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e0d6      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ede4:	4b28      	ldr	r3, [pc, #160]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ede6:	691b      	ldr	r3, [r3, #16]
 800ede8:	f023 0207 	bic.w	r2, r3, #7
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4925      	ldr	r1, [pc, #148]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800edf2:	4313      	orrs	r3, r2
 800edf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edf6:	f7f7 faa7 	bl	8006348 <HAL_GetTick>
 800edfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800edfc:	e00a      	b.n	800ee14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800edfe:	f7f7 faa3 	bl	8006348 <HAL_GetTick>
 800ee02:	4602      	mov	r2, r0
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d901      	bls.n	800ee14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e0be      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee14:	4b1c      	ldr	r3, [pc, #112]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d1eb      	bne.n	800edfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f003 0302 	and.w	r3, r3, #2
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d010      	beq.n	800ee54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68da      	ldr	r2, [r3, #12]
 800ee36:	4b14      	ldr	r3, [pc, #80]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	f003 030f 	and.w	r3, r3, #15
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d208      	bcs.n	800ee54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee42:	4b11      	ldr	r3, [pc, #68]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	f023 020f 	bic.w	r2, r3, #15
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	490e      	ldr	r1, [pc, #56]	; (800ee88 <HAL_RCC_ClockConfig+0x244>)
 800ee50:	4313      	orrs	r3, r2
 800ee52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ee54:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 030f 	and.w	r3, r3, #15
 800ee5c:	683a      	ldr	r2, [r7, #0]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d214      	bcs.n	800ee8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee62:	4b08      	ldr	r3, [pc, #32]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f023 020f 	bic.w	r2, r3, #15
 800ee6a:	4906      	ldr	r1, [pc, #24]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee72:	4b04      	ldr	r3, [pc, #16]	; (800ee84 <HAL_RCC_ClockConfig+0x240>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f003 030f 	and.w	r3, r3, #15
 800ee7a:	683a      	ldr	r2, [r7, #0]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d005      	beq.n	800ee8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	e086      	b.n	800ef92 <HAL_RCC_ClockConfig+0x34e>
 800ee84:	52002000 	.word	0x52002000
 800ee88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d010      	beq.n	800eeba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	691a      	ldr	r2, [r3, #16]
 800ee9c:	4b3f      	ldr	r3, [pc, #252]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ee9e:	699b      	ldr	r3, [r3, #24]
 800eea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d208      	bcs.n	800eeba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eea8:	4b3c      	ldr	r3, [pc, #240]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eeaa:	699b      	ldr	r3, [r3, #24]
 800eeac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	4939      	ldr	r1, [pc, #228]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f003 0308 	and.w	r3, r3, #8
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d010      	beq.n	800eee8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	695a      	ldr	r2, [r3, #20]
 800eeca:	4b34      	ldr	r3, [pc, #208]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eecc:	69db      	ldr	r3, [r3, #28]
 800eece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d208      	bcs.n	800eee8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eed6:	4b31      	ldr	r3, [pc, #196]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	492e      	ldr	r1, [pc, #184]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eee4:	4313      	orrs	r3, r2
 800eee6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 0310 	and.w	r3, r3, #16
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d010      	beq.n	800ef16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	699a      	ldr	r2, [r3, #24]
 800eef8:	4b28      	ldr	r3, [pc, #160]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800eefa:	69db      	ldr	r3, [r3, #28]
 800eefc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d208      	bcs.n	800ef16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ef04:	4b25      	ldr	r3, [pc, #148]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef06:	69db      	ldr	r3, [r3, #28]
 800ef08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	699b      	ldr	r3, [r3, #24]
 800ef10:	4922      	ldr	r1, [pc, #136]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef12:	4313      	orrs	r3, r2
 800ef14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d010      	beq.n	800ef44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	69da      	ldr	r2, [r3, #28]
 800ef26:	4b1d      	ldr	r3, [pc, #116]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d208      	bcs.n	800ef44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ef32:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef34:	6a1b      	ldr	r3, [r3, #32]
 800ef36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	69db      	ldr	r3, [r3, #28]
 800ef3e:	4917      	ldr	r1, [pc, #92]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef40:	4313      	orrs	r3, r2
 800ef42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ef44:	f000 f834 	bl	800efb0 <HAL_RCC_GetSysClockFreq>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	0a1b      	lsrs	r3, r3, #8
 800ef50:	f003 030f 	and.w	r3, r3, #15
 800ef54:	4912      	ldr	r1, [pc, #72]	; (800efa0 <HAL_RCC_ClockConfig+0x35c>)
 800ef56:	5ccb      	ldrb	r3, [r1, r3]
 800ef58:	f003 031f 	and.w	r3, r3, #31
 800ef5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ef62:	4b0e      	ldr	r3, [pc, #56]	; (800ef9c <HAL_RCC_ClockConfig+0x358>)
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	f003 030f 	and.w	r3, r3, #15
 800ef6a:	4a0d      	ldr	r2, [pc, #52]	; (800efa0 <HAL_RCC_ClockConfig+0x35c>)
 800ef6c:	5cd3      	ldrb	r3, [r2, r3]
 800ef6e:	f003 031f 	and.w	r3, r3, #31
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	fa22 f303 	lsr.w	r3, r2, r3
 800ef78:	4a0a      	ldr	r2, [pc, #40]	; (800efa4 <HAL_RCC_ClockConfig+0x360>)
 800ef7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	; (800efa8 <HAL_RCC_ClockConfig+0x364>)
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ef82:	4b0a      	ldr	r3, [pc, #40]	; (800efac <HAL_RCC_ClockConfig+0x368>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7f5 fc36 	bl	80047f8 <HAL_InitTick>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	58024400 	.word	0x58024400
 800efa0:	0801b904 	.word	0x0801b904
 800efa4:	240000cc 	.word	0x240000cc
 800efa8:	240000c8 	.word	0x240000c8
 800efac:	240000d0 	.word	0x240000d0

0800efb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b089      	sub	sp, #36	; 0x24
 800efb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800efb6:	4bb3      	ldr	r3, [pc, #716]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efbe:	2b18      	cmp	r3, #24
 800efc0:	f200 8155 	bhi.w	800f26e <HAL_RCC_GetSysClockFreq+0x2be>
 800efc4:	a201      	add	r2, pc, #4	; (adr r2, 800efcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800efc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efca:	bf00      	nop
 800efcc:	0800f031 	.word	0x0800f031
 800efd0:	0800f26f 	.word	0x0800f26f
 800efd4:	0800f26f 	.word	0x0800f26f
 800efd8:	0800f26f 	.word	0x0800f26f
 800efdc:	0800f26f 	.word	0x0800f26f
 800efe0:	0800f26f 	.word	0x0800f26f
 800efe4:	0800f26f 	.word	0x0800f26f
 800efe8:	0800f26f 	.word	0x0800f26f
 800efec:	0800f057 	.word	0x0800f057
 800eff0:	0800f26f 	.word	0x0800f26f
 800eff4:	0800f26f 	.word	0x0800f26f
 800eff8:	0800f26f 	.word	0x0800f26f
 800effc:	0800f26f 	.word	0x0800f26f
 800f000:	0800f26f 	.word	0x0800f26f
 800f004:	0800f26f 	.word	0x0800f26f
 800f008:	0800f26f 	.word	0x0800f26f
 800f00c:	0800f05d 	.word	0x0800f05d
 800f010:	0800f26f 	.word	0x0800f26f
 800f014:	0800f26f 	.word	0x0800f26f
 800f018:	0800f26f 	.word	0x0800f26f
 800f01c:	0800f26f 	.word	0x0800f26f
 800f020:	0800f26f 	.word	0x0800f26f
 800f024:	0800f26f 	.word	0x0800f26f
 800f028:	0800f26f 	.word	0x0800f26f
 800f02c:	0800f063 	.word	0x0800f063
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f030:	4b94      	ldr	r3, [pc, #592]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f003 0320 	and.w	r3, r3, #32
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d009      	beq.n	800f050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f03c:	4b91      	ldr	r3, [pc, #580]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	08db      	lsrs	r3, r3, #3
 800f042:	f003 0303 	and.w	r3, r3, #3
 800f046:	4a90      	ldr	r2, [pc, #576]	; (800f288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f048:	fa22 f303 	lsr.w	r3, r2, r3
 800f04c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f04e:	e111      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f050:	4b8d      	ldr	r3, [pc, #564]	; (800f288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f052:	61bb      	str	r3, [r7, #24]
      break;
 800f054:	e10e      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f056:	4b8d      	ldr	r3, [pc, #564]	; (800f28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f058:	61bb      	str	r3, [r7, #24]
      break;
 800f05a:	e10b      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f05c:	4b8c      	ldr	r3, [pc, #560]	; (800f290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f05e:	61bb      	str	r3, [r7, #24]
      break;
 800f060:	e108      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f062:	4b88      	ldr	r3, [pc, #544]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f066:	f003 0303 	and.w	r3, r3, #3
 800f06a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f06c:	4b85      	ldr	r3, [pc, #532]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f070:	091b      	lsrs	r3, r3, #4
 800f072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f076:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f078:	4b82      	ldr	r3, [pc, #520]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f082:	4b80      	ldr	r3, [pc, #512]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f086:	08db      	lsrs	r3, r3, #3
 800f088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	fb02 f303 	mul.w	r3, r2, r3
 800f092:	ee07 3a90 	vmov	s15, r3
 800f096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f09a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 80e1 	beq.w	800f268 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	f000 8083 	beq.w	800f1b4 <HAL_RCC_GetSysClockFreq+0x204>
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	f200 80a1 	bhi.w	800f1f8 <HAL_RCC_GetSysClockFreq+0x248>
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d003      	beq.n	800f0c4 <HAL_RCC_GetSysClockFreq+0x114>
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d056      	beq.n	800f170 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f0c2:	e099      	b.n	800f1f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0c4:	4b6f      	ldr	r3, [pc, #444]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 0320 	and.w	r3, r3, #32
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d02d      	beq.n	800f12c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0d0:	4b6c      	ldr	r3, [pc, #432]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	08db      	lsrs	r3, r3, #3
 800f0d6:	f003 0303 	and.w	r3, r3, #3
 800f0da:	4a6b      	ldr	r2, [pc, #428]	; (800f288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f0e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	ee07 3a90 	vmov	s15, r3
 800f0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	ee07 3a90 	vmov	s15, r3
 800f0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0fa:	4b62      	ldr	r3, [pc, #392]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f102:	ee07 3a90 	vmov	s15, r3
 800f106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f10e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f126:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f12a:	e087      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	ee07 3a90 	vmov	s15, r3
 800f132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f136:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f13e:	4b51      	ldr	r3, [pc, #324]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f146:	ee07 3a90 	vmov	s15, r3
 800f14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f152:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f16a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f16e:	e065      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	ee07 3a90 	vmov	s15, r3
 800f176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f17a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f182:	4b40      	ldr	r3, [pc, #256]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f18a:	ee07 3a90 	vmov	s15, r3
 800f18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f192:	ed97 6a02 	vldr	s12, [r7, #8]
 800f196:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f1b2:	e043      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	ee07 3a90 	vmov	s15, r3
 800f1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f2a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1c6:	4b2f      	ldr	r3, [pc, #188]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ce:	ee07 3a90 	vmov	s15, r3
 800f1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f1f6:	e021      	b.n	800f23c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	ee07 3a90 	vmov	s15, r3
 800f1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f202:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f20a:	4b1e      	ldr	r3, [pc, #120]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f212:	ee07 3a90 	vmov	s15, r3
 800f216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f21a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f21e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f23a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f23c:	4b11      	ldr	r3, [pc, #68]	; (800f284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f240:	0a5b      	lsrs	r3, r3, #9
 800f242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f246:	3301      	adds	r3, #1
 800f248:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	ee07 3a90 	vmov	s15, r3
 800f250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f254:	edd7 6a07 	vldr	s13, [r7, #28]
 800f258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f25c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f260:	ee17 3a90 	vmov	r3, s15
 800f264:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f266:	e005      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	61bb      	str	r3, [r7, #24]
      break;
 800f26c:	e002      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f26e:	4b07      	ldr	r3, [pc, #28]	; (800f28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f270:	61bb      	str	r3, [r7, #24]
      break;
 800f272:	bf00      	nop
  }

  return sysclockfreq;
 800f274:	69bb      	ldr	r3, [r7, #24]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3724      	adds	r7, #36	; 0x24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	58024400 	.word	0x58024400
 800f288:	03d09000 	.word	0x03d09000
 800f28c:	003d0900 	.word	0x003d0900
 800f290:	017d7840 	.word	0x017d7840
 800f294:	46000000 	.word	0x46000000
 800f298:	4c742400 	.word	0x4c742400
 800f29c:	4a742400 	.word	0x4a742400
 800f2a0:	4bbebc20 	.word	0x4bbebc20

0800f2a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f2aa:	f7ff fe81 	bl	800efb0 <HAL_RCC_GetSysClockFreq>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	4b10      	ldr	r3, [pc, #64]	; (800f2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800f2b2:	699b      	ldr	r3, [r3, #24]
 800f2b4:	0a1b      	lsrs	r3, r3, #8
 800f2b6:	f003 030f 	and.w	r3, r3, #15
 800f2ba:	490f      	ldr	r1, [pc, #60]	; (800f2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800f2bc:	5ccb      	ldrb	r3, [r1, r3]
 800f2be:	f003 031f 	and.w	r3, r3, #31
 800f2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f2c8:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800f2ca:	699b      	ldr	r3, [r3, #24]
 800f2cc:	f003 030f 	and.w	r3, r3, #15
 800f2d0:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800f2d2:	5cd3      	ldrb	r3, [r2, r3]
 800f2d4:	f003 031f 	and.w	r3, r3, #31
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	fa22 f303 	lsr.w	r3, r2, r3
 800f2de:	4a07      	ldr	r2, [pc, #28]	; (800f2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800f2e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f2e2:	4a07      	ldr	r2, [pc, #28]	; (800f300 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f2e8:	4b04      	ldr	r3, [pc, #16]	; (800f2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	58024400 	.word	0x58024400
 800f2f8:	0801b904 	.word	0x0801b904
 800f2fc:	240000cc 	.word	0x240000cc
 800f300:	240000c8 	.word	0x240000c8

0800f304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f308:	f7ff ffcc 	bl	800f2a4 <HAL_RCC_GetHCLKFreq>
 800f30c:	4602      	mov	r2, r0
 800f30e:	4b06      	ldr	r3, [pc, #24]	; (800f328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f310:	69db      	ldr	r3, [r3, #28]
 800f312:	091b      	lsrs	r3, r3, #4
 800f314:	f003 0307 	and.w	r3, r3, #7
 800f318:	4904      	ldr	r1, [pc, #16]	; (800f32c <HAL_RCC_GetPCLK1Freq+0x28>)
 800f31a:	5ccb      	ldrb	r3, [r1, r3]
 800f31c:	f003 031f 	and.w	r3, r3, #31
 800f320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f324:	4618      	mov	r0, r3
 800f326:	bd80      	pop	{r7, pc}
 800f328:	58024400 	.word	0x58024400
 800f32c:	0801b904 	.word	0x0801b904

0800f330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f334:	f7ff ffb6 	bl	800f2a4 <HAL_RCC_GetHCLKFreq>
 800f338:	4602      	mov	r2, r0
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f33c:	69db      	ldr	r3, [r3, #28]
 800f33e:	0a1b      	lsrs	r3, r3, #8
 800f340:	f003 0307 	and.w	r3, r3, #7
 800f344:	4904      	ldr	r1, [pc, #16]	; (800f358 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f346:	5ccb      	ldrb	r3, [r1, r3]
 800f348:	f003 031f 	and.w	r3, r3, #31
 800f34c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f350:	4618      	mov	r0, r3
 800f352:	bd80      	pop	{r7, pc}
 800f354:	58024400 	.word	0x58024400
 800f358:	0801b904 	.word	0x0801b904

0800f35c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	223f      	movs	r2, #63	; 0x3f
 800f36a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f36c:	4b1a      	ldr	r3, [pc, #104]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f36e:	691b      	ldr	r3, [r3, #16]
 800f370:	f003 0207 	and.w	r2, r3, #7
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800f378:	4b17      	ldr	r3, [pc, #92]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800f384:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	f003 020f 	and.w	r2, r3, #15
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800f390:	4b11      	ldr	r3, [pc, #68]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800f39c:	4b0e      	ldr	r3, [pc, #56]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f3a8:	4b0b      	ldr	r3, [pc, #44]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f3aa:	69db      	ldr	r3, [r3, #28]
 800f3ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f3b4:	4b08      	ldr	r3, [pc, #32]	; (800f3d8 <HAL_RCC_GetClockConfig+0x7c>)
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f3c0:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <HAL_RCC_GetClockConfig+0x80>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 020f 	and.w	r2, r3, #15
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	601a      	str	r2, [r3, #0]
}
 800f3cc:	bf00      	nop
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr
 800f3d8:	58024400 	.word	0x58024400
 800f3dc:	52002000 	.word	0x52002000

0800f3e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f3e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3e4:	b0ca      	sub	sp, #296	; 0x128
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f404:	2500      	movs	r5, #0
 800f406:	ea54 0305 	orrs.w	r3, r4, r5
 800f40a:	d049      	beq.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f416:	d02f      	beq.n	800f478 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f41c:	d828      	bhi.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f41e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f422:	d01a      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f428:	d822      	bhi.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f432:	d007      	beq.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f434:	e01c      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f436:	4bb8      	ldr	r3, [pc, #736]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43a:	4ab7      	ldr	r2, [pc, #732]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f43c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f442:	e01a      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f448:	3308      	adds	r3, #8
 800f44a:	2102      	movs	r1, #2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f002 fb61 	bl	8011b14 <RCCEx_PLL2_Config>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f458:	e00f      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f45e:	3328      	adds	r3, #40	; 0x28
 800f460:	2102      	movs	r1, #2
 800f462:	4618      	mov	r0, r3
 800f464:	f002 fc08 	bl	8011c78 <RCCEx_PLL3_Config>
 800f468:	4603      	mov	r3, r0
 800f46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f46e:	e004      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f476:	e000      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10a      	bne.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f482:	4ba5      	ldr	r3, [pc, #660]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f486:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f48e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f490:	4aa1      	ldr	r2, [pc, #644]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f492:	430b      	orrs	r3, r1
 800f494:	6513      	str	r3, [r2, #80]	; 0x50
 800f496:	e003      	b.n	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f4ac:	f04f 0900 	mov.w	r9, #0
 800f4b0:	ea58 0309 	orrs.w	r3, r8, r9
 800f4b4:	d047      	beq.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4bc:	2b04      	cmp	r3, #4
 800f4be:	d82a      	bhi.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f4c0:	a201      	add	r2, pc, #4	; (adr r2, 800f4c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c6:	bf00      	nop
 800f4c8:	0800f4dd 	.word	0x0800f4dd
 800f4cc:	0800f4eb 	.word	0x0800f4eb
 800f4d0:	0800f501 	.word	0x0800f501
 800f4d4:	0800f51f 	.word	0x0800f51f
 800f4d8:	0800f51f 	.word	0x0800f51f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4dc:	4b8e      	ldr	r3, [pc, #568]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e0:	4a8d      	ldr	r2, [pc, #564]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f4e8:	e01a      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f002 fb0e 	bl	8011b14 <RCCEx_PLL2_Config>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f4fe:	e00f      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f504:	3328      	adds	r3, #40	; 0x28
 800f506:	2100      	movs	r1, #0
 800f508:	4618      	mov	r0, r3
 800f50a:	f002 fbb5 	bl	8011c78 <RCCEx_PLL3_Config>
 800f50e:	4603      	mov	r3, r0
 800f510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f514:	e004      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f51c:	e000      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f51e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10a      	bne.n	800f53e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f528:	4b7b      	ldr	r3, [pc, #492]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f52c:	f023 0107 	bic.w	r1, r3, #7
 800f530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f536:	4a78      	ldr	r2, [pc, #480]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f538:	430b      	orrs	r3, r1
 800f53a:	6513      	str	r3, [r2, #80]	; 0x50
 800f53c:	e003      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f552:	f04f 0b00 	mov.w	fp, #0
 800f556:	ea5a 030b 	orrs.w	r3, sl, fp
 800f55a:	d04c      	beq.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f566:	d030      	beq.n	800f5ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f56c:	d829      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f56e:	2bc0      	cmp	r3, #192	; 0xc0
 800f570:	d02d      	beq.n	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f572:	2bc0      	cmp	r3, #192	; 0xc0
 800f574:	d825      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f576:	2b80      	cmp	r3, #128	; 0x80
 800f578:	d018      	beq.n	800f5ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f57a:	2b80      	cmp	r3, #128	; 0x80
 800f57c:	d821      	bhi.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f582:	2b40      	cmp	r3, #64	; 0x40
 800f584:	d007      	beq.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f586:	e01c      	b.n	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f588:	4b63      	ldr	r3, [pc, #396]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	4a62      	ldr	r2, [pc, #392]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f58e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f594:	e01c      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f59a:	3308      	adds	r3, #8
 800f59c:	2100      	movs	r1, #0
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f002 fab8 	bl	8011b14 <RCCEx_PLL2_Config>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f5aa:	e011      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5b0:	3328      	adds	r3, #40	; 0x28
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f002 fb5f 	bl	8011c78 <RCCEx_PLL3_Config>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f5c0:	e006      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5c8:	e002      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f5ca:	bf00      	nop
 800f5cc:	e000      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10a      	bne.n	800f5ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f5d8:	4b4f      	ldr	r3, [pc, #316]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e6:	4a4c      	ldr	r2, [pc, #304]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f5e8:	430b      	orrs	r3, r1
 800f5ea:	6513      	str	r3, [r2, #80]	; 0x50
 800f5ec:	e003      	b.n	800f5f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f602:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f606:	2300      	movs	r3, #0
 800f608:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f60c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f610:	460b      	mov	r3, r1
 800f612:	4313      	orrs	r3, r2
 800f614:	d053      	beq.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f61e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f622:	d035      	beq.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f628:	d82e      	bhi.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f62a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f62e:	d031      	beq.n	800f694 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f630:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f634:	d828      	bhi.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f63a:	d01a      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f640:	d822      	bhi.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f642:	2b00      	cmp	r3, #0
 800f644:	d003      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f64a:	d007      	beq.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f64c:	e01c      	b.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f64e:	4b32      	ldr	r3, [pc, #200]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f652:	4a31      	ldr	r2, [pc, #196]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f65a:	e01c      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f660:	3308      	adds	r3, #8
 800f662:	2100      	movs	r1, #0
 800f664:	4618      	mov	r0, r3
 800f666:	f002 fa55 	bl	8011b14 <RCCEx_PLL2_Config>
 800f66a:	4603      	mov	r3, r0
 800f66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f670:	e011      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f676:	3328      	adds	r3, #40	; 0x28
 800f678:	2100      	movs	r1, #0
 800f67a:	4618      	mov	r0, r3
 800f67c:	f002 fafc 	bl	8011c78 <RCCEx_PLL3_Config>
 800f680:	4603      	mov	r3, r0
 800f682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f686:	e006      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f688:	2301      	movs	r3, #1
 800f68a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f68e:	e002      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f690:	bf00      	nop
 800f692:	e000      	b.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d10b      	bne.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f69e:	4b1e      	ldr	r3, [pc, #120]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6a2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f6ae:	4a1a      	ldr	r2, [pc, #104]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6b0:	430b      	orrs	r3, r1
 800f6b2:	6593      	str	r3, [r2, #88]	; 0x58
 800f6b4:	e003      	b.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f6ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f6d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	d056      	beq.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f6e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6ea:	d038      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f6ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6f0:	d831      	bhi.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f6f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f6f6:	d034      	beq.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f6f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f6fc:	d82b      	bhi.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f6fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f702:	d01d      	beq.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f708:	d825      	bhi.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d006      	beq.n	800f71c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f70e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f712:	d00a      	beq.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f714:	e01f      	b.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f716:	bf00      	nop
 800f718:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f71c:	4ba2      	ldr	r3, [pc, #648]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f720:	4aa1      	ldr	r2, [pc, #644]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f728:	e01c      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f72e:	3308      	adds	r3, #8
 800f730:	2100      	movs	r1, #0
 800f732:	4618      	mov	r0, r3
 800f734:	f002 f9ee 	bl	8011b14 <RCCEx_PLL2_Config>
 800f738:	4603      	mov	r3, r0
 800f73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f73e:	e011      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f744:	3328      	adds	r3, #40	; 0x28
 800f746:	2100      	movs	r1, #0
 800f748:	4618      	mov	r0, r3
 800f74a:	f002 fa95 	bl	8011c78 <RCCEx_PLL3_Config>
 800f74e:	4603      	mov	r3, r0
 800f750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f754:	e006      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f756:	2301      	movs	r3, #1
 800f758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f75c:	e002      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f75e:	bf00      	nop
 800f760:	e000      	b.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10b      	bne.n	800f784 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f76c:	4b8e      	ldr	r3, [pc, #568]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f770:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f77c:	4a8a      	ldr	r2, [pc, #552]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f77e:	430b      	orrs	r3, r1
 800f780:	6593      	str	r3, [r2, #88]	; 0x58
 800f782:	e003      	b.n	800f78c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f794:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f79c:	2300      	movs	r3, #0
 800f79e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f7a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	d03a      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7b2:	2b30      	cmp	r3, #48	; 0x30
 800f7b4:	d01f      	beq.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f7b6:	2b30      	cmp	r3, #48	; 0x30
 800f7b8:	d819      	bhi.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f7ba:	2b20      	cmp	r3, #32
 800f7bc:	d00c      	beq.n	800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f7be:	2b20      	cmp	r3, #32
 800f7c0:	d815      	bhi.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d019      	beq.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f7c6:	2b10      	cmp	r3, #16
 800f7c8:	d111      	bne.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7ca:	4b77      	ldr	r3, [pc, #476]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ce:	4a76      	ldr	r2, [pc, #472]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f7d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f7d6:	e011      	b.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7dc:	3308      	adds	r3, #8
 800f7de:	2102      	movs	r1, #2
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f002 f997 	bl	8011b14 <RCCEx_PLL2_Config>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f7ec:	e006      	b.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7f4:	e002      	b.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f7f6:	bf00      	nop
 800f7f8:	e000      	b.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f7fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f800:	2b00      	cmp	r3, #0
 800f802:	d10a      	bne.n	800f81a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f804:	4b68      	ldr	r3, [pc, #416]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f808:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f812:	4a65      	ldr	r2, [pc, #404]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f814:	430b      	orrs	r3, r1
 800f816:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f818:	e003      	b.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f81e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f82e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f832:	2300      	movs	r3, #0
 800f834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f838:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4313      	orrs	r3, r2
 800f840:	d051      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f84c:	d035      	beq.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f84e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f852:	d82e      	bhi.n	800f8b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f858:	d031      	beq.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f85a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f85e:	d828      	bhi.n	800f8b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f864:	d01a      	beq.n	800f89c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f86a:	d822      	bhi.n	800f8b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d003      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f874:	d007      	beq.n	800f886 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f876:	e01c      	b.n	800f8b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f878:	4b4b      	ldr	r3, [pc, #300]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87c:	4a4a      	ldr	r2, [pc, #296]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f87e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f884:	e01c      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f88a:	3308      	adds	r3, #8
 800f88c:	2100      	movs	r1, #0
 800f88e:	4618      	mov	r0, r3
 800f890:	f002 f940 	bl	8011b14 <RCCEx_PLL2_Config>
 800f894:	4603      	mov	r3, r0
 800f896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f89a:	e011      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8a0:	3328      	adds	r3, #40	; 0x28
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f002 f9e7 	bl	8011c78 <RCCEx_PLL3_Config>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f8b0:	e006      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8b8:	e002      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f8ba:	bf00      	nop
 800f8bc:	e000      	b.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f8be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10a      	bne.n	800f8de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f8c8:	4b37      	ldr	r3, [pc, #220]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8d6:	4a34      	ldr	r2, [pc, #208]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f8d8:	430b      	orrs	r3, r1
 800f8da:	6513      	str	r3, [r2, #80]	; 0x50
 800f8dc:	e003      	b.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f8f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f8fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f900:	460b      	mov	r3, r1
 800f902:	4313      	orrs	r3, r2
 800f904:	d056      	beq.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f90c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f910:	d033      	beq.n	800f97a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f916:	d82c      	bhi.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f91c:	d02f      	beq.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f91e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f922:	d826      	bhi.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f924:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f928:	d02b      	beq.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f92a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f92e:	d820      	bhi.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f934:	d012      	beq.n	800f95c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f93a:	d81a      	bhi.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d022      	beq.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f944:	d115      	bne.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f94a:	3308      	adds	r3, #8
 800f94c:	2101      	movs	r1, #1
 800f94e:	4618      	mov	r0, r3
 800f950:	f002 f8e0 	bl	8011b14 <RCCEx_PLL2_Config>
 800f954:	4603      	mov	r3, r0
 800f956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f95a:	e015      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f960:	3328      	adds	r3, #40	; 0x28
 800f962:	2101      	movs	r1, #1
 800f964:	4618      	mov	r0, r3
 800f966:	f002 f987 	bl	8011c78 <RCCEx_PLL3_Config>
 800f96a:	4603      	mov	r3, r0
 800f96c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f970:	e00a      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f978:	e006      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f97a:	bf00      	nop
 800f97c:	e004      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f97e:	bf00      	nop
 800f980:	e002      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f982:	bf00      	nop
 800f984:	e000      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10d      	bne.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f990:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f994:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f99e:	4a02      	ldr	r2, [pc, #8]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9a0:	430b      	orrs	r3, r1
 800f9a2:	6513      	str	r3, [r2, #80]	; 0x50
 800f9a4:	e006      	b.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f9a6:	bf00      	nop
 800f9a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f9c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f9ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	d055      	beq.n	800fa80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f9dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f9e0:	d033      	beq.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f9e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f9e6:	d82c      	bhi.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ec:	d02f      	beq.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9f2:	d826      	bhi.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f9f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f9f8:	d02b      	beq.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f9fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f9fe:	d820      	bhi.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fa00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa04:	d012      	beq.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800fa06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa0a:	d81a      	bhi.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d022      	beq.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800fa10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa14:	d115      	bne.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1a:	3308      	adds	r3, #8
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f002 f878 	bl	8011b14 <RCCEx_PLL2_Config>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fa2a:	e015      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa30:	3328      	adds	r3, #40	; 0x28
 800fa32:	2101      	movs	r1, #1
 800fa34:	4618      	mov	r0, r3
 800fa36:	f002 f91f 	bl	8011c78 <RCCEx_PLL3_Config>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fa40:	e00a      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa48:	e006      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fa4a:	bf00      	nop
 800fa4c:	e004      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fa4e:	bf00      	nop
 800fa50:	e002      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fa52:	bf00      	nop
 800fa54:	e000      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fa56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d10b      	bne.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fa60:	4ba3      	ldr	r3, [pc, #652]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fa62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa64:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fa70:	4a9f      	ldr	r2, [pc, #636]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fa72:	430b      	orrs	r3, r1
 800fa74:	6593      	str	r3, [r2, #88]	; 0x58
 800fa76:	e003      	b.n	800fa80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fa80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800fa8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fa90:	2300      	movs	r3, #0
 800fa92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fa96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	d037      	beq.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800faa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faaa:	d00e      	beq.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800faac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fab0:	d816      	bhi.n	800fae0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d018      	beq.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800fab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800faba:	d111      	bne.n	800fae0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fabc:	4b8c      	ldr	r3, [pc, #560]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac0:	4a8b      	ldr	r2, [pc, #556]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fac8:	e00f      	b.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800faca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800face:	3308      	adds	r3, #8
 800fad0:	2101      	movs	r1, #1
 800fad2:	4618      	mov	r0, r3
 800fad4:	f002 f81e 	bl	8011b14 <RCCEx_PLL2_Config>
 800fad8:	4603      	mov	r3, r0
 800fada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fade:	e004      	b.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fae0:	2301      	movs	r3, #1
 800fae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fae6:	e000      	b.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800fae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10a      	bne.n	800fb08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800faf2:	4b7f      	ldr	r3, [pc, #508]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800faf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb00:	4a7b      	ldr	r2, [pc, #492]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb02:	430b      	orrs	r3, r1
 800fb04:	6513      	str	r3, [r2, #80]	; 0x50
 800fb06:	e003      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb18:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800fb1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fb20:	2300      	movs	r3, #0
 800fb22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fb26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	d039      	beq.n	800fba4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb36:	2b03      	cmp	r3, #3
 800fb38:	d81c      	bhi.n	800fb74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800fb3a:	a201      	add	r2, pc, #4	; (adr r2, 800fb40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800fb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb40:	0800fb7d 	.word	0x0800fb7d
 800fb44:	0800fb51 	.word	0x0800fb51
 800fb48:	0800fb5f 	.word	0x0800fb5f
 800fb4c:	0800fb7d 	.word	0x0800fb7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb50:	4b67      	ldr	r3, [pc, #412]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb54:	4a66      	ldr	r2, [pc, #408]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fb5c:	e00f      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb62:	3308      	adds	r3, #8
 800fb64:	2102      	movs	r1, #2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f001 ffd4 	bl	8011b14 <RCCEx_PLL2_Config>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fb72:	e004      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb7a:	e000      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800fb7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10a      	bne.n	800fb9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fb86:	4b5a      	ldr	r3, [pc, #360]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb8a:	f023 0103 	bic.w	r1, r3, #3
 800fb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb94:	4a56      	ldr	r2, [pc, #344]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb96:	430b      	orrs	r3, r1
 800fb98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb9a:	e003      	b.n	800fba4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800fbb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	f000 809f 	beq.w	800fd04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fbc6:	4b4b      	ldr	r3, [pc, #300]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a4a      	ldr	r2, [pc, #296]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fbcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fbd2:	f7f6 fbb9 	bl	8006348 <HAL_GetTick>
 800fbd6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fbda:	e00b      	b.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fbdc:	f7f6 fbb4 	bl	8006348 <HAL_GetTick>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	2b64      	cmp	r3, #100	; 0x64
 800fbea:	d903      	bls.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800fbec:	2303      	movs	r3, #3
 800fbee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbf2:	e005      	b.n	800fc00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fbf4:	4b3f      	ldr	r3, [pc, #252]	; (800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d0ed      	beq.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800fc00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d179      	bne.n	800fcfc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fc08:	4b39      	ldr	r3, [pc, #228]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc14:	4053      	eors	r3, r2
 800fc16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d015      	beq.n	800fc4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fc1e:	4b34      	ldr	r3, [pc, #208]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fc2a:	4b31      	ldr	r3, [pc, #196]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc2e:	4a30      	ldr	r2, [pc, #192]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fc34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fc36:	4b2e      	ldr	r3, [pc, #184]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3a:	4a2d      	ldr	r2, [pc, #180]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fc42:	4a2b      	ldr	r2, [pc, #172]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fc48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc56:	d118      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc58:	f7f6 fb76 	bl	8006348 <HAL_GetTick>
 800fc5c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fc60:	e00d      	b.n	800fc7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fc62:	f7f6 fb71 	bl	8006348 <HAL_GetTick>
 800fc66:	4602      	mov	r2, r0
 800fc68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fc6c:	1ad2      	subs	r2, r2, r3
 800fc6e:	f241 3388 	movw	r3, #5000	; 0x1388
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d903      	bls.n	800fc7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800fc7c:	e005      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fc7e:	4b1c      	ldr	r3, [pc, #112]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc82:	f003 0302 	and.w	r3, r3, #2
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d0eb      	beq.n	800fc62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800fc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d129      	bne.n	800fce6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fca2:	d10e      	bne.n	800fcc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800fca4:	4b12      	ldr	r3, [pc, #72]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800fcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fcb4:	091a      	lsrs	r2, r3, #4
 800fcb6:	4b10      	ldr	r3, [pc, #64]	; (800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800fcb8:	4013      	ands	r3, r2
 800fcba:	4a0d      	ldr	r2, [pc, #52]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcbc:	430b      	orrs	r3, r1
 800fcbe:	6113      	str	r3, [r2, #16]
 800fcc0:	e005      	b.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	4a0a      	ldr	r2, [pc, #40]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fccc:	6113      	str	r3, [r2, #16]
 800fcce:	4b08      	ldr	r3, [pc, #32]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fcda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fcde:	4a04      	ldr	r2, [pc, #16]	; (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fce0:	430b      	orrs	r3, r1
 800fce2:	6713      	str	r3, [r2, #112]	; 0x70
 800fce4:	e00e      	b.n	800fd04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800fcee:	e009      	b.n	800fd04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800fcf0:	58024400 	.word	0x58024400
 800fcf4:	58024800 	.word	0x58024800
 800fcf8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f002 0301 	and.w	r3, r2, #1
 800fd10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd14:	2300      	movs	r3, #0
 800fd16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4313      	orrs	r3, r2
 800fd22:	f000 8089 	beq.w	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800fd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd2c:	2b28      	cmp	r3, #40	; 0x28
 800fd2e:	d86b      	bhi.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800fd30:	a201      	add	r2, pc, #4	; (adr r2, 800fd38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd36:	bf00      	nop
 800fd38:	0800fe11 	.word	0x0800fe11
 800fd3c:	0800fe09 	.word	0x0800fe09
 800fd40:	0800fe09 	.word	0x0800fe09
 800fd44:	0800fe09 	.word	0x0800fe09
 800fd48:	0800fe09 	.word	0x0800fe09
 800fd4c:	0800fe09 	.word	0x0800fe09
 800fd50:	0800fe09 	.word	0x0800fe09
 800fd54:	0800fe09 	.word	0x0800fe09
 800fd58:	0800fddd 	.word	0x0800fddd
 800fd5c:	0800fe09 	.word	0x0800fe09
 800fd60:	0800fe09 	.word	0x0800fe09
 800fd64:	0800fe09 	.word	0x0800fe09
 800fd68:	0800fe09 	.word	0x0800fe09
 800fd6c:	0800fe09 	.word	0x0800fe09
 800fd70:	0800fe09 	.word	0x0800fe09
 800fd74:	0800fe09 	.word	0x0800fe09
 800fd78:	0800fdf3 	.word	0x0800fdf3
 800fd7c:	0800fe09 	.word	0x0800fe09
 800fd80:	0800fe09 	.word	0x0800fe09
 800fd84:	0800fe09 	.word	0x0800fe09
 800fd88:	0800fe09 	.word	0x0800fe09
 800fd8c:	0800fe09 	.word	0x0800fe09
 800fd90:	0800fe09 	.word	0x0800fe09
 800fd94:	0800fe09 	.word	0x0800fe09
 800fd98:	0800fe11 	.word	0x0800fe11
 800fd9c:	0800fe09 	.word	0x0800fe09
 800fda0:	0800fe09 	.word	0x0800fe09
 800fda4:	0800fe09 	.word	0x0800fe09
 800fda8:	0800fe09 	.word	0x0800fe09
 800fdac:	0800fe09 	.word	0x0800fe09
 800fdb0:	0800fe09 	.word	0x0800fe09
 800fdb4:	0800fe09 	.word	0x0800fe09
 800fdb8:	0800fe11 	.word	0x0800fe11
 800fdbc:	0800fe09 	.word	0x0800fe09
 800fdc0:	0800fe09 	.word	0x0800fe09
 800fdc4:	0800fe09 	.word	0x0800fe09
 800fdc8:	0800fe09 	.word	0x0800fe09
 800fdcc:	0800fe09 	.word	0x0800fe09
 800fdd0:	0800fe09 	.word	0x0800fe09
 800fdd4:	0800fe09 	.word	0x0800fe09
 800fdd8:	0800fe11 	.word	0x0800fe11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fde0:	3308      	adds	r3, #8
 800fde2:	2101      	movs	r1, #1
 800fde4:	4618      	mov	r0, r3
 800fde6:	f001 fe95 	bl	8011b14 <RCCEx_PLL2_Config>
 800fdea:	4603      	mov	r3, r0
 800fdec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fdf0:	e00f      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdf6:	3328      	adds	r3, #40	; 0x28
 800fdf8:	2101      	movs	r1, #1
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f001 ff3c 	bl	8011c78 <RCCEx_PLL3_Config>
 800fe00:	4603      	mov	r3, r0
 800fe02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fe06:	e004      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe0e:	e000      	b.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800fe10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10a      	bne.n	800fe30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fe1a:	4bbf      	ldr	r3, [pc, #764]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fe1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fe22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe28:	4abb      	ldr	r2, [pc, #748]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fe2a:	430b      	orrs	r3, r1
 800fe2c:	6553      	str	r3, [r2, #84]	; 0x54
 800fe2e:	e003      	b.n	800fe38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fe38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe40:	f002 0302 	and.w	r3, r2, #2
 800fe44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fe4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fe52:	460b      	mov	r3, r1
 800fe54:	4313      	orrs	r3, r2
 800fe56:	d041      	beq.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fe58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe5e:	2b05      	cmp	r3, #5
 800fe60:	d824      	bhi.n	800feac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800fe62:	a201      	add	r2, pc, #4	; (adr r2, 800fe68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800fe64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe68:	0800feb5 	.word	0x0800feb5
 800fe6c:	0800fe81 	.word	0x0800fe81
 800fe70:	0800fe97 	.word	0x0800fe97
 800fe74:	0800feb5 	.word	0x0800feb5
 800fe78:	0800feb5 	.word	0x0800feb5
 800fe7c:	0800feb5 	.word	0x0800feb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe84:	3308      	adds	r3, #8
 800fe86:	2101      	movs	r1, #1
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f001 fe43 	bl	8011b14 <RCCEx_PLL2_Config>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fe94:	e00f      	b.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe9a:	3328      	adds	r3, #40	; 0x28
 800fe9c:	2101      	movs	r1, #1
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f001 feea 	bl	8011c78 <RCCEx_PLL3_Config>
 800fea4:	4603      	mov	r3, r0
 800fea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800feaa:	e004      	b.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800feb2:	e000      	b.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800feb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800feb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10a      	bne.n	800fed4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800febe:	4b96      	ldr	r3, [pc, #600]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fec2:	f023 0107 	bic.w	r1, r3, #7
 800fec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fecc:	4a92      	ldr	r2, [pc, #584]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fece:	430b      	orrs	r3, r1
 800fed0:	6553      	str	r3, [r2, #84]	; 0x54
 800fed2:	e003      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fed8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	f002 0304 	and.w	r3, r2, #4
 800fee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800feec:	2300      	movs	r3, #0
 800feee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fef6:	460b      	mov	r3, r1
 800fef8:	4313      	orrs	r3, r2
 800fefa:	d044      	beq.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff04:	2b05      	cmp	r3, #5
 800ff06:	d825      	bhi.n	800ff54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ff08:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ff0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff0e:	bf00      	nop
 800ff10:	0800ff5d 	.word	0x0800ff5d
 800ff14:	0800ff29 	.word	0x0800ff29
 800ff18:	0800ff3f 	.word	0x0800ff3f
 800ff1c:	0800ff5d 	.word	0x0800ff5d
 800ff20:	0800ff5d 	.word	0x0800ff5d
 800ff24:	0800ff5d 	.word	0x0800ff5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ff28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	2101      	movs	r1, #1
 800ff30:	4618      	mov	r0, r3
 800ff32:	f001 fdef 	bl	8011b14 <RCCEx_PLL2_Config>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ff3c:	e00f      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff42:	3328      	adds	r3, #40	; 0x28
 800ff44:	2101      	movs	r1, #1
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 fe96 	bl	8011c78 <RCCEx_PLL3_Config>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ff52:	e004      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff5a:	e000      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ff5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10b      	bne.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ff66:	4b6c      	ldr	r3, [pc, #432]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ff68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff6a:	f023 0107 	bic.w	r1, r3, #7
 800ff6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff76:	4a68      	ldr	r2, [pc, #416]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ff78:	430b      	orrs	r3, r1
 800ff7a:	6593      	str	r3, [r2, #88]	; 0x58
 800ff7c:	e003      	b.n	800ff86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ff86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8e:	f002 0320 	and.w	r3, r2, #32
 800ff92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ff96:	2300      	movs	r3, #0
 800ff98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	d055      	beq.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ffa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffb2:	d033      	beq.n	801001c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ffb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffb8:	d82c      	bhi.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ffba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffbe:	d02f      	beq.n	8010020 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ffc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffc4:	d826      	bhi.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ffc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ffca:	d02b      	beq.n	8010024 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ffcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ffd0:	d820      	bhi.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ffd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffd6:	d012      	beq.n	800fffe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ffd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffdc:	d81a      	bhi.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d022      	beq.n	8010028 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ffe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ffe6:	d115      	bne.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ffe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffec:	3308      	adds	r3, #8
 800ffee:	2100      	movs	r1, #0
 800fff0:	4618      	mov	r0, r3
 800fff2:	f001 fd8f 	bl	8011b14 <RCCEx_PLL2_Config>
 800fff6:	4603      	mov	r3, r0
 800fff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fffc:	e015      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010002:	3328      	adds	r3, #40	; 0x28
 8010004:	2102      	movs	r1, #2
 8010006:	4618      	mov	r0, r3
 8010008:	f001 fe36 	bl	8011c78 <RCCEx_PLL3_Config>
 801000c:	4603      	mov	r3, r0
 801000e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010012:	e00a      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801001a:	e006      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801001c:	bf00      	nop
 801001e:	e004      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010020:	bf00      	nop
 8010022:	e002      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010024:	bf00      	nop
 8010026:	e000      	b.n	801002a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010028:	bf00      	nop
    }

    if (ret == HAL_OK)
 801002a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10b      	bne.n	801004a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010032:	4b39      	ldr	r3, [pc, #228]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010036:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801003a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801003e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010042:	4a35      	ldr	r2, [pc, #212]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010044:	430b      	orrs	r3, r1
 8010046:	6553      	str	r3, [r2, #84]	; 0x54
 8010048:	e003      	b.n	8010052 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801004a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801004e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801005e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010062:	2300      	movs	r3, #0
 8010064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010068:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801006c:	460b      	mov	r3, r1
 801006e:	4313      	orrs	r3, r2
 8010070:	d058      	beq.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801007a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801007e:	d033      	beq.n	80100e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010080:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010084:	d82c      	bhi.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801008a:	d02f      	beq.n	80100ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801008c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010090:	d826      	bhi.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010096:	d02b      	beq.n	80100f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801009c:	d820      	bhi.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801009e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100a2:	d012      	beq.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80100a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100a8:	d81a      	bhi.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d022      	beq.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80100ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100b2:	d115      	bne.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80100b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100b8:	3308      	adds	r3, #8
 80100ba:	2100      	movs	r1, #0
 80100bc:	4618      	mov	r0, r3
 80100be:	f001 fd29 	bl	8011b14 <RCCEx_PLL2_Config>
 80100c2:	4603      	mov	r3, r0
 80100c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80100c8:	e015      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80100ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100ce:	3328      	adds	r3, #40	; 0x28
 80100d0:	2102      	movs	r1, #2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f001 fdd0 	bl	8011c78 <RCCEx_PLL3_Config>
 80100d8:	4603      	mov	r3, r0
 80100da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80100de:	e00a      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80100e6:	e006      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80100e8:	bf00      	nop
 80100ea:	e004      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80100ec:	bf00      	nop
 80100ee:	e002      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80100f0:	bf00      	nop
 80100f2:	e000      	b.n	80100f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80100f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10e      	bne.n	801011c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80100fe:	4b06      	ldr	r3, [pc, #24]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010102:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801010a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801010e:	4a02      	ldr	r2, [pc, #8]	; (8010118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010110:	430b      	orrs	r3, r1
 8010112:	6593      	str	r3, [r2, #88]	; 0x58
 8010114:	e006      	b.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010116:	bf00      	nop
 8010118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801011c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8010130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010134:	2300      	movs	r3, #0
 8010136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801013a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801013e:	460b      	mov	r3, r1
 8010140:	4313      	orrs	r3, r2
 8010142:	d055      	beq.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801014c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010150:	d033      	beq.n	80101ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8010152:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010156:	d82c      	bhi.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801015c:	d02f      	beq.n	80101be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801015e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010162:	d826      	bhi.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010164:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010168:	d02b      	beq.n	80101c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801016a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801016e:	d820      	bhi.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010174:	d012      	beq.n	801019c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8010176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801017a:	d81a      	bhi.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801017c:	2b00      	cmp	r3, #0
 801017e:	d022      	beq.n	80101c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010184:	d115      	bne.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801018a:	3308      	adds	r3, #8
 801018c:	2100      	movs	r1, #0
 801018e:	4618      	mov	r0, r3
 8010190:	f001 fcc0 	bl	8011b14 <RCCEx_PLL2_Config>
 8010194:	4603      	mov	r3, r0
 8010196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801019a:	e015      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801019c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101a0:	3328      	adds	r3, #40	; 0x28
 80101a2:	2102      	movs	r1, #2
 80101a4:	4618      	mov	r0, r3
 80101a6:	f001 fd67 	bl	8011c78 <RCCEx_PLL3_Config>
 80101aa:	4603      	mov	r3, r0
 80101ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80101b0:	e00a      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80101b8:	e006      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80101ba:	bf00      	nop
 80101bc:	e004      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80101be:	bf00      	nop
 80101c0:	e002      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80101c2:	bf00      	nop
 80101c4:	e000      	b.n	80101c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80101c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80101c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10b      	bne.n	80101e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80101d0:	4ba1      	ldr	r3, [pc, #644]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80101d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80101d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80101e0:	4a9d      	ldr	r2, [pc, #628]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80101e2:	430b      	orrs	r3, r1
 80101e4:	6593      	str	r3, [r2, #88]	; 0x58
 80101e6:	e003      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80101f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	f002 0308 	and.w	r3, r2, #8
 80101fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010200:	2300      	movs	r3, #0
 8010202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010206:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801020a:	460b      	mov	r3, r1
 801020c:	4313      	orrs	r3, r2
 801020e:	d01e      	beq.n	801024e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801021c:	d10c      	bne.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801021e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010222:	3328      	adds	r3, #40	; 0x28
 8010224:	2102      	movs	r1, #2
 8010226:	4618      	mov	r0, r3
 8010228:	f001 fd26 	bl	8011c78 <RCCEx_PLL3_Config>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010238:	4b87      	ldr	r3, [pc, #540]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801023a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801023c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010248:	4a83      	ldr	r2, [pc, #524]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801024a:	430b      	orrs	r3, r1
 801024c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801024e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	f002 0310 	and.w	r3, r2, #16
 801025a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801025e:	2300      	movs	r3, #0
 8010260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010264:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8010268:	460b      	mov	r3, r1
 801026a:	4313      	orrs	r3, r2
 801026c:	d01e      	beq.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801026e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801027a:	d10c      	bne.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801027c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010280:	3328      	adds	r3, #40	; 0x28
 8010282:	2102      	movs	r1, #2
 8010284:	4618      	mov	r0, r3
 8010286:	f001 fcf7 	bl	8011c78 <RCCEx_PLL3_Config>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d002      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8010290:	2301      	movs	r3, #1
 8010292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010296:	4b70      	ldr	r3, [pc, #448]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801029a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801029e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80102a6:	4a6c      	ldr	r2, [pc, #432]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80102a8:	430b      	orrs	r3, r1
 80102aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80102ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80102b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102bc:	2300      	movs	r3, #0
 80102be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80102c6:	460b      	mov	r3, r1
 80102c8:	4313      	orrs	r3, r2
 80102ca:	d03e      	beq.n	801034a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80102cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80102d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102d8:	d022      	beq.n	8010320 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80102da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102de:	d81b      	bhi.n	8010318 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80102e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102e8:	d00b      	beq.n	8010302 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80102ea:	e015      	b.n	8010318 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102f0:	3308      	adds	r3, #8
 80102f2:	2100      	movs	r1, #0
 80102f4:	4618      	mov	r0, r3
 80102f6:	f001 fc0d 	bl	8011b14 <RCCEx_PLL2_Config>
 80102fa:	4603      	mov	r3, r0
 80102fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010300:	e00f      	b.n	8010322 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010306:	3328      	adds	r3, #40	; 0x28
 8010308:	2102      	movs	r1, #2
 801030a:	4618      	mov	r0, r3
 801030c:	f001 fcb4 	bl	8011c78 <RCCEx_PLL3_Config>
 8010310:	4603      	mov	r3, r0
 8010312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010316:	e004      	b.n	8010322 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801031e:	e000      	b.n	8010322 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10b      	bne.n	8010342 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801032a:	4b4b      	ldr	r3, [pc, #300]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801032c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801032e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8010332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801033a:	4a47      	ldr	r2, [pc, #284]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801033c:	430b      	orrs	r3, r1
 801033e:	6593      	str	r3, [r2, #88]	; 0x58
 8010340:	e003      	b.n	801034a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801034a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8010356:	67bb      	str	r3, [r7, #120]	; 0x78
 8010358:	2300      	movs	r3, #0
 801035a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801035c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010360:	460b      	mov	r3, r1
 8010362:	4313      	orrs	r3, r2
 8010364:	d03b      	beq.n	80103de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8010366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801036a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801036e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010372:	d01f      	beq.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8010374:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010378:	d818      	bhi.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801037a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801037e:	d003      	beq.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010384:	d007      	beq.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8010386:	e011      	b.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010388:	4b33      	ldr	r3, [pc, #204]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038c:	4a32      	ldr	r2, [pc, #200]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801038e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010394:	e00f      	b.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801039a:	3328      	adds	r3, #40	; 0x28
 801039c:	2101      	movs	r1, #1
 801039e:	4618      	mov	r0, r3
 80103a0:	f001 fc6a 	bl	8011c78 <RCCEx_PLL3_Config>
 80103a4:	4603      	mov	r3, r0
 80103a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80103aa:	e004      	b.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103ac:	2301      	movs	r3, #1
 80103ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80103b2:	e000      	b.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80103b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d10b      	bne.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80103be:	4b26      	ldr	r3, [pc, #152]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80103c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103ce:	4a22      	ldr	r2, [pc, #136]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103d0:	430b      	orrs	r3, r1
 80103d2:	6553      	str	r3, [r2, #84]	; 0x54
 80103d4:	e003      	b.n	80103de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80103de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80103ea:	673b      	str	r3, [r7, #112]	; 0x70
 80103ec:	2300      	movs	r3, #0
 80103ee:	677b      	str	r3, [r7, #116]	; 0x74
 80103f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80103f4:	460b      	mov	r3, r1
 80103f6:	4313      	orrs	r3, r2
 80103f8:	d034      	beq.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80103fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010400:	2b00      	cmp	r3, #0
 8010402:	d003      	beq.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010408:	d007      	beq.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801040a:	e011      	b.n	8010430 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801040c:	4b12      	ldr	r3, [pc, #72]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010410:	4a11      	ldr	r2, [pc, #68]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010418:	e00e      	b.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801041a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801041e:	3308      	adds	r3, #8
 8010420:	2102      	movs	r1, #2
 8010422:	4618      	mov	r0, r3
 8010424:	f001 fb76 	bl	8011b14 <RCCEx_PLL2_Config>
 8010428:	4603      	mov	r3, r0
 801042a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801042e:	e003      	b.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010430:	2301      	movs	r3, #1
 8010432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10d      	bne.n	801045c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010440:	4b05      	ldr	r3, [pc, #20]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801044c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801044e:	4a02      	ldr	r2, [pc, #8]	; (8010458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010450:	430b      	orrs	r3, r1
 8010452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010454:	e006      	b.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8010456:	bf00      	nop
 8010458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801045c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8010470:	66bb      	str	r3, [r7, #104]	; 0x68
 8010472:	2300      	movs	r3, #0
 8010474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010476:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801047a:	460b      	mov	r3, r1
 801047c:	4313      	orrs	r3, r2
 801047e:	d00c      	beq.n	801049a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010484:	3328      	adds	r3, #40	; 0x28
 8010486:	2102      	movs	r1, #2
 8010488:	4618      	mov	r0, r3
 801048a:	f001 fbf5 	bl	8011c78 <RCCEx_PLL3_Config>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8010494:	2301      	movs	r3, #1
 8010496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801049a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80104a6:	663b      	str	r3, [r7, #96]	; 0x60
 80104a8:	2300      	movs	r3, #0
 80104aa:	667b      	str	r3, [r7, #100]	; 0x64
 80104ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80104b0:	460b      	mov	r3, r1
 80104b2:	4313      	orrs	r3, r2
 80104b4:	d038      	beq.n	8010528 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80104b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104c2:	d018      	beq.n	80104f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80104c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104c8:	d811      	bhi.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80104ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104ce:	d014      	beq.n	80104fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80104d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104d4:	d80b      	bhi.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d011      	beq.n	80104fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80104da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104de:	d106      	bne.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104e0:	4bc3      	ldr	r3, [pc, #780]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80104e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e4:	4ac2      	ldr	r2, [pc, #776]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80104e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80104ec:	e008      	b.n	8010500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80104ee:	2301      	movs	r3, #1
 80104f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80104f4:	e004      	b.n	8010500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80104f6:	bf00      	nop
 80104f8:	e002      	b.n	8010500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80104fa:	bf00      	nop
 80104fc:	e000      	b.n	8010500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80104fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10b      	bne.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010508:	4bb9      	ldr	r3, [pc, #740]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801050a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801050c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010518:	4ab5      	ldr	r2, [pc, #724]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801051a:	430b      	orrs	r3, r1
 801051c:	6553      	str	r3, [r2, #84]	; 0x54
 801051e:	e003      	b.n	8010528 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010524:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801052c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010530:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010534:	65bb      	str	r3, [r7, #88]	; 0x58
 8010536:	2300      	movs	r3, #0
 8010538:	65fb      	str	r3, [r7, #92]	; 0x5c
 801053a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801053e:	460b      	mov	r3, r1
 8010540:	4313      	orrs	r3, r2
 8010542:	d009      	beq.n	8010558 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010544:	4baa      	ldr	r3, [pc, #680]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801054c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010552:	4aa7      	ldr	r2, [pc, #668]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010554:	430b      	orrs	r3, r1
 8010556:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010560:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8010564:	653b      	str	r3, [r7, #80]	; 0x50
 8010566:	2300      	movs	r3, #0
 8010568:	657b      	str	r3, [r7, #84]	; 0x54
 801056a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801056e:	460b      	mov	r3, r1
 8010570:	4313      	orrs	r3, r2
 8010572:	d00a      	beq.n	801058a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010574:	4b9e      	ldr	r3, [pc, #632]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010576:	691b      	ldr	r3, [r3, #16]
 8010578:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 801057c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010580:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010584:	4a9a      	ldr	r2, [pc, #616]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010586:	430b      	orrs	r3, r1
 8010588:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801058a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8010596:	64bb      	str	r3, [r7, #72]	; 0x48
 8010598:	2300      	movs	r3, #0
 801059a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801059c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80105a0:	460b      	mov	r3, r1
 80105a2:	4313      	orrs	r3, r2
 80105a4:	d009      	beq.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80105a6:	4b92      	ldr	r3, [pc, #584]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80105ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b4:	4a8e      	ldr	r2, [pc, #568]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105b6:	430b      	orrs	r3, r1
 80105b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80105ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80105c6:	643b      	str	r3, [r7, #64]	; 0x40
 80105c8:	2300      	movs	r3, #0
 80105ca:	647b      	str	r3, [r7, #68]	; 0x44
 80105cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80105d0:	460b      	mov	r3, r1
 80105d2:	4313      	orrs	r3, r2
 80105d4:	d00e      	beq.n	80105f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80105d6:	4b86      	ldr	r3, [pc, #536]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105d8:	691b      	ldr	r3, [r3, #16]
 80105da:	4a85      	ldr	r2, [pc, #532]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80105e0:	6113      	str	r3, [r2, #16]
 80105e2:	4b83      	ldr	r3, [pc, #524]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105e4:	6919      	ldr	r1, [r3, #16]
 80105e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80105ee:	4a80      	ldr	r2, [pc, #512]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105f0:	430b      	orrs	r3, r1
 80105f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80105f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010600:	63bb      	str	r3, [r7, #56]	; 0x38
 8010602:	2300      	movs	r3, #0
 8010604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010606:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801060a:	460b      	mov	r3, r1
 801060c:	4313      	orrs	r3, r2
 801060e:	d009      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010610:	4b77      	ldr	r3, [pc, #476]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010614:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801061c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801061e:	4a74      	ldr	r2, [pc, #464]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010620:	430b      	orrs	r3, r1
 8010622:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010630:	633b      	str	r3, [r7, #48]	; 0x30
 8010632:	2300      	movs	r3, #0
 8010634:	637b      	str	r3, [r7, #52]	; 0x34
 8010636:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801063a:	460b      	mov	r3, r1
 801063c:	4313      	orrs	r3, r2
 801063e:	d00a      	beq.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010640:	4b6b      	ldr	r3, [pc, #428]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010644:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801064c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010650:	4a67      	ldr	r2, [pc, #412]	; (80107f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010652:	430b      	orrs	r3, r1
 8010654:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	2100      	movs	r1, #0
 8010660:	62b9      	str	r1, [r7, #40]	; 0x28
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010668:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801066c:	460b      	mov	r3, r1
 801066e:	4313      	orrs	r3, r2
 8010670:	d011      	beq.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010676:	3308      	adds	r3, #8
 8010678:	2100      	movs	r1, #0
 801067a:	4618      	mov	r0, r3
 801067c:	f001 fa4a 	bl	8011b14 <RCCEx_PLL2_Config>
 8010680:	4603      	mov	r3, r0
 8010682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801068a:	2b00      	cmp	r3, #0
 801068c:	d003      	beq.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801068e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069e:	2100      	movs	r1, #0
 80106a0:	6239      	str	r1, [r7, #32]
 80106a2:	f003 0302 	and.w	r3, r3, #2
 80106a6:	627b      	str	r3, [r7, #36]	; 0x24
 80106a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80106ac:	460b      	mov	r3, r1
 80106ae:	4313      	orrs	r3, r2
 80106b0:	d011      	beq.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80106b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106b6:	3308      	adds	r3, #8
 80106b8:	2101      	movs	r1, #1
 80106ba:	4618      	mov	r0, r3
 80106bc:	f001 fa2a 	bl	8011b14 <RCCEx_PLL2_Config>
 80106c0:	4603      	mov	r3, r0
 80106c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80106c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d003      	beq.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80106d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80106d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106de:	2100      	movs	r1, #0
 80106e0:	61b9      	str	r1, [r7, #24]
 80106e2:	f003 0304 	and.w	r3, r3, #4
 80106e6:	61fb      	str	r3, [r7, #28]
 80106e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80106ec:	460b      	mov	r3, r1
 80106ee:	4313      	orrs	r3, r2
 80106f0:	d011      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80106f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106f6:	3308      	adds	r3, #8
 80106f8:	2102      	movs	r1, #2
 80106fa:	4618      	mov	r0, r3
 80106fc:	f001 fa0a 	bl	8011b14 <RCCEx_PLL2_Config>
 8010700:	4603      	mov	r3, r0
 8010702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801070a:	2b00      	cmp	r3, #0
 801070c:	d003      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801070e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	2100      	movs	r1, #0
 8010720:	6139      	str	r1, [r7, #16]
 8010722:	f003 0308 	and.w	r3, r3, #8
 8010726:	617b      	str	r3, [r7, #20]
 8010728:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801072c:	460b      	mov	r3, r1
 801072e:	4313      	orrs	r3, r2
 8010730:	d011      	beq.n	8010756 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010736:	3328      	adds	r3, #40	; 0x28
 8010738:	2100      	movs	r1, #0
 801073a:	4618      	mov	r0, r3
 801073c:	f001 fa9c 	bl	8011c78 <RCCEx_PLL3_Config>
 8010740:	4603      	mov	r3, r0
 8010742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8010746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801074a:	2b00      	cmp	r3, #0
 801074c:	d003      	beq.n	8010756 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801074e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	2100      	movs	r1, #0
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	f003 0310 	and.w	r3, r3, #16
 8010766:	60fb      	str	r3, [r7, #12]
 8010768:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801076c:	460b      	mov	r3, r1
 801076e:	4313      	orrs	r3, r2
 8010770:	d011      	beq.n	8010796 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010776:	3328      	adds	r3, #40	; 0x28
 8010778:	2101      	movs	r1, #1
 801077a:	4618      	mov	r0, r3
 801077c:	f001 fa7c 	bl	8011c78 <RCCEx_PLL3_Config>
 8010780:	4603      	mov	r3, r0
 8010782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801078a:	2b00      	cmp	r3, #0
 801078c:	d003      	beq.n	8010796 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801078e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079e:	2100      	movs	r1, #0
 80107a0:	6039      	str	r1, [r7, #0]
 80107a2:	f003 0320 	and.w	r3, r3, #32
 80107a6:	607b      	str	r3, [r7, #4]
 80107a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80107ac:	460b      	mov	r3, r1
 80107ae:	4313      	orrs	r3, r2
 80107b0:	d011      	beq.n	80107d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80107b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107b6:	3328      	adds	r3, #40	; 0x28
 80107b8:	2102      	movs	r1, #2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f001 fa5c 	bl	8011c78 <RCCEx_PLL3_Config>
 80107c0:	4603      	mov	r3, r0
 80107c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80107c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d003      	beq.n	80107d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80107d6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80107de:	2300      	movs	r3, #0
 80107e0:	e000      	b.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80107ea:	46bd      	mov	sp, r7
 80107ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107f0:	58024400 	.word	0x58024400

080107f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b090      	sub	sp, #64	; 0x40
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80107fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010802:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010806:	430b      	orrs	r3, r1
 8010808:	f040 8094 	bne.w	8010934 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801080c:	4b9e      	ldr	r3, [pc, #632]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801080e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010810:	f003 0307 	and.w	r3, r3, #7
 8010814:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	2b04      	cmp	r3, #4
 801081a:	f200 8087 	bhi.w	801092c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801081e:	a201      	add	r2, pc, #4	; (adr r2, 8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010824:	08010839 	.word	0x08010839
 8010828:	08010861 	.word	0x08010861
 801082c:	08010889 	.word	0x08010889
 8010830:	08010925 	.word	0x08010925
 8010834:	080108b1 	.word	0x080108b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010838:	4b93      	ldr	r3, [pc, #588]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010844:	d108      	bne.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801084a:	4618      	mov	r0, r3
 801084c:	f001 f810 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010854:	f000 bd45 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010858:	2300      	movs	r3, #0
 801085a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801085c:	f000 bd41 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010860:	4b89      	ldr	r3, [pc, #548]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801086c:	d108      	bne.n	8010880 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801086e:	f107 0318 	add.w	r3, r7, #24
 8010872:	4618      	mov	r0, r3
 8010874:	f000 fd54 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801087c:	f000 bd31 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010884:	f000 bd2d 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010888:	4b7f      	ldr	r3, [pc, #508]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010894:	d108      	bne.n	80108a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010896:	f107 030c 	add.w	r3, r7, #12
 801089a:	4618      	mov	r0, r3
 801089c:	f000 fe94 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108a4:	f000 bd1d 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ac:	f000 bd19 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80108b0:	4b75      	ldr	r3, [pc, #468]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108ba:	4b73      	ldr	r3, [pc, #460]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f003 0304 	and.w	r3, r3, #4
 80108c2:	2b04      	cmp	r3, #4
 80108c4:	d10c      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80108c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d109      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108cc:	4b6e      	ldr	r3, [pc, #440]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	08db      	lsrs	r3, r3, #3
 80108d2:	f003 0303 	and.w	r3, r3, #3
 80108d6:	4a6d      	ldr	r2, [pc, #436]	; (8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80108d8:	fa22 f303 	lsr.w	r3, r2, r3
 80108dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108de:	e01f      	b.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108e0:	4b69      	ldr	r3, [pc, #420]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ec:	d106      	bne.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80108ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108f4:	d102      	bne.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80108f6:	4b66      	ldr	r3, [pc, #408]	; (8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80108f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108fa:	e011      	b.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80108fc:	4b62      	ldr	r3, [pc, #392]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010908:	d106      	bne.n	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010910:	d102      	bne.n	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010912:	4b60      	ldr	r3, [pc, #384]	; (8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010916:	e003      	b.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010918:	2300      	movs	r3, #0
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801091c:	f000 bce1 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010920:	f000 bcdf 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010924:	4b5c      	ldr	r3, [pc, #368]	; (8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010928:	f000 bcdb 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801092c:	2300      	movs	r3, #0
 801092e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010930:	f000 bcd7 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010938:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 801093c:	430b      	orrs	r3, r1
 801093e:	f040 80ad 	bne.w	8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010942:	4b51      	ldr	r3, [pc, #324]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010946:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801094a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010952:	d056      	beq.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801095a:	f200 8090 	bhi.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	2bc0      	cmp	r3, #192	; 0xc0
 8010962:	f000 8088 	beq.w	8010a76 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010968:	2bc0      	cmp	r3, #192	; 0xc0
 801096a:	f200 8088 	bhi.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	2b80      	cmp	r3, #128	; 0x80
 8010972:	d032      	beq.n	80109da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010976:	2b80      	cmp	r3, #128	; 0x80
 8010978:	f200 8081 	bhi.w	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	2b40      	cmp	r3, #64	; 0x40
 8010986:	d014      	beq.n	80109b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010988:	e079      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801098a:	4b3f      	ldr	r3, [pc, #252]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010996:	d108      	bne.n	80109aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801099c:	4618      	mov	r0, r3
 801099e:	f000 ff67 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109a6:	f000 bc9c 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109ae:	f000 bc98 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109b2:	4b35      	ldr	r3, [pc, #212]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109be:	d108      	bne.n	80109d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109c0:	f107 0318 	add.w	r3, r7, #24
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fcab 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109ce:	f000 bc88 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109d2:	2300      	movs	r3, #0
 80109d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109d6:	f000 bc84 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80109da:	4b2b      	ldr	r3, [pc, #172]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80109e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109e6:	d108      	bne.n	80109fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109e8:	f107 030c 	add.w	r3, r7, #12
 80109ec:	4618      	mov	r0, r3
 80109ee:	f000 fdeb 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109f6:	f000 bc74 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109fe:	f000 bc70 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010a02:	4b21      	ldr	r3, [pc, #132]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010a0c:	4b1e      	ldr	r3, [pc, #120]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b04      	cmp	r3, #4
 8010a16:	d10c      	bne.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d109      	bne.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a1e:	4b1a      	ldr	r3, [pc, #104]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	08db      	lsrs	r3, r3, #3
 8010a24:	f003 0303 	and.w	r3, r3, #3
 8010a28:	4a18      	ldr	r2, [pc, #96]	; (8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a30:	e01f      	b.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010a32:	4b15      	ldr	r3, [pc, #84]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a3e:	d106      	bne.n	8010a4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a46:	d102      	bne.n	8010a4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010a48:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a4c:	e011      	b.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010a4e:	4b0e      	ldr	r3, [pc, #56]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a5a:	d106      	bne.n	8010a6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a62:	d102      	bne.n	8010a6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010a64:	4b0b      	ldr	r3, [pc, #44]	; (8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a68:	e003      	b.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010a6e:	f000 bc38 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a72:	f000 bc36 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010a76:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a7a:	f000 bc32 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a82:	f000 bc2e 	b.w	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a86:	bf00      	nop
 8010a88:	58024400 	.word	0x58024400
 8010a8c:	03d09000 	.word	0x03d09000
 8010a90:	003d0900 	.word	0x003d0900
 8010a94:	017d7840 	.word	0x017d7840
 8010a98:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aa0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010aa4:	430b      	orrs	r3, r1
 8010aa6:	f040 809c 	bne.w	8010be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010aaa:	4b9e      	ldr	r3, [pc, #632]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010ab2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010aba:	d054      	beq.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010ac2:	f200 808b 	bhi.w	8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010acc:	f000 8083 	beq.w	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010ad6:	f200 8081 	bhi.w	8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ae0:	d02f      	beq.n	8010b42 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ae8:	d878      	bhi.n	8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d004      	beq.n	8010afa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010af6:	d012      	beq.n	8010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010af8:	e070      	b.n	8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010afa:	4b8a      	ldr	r3, [pc, #552]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b06:	d107      	bne.n	8010b18 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f000 feaf 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b16:	e3e4      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b1c:	e3e1      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b1e:	4b81      	ldr	r3, [pc, #516]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b2a:	d107      	bne.n	8010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b2c:	f107 0318 	add.w	r3, r7, #24
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 fbf5 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b3a:	e3d2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b40:	e3cf      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010b42:	4b78      	ldr	r3, [pc, #480]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b4e:	d107      	bne.n	8010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b50:	f107 030c 	add.w	r3, r7, #12
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 fd37 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b5e:	e3c0      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b60:	2300      	movs	r3, #0
 8010b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b64:	e3bd      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b66:	4b6f      	ldr	r3, [pc, #444]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010b6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b70:	4b6c      	ldr	r3, [pc, #432]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f003 0304 	and.w	r3, r3, #4
 8010b78:	2b04      	cmp	r3, #4
 8010b7a:	d10c      	bne.n	8010b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d109      	bne.n	8010b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b82:	4b68      	ldr	r3, [pc, #416]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	08db      	lsrs	r3, r3, #3
 8010b88:	f003 0303 	and.w	r3, r3, #3
 8010b8c:	4a66      	ldr	r2, [pc, #408]	; (8010d28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b94:	e01e      	b.n	8010bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b96:	4b63      	ldr	r3, [pc, #396]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba2:	d106      	bne.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010baa:	d102      	bne.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010bac:	4b5f      	ldr	r3, [pc, #380]	; (8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bb0:	e010      	b.n	8010bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010bb2:	4b5c      	ldr	r3, [pc, #368]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010bbe:	d106      	bne.n	8010bce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010bc6:	d102      	bne.n	8010bce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010bc8:	4b59      	ldr	r3, [pc, #356]	; (8010d30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bcc:	e002      	b.n	8010bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010bd2:	e386      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010bd4:	e385      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010bd6:	4b57      	ldr	r3, [pc, #348]	; (8010d34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bda:	e382      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010be0:	e37f      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010be6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010bea:	430b      	orrs	r3, r1
 8010bec:	f040 80a7 	bne.w	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010bf0:	4b4c      	ldr	r3, [pc, #304]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bf4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010bf8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010c00:	d055      	beq.n	8010cae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010c08:	f200 8096 	bhi.w	8010d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010c12:	f000 8084 	beq.w	8010d1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010c1c:	f200 808c 	bhi.w	8010d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010c26:	d030      	beq.n	8010c8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010c2e:	f200 8083 	bhi.w	8010d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d004      	beq.n	8010c42 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c3e:	d012      	beq.n	8010c66 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010c40:	e07a      	b.n	8010d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010c42:	4b38      	ldr	r3, [pc, #224]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010c4e:	d107      	bne.n	8010c60 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c54:	4618      	mov	r0, r3
 8010c56:	f000 fe0b 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c5e:	e340      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c64:	e33d      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c66:	4b2f      	ldr	r3, [pc, #188]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c72:	d107      	bne.n	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c74:	f107 0318 	add.w	r3, r7, #24
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 fb51 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c82:	e32e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c84:	2300      	movs	r3, #0
 8010c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c88:	e32b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c8a:	4b26      	ldr	r3, [pc, #152]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c96:	d107      	bne.n	8010ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c98:	f107 030c 	add.w	r3, r7, #12
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f000 fc93 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ca6:	e31c      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cac:	e319      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010cae:	4b1d      	ldr	r3, [pc, #116]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010cb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010cb8:	4b1a      	ldr	r3, [pc, #104]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d10c      	bne.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d109      	bne.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010cca:	4b16      	ldr	r3, [pc, #88]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	08db      	lsrs	r3, r3, #3
 8010cd0:	f003 0303 	and.w	r3, r3, #3
 8010cd4:	4a14      	ldr	r2, [pc, #80]	; (8010d28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cdc:	e01e      	b.n	8010d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010cde:	4b11      	ldr	r3, [pc, #68]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cea:	d106      	bne.n	8010cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010cf2:	d102      	bne.n	8010cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010cf4:	4b0d      	ldr	r3, [pc, #52]	; (8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cf8:	e010      	b.n	8010d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010cfa:	4b0a      	ldr	r3, [pc, #40]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d06:	d106      	bne.n	8010d16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d0e:	d102      	bne.n	8010d16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010d10:	4b07      	ldr	r3, [pc, #28]	; (8010d30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d14:	e002      	b.n	8010d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010d16:	2300      	movs	r3, #0
 8010d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010d1a:	e2e2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d1c:	e2e1      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010d1e:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d22:	e2de      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d24:	58024400 	.word	0x58024400
 8010d28:	03d09000 	.word	0x03d09000
 8010d2c:	003d0900 	.word	0x003d0900
 8010d30:	017d7840 	.word	0x017d7840
 8010d34:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d3c:	e2d1      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d42:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010d46:	430b      	orrs	r3, r1
 8010d48:	f040 809c 	bne.w	8010e84 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010d4c:	4b93      	ldr	r3, [pc, #588]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010d54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d5c:	d054      	beq.n	8010e08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d64:	f200 808b 	bhi.w	8010e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010d6e:	f000 8083 	beq.w	8010e78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010d78:	f200 8081 	bhi.w	8010e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d82:	d02f      	beq.n	8010de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d8a:	d878      	bhi.n	8010e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d004      	beq.n	8010d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d98:	d012      	beq.n	8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010d9a:	e070      	b.n	8010e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d9c:	4b7f      	ldr	r3, [pc, #508]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010da8:	d107      	bne.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dae:	4618      	mov	r0, r3
 8010db0:	f000 fd5e 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010db8:	e293      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dbe:	e290      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010dc0:	4b76      	ldr	r3, [pc, #472]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010dcc:	d107      	bne.n	8010dde <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dce:	f107 0318 	add.w	r3, r7, #24
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 faa4 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ddc:	e281      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010de2:	e27e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010de4:	4b6d      	ldr	r3, [pc, #436]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010df0:	d107      	bne.n	8010e02 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010df2:	f107 030c 	add.w	r3, r7, #12
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 fbe6 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e00:	e26f      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e06:	e26c      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010e08:	4b64      	ldr	r3, [pc, #400]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010e12:	4b62      	ldr	r3, [pc, #392]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f003 0304 	and.w	r3, r3, #4
 8010e1a:	2b04      	cmp	r3, #4
 8010e1c:	d10c      	bne.n	8010e38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d109      	bne.n	8010e38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e24:	4b5d      	ldr	r3, [pc, #372]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	08db      	lsrs	r3, r3, #3
 8010e2a:	f003 0303 	and.w	r3, r3, #3
 8010e2e:	4a5c      	ldr	r2, [pc, #368]	; (8010fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010e30:	fa22 f303 	lsr.w	r3, r2, r3
 8010e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e36:	e01e      	b.n	8010e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010e38:	4b58      	ldr	r3, [pc, #352]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e44:	d106      	bne.n	8010e54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e4c:	d102      	bne.n	8010e54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010e4e:	4b55      	ldr	r3, [pc, #340]	; (8010fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e52:	e010      	b.n	8010e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010e54:	4b51      	ldr	r3, [pc, #324]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e60:	d106      	bne.n	8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e68:	d102      	bne.n	8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010e6a:	4b4f      	ldr	r3, [pc, #316]	; (8010fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e6e:	e002      	b.n	8010e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010e70:	2300      	movs	r3, #0
 8010e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010e74:	e235      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010e76:	e234      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010e78:	4b4c      	ldr	r3, [pc, #304]	; (8010fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e7c:	e231      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e82:	e22e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e88:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010e8c:	430b      	orrs	r3, r1
 8010e8e:	f040 808f 	bne.w	8010fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010e92:	4b42      	ldr	r3, [pc, #264]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010e9a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010ea2:	d06b      	beq.n	8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010eaa:	d874      	bhi.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010eb2:	d056      	beq.n	8010f62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010eba:	d86c      	bhi.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ebe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ec2:	d03b      	beq.n	8010f3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010eca:	d864      	bhi.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ed2:	d021      	beq.n	8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010eda:	d85c      	bhi.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d004      	beq.n	8010eec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ee8:	d004      	beq.n	8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010eea:	e054      	b.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010eec:	f7fe fa0a 	bl	800f304 <HAL_RCC_GetPCLK1Freq>
 8010ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ef2:	e1f6      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ef4:	4b29      	ldr	r3, [pc, #164]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f00:	d107      	bne.n	8010f12 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f02:	f107 0318 	add.w	r3, r7, #24
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 fa0a 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f10:	e1e7      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f16:	e1e4      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010f18:	4b20      	ldr	r3, [pc, #128]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f24:	d107      	bne.n	8010f36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f26:	f107 030c 	add.w	r3, r7, #12
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 fb4c 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f34:	e1d5      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f3a:	e1d2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010f3c:	4b17      	ldr	r3, [pc, #92]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f003 0304 	and.w	r3, r3, #4
 8010f44:	2b04      	cmp	r3, #4
 8010f46:	d109      	bne.n	8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010f48:	4b14      	ldr	r3, [pc, #80]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	08db      	lsrs	r3, r3, #3
 8010f4e:	f003 0303 	and.w	r3, r3, #3
 8010f52:	4a13      	ldr	r2, [pc, #76]	; (8010fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010f54:	fa22 f303 	lsr.w	r3, r2, r3
 8010f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f5a:	e1c2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f60:	e1bf      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010f62:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f6e:	d102      	bne.n	8010f76 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010f70:	4b0c      	ldr	r3, [pc, #48]	; (8010fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f74:	e1b5      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f7a:	e1b2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010f7c:	4b07      	ldr	r3, [pc, #28]	; (8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f88:	d102      	bne.n	8010f90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010f8a:	4b07      	ldr	r3, [pc, #28]	; (8010fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f8e:	e1a8      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f94:	e1a5      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f9a:	e1a2      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f9c:	58024400 	.word	0x58024400
 8010fa0:	03d09000 	.word	0x03d09000
 8010fa4:	003d0900 	.word	0x003d0900
 8010fa8:	017d7840 	.word	0x017d7840
 8010fac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fb4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010fb8:	430b      	orrs	r3, r1
 8010fba:	d173      	bne.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010fbc:	4b9c      	ldr	r3, [pc, #624]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010fc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010fcc:	d02f      	beq.n	801102e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010fd4:	d863      	bhi.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d004      	beq.n	8010fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fe2:	d012      	beq.n	801100a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010fe4:	e05b      	b.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010fe6:	4b92      	ldr	r3, [pc, #584]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ff2:	d107      	bne.n	8011004 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ff4:	f107 0318 	add.w	r3, r7, #24
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 f991 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011002:	e16e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011004:	2300      	movs	r3, #0
 8011006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011008:	e16b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801100a:	4b89      	ldr	r3, [pc, #548]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011016:	d107      	bne.n	8011028 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011018:	f107 030c 	add.w	r3, r7, #12
 801101c:	4618      	mov	r0, r3
 801101e:	f000 fad3 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011026:	e15c      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011028:	2300      	movs	r3, #0
 801102a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801102c:	e159      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801102e:	4b80      	ldr	r3, [pc, #512]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011036:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011038:	4b7d      	ldr	r3, [pc, #500]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f003 0304 	and.w	r3, r3, #4
 8011040:	2b04      	cmp	r3, #4
 8011042:	d10c      	bne.n	801105e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011046:	2b00      	cmp	r3, #0
 8011048:	d109      	bne.n	801105e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801104a:	4b79      	ldr	r3, [pc, #484]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	08db      	lsrs	r3, r3, #3
 8011050:	f003 0303 	and.w	r3, r3, #3
 8011054:	4a77      	ldr	r2, [pc, #476]	; (8011234 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011056:	fa22 f303 	lsr.w	r3, r2, r3
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105c:	e01e      	b.n	801109c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801105e:	4b74      	ldr	r3, [pc, #464]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801106a:	d106      	bne.n	801107a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011072:	d102      	bne.n	801107a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011074:	4b70      	ldr	r3, [pc, #448]	; (8011238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011078:	e010      	b.n	801109c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801107a:	4b6d      	ldr	r3, [pc, #436]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011086:	d106      	bne.n	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801108e:	d102      	bne.n	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011090:	4b6a      	ldr	r3, [pc, #424]	; (801123c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011094:	e002      	b.n	801109c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011096:	2300      	movs	r3, #0
 8011098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801109a:	e122      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801109c:	e121      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110a2:	e11e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80110a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110a8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80110ac:	430b      	orrs	r3, r1
 80110ae:	d133      	bne.n	8011118 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80110b0:	4b5f      	ldr	r3, [pc, #380]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80110ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d004      	beq.n	80110ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80110c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110c6:	d012      	beq.n	80110ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80110c8:	e023      	b.n	8011112 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80110ca:	4b59      	ldr	r3, [pc, #356]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80110d6:	d107      	bne.n	80110e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80110d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110dc:	4618      	mov	r0, r3
 80110de:	f000 fbc7 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110e6:	e0fc      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80110e8:	2300      	movs	r3, #0
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110ec:	e0f9      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80110ee:	4b50      	ldr	r3, [pc, #320]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80110f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80110fa:	d107      	bne.n	801110c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110fc:	f107 0318 	add.w	r3, r7, #24
 8011100:	4618      	mov	r0, r3
 8011102:	f000 f90d 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011106:	6a3b      	ldr	r3, [r7, #32]
 8011108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801110a:	e0ea      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011110:	e0e7      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011116:	e0e4      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011118:	e9d7 2300 	ldrd	r2, r3, [r7]
 801111c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8011120:	430b      	orrs	r3, r1
 8011122:	f040 808d 	bne.w	8011240 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011126:	4b42      	ldr	r3, [pc, #264]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801112a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801112e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011136:	d06b      	beq.n	8011210 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801113e:	d874      	bhi.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011146:	d056      	beq.n	80111f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801114e:	d86c      	bhi.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011156:	d03b      	beq.n	80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801115e:	d864      	bhi.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011166:	d021      	beq.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801116e:	d85c      	bhi.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	2b00      	cmp	r3, #0
 8011174:	d004      	beq.n	8011180 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8011176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801117c:	d004      	beq.n	8011188 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801117e:	e054      	b.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011180:	f000 f8b8 	bl	80112f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8011184:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011186:	e0ac      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011188:	4b29      	ldr	r3, [pc, #164]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011194:	d107      	bne.n	80111a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011196:	f107 0318 	add.w	r3, r7, #24
 801119a:	4618      	mov	r0, r3
 801119c:	f000 f8c0 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111a4:	e09d      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111a6:	2300      	movs	r3, #0
 80111a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111aa:	e09a      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80111ac:	4b20      	ldr	r3, [pc, #128]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80111b8:	d107      	bne.n	80111ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111ba:	f107 030c 	add.w	r3, r7, #12
 80111be:	4618      	mov	r0, r3
 80111c0:	f000 fa02 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111c8:	e08b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111ce:	e088      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80111d0:	4b17      	ldr	r3, [pc, #92]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f003 0304 	and.w	r3, r3, #4
 80111d8:	2b04      	cmp	r3, #4
 80111da:	d109      	bne.n	80111f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80111dc:	4b14      	ldr	r3, [pc, #80]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	08db      	lsrs	r3, r3, #3
 80111e2:	f003 0303 	and.w	r3, r3, #3
 80111e6:	4a13      	ldr	r2, [pc, #76]	; (8011234 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80111e8:	fa22 f303 	lsr.w	r3, r2, r3
 80111ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111ee:	e078      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111f0:	2300      	movs	r3, #0
 80111f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111f4:	e075      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80111f6:	4b0e      	ldr	r3, [pc, #56]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011202:	d102      	bne.n	801120a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8011204:	4b0c      	ldr	r3, [pc, #48]	; (8011238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011208:	e06b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801120a:	2300      	movs	r3, #0
 801120c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801120e:	e068      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011210:	4b07      	ldr	r3, [pc, #28]	; (8011230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801121c:	d102      	bne.n	8011224 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801121e:	4b07      	ldr	r3, [pc, #28]	; (801123c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011222:	e05e      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011228:	e05b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801122e:	e058      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011230:	58024400 	.word	0x58024400
 8011234:	03d09000 	.word	0x03d09000
 8011238:	003d0900 	.word	0x003d0900
 801123c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011244:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8011248:	430b      	orrs	r3, r1
 801124a:	d148      	bne.n	80112de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801124c:	4b27      	ldr	r3, [pc, #156]	; (80112ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801124e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011254:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801125c:	d02a      	beq.n	80112b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011264:	d838      	bhi.n	80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8011266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011268:	2b00      	cmp	r3, #0
 801126a:	d004      	beq.n	8011276 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011272:	d00d      	beq.n	8011290 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8011274:	e030      	b.n	80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011276:	4b1d      	ldr	r3, [pc, #116]	; (80112ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801127e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011282:	d102      	bne.n	801128a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8011284:	4b1a      	ldr	r3, [pc, #104]	; (80112f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8011286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011288:	e02b      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801128a:	2300      	movs	r3, #0
 801128c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801128e:	e028      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011290:	4b16      	ldr	r3, [pc, #88]	; (80112ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801129c:	d107      	bne.n	80112ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112a2:	4618      	mov	r0, r3
 80112a4:	f000 fae4 	bl	8011870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80112a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112ac:	e019      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112b2:	e016      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80112b4:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80112bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80112c0:	d107      	bne.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112c2:	f107 0318 	add.w	r3, r7, #24
 80112c6:	4618      	mov	r0, r3
 80112c8:	f000 f82a 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112d0:	e007      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d6:	e004      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80112d8:	2300      	movs	r3, #0
 80112da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112dc:	e001      	b.n	80112e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80112de:	2300      	movs	r3, #0
 80112e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80112e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3740      	adds	r7, #64	; 0x40
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	58024400 	.word	0x58024400
 80112f0:	017d7840 	.word	0x017d7840

080112f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80112f8:	f7fd ffd4 	bl	800f2a4 <HAL_RCC_GetHCLKFreq>
 80112fc:	4602      	mov	r2, r0
 80112fe:	4b06      	ldr	r3, [pc, #24]	; (8011318 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	091b      	lsrs	r3, r3, #4
 8011304:	f003 0307 	and.w	r3, r3, #7
 8011308:	4904      	ldr	r1, [pc, #16]	; (801131c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801130a:	5ccb      	ldrb	r3, [r1, r3]
 801130c:	f003 031f 	and.w	r3, r3, #31
 8011310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011314:	4618      	mov	r0, r3
 8011316:	bd80      	pop	{r7, pc}
 8011318:	58024400 	.word	0x58024400
 801131c:	0801b904 	.word	0x0801b904

08011320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011320:	b480      	push	{r7}
 8011322:	b089      	sub	sp, #36	; 0x24
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011328:	4ba1      	ldr	r3, [pc, #644]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801132c:	f003 0303 	and.w	r3, r3, #3
 8011330:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8011332:	4b9f      	ldr	r3, [pc, #636]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011336:	0b1b      	lsrs	r3, r3, #12
 8011338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801133c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801133e:	4b9c      	ldr	r3, [pc, #624]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011342:	091b      	lsrs	r3, r3, #4
 8011344:	f003 0301 	and.w	r3, r3, #1
 8011348:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801134a:	4b99      	ldr	r3, [pc, #612]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801134e:	08db      	lsrs	r3, r3, #3
 8011350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011354:	693a      	ldr	r2, [r7, #16]
 8011356:	fb02 f303 	mul.w	r3, r2, r3
 801135a:	ee07 3a90 	vmov	s15, r3
 801135e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2b00      	cmp	r3, #0
 801136a:	f000 8111 	beq.w	8011590 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	2b02      	cmp	r3, #2
 8011372:	f000 8083 	beq.w	801147c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	2b02      	cmp	r3, #2
 801137a:	f200 80a1 	bhi.w	80114c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d003      	beq.n	801138c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	2b01      	cmp	r3, #1
 8011388:	d056      	beq.n	8011438 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801138a:	e099      	b.n	80114c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801138c:	4b88      	ldr	r3, [pc, #544]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f003 0320 	and.w	r3, r3, #32
 8011394:	2b00      	cmp	r3, #0
 8011396:	d02d      	beq.n	80113f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011398:	4b85      	ldr	r3, [pc, #532]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	08db      	lsrs	r3, r3, #3
 801139e:	f003 0303 	and.w	r3, r3, #3
 80113a2:	4a84      	ldr	r2, [pc, #528]	; (80115b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80113a4:	fa22 f303 	lsr.w	r3, r2, r3
 80113a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	ee07 3a90 	vmov	s15, r3
 80113b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	ee07 3a90 	vmov	s15, r3
 80113ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113c2:	4b7b      	ldr	r3, [pc, #492]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80113c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113ca:	ee07 3a90 	vmov	s15, r3
 80113ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80113d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80115b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80113da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80113f2:	e087      	b.n	8011504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	ee07 3a90 	vmov	s15, r3
 80113fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80115bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011406:	4b6a      	ldr	r3, [pc, #424]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801140a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801140e:	ee07 3a90 	vmov	s15, r3
 8011412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011416:	ed97 6a03 	vldr	s12, [r7, #12]
 801141a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80115b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801141e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801142a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801142e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011436:	e065      	b.n	8011504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	ee07 3a90 	vmov	s15, r3
 801143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80115c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801144a:	4b59      	ldr	r3, [pc, #356]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801144e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011452:	ee07 3a90 	vmov	s15, r3
 8011456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801145a:	ed97 6a03 	vldr	s12, [r7, #12]
 801145e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80115b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801146a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801146e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801147a:	e043      	b.n	8011504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	ee07 3a90 	vmov	s15, r3
 8011482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80115c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801148a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801148e:	4b48      	ldr	r3, [pc, #288]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011496:	ee07 3a90 	vmov	s15, r3
 801149a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801149e:	ed97 6a03 	vldr	s12, [r7, #12]
 80114a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80115b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80114a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114be:	e021      	b.n	8011504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	ee07 3a90 	vmov	s15, r3
 80114c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80115c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80114ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114d2:	4b37      	ldr	r3, [pc, #220]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80114d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114da:	ee07 3a90 	vmov	s15, r3
 80114de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80114e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80115b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80114ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011502:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011504:	4b2a      	ldr	r3, [pc, #168]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011508:	0a5b      	lsrs	r3, r3, #9
 801150a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801150e:	ee07 3a90 	vmov	s15, r3
 8011512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801151a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801151e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801152a:	ee17 2a90 	vmov	r2, s15
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011532:	4b1f      	ldr	r3, [pc, #124]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011536:	0c1b      	lsrs	r3, r3, #16
 8011538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801153c:	ee07 3a90 	vmov	s15, r3
 8011540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011548:	ee37 7a87 	vadd.f32	s14, s15, s14
 801154c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011558:	ee17 2a90 	vmov	r2, s15
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011560:	4b13      	ldr	r3, [pc, #76]	; (80115b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011564:	0e1b      	lsrs	r3, r3, #24
 8011566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801156a:	ee07 3a90 	vmov	s15, r3
 801156e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011576:	ee37 7a87 	vadd.f32	s14, s15, s14
 801157a:	edd7 6a07 	vldr	s13, [r7, #28]
 801157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011586:	ee17 2a90 	vmov	r2, s15
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801158e:	e008      	b.n	80115a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	609a      	str	r2, [r3, #8]
}
 80115a2:	bf00      	nop
 80115a4:	3724      	adds	r7, #36	; 0x24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	58024400 	.word	0x58024400
 80115b4:	03d09000 	.word	0x03d09000
 80115b8:	46000000 	.word	0x46000000
 80115bc:	4c742400 	.word	0x4c742400
 80115c0:	4a742400 	.word	0x4a742400
 80115c4:	4bbebc20 	.word	0x4bbebc20

080115c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b089      	sub	sp, #36	; 0x24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80115d0:	4ba1      	ldr	r3, [pc, #644]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d4:	f003 0303 	and.w	r3, r3, #3
 80115d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80115da:	4b9f      	ldr	r3, [pc, #636]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115de:	0d1b      	lsrs	r3, r3, #20
 80115e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80115e6:	4b9c      	ldr	r3, [pc, #624]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ea:	0a1b      	lsrs	r3, r3, #8
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80115f2:	4b99      	ldr	r3, [pc, #612]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80115f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115f6:	08db      	lsrs	r3, r3, #3
 80115f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115fc:	693a      	ldr	r2, [r7, #16]
 80115fe:	fb02 f303 	mul.w	r3, r2, r3
 8011602:	ee07 3a90 	vmov	s15, r3
 8011606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801160a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2b00      	cmp	r3, #0
 8011612:	f000 8111 	beq.w	8011838 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	2b02      	cmp	r3, #2
 801161a:	f000 8083 	beq.w	8011724 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	2b02      	cmp	r3, #2
 8011622:	f200 80a1 	bhi.w	8011768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d003      	beq.n	8011634 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	2b01      	cmp	r3, #1
 8011630:	d056      	beq.n	80116e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011632:	e099      	b.n	8011768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011634:	4b88      	ldr	r3, [pc, #544]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 0320 	and.w	r3, r3, #32
 801163c:	2b00      	cmp	r3, #0
 801163e:	d02d      	beq.n	801169c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011640:	4b85      	ldr	r3, [pc, #532]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	08db      	lsrs	r3, r3, #3
 8011646:	f003 0303 	and.w	r3, r3, #3
 801164a:	4a84      	ldr	r2, [pc, #528]	; (801185c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801164c:	fa22 f303 	lsr.w	r3, r2, r3
 8011650:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	ee07 3a90 	vmov	s15, r3
 8011658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	ee07 3a90 	vmov	s15, r3
 8011662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801166a:	4b7b      	ldr	r3, [pc, #492]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801166e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011672:	ee07 3a90 	vmov	s15, r3
 8011676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801167a:	ed97 6a03 	vldr	s12, [r7, #12]
 801167e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801168a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801168e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801169a:	e087      	b.n	80117ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	ee07 3a90 	vmov	s15, r3
 80116a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011864 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80116aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116ae:	4b6a      	ldr	r3, [pc, #424]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116b6:	ee07 3a90 	vmov	s15, r3
 80116ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116be:	ed97 6a03 	vldr	s12, [r7, #12]
 80116c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80116c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116de:	e065      	b.n	80117ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	ee07 3a90 	vmov	s15, r3
 80116e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80116ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116f2:	4b59      	ldr	r3, [pc, #356]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116fa:	ee07 3a90 	vmov	s15, r3
 80116fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011702:	ed97 6a03 	vldr	s12, [r7, #12]
 8011706:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801170a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801171e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011722:	e043      	b.n	80117ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	ee07 3a90 	vmov	s15, r3
 801172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801172e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801186c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011736:	4b48      	ldr	r3, [pc, #288]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801173a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801173e:	ee07 3a90 	vmov	s15, r3
 8011742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011746:	ed97 6a03 	vldr	s12, [r7, #12]
 801174a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801174e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801175a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011766:	e021      	b.n	80117ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	ee07 3a90 	vmov	s15, r3
 801176e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011772:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801177a:	4b37      	ldr	r3, [pc, #220]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801177e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011782:	ee07 3a90 	vmov	s15, r3
 8011786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801178a:	ed97 6a03 	vldr	s12, [r7, #12]
 801178e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801179a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801179e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80117ac:	4b2a      	ldr	r3, [pc, #168]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b0:	0a5b      	lsrs	r3, r3, #9
 80117b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117b6:	ee07 3a90 	vmov	s15, r3
 80117ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80117c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80117ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80117d2:	ee17 2a90 	vmov	r2, s15
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80117da:	4b1f      	ldr	r3, [pc, #124]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117de:	0c1b      	lsrs	r3, r3, #16
 80117e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117e4:	ee07 3a90 	vmov	s15, r3
 80117e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80117f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80117f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011800:	ee17 2a90 	vmov	r2, s15
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011808:	4b13      	ldr	r3, [pc, #76]	; (8011858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801180c:	0e1b      	lsrs	r3, r3, #24
 801180e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011812:	ee07 3a90 	vmov	s15, r3
 8011816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801181a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801181e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011822:	edd7 6a07 	vldr	s13, [r7, #28]
 8011826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801182a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801182e:	ee17 2a90 	vmov	r2, s15
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011836:	e008      	b.n	801184a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	609a      	str	r2, [r3, #8]
}
 801184a:	bf00      	nop
 801184c:	3724      	adds	r7, #36	; 0x24
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	58024400 	.word	0x58024400
 801185c:	03d09000 	.word	0x03d09000
 8011860:	46000000 	.word	0x46000000
 8011864:	4c742400 	.word	0x4c742400
 8011868:	4a742400 	.word	0x4a742400
 801186c:	4bbebc20 	.word	0x4bbebc20

08011870 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011870:	b480      	push	{r7}
 8011872:	b089      	sub	sp, #36	; 0x24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011878:	4ba0      	ldr	r3, [pc, #640]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801187c:	f003 0303 	and.w	r3, r3, #3
 8011880:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011882:	4b9e      	ldr	r3, [pc, #632]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011886:	091b      	lsrs	r3, r3, #4
 8011888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801188c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801188e:	4b9b      	ldr	r3, [pc, #620]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011892:	f003 0301 	and.w	r3, r3, #1
 8011896:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011898:	4b98      	ldr	r3, [pc, #608]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801189c:	08db      	lsrs	r3, r3, #3
 801189e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118a2:	693a      	ldr	r2, [r7, #16]
 80118a4:	fb02 f303 	mul.w	r3, r2, r3
 80118a8:	ee07 3a90 	vmov	s15, r3
 80118ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	f000 8111 	beq.w	8011ade <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80118bc:	69bb      	ldr	r3, [r7, #24]
 80118be:	2b02      	cmp	r3, #2
 80118c0:	f000 8083 	beq.w	80119ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	f200 80a1 	bhi.w	8011a0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d003      	beq.n	80118da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d056      	beq.n	8011986 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80118d8:	e099      	b.n	8011a0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118da:	4b88      	ldr	r3, [pc, #544]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f003 0320 	and.w	r3, r3, #32
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d02d      	beq.n	8011942 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80118e6:	4b85      	ldr	r3, [pc, #532]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	08db      	lsrs	r3, r3, #3
 80118ec:	f003 0303 	and.w	r3, r3, #3
 80118f0:	4a83      	ldr	r2, [pc, #524]	; (8011b00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80118f2:	fa22 f303 	lsr.w	r3, r2, r3
 80118f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	ee07 3a90 	vmov	s15, r3
 80118fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	ee07 3a90 	vmov	s15, r3
 8011908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801190c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011910:	4b7a      	ldr	r3, [pc, #488]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011918:	ee07 3a90 	vmov	s15, r3
 801191c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011920:	ed97 6a03 	vldr	s12, [r7, #12]
 8011924:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801192c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011938:	ee67 7a27 	vmul.f32	s15, s14, s15
 801193c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011940:	e087      	b.n	8011a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	ee07 3a90 	vmov	s15, r3
 8011948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801194c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011b08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011954:	4b69      	ldr	r3, [pc, #420]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801195c:	ee07 3a90 	vmov	s15, r3
 8011960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011964:	ed97 6a03 	vldr	s12, [r7, #12]
 8011968:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801196c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011984:	e065      	b.n	8011a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	ee07 3a90 	vmov	s15, r3
 801198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011990:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011b0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011998:	4b58      	ldr	r3, [pc, #352]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119a0:	ee07 3a90 	vmov	s15, r3
 80119a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80119ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80119b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80119bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80119c8:	e043      	b.n	8011a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	ee07 3a90 	vmov	s15, r3
 80119d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011b10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80119d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119dc:	4b47      	ldr	r3, [pc, #284]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80119de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119e4:	ee07 3a90 	vmov	s15, r3
 80119e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80119f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80119f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a0c:	e021      	b.n	8011a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	ee07 3a90 	vmov	s15, r3
 8011a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011b08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a20:	4b36      	ldr	r3, [pc, #216]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a28:	ee07 3a90 	vmov	s15, r3
 8011a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011a52:	4b2a      	ldr	r3, [pc, #168]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a56:	0a5b      	lsrs	r3, r3, #9
 8011a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a5c:	ee07 3a90 	vmov	s15, r3
 8011a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a78:	ee17 2a90 	vmov	r2, s15
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011a80:	4b1e      	ldr	r3, [pc, #120]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a84:	0c1b      	lsrs	r3, r3, #16
 8011a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a8a:	ee07 3a90 	vmov	s15, r3
 8011a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011aa6:	ee17 2a90 	vmov	r2, s15
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011aae:	4b13      	ldr	r3, [pc, #76]	; (8011afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab2:	0e1b      	lsrs	r3, r3, #24
 8011ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ab8:	ee07 3a90 	vmov	s15, r3
 8011abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8011acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ad4:	ee17 2a90 	vmov	r2, s15
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011adc:	e008      	b.n	8011af0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	609a      	str	r2, [r3, #8]
}
 8011af0:	bf00      	nop
 8011af2:	3724      	adds	r7, #36	; 0x24
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	58024400 	.word	0x58024400
 8011b00:	03d09000 	.word	0x03d09000
 8011b04:	46000000 	.word	0x46000000
 8011b08:	4c742400 	.word	0x4c742400
 8011b0c:	4a742400 	.word	0x4a742400
 8011b10:	4bbebc20 	.word	0x4bbebc20

08011b14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011b22:	4b53      	ldr	r3, [pc, #332]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b26:	f003 0303 	and.w	r3, r3, #3
 8011b2a:	2b03      	cmp	r3, #3
 8011b2c:	d101      	bne.n	8011b32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e099      	b.n	8011c66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011b32:	4b4f      	ldr	r3, [pc, #316]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4a4e      	ldr	r2, [pc, #312]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b3e:	f7f4 fc03 	bl	8006348 <HAL_GetTick>
 8011b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011b44:	e008      	b.n	8011b58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011b46:	f7f4 fbff 	bl	8006348 <HAL_GetTick>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	1ad3      	subs	r3, r2, r3
 8011b50:	2b02      	cmp	r3, #2
 8011b52:	d901      	bls.n	8011b58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011b54:	2303      	movs	r3, #3
 8011b56:	e086      	b.n	8011c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011b58:	4b45      	ldr	r3, [pc, #276]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1f0      	bne.n	8011b46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011b64:	4b42      	ldr	r3, [pc, #264]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	031b      	lsls	r3, r3, #12
 8011b72:	493f      	ldr	r1, [pc, #252]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011b74:	4313      	orrs	r3, r2
 8011b76:	628b      	str	r3, [r1, #40]	; 0x28
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	3b01      	subs	r3, #1
 8011b88:	025b      	lsls	r3, r3, #9
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	431a      	orrs	r2, r3
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	3b01      	subs	r3, #1
 8011b94:	041b      	lsls	r3, r3, #16
 8011b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011b9a:	431a      	orrs	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	061b      	lsls	r3, r3, #24
 8011ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011ba8:	4931      	ldr	r1, [pc, #196]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011baa:	4313      	orrs	r3, r2
 8011bac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011bae:	4b30      	ldr	r3, [pc, #192]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	695b      	ldr	r3, [r3, #20]
 8011bba:	492d      	ldr	r1, [pc, #180]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011bc0:	4b2b      	ldr	r3, [pc, #172]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bc4:	f023 0220 	bic.w	r2, r3, #32
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	4928      	ldr	r1, [pc, #160]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011bd2:	4b27      	ldr	r3, [pc, #156]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd6:	4a26      	ldr	r2, [pc, #152]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bd8:	f023 0310 	bic.w	r3, r3, #16
 8011bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011bde:	4b24      	ldr	r3, [pc, #144]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011be2:	4b24      	ldr	r3, [pc, #144]	; (8011c74 <RCCEx_PLL2_Config+0x160>)
 8011be4:	4013      	ands	r3, r2
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	69d2      	ldr	r2, [r2, #28]
 8011bea:	00d2      	lsls	r2, r2, #3
 8011bec:	4920      	ldr	r1, [pc, #128]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011bf2:	4b1f      	ldr	r3, [pc, #124]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf6:	4a1e      	ldr	r2, [pc, #120]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011bf8:	f043 0310 	orr.w	r3, r3, #16
 8011bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d106      	bne.n	8011c12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011c04:	4b1a      	ldr	r3, [pc, #104]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c08:	4a19      	ldr	r2, [pc, #100]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c10:	e00f      	b.n	8011c32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d106      	bne.n	8011c26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011c18:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1c:	4a14      	ldr	r2, [pc, #80]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c24:	e005      	b.n	8011c32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011c26:	4b12      	ldr	r3, [pc, #72]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c2a:	4a11      	ldr	r2, [pc, #68]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011c32:	4b0f      	ldr	r3, [pc, #60]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a0e      	ldr	r2, [pc, #56]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011c3e:	f7f4 fb83 	bl	8006348 <HAL_GetTick>
 8011c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011c44:	e008      	b.n	8011c58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011c46:	f7f4 fb7f 	bl	8006348 <HAL_GetTick>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	1ad3      	subs	r3, r2, r3
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	d901      	bls.n	8011c58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011c54:	2303      	movs	r3, #3
 8011c56:	e006      	b.n	8011c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011c58:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <RCCEx_PLL2_Config+0x15c>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d0f0      	beq.n	8011c46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	58024400 	.word	0x58024400
 8011c74:	ffff0007 	.word	0xffff0007

08011c78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011c86:	4b53      	ldr	r3, [pc, #332]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c8a:	f003 0303 	and.w	r3, r3, #3
 8011c8e:	2b03      	cmp	r3, #3
 8011c90:	d101      	bne.n	8011c96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011c92:	2301      	movs	r3, #1
 8011c94:	e099      	b.n	8011dca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011c96:	4b4f      	ldr	r3, [pc, #316]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a4e      	ldr	r2, [pc, #312]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ca2:	f7f4 fb51 	bl	8006348 <HAL_GetTick>
 8011ca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ca8:	e008      	b.n	8011cbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011caa:	f7f4 fb4d 	bl	8006348 <HAL_GetTick>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	1ad3      	subs	r3, r2, r3
 8011cb4:	2b02      	cmp	r3, #2
 8011cb6:	d901      	bls.n	8011cbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011cb8:	2303      	movs	r3, #3
 8011cba:	e086      	b.n	8011dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011cbc:	4b45      	ldr	r3, [pc, #276]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d1f0      	bne.n	8011caa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011cc8:	4b42      	ldr	r3, [pc, #264]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ccc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	051b      	lsls	r3, r3, #20
 8011cd6:	493f      	ldr	r1, [pc, #252]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	628b      	str	r3, [r1, #40]	; 0x28
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	689b      	ldr	r3, [r3, #8]
 8011cea:	3b01      	subs	r3, #1
 8011cec:	025b      	lsls	r3, r3, #9
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	431a      	orrs	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	041b      	lsls	r3, r3, #16
 8011cfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011cfe:	431a      	orrs	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	061b      	lsls	r3, r3, #24
 8011d08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011d0c:	4931      	ldr	r1, [pc, #196]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d0e:	4313      	orrs	r3, r2
 8011d10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011d12:	4b30      	ldr	r3, [pc, #192]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	695b      	ldr	r3, [r3, #20]
 8011d1e:	492d      	ldr	r1, [pc, #180]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d20:	4313      	orrs	r3, r2
 8011d22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011d24:	4b2b      	ldr	r3, [pc, #172]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	4928      	ldr	r1, [pc, #160]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d32:	4313      	orrs	r3, r2
 8011d34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011d36:	4b27      	ldr	r3, [pc, #156]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3a:	4a26      	ldr	r2, [pc, #152]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011d42:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d46:	4b24      	ldr	r3, [pc, #144]	; (8011dd8 <RCCEx_PLL3_Config+0x160>)
 8011d48:	4013      	ands	r3, r2
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	69d2      	ldr	r2, [r2, #28]
 8011d4e:	00d2      	lsls	r2, r2, #3
 8011d50:	4920      	ldr	r1, [pc, #128]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d52:	4313      	orrs	r3, r2
 8011d54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011d56:	4b1f      	ldr	r3, [pc, #124]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	4a1e      	ldr	r2, [pc, #120]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d106      	bne.n	8011d76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011d68:	4b1a      	ldr	r3, [pc, #104]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d6c:	4a19      	ldr	r2, [pc, #100]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011d74:	e00f      	b.n	8011d96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d106      	bne.n	8011d8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011d7c:	4b15      	ldr	r3, [pc, #84]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d80:	4a14      	ldr	r2, [pc, #80]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011d86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011d88:	e005      	b.n	8011d96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011d8a:	4b12      	ldr	r3, [pc, #72]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8e:	4a11      	ldr	r2, [pc, #68]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011d96:	4b0f      	ldr	r3, [pc, #60]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4a0e      	ldr	r2, [pc, #56]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011da2:	f7f4 fad1 	bl	8006348 <HAL_GetTick>
 8011da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011da8:	e008      	b.n	8011dbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011daa:	f7f4 facd 	bl	8006348 <HAL_GetTick>
 8011dae:	4602      	mov	r2, r0
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d901      	bls.n	8011dbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011db8:	2303      	movs	r3, #3
 8011dba:	e006      	b.n	8011dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011dbc:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <RCCEx_PLL3_Config+0x15c>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d0f0      	beq.n	8011daa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	58024400 	.word	0x58024400
 8011dd8:	ffff0007 	.word	0xffff0007

08011ddc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011de4:	2301      	movs	r3, #1
 8011de6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d071      	beq.n	8011ed2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f7f2 f92a 	bl	800405c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2202      	movs	r2, #2
 8011e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	f003 0310 	and.w	r3, r3, #16
 8011e1a:	2b10      	cmp	r3, #16
 8011e1c:	d050      	beq.n	8011ec0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	22ca      	movs	r2, #202	; 0xca
 8011e24:	625a      	str	r2, [r3, #36]	; 0x24
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2253      	movs	r2, #83	; 0x53
 8011e2c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fa4a 	bl	80122c8 <RTC_EnterInitMode>
 8011e34:	4603      	mov	r3, r0
 8011e36:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011e38:	7bfb      	ldrb	r3, [r7, #15]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d124      	bne.n	8011e88 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6899      	ldr	r1, [r3, #8]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	4b24      	ldr	r3, [pc, #144]	; (8011edc <HAL_RTC_Init+0x100>)
 8011e4a:	400b      	ands	r3, r1
 8011e4c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	6899      	ldr	r1, [r3, #8]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685a      	ldr	r2, [r3, #4]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	431a      	orrs	r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	431a      	orrs	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	430a      	orrs	r2, r1
 8011e6a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	0419      	lsls	r1, r3, #16
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	68da      	ldr	r2, [r3, #12]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	430a      	orrs	r2, r1
 8011e7c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f000 fa56 	bl	8012330 <RTC_ExitInitMode>
 8011e84:	4603      	mov	r3, r0
 8011e86:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d113      	bne.n	8011eb6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f022 0203 	bic.w	r2, r2, #3
 8011e9c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	69da      	ldr	r2, [r3, #28]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	695b      	ldr	r3, [r3, #20]
 8011eac:	431a      	orrs	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	430a      	orrs	r2, r1
 8011eb4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	22ff      	movs	r2, #255	; 0xff
 8011ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8011ebe:	e001      	b.n	8011ec4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d103      	bne.n	8011ed2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2201      	movs	r2, #1
 8011ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	ff8fffbf 	.word	0xff8fffbf

08011ee0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b087      	sub	sp, #28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d101      	bne.n	8011efa <HAL_RTC_SetTime+0x1a>
 8011ef6:	2302      	movs	r3, #2
 8011ef8:	e089      	b.n	801200e <HAL_RTC_SetTime+0x12e>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2201      	movs	r2, #1
 8011efe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2202      	movs	r2, #2
 8011f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	22ca      	movs	r2, #202	; 0xca
 8011f10:	625a      	str	r2, [r3, #36]	; 0x24
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2253      	movs	r2, #83	; 0x53
 8011f18:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f000 f9d4 	bl	80122c8 <RTC_EnterInitMode>
 8011f20:	4603      	mov	r3, r0
 8011f22:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011f24:	7cfb      	ldrb	r3, [r7, #19]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d161      	bne.n	8011fee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d126      	bne.n	8011f7e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d102      	bne.n	8011f44 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2200      	movs	r2, #0
 8011f42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f000 fa2f 	bl	80123ac <RTC_ByteToBcd2>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	785b      	ldrb	r3, [r3, #1]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f000 fa28 	bl	80123ac <RTC_ByteToBcd2>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011f60:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	789b      	ldrb	r3, [r3, #2]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f000 fa20 	bl	80123ac <RTC_ByteToBcd2>
 8011f6c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f6e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	78db      	ldrb	r3, [r3, #3]
 8011f76:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	617b      	str	r3, [r7, #20]
 8011f7c:	e018      	b.n	8011fb0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d102      	bne.n	8011f92 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	785b      	ldrb	r3, [r3, #1]
 8011f9c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011f9e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011fa4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	78db      	ldrb	r3, [r3, #3]
 8011faa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011fac:	4313      	orrs	r3, r2
 8011fae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	6979      	ldr	r1, [r7, #20]
 8011fb6:	4b18      	ldr	r3, [pc, #96]	; (8012018 <HAL_RTC_SetTime+0x138>)
 8011fb8:	400b      	ands	r3, r1
 8011fba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	689a      	ldr	r2, [r3, #8]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011fca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	6899      	ldr	r1, [r3, #8]
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	68da      	ldr	r2, [r3, #12]
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	691b      	ldr	r3, [r3, #16]
 8011fda:	431a      	orrs	r2, r3
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	430a      	orrs	r2, r1
 8011fe2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f000 f9a3 	bl	8012330 <RTC_ExitInitMode>
 8011fea:	4603      	mov	r3, r0
 8011fec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	22ff      	movs	r2, #255	; 0xff
 8011ff4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011ff6:	7cfb      	ldrb	r3, [r7, #19]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d103      	bne.n	8012004 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2201      	movs	r2, #1
 8012000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2200      	movs	r2, #0
 8012008:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801200c:	7cfb      	ldrb	r3, [r7, #19]
}
 801200e:	4618      	mov	r0, r3
 8012010:	371c      	adds	r7, #28
 8012012:	46bd      	mov	sp, r7
 8012014:	bd90      	pop	{r4, r7, pc}
 8012016:	bf00      	nop
 8012018:	007f7f7f 	.word	0x007f7f7f

0801201c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b086      	sub	sp, #24
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	4b22      	ldr	r3, [pc, #136]	; (80120d0 <HAL_RTC_GetTime+0xb4>)
 8012048:	4013      	ands	r3, r2
 801204a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	0c1b      	lsrs	r3, r3, #16
 8012050:	b2db      	uxtb	r3, r3
 8012052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012056:	b2da      	uxtb	r2, r3
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	0a1b      	lsrs	r3, r3, #8
 8012060:	b2db      	uxtb	r3, r3
 8012062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012066:	b2da      	uxtb	r2, r3
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	b2db      	uxtb	r3, r3
 8012070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012074:	b2da      	uxtb	r2, r3
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	0d9b      	lsrs	r3, r3, #22
 801207e:	b2db      	uxtb	r3, r3
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	b2da      	uxtb	r2, r3
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d11a      	bne.n	80120c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	4618      	mov	r0, r3
 8012096:	f000 f9a9 	bl	80123ec <RTC_Bcd2ToByte>
 801209a:	4603      	mov	r3, r0
 801209c:	461a      	mov	r2, r3
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	785b      	ldrb	r3, [r3, #1]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 f9a0 	bl	80123ec <RTC_Bcd2ToByte>
 80120ac:	4603      	mov	r3, r0
 80120ae:	461a      	mov	r2, r3
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	789b      	ldrb	r3, [r3, #2]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 f997 	bl	80123ec <RTC_Bcd2ToByte>
 80120be:	4603      	mov	r3, r0
 80120c0:	461a      	mov	r2, r3
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80120c6:	2300      	movs	r3, #0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3718      	adds	r7, #24
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	007f7f7f 	.word	0x007f7f7f

080120d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80120d4:	b590      	push	{r4, r7, lr}
 80120d6:	b087      	sub	sp, #28
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	60b9      	str	r1, [r7, #8]
 80120de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d101      	bne.n	80120ee <HAL_RTC_SetDate+0x1a>
 80120ea:	2302      	movs	r3, #2
 80120ec:	e073      	b.n	80121d6 <HAL_RTC_SetDate+0x102>
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2201      	movs	r2, #1
 80120f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2202      	movs	r2, #2
 80120fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d10e      	bne.n	8012122 <HAL_RTC_SetDate+0x4e>
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	785b      	ldrb	r3, [r3, #1]
 8012108:	f003 0310 	and.w	r3, r3, #16
 801210c:	2b00      	cmp	r3, #0
 801210e:	d008      	beq.n	8012122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	785b      	ldrb	r3, [r3, #1]
 8012114:	f023 0310 	bic.w	r3, r3, #16
 8012118:	b2db      	uxtb	r3, r3
 801211a:	330a      	adds	r3, #10
 801211c:	b2da      	uxtb	r2, r3
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d11c      	bne.n	8012162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	78db      	ldrb	r3, [r3, #3]
 801212c:	4618      	mov	r0, r3
 801212e:	f000 f93d 	bl	80123ac <RTC_ByteToBcd2>
 8012132:	4603      	mov	r3, r0
 8012134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	785b      	ldrb	r3, [r3, #1]
 801213a:	4618      	mov	r0, r3
 801213c:	f000 f936 	bl	80123ac <RTC_ByteToBcd2>
 8012140:	4603      	mov	r3, r0
 8012142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	789b      	ldrb	r3, [r3, #2]
 801214a:	4618      	mov	r0, r3
 801214c:	f000 f92e 	bl	80123ac <RTC_ByteToBcd2>
 8012150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801215c:	4313      	orrs	r3, r2
 801215e:	617b      	str	r3, [r7, #20]
 8012160:	e00e      	b.n	8012180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	78db      	ldrb	r3, [r3, #3]
 8012166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	785b      	ldrb	r3, [r3, #1]
 801216c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801216e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801217c:	4313      	orrs	r3, r2
 801217e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	22ca      	movs	r2, #202	; 0xca
 8012186:	625a      	str	r2, [r3, #36]	; 0x24
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2253      	movs	r2, #83	; 0x53
 801218e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f000 f899 	bl	80122c8 <RTC_EnterInitMode>
 8012196:	4603      	mov	r3, r0
 8012198:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801219a:	7cfb      	ldrb	r3, [r7, #19]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10a      	bne.n	80121b6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	6979      	ldr	r1, [r7, #20]
 80121a6:	4b0e      	ldr	r3, [pc, #56]	; (80121e0 <HAL_RTC_SetDate+0x10c>)
 80121a8:	400b      	ands	r3, r1
 80121aa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f000 f8bf 	bl	8012330 <RTC_ExitInitMode>
 80121b2:	4603      	mov	r3, r0
 80121b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	22ff      	movs	r2, #255	; 0xff
 80121bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80121be:	7cfb      	ldrb	r3, [r7, #19]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d103      	bne.n	80121cc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2201      	movs	r2, #1
 80121c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80121d4:	7cfb      	ldrb	r3, [r7, #19]


}
 80121d6:	4618      	mov	r0, r3
 80121d8:	371c      	adds	r7, #28
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd90      	pop	{r4, r7, pc}
 80121de:	bf00      	nop
 80121e0:	00ffff3f 	.word	0x00ffff3f

080121e4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	685a      	ldr	r2, [r3, #4]
 80121f6:	4b21      	ldr	r3, [pc, #132]	; (801227c <HAL_RTC_GetDate+0x98>)
 80121f8:	4013      	ands	r3, r2
 80121fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	0c1b      	lsrs	r3, r3, #16
 8012200:	b2da      	uxtb	r2, r3
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	0a1b      	lsrs	r3, r3, #8
 801220a:	b2db      	uxtb	r3, r3
 801220c:	f003 031f 	and.w	r3, r3, #31
 8012210:	b2da      	uxtb	r2, r3
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	b2db      	uxtb	r3, r3
 801221a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801221e:	b2da      	uxtb	r2, r3
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	0b5b      	lsrs	r3, r3, #13
 8012228:	b2db      	uxtb	r3, r3
 801222a:	f003 0307 	and.w	r3, r3, #7
 801222e:	b2da      	uxtb	r2, r3
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d11a      	bne.n	8012270 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	78db      	ldrb	r3, [r3, #3]
 801223e:	4618      	mov	r0, r3
 8012240:	f000 f8d4 	bl	80123ec <RTC_Bcd2ToByte>
 8012244:	4603      	mov	r3, r0
 8012246:	461a      	mov	r2, r3
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	785b      	ldrb	r3, [r3, #1]
 8012250:	4618      	mov	r0, r3
 8012252:	f000 f8cb 	bl	80123ec <RTC_Bcd2ToByte>
 8012256:	4603      	mov	r3, r0
 8012258:	461a      	mov	r2, r3
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	789b      	ldrb	r3, [r3, #2]
 8012262:	4618      	mov	r0, r3
 8012264:	f000 f8c2 	bl	80123ec <RTC_Bcd2ToByte>
 8012268:	4603      	mov	r3, r0
 801226a:	461a      	mov	r2, r3
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	00ffff3f 	.word	0x00ffff3f

08012280 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4a0d      	ldr	r2, [pc, #52]	; (80122c4 <HAL_RTC_WaitForSynchro+0x44>)
 801228e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8012290:	f7f4 f85a 	bl	8006348 <HAL_GetTick>
 8012294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012296:	e009      	b.n	80122ac <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012298:	f7f4 f856 	bl	8006348 <HAL_GetTick>
 801229c:	4602      	mov	r2, r0
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122a6:	d901      	bls.n	80122ac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80122a8:	2303      	movs	r3, #3
 80122aa:	e007      	b.n	80122bc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	f003 0320 	and.w	r3, r3, #32
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d0ee      	beq.n	8012298 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80122ba:	2300      	movs	r3, #0
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	0003ff5f 	.word	0x0003ff5f

080122c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80122d0:	2300      	movs	r3, #0
 80122d2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d120      	bne.n	8012324 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80122ec:	f7f4 f82c 	bl	8006348 <HAL_GetTick>
 80122f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80122f2:	e00d      	b.n	8012310 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80122f4:	f7f4 f828 	bl	8006348 <HAL_GetTick>
 80122f8:	4602      	mov	r2, r0
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012302:	d905      	bls.n	8012310 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8012304:	2303      	movs	r3, #3
 8012306:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2203      	movs	r2, #3
 801230c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801231a:	2b00      	cmp	r3, #0
 801231c:	d102      	bne.n	8012324 <RTC_EnterInitMode+0x5c>
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	2b03      	cmp	r3, #3
 8012322:	d1e7      	bne.n	80122f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8012324:	7bfb      	ldrb	r3, [r7, #15]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
	...

08012330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012338:	2300      	movs	r3, #0
 801233a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 801233c:	4b1a      	ldr	r3, [pc, #104]	; (80123a8 <RTC_ExitInitMode+0x78>)
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	4a19      	ldr	r2, [pc, #100]	; (80123a8 <RTC_ExitInitMode+0x78>)
 8012342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012346:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012348:	4b17      	ldr	r3, [pc, #92]	; (80123a8 <RTC_ExitInitMode+0x78>)
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	f003 0320 	and.w	r3, r3, #32
 8012350:	2b00      	cmp	r3, #0
 8012352:	d10c      	bne.n	801236e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff ff93 	bl	8012280 <HAL_RTC_WaitForSynchro>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	d01e      	beq.n	801239e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2203      	movs	r2, #3
 8012364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012368:	2303      	movs	r3, #3
 801236a:	73fb      	strb	r3, [r7, #15]
 801236c:	e017      	b.n	801239e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801236e:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <RTC_ExitInitMode+0x78>)
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	4a0d      	ldr	r2, [pc, #52]	; (80123a8 <RTC_ExitInitMode+0x78>)
 8012374:	f023 0320 	bic.w	r3, r3, #32
 8012378:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff ff80 	bl	8012280 <HAL_RTC_WaitForSynchro>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d005      	beq.n	8012392 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2203      	movs	r2, #3
 801238a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801238e:	2303      	movs	r3, #3
 8012390:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012392:	4b05      	ldr	r3, [pc, #20]	; (80123a8 <RTC_ExitInitMode+0x78>)
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	4a04      	ldr	r2, [pc, #16]	; (80123a8 <RTC_ExitInitMode+0x78>)
 8012398:	f043 0320 	orr.w	r3, r3, #32
 801239c:	6093      	str	r3, [r2, #8]
  }

  return status;
 801239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	58004000 	.word	0x58004000

080123ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80123ac:	b480      	push	{r7}
 80123ae:	b085      	sub	sp, #20
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	4603      	mov	r3, r0
 80123b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80123b6:	2300      	movs	r3, #0
 80123b8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80123ba:	79fb      	ldrb	r3, [r7, #7]
 80123bc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80123be:	e005      	b.n	80123cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	3301      	adds	r3, #1
 80123c4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80123c6:	7afb      	ldrb	r3, [r7, #11]
 80123c8:	3b0a      	subs	r3, #10
 80123ca:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80123cc:	7afb      	ldrb	r3, [r7, #11]
 80123ce:	2b09      	cmp	r3, #9
 80123d0:	d8f6      	bhi.n	80123c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	011b      	lsls	r3, r3, #4
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	7afb      	ldrb	r3, [r7, #11]
 80123dc:	4313      	orrs	r3, r2
 80123de:	b2db      	uxtb	r3, r3
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	4603      	mov	r3, r0
 80123f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80123f6:	79fb      	ldrb	r3, [r7, #7]
 80123f8:	091b      	lsrs	r3, r3, #4
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	461a      	mov	r2, r3
 80123fe:	0092      	lsls	r2, r2, #2
 8012400:	4413      	add	r3, r2
 8012402:	005b      	lsls	r3, r3, #1
 8012404:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	f003 030f 	and.w	r3, r3, #15
 801240c:	b2da      	uxtb	r2, r3
 801240e:	7bfb      	ldrb	r3, [r7, #15]
 8012410:	4413      	add	r3, r2
 8012412:	b2db      	uxtb	r3, r3
}
 8012414:	4618      	mov	r0, r3
 8012416:	3714      	adds	r7, #20
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	e10f      	b.n	8012652 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4a87      	ldr	r2, [pc, #540]	; (801265c <HAL_SPI_Init+0x23c>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d00f      	beq.n	8012462 <HAL_SPI_Init+0x42>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4a86      	ldr	r2, [pc, #536]	; (8012660 <HAL_SPI_Init+0x240>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d00a      	beq.n	8012462 <HAL_SPI_Init+0x42>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a84      	ldr	r2, [pc, #528]	; (8012664 <HAL_SPI_Init+0x244>)
 8012452:	4293      	cmp	r3, r2
 8012454:	d005      	beq.n	8012462 <HAL_SPI_Init+0x42>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	2b0f      	cmp	r3, #15
 801245c:	d901      	bls.n	8012462 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801245e:	2301      	movs	r3, #1
 8012460:	e0f7      	b.n	8012652 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fd60 	bl	8012f28 <SPI_GetPacketSize>
 8012468:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4a7b      	ldr	r2, [pc, #492]	; (801265c <HAL_SPI_Init+0x23c>)
 8012470:	4293      	cmp	r3, r2
 8012472:	d00c      	beq.n	801248e <HAL_SPI_Init+0x6e>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	4a79      	ldr	r2, [pc, #484]	; (8012660 <HAL_SPI_Init+0x240>)
 801247a:	4293      	cmp	r3, r2
 801247c:	d007      	beq.n	801248e <HAL_SPI_Init+0x6e>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4a78      	ldr	r2, [pc, #480]	; (8012664 <HAL_SPI_Init+0x244>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d002      	beq.n	801248e <HAL_SPI_Init+0x6e>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2b08      	cmp	r3, #8
 801248c:	d811      	bhi.n	80124b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012492:	4a72      	ldr	r2, [pc, #456]	; (801265c <HAL_SPI_Init+0x23c>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d009      	beq.n	80124ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4a70      	ldr	r2, [pc, #448]	; (8012660 <HAL_SPI_Init+0x240>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d004      	beq.n	80124ac <HAL_SPI_Init+0x8c>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	4a6f      	ldr	r2, [pc, #444]	; (8012664 <HAL_SPI_Init+0x244>)
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d104      	bne.n	80124b6 <HAL_SPI_Init+0x96>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b10      	cmp	r3, #16
 80124b0:	d901      	bls.n	80124b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80124b2:	2301      	movs	r3, #1
 80124b4:	e0cd      	b.n	8012652 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7f2 f84a 	bl	8004564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2202      	movs	r2, #2
 80124d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f022 0201 	bic.w	r2, r2, #1
 80124e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	689b      	ldr	r3, [r3, #8]
 80124ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80124f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	699b      	ldr	r3, [r3, #24]
 80124f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80124fc:	d119      	bne.n	8012532 <HAL_SPI_Init+0x112>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012506:	d103      	bne.n	8012510 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801250c:	2b00      	cmp	r3, #0
 801250e:	d008      	beq.n	8012522 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012514:	2b00      	cmp	r3, #0
 8012516:	d10c      	bne.n	8012532 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801251c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012520:	d107      	bne.n	8012532 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012530:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00f      	beq.n	801255e <HAL_SPI_Init+0x13e>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	2b06      	cmp	r3, #6
 8012544:	d90b      	bls.n	801255e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	430a      	orrs	r2, r1
 801255a:	601a      	str	r2, [r3, #0]
 801255c:	e007      	b.n	801256e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801256c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	69da      	ldr	r2, [r3, #28]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012576:	431a      	orrs	r2, r3
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	431a      	orrs	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012580:	ea42 0103 	orr.w	r1, r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	68da      	ldr	r2, [r3, #12]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	430a      	orrs	r2, r1
 801258e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012598:	431a      	orrs	r2, r3
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801259e:	431a      	orrs	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	431a      	orrs	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	431a      	orrs	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	431a      	orrs	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	431a      	orrs	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	431a      	orrs	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80125c2:	431a      	orrs	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	431a      	orrs	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125ce:	ea42 0103 	orr.w	r1, r2, r3
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	430a      	orrs	r2, r1
 80125dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d113      	bne.n	801260e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	689b      	ldr	r3, [r3, #8]
 80125ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80125f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	689b      	ldr	r3, [r3, #8]
 8012600:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801260c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f022 0201 	bic.w	r2, r2, #1
 801261c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00a      	beq.n	8012640 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	430a      	orrs	r2, r1
 801263e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2201      	movs	r2, #1
 801264c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	40013000 	.word	0x40013000
 8012660:	40003800 	.word	0x40003800
 8012664:	40003c00 	.word	0x40003c00

08012668 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	4613      	mov	r3, r2
 8012674:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801267c:	b2db      	uxtb	r3, r3
 801267e:	2b01      	cmp	r3, #1
 8012680:	d005      	beq.n	801268e <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	2200      	movs	r2, #0
 8012686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 801268a:	2302      	movs	r3, #2
 801268c:	e127      	b.n	80128de <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d002      	beq.n	801269a <HAL_SPI_Receive_DMA+0x32>
 8012694:	88fb      	ldrh	r3, [r7, #6]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d105      	bne.n	80126a6 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2200      	movs	r2, #0
 801269e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80126a2:	2301      	movs	r3, #1
 80126a4:	e11b      	b.n	80128de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d101      	bne.n	80126b4 <HAL_SPI_Receive_DMA+0x4c>
 80126b0:	2302      	movs	r3, #2
 80126b2:	e114      	b.n	80128de <HAL_SPI_Receive_DMA+0x276>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2204      	movs	r2, #4
 80126c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2200      	movs	r2, #0
 80126c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	68ba      	ldr	r2, [r7, #8]
 80126d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	88fa      	ldrh	r2, [r7, #6]
 80126d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	88fa      	ldrh	r2, [r7, #6]
 80126de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2200      	movs	r2, #0
 80126ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8012706:	d108      	bne.n	801271a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	e009      	b.n	801272e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801272c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	2b0f      	cmp	r3, #15
 8012734:	d905      	bls.n	8012742 <HAL_SPI_Receive_DMA+0xda>
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801273a:	699b      	ldr	r3, [r3, #24]
 801273c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012740:	d10f      	bne.n	8012762 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012746:	2b07      	cmp	r3, #7
 8012748:	d911      	bls.n	801276e <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801274e:	699b      	ldr	r3, [r3, #24]
 8012750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012754:	d00b      	beq.n	801276e <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801275a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012760:	d005      	beq.n	801276e <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2200      	movs	r2, #0
 8012766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801276a:	2301      	movs	r3, #1
 801276c:	e0b7      	b.n	80128de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	689a      	ldr	r2, [r3, #8]
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801277c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	2b07      	cmp	r3, #7
 8012784:	d820      	bhi.n	80127c8 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801278a:	699b      	ldr	r3, [r3, #24]
 801278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012790:	d109      	bne.n	80127a6 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012798:	b29b      	uxth	r3, r3
 801279a:	3301      	adds	r3, #1
 801279c:	105b      	asrs	r3, r3, #1
 801279e:	b29a      	uxth	r2, r3
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127aa:	699b      	ldr	r3, [r3, #24]
 80127ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80127b0:	d11e      	bne.n	80127f0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	3303      	adds	r3, #3
 80127bc:	109b      	asrs	r3, r3, #2
 80127be:	b29a      	uxth	r2, r3
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80127c6:	e013      	b.n	80127f0 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	2b0f      	cmp	r3, #15
 80127ce:	d80f      	bhi.n	80127f0 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80127da:	d109      	bne.n	80127f0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	3301      	adds	r3, #1
 80127e6:	105b      	asrs	r3, r3, #1
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127f4:	4a3c      	ldr	r2, [pc, #240]	; (80128e8 <HAL_SPI_Receive_DMA+0x280>)
 80127f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127fc:	4a3b      	ldr	r2, [pc, #236]	; (80128ec <HAL_SPI_Receive_DMA+0x284>)
 80127fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012804:	4a3a      	ldr	r2, [pc, #232]	; (80128f0 <HAL_SPI_Receive_DMA+0x288>)
 8012806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801280c:	2200      	movs	r2, #0
 801280e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3330      	adds	r3, #48	; 0x30
 801281a:	4619      	mov	r1, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012820:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012828:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801282a:	f7f6 fa11 	bl	8008c50 <HAL_DMA_Start_IT>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d011      	beq.n	8012858 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801283a:	f043 0210 	orr.w	r2, r3, #16
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2201      	movs	r2, #1
 8012848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2200      	movs	r2, #0
 8012850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8012854:	2301      	movs	r3, #1
 8012856:	e042      	b.n	80128de <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801285c:	69db      	ldr	r3, [r3, #28]
 801285e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012862:	d108      	bne.n	8012876 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	6859      	ldr	r1, [r3, #4]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681a      	ldr	r2, [r3, #0]
 801286e:	4b21      	ldr	r3, [pc, #132]	; (80128f4 <HAL_SPI_Receive_DMA+0x28c>)
 8012870:	400b      	ands	r3, r1
 8012872:	6053      	str	r3, [r2, #4]
 8012874:	e009      	b.n	801288a <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	685a      	ldr	r2, [r3, #4]
 801287c:	4b1d      	ldr	r3, [pc, #116]	; (80128f4 <HAL_SPI_Receive_DMA+0x28c>)
 801287e:	4013      	ands	r3, r2
 8012880:	88f9      	ldrh	r1, [r7, #6]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	6812      	ldr	r2, [r2, #0]
 8012886:	430b      	orrs	r3, r1
 8012888:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	689a      	ldr	r2, [r3, #8]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012898:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	691a      	ldr	r2, [r3, #16]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80128a8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f042 0201 	orr.w	r2, r2, #1
 80128b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80128c2:	d107      	bne.n	80128d4 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128d2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	2200      	movs	r2, #0
 80128d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	08012d53 	.word	0x08012d53
 80128ec:	08012d0d 	.word	0x08012d0d
 80128f0:	08012d6f 	.word	0x08012d6f
 80128f4:	ffff0000 	.word	0xffff0000

080128f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b08a      	sub	sp, #40	; 0x28
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012910:	6a3a      	ldr	r2, [r7, #32]
 8012912:	69fb      	ldr	r3, [r7, #28]
 8012914:	4013      	ands	r3, r2
 8012916:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012920:	2300      	movs	r3, #0
 8012922:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801292a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	3330      	adds	r3, #48	; 0x30
 8012932:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801293a:	2b00      	cmp	r3, #0
 801293c:	d010      	beq.n	8012960 <HAL_SPI_IRQHandler+0x68>
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	f003 0308 	and.w	r3, r3, #8
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00b      	beq.n	8012960 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	699a      	ldr	r2, [r3, #24]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012956:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f000 f9cd 	bl	8012cf8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801295e:	e192      	b.n	8012c86 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012966:	2b00      	cmp	r3, #0
 8012968:	d113      	bne.n	8012992 <HAL_SPI_IRQHandler+0x9a>
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	f003 0320 	and.w	r3, r3, #32
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10e      	bne.n	8012992 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801297a:	2b00      	cmp	r3, #0
 801297c:	d009      	beq.n	8012992 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	4798      	blx	r3
    handled = 1UL;
 801298e:	2301      	movs	r3, #1
 8012990:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012998:	2b00      	cmp	r3, #0
 801299a:	d10f      	bne.n	80129bc <HAL_SPI_IRQHandler+0xc4>
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	f003 0301 	and.w	r3, r3, #1
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00a      	beq.n	80129bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d105      	bne.n	80129bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	4798      	blx	r3
    handled = 1UL;
 80129b8:	2301      	movs	r3, #1
 80129ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	f003 0320 	and.w	r3, r3, #32
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d10f      	bne.n	80129e6 <HAL_SPI_IRQHandler+0xee>
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	f003 0302 	and.w	r3, r3, #2
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00a      	beq.n	80129e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d105      	bne.n	80129e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	4798      	blx	r3
    handled = 1UL;
 80129e2:	2301      	movs	r3, #1
 80129e4:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f040 8147 	bne.w	8012c7c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80129ee:	69bb      	ldr	r3, [r7, #24]
 80129f0:	f003 0308 	and.w	r3, r3, #8
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f000 808b 	beq.w	8012b10 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	699a      	ldr	r2, [r3, #24]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f042 0208 	orr.w	r2, r2, #8
 8012a08:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	699a      	ldr	r2, [r3, #24]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f042 0210 	orr.w	r2, r2, #16
 8012a18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	699a      	ldr	r2, [r3, #24]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a28:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	691a      	ldr	r2, [r3, #16]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f022 0208 	bic.w	r2, r2, #8
 8012a38:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d13d      	bne.n	8012ac4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012a48:	e036      	b.n	8012ab8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	2b0f      	cmp	r3, #15
 8012a50:	d90b      	bls.n	8012a6a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012a5c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	665a      	str	r2, [r3, #100]	; 0x64
 8012a68:	e01d      	b.n	8012aa6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	2b07      	cmp	r3, #7
 8012a70:	d90b      	bls.n	8012a8a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	8812      	ldrh	r2, [r2, #0]
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a82:	1c9a      	adds	r2, r3, #2
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	665a      	str	r2, [r3, #100]	; 0x64
 8012a88:	e00d      	b.n	8012aa6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012a96:	7812      	ldrb	r2, [r2, #0]
 8012a98:	b2d2      	uxtb	r2, r2
 8012a9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012aa0:	1c5a      	adds	r2, r3, #1
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1c2      	bne.n	8012a4a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 f98f 	bl	8012de8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d003      	beq.n	8012ae4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 f901 	bl	8012ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012ae2:	e0d0      	b.n	8012c86 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012ae4:	7cfb      	ldrb	r3, [r7, #19]
 8012ae6:	2b05      	cmp	r3, #5
 8012ae8:	d103      	bne.n	8012af2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f000 f8e6 	bl	8012cbc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012af0:	e0c6      	b.n	8012c80 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012af2:	7cfb      	ldrb	r3, [r7, #19]
 8012af4:	2b04      	cmp	r3, #4
 8012af6:	d103      	bne.n	8012b00 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f000 f8d5 	bl	8012ca8 <HAL_SPI_RxCpltCallback>
    return;
 8012afe:	e0bf      	b.n	8012c80 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012b00:	7cfb      	ldrb	r3, [r7, #19]
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	f040 80bc 	bne.w	8012c80 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f000 f8c3 	bl	8012c94 <HAL_SPI_TxCpltCallback>
    return;
 8012b0e:	e0b7      	b.n	8012c80 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f000 80b5 	beq.w	8012c86 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d00f      	beq.n	8012b46 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b2c:	f043 0204 	orr.w	r2, r3, #4
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	699a      	ldr	r2, [r3, #24]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b44:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00f      	beq.n	8012b70 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b56:	f043 0201 	orr.w	r2, r3, #1
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	699a      	ldr	r2, [r3, #24]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b6e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00f      	beq.n	8012b9a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b80:	f043 0208 	orr.w	r2, r3, #8
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	699a      	ldr	r2, [r3, #24]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	f003 0320 	and.w	r3, r3, #32
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00f      	beq.n	8012bc4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012baa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	699a      	ldr	r2, [r3, #24]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f042 0220 	orr.w	r2, r2, #32
 8012bc2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d05a      	beq.n	8012c84 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f022 0201 	bic.w	r2, r2, #1
 8012bdc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	6919      	ldr	r1, [r3, #16]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	4b28      	ldr	r3, [pc, #160]	; (8012c8c <HAL_SPI_IRQHandler+0x394>)
 8012bea:	400b      	ands	r3, r1
 8012bec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012bf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012bf8:	d138      	bne.n	8012c6c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	689a      	ldr	r2, [r3, #8]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012c08:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d013      	beq.n	8012c3a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c16:	4a1e      	ldr	r2, [pc, #120]	; (8012c90 <HAL_SPI_IRQHandler+0x398>)
 8012c18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7f6 fd9e 	bl	8009760 <HAL_DMA_Abort_IT>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d007      	beq.n	8012c3a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d020      	beq.n	8012c84 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c46:	4a12      	ldr	r2, [pc, #72]	; (8012c90 <HAL_SPI_IRQHandler+0x398>)
 8012c48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f6 fd86 	bl	8009760 <HAL_DMA_Abort_IT>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d014      	beq.n	8012c84 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012c6a:	e00b      	b.n	8012c84 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f000 f835 	bl	8012ce4 <HAL_SPI_ErrorCallback>
    return;
 8012c7a:	e003      	b.n	8012c84 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012c7c:	bf00      	nop
 8012c7e:	e002      	b.n	8012c86 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c80:	bf00      	nop
 8012c82:	e000      	b.n	8012c86 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c84:	bf00      	nop
  }
}
 8012c86:	3728      	adds	r7, #40	; 0x28
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	fffffc94 	.word	0xfffffc94
 8012c90:	08012db5 	.word	0x08012db5

08012c94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012c9c:	bf00      	nop
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr

08012cbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012cc4:	bf00      	nop
 8012cc6:	370c      	adds	r7, #12
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cce:	4770      	bx	lr

08012cd0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012cd8:	bf00      	nop
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d18:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	2b07      	cmp	r3, #7
 8012d24:	d011      	beq.n	8012d4a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d2a:	69db      	ldr	r3, [r3, #28]
 8012d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d30:	d103      	bne.n	8012d3a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f7ff ffb8 	bl	8012ca8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012d38:	e007      	b.n	8012d4a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	691a      	ldr	r2, [r3, #16]
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f042 0208 	orr.w	r2, r2, #8
 8012d48:	611a      	str	r2, [r3, #16]
}
 8012d4a:	bf00      	nop
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b084      	sub	sp, #16
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d5e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f7ff ffb5 	bl	8012cd0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012d66:	bf00      	nop
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d7a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7f7 fe6d 	bl	800aa5c <HAL_DMA_GetError>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b02      	cmp	r3, #2
 8012d86:	d011      	beq.n	8012dac <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 f82d 	bl	8012de8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d94:	f043 0210 	orr.w	r2, r3, #16
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f7ff ff9c 	bl	8012ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012dac:	bf00      	nop
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7ff ff82 	bl	8012ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012de0:	bf00      	nop
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b085      	sub	sp, #20
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	699a      	ldr	r2, [r3, #24]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f042 0208 	orr.w	r2, r2, #8
 8012e06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	699a      	ldr	r2, [r3, #24]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f042 0210 	orr.w	r2, r2, #16
 8012e16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	f022 0201 	bic.w	r2, r2, #1
 8012e26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	6919      	ldr	r1, [r3, #16]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	4b3c      	ldr	r3, [pc, #240]	; (8012f24 <SPI_CloseTransfer+0x13c>)
 8012e34:	400b      	ands	r3, r1
 8012e36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	689a      	ldr	r2, [r3, #8]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012e46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	2b04      	cmp	r3, #4
 8012e52:	d014      	beq.n	8012e7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f003 0320 	and.w	r3, r3, #32
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00f      	beq.n	8012e7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	699a      	ldr	r2, [r3, #24]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f042 0220 	orr.w	r2, r2, #32
 8012e7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d014      	beq.n	8012eb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00f      	beq.n	8012eb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e9a:	f043 0204 	orr.w	r2, r3, #4
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	699a      	ldr	r2, [r3, #24]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012eb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00f      	beq.n	8012ede <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ec4:	f043 0201 	orr.w	r2, r3, #1
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	699a      	ldr	r2, [r3, #24]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012edc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00f      	beq.n	8012f08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012eee:	f043 0208 	orr.w	r2, r3, #8
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	699a      	ldr	r2, [r3, #24]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012f18:	bf00      	nop
 8012f1a:	3714      	adds	r7, #20
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr
 8012f24:	fffffc90 	.word	0xfffffc90

08012f28 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b085      	sub	sp, #20
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f34:	095b      	lsrs	r3, r3, #5
 8012f36:	3301      	adds	r3, #1
 8012f38:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	3307      	adds	r3, #7
 8012f46:	08db      	lsrs	r3, r3, #3
 8012f48:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3714      	adds	r7, #20
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr

08012f5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012f5e:	b580      	push	{r7, lr}
 8012f60:	b082      	sub	sp, #8
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e049      	b.n	8013004 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d106      	bne.n	8012f8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7f1 fff9 	bl	8004f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2202      	movs	r2, #2
 8012f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	3304      	adds	r3, #4
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	4610      	mov	r0, r2
 8012f9e:	f000 fe7d 	bl	8013c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2201      	movs	r2, #1
 8012fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2201      	movs	r2, #1
 8012fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2201      	movs	r2, #1
 8012fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2b01      	cmp	r3, #1
 801301e:	d001      	beq.n	8013024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013020:	2301      	movs	r3, #1
 8013022:	e054      	b.n	80130ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2202      	movs	r2, #2
 8013028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	68da      	ldr	r2, [r3, #12]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f042 0201 	orr.w	r2, r2, #1
 801303a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4a26      	ldr	r2, [pc, #152]	; (80130dc <HAL_TIM_Base_Start_IT+0xd0>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d022      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801304e:	d01d      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	4a22      	ldr	r2, [pc, #136]	; (80130e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d018      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	4a21      	ldr	r2, [pc, #132]	; (80130e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d013      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a1f      	ldr	r2, [pc, #124]	; (80130e8 <HAL_TIM_Base_Start_IT+0xdc>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d00e      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a1e      	ldr	r2, [pc, #120]	; (80130ec <HAL_TIM_Base_Start_IT+0xe0>)
 8013074:	4293      	cmp	r3, r2
 8013076:	d009      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4a1c      	ldr	r2, [pc, #112]	; (80130f0 <HAL_TIM_Base_Start_IT+0xe4>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d004      	beq.n	801308c <HAL_TIM_Base_Start_IT+0x80>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4a1b      	ldr	r2, [pc, #108]	; (80130f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8013088:	4293      	cmp	r3, r2
 801308a:	d115      	bne.n	80130b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	689a      	ldr	r2, [r3, #8]
 8013092:	4b19      	ldr	r3, [pc, #100]	; (80130f8 <HAL_TIM_Base_Start_IT+0xec>)
 8013094:	4013      	ands	r3, r2
 8013096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2b06      	cmp	r3, #6
 801309c:	d015      	beq.n	80130ca <HAL_TIM_Base_Start_IT+0xbe>
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130a4:	d011      	beq.n	80130ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f042 0201 	orr.w	r2, r2, #1
 80130b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130b6:	e008      	b.n	80130ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f042 0201 	orr.w	r2, r2, #1
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	e000      	b.n	80130cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	40010000 	.word	0x40010000
 80130e0:	40000400 	.word	0x40000400
 80130e4:	40000800 	.word	0x40000800
 80130e8:	40000c00 	.word	0x40000c00
 80130ec:	40010400 	.word	0x40010400
 80130f0:	40001800 	.word	0x40001800
 80130f4:	40014000 	.word	0x40014000
 80130f8:	00010007 	.word	0x00010007

080130fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013106:	2300      	movs	r3, #0
 8013108:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d109      	bne.n	8013124 <HAL_TIM_OC_Start_IT+0x28>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b01      	cmp	r3, #1
 801311a:	bf14      	ite	ne
 801311c:	2301      	movne	r3, #1
 801311e:	2300      	moveq	r3, #0
 8013120:	b2db      	uxtb	r3, r3
 8013122:	e03c      	b.n	801319e <HAL_TIM_OC_Start_IT+0xa2>
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	2b04      	cmp	r3, #4
 8013128:	d109      	bne.n	801313e <HAL_TIM_OC_Start_IT+0x42>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013130:	b2db      	uxtb	r3, r3
 8013132:	2b01      	cmp	r3, #1
 8013134:	bf14      	ite	ne
 8013136:	2301      	movne	r3, #1
 8013138:	2300      	moveq	r3, #0
 801313a:	b2db      	uxtb	r3, r3
 801313c:	e02f      	b.n	801319e <HAL_TIM_OC_Start_IT+0xa2>
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	2b08      	cmp	r3, #8
 8013142:	d109      	bne.n	8013158 <HAL_TIM_OC_Start_IT+0x5c>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801314a:	b2db      	uxtb	r3, r3
 801314c:	2b01      	cmp	r3, #1
 801314e:	bf14      	ite	ne
 8013150:	2301      	movne	r3, #1
 8013152:	2300      	moveq	r3, #0
 8013154:	b2db      	uxtb	r3, r3
 8013156:	e022      	b.n	801319e <HAL_TIM_OC_Start_IT+0xa2>
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	2b0c      	cmp	r3, #12
 801315c:	d109      	bne.n	8013172 <HAL_TIM_OC_Start_IT+0x76>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013164:	b2db      	uxtb	r3, r3
 8013166:	2b01      	cmp	r3, #1
 8013168:	bf14      	ite	ne
 801316a:	2301      	movne	r3, #1
 801316c:	2300      	moveq	r3, #0
 801316e:	b2db      	uxtb	r3, r3
 8013170:	e015      	b.n	801319e <HAL_TIM_OC_Start_IT+0xa2>
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	2b10      	cmp	r3, #16
 8013176:	d109      	bne.n	801318c <HAL_TIM_OC_Start_IT+0x90>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801317e:	b2db      	uxtb	r3, r3
 8013180:	2b01      	cmp	r3, #1
 8013182:	bf14      	ite	ne
 8013184:	2301      	movne	r3, #1
 8013186:	2300      	moveq	r3, #0
 8013188:	b2db      	uxtb	r3, r3
 801318a:	e008      	b.n	801319e <HAL_TIM_OC_Start_IT+0xa2>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013192:	b2db      	uxtb	r3, r3
 8013194:	2b01      	cmp	r3, #1
 8013196:	bf14      	ite	ne
 8013198:	2301      	movne	r3, #1
 801319a:	2300      	moveq	r3, #0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e0ec      	b.n	8013380 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d104      	bne.n	80131b6 <HAL_TIM_OC_Start_IT+0xba>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2202      	movs	r2, #2
 80131b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80131b4:	e023      	b.n	80131fe <HAL_TIM_OC_Start_IT+0x102>
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	2b04      	cmp	r3, #4
 80131ba:	d104      	bne.n	80131c6 <HAL_TIM_OC_Start_IT+0xca>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2202      	movs	r2, #2
 80131c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131c4:	e01b      	b.n	80131fe <HAL_TIM_OC_Start_IT+0x102>
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	2b08      	cmp	r3, #8
 80131ca:	d104      	bne.n	80131d6 <HAL_TIM_OC_Start_IT+0xda>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2202      	movs	r2, #2
 80131d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131d4:	e013      	b.n	80131fe <HAL_TIM_OC_Start_IT+0x102>
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	2b0c      	cmp	r3, #12
 80131da:	d104      	bne.n	80131e6 <HAL_TIM_OC_Start_IT+0xea>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2202      	movs	r2, #2
 80131e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80131e4:	e00b      	b.n	80131fe <HAL_TIM_OC_Start_IT+0x102>
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	2b10      	cmp	r3, #16
 80131ea:	d104      	bne.n	80131f6 <HAL_TIM_OC_Start_IT+0xfa>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2202      	movs	r2, #2
 80131f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80131f4:	e003      	b.n	80131fe <HAL_TIM_OC_Start_IT+0x102>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2202      	movs	r2, #2
 80131fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	2b0c      	cmp	r3, #12
 8013202:	d841      	bhi.n	8013288 <HAL_TIM_OC_Start_IT+0x18c>
 8013204:	a201      	add	r2, pc, #4	; (adr r2, 801320c <HAL_TIM_OC_Start_IT+0x110>)
 8013206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801320a:	bf00      	nop
 801320c:	08013241 	.word	0x08013241
 8013210:	08013289 	.word	0x08013289
 8013214:	08013289 	.word	0x08013289
 8013218:	08013289 	.word	0x08013289
 801321c:	08013253 	.word	0x08013253
 8013220:	08013289 	.word	0x08013289
 8013224:	08013289 	.word	0x08013289
 8013228:	08013289 	.word	0x08013289
 801322c:	08013265 	.word	0x08013265
 8013230:	08013289 	.word	0x08013289
 8013234:	08013289 	.word	0x08013289
 8013238:	08013289 	.word	0x08013289
 801323c:	08013277 	.word	0x08013277
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	68da      	ldr	r2, [r3, #12]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f042 0202 	orr.w	r2, r2, #2
 801324e:	60da      	str	r2, [r3, #12]
      break;
 8013250:	e01d      	b.n	801328e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	68da      	ldr	r2, [r3, #12]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	f042 0204 	orr.w	r2, r2, #4
 8013260:	60da      	str	r2, [r3, #12]
      break;
 8013262:	e014      	b.n	801328e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	68da      	ldr	r2, [r3, #12]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f042 0208 	orr.w	r2, r2, #8
 8013272:	60da      	str	r2, [r3, #12]
      break;
 8013274:	e00b      	b.n	801328e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	68da      	ldr	r2, [r3, #12]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f042 0210 	orr.w	r2, r2, #16
 8013284:	60da      	str	r2, [r3, #12]
      break;
 8013286:	e002      	b.n	801328e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013288:	2301      	movs	r3, #1
 801328a:	73fb      	strb	r3, [r7, #15]
      break;
 801328c:	bf00      	nop
  }

  if (status == HAL_OK)
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d174      	bne.n	801337e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2201      	movs	r2, #1
 801329a:	6839      	ldr	r1, [r7, #0]
 801329c:	4618      	mov	r0, r3
 801329e:	f001 f917 	bl	80144d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a38      	ldr	r2, [pc, #224]	; (8013388 <HAL_TIM_OC_Start_IT+0x28c>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d013      	beq.n	80132d4 <HAL_TIM_OC_Start_IT+0x1d8>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a36      	ldr	r2, [pc, #216]	; (801338c <HAL_TIM_OC_Start_IT+0x290>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d00e      	beq.n	80132d4 <HAL_TIM_OC_Start_IT+0x1d8>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4a35      	ldr	r2, [pc, #212]	; (8013390 <HAL_TIM_OC_Start_IT+0x294>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d009      	beq.n	80132d4 <HAL_TIM_OC_Start_IT+0x1d8>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a33      	ldr	r2, [pc, #204]	; (8013394 <HAL_TIM_OC_Start_IT+0x298>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d004      	beq.n	80132d4 <HAL_TIM_OC_Start_IT+0x1d8>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	4a32      	ldr	r2, [pc, #200]	; (8013398 <HAL_TIM_OC_Start_IT+0x29c>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d101      	bne.n	80132d8 <HAL_TIM_OC_Start_IT+0x1dc>
 80132d4:	2301      	movs	r3, #1
 80132d6:	e000      	b.n	80132da <HAL_TIM_OC_Start_IT+0x1de>
 80132d8:	2300      	movs	r3, #0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d007      	beq.n	80132ee <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80132ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	4a25      	ldr	r2, [pc, #148]	; (8013388 <HAL_TIM_OC_Start_IT+0x28c>)
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d022      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013300:	d01d      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	4a25      	ldr	r2, [pc, #148]	; (801339c <HAL_TIM_OC_Start_IT+0x2a0>)
 8013308:	4293      	cmp	r3, r2
 801330a:	d018      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4a23      	ldr	r2, [pc, #140]	; (80133a0 <HAL_TIM_OC_Start_IT+0x2a4>)
 8013312:	4293      	cmp	r3, r2
 8013314:	d013      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4a22      	ldr	r2, [pc, #136]	; (80133a4 <HAL_TIM_OC_Start_IT+0x2a8>)
 801331c:	4293      	cmp	r3, r2
 801331e:	d00e      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a19      	ldr	r2, [pc, #100]	; (801338c <HAL_TIM_OC_Start_IT+0x290>)
 8013326:	4293      	cmp	r3, r2
 8013328:	d009      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	4a1e      	ldr	r2, [pc, #120]	; (80133a8 <HAL_TIM_OC_Start_IT+0x2ac>)
 8013330:	4293      	cmp	r3, r2
 8013332:	d004      	beq.n	801333e <HAL_TIM_OC_Start_IT+0x242>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4a15      	ldr	r2, [pc, #84]	; (8013390 <HAL_TIM_OC_Start_IT+0x294>)
 801333a:	4293      	cmp	r3, r2
 801333c:	d115      	bne.n	801336a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	689a      	ldr	r2, [r3, #8]
 8013344:	4b19      	ldr	r3, [pc, #100]	; (80133ac <HAL_TIM_OC_Start_IT+0x2b0>)
 8013346:	4013      	ands	r3, r2
 8013348:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	2b06      	cmp	r3, #6
 801334e:	d015      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x280>
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013356:	d011      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f042 0201 	orr.w	r2, r2, #1
 8013366:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013368:	e008      	b.n	801337c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f042 0201 	orr.w	r2, r2, #1
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	e000      	b.n	801337e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801337c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	40010000 	.word	0x40010000
 801338c:	40010400 	.word	0x40010400
 8013390:	40014000 	.word	0x40014000
 8013394:	40014400 	.word	0x40014400
 8013398:	40014800 	.word	0x40014800
 801339c:	40000400 	.word	0x40000400
 80133a0:	40000800 	.word	0x40000800
 80133a4:	40000c00 	.word	0x40000c00
 80133a8:	40001800 	.word	0x40001800
 80133ac:	00010007 	.word	0x00010007

080133b0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80133ba:	2300      	movs	r3, #0
 80133bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	2b0c      	cmp	r3, #12
 80133c2:	d841      	bhi.n	8013448 <HAL_TIM_OC_Stop_IT+0x98>
 80133c4:	a201      	add	r2, pc, #4	; (adr r2, 80133cc <HAL_TIM_OC_Stop_IT+0x1c>)
 80133c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ca:	bf00      	nop
 80133cc:	08013401 	.word	0x08013401
 80133d0:	08013449 	.word	0x08013449
 80133d4:	08013449 	.word	0x08013449
 80133d8:	08013449 	.word	0x08013449
 80133dc:	08013413 	.word	0x08013413
 80133e0:	08013449 	.word	0x08013449
 80133e4:	08013449 	.word	0x08013449
 80133e8:	08013449 	.word	0x08013449
 80133ec:	08013425 	.word	0x08013425
 80133f0:	08013449 	.word	0x08013449
 80133f4:	08013449 	.word	0x08013449
 80133f8:	08013449 	.word	0x08013449
 80133fc:	08013437 	.word	0x08013437
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	68da      	ldr	r2, [r3, #12]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f022 0202 	bic.w	r2, r2, #2
 801340e:	60da      	str	r2, [r3, #12]
      break;
 8013410:	e01d      	b.n	801344e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	68da      	ldr	r2, [r3, #12]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f022 0204 	bic.w	r2, r2, #4
 8013420:	60da      	str	r2, [r3, #12]
      break;
 8013422:	e014      	b.n	801344e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68da      	ldr	r2, [r3, #12]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f022 0208 	bic.w	r2, r2, #8
 8013432:	60da      	str	r2, [r3, #12]
      break;
 8013434:	e00b      	b.n	801344e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	68da      	ldr	r2, [r3, #12]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f022 0210 	bic.w	r2, r2, #16
 8013444:	60da      	str	r2, [r3, #12]
      break;
 8013446:	e002      	b.n	801344e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013448:	2301      	movs	r3, #1
 801344a:	73fb      	strb	r3, [r7, #15]
      break;
 801344c:	bf00      	nop
  }

  if (status == HAL_OK)
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	2b00      	cmp	r3, #0
 8013452:	f040 8081 	bne.w	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2200      	movs	r2, #0
 801345c:	6839      	ldr	r1, [r7, #0]
 801345e:	4618      	mov	r0, r3
 8013460:	f001 f836 	bl	80144d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a3e      	ldr	r2, [pc, #248]	; (8013564 <HAL_TIM_OC_Stop_IT+0x1b4>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d013      	beq.n	8013496 <HAL_TIM_OC_Stop_IT+0xe6>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a3d      	ldr	r2, [pc, #244]	; (8013568 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d00e      	beq.n	8013496 <HAL_TIM_OC_Stop_IT+0xe6>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a3b      	ldr	r2, [pc, #236]	; (801356c <HAL_TIM_OC_Stop_IT+0x1bc>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d009      	beq.n	8013496 <HAL_TIM_OC_Stop_IT+0xe6>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a3a      	ldr	r2, [pc, #232]	; (8013570 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d004      	beq.n	8013496 <HAL_TIM_OC_Stop_IT+0xe6>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a38      	ldr	r2, [pc, #224]	; (8013574 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d101      	bne.n	801349a <HAL_TIM_OC_Stop_IT+0xea>
 8013496:	2301      	movs	r3, #1
 8013498:	e000      	b.n	801349c <HAL_TIM_OC_Stop_IT+0xec>
 801349a:	2300      	movs	r3, #0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d017      	beq.n	80134d0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	6a1a      	ldr	r2, [r3, #32]
 80134a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80134aa:	4013      	ands	r3, r2
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d10f      	bne.n	80134d0 <HAL_TIM_OC_Stop_IT+0x120>
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6a1a      	ldr	r2, [r3, #32]
 80134b6:	f240 4344 	movw	r3, #1092	; 0x444
 80134ba:	4013      	ands	r3, r2
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d107      	bne.n	80134d0 <HAL_TIM_OC_Stop_IT+0x120>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80134ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	6a1a      	ldr	r2, [r3, #32]
 80134d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80134da:	4013      	ands	r3, r2
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d10f      	bne.n	8013500 <HAL_TIM_OC_Stop_IT+0x150>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	6a1a      	ldr	r2, [r3, #32]
 80134e6:	f240 4344 	movw	r3, #1092	; 0x444
 80134ea:	4013      	ands	r3, r2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d107      	bne.n	8013500 <HAL_TIM_OC_Stop_IT+0x150>
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f022 0201 	bic.w	r2, r2, #1
 80134fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d104      	bne.n	8013510 <HAL_TIM_OC_Stop_IT+0x160>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2201      	movs	r2, #1
 801350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801350e:	e023      	b.n	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	2b04      	cmp	r3, #4
 8013514:	d104      	bne.n	8013520 <HAL_TIM_OC_Stop_IT+0x170>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2201      	movs	r2, #1
 801351a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801351e:	e01b      	b.n	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	2b08      	cmp	r3, #8
 8013524:	d104      	bne.n	8013530 <HAL_TIM_OC_Stop_IT+0x180>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2201      	movs	r2, #1
 801352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801352e:	e013      	b.n	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	2b0c      	cmp	r3, #12
 8013534:	d104      	bne.n	8013540 <HAL_TIM_OC_Stop_IT+0x190>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2201      	movs	r2, #1
 801353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801353e:	e00b      	b.n	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	2b10      	cmp	r3, #16
 8013544:	d104      	bne.n	8013550 <HAL_TIM_OC_Stop_IT+0x1a0>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2201      	movs	r2, #1
 801354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801354e:	e003      	b.n	8013558 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2201      	movs	r2, #1
 8013554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013558:	7bfb      	ldrb	r3, [r7, #15]
}
 801355a:	4618      	mov	r0, r3
 801355c:	3710      	adds	r7, #16
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	40010000 	.word	0x40010000
 8013568:	40010400 	.word	0x40010400
 801356c:	40014000 	.word	0x40014000
 8013570:	40014400 	.word	0x40014400
 8013574:	40014800 	.word	0x40014800

08013578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d101      	bne.n	801358a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	e049      	b.n	801361e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013590:	b2db      	uxtb	r3, r3
 8013592:	2b00      	cmp	r3, #0
 8013594:	d106      	bne.n	80135a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f000 f841 	bl	8013626 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2202      	movs	r2, #2
 80135a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	3304      	adds	r3, #4
 80135b4:	4619      	mov	r1, r3
 80135b6:	4610      	mov	r0, r2
 80135b8:	f000 fb70 	bl	8013c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2201      	movs	r2, #1
 80135c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2201      	movs	r2, #1
 80135c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2201      	movs	r2, #1
 80135d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2201      	movs	r2, #1
 80135d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2201      	movs	r2, #1
 80135e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2201      	movs	r2, #1
 80135e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2201      	movs	r2, #1
 80135f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2201      	movs	r2, #1
 80135f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2201      	movs	r2, #1
 8013600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2201      	movs	r2, #1
 8013608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2201      	movs	r2, #1
 8013610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2201      	movs	r2, #1
 8013618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801361c:	2300      	movs	r3, #0
}
 801361e:	4618      	mov	r0, r3
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013626:	b480      	push	{r7}
 8013628:	b083      	sub	sp, #12
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801362e:	bf00      	nop
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr

0801363a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b084      	sub	sp, #16
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	f003 0302 	and.w	r3, r3, #2
 8013658:	2b00      	cmp	r3, #0
 801365a:	d020      	beq.n	801369e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f003 0302 	and.w	r3, r3, #2
 8013662:	2b00      	cmp	r3, #0
 8013664:	d01b      	beq.n	801369e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f06f 0202 	mvn.w	r2, #2
 801366e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2201      	movs	r2, #1
 8013674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	f003 0303 	and.w	r3, r3, #3
 8013680:	2b00      	cmp	r3, #0
 8013682:	d003      	beq.n	801368c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 faeb 	bl	8013c60 <HAL_TIM_IC_CaptureCallback>
 801368a:	e005      	b.n	8013698 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f7ef fb91 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 faee 	bl	8013c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	f003 0304 	and.w	r3, r3, #4
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d020      	beq.n	80136ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f003 0304 	and.w	r3, r3, #4
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d01b      	beq.n	80136ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f06f 0204 	mvn.w	r2, #4
 80136ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2202      	movs	r2, #2
 80136c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d003      	beq.n	80136d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f000 fac5 	bl	8013c60 <HAL_TIM_IC_CaptureCallback>
 80136d6:	e005      	b.n	80136e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ef fb6b 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 fac8 	bl	8013c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2200      	movs	r2, #0
 80136e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	f003 0308 	and.w	r3, r3, #8
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d020      	beq.n	8013736 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f003 0308 	and.w	r3, r3, #8
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d01b      	beq.n	8013736 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f06f 0208 	mvn.w	r2, #8
 8013706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2204      	movs	r2, #4
 801370c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	69db      	ldr	r3, [r3, #28]
 8013714:	f003 0303 	and.w	r3, r3, #3
 8013718:	2b00      	cmp	r3, #0
 801371a:	d003      	beq.n	8013724 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 fa9f 	bl	8013c60 <HAL_TIM_IC_CaptureCallback>
 8013722:	e005      	b.n	8013730 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7ef fb45 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 faa2 	bl	8013c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	f003 0310 	and.w	r3, r3, #16
 801373c:	2b00      	cmp	r3, #0
 801373e:	d020      	beq.n	8013782 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f003 0310 	and.w	r3, r3, #16
 8013746:	2b00      	cmp	r3, #0
 8013748:	d01b      	beq.n	8013782 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f06f 0210 	mvn.w	r2, #16
 8013752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2208      	movs	r2, #8
 8013758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	69db      	ldr	r3, [r3, #28]
 8013760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013764:	2b00      	cmp	r3, #0
 8013766:	d003      	beq.n	8013770 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 fa79 	bl	8013c60 <HAL_TIM_IC_CaptureCallback>
 801376e:	e005      	b.n	801377c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7ef fb1f 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f000 fa7c 	bl	8013c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	f003 0301 	and.w	r3, r3, #1
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00c      	beq.n	80137a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f003 0301 	and.w	r3, r3, #1
 8013792:	2b00      	cmp	r3, #0
 8013794:	d007      	beq.n	80137a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f06f 0201 	mvn.w	r2, #1
 801379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7f0 f9df 	bl	8003b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d104      	bne.n	80137ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d00c      	beq.n	80137d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d007      	beq.n	80137d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80137cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f000 ffba 	bl	8014748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00c      	beq.n	80137f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d007      	beq.n	80137f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80137f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f000 ffb2 	bl	801475c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00c      	beq.n	801381c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013808:	2b00      	cmp	r3, #0
 801380a:	d007      	beq.n	801381c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f000 fa36 	bl	8013c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	f003 0320 	and.w	r3, r3, #32
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00c      	beq.n	8013840 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f003 0320 	and.w	r3, r3, #32
 801382c:	2b00      	cmp	r3, #0
 801382e:	d007      	beq.n	8013840 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f06f 0220 	mvn.w	r2, #32
 8013838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 ff7a 	bl	8014734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013840:	bf00      	nop
 8013842:	3710      	adds	r7, #16
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b086      	sub	sp, #24
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013854:	2300      	movs	r3, #0
 8013856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801385e:	2b01      	cmp	r3, #1
 8013860:	d101      	bne.n	8013866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013862:	2302      	movs	r3, #2
 8013864:	e0ff      	b.n	8013a66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2201      	movs	r2, #1
 801386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2b14      	cmp	r3, #20
 8013872:	f200 80f0 	bhi.w	8013a56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013876:	a201      	add	r2, pc, #4	; (adr r2, 801387c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801387c:	080138d1 	.word	0x080138d1
 8013880:	08013a57 	.word	0x08013a57
 8013884:	08013a57 	.word	0x08013a57
 8013888:	08013a57 	.word	0x08013a57
 801388c:	08013911 	.word	0x08013911
 8013890:	08013a57 	.word	0x08013a57
 8013894:	08013a57 	.word	0x08013a57
 8013898:	08013a57 	.word	0x08013a57
 801389c:	08013953 	.word	0x08013953
 80138a0:	08013a57 	.word	0x08013a57
 80138a4:	08013a57 	.word	0x08013a57
 80138a8:	08013a57 	.word	0x08013a57
 80138ac:	08013993 	.word	0x08013993
 80138b0:	08013a57 	.word	0x08013a57
 80138b4:	08013a57 	.word	0x08013a57
 80138b8:	08013a57 	.word	0x08013a57
 80138bc:	080139d5 	.word	0x080139d5
 80138c0:	08013a57 	.word	0x08013a57
 80138c4:	08013a57 	.word	0x08013a57
 80138c8:	08013a57 	.word	0x08013a57
 80138cc:	08013a15 	.word	0x08013a15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	68b9      	ldr	r1, [r7, #8]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 fa86 	bl	8013de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	699a      	ldr	r2, [r3, #24]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f042 0208 	orr.w	r2, r2, #8
 80138ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	699a      	ldr	r2, [r3, #24]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	f022 0204 	bic.w	r2, r2, #4
 80138fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6999      	ldr	r1, [r3, #24]
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	691a      	ldr	r2, [r3, #16]
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	430a      	orrs	r2, r1
 801390c:	619a      	str	r2, [r3, #24]
      break;
 801390e:	e0a5      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	68b9      	ldr	r1, [r7, #8]
 8013916:	4618      	mov	r0, r3
 8013918:	f000 faf6 	bl	8013f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	699a      	ldr	r2, [r3, #24]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801392a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	699a      	ldr	r2, [r3, #24]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801393a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	6999      	ldr	r1, [r3, #24]
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	691b      	ldr	r3, [r3, #16]
 8013946:	021a      	lsls	r2, r3, #8
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	430a      	orrs	r2, r1
 801394e:	619a      	str	r2, [r3, #24]
      break;
 8013950:	e084      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68b9      	ldr	r1, [r7, #8]
 8013958:	4618      	mov	r0, r3
 801395a:	f000 fb5f 	bl	801401c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	69da      	ldr	r2, [r3, #28]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f042 0208 	orr.w	r2, r2, #8
 801396c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	69da      	ldr	r2, [r3, #28]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	f022 0204 	bic.w	r2, r2, #4
 801397c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	69d9      	ldr	r1, [r3, #28]
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	691a      	ldr	r2, [r3, #16]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	430a      	orrs	r2, r1
 801398e:	61da      	str	r2, [r3, #28]
      break;
 8013990:	e064      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68b9      	ldr	r1, [r7, #8]
 8013998:	4618      	mov	r0, r3
 801399a:	f000 fbc7 	bl	801412c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	69da      	ldr	r2, [r3, #28]
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80139ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	69da      	ldr	r2, [r3, #28]
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	69d9      	ldr	r1, [r3, #28]
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	021a      	lsls	r2, r3, #8
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	430a      	orrs	r2, r1
 80139d0:	61da      	str	r2, [r3, #28]
      break;
 80139d2:	e043      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	68b9      	ldr	r1, [r7, #8]
 80139da:	4618      	mov	r0, r3
 80139dc:	f000 fc10 	bl	8014200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f042 0208 	orr.w	r2, r2, #8
 80139ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f022 0204 	bic.w	r2, r2, #4
 80139fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	691a      	ldr	r2, [r3, #16]
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	430a      	orrs	r2, r1
 8013a10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013a12:	e023      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	68b9      	ldr	r1, [r7, #8]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f000 fc54 	bl	80142c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	691b      	ldr	r3, [r3, #16]
 8013a4a:	021a      	lsls	r2, r3, #8
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	430a      	orrs	r2, r1
 8013a52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013a54:	e002      	b.n	8013a5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013a56:	2301      	movs	r3, #1
 8013a58:	75fb      	strb	r3, [r7, #23]
      break;
 8013a5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3718      	adds	r7, #24
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop

08013a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d101      	bne.n	8013a8c <HAL_TIM_ConfigClockSource+0x1c>
 8013a88:	2302      	movs	r3, #2
 8013a8a:	e0dc      	b.n	8013c46 <HAL_TIM_ConfigClockSource+0x1d6>
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2201      	movs	r2, #1
 8013a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2202      	movs	r2, #2
 8013a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	689b      	ldr	r3, [r3, #8]
 8013aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013aa4:	68ba      	ldr	r2, [r7, #8]
 8013aa6:	4b6a      	ldr	r3, [pc, #424]	; (8013c50 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013aa8:	4013      	ands	r3, r2
 8013aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	68ba      	ldr	r2, [r7, #8]
 8013aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a64      	ldr	r2, [pc, #400]	; (8013c54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	f000 80a9 	beq.w	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013ac8:	4a62      	ldr	r2, [pc, #392]	; (8013c54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013aca:	4293      	cmp	r3, r2
 8013acc:	f200 80ae 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013ad0:	4a61      	ldr	r2, [pc, #388]	; (8013c58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	f000 80a1 	beq.w	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013ad8:	4a5f      	ldr	r2, [pc, #380]	; (8013c58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013ada:	4293      	cmp	r3, r2
 8013adc:	f200 80a6 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013ae0:	4a5e      	ldr	r2, [pc, #376]	; (8013c5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	f000 8099 	beq.w	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013ae8:	4a5c      	ldr	r2, [pc, #368]	; (8013c5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8013aea:	4293      	cmp	r3, r2
 8013aec:	f200 809e 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013af0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013af4:	f000 8091 	beq.w	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013af8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013afc:	f200 8096 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b04:	f000 8089 	beq.w	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b0c:	f200 808e 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b14:	d03e      	beq.n	8013b94 <HAL_TIM_ConfigClockSource+0x124>
 8013b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b1a:	f200 8087 	bhi.w	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b22:	f000 8086 	beq.w	8013c32 <HAL_TIM_ConfigClockSource+0x1c2>
 8013b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b2a:	d87f      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b2c:	2b70      	cmp	r3, #112	; 0x70
 8013b2e:	d01a      	beq.n	8013b66 <HAL_TIM_ConfigClockSource+0xf6>
 8013b30:	2b70      	cmp	r3, #112	; 0x70
 8013b32:	d87b      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b34:	2b60      	cmp	r3, #96	; 0x60
 8013b36:	d050      	beq.n	8013bda <HAL_TIM_ConfigClockSource+0x16a>
 8013b38:	2b60      	cmp	r3, #96	; 0x60
 8013b3a:	d877      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b3c:	2b50      	cmp	r3, #80	; 0x50
 8013b3e:	d03c      	beq.n	8013bba <HAL_TIM_ConfigClockSource+0x14a>
 8013b40:	2b50      	cmp	r3, #80	; 0x50
 8013b42:	d873      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b44:	2b40      	cmp	r3, #64	; 0x40
 8013b46:	d058      	beq.n	8013bfa <HAL_TIM_ConfigClockSource+0x18a>
 8013b48:	2b40      	cmp	r3, #64	; 0x40
 8013b4a:	d86f      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b4c:	2b30      	cmp	r3, #48	; 0x30
 8013b4e:	d064      	beq.n	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013b50:	2b30      	cmp	r3, #48	; 0x30
 8013b52:	d86b      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b54:	2b20      	cmp	r3, #32
 8013b56:	d060      	beq.n	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013b58:	2b20      	cmp	r3, #32
 8013b5a:	d867      	bhi.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d05c      	beq.n	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013b60:	2b10      	cmp	r3, #16
 8013b62:	d05a      	beq.n	8013c1a <HAL_TIM_ConfigClockSource+0x1aa>
 8013b64:	e062      	b.n	8013c2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6818      	ldr	r0, [r3, #0]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	6899      	ldr	r1, [r3, #8]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	685a      	ldr	r2, [r3, #4]
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	f000 fc8b 	bl	8014490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	609a      	str	r2, [r3, #8]
      break;
 8013b92:	e04f      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6818      	ldr	r0, [r3, #0]
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	6899      	ldr	r1, [r3, #8]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	685a      	ldr	r2, [r3, #4]
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	f000 fc74 	bl	8014490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	689a      	ldr	r2, [r3, #8]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013bb6:	609a      	str	r2, [r3, #8]
      break;
 8013bb8:	e03c      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6818      	ldr	r0, [r3, #0]
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	6859      	ldr	r1, [r3, #4]
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f000 fbe4 	bl	8014394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2150      	movs	r1, #80	; 0x50
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f000 fc3e 	bl	8014454 <TIM_ITRx_SetConfig>
      break;
 8013bd8:	e02c      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6818      	ldr	r0, [r3, #0]
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	6859      	ldr	r1, [r3, #4]
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	461a      	mov	r2, r3
 8013be8:	f000 fc03 	bl	80143f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2160      	movs	r1, #96	; 0x60
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f000 fc2e 	bl	8014454 <TIM_ITRx_SetConfig>
      break;
 8013bf8:	e01c      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6818      	ldr	r0, [r3, #0]
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	6859      	ldr	r1, [r3, #4]
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	461a      	mov	r2, r3
 8013c08:	f000 fbc4 	bl	8014394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2140      	movs	r1, #64	; 0x40
 8013c12:	4618      	mov	r0, r3
 8013c14:	f000 fc1e 	bl	8014454 <TIM_ITRx_SetConfig>
      break;
 8013c18:	e00c      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	4619      	mov	r1, r3
 8013c24:	4610      	mov	r0, r2
 8013c26:	f000 fc15 	bl	8014454 <TIM_ITRx_SetConfig>
      break;
 8013c2a:	e003      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8013c30:	e000      	b.n	8013c34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2201      	movs	r2, #1
 8013c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	ffceff88 	.word	0xffceff88
 8013c54:	00100040 	.word	0x00100040
 8013c58:	00100030 	.word	0x00100030
 8013c5c:	00100020 	.word	0x00100020

08013c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013c68:	bf00      	nop
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013c7c:	bf00      	nop
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013c90:	bf00      	nop
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4a46      	ldr	r2, [pc, #280]	; (8013dc8 <TIM_Base_SetConfig+0x12c>)
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	d013      	beq.n	8013cdc <TIM_Base_SetConfig+0x40>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cba:	d00f      	beq.n	8013cdc <TIM_Base_SetConfig+0x40>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	4a43      	ldr	r2, [pc, #268]	; (8013dcc <TIM_Base_SetConfig+0x130>)
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	d00b      	beq.n	8013cdc <TIM_Base_SetConfig+0x40>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	4a42      	ldr	r2, [pc, #264]	; (8013dd0 <TIM_Base_SetConfig+0x134>)
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d007      	beq.n	8013cdc <TIM_Base_SetConfig+0x40>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	4a41      	ldr	r2, [pc, #260]	; (8013dd4 <TIM_Base_SetConfig+0x138>)
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d003      	beq.n	8013cdc <TIM_Base_SetConfig+0x40>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	4a40      	ldr	r2, [pc, #256]	; (8013dd8 <TIM_Base_SetConfig+0x13c>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d108      	bne.n	8013cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	4313      	orrs	r3, r2
 8013cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	4a35      	ldr	r2, [pc, #212]	; (8013dc8 <TIM_Base_SetConfig+0x12c>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d01f      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cfc:	d01b      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4a32      	ldr	r2, [pc, #200]	; (8013dcc <TIM_Base_SetConfig+0x130>)
 8013d02:	4293      	cmp	r3, r2
 8013d04:	d017      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4a31      	ldr	r2, [pc, #196]	; (8013dd0 <TIM_Base_SetConfig+0x134>)
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d013      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4a30      	ldr	r2, [pc, #192]	; (8013dd4 <TIM_Base_SetConfig+0x138>)
 8013d12:	4293      	cmp	r3, r2
 8013d14:	d00f      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4a2f      	ldr	r2, [pc, #188]	; (8013dd8 <TIM_Base_SetConfig+0x13c>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d00b      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a2e      	ldr	r2, [pc, #184]	; (8013ddc <TIM_Base_SetConfig+0x140>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d007      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4a2d      	ldr	r2, [pc, #180]	; (8013de0 <TIM_Base_SetConfig+0x144>)
 8013d2a:	4293      	cmp	r3, r2
 8013d2c:	d003      	beq.n	8013d36 <TIM_Base_SetConfig+0x9a>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a2c      	ldr	r2, [pc, #176]	; (8013de4 <TIM_Base_SetConfig+0x148>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d108      	bne.n	8013d48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	68db      	ldr	r3, [r3, #12]
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	4313      	orrs	r3, r2
 8013d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	695b      	ldr	r3, [r3, #20]
 8013d52:	4313      	orrs	r3, r2
 8013d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	689a      	ldr	r2, [r3, #8]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4a16      	ldr	r2, [pc, #88]	; (8013dc8 <TIM_Base_SetConfig+0x12c>)
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d00f      	beq.n	8013d94 <TIM_Base_SetConfig+0xf8>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4a18      	ldr	r2, [pc, #96]	; (8013dd8 <TIM_Base_SetConfig+0x13c>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d00b      	beq.n	8013d94 <TIM_Base_SetConfig+0xf8>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4a17      	ldr	r2, [pc, #92]	; (8013ddc <TIM_Base_SetConfig+0x140>)
 8013d80:	4293      	cmp	r3, r2
 8013d82:	d007      	beq.n	8013d94 <TIM_Base_SetConfig+0xf8>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	4a16      	ldr	r2, [pc, #88]	; (8013de0 <TIM_Base_SetConfig+0x144>)
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d003      	beq.n	8013d94 <TIM_Base_SetConfig+0xf8>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4a15      	ldr	r2, [pc, #84]	; (8013de4 <TIM_Base_SetConfig+0x148>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	d103      	bne.n	8013d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	691a      	ldr	r2, [r3, #16]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	691b      	ldr	r3, [r3, #16]
 8013da6:	f003 0301 	and.w	r3, r3, #1
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d105      	bne.n	8013dba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	f023 0201 	bic.w	r2, r3, #1
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	611a      	str	r2, [r3, #16]
  }
}
 8013dba:	bf00      	nop
 8013dbc:	3714      	adds	r7, #20
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	40010000 	.word	0x40010000
 8013dcc:	40000400 	.word	0x40000400
 8013dd0:	40000800 	.word	0x40000800
 8013dd4:	40000c00 	.word	0x40000c00
 8013dd8:	40010400 	.word	0x40010400
 8013ddc:	40014000 	.word	0x40014000
 8013de0:	40014400 	.word	0x40014400
 8013de4:	40014800 	.word	0x40014800

08013de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013de8:	b480      	push	{r7}
 8013dea:	b087      	sub	sp, #28
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6a1b      	ldr	r3, [r3, #32]
 8013df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6a1b      	ldr	r3, [r3, #32]
 8013dfc:	f023 0201 	bic.w	r2, r3, #1
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013e10:	68fa      	ldr	r2, [r7, #12]
 8013e12:	4b37      	ldr	r3, [pc, #220]	; (8013ef0 <TIM_OC1_SetConfig+0x108>)
 8013e14:	4013      	ands	r3, r2
 8013e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f023 0303 	bic.w	r3, r3, #3
 8013e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	4313      	orrs	r3, r2
 8013e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	f023 0302 	bic.w	r3, r3, #2
 8013e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	697a      	ldr	r2, [r7, #20]
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	4a2d      	ldr	r2, [pc, #180]	; (8013ef4 <TIM_OC1_SetConfig+0x10c>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d00f      	beq.n	8013e64 <TIM_OC1_SetConfig+0x7c>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4a2c      	ldr	r2, [pc, #176]	; (8013ef8 <TIM_OC1_SetConfig+0x110>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d00b      	beq.n	8013e64 <TIM_OC1_SetConfig+0x7c>
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	4a2b      	ldr	r2, [pc, #172]	; (8013efc <TIM_OC1_SetConfig+0x114>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d007      	beq.n	8013e64 <TIM_OC1_SetConfig+0x7c>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	4a2a      	ldr	r2, [pc, #168]	; (8013f00 <TIM_OC1_SetConfig+0x118>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d003      	beq.n	8013e64 <TIM_OC1_SetConfig+0x7c>
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	4a29      	ldr	r2, [pc, #164]	; (8013f04 <TIM_OC1_SetConfig+0x11c>)
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d10c      	bne.n	8013e7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	f023 0308 	bic.w	r3, r3, #8
 8013e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	697a      	ldr	r2, [r7, #20]
 8013e72:	4313      	orrs	r3, r2
 8013e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	f023 0304 	bic.w	r3, r3, #4
 8013e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	4a1c      	ldr	r2, [pc, #112]	; (8013ef4 <TIM_OC1_SetConfig+0x10c>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d00f      	beq.n	8013ea6 <TIM_OC1_SetConfig+0xbe>
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4a1b      	ldr	r2, [pc, #108]	; (8013ef8 <TIM_OC1_SetConfig+0x110>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d00b      	beq.n	8013ea6 <TIM_OC1_SetConfig+0xbe>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4a1a      	ldr	r2, [pc, #104]	; (8013efc <TIM_OC1_SetConfig+0x114>)
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d007      	beq.n	8013ea6 <TIM_OC1_SetConfig+0xbe>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4a19      	ldr	r2, [pc, #100]	; (8013f00 <TIM_OC1_SetConfig+0x118>)
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d003      	beq.n	8013ea6 <TIM_OC1_SetConfig+0xbe>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4a18      	ldr	r2, [pc, #96]	; (8013f04 <TIM_OC1_SetConfig+0x11c>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d111      	bne.n	8013eca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	695b      	ldr	r3, [r3, #20]
 8013eba:	693a      	ldr	r2, [r7, #16]
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	699b      	ldr	r3, [r3, #24]
 8013ec4:	693a      	ldr	r2, [r7, #16]
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	693a      	ldr	r2, [r7, #16]
 8013ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	685a      	ldr	r2, [r3, #4]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	697a      	ldr	r2, [r7, #20]
 8013ee2:	621a      	str	r2, [r3, #32]
}
 8013ee4:	bf00      	nop
 8013ee6:	371c      	adds	r7, #28
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	fffeff8f 	.word	0xfffeff8f
 8013ef4:	40010000 	.word	0x40010000
 8013ef8:	40010400 	.word	0x40010400
 8013efc:	40014000 	.word	0x40014000
 8013f00:	40014400 	.word	0x40014400
 8013f04:	40014800 	.word	0x40014800

08013f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a1b      	ldr	r3, [r3, #32]
 8013f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a1b      	ldr	r3, [r3, #32]
 8013f1c:	f023 0210 	bic.w	r2, r3, #16
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	699b      	ldr	r3, [r3, #24]
 8013f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	4b34      	ldr	r3, [pc, #208]	; (8014004 <TIM_OC2_SetConfig+0xfc>)
 8013f34:	4013      	ands	r3, r2
 8013f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	021b      	lsls	r3, r3, #8
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	f023 0320 	bic.w	r3, r3, #32
 8013f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	689b      	ldr	r3, [r3, #8]
 8013f58:	011b      	lsls	r3, r3, #4
 8013f5a:	697a      	ldr	r2, [r7, #20]
 8013f5c:	4313      	orrs	r3, r2
 8013f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	4a29      	ldr	r2, [pc, #164]	; (8014008 <TIM_OC2_SetConfig+0x100>)
 8013f64:	4293      	cmp	r3, r2
 8013f66:	d003      	beq.n	8013f70 <TIM_OC2_SetConfig+0x68>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	4a28      	ldr	r2, [pc, #160]	; (801400c <TIM_OC2_SetConfig+0x104>)
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	d10d      	bne.n	8013f8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	011b      	lsls	r3, r3, #4
 8013f7e:	697a      	ldr	r2, [r7, #20]
 8013f80:	4313      	orrs	r3, r2
 8013f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	4a1e      	ldr	r2, [pc, #120]	; (8014008 <TIM_OC2_SetConfig+0x100>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d00f      	beq.n	8013fb4 <TIM_OC2_SetConfig+0xac>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4a1d      	ldr	r2, [pc, #116]	; (801400c <TIM_OC2_SetConfig+0x104>)
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d00b      	beq.n	8013fb4 <TIM_OC2_SetConfig+0xac>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4a1c      	ldr	r2, [pc, #112]	; (8014010 <TIM_OC2_SetConfig+0x108>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d007      	beq.n	8013fb4 <TIM_OC2_SetConfig+0xac>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a1b      	ldr	r2, [pc, #108]	; (8014014 <TIM_OC2_SetConfig+0x10c>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d003      	beq.n	8013fb4 <TIM_OC2_SetConfig+0xac>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a1a      	ldr	r2, [pc, #104]	; (8014018 <TIM_OC2_SetConfig+0x110>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d113      	bne.n	8013fdc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	695b      	ldr	r3, [r3, #20]
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	4313      	orrs	r3, r2
 8013fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	693a      	ldr	r2, [r7, #16]
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	693a      	ldr	r2, [r7, #16]
 8013fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	685a      	ldr	r2, [r3, #4]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	697a      	ldr	r2, [r7, #20]
 8013ff4:	621a      	str	r2, [r3, #32]
}
 8013ff6:	bf00      	nop
 8013ff8:	371c      	adds	r7, #28
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	feff8fff 	.word	0xfeff8fff
 8014008:	40010000 	.word	0x40010000
 801400c:	40010400 	.word	0x40010400
 8014010:	40014000 	.word	0x40014000
 8014014:	40014400 	.word	0x40014400
 8014018:	40014800 	.word	0x40014800

0801401c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801401c:	b480      	push	{r7}
 801401e:	b087      	sub	sp, #28
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6a1b      	ldr	r3, [r3, #32]
 801402a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6a1b      	ldr	r3, [r3, #32]
 8014030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	69db      	ldr	r3, [r3, #28]
 8014042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014044:	68fa      	ldr	r2, [r7, #12]
 8014046:	4b33      	ldr	r3, [pc, #204]	; (8014114 <TIM_OC3_SetConfig+0xf8>)
 8014048:	4013      	ands	r3, r2
 801404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f023 0303 	bic.w	r3, r3, #3
 8014052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	4313      	orrs	r3, r2
 801405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	689b      	ldr	r3, [r3, #8]
 801406a:	021b      	lsls	r3, r3, #8
 801406c:	697a      	ldr	r2, [r7, #20]
 801406e:	4313      	orrs	r3, r2
 8014070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4a28      	ldr	r2, [pc, #160]	; (8014118 <TIM_OC3_SetConfig+0xfc>)
 8014076:	4293      	cmp	r3, r2
 8014078:	d003      	beq.n	8014082 <TIM_OC3_SetConfig+0x66>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4a27      	ldr	r2, [pc, #156]	; (801411c <TIM_OC3_SetConfig+0x100>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d10d      	bne.n	801409e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	021b      	lsls	r3, r3, #8
 8014090:	697a      	ldr	r2, [r7, #20]
 8014092:	4313      	orrs	r3, r2
 8014094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801409c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	4a1d      	ldr	r2, [pc, #116]	; (8014118 <TIM_OC3_SetConfig+0xfc>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	d00f      	beq.n	80140c6 <TIM_OC3_SetConfig+0xaa>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4a1c      	ldr	r2, [pc, #112]	; (801411c <TIM_OC3_SetConfig+0x100>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d00b      	beq.n	80140c6 <TIM_OC3_SetConfig+0xaa>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4a1b      	ldr	r2, [pc, #108]	; (8014120 <TIM_OC3_SetConfig+0x104>)
 80140b2:	4293      	cmp	r3, r2
 80140b4:	d007      	beq.n	80140c6 <TIM_OC3_SetConfig+0xaa>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	4a1a      	ldr	r2, [pc, #104]	; (8014124 <TIM_OC3_SetConfig+0x108>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d003      	beq.n	80140c6 <TIM_OC3_SetConfig+0xaa>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	4a19      	ldr	r2, [pc, #100]	; (8014128 <TIM_OC3_SetConfig+0x10c>)
 80140c2:	4293      	cmp	r3, r2
 80140c4:	d113      	bne.n	80140ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	695b      	ldr	r3, [r3, #20]
 80140da:	011b      	lsls	r3, r3, #4
 80140dc:	693a      	ldr	r2, [r7, #16]
 80140de:	4313      	orrs	r3, r2
 80140e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	699b      	ldr	r3, [r3, #24]
 80140e6:	011b      	lsls	r3, r3, #4
 80140e8:	693a      	ldr	r2, [r7, #16]
 80140ea:	4313      	orrs	r3, r2
 80140ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	693a      	ldr	r2, [r7, #16]
 80140f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	68fa      	ldr	r2, [r7, #12]
 80140f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	685a      	ldr	r2, [r3, #4]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	697a      	ldr	r2, [r7, #20]
 8014106:	621a      	str	r2, [r3, #32]
}
 8014108:	bf00      	nop
 801410a:	371c      	adds	r7, #28
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr
 8014114:	fffeff8f 	.word	0xfffeff8f
 8014118:	40010000 	.word	0x40010000
 801411c:	40010400 	.word	0x40010400
 8014120:	40014000 	.word	0x40014000
 8014124:	40014400 	.word	0x40014400
 8014128:	40014800 	.word	0x40014800

0801412c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801412c:	b480      	push	{r7}
 801412e:	b087      	sub	sp, #28
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6a1b      	ldr	r3, [r3, #32]
 801413a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6a1b      	ldr	r3, [r3, #32]
 8014140:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	69db      	ldr	r3, [r3, #28]
 8014152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	4b24      	ldr	r3, [pc, #144]	; (80141e8 <TIM_OC4_SetConfig+0xbc>)
 8014158:	4013      	ands	r3, r2
 801415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	021b      	lsls	r3, r3, #8
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	4313      	orrs	r3, r2
 801416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	689b      	ldr	r3, [r3, #8]
 801417c:	031b      	lsls	r3, r3, #12
 801417e:	693a      	ldr	r2, [r7, #16]
 8014180:	4313      	orrs	r3, r2
 8014182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	4a19      	ldr	r2, [pc, #100]	; (80141ec <TIM_OC4_SetConfig+0xc0>)
 8014188:	4293      	cmp	r3, r2
 801418a:	d00f      	beq.n	80141ac <TIM_OC4_SetConfig+0x80>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	4a18      	ldr	r2, [pc, #96]	; (80141f0 <TIM_OC4_SetConfig+0xc4>)
 8014190:	4293      	cmp	r3, r2
 8014192:	d00b      	beq.n	80141ac <TIM_OC4_SetConfig+0x80>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4a17      	ldr	r2, [pc, #92]	; (80141f4 <TIM_OC4_SetConfig+0xc8>)
 8014198:	4293      	cmp	r3, r2
 801419a:	d007      	beq.n	80141ac <TIM_OC4_SetConfig+0x80>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	4a16      	ldr	r2, [pc, #88]	; (80141f8 <TIM_OC4_SetConfig+0xcc>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d003      	beq.n	80141ac <TIM_OC4_SetConfig+0x80>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	4a15      	ldr	r2, [pc, #84]	; (80141fc <TIM_OC4_SetConfig+0xd0>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d109      	bne.n	80141c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80141b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	019b      	lsls	r3, r3, #6
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	4313      	orrs	r3, r2
 80141be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	697a      	ldr	r2, [r7, #20]
 80141c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	685a      	ldr	r2, [r3, #4]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	693a      	ldr	r2, [r7, #16]
 80141d8:	621a      	str	r2, [r3, #32]
}
 80141da:	bf00      	nop
 80141dc:	371c      	adds	r7, #28
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	feff8fff 	.word	0xfeff8fff
 80141ec:	40010000 	.word	0x40010000
 80141f0:	40010400 	.word	0x40010400
 80141f4:	40014000 	.word	0x40014000
 80141f8:	40014400 	.word	0x40014400
 80141fc:	40014800 	.word	0x40014800

08014200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014200:	b480      	push	{r7}
 8014202:	b087      	sub	sp, #28
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6a1b      	ldr	r3, [r3, #32]
 801420e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a1b      	ldr	r3, [r3, #32]
 8014214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	4b21      	ldr	r3, [pc, #132]	; (80142b0 <TIM_OC5_SetConfig+0xb0>)
 801422c:	4013      	ands	r3, r2
 801422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	68fa      	ldr	r2, [r7, #12]
 8014236:	4313      	orrs	r3, r2
 8014238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014240:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	041b      	lsls	r3, r3, #16
 8014248:	693a      	ldr	r2, [r7, #16]
 801424a:	4313      	orrs	r3, r2
 801424c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4a18      	ldr	r2, [pc, #96]	; (80142b4 <TIM_OC5_SetConfig+0xb4>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d00f      	beq.n	8014276 <TIM_OC5_SetConfig+0x76>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4a17      	ldr	r2, [pc, #92]	; (80142b8 <TIM_OC5_SetConfig+0xb8>)
 801425a:	4293      	cmp	r3, r2
 801425c:	d00b      	beq.n	8014276 <TIM_OC5_SetConfig+0x76>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4a16      	ldr	r2, [pc, #88]	; (80142bc <TIM_OC5_SetConfig+0xbc>)
 8014262:	4293      	cmp	r3, r2
 8014264:	d007      	beq.n	8014276 <TIM_OC5_SetConfig+0x76>
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4a15      	ldr	r2, [pc, #84]	; (80142c0 <TIM_OC5_SetConfig+0xc0>)
 801426a:	4293      	cmp	r3, r2
 801426c:	d003      	beq.n	8014276 <TIM_OC5_SetConfig+0x76>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	4a14      	ldr	r2, [pc, #80]	; (80142c4 <TIM_OC5_SetConfig+0xc4>)
 8014272:	4293      	cmp	r3, r2
 8014274:	d109      	bne.n	801428a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801427c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	695b      	ldr	r3, [r3, #20]
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	697a      	ldr	r2, [r7, #20]
 8014286:	4313      	orrs	r3, r2
 8014288:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	697a      	ldr	r2, [r7, #20]
 801428e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	685a      	ldr	r2, [r3, #4]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	693a      	ldr	r2, [r7, #16]
 80142a2:	621a      	str	r2, [r3, #32]
}
 80142a4:	bf00      	nop
 80142a6:	371c      	adds	r7, #28
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr
 80142b0:	fffeff8f 	.word	0xfffeff8f
 80142b4:	40010000 	.word	0x40010000
 80142b8:	40010400 	.word	0x40010400
 80142bc:	40014000 	.word	0x40014000
 80142c0:	40014400 	.word	0x40014400
 80142c4:	40014800 	.word	0x40014800

080142c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b087      	sub	sp, #28
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6a1b      	ldr	r3, [r3, #32]
 80142d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a1b      	ldr	r3, [r3, #32]
 80142dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	4b22      	ldr	r3, [pc, #136]	; (801437c <TIM_OC6_SetConfig+0xb4>)
 80142f4:	4013      	ands	r3, r2
 80142f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	021b      	lsls	r3, r3, #8
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	4313      	orrs	r3, r2
 8014302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801430a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	051b      	lsls	r3, r3, #20
 8014312:	693a      	ldr	r2, [r7, #16]
 8014314:	4313      	orrs	r3, r2
 8014316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	4a19      	ldr	r2, [pc, #100]	; (8014380 <TIM_OC6_SetConfig+0xb8>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d00f      	beq.n	8014340 <TIM_OC6_SetConfig+0x78>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	4a18      	ldr	r2, [pc, #96]	; (8014384 <TIM_OC6_SetConfig+0xbc>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d00b      	beq.n	8014340 <TIM_OC6_SetConfig+0x78>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	4a17      	ldr	r2, [pc, #92]	; (8014388 <TIM_OC6_SetConfig+0xc0>)
 801432c:	4293      	cmp	r3, r2
 801432e:	d007      	beq.n	8014340 <TIM_OC6_SetConfig+0x78>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	4a16      	ldr	r2, [pc, #88]	; (801438c <TIM_OC6_SetConfig+0xc4>)
 8014334:	4293      	cmp	r3, r2
 8014336:	d003      	beq.n	8014340 <TIM_OC6_SetConfig+0x78>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4a15      	ldr	r2, [pc, #84]	; (8014390 <TIM_OC6_SetConfig+0xc8>)
 801433c:	4293      	cmp	r3, r2
 801433e:	d109      	bne.n	8014354 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	695b      	ldr	r3, [r3, #20]
 801434c:	029b      	lsls	r3, r3, #10
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	4313      	orrs	r3, r2
 8014352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	697a      	ldr	r2, [r7, #20]
 8014358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	685a      	ldr	r2, [r3, #4]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	693a      	ldr	r2, [r7, #16]
 801436c:	621a      	str	r2, [r3, #32]
}
 801436e:	bf00      	nop
 8014370:	371c      	adds	r7, #28
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	feff8fff 	.word	0xfeff8fff
 8014380:	40010000 	.word	0x40010000
 8014384:	40010400 	.word	0x40010400
 8014388:	40014000 	.word	0x40014000
 801438c:	40014400 	.word	0x40014400
 8014390:	40014800 	.word	0x40014800

08014394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014394:	b480      	push	{r7}
 8014396:	b087      	sub	sp, #28
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	6a1b      	ldr	r3, [r3, #32]
 80143a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6a1b      	ldr	r3, [r3, #32]
 80143aa:	f023 0201 	bic.w	r2, r3, #1
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	699b      	ldr	r3, [r3, #24]
 80143b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80143be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	011b      	lsls	r3, r3, #4
 80143c4:	693a      	ldr	r2, [r7, #16]
 80143c6:	4313      	orrs	r3, r2
 80143c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	f023 030a 	bic.w	r3, r3, #10
 80143d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80143d2:	697a      	ldr	r2, [r7, #20]
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	693a      	ldr	r2, [r7, #16]
 80143de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	697a      	ldr	r2, [r7, #20]
 80143e4:	621a      	str	r2, [r3, #32]
}
 80143e6:	bf00      	nop
 80143e8:	371c      	adds	r7, #28
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80143f2:	b480      	push	{r7}
 80143f4:	b087      	sub	sp, #28
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	60f8      	str	r0, [r7, #12]
 80143fa:	60b9      	str	r1, [r7, #8]
 80143fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6a1b      	ldr	r3, [r3, #32]
 8014402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	6a1b      	ldr	r3, [r3, #32]
 8014408:	f023 0210 	bic.w	r2, r3, #16
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	699b      	ldr	r3, [r3, #24]
 8014414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801441c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	031b      	lsls	r3, r3, #12
 8014422:	693a      	ldr	r2, [r7, #16]
 8014424:	4313      	orrs	r3, r2
 8014426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801442e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	011b      	lsls	r3, r3, #4
 8014434:	697a      	ldr	r2, [r7, #20]
 8014436:	4313      	orrs	r3, r2
 8014438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	693a      	ldr	r2, [r7, #16]
 801443e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	697a      	ldr	r2, [r7, #20]
 8014444:	621a      	str	r2, [r3, #32]
}
 8014446:	bf00      	nop
 8014448:	371c      	adds	r7, #28
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
	...

08014454 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014454:	b480      	push	{r7}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014464:	68fa      	ldr	r2, [r7, #12]
 8014466:	4b09      	ldr	r3, [pc, #36]	; (801448c <TIM_ITRx_SetConfig+0x38>)
 8014468:	4013      	ands	r3, r2
 801446a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801446c:	683a      	ldr	r2, [r7, #0]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	4313      	orrs	r3, r2
 8014472:	f043 0307 	orr.w	r3, r3, #7
 8014476:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	609a      	str	r2, [r3, #8]
}
 801447e:	bf00      	nop
 8014480:	3714      	adds	r7, #20
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr
 801448a:	bf00      	nop
 801448c:	ffcfff8f 	.word	0xffcfff8f

08014490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014490:	b480      	push	{r7}
 8014492:	b087      	sub	sp, #28
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
 801449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80144aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	021a      	lsls	r2, r3, #8
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	431a      	orrs	r2, r3
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	4313      	orrs	r3, r2
 80144b8:	697a      	ldr	r2, [r7, #20]
 80144ba:	4313      	orrs	r3, r2
 80144bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	697a      	ldr	r2, [r7, #20]
 80144c2:	609a      	str	r2, [r3, #8]
}
 80144c4:	bf00      	nop
 80144c6:	371c      	adds	r7, #28
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr

080144d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b087      	sub	sp, #28
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	f003 031f 	and.w	r3, r3, #31
 80144e2:	2201      	movs	r2, #1
 80144e4:	fa02 f303 	lsl.w	r3, r2, r3
 80144e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6a1a      	ldr	r2, [r3, #32]
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	43db      	mvns	r3, r3
 80144f2:	401a      	ands	r2, r3
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6a1a      	ldr	r2, [r3, #32]
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	f003 031f 	and.w	r3, r3, #31
 8014502:	6879      	ldr	r1, [r7, #4]
 8014504:	fa01 f303 	lsl.w	r3, r1, r3
 8014508:	431a      	orrs	r2, r3
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	621a      	str	r2, [r3, #32]
}
 801450e:	bf00      	nop
 8014510:	371c      	adds	r7, #28
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr
	...

0801451c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801451c:	b480      	push	{r7}
 801451e:	b085      	sub	sp, #20
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801452c:	2b01      	cmp	r3, #1
 801452e:	d101      	bne.n	8014534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014530:	2302      	movs	r3, #2
 8014532:	e06d      	b.n	8014610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2201      	movs	r2, #1
 8014538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2202      	movs	r2, #2
 8014540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	689b      	ldr	r3, [r3, #8]
 8014552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a30      	ldr	r2, [pc, #192]	; (801461c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d004      	beq.n	8014568 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4a2f      	ldr	r2, [pc, #188]	; (8014620 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d108      	bne.n	801457a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801456e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	4313      	orrs	r3, r2
 8014578:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014580:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	68fa      	ldr	r2, [r7, #12]
 8014588:	4313      	orrs	r3, r2
 801458a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4a20      	ldr	r2, [pc, #128]	; (801461c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801459a:	4293      	cmp	r3, r2
 801459c:	d022      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145a6:	d01d      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a1d      	ldr	r2, [pc, #116]	; (8014624 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80145ae:	4293      	cmp	r3, r2
 80145b0:	d018      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	4a1c      	ldr	r2, [pc, #112]	; (8014628 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d013      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a1a      	ldr	r2, [pc, #104]	; (801462c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80145c2:	4293      	cmp	r3, r2
 80145c4:	d00e      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4a15      	ldr	r2, [pc, #84]	; (8014620 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80145cc:	4293      	cmp	r3, r2
 80145ce:	d009      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a16      	ldr	r2, [pc, #88]	; (8014630 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d004      	beq.n	80145e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a15      	ldr	r2, [pc, #84]	; (8014634 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d10c      	bne.n	80145fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	4313      	orrs	r3, r2
 80145f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2201      	movs	r2, #1
 8014602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3714      	adds	r7, #20
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	40010000 	.word	0x40010000
 8014620:	40010400 	.word	0x40010400
 8014624:	40000400 	.word	0x40000400
 8014628:	40000800 	.word	0x40000800
 801462c:	40000c00 	.word	0x40000c00
 8014630:	40001800 	.word	0x40001800
 8014634:	40014000 	.word	0x40014000

08014638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014638:	b480      	push	{r7}
 801463a:	b085      	sub	sp, #20
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014642:	2300      	movs	r3, #0
 8014644:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801464c:	2b01      	cmp	r3, #1
 801464e:	d101      	bne.n	8014654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014650:	2302      	movs	r3, #2
 8014652:	e065      	b.n	8014720 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2201      	movs	r2, #1
 8014658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	4313      	orrs	r3, r2
 8014668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	4313      	orrs	r3, r2
 8014676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	4313      	orrs	r3, r2
 8014684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	4313      	orrs	r3, r2
 8014692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	4313      	orrs	r3, r2
 80146a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	695b      	ldr	r3, [r3, #20]
 80146ac:	4313      	orrs	r3, r2
 80146ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ba:	4313      	orrs	r3, r2
 80146bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	699b      	ldr	r3, [r3, #24]
 80146c8:	041b      	lsls	r3, r3, #16
 80146ca:	4313      	orrs	r3, r2
 80146cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	4a16      	ldr	r2, [pc, #88]	; (801472c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d004      	beq.n	80146e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	4a14      	ldr	r2, [pc, #80]	; (8014730 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80146de:	4293      	cmp	r3, r2
 80146e0:	d115      	bne.n	801470e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ec:	051b      	lsls	r3, r3, #20
 80146ee:	4313      	orrs	r3, r2
 80146f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	69db      	ldr	r3, [r3, #28]
 80146fc:	4313      	orrs	r3, r2
 80146fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	6a1b      	ldr	r3, [r3, #32]
 801470a:	4313      	orrs	r3, r2
 801470c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2200      	movs	r2, #0
 801471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801471e:	2300      	movs	r3, #0
}
 8014720:	4618      	mov	r0, r3
 8014722:	3714      	adds	r7, #20
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr
 801472c:	40010000 	.word	0x40010000
 8014730:	40010400 	.word	0x40010400

08014734 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801473c:	bf00      	nop
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014748:	b480      	push	{r7}
 801474a:	b083      	sub	sp, #12
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014750:	bf00      	nop
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014764:	bf00      	nop
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr

08014770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801477e:	2301      	movs	r3, #1
 8014780:	e042      	b.n	8014808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014788:	2b00      	cmp	r3, #0
 801478a:	d106      	bne.n	801479a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7f0 ff67 	bl	8005668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2224      	movs	r2, #36	; 0x24
 801479e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f022 0201 	bic.w	r2, r2, #1
 80147b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d002      	beq.n	80147c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f001 fbc2 	bl	8015f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 fe57 	bl	8015474 <UART_SetConfig>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d101      	bne.n	80147d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80147cc:	2301      	movs	r3, #1
 80147ce:	e01b      	b.n	8014808 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	685a      	ldr	r2, [r3, #4]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80147de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	689a      	ldr	r2, [r3, #8]
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80147ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	f042 0201 	orr.w	r2, r2, #1
 80147fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f001 fc41 	bl	8016088 <UART_CheckIdleState>
 8014806:	4603      	mov	r3, r0
}
 8014808:	4618      	mov	r0, r3
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b08a      	sub	sp, #40	; 0x28
 8014814:	af02      	add	r7, sp, #8
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	603b      	str	r3, [r7, #0]
 801481c:	4613      	mov	r3, r2
 801481e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014826:	2b20      	cmp	r3, #32
 8014828:	d17b      	bne.n	8014922 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d002      	beq.n	8014836 <HAL_UART_Transmit+0x26>
 8014830:	88fb      	ldrh	r3, [r7, #6]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d101      	bne.n	801483a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014836:	2301      	movs	r3, #1
 8014838:	e074      	b.n	8014924 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2200      	movs	r2, #0
 801483e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2221      	movs	r2, #33	; 0x21
 8014846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801484a:	f7f1 fd7d 	bl	8006348 <HAL_GetTick>
 801484e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	88fa      	ldrh	r2, [r7, #6]
 8014854:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	88fa      	ldrh	r2, [r7, #6]
 801485c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	689b      	ldr	r3, [r3, #8]
 8014864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014868:	d108      	bne.n	801487c <HAL_UART_Transmit+0x6c>
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d104      	bne.n	801487c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014872:	2300      	movs	r3, #0
 8014874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	61bb      	str	r3, [r7, #24]
 801487a:	e003      	b.n	8014884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014880:	2300      	movs	r3, #0
 8014882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014884:	e030      	b.n	80148e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	9300      	str	r3, [sp, #0]
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	2200      	movs	r2, #0
 801488e:	2180      	movs	r1, #128	; 0x80
 8014890:	68f8      	ldr	r0, [r7, #12]
 8014892:	f001 fca3 	bl	80161dc <UART_WaitOnFlagUntilTimeout>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d005      	beq.n	80148a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	2220      	movs	r2, #32
 80148a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80148a4:	2303      	movs	r3, #3
 80148a6:	e03d      	b.n	8014924 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80148a8:	69fb      	ldr	r3, [r7, #28]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d10b      	bne.n	80148c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	461a      	mov	r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80148bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	3302      	adds	r3, #2
 80148c2:	61bb      	str	r3, [r7, #24]
 80148c4:	e007      	b.n	80148d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	781a      	ldrb	r2, [r3, #0]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	3301      	adds	r3, #1
 80148d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80148dc:	b29b      	uxth	r3, r3
 80148de:	3b01      	subs	r3, #1
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80148ee:	b29b      	uxth	r3, r3
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d1c8      	bne.n	8014886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	2200      	movs	r2, #0
 80148fc:	2140      	movs	r1, #64	; 0x40
 80148fe:	68f8      	ldr	r0, [r7, #12]
 8014900:	f001 fc6c 	bl	80161dc <UART_WaitOnFlagUntilTimeout>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d005      	beq.n	8014916 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2220      	movs	r2, #32
 801490e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014912:	2303      	movs	r3, #3
 8014914:	e006      	b.n	8014924 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2220      	movs	r2, #32
 801491a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801491e:	2300      	movs	r3, #0
 8014920:	e000      	b.n	8014924 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014922:	2302      	movs	r3, #2
  }
}
 8014924:	4618      	mov	r0, r3
 8014926:	3720      	adds	r7, #32
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08a      	sub	sp, #40	; 0x28
 8014930:	af02      	add	r7, sp, #8
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	603b      	str	r3, [r7, #0]
 8014938:	4613      	mov	r3, r2
 801493a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014942:	2b20      	cmp	r3, #32
 8014944:	f040 80b5 	bne.w	8014ab2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d002      	beq.n	8014954 <HAL_UART_Receive+0x28>
 801494e:	88fb      	ldrh	r3, [r7, #6]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d101      	bne.n	8014958 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014954:	2301      	movs	r3, #1
 8014956:	e0ad      	b.n	8014ab4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2200      	movs	r2, #0
 801495c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2222      	movs	r2, #34	; 0x22
 8014964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2200      	movs	r2, #0
 801496c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801496e:	f7f1 fceb 	bl	8006348 <HAL_GetTick>
 8014972:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	88fa      	ldrh	r2, [r7, #6]
 8014978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	88fa      	ldrh	r2, [r7, #6]
 8014980:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	689b      	ldr	r3, [r3, #8]
 8014988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801498c:	d10e      	bne.n	80149ac <HAL_UART_Receive+0x80>
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	691b      	ldr	r3, [r3, #16]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d105      	bne.n	80149a2 <HAL_UART_Receive+0x76>
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f240 12ff 	movw	r2, #511	; 0x1ff
 801499c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149a0:	e02d      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	22ff      	movs	r2, #255	; 0xff
 80149a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149aa:	e028      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	689b      	ldr	r3, [r3, #8]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d10d      	bne.n	80149d0 <HAL_UART_Receive+0xa4>
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	691b      	ldr	r3, [r3, #16]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d104      	bne.n	80149c6 <HAL_UART_Receive+0x9a>
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	22ff      	movs	r2, #255	; 0xff
 80149c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149c4:	e01b      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	227f      	movs	r2, #127	; 0x7f
 80149ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149ce:	e016      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	689b      	ldr	r3, [r3, #8]
 80149d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80149d8:	d10d      	bne.n	80149f6 <HAL_UART_Receive+0xca>
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	691b      	ldr	r3, [r3, #16]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d104      	bne.n	80149ec <HAL_UART_Receive+0xc0>
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	227f      	movs	r2, #127	; 0x7f
 80149e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149ea:	e008      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	223f      	movs	r2, #63	; 0x3f
 80149f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149f4:	e003      	b.n	80149fe <HAL_UART_Receive+0xd2>
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2200      	movs	r2, #0
 80149fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	689b      	ldr	r3, [r3, #8]
 8014a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a0e:	d108      	bne.n	8014a22 <HAL_UART_Receive+0xf6>
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	691b      	ldr	r3, [r3, #16]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d104      	bne.n	8014a22 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	61bb      	str	r3, [r7, #24]
 8014a20:	e003      	b.n	8014a2a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014a26:	2300      	movs	r3, #0
 8014a28:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014a2a:	e036      	b.n	8014a9a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	2200      	movs	r2, #0
 8014a34:	2120      	movs	r1, #32
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f001 fbd0 	bl	80161dc <UART_WaitOnFlagUntilTimeout>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d005      	beq.n	8014a4e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2220      	movs	r2, #32
 8014a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014a4a:	2303      	movs	r3, #3
 8014a4c:	e032      	b.n	8014ab4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d10c      	bne.n	8014a6e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	8a7b      	ldrh	r3, [r7, #18]
 8014a5e:	4013      	ands	r3, r2
 8014a60:	b29a      	uxth	r2, r3
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	3302      	adds	r3, #2
 8014a6a:	61bb      	str	r3, [r7, #24]
 8014a6c:	e00c      	b.n	8014a88 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a74:	b2da      	uxtb	r2, r3
 8014a76:	8a7b      	ldrh	r3, [r7, #18]
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	4013      	ands	r3, r2
 8014a7c:	b2da      	uxtb	r2, r3
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	3301      	adds	r3, #1
 8014a86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	3b01      	subs	r3, #1
 8014a92:	b29a      	uxth	r2, r3
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d1c2      	bne.n	8014a2c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2220      	movs	r2, #32
 8014aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e000      	b.n	8014ab4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8014ab2:	2302      	movs	r3, #2
  }
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3720      	adds	r7, #32
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b08a      	sub	sp, #40	; 0x28
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ad0:	2b20      	cmp	r3, #32
 8014ad2:	d137      	bne.n	8014b44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d002      	beq.n	8014ae0 <HAL_UART_Receive_IT+0x24>
 8014ada:	88fb      	ldrh	r3, [r7, #6]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d101      	bne.n	8014ae4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	e030      	b.n	8014b46 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	4a18      	ldr	r2, [pc, #96]	; (8014b50 <HAL_UART_Receive_IT+0x94>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	d01f      	beq.n	8014b34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d018      	beq.n	8014b34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	e853 3f00 	ldrex	r3, [r3]
 8014b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014b16:	627b      	str	r3, [r7, #36]	; 0x24
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b20:	623b      	str	r3, [r7, #32]
 8014b22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b24:	69f9      	ldr	r1, [r7, #28]
 8014b26:	6a3a      	ldr	r2, [r7, #32]
 8014b28:	e841 2300 	strex	r3, r2, [r1]
 8014b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8014b2e:	69bb      	ldr	r3, [r7, #24]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d1e6      	bne.n	8014b02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014b34:	88fb      	ldrh	r3, [r7, #6]
 8014b36:	461a      	mov	r2, r3
 8014b38:	68b9      	ldr	r1, [r7, #8]
 8014b3a:	68f8      	ldr	r0, [r7, #12]
 8014b3c:	f001 fbbc 	bl	80162b8 <UART_Start_Receive_IT>
 8014b40:	4603      	mov	r3, r0
 8014b42:	e000      	b.n	8014b46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014b44:	2302      	movs	r3, #2
  }
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3728      	adds	r7, #40	; 0x28
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	58000c00 	.word	0x58000c00

08014b54 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b09a      	sub	sp, #104	; 0x68
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b64:	e853 3f00 	ldrex	r3, [r3]
 8014b68:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014b70:	667b      	str	r3, [r7, #100]	; 0x64
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	461a      	mov	r2, r3
 8014b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8014b7c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b82:	e841 2300 	strex	r3, r2, [r1]
 8014b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1e6      	bne.n	8014b5c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	3308      	adds	r3, #8
 8014b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b98:	e853 3f00 	ldrex	r3, [r3]
 8014b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ba0:	4b46      	ldr	r3, [pc, #280]	; (8014cbc <HAL_UART_AbortReceive+0x168>)
 8014ba2:	4013      	ands	r3, r2
 8014ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	3308      	adds	r3, #8
 8014bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014bae:	643a      	str	r2, [r7, #64]	; 0x40
 8014bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014bb6:	e841 2300 	strex	r3, r2, [r1]
 8014bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d1e5      	bne.n	8014b8e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d118      	bne.n	8014bfc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	e853 3f00 	ldrex	r3, [r3]
 8014bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	f023 0310 	bic.w	r3, r3, #16
 8014bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	461a      	mov	r2, r3
 8014be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bf0:	e841 2300 	strex	r3, r2, [r1]
 8014bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1e6      	bne.n	8014bca <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c06:	2b40      	cmp	r3, #64	; 0x40
 8014c08:	d13b      	bne.n	8014c82 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	3308      	adds	r3, #8
 8014c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	e853 3f00 	ldrex	r3, [r3]
 8014c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c20:	65bb      	str	r3, [r7, #88]	; 0x58
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	3308      	adds	r3, #8
 8014c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c2a:	61ba      	str	r2, [r7, #24]
 8014c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c2e:	6979      	ldr	r1, [r7, #20]
 8014c30:	69ba      	ldr	r2, [r7, #24]
 8014c32:	e841 2300 	strex	r3, r2, [r1]
 8014c36:	613b      	str	r3, [r7, #16]
   return(result);
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d1e5      	bne.n	8014c0a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d01c      	beq.n	8014c82 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c4e:	2200      	movs	r2, #0
 8014c50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7f4 fa63 	bl	8009124 <HAL_DMA_Abort>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d00e      	beq.n	8014c82 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7f5 fef6 	bl	800aa5c <HAL_DMA_GetError>
 8014c70:	4603      	mov	r3, r0
 8014c72:	2b20      	cmp	r3, #32
 8014c74:	d105      	bne.n	8014c82 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2210      	movs	r2, #16
 8014c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014c7e:	2303      	movs	r3, #3
 8014c80:	e017      	b.n	8014cb2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2200      	movs	r2, #0
 8014c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	220f      	movs	r2, #15
 8014c90:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	699a      	ldr	r2, [r3, #24]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f042 0208 	orr.w	r2, r2, #8
 8014ca0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2220      	movs	r2, #32
 8014ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2200      	movs	r2, #0
 8014cae:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014cb0:	2300      	movs	r3, #0
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3768      	adds	r7, #104	; 0x68
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	effffffe 	.word	0xeffffffe

08014cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b0ba      	sub	sp, #232	; 0xe8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	69db      	ldr	r3, [r3, #28]
 8014cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	689b      	ldr	r3, [r3, #8]
 8014ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014ce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014cea:	f640 030f 	movw	r3, #2063	; 0x80f
 8014cee:	4013      	ands	r3, r2
 8014cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d11b      	bne.n	8014d34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d00:	f003 0320 	and.w	r3, r3, #32
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d015      	beq.n	8014d34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d0c:	f003 0320 	and.w	r3, r3, #32
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d105      	bne.n	8014d20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d009      	beq.n	8014d34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 8377 	beq.w	8015418 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	4798      	blx	r3
      }
      return;
 8014d32:	e371      	b.n	8015418 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f000 8123 	beq.w	8014f84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014d3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d42:	4b8d      	ldr	r3, [pc, #564]	; (8014f78 <HAL_UART_IRQHandler+0x2b8>)
 8014d44:	4013      	ands	r3, r2
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d106      	bne.n	8014d58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014d4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014d4e:	4b8b      	ldr	r3, [pc, #556]	; (8014f7c <HAL_UART_IRQHandler+0x2bc>)
 8014d50:	4013      	ands	r3, r2
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f000 8116 	beq.w	8014f84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d5c:	f003 0301 	and.w	r3, r3, #1
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d011      	beq.n	8014d88 <HAL_UART_IRQHandler+0xc8>
 8014d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00b      	beq.n	8014d88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2201      	movs	r2, #1
 8014d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d7e:	f043 0201 	orr.w	r2, r3, #1
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d8c:	f003 0302 	and.w	r3, r3, #2
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d011      	beq.n	8014db8 <HAL_UART_IRQHandler+0xf8>
 8014d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d98:	f003 0301 	and.w	r3, r3, #1
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00b      	beq.n	8014db8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	2202      	movs	r2, #2
 8014da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014dae:	f043 0204 	orr.w	r2, r3, #4
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014dbc:	f003 0304 	and.w	r3, r3, #4
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d011      	beq.n	8014de8 <HAL_UART_IRQHandler+0x128>
 8014dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014dc8:	f003 0301 	and.w	r3, r3, #1
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00b      	beq.n	8014de8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2204      	movs	r2, #4
 8014dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014dde:	f043 0202 	orr.w	r2, r3, #2
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014dec:	f003 0308 	and.w	r3, r3, #8
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d017      	beq.n	8014e24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014df8:	f003 0320 	and.w	r3, r3, #32
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d105      	bne.n	8014e0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014e00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014e04:	4b5c      	ldr	r3, [pc, #368]	; (8014f78 <HAL_UART_IRQHandler+0x2b8>)
 8014e06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d00b      	beq.n	8014e24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2208      	movs	r2, #8
 8014e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e1a:	f043 0208 	orr.w	r2, r3, #8
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d012      	beq.n	8014e56 <HAL_UART_IRQHandler+0x196>
 8014e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d00c      	beq.n	8014e56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e4c:	f043 0220 	orr.w	r2, r3, #32
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f000 82dd 	beq.w	801541c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e66:	f003 0320 	and.w	r3, r3, #32
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d013      	beq.n	8014e96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e72:	f003 0320 	and.w	r3, r3, #32
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d105      	bne.n	8014e86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d007      	beq.n	8014e96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d003      	beq.n	8014e96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	689b      	ldr	r3, [r3, #8]
 8014ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eaa:	2b40      	cmp	r3, #64	; 0x40
 8014eac:	d005      	beq.n	8014eba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014eb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d054      	beq.n	8014f64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f001 fb1e 	bl	80164fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eca:	2b40      	cmp	r3, #64	; 0x40
 8014ecc:	d146      	bne.n	8014f5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	3308      	adds	r3, #8
 8014ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014edc:	e853 3f00 	ldrex	r3, [r3]
 8014ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	3308      	adds	r3, #8
 8014ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014f0a:	e841 2300 	strex	r3, r2, [r1]
 8014f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1d9      	bne.n	8014ece <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d017      	beq.n	8014f54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f2a:	4a15      	ldr	r2, [pc, #84]	; (8014f80 <HAL_UART_IRQHandler+0x2c0>)
 8014f2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7f4 fc13 	bl	8009760 <HAL_DMA_Abort_IT>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d019      	beq.n	8014f74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014f4e:	4610      	mov	r0, r2
 8014f50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f52:	e00f      	b.n	8014f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f000 fa77 	bl	8015448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f5a:	e00b      	b.n	8014f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f000 fa73 	bl	8015448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f62:	e007      	b.n	8014f74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 fa6f 	bl	8015448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014f72:	e253      	b.n	801541c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f74:	bf00      	nop
    return;
 8014f76:	e251      	b.n	801541c <HAL_UART_IRQHandler+0x75c>
 8014f78:	10000001 	.word	0x10000001
 8014f7c:	04000120 	.word	0x04000120
 8014f80:	080165c9 	.word	0x080165c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	f040 81e7 	bne.w	801535c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f92:	f003 0310 	and.w	r3, r3, #16
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f000 81e0 	beq.w	801535c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fa0:	f003 0310 	and.w	r3, r3, #16
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 81d9 	beq.w	801535c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2210      	movs	r2, #16
 8014fb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	689b      	ldr	r3, [r3, #8]
 8014fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fbc:	2b40      	cmp	r3, #64	; 0x40
 8014fbe:	f040 8151 	bne.w	8015264 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	4a96      	ldr	r2, [pc, #600]	; (8015224 <HAL_UART_IRQHandler+0x564>)
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d068      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4a93      	ldr	r2, [pc, #588]	; (8015228 <HAL_UART_IRQHandler+0x568>)
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d061      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4a91      	ldr	r2, [pc, #580]	; (801522c <HAL_UART_IRQHandler+0x56c>)
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	d05a      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a8e      	ldr	r2, [pc, #568]	; (8015230 <HAL_UART_IRQHandler+0x570>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d053      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	4a8c      	ldr	r2, [pc, #560]	; (8015234 <HAL_UART_IRQHandler+0x574>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d04c      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4a89      	ldr	r2, [pc, #548]	; (8015238 <HAL_UART_IRQHandler+0x578>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d045      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	4a87      	ldr	r2, [pc, #540]	; (801523c <HAL_UART_IRQHandler+0x57c>)
 8015020:	4293      	cmp	r3, r2
 8015022:	d03e      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	4a84      	ldr	r2, [pc, #528]	; (8015240 <HAL_UART_IRQHandler+0x580>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d037      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4a82      	ldr	r2, [pc, #520]	; (8015244 <HAL_UART_IRQHandler+0x584>)
 801503c:	4293      	cmp	r3, r2
 801503e:	d030      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	4a7f      	ldr	r2, [pc, #508]	; (8015248 <HAL_UART_IRQHandler+0x588>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d029      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	4a7d      	ldr	r2, [pc, #500]	; (801524c <HAL_UART_IRQHandler+0x58c>)
 8015058:	4293      	cmp	r3, r2
 801505a:	d022      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4a7a      	ldr	r2, [pc, #488]	; (8015250 <HAL_UART_IRQHandler+0x590>)
 8015066:	4293      	cmp	r3, r2
 8015068:	d01b      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	4a78      	ldr	r2, [pc, #480]	; (8015254 <HAL_UART_IRQHandler+0x594>)
 8015074:	4293      	cmp	r3, r2
 8015076:	d014      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4a75      	ldr	r2, [pc, #468]	; (8015258 <HAL_UART_IRQHandler+0x598>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d00d      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	4a73      	ldr	r2, [pc, #460]	; (801525c <HAL_UART_IRQHandler+0x59c>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d006      	beq.n	80150a2 <HAL_UART_IRQHandler+0x3e2>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4a70      	ldr	r2, [pc, #448]	; (8015260 <HAL_UART_IRQHandler+0x5a0>)
 801509e:	4293      	cmp	r3, r2
 80150a0:	d106      	bne.n	80150b0 <HAL_UART_IRQHandler+0x3f0>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	e005      	b.n	80150bc <HAL_UART_IRQHandler+0x3fc>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80150c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 81ab 	beq.w	8015420 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80150d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80150d4:	429a      	cmp	r2, r3
 80150d6:	f080 81a3 	bcs.w	8015420 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80150e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150ea:	69db      	ldr	r3, [r3, #28]
 80150ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150f0:	f000 8087 	beq.w	8015202 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015100:	e853 3f00 	ldrex	r3, [r3]
 8015104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	461a      	mov	r2, r3
 801511a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801511e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015122:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801512a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801512e:	e841 2300 	strex	r3, r2, [r1]
 8015132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801513a:	2b00      	cmp	r3, #0
 801513c:	d1da      	bne.n	80150f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	3308      	adds	r3, #8
 8015144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015148:	e853 3f00 	ldrex	r3, [r3]
 801514c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801514e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015150:	f023 0301 	bic.w	r3, r3, #1
 8015154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	3308      	adds	r3, #8
 801515e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801516a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801516e:	e841 2300 	strex	r3, r2, [r1]
 8015172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1e1      	bne.n	801513e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	3308      	adds	r3, #8
 8015180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015184:	e853 3f00 	ldrex	r3, [r3]
 8015188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801518c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	3308      	adds	r3, #8
 801519a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801519e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80151a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80151a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80151a6:	e841 2300 	strex	r3, r2, [r1]
 80151aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80151ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1e3      	bne.n	801517a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2220      	movs	r2, #32
 80151b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151c8:	e853 3f00 	ldrex	r3, [r3]
 80151cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80151ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151d0:	f023 0310 	bic.w	r3, r3, #16
 80151d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	461a      	mov	r2, r3
 80151de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80151e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80151e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80151e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151ea:	e841 2300 	strex	r3, r2, [r1]
 80151ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80151f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1e4      	bne.n	80151c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7f3 ff91 	bl	8009124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2202      	movs	r2, #2
 8015206:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015214:	b29b      	uxth	r3, r3
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	b29b      	uxth	r3, r3
 801521a:	4619      	mov	r1, r3
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f000 f91d 	bl	801545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015222:	e0fd      	b.n	8015420 <HAL_UART_IRQHandler+0x760>
 8015224:	40020010 	.word	0x40020010
 8015228:	40020028 	.word	0x40020028
 801522c:	40020040 	.word	0x40020040
 8015230:	40020058 	.word	0x40020058
 8015234:	40020070 	.word	0x40020070
 8015238:	40020088 	.word	0x40020088
 801523c:	400200a0 	.word	0x400200a0
 8015240:	400200b8 	.word	0x400200b8
 8015244:	40020410 	.word	0x40020410
 8015248:	40020428 	.word	0x40020428
 801524c:	40020440 	.word	0x40020440
 8015250:	40020458 	.word	0x40020458
 8015254:	40020470 	.word	0x40020470
 8015258:	40020488 	.word	0x40020488
 801525c:	400204a0 	.word	0x400204a0
 8015260:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015270:	b29b      	uxth	r3, r3
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801527e:	b29b      	uxth	r3, r3
 8015280:	2b00      	cmp	r3, #0
 8015282:	f000 80cf 	beq.w	8015424 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8015286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801528a:	2b00      	cmp	r3, #0
 801528c:	f000 80ca 	beq.w	8015424 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015298:	e853 3f00 	ldrex	r3, [r3]
 801529c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80152a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	461a      	mov	r2, r3
 80152ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80152b2:	647b      	str	r3, [r7, #68]	; 0x44
 80152b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80152b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80152ba:	e841 2300 	strex	r3, r2, [r1]
 80152be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80152c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d1e4      	bne.n	8015290 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	3308      	adds	r3, #8
 80152cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d0:	e853 3f00 	ldrex	r3, [r3]
 80152d4:	623b      	str	r3, [r7, #32]
   return(result);
 80152d6:	6a3a      	ldr	r2, [r7, #32]
 80152d8:	4b55      	ldr	r3, [pc, #340]	; (8015430 <HAL_UART_IRQHandler+0x770>)
 80152da:	4013      	ands	r3, r2
 80152dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	3308      	adds	r3, #8
 80152e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80152ea:	633a      	str	r2, [r7, #48]	; 0x30
 80152ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152f2:	e841 2300 	strex	r3, r2, [r1]
 80152f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80152f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d1e3      	bne.n	80152c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	2220      	movs	r2, #32
 8015302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2200      	movs	r2, #0
 801530a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2200      	movs	r2, #0
 8015310:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	e853 3f00 	ldrex	r3, [r3]
 801531e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f023 0310 	bic.w	r3, r3, #16
 8015326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	461a      	mov	r2, r3
 8015330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015334:	61fb      	str	r3, [r7, #28]
 8015336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015338:	69b9      	ldr	r1, [r7, #24]
 801533a:	69fa      	ldr	r2, [r7, #28]
 801533c:	e841 2300 	strex	r3, r2, [r1]
 8015340:	617b      	str	r3, [r7, #20]
   return(result);
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d1e4      	bne.n	8015312 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2202      	movs	r2, #2
 801534c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801534e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015352:	4619      	mov	r1, r3
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f000 f881 	bl	801545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801535a:	e063      	b.n	8015424 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00e      	beq.n	8015386 <HAL_UART_IRQHandler+0x6c6>
 8015368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801536c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015370:	2b00      	cmp	r3, #0
 8015372:	d008      	beq.n	8015386 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801537c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f001 fe80 	bl	8017084 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015384:	e051      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801538e:	2b00      	cmp	r3, #0
 8015390:	d014      	beq.n	80153bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801539a:	2b00      	cmp	r3, #0
 801539c:	d105      	bne.n	80153aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801539e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80153a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d008      	beq.n	80153bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d03a      	beq.n	8015428 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	4798      	blx	r3
    }
    return;
 80153ba:	e035      	b.n	8015428 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80153bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d009      	beq.n	80153dc <HAL_UART_IRQHandler+0x71c>
 80153c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80153cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d003      	beq.n	80153dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f001 f90d 	bl	80165f4 <UART_EndTransmit_IT>
    return;
 80153da:	e026      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80153dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d009      	beq.n	80153fc <HAL_UART_IRQHandler+0x73c>
 80153e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80153ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d003      	beq.n	80153fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f001 fe59 	bl	80170ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80153fa:	e016      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80153fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015404:	2b00      	cmp	r3, #0
 8015406:	d010      	beq.n	801542a <HAL_UART_IRQHandler+0x76a>
 8015408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801540c:	2b00      	cmp	r3, #0
 801540e:	da0c      	bge.n	801542a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f001 fe41 	bl	8017098 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015416:	e008      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
      return;
 8015418:	bf00      	nop
 801541a:	e006      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
    return;
 801541c:	bf00      	nop
 801541e:	e004      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
      return;
 8015420:	bf00      	nop
 8015422:	e002      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
      return;
 8015424:	bf00      	nop
 8015426:	e000      	b.n	801542a <HAL_UART_IRQHandler+0x76a>
    return;
 8015428:	bf00      	nop
  }
}
 801542a:	37e8      	adds	r7, #232	; 0xe8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	effffffe 	.word	0xeffffffe

08015434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015434:	b480      	push	{r7}
 8015436:	b083      	sub	sp, #12
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801543c:	bf00      	nop
 801543e:	370c      	adds	r7, #12
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015450:	bf00      	nop
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	460b      	mov	r3, r1
 8015466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015468:	bf00      	nop
 801546a:	370c      	adds	r7, #12
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr

08015474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015478:	b092      	sub	sp, #72	; 0x48
 801547a:	af00      	add	r7, sp, #0
 801547c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	689a      	ldr	r2, [r3, #8]
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	431a      	orrs	r2, r3
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	695b      	ldr	r3, [r3, #20]
 8015492:	431a      	orrs	r2, r3
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	69db      	ldr	r3, [r3, #28]
 8015498:	4313      	orrs	r3, r2
 801549a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	4bbe      	ldr	r3, [pc, #760]	; (801579c <UART_SetConfig+0x328>)
 80154a4:	4013      	ands	r3, r2
 80154a6:	697a      	ldr	r2, [r7, #20]
 80154a8:	6812      	ldr	r2, [r2, #0]
 80154aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80154ac:	430b      	orrs	r3, r1
 80154ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	68da      	ldr	r2, [r3, #12]
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	430a      	orrs	r2, r1
 80154c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	699b      	ldr	r3, [r3, #24]
 80154ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80154cc:	697b      	ldr	r3, [r7, #20]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	4ab3      	ldr	r2, [pc, #716]	; (80157a0 <UART_SetConfig+0x32c>)
 80154d2:	4293      	cmp	r3, r2
 80154d4:	d004      	beq.n	80154e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	6a1b      	ldr	r3, [r3, #32]
 80154da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80154dc:	4313      	orrs	r3, r2
 80154de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	689a      	ldr	r2, [r3, #8]
 80154e6:	4baf      	ldr	r3, [pc, #700]	; (80157a4 <UART_SetConfig+0x330>)
 80154e8:	4013      	ands	r3, r2
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	6812      	ldr	r2, [r2, #0]
 80154ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80154f0:	430b      	orrs	r3, r1
 80154f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154fa:	f023 010f 	bic.w	r1, r3, #15
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	430a      	orrs	r2, r1
 8015508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	4aa6      	ldr	r2, [pc, #664]	; (80157a8 <UART_SetConfig+0x334>)
 8015510:	4293      	cmp	r3, r2
 8015512:	d177      	bne.n	8015604 <UART_SetConfig+0x190>
 8015514:	4ba5      	ldr	r3, [pc, #660]	; (80157ac <UART_SetConfig+0x338>)
 8015516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801551c:	2b28      	cmp	r3, #40	; 0x28
 801551e:	d86d      	bhi.n	80155fc <UART_SetConfig+0x188>
 8015520:	a201      	add	r2, pc, #4	; (adr r2, 8015528 <UART_SetConfig+0xb4>)
 8015522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015526:	bf00      	nop
 8015528:	080155cd 	.word	0x080155cd
 801552c:	080155fd 	.word	0x080155fd
 8015530:	080155fd 	.word	0x080155fd
 8015534:	080155fd 	.word	0x080155fd
 8015538:	080155fd 	.word	0x080155fd
 801553c:	080155fd 	.word	0x080155fd
 8015540:	080155fd 	.word	0x080155fd
 8015544:	080155fd 	.word	0x080155fd
 8015548:	080155d5 	.word	0x080155d5
 801554c:	080155fd 	.word	0x080155fd
 8015550:	080155fd 	.word	0x080155fd
 8015554:	080155fd 	.word	0x080155fd
 8015558:	080155fd 	.word	0x080155fd
 801555c:	080155fd 	.word	0x080155fd
 8015560:	080155fd 	.word	0x080155fd
 8015564:	080155fd 	.word	0x080155fd
 8015568:	080155dd 	.word	0x080155dd
 801556c:	080155fd 	.word	0x080155fd
 8015570:	080155fd 	.word	0x080155fd
 8015574:	080155fd 	.word	0x080155fd
 8015578:	080155fd 	.word	0x080155fd
 801557c:	080155fd 	.word	0x080155fd
 8015580:	080155fd 	.word	0x080155fd
 8015584:	080155fd 	.word	0x080155fd
 8015588:	080155e5 	.word	0x080155e5
 801558c:	080155fd 	.word	0x080155fd
 8015590:	080155fd 	.word	0x080155fd
 8015594:	080155fd 	.word	0x080155fd
 8015598:	080155fd 	.word	0x080155fd
 801559c:	080155fd 	.word	0x080155fd
 80155a0:	080155fd 	.word	0x080155fd
 80155a4:	080155fd 	.word	0x080155fd
 80155a8:	080155ed 	.word	0x080155ed
 80155ac:	080155fd 	.word	0x080155fd
 80155b0:	080155fd 	.word	0x080155fd
 80155b4:	080155fd 	.word	0x080155fd
 80155b8:	080155fd 	.word	0x080155fd
 80155bc:	080155fd 	.word	0x080155fd
 80155c0:	080155fd 	.word	0x080155fd
 80155c4:	080155fd 	.word	0x080155fd
 80155c8:	080155f5 	.word	0x080155f5
 80155cc:	2301      	movs	r3, #1
 80155ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155d2:	e222      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155d4:	2304      	movs	r3, #4
 80155d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155da:	e21e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155dc:	2308      	movs	r3, #8
 80155de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155e2:	e21a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155e4:	2310      	movs	r3, #16
 80155e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ea:	e216      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155ec:	2320      	movs	r3, #32
 80155ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155f2:	e212      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155f4:	2340      	movs	r3, #64	; 0x40
 80155f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155fa:	e20e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80155fc:	2380      	movs	r3, #128	; 0x80
 80155fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015602:	e20a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	4a69      	ldr	r2, [pc, #420]	; (80157b0 <UART_SetConfig+0x33c>)
 801560a:	4293      	cmp	r3, r2
 801560c:	d130      	bne.n	8015670 <UART_SetConfig+0x1fc>
 801560e:	4b67      	ldr	r3, [pc, #412]	; (80157ac <UART_SetConfig+0x338>)
 8015610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015612:	f003 0307 	and.w	r3, r3, #7
 8015616:	2b05      	cmp	r3, #5
 8015618:	d826      	bhi.n	8015668 <UART_SetConfig+0x1f4>
 801561a:	a201      	add	r2, pc, #4	; (adr r2, 8015620 <UART_SetConfig+0x1ac>)
 801561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015620:	08015639 	.word	0x08015639
 8015624:	08015641 	.word	0x08015641
 8015628:	08015649 	.word	0x08015649
 801562c:	08015651 	.word	0x08015651
 8015630:	08015659 	.word	0x08015659
 8015634:	08015661 	.word	0x08015661
 8015638:	2300      	movs	r3, #0
 801563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801563e:	e1ec      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015640:	2304      	movs	r3, #4
 8015642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015646:	e1e8      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015648:	2308      	movs	r3, #8
 801564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801564e:	e1e4      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015650:	2310      	movs	r3, #16
 8015652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015656:	e1e0      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015658:	2320      	movs	r3, #32
 801565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801565e:	e1dc      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015660:	2340      	movs	r3, #64	; 0x40
 8015662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015666:	e1d8      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015668:	2380      	movs	r3, #128	; 0x80
 801566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801566e:	e1d4      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	4a4f      	ldr	r2, [pc, #316]	; (80157b4 <UART_SetConfig+0x340>)
 8015676:	4293      	cmp	r3, r2
 8015678:	d130      	bne.n	80156dc <UART_SetConfig+0x268>
 801567a:	4b4c      	ldr	r3, [pc, #304]	; (80157ac <UART_SetConfig+0x338>)
 801567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801567e:	f003 0307 	and.w	r3, r3, #7
 8015682:	2b05      	cmp	r3, #5
 8015684:	d826      	bhi.n	80156d4 <UART_SetConfig+0x260>
 8015686:	a201      	add	r2, pc, #4	; (adr r2, 801568c <UART_SetConfig+0x218>)
 8015688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801568c:	080156a5 	.word	0x080156a5
 8015690:	080156ad 	.word	0x080156ad
 8015694:	080156b5 	.word	0x080156b5
 8015698:	080156bd 	.word	0x080156bd
 801569c:	080156c5 	.word	0x080156c5
 80156a0:	080156cd 	.word	0x080156cd
 80156a4:	2300      	movs	r3, #0
 80156a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156aa:	e1b6      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156ac:	2304      	movs	r3, #4
 80156ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156b2:	e1b2      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156b4:	2308      	movs	r3, #8
 80156b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ba:	e1ae      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156bc:	2310      	movs	r3, #16
 80156be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156c2:	e1aa      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156c4:	2320      	movs	r3, #32
 80156c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ca:	e1a6      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156cc:	2340      	movs	r3, #64	; 0x40
 80156ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156d2:	e1a2      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156d4:	2380      	movs	r3, #128	; 0x80
 80156d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156da:	e19e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	4a35      	ldr	r2, [pc, #212]	; (80157b8 <UART_SetConfig+0x344>)
 80156e2:	4293      	cmp	r3, r2
 80156e4:	d130      	bne.n	8015748 <UART_SetConfig+0x2d4>
 80156e6:	4b31      	ldr	r3, [pc, #196]	; (80157ac <UART_SetConfig+0x338>)
 80156e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156ea:	f003 0307 	and.w	r3, r3, #7
 80156ee:	2b05      	cmp	r3, #5
 80156f0:	d826      	bhi.n	8015740 <UART_SetConfig+0x2cc>
 80156f2:	a201      	add	r2, pc, #4	; (adr r2, 80156f8 <UART_SetConfig+0x284>)
 80156f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156f8:	08015711 	.word	0x08015711
 80156fc:	08015719 	.word	0x08015719
 8015700:	08015721 	.word	0x08015721
 8015704:	08015729 	.word	0x08015729
 8015708:	08015731 	.word	0x08015731
 801570c:	08015739 	.word	0x08015739
 8015710:	2300      	movs	r3, #0
 8015712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015716:	e180      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015718:	2304      	movs	r3, #4
 801571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801571e:	e17c      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015720:	2308      	movs	r3, #8
 8015722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015726:	e178      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015728:	2310      	movs	r3, #16
 801572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801572e:	e174      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015730:	2320      	movs	r3, #32
 8015732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015736:	e170      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015738:	2340      	movs	r3, #64	; 0x40
 801573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801573e:	e16c      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015740:	2380      	movs	r3, #128	; 0x80
 8015742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015746:	e168      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	4a1b      	ldr	r2, [pc, #108]	; (80157bc <UART_SetConfig+0x348>)
 801574e:	4293      	cmp	r3, r2
 8015750:	d142      	bne.n	80157d8 <UART_SetConfig+0x364>
 8015752:	4b16      	ldr	r3, [pc, #88]	; (80157ac <UART_SetConfig+0x338>)
 8015754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015756:	f003 0307 	and.w	r3, r3, #7
 801575a:	2b05      	cmp	r3, #5
 801575c:	d838      	bhi.n	80157d0 <UART_SetConfig+0x35c>
 801575e:	a201      	add	r2, pc, #4	; (adr r2, 8015764 <UART_SetConfig+0x2f0>)
 8015760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015764:	0801577d 	.word	0x0801577d
 8015768:	08015785 	.word	0x08015785
 801576c:	0801578d 	.word	0x0801578d
 8015770:	08015795 	.word	0x08015795
 8015774:	080157c1 	.word	0x080157c1
 8015778:	080157c9 	.word	0x080157c9
 801577c:	2300      	movs	r3, #0
 801577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015782:	e14a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015784:	2304      	movs	r3, #4
 8015786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801578a:	e146      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801578c:	2308      	movs	r3, #8
 801578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015792:	e142      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015794:	2310      	movs	r3, #16
 8015796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801579a:	e13e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801579c:	cfff69f3 	.word	0xcfff69f3
 80157a0:	58000c00 	.word	0x58000c00
 80157a4:	11fff4ff 	.word	0x11fff4ff
 80157a8:	40011000 	.word	0x40011000
 80157ac:	58024400 	.word	0x58024400
 80157b0:	40004400 	.word	0x40004400
 80157b4:	40004800 	.word	0x40004800
 80157b8:	40004c00 	.word	0x40004c00
 80157bc:	40005000 	.word	0x40005000
 80157c0:	2320      	movs	r3, #32
 80157c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157c6:	e128      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80157c8:	2340      	movs	r3, #64	; 0x40
 80157ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ce:	e124      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80157d0:	2380      	movs	r3, #128	; 0x80
 80157d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157d6:	e120      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4acb      	ldr	r2, [pc, #812]	; (8015b0c <UART_SetConfig+0x698>)
 80157de:	4293      	cmp	r3, r2
 80157e0:	d176      	bne.n	80158d0 <UART_SetConfig+0x45c>
 80157e2:	4bcb      	ldr	r3, [pc, #812]	; (8015b10 <UART_SetConfig+0x69c>)
 80157e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80157e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80157ea:	2b28      	cmp	r3, #40	; 0x28
 80157ec:	d86c      	bhi.n	80158c8 <UART_SetConfig+0x454>
 80157ee:	a201      	add	r2, pc, #4	; (adr r2, 80157f4 <UART_SetConfig+0x380>)
 80157f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f4:	08015899 	.word	0x08015899
 80157f8:	080158c9 	.word	0x080158c9
 80157fc:	080158c9 	.word	0x080158c9
 8015800:	080158c9 	.word	0x080158c9
 8015804:	080158c9 	.word	0x080158c9
 8015808:	080158c9 	.word	0x080158c9
 801580c:	080158c9 	.word	0x080158c9
 8015810:	080158c9 	.word	0x080158c9
 8015814:	080158a1 	.word	0x080158a1
 8015818:	080158c9 	.word	0x080158c9
 801581c:	080158c9 	.word	0x080158c9
 8015820:	080158c9 	.word	0x080158c9
 8015824:	080158c9 	.word	0x080158c9
 8015828:	080158c9 	.word	0x080158c9
 801582c:	080158c9 	.word	0x080158c9
 8015830:	080158c9 	.word	0x080158c9
 8015834:	080158a9 	.word	0x080158a9
 8015838:	080158c9 	.word	0x080158c9
 801583c:	080158c9 	.word	0x080158c9
 8015840:	080158c9 	.word	0x080158c9
 8015844:	080158c9 	.word	0x080158c9
 8015848:	080158c9 	.word	0x080158c9
 801584c:	080158c9 	.word	0x080158c9
 8015850:	080158c9 	.word	0x080158c9
 8015854:	080158b1 	.word	0x080158b1
 8015858:	080158c9 	.word	0x080158c9
 801585c:	080158c9 	.word	0x080158c9
 8015860:	080158c9 	.word	0x080158c9
 8015864:	080158c9 	.word	0x080158c9
 8015868:	080158c9 	.word	0x080158c9
 801586c:	080158c9 	.word	0x080158c9
 8015870:	080158c9 	.word	0x080158c9
 8015874:	080158b9 	.word	0x080158b9
 8015878:	080158c9 	.word	0x080158c9
 801587c:	080158c9 	.word	0x080158c9
 8015880:	080158c9 	.word	0x080158c9
 8015884:	080158c9 	.word	0x080158c9
 8015888:	080158c9 	.word	0x080158c9
 801588c:	080158c9 	.word	0x080158c9
 8015890:	080158c9 	.word	0x080158c9
 8015894:	080158c1 	.word	0x080158c1
 8015898:	2301      	movs	r3, #1
 801589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801589e:	e0bc      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158a0:	2304      	movs	r3, #4
 80158a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158a6:	e0b8      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158a8:	2308      	movs	r3, #8
 80158aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158ae:	e0b4      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158b0:	2310      	movs	r3, #16
 80158b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158b6:	e0b0      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158b8:	2320      	movs	r3, #32
 80158ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158be:	e0ac      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158c0:	2340      	movs	r3, #64	; 0x40
 80158c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158c6:	e0a8      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158c8:	2380      	movs	r3, #128	; 0x80
 80158ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80158ce:	e0a4      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	4a8f      	ldr	r2, [pc, #572]	; (8015b14 <UART_SetConfig+0x6a0>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d130      	bne.n	801593c <UART_SetConfig+0x4c8>
 80158da:	4b8d      	ldr	r3, [pc, #564]	; (8015b10 <UART_SetConfig+0x69c>)
 80158dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80158de:	f003 0307 	and.w	r3, r3, #7
 80158e2:	2b05      	cmp	r3, #5
 80158e4:	d826      	bhi.n	8015934 <UART_SetConfig+0x4c0>
 80158e6:	a201      	add	r2, pc, #4	; (adr r2, 80158ec <UART_SetConfig+0x478>)
 80158e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ec:	08015905 	.word	0x08015905
 80158f0:	0801590d 	.word	0x0801590d
 80158f4:	08015915 	.word	0x08015915
 80158f8:	0801591d 	.word	0x0801591d
 80158fc:	08015925 	.word	0x08015925
 8015900:	0801592d 	.word	0x0801592d
 8015904:	2300      	movs	r3, #0
 8015906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801590a:	e086      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801590c:	2304      	movs	r3, #4
 801590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015912:	e082      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015914:	2308      	movs	r3, #8
 8015916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801591a:	e07e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801591c:	2310      	movs	r3, #16
 801591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015922:	e07a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015924:	2320      	movs	r3, #32
 8015926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801592a:	e076      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801592c:	2340      	movs	r3, #64	; 0x40
 801592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015932:	e072      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015934:	2380      	movs	r3, #128	; 0x80
 8015936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801593a:	e06e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	4a75      	ldr	r2, [pc, #468]	; (8015b18 <UART_SetConfig+0x6a4>)
 8015942:	4293      	cmp	r3, r2
 8015944:	d130      	bne.n	80159a8 <UART_SetConfig+0x534>
 8015946:	4b72      	ldr	r3, [pc, #456]	; (8015b10 <UART_SetConfig+0x69c>)
 8015948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801594a:	f003 0307 	and.w	r3, r3, #7
 801594e:	2b05      	cmp	r3, #5
 8015950:	d826      	bhi.n	80159a0 <UART_SetConfig+0x52c>
 8015952:	a201      	add	r2, pc, #4	; (adr r2, 8015958 <UART_SetConfig+0x4e4>)
 8015954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015958:	08015971 	.word	0x08015971
 801595c:	08015979 	.word	0x08015979
 8015960:	08015981 	.word	0x08015981
 8015964:	08015989 	.word	0x08015989
 8015968:	08015991 	.word	0x08015991
 801596c:	08015999 	.word	0x08015999
 8015970:	2300      	movs	r3, #0
 8015972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015976:	e050      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015978:	2304      	movs	r3, #4
 801597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801597e:	e04c      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015980:	2308      	movs	r3, #8
 8015982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015986:	e048      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015988:	2310      	movs	r3, #16
 801598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801598e:	e044      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015990:	2320      	movs	r3, #32
 8015992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015996:	e040      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015998:	2340      	movs	r3, #64	; 0x40
 801599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801599e:	e03c      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159a0:	2380      	movs	r3, #128	; 0x80
 80159a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159a6:	e038      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4a5b      	ldr	r2, [pc, #364]	; (8015b1c <UART_SetConfig+0x6a8>)
 80159ae:	4293      	cmp	r3, r2
 80159b0:	d130      	bne.n	8015a14 <UART_SetConfig+0x5a0>
 80159b2:	4b57      	ldr	r3, [pc, #348]	; (8015b10 <UART_SetConfig+0x69c>)
 80159b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159b6:	f003 0307 	and.w	r3, r3, #7
 80159ba:	2b05      	cmp	r3, #5
 80159bc:	d826      	bhi.n	8015a0c <UART_SetConfig+0x598>
 80159be:	a201      	add	r2, pc, #4	; (adr r2, 80159c4 <UART_SetConfig+0x550>)
 80159c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159c4:	080159dd 	.word	0x080159dd
 80159c8:	080159e5 	.word	0x080159e5
 80159cc:	080159ed 	.word	0x080159ed
 80159d0:	080159f5 	.word	0x080159f5
 80159d4:	080159fd 	.word	0x080159fd
 80159d8:	08015a05 	.word	0x08015a05
 80159dc:	2302      	movs	r3, #2
 80159de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159e2:	e01a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159e4:	2304      	movs	r3, #4
 80159e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159ea:	e016      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159ec:	2308      	movs	r3, #8
 80159ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159f2:	e012      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159f4:	2310      	movs	r3, #16
 80159f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159fa:	e00e      	b.n	8015a1a <UART_SetConfig+0x5a6>
 80159fc:	2320      	movs	r3, #32
 80159fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a02:	e00a      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015a04:	2340      	movs	r3, #64	; 0x40
 8015a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a0a:	e006      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015a0c:	2380      	movs	r3, #128	; 0x80
 8015a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a12:	e002      	b.n	8015a1a <UART_SetConfig+0x5a6>
 8015a14:	2380      	movs	r3, #128	; 0x80
 8015a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4a3f      	ldr	r2, [pc, #252]	; (8015b1c <UART_SetConfig+0x6a8>)
 8015a20:	4293      	cmp	r3, r2
 8015a22:	f040 80f8 	bne.w	8015c16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015a26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a2a:	2b20      	cmp	r3, #32
 8015a2c:	dc46      	bgt.n	8015abc <UART_SetConfig+0x648>
 8015a2e:	2b02      	cmp	r3, #2
 8015a30:	f2c0 8082 	blt.w	8015b38 <UART_SetConfig+0x6c4>
 8015a34:	3b02      	subs	r3, #2
 8015a36:	2b1e      	cmp	r3, #30
 8015a38:	d87e      	bhi.n	8015b38 <UART_SetConfig+0x6c4>
 8015a3a:	a201      	add	r2, pc, #4	; (adr r2, 8015a40 <UART_SetConfig+0x5cc>)
 8015a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a40:	08015ac3 	.word	0x08015ac3
 8015a44:	08015b39 	.word	0x08015b39
 8015a48:	08015acb 	.word	0x08015acb
 8015a4c:	08015b39 	.word	0x08015b39
 8015a50:	08015b39 	.word	0x08015b39
 8015a54:	08015b39 	.word	0x08015b39
 8015a58:	08015adb 	.word	0x08015adb
 8015a5c:	08015b39 	.word	0x08015b39
 8015a60:	08015b39 	.word	0x08015b39
 8015a64:	08015b39 	.word	0x08015b39
 8015a68:	08015b39 	.word	0x08015b39
 8015a6c:	08015b39 	.word	0x08015b39
 8015a70:	08015b39 	.word	0x08015b39
 8015a74:	08015b39 	.word	0x08015b39
 8015a78:	08015aeb 	.word	0x08015aeb
 8015a7c:	08015b39 	.word	0x08015b39
 8015a80:	08015b39 	.word	0x08015b39
 8015a84:	08015b39 	.word	0x08015b39
 8015a88:	08015b39 	.word	0x08015b39
 8015a8c:	08015b39 	.word	0x08015b39
 8015a90:	08015b39 	.word	0x08015b39
 8015a94:	08015b39 	.word	0x08015b39
 8015a98:	08015b39 	.word	0x08015b39
 8015a9c:	08015b39 	.word	0x08015b39
 8015aa0:	08015b39 	.word	0x08015b39
 8015aa4:	08015b39 	.word	0x08015b39
 8015aa8:	08015b39 	.word	0x08015b39
 8015aac:	08015b39 	.word	0x08015b39
 8015ab0:	08015b39 	.word	0x08015b39
 8015ab4:	08015b39 	.word	0x08015b39
 8015ab8:	08015b2b 	.word	0x08015b2b
 8015abc:	2b40      	cmp	r3, #64	; 0x40
 8015abe:	d037      	beq.n	8015b30 <UART_SetConfig+0x6bc>
 8015ac0:	e03a      	b.n	8015b38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015ac2:	f7fb fc17 	bl	80112f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8015ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015ac8:	e03c      	b.n	8015b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fb fc26 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ad8:	e034      	b.n	8015b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015ada:	f107 0318 	add.w	r3, r7, #24
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7fb fd72 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015ae4:	69fb      	ldr	r3, [r7, #28]
 8015ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ae8:	e02c      	b.n	8015b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015aea:	4b09      	ldr	r3, [pc, #36]	; (8015b10 <UART_SetConfig+0x69c>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	f003 0320 	and.w	r3, r3, #32
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d016      	beq.n	8015b24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015af6:	4b06      	ldr	r3, [pc, #24]	; (8015b10 <UART_SetConfig+0x69c>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	08db      	lsrs	r3, r3, #3
 8015afc:	f003 0303 	and.w	r3, r3, #3
 8015b00:	4a07      	ldr	r2, [pc, #28]	; (8015b20 <UART_SetConfig+0x6ac>)
 8015b02:	fa22 f303 	lsr.w	r3, r2, r3
 8015b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015b08:	e01c      	b.n	8015b44 <UART_SetConfig+0x6d0>
 8015b0a:	bf00      	nop
 8015b0c:	40011400 	.word	0x40011400
 8015b10:	58024400 	.word	0x58024400
 8015b14:	40007800 	.word	0x40007800
 8015b18:	40007c00 	.word	0x40007c00
 8015b1c:	58000c00 	.word	0x58000c00
 8015b20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015b24:	4b9d      	ldr	r3, [pc, #628]	; (8015d9c <UART_SetConfig+0x928>)
 8015b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b28:	e00c      	b.n	8015b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015b2a:	4b9d      	ldr	r3, [pc, #628]	; (8015da0 <UART_SetConfig+0x92c>)
 8015b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b2e:	e009      	b.n	8015b44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b36:	e005      	b.n	8015b44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015b42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	f000 81de 	beq.w	8015f08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b50:	4a94      	ldr	r2, [pc, #592]	; (8015da4 <UART_SetConfig+0x930>)
 8015b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b56:	461a      	mov	r2, r3
 8015b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	685a      	ldr	r2, [r3, #4]
 8015b64:	4613      	mov	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d305      	bcc.n	8015b7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d903      	bls.n	8015b84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015b82:	e1c1      	b.n	8015f08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b86:	2200      	movs	r2, #0
 8015b88:	60bb      	str	r3, [r7, #8]
 8015b8a:	60fa      	str	r2, [r7, #12]
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b90:	4a84      	ldr	r2, [pc, #528]	; (8015da4 <UART_SetConfig+0x930>)
 8015b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	2200      	movs	r2, #0
 8015b9a:	603b      	str	r3, [r7, #0]
 8015b9c:	607a      	str	r2, [r7, #4]
 8015b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ba6:	f7ea fb9b 	bl	80002e0 <__aeabi_uldivmod>
 8015baa:	4602      	mov	r2, r0
 8015bac:	460b      	mov	r3, r1
 8015bae:	4610      	mov	r0, r2
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	f04f 0200 	mov.w	r2, #0
 8015bb6:	f04f 0300 	mov.w	r3, #0
 8015bba:	020b      	lsls	r3, r1, #8
 8015bbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015bc0:	0202      	lsls	r2, r0, #8
 8015bc2:	6979      	ldr	r1, [r7, #20]
 8015bc4:	6849      	ldr	r1, [r1, #4]
 8015bc6:	0849      	lsrs	r1, r1, #1
 8015bc8:	2000      	movs	r0, #0
 8015bca:	460c      	mov	r4, r1
 8015bcc:	4605      	mov	r5, r0
 8015bce:	eb12 0804 	adds.w	r8, r2, r4
 8015bd2:	eb43 0905 	adc.w	r9, r3, r5
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	469a      	mov	sl, r3
 8015bde:	4693      	mov	fp, r2
 8015be0:	4652      	mov	r2, sl
 8015be2:	465b      	mov	r3, fp
 8015be4:	4640      	mov	r0, r8
 8015be6:	4649      	mov	r1, r9
 8015be8:	f7ea fb7a 	bl	80002e0 <__aeabi_uldivmod>
 8015bec:	4602      	mov	r2, r0
 8015bee:	460b      	mov	r3, r1
 8015bf0:	4613      	mov	r3, r2
 8015bf2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015bfa:	d308      	bcc.n	8015c0e <UART_SetConfig+0x79a>
 8015bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c02:	d204      	bcs.n	8015c0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c0a:	60da      	str	r2, [r3, #12]
 8015c0c:	e17c      	b.n	8015f08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015c0e:	2301      	movs	r3, #1
 8015c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015c14:	e178      	b.n	8015f08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	69db      	ldr	r3, [r3, #28]
 8015c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015c1e:	f040 80c5 	bne.w	8015dac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015c22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015c26:	2b20      	cmp	r3, #32
 8015c28:	dc48      	bgt.n	8015cbc <UART_SetConfig+0x848>
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	db7b      	blt.n	8015d26 <UART_SetConfig+0x8b2>
 8015c2e:	2b20      	cmp	r3, #32
 8015c30:	d879      	bhi.n	8015d26 <UART_SetConfig+0x8b2>
 8015c32:	a201      	add	r2, pc, #4	; (adr r2, 8015c38 <UART_SetConfig+0x7c4>)
 8015c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c38:	08015cc3 	.word	0x08015cc3
 8015c3c:	08015ccb 	.word	0x08015ccb
 8015c40:	08015d27 	.word	0x08015d27
 8015c44:	08015d27 	.word	0x08015d27
 8015c48:	08015cd3 	.word	0x08015cd3
 8015c4c:	08015d27 	.word	0x08015d27
 8015c50:	08015d27 	.word	0x08015d27
 8015c54:	08015d27 	.word	0x08015d27
 8015c58:	08015ce3 	.word	0x08015ce3
 8015c5c:	08015d27 	.word	0x08015d27
 8015c60:	08015d27 	.word	0x08015d27
 8015c64:	08015d27 	.word	0x08015d27
 8015c68:	08015d27 	.word	0x08015d27
 8015c6c:	08015d27 	.word	0x08015d27
 8015c70:	08015d27 	.word	0x08015d27
 8015c74:	08015d27 	.word	0x08015d27
 8015c78:	08015cf3 	.word	0x08015cf3
 8015c7c:	08015d27 	.word	0x08015d27
 8015c80:	08015d27 	.word	0x08015d27
 8015c84:	08015d27 	.word	0x08015d27
 8015c88:	08015d27 	.word	0x08015d27
 8015c8c:	08015d27 	.word	0x08015d27
 8015c90:	08015d27 	.word	0x08015d27
 8015c94:	08015d27 	.word	0x08015d27
 8015c98:	08015d27 	.word	0x08015d27
 8015c9c:	08015d27 	.word	0x08015d27
 8015ca0:	08015d27 	.word	0x08015d27
 8015ca4:	08015d27 	.word	0x08015d27
 8015ca8:	08015d27 	.word	0x08015d27
 8015cac:	08015d27 	.word	0x08015d27
 8015cb0:	08015d27 	.word	0x08015d27
 8015cb4:	08015d27 	.word	0x08015d27
 8015cb8:	08015d19 	.word	0x08015d19
 8015cbc:	2b40      	cmp	r3, #64	; 0x40
 8015cbe:	d02e      	beq.n	8015d1e <UART_SetConfig+0x8aa>
 8015cc0:	e031      	b.n	8015d26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015cc2:	f7f9 fb1f 	bl	800f304 <HAL_RCC_GetPCLK1Freq>
 8015cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015cc8:	e033      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015cca:	f7f9 fb31 	bl	800f330 <HAL_RCC_GetPCLK2Freq>
 8015cce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015cd0:	e02f      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fb fb22 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ce0:	e027      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015ce2:	f107 0318 	add.w	r3, r7, #24
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fb fc6e 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015cec:	69fb      	ldr	r3, [r7, #28]
 8015cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cf0:	e01f      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015cf2:	4b2d      	ldr	r3, [pc, #180]	; (8015da8 <UART_SetConfig+0x934>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f003 0320 	and.w	r3, r3, #32
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d009      	beq.n	8015d12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015cfe:	4b2a      	ldr	r3, [pc, #168]	; (8015da8 <UART_SetConfig+0x934>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	08db      	lsrs	r3, r3, #3
 8015d04:	f003 0303 	and.w	r3, r3, #3
 8015d08:	4a24      	ldr	r2, [pc, #144]	; (8015d9c <UART_SetConfig+0x928>)
 8015d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8015d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015d10:	e00f      	b.n	8015d32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015d12:	4b22      	ldr	r3, [pc, #136]	; (8015d9c <UART_SetConfig+0x928>)
 8015d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015d16:	e00c      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015d18:	4b21      	ldr	r3, [pc, #132]	; (8015da0 <UART_SetConfig+0x92c>)
 8015d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015d1c:	e009      	b.n	8015d32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015d24:	e005      	b.n	8015d32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015d26:	2300      	movs	r3, #0
 8015d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	f000 80e7 	beq.w	8015f08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d3e:	4a19      	ldr	r2, [pc, #100]	; (8015da4 <UART_SetConfig+0x930>)
 8015d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d44:	461a      	mov	r2, r3
 8015d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d4c:	005a      	lsls	r2, r3, #1
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	085b      	lsrs	r3, r3, #1
 8015d54:	441a      	add	r2, r3
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d62:	2b0f      	cmp	r3, #15
 8015d64:	d916      	bls.n	8015d94 <UART_SetConfig+0x920>
 8015d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d6c:	d212      	bcs.n	8015d94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	f023 030f 	bic.w	r3, r3, #15
 8015d76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7a:	085b      	lsrs	r3, r3, #1
 8015d7c:	b29b      	uxth	r3, r3
 8015d7e:	f003 0307 	and.w	r3, r3, #7
 8015d82:	b29a      	uxth	r2, r3
 8015d84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d86:	4313      	orrs	r3, r2
 8015d88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015d90:	60da      	str	r2, [r3, #12]
 8015d92:	e0b9      	b.n	8015f08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015d94:	2301      	movs	r3, #1
 8015d96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015d9a:	e0b5      	b.n	8015f08 <UART_SetConfig+0xa94>
 8015d9c:	03d09000 	.word	0x03d09000
 8015da0:	003d0900 	.word	0x003d0900
 8015da4:	0801b91c 	.word	0x0801b91c
 8015da8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015dac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015db0:	2b20      	cmp	r3, #32
 8015db2:	dc49      	bgt.n	8015e48 <UART_SetConfig+0x9d4>
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	db7c      	blt.n	8015eb2 <UART_SetConfig+0xa3e>
 8015db8:	2b20      	cmp	r3, #32
 8015dba:	d87a      	bhi.n	8015eb2 <UART_SetConfig+0xa3e>
 8015dbc:	a201      	add	r2, pc, #4	; (adr r2, 8015dc4 <UART_SetConfig+0x950>)
 8015dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc2:	bf00      	nop
 8015dc4:	08015e4f 	.word	0x08015e4f
 8015dc8:	08015e57 	.word	0x08015e57
 8015dcc:	08015eb3 	.word	0x08015eb3
 8015dd0:	08015eb3 	.word	0x08015eb3
 8015dd4:	08015e5f 	.word	0x08015e5f
 8015dd8:	08015eb3 	.word	0x08015eb3
 8015ddc:	08015eb3 	.word	0x08015eb3
 8015de0:	08015eb3 	.word	0x08015eb3
 8015de4:	08015e6f 	.word	0x08015e6f
 8015de8:	08015eb3 	.word	0x08015eb3
 8015dec:	08015eb3 	.word	0x08015eb3
 8015df0:	08015eb3 	.word	0x08015eb3
 8015df4:	08015eb3 	.word	0x08015eb3
 8015df8:	08015eb3 	.word	0x08015eb3
 8015dfc:	08015eb3 	.word	0x08015eb3
 8015e00:	08015eb3 	.word	0x08015eb3
 8015e04:	08015e7f 	.word	0x08015e7f
 8015e08:	08015eb3 	.word	0x08015eb3
 8015e0c:	08015eb3 	.word	0x08015eb3
 8015e10:	08015eb3 	.word	0x08015eb3
 8015e14:	08015eb3 	.word	0x08015eb3
 8015e18:	08015eb3 	.word	0x08015eb3
 8015e1c:	08015eb3 	.word	0x08015eb3
 8015e20:	08015eb3 	.word	0x08015eb3
 8015e24:	08015eb3 	.word	0x08015eb3
 8015e28:	08015eb3 	.word	0x08015eb3
 8015e2c:	08015eb3 	.word	0x08015eb3
 8015e30:	08015eb3 	.word	0x08015eb3
 8015e34:	08015eb3 	.word	0x08015eb3
 8015e38:	08015eb3 	.word	0x08015eb3
 8015e3c:	08015eb3 	.word	0x08015eb3
 8015e40:	08015eb3 	.word	0x08015eb3
 8015e44:	08015ea5 	.word	0x08015ea5
 8015e48:	2b40      	cmp	r3, #64	; 0x40
 8015e4a:	d02e      	beq.n	8015eaa <UART_SetConfig+0xa36>
 8015e4c:	e031      	b.n	8015eb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015e4e:	f7f9 fa59 	bl	800f304 <HAL_RCC_GetPCLK1Freq>
 8015e52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015e54:	e033      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015e56:	f7f9 fa6b 	bl	800f330 <HAL_RCC_GetPCLK2Freq>
 8015e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015e5c:	e02f      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fb fa5c 	bl	8011320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015e6c:	e027      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015e6e:	f107 0318 	add.w	r3, r7, #24
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fb fba8 	bl	80115c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015e7c:	e01f      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015e7e:	4b2d      	ldr	r3, [pc, #180]	; (8015f34 <UART_SetConfig+0xac0>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	f003 0320 	and.w	r3, r3, #32
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d009      	beq.n	8015e9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015e8a:	4b2a      	ldr	r3, [pc, #168]	; (8015f34 <UART_SetConfig+0xac0>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	08db      	lsrs	r3, r3, #3
 8015e90:	f003 0303 	and.w	r3, r3, #3
 8015e94:	4a28      	ldr	r2, [pc, #160]	; (8015f38 <UART_SetConfig+0xac4>)
 8015e96:	fa22 f303 	lsr.w	r3, r2, r3
 8015e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015e9c:	e00f      	b.n	8015ebe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015e9e:	4b26      	ldr	r3, [pc, #152]	; (8015f38 <UART_SetConfig+0xac4>)
 8015ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ea2:	e00c      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015ea4:	4b25      	ldr	r3, [pc, #148]	; (8015f3c <UART_SetConfig+0xac8>)
 8015ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ea8:	e009      	b.n	8015ebe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015eb0:	e005      	b.n	8015ebe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015ebc:	bf00      	nop
    }

    if (pclk != 0U)
 8015ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d021      	beq.n	8015f08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec8:	4a1d      	ldr	r2, [pc, #116]	; (8015f40 <UART_SetConfig+0xacc>)
 8015eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ece:	461a      	mov	r2, r3
 8015ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	085b      	lsrs	r3, r3, #1
 8015edc:	441a      	add	r2, r3
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ee6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eea:	2b0f      	cmp	r3, #15
 8015eec:	d909      	bls.n	8015f02 <UART_SetConfig+0xa8e>
 8015eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ef4:	d205      	bcs.n	8015f02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	60da      	str	r2, [r3, #12]
 8015f00:	e002      	b.n	8015f08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015f02:	2301      	movs	r3, #1
 8015f04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	2201      	movs	r2, #1
 8015f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015f1e:	697b      	ldr	r3, [r7, #20]
 8015f20:	2200      	movs	r2, #0
 8015f22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015f24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3748      	adds	r7, #72	; 0x48
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015f32:	bf00      	nop
 8015f34:	58024400 	.word	0x58024400
 8015f38:	03d09000 	.word	0x03d09000
 8015f3c:	003d0900 	.word	0x003d0900
 8015f40:	0801b91c 	.word	0x0801b91c

08015f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015f44:	b480      	push	{r7}
 8015f46:	b083      	sub	sp, #12
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f50:	f003 0308 	and.w	r3, r3, #8
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d00a      	beq.n	8015f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	430a      	orrs	r2, r1
 8015f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f72:	f003 0301 	and.w	r3, r3, #1
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d00a      	beq.n	8015f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	430a      	orrs	r2, r1
 8015f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f94:	f003 0302 	and.w	r3, r3, #2
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00a      	beq.n	8015fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	430a      	orrs	r2, r1
 8015fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fb6:	f003 0304 	and.w	r3, r3, #4
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00a      	beq.n	8015fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	430a      	orrs	r2, r1
 8015fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fd8:	f003 0310 	and.w	r3, r3, #16
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d00a      	beq.n	8015ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	689b      	ldr	r3, [r3, #8]
 8015fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	430a      	orrs	r2, r1
 8015ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ffa:	f003 0320 	and.w	r3, r3, #32
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d00a      	beq.n	8016018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	689b      	ldr	r3, [r3, #8]
 8016008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	430a      	orrs	r2, r1
 8016016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016020:	2b00      	cmp	r3, #0
 8016022:	d01a      	beq.n	801605a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	430a      	orrs	r2, r1
 8016038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801603e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016042:	d10a      	bne.n	801605a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	430a      	orrs	r2, r1
 8016058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016062:	2b00      	cmp	r3, #0
 8016064:	d00a      	beq.n	801607c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	430a      	orrs	r2, r1
 801607a:	605a      	str	r2, [r3, #4]
  }
}
 801607c:	bf00      	nop
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b098      	sub	sp, #96	; 0x60
 801608c:	af02      	add	r7, sp, #8
 801608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2200      	movs	r2, #0
 8016094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016098:	f7f0 f956 	bl	8006348 <HAL_GetTick>
 801609c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	f003 0308 	and.w	r3, r3, #8
 80160a8:	2b08      	cmp	r3, #8
 80160aa:	d12f      	bne.n	801610c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80160ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80160b0:	9300      	str	r3, [sp, #0]
 80160b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160b4:	2200      	movs	r2, #0
 80160b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 f88e 	bl	80161dc <UART_WaitOnFlagUntilTimeout>
 80160c0:	4603      	mov	r3, r0
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d022      	beq.n	801610c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ce:	e853 3f00 	ldrex	r3, [r3]
 80160d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80160d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80160da:	653b      	str	r3, [r7, #80]	; 0x50
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	461a      	mov	r2, r3
 80160e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160e4:	647b      	str	r3, [r7, #68]	; 0x44
 80160e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80160ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80160ec:	e841 2300 	strex	r3, r2, [r1]
 80160f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80160f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d1e6      	bne.n	80160c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2220      	movs	r2, #32
 80160fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2200      	movs	r2, #0
 8016104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016108:	2303      	movs	r3, #3
 801610a:	e063      	b.n	80161d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f003 0304 	and.w	r3, r3, #4
 8016116:	2b04      	cmp	r3, #4
 8016118:	d149      	bne.n	80161ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801611a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016122:	2200      	movs	r2, #0
 8016124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f000 f857 	bl	80161dc <UART_WaitOnFlagUntilTimeout>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	d03c      	beq.n	80161ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	e853 3f00 	ldrex	r3, [r3]
 8016140:	623b      	str	r3, [r7, #32]
   return(result);
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016148:	64fb      	str	r3, [r7, #76]	; 0x4c
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	461a      	mov	r2, r3
 8016150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016152:	633b      	str	r3, [r7, #48]	; 0x30
 8016154:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801615a:	e841 2300 	strex	r3, r2, [r1]
 801615e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016162:	2b00      	cmp	r3, #0
 8016164:	d1e6      	bne.n	8016134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	3308      	adds	r3, #8
 801616c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	e853 3f00 	ldrex	r3, [r3]
 8016174:	60fb      	str	r3, [r7, #12]
   return(result);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f023 0301 	bic.w	r3, r3, #1
 801617c:	64bb      	str	r3, [r7, #72]	; 0x48
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	3308      	adds	r3, #8
 8016184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016186:	61fa      	str	r2, [r7, #28]
 8016188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801618a:	69b9      	ldr	r1, [r7, #24]
 801618c:	69fa      	ldr	r2, [r7, #28]
 801618e:	e841 2300 	strex	r3, r2, [r1]
 8016192:	617b      	str	r3, [r7, #20]
   return(result);
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d1e5      	bne.n	8016166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2220      	movs	r2, #32
 801619e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2200      	movs	r2, #0
 80161a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80161aa:	2303      	movs	r3, #3
 80161ac:	e012      	b.n	80161d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2220      	movs	r2, #32
 80161b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2220      	movs	r2, #32
 80161ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2200      	movs	r2, #0
 80161c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2200      	movs	r2, #0
 80161c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3758      	adds	r7, #88	; 0x58
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	603b      	str	r3, [r7, #0]
 80161e8:	4613      	mov	r3, r2
 80161ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80161ec:	e04f      	b.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161f4:	d04b      	beq.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161f6:	f7f0 f8a7 	bl	8006348 <HAL_GetTick>
 80161fa:	4602      	mov	r2, r0
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	1ad3      	subs	r3, r2, r3
 8016200:	69ba      	ldr	r2, [r7, #24]
 8016202:	429a      	cmp	r2, r3
 8016204:	d302      	bcc.n	801620c <UART_WaitOnFlagUntilTimeout+0x30>
 8016206:	69bb      	ldr	r3, [r7, #24]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d101      	bne.n	8016210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801620c:	2303      	movs	r3, #3
 801620e:	e04e      	b.n	80162ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	f003 0304 	and.w	r3, r3, #4
 801621a:	2b00      	cmp	r3, #0
 801621c:	d037      	beq.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	2b80      	cmp	r3, #128	; 0x80
 8016222:	d034      	beq.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	2b40      	cmp	r3, #64	; 0x40
 8016228:	d031      	beq.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	69db      	ldr	r3, [r3, #28]
 8016230:	f003 0308 	and.w	r3, r3, #8
 8016234:	2b08      	cmp	r3, #8
 8016236:	d110      	bne.n	801625a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	2208      	movs	r2, #8
 801623e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016240:	68f8      	ldr	r0, [r7, #12]
 8016242:	f000 f95b 	bl	80164fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2208      	movs	r2, #8
 801624a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2200      	movs	r2, #0
 8016252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8016256:	2301      	movs	r3, #1
 8016258:	e029      	b.n	80162ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	69db      	ldr	r3, [r3, #28]
 8016260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016268:	d111      	bne.n	801628e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f000 f941 	bl	80164fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2220      	movs	r2, #32
 801627e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2200      	movs	r2, #0
 8016286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801628a:	2303      	movs	r3, #3
 801628c:	e00f      	b.n	80162ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	69da      	ldr	r2, [r3, #28]
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	4013      	ands	r3, r2
 8016298:	68ba      	ldr	r2, [r7, #8]
 801629a:	429a      	cmp	r2, r3
 801629c:	bf0c      	ite	eq
 801629e:	2301      	moveq	r3, #1
 80162a0:	2300      	movne	r3, #0
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	461a      	mov	r2, r3
 80162a6:	79fb      	ldrb	r3, [r7, #7]
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d0a0      	beq.n	80161ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80162ac:	2300      	movs	r3, #0
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
	...

080162b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80162b8:	b480      	push	{r7}
 80162ba:	b0a3      	sub	sp, #140	; 0x8c
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	4613      	mov	r3, r2
 80162c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	68ba      	ldr	r2, [r7, #8]
 80162ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	88fa      	ldrh	r2, [r7, #6]
 80162d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	88fa      	ldrh	r2, [r7, #6]
 80162d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2200      	movs	r2, #0
 80162e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	689b      	ldr	r3, [r3, #8]
 80162e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80162ea:	d10e      	bne.n	801630a <UART_Start_Receive_IT+0x52>
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	691b      	ldr	r3, [r3, #16]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d105      	bne.n	8016300 <UART_Start_Receive_IT+0x48>
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80162fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80162fe:	e02d      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	22ff      	movs	r2, #255	; 0xff
 8016304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016308:	e028      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	689b      	ldr	r3, [r3, #8]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d10d      	bne.n	801632e <UART_Start_Receive_IT+0x76>
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	691b      	ldr	r3, [r3, #16]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d104      	bne.n	8016324 <UART_Start_Receive_IT+0x6c>
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	22ff      	movs	r2, #255	; 0xff
 801631e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016322:	e01b      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	227f      	movs	r2, #127	; 0x7f
 8016328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801632c:	e016      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016336:	d10d      	bne.n	8016354 <UART_Start_Receive_IT+0x9c>
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	691b      	ldr	r3, [r3, #16]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d104      	bne.n	801634a <UART_Start_Receive_IT+0x92>
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	227f      	movs	r2, #127	; 0x7f
 8016344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016348:	e008      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	223f      	movs	r2, #63	; 0x3f
 801634e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016352:	e003      	b.n	801635c <UART_Start_Receive_IT+0xa4>
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	2200      	movs	r2, #0
 8016358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	2200      	movs	r2, #0
 8016360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2222      	movs	r2, #34	; 0x22
 8016368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	3308      	adds	r3, #8
 8016372:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016376:	e853 3f00 	ldrex	r3, [r3]
 801637a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801637c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801637e:	f043 0301 	orr.w	r3, r3, #1
 8016382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3308      	adds	r3, #8
 801638c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016390:	673a      	str	r2, [r7, #112]	; 0x70
 8016392:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016394:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016396:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016398:	e841 2300 	strex	r3, r2, [r1]
 801639c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801639e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d1e3      	bne.n	801636c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80163ac:	d14f      	bne.n	801644e <UART_Start_Receive_IT+0x196>
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80163b4:	88fa      	ldrh	r2, [r7, #6]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d349      	bcc.n	801644e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	689b      	ldr	r3, [r3, #8]
 80163be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80163c2:	d107      	bne.n	80163d4 <UART_Start_Receive_IT+0x11c>
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	691b      	ldr	r3, [r3, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d103      	bne.n	80163d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	4a47      	ldr	r2, [pc, #284]	; (80164ec <UART_Start_Receive_IT+0x234>)
 80163d0:	675a      	str	r2, [r3, #116]	; 0x74
 80163d2:	e002      	b.n	80163da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	4a46      	ldr	r2, [pc, #280]	; (80164f0 <UART_Start_Receive_IT+0x238>)
 80163d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	691b      	ldr	r3, [r3, #16]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d01a      	beq.n	8016418 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163ea:	e853 3f00 	ldrex	r3, [r3]
 80163ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80163f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80163f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	461a      	mov	r2, r3
 8016400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016406:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016408:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801640a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801640c:	e841 2300 	strex	r3, r2, [r1]
 8016410:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1e4      	bne.n	80163e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	3308      	adds	r3, #8
 801641e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016422:	e853 3f00 	ldrex	r3, [r3]
 8016426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801642a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801642e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	3308      	adds	r3, #8
 8016436:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016438:	64ba      	str	r2, [r7, #72]	; 0x48
 801643a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801643c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801643e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016440:	e841 2300 	strex	r3, r2, [r1]
 8016444:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016448:	2b00      	cmp	r3, #0
 801644a:	d1e5      	bne.n	8016418 <UART_Start_Receive_IT+0x160>
 801644c:	e046      	b.n	80164dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	689b      	ldr	r3, [r3, #8]
 8016452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016456:	d107      	bne.n	8016468 <UART_Start_Receive_IT+0x1b0>
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	691b      	ldr	r3, [r3, #16]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d103      	bne.n	8016468 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	4a24      	ldr	r2, [pc, #144]	; (80164f4 <UART_Start_Receive_IT+0x23c>)
 8016464:	675a      	str	r2, [r3, #116]	; 0x74
 8016466:	e002      	b.n	801646e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	4a23      	ldr	r2, [pc, #140]	; (80164f8 <UART_Start_Receive_IT+0x240>)
 801646c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	691b      	ldr	r3, [r3, #16]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d019      	beq.n	80164aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647e:	e853 3f00 	ldrex	r3, [r3]
 8016482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016486:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801648a:	677b      	str	r3, [r7, #116]	; 0x74
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	461a      	mov	r2, r3
 8016492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016494:	637b      	str	r3, [r7, #52]	; 0x34
 8016496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801649c:	e841 2300 	strex	r3, r2, [r1]
 80164a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80164a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1e6      	bne.n	8016476 <UART_Start_Receive_IT+0x1be>
 80164a8:	e018      	b.n	80164dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	e853 3f00 	ldrex	r3, [r3]
 80164b6:	613b      	str	r3, [r7, #16]
   return(result);
 80164b8:	693b      	ldr	r3, [r7, #16]
 80164ba:	f043 0320 	orr.w	r3, r3, #32
 80164be:	67bb      	str	r3, [r7, #120]	; 0x78
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	461a      	mov	r2, r3
 80164c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164c8:	623b      	str	r3, [r7, #32]
 80164ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164cc:	69f9      	ldr	r1, [r7, #28]
 80164ce:	6a3a      	ldr	r2, [r7, #32]
 80164d0:	e841 2300 	strex	r3, r2, [r1]
 80164d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80164d6:	69bb      	ldr	r3, [r7, #24]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d1e6      	bne.n	80164aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80164dc:	2300      	movs	r3, #0
}
 80164de:	4618      	mov	r0, r3
 80164e0:	378c      	adds	r7, #140	; 0x8c
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	08016d1d 	.word	0x08016d1d
 80164f0:	080169bd 	.word	0x080169bd
 80164f4:	08016805 	.word	0x08016805
 80164f8:	0801664d 	.word	0x0801664d

080164fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b095      	sub	sp, #84	; 0x54
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650c:	e853 3f00 	ldrex	r3, [r3]
 8016510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016518:	64fb      	str	r3, [r7, #76]	; 0x4c
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	461a      	mov	r2, r3
 8016520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016522:	643b      	str	r3, [r7, #64]	; 0x40
 8016524:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801652a:	e841 2300 	strex	r3, r2, [r1]
 801652e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016532:	2b00      	cmp	r3, #0
 8016534:	d1e6      	bne.n	8016504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	3308      	adds	r3, #8
 801653c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801653e:	6a3b      	ldr	r3, [r7, #32]
 8016540:	e853 3f00 	ldrex	r3, [r3]
 8016544:	61fb      	str	r3, [r7, #28]
   return(result);
 8016546:	69fa      	ldr	r2, [r7, #28]
 8016548:	4b1e      	ldr	r3, [pc, #120]	; (80165c4 <UART_EndRxTransfer+0xc8>)
 801654a:	4013      	ands	r3, r2
 801654c:	64bb      	str	r3, [r7, #72]	; 0x48
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	3308      	adds	r3, #8
 8016554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801655a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801655c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801655e:	e841 2300 	strex	r3, r2, [r1]
 8016562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016566:	2b00      	cmp	r3, #0
 8016568:	d1e5      	bne.n	8016536 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801656e:	2b01      	cmp	r3, #1
 8016570:	d118      	bne.n	80165a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	e853 3f00 	ldrex	r3, [r3]
 801657e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	f023 0310 	bic.w	r3, r3, #16
 8016586:	647b      	str	r3, [r7, #68]	; 0x44
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	461a      	mov	r2, r3
 801658e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016590:	61bb      	str	r3, [r7, #24]
 8016592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016594:	6979      	ldr	r1, [r7, #20]
 8016596:	69ba      	ldr	r2, [r7, #24]
 8016598:	e841 2300 	strex	r3, r2, [r1]
 801659c:	613b      	str	r3, [r7, #16]
   return(result);
 801659e:	693b      	ldr	r3, [r7, #16]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d1e6      	bne.n	8016572 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2220      	movs	r2, #32
 80165a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2200      	movs	r2, #0
 80165b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80165b8:	bf00      	nop
 80165ba:	3754      	adds	r7, #84	; 0x54
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr
 80165c4:	effffffe 	.word	0xeffffffe

080165c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	2200      	movs	r2, #0
 80165da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2200      	movs	r2, #0
 80165e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80165e6:	68f8      	ldr	r0, [r7, #12]
 80165e8:	f7fe ff2e 	bl	8015448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80165ec:	bf00      	nop
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b088      	sub	sp, #32
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	e853 3f00 	ldrex	r3, [r3]
 8016608:	60bb      	str	r3, [r7, #8]
   return(result);
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016610:	61fb      	str	r3, [r7, #28]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	461a      	mov	r2, r3
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	61bb      	str	r3, [r7, #24]
 801661c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801661e:	6979      	ldr	r1, [r7, #20]
 8016620:	69ba      	ldr	r2, [r7, #24]
 8016622:	e841 2300 	strex	r3, r2, [r1]
 8016626:	613b      	str	r3, [r7, #16]
   return(result);
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d1e6      	bne.n	80165fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	2220      	movs	r2, #32
 8016632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2200      	movs	r2, #0
 801663a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7fe fef9 	bl	8015434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016642:	bf00      	nop
 8016644:	3720      	adds	r7, #32
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
	...

0801664c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b09c      	sub	sp, #112	; 0x70
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801665a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016664:	2b22      	cmp	r3, #34	; 0x22
 8016666:	f040 80be 	bne.w	80167e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016670:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016678:	b2d9      	uxtb	r1, r3
 801667a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801667e:	b2da      	uxtb	r2, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016684:	400a      	ands	r2, r1
 8016686:	b2d2      	uxtb	r2, r2
 8016688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801668e:	1c5a      	adds	r2, r3, #1
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801669a:	b29b      	uxth	r3, r3
 801669c:	3b01      	subs	r3, #1
 801669e:	b29a      	uxth	r2, r3
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	f040 80a1 	bne.w	80167f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166bc:	e853 3f00 	ldrex	r3, [r3]
 80166c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80166c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80166c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	461a      	mov	r2, r3
 80166d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80166d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80166d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80166d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80166da:	e841 2300 	strex	r3, r2, [r1]
 80166de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80166e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d1e6      	bne.n	80166b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	3308      	adds	r3, #8
 80166ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f0:	e853 3f00 	ldrex	r3, [r3]
 80166f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80166f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166f8:	f023 0301 	bic.w	r3, r3, #1
 80166fc:	667b      	str	r3, [r7, #100]	; 0x64
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	3308      	adds	r3, #8
 8016704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016706:	647a      	str	r2, [r7, #68]	; 0x44
 8016708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801670a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801670c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801670e:	e841 2300 	strex	r3, r2, [r1]
 8016712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016716:	2b00      	cmp	r3, #0
 8016718:	d1e5      	bne.n	80166e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2220      	movs	r2, #32
 801671e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2200      	movs	r2, #0
 8016726:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2200      	movs	r2, #0
 801672c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4a33      	ldr	r2, [pc, #204]	; (8016800 <UART_RxISR_8BIT+0x1b4>)
 8016734:	4293      	cmp	r3, r2
 8016736:	d01f      	beq.n	8016778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016742:	2b00      	cmp	r3, #0
 8016744:	d018      	beq.n	8016778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674e:	e853 3f00 	ldrex	r3, [r3]
 8016752:	623b      	str	r3, [r7, #32]
   return(result);
 8016754:	6a3b      	ldr	r3, [r7, #32]
 8016756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801675a:	663b      	str	r3, [r7, #96]	; 0x60
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	461a      	mov	r2, r3
 8016762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016764:	633b      	str	r3, [r7, #48]	; 0x30
 8016766:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801676a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801676c:	e841 2300 	strex	r3, r2, [r1]
 8016770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016774:	2b00      	cmp	r3, #0
 8016776:	d1e6      	bne.n	8016746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801677c:	2b01      	cmp	r3, #1
 801677e:	d12e      	bne.n	80167de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2200      	movs	r2, #0
 8016784:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801678c:	693b      	ldr	r3, [r7, #16]
 801678e:	e853 3f00 	ldrex	r3, [r3]
 8016792:	60fb      	str	r3, [r7, #12]
   return(result);
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f023 0310 	bic.w	r3, r3, #16
 801679a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	461a      	mov	r2, r3
 80167a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167a4:	61fb      	str	r3, [r7, #28]
 80167a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a8:	69b9      	ldr	r1, [r7, #24]
 80167aa:	69fa      	ldr	r2, [r7, #28]
 80167ac:	e841 2300 	strex	r3, r2, [r1]
 80167b0:	617b      	str	r3, [r7, #20]
   return(result);
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d1e6      	bne.n	8016786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	69db      	ldr	r3, [r3, #28]
 80167be:	f003 0310 	and.w	r3, r3, #16
 80167c2:	2b10      	cmp	r3, #16
 80167c4:	d103      	bne.n	80167ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2210      	movs	r2, #16
 80167cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80167d4:	4619      	mov	r1, r3
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f7fe fe40 	bl	801545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167dc:	e00b      	b.n	80167f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f7ec fb44 	bl	8002e6c <HAL_UART_RxCpltCallback>
}
 80167e4:	e007      	b.n	80167f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	699a      	ldr	r2, [r3, #24]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	f042 0208 	orr.w	r2, r2, #8
 80167f4:	619a      	str	r2, [r3, #24]
}
 80167f6:	bf00      	nop
 80167f8:	3770      	adds	r7, #112	; 0x70
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	58000c00 	.word	0x58000c00

08016804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b09c      	sub	sp, #112	; 0x70
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016812:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801681c:	2b22      	cmp	r3, #34	; 0x22
 801681e:	f040 80be 	bne.w	801699e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016828:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016830:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8016832:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8016836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801683a:	4013      	ands	r3, r2
 801683c:	b29a      	uxth	r2, r3
 801683e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016846:	1c9a      	adds	r2, r3, #2
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016852:	b29b      	uxth	r3, r3
 8016854:	3b01      	subs	r3, #1
 8016856:	b29a      	uxth	r2, r3
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016864:	b29b      	uxth	r3, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	f040 80a1 	bne.w	80169ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016874:	e853 3f00 	ldrex	r3, [r3]
 8016878:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801687a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801687c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016880:	667b      	str	r3, [r7, #100]	; 0x64
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	461a      	mov	r2, r3
 8016888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801688a:	657b      	str	r3, [r7, #84]	; 0x54
 801688c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801688e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016892:	e841 2300 	strex	r3, r2, [r1]
 8016896:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801689a:	2b00      	cmp	r3, #0
 801689c:	d1e6      	bne.n	801686c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	3308      	adds	r3, #8
 80168a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168a8:	e853 3f00 	ldrex	r3, [r3]
 80168ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80168ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b0:	f023 0301 	bic.w	r3, r3, #1
 80168b4:	663b      	str	r3, [r7, #96]	; 0x60
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	3308      	adds	r3, #8
 80168bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80168be:	643a      	str	r2, [r7, #64]	; 0x40
 80168c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80168c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80168c6:	e841 2300 	strex	r3, r2, [r1]
 80168ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80168cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d1e5      	bne.n	801689e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2220      	movs	r2, #32
 80168d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2200      	movs	r2, #0
 80168de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2200      	movs	r2, #0
 80168e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	4a33      	ldr	r2, [pc, #204]	; (80169b8 <UART_RxISR_16BIT+0x1b4>)
 80168ec:	4293      	cmp	r3, r2
 80168ee:	d01f      	beq.n	8016930 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d018      	beq.n	8016930 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016904:	6a3b      	ldr	r3, [r7, #32]
 8016906:	e853 3f00 	ldrex	r3, [r3]
 801690a:	61fb      	str	r3, [r7, #28]
   return(result);
 801690c:	69fb      	ldr	r3, [r7, #28]
 801690e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	461a      	mov	r2, r3
 801691a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801691e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016924:	e841 2300 	strex	r3, r2, [r1]
 8016928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692c:	2b00      	cmp	r3, #0
 801692e:	d1e6      	bne.n	80168fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016934:	2b01      	cmp	r3, #1
 8016936:	d12e      	bne.n	8016996 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2200      	movs	r2, #0
 801693c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	e853 3f00 	ldrex	r3, [r3]
 801694a:	60bb      	str	r3, [r7, #8]
   return(result);
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	f023 0310 	bic.w	r3, r3, #16
 8016952:	65bb      	str	r3, [r7, #88]	; 0x58
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	461a      	mov	r2, r3
 801695a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801695c:	61bb      	str	r3, [r7, #24]
 801695e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016960:	6979      	ldr	r1, [r7, #20]
 8016962:	69ba      	ldr	r2, [r7, #24]
 8016964:	e841 2300 	strex	r3, r2, [r1]
 8016968:	613b      	str	r3, [r7, #16]
   return(result);
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d1e6      	bne.n	801693e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	69db      	ldr	r3, [r3, #28]
 8016976:	f003 0310 	and.w	r3, r3, #16
 801697a:	2b10      	cmp	r3, #16
 801697c:	d103      	bne.n	8016986 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2210      	movs	r2, #16
 8016984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801698c:	4619      	mov	r1, r3
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f7fe fd64 	bl	801545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016994:	e00b      	b.n	80169ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f7ec fa68 	bl	8002e6c <HAL_UART_RxCpltCallback>
}
 801699c:	e007      	b.n	80169ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	699a      	ldr	r2, [r3, #24]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f042 0208 	orr.w	r2, r2, #8
 80169ac:	619a      	str	r2, [r3, #24]
}
 80169ae:	bf00      	nop
 80169b0:	3770      	adds	r7, #112	; 0x70
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	58000c00 	.word	0x58000c00

080169bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b0ac      	sub	sp, #176	; 0xb0
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80169ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	69db      	ldr	r3, [r3, #28]
 80169d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80169f2:	2b22      	cmp	r3, #34	; 0x22
 80169f4:	f040 8180 	bne.w	8016cf8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80169fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016a02:	e123      	b.n	8016c4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a0a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016a0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016a12:	b2d9      	uxtb	r1, r3
 8016a14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016a18:	b2da      	uxtb	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a1e:	400a      	ands	r2, r1
 8016a20:	b2d2      	uxtb	r2, r2
 8016a22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a28:	1c5a      	adds	r2, r3, #1
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	3b01      	subs	r3, #1
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	69db      	ldr	r3, [r3, #28]
 8016a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a4e:	f003 0307 	and.w	r3, r3, #7
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d053      	beq.n	8016afe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a5a:	f003 0301 	and.w	r3, r3, #1
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d011      	beq.n	8016a86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8016a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d00b      	beq.n	8016a86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2201      	movs	r2, #1
 8016a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a7c:	f043 0201 	orr.w	r2, r3, #1
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a8a:	f003 0302 	and.w	r3, r3, #2
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d011      	beq.n	8016ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016a96:	f003 0301 	and.w	r3, r3, #1
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d00b      	beq.n	8016ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	2202      	movs	r2, #2
 8016aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016aac:	f043 0204 	orr.w	r2, r3, #4
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016aba:	f003 0304 	and.w	r3, r3, #4
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d011      	beq.n	8016ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016ac6:	f003 0301 	and.w	r3, r3, #1
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d00b      	beq.n	8016ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2204      	movs	r2, #4
 8016ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016adc:	f043 0202 	orr.w	r2, r3, #2
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d006      	beq.n	8016afe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7fe fca9 	bl	8015448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2200      	movs	r2, #0
 8016afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	f040 80a0 	bne.w	8016c4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b14:	e853 3f00 	ldrex	r3, [r3]
 8016b18:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8016b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	461a      	mov	r2, r3
 8016b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016b30:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016b34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b36:	e841 2300 	strex	r3, r2, [r1]
 8016b3a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1e4      	bne.n	8016b0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	3308      	adds	r3, #8
 8016b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b4c:	e853 3f00 	ldrex	r3, [r3]
 8016b50:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b54:	4b6e      	ldr	r3, [pc, #440]	; (8016d10 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8016b56:	4013      	ands	r3, r2
 8016b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	3308      	adds	r3, #8
 8016b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016b66:	66ba      	str	r2, [r7, #104]	; 0x68
 8016b68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016b6e:	e841 2300 	strex	r3, r2, [r1]
 8016b72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d1e3      	bne.n	8016b42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2220      	movs	r2, #32
 8016b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2200      	movs	r2, #0
 8016b86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4a60      	ldr	r2, [pc, #384]	; (8016d14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016b94:	4293      	cmp	r3, r2
 8016b96:	d021      	beq.n	8016bdc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d01a      	beq.n	8016bdc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bae:	e853 3f00 	ldrex	r3, [r3]
 8016bb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8016bca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016bce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016bd0:	e841 2300 	strex	r3, r2, [r1]
 8016bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d1e4      	bne.n	8016ba6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	d130      	bne.n	8016c46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2200      	movs	r2, #0
 8016be8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf2:	e853 3f00 	ldrex	r3, [r3]
 8016bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfa:	f023 0310 	bic.w	r3, r3, #16
 8016bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	461a      	mov	r2, r3
 8016c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8016c0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c14:	e841 2300 	strex	r3, r2, [r1]
 8016c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d1e4      	bne.n	8016bea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	69db      	ldr	r3, [r3, #28]
 8016c26:	f003 0310 	and.w	r3, r3, #16
 8016c2a:	2b10      	cmp	r3, #16
 8016c2c:	d103      	bne.n	8016c36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2210      	movs	r2, #16
 8016c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7fe fc0c 	bl	801545c <HAL_UARTEx_RxEventCallback>
 8016c44:	e002      	b.n	8016c4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f7ec f910 	bl	8002e6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016c4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d006      	beq.n	8016c62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c58:	f003 0320 	and.w	r3, r3, #32
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f47f aed1 	bne.w	8016a04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016c68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d049      	beq.n	8016d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	d242      	bcs.n	8016d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	3308      	adds	r3, #8
 8016c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c8a:	6a3b      	ldr	r3, [r7, #32]
 8016c8c:	e853 3f00 	ldrex	r3, [r3]
 8016c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8016c92:	69fb      	ldr	r3, [r7, #28]
 8016c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	3308      	adds	r3, #8
 8016ca2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cae:	e841 2300 	strex	r3, r2, [r1]
 8016cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d1e3      	bne.n	8016c82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	4a16      	ldr	r2, [pc, #88]	; (8016d18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016cbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	e853 3f00 	ldrex	r3, [r3]
 8016ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	f043 0320 	orr.w	r3, r3, #32
 8016cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	461a      	mov	r2, r3
 8016cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ce2:	61bb      	str	r3, [r7, #24]
 8016ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ce6:	6979      	ldr	r1, [r7, #20]
 8016ce8:	69ba      	ldr	r2, [r7, #24]
 8016cea:	e841 2300 	strex	r3, r2, [r1]
 8016cee:	613b      	str	r3, [r7, #16]
   return(result);
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d1e4      	bne.n	8016cc0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016cf6:	e007      	b.n	8016d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	699a      	ldr	r2, [r3, #24]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	f042 0208 	orr.w	r2, r2, #8
 8016d06:	619a      	str	r2, [r3, #24]
}
 8016d08:	bf00      	nop
 8016d0a:	37b0      	adds	r7, #176	; 0xb0
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	effffffe 	.word	0xeffffffe
 8016d14:	58000c00 	.word	0x58000c00
 8016d18:	0801664d 	.word	0x0801664d

08016d1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b0ae      	sub	sp, #184	; 0xb8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	69db      	ldr	r3, [r3, #28]
 8016d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	689b      	ldr	r3, [r3, #8]
 8016d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d52:	2b22      	cmp	r3, #34	; 0x22
 8016d54:	f040 8184 	bne.w	8017060 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016d62:	e127      	b.n	8016fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016d76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016d7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016d7e:	4013      	ands	r3, r2
 8016d80:	b29a      	uxth	r2, r3
 8016d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d8c:	1c9a      	adds	r2, r3, #2
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	3b01      	subs	r3, #1
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	69db      	ldr	r3, [r3, #28]
 8016daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016db2:	f003 0307 	and.w	r3, r3, #7
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d053      	beq.n	8016e62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016dbe:	f003 0301 	and.w	r3, r3, #1
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d011      	beq.n	8016dea <UART_RxISR_16BIT_FIFOEN+0xce>
 8016dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d00b      	beq.n	8016dea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016de0:	f043 0201 	orr.w	r2, r3, #1
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016dee:	f003 0302 	and.w	r3, r3, #2
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d011      	beq.n	8016e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016dfa:	f003 0301 	and.w	r3, r3, #1
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d00b      	beq.n	8016e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	2202      	movs	r2, #2
 8016e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e10:	f043 0204 	orr.w	r2, r3, #4
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016e1e:	f003 0304 	and.w	r3, r3, #4
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d011      	beq.n	8016e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e2a:	f003 0301 	and.w	r3, r3, #1
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d00b      	beq.n	8016e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	2204      	movs	r2, #4
 8016e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e40:	f043 0202 	orr.w	r2, r3, #2
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d006      	beq.n	8016e62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7fe faf7 	bl	8015448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f040 80a2 	bne.w	8016fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016e78:	e853 3f00 	ldrex	r3, [r3]
 8016e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	461a      	mov	r2, r3
 8016e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016e96:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016e9e:	e841 2300 	strex	r3, r2, [r1]
 8016ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d1e2      	bne.n	8016e70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	3308      	adds	r3, #8
 8016eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016eb4:	e853 3f00 	ldrex	r3, [r3]
 8016eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016eba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016ebc:	4b6e      	ldr	r3, [pc, #440]	; (8017078 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016ebe:	4013      	ands	r3, r2
 8016ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	3308      	adds	r3, #8
 8016eca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016ed6:	e841 2300 	strex	r3, r2, [r1]
 8016eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d1e3      	bne.n	8016eaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2220      	movs	r2, #32
 8016ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2200      	movs	r2, #0
 8016eee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	4a60      	ldr	r2, [pc, #384]	; (801707c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016efc:	4293      	cmp	r3, r2
 8016efe:	d021      	beq.n	8016f44 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d01a      	beq.n	8016f44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f16:	e853 3f00 	ldrex	r3, [r3]
 8016f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8016f32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f38:	e841 2300 	strex	r3, r2, [r1]
 8016f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d1e4      	bne.n	8016f0e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f48:	2b01      	cmp	r3, #1
 8016f4a:	d130      	bne.n	8016fae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f5a:	e853 3f00 	ldrex	r3, [r3]
 8016f5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f62:	f023 0310 	bic.w	r3, r3, #16
 8016f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	461a      	mov	r2, r3
 8016f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f74:	647b      	str	r3, [r7, #68]	; 0x44
 8016f76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f7c:	e841 2300 	strex	r3, r2, [r1]
 8016f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d1e4      	bne.n	8016f52 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	69db      	ldr	r3, [r3, #28]
 8016f8e:	f003 0310 	and.w	r3, r3, #16
 8016f92:	2b10      	cmp	r3, #16
 8016f94:	d103      	bne.n	8016f9e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2210      	movs	r2, #16
 8016f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7fe fa58 	bl	801545c <HAL_UARTEx_RxEventCallback>
 8016fac:	e002      	b.n	8016fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7eb ff5c 	bl	8002e6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016fb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d006      	beq.n	8016fca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016fc0:	f003 0320 	and.w	r3, r3, #32
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f47f aecd 	bne.w	8016d64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016fd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d049      	beq.n	8017070 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016fe2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d242      	bcs.n	8017070 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	3308      	adds	r3, #8
 8016ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff4:	e853 3f00 	ldrex	r3, [r3]
 8016ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8016ffa:	6a3b      	ldr	r3, [r7, #32]
 8016ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	3308      	adds	r3, #8
 801700a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801700e:	633a      	str	r2, [r7, #48]	; 0x30
 8017010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017016:	e841 2300 	strex	r3, r2, [r1]
 801701a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1e3      	bne.n	8016fea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	4a16      	ldr	r2, [pc, #88]	; (8017080 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017026:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801702e:	693b      	ldr	r3, [r7, #16]
 8017030:	e853 3f00 	ldrex	r3, [r3]
 8017034:	60fb      	str	r3, [r7, #12]
   return(result);
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f043 0320 	orr.w	r3, r3, #32
 801703c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	461a      	mov	r2, r3
 8017046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801704a:	61fb      	str	r3, [r7, #28]
 801704c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801704e:	69b9      	ldr	r1, [r7, #24]
 8017050:	69fa      	ldr	r2, [r7, #28]
 8017052:	e841 2300 	strex	r3, r2, [r1]
 8017056:	617b      	str	r3, [r7, #20]
   return(result);
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d1e4      	bne.n	8017028 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801705e:	e007      	b.n	8017070 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	699a      	ldr	r2, [r3, #24]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	f042 0208 	orr.w	r2, r2, #8
 801706e:	619a      	str	r2, [r3, #24]
}
 8017070:	bf00      	nop
 8017072:	37b8      	adds	r7, #184	; 0xb8
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	effffffe 	.word	0xeffffffe
 801707c:	58000c00 	.word	0x58000c00
 8017080:	08016805 	.word	0x08016805

08017084 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801708c:	bf00      	nop
 801708e:	370c      	adds	r7, #12
 8017090:	46bd      	mov	sp, r7
 8017092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017096:	4770      	bx	lr

08017098 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017098:	b480      	push	{r7}
 801709a:	b083      	sub	sp, #12
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80170a0:	bf00      	nop
 80170a2:	370c      	adds	r7, #12
 80170a4:	46bd      	mov	sp, r7
 80170a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170aa:	4770      	bx	lr

080170ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80170b4:	bf00      	nop
 80170b6:	370c      	adds	r7, #12
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr

080170c0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b089      	sub	sp, #36	; 0x24
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d101      	bne.n	80170d6 <HAL_UARTEx_EnableStopMode+0x16>
 80170d2:	2302      	movs	r3, #2
 80170d4:	e021      	b.n	801711a <HAL_UARTEx_EnableStopMode+0x5a>
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2201      	movs	r2, #1
 80170da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	e853 3f00 	ldrex	r3, [r3]
 80170ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	f043 0302 	orr.w	r3, r3, #2
 80170f2:	61fb      	str	r3, [r7, #28]
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	461a      	mov	r2, r3
 80170fa:	69fb      	ldr	r3, [r7, #28]
 80170fc:	61bb      	str	r3, [r7, #24]
 80170fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017100:	6979      	ldr	r1, [r7, #20]
 8017102:	69ba      	ldr	r2, [r7, #24]
 8017104:	e841 2300 	strex	r3, r2, [r1]
 8017108:	613b      	str	r3, [r7, #16]
   return(result);
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1e6      	bne.n	80170de <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2200      	movs	r2, #0
 8017114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017118:	2300      	movs	r3, #0
}
 801711a:	4618      	mov	r0, r3
 801711c:	3724      	adds	r7, #36	; 0x24
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr

08017126 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8017126:	b580      	push	{r7, lr}
 8017128:	b084      	sub	sp, #16
 801712a:	af00      	add	r7, sp, #0
 801712c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017134:	2b01      	cmp	r3, #1
 8017136:	d101      	bne.n	801713c <HAL_UARTEx_EnableFifoMode+0x16>
 8017138:	2302      	movs	r3, #2
 801713a:	e02b      	b.n	8017194 <HAL_UARTEx_EnableFifoMode+0x6e>
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2201      	movs	r2, #1
 8017140:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2224      	movs	r2, #36	; 0x24
 8017148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	681a      	ldr	r2, [r3, #0]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	f022 0201 	bic.w	r2, r2, #1
 8017162:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801716a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8017172:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f000 f8c3 	bl	8017308 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2220      	movs	r2, #32
 8017186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2200      	movs	r2, #0
 801718e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017192:	2300      	movs	r3, #0
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801719c:	b480      	push	{r7}
 801719e:	b085      	sub	sp, #20
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80171aa:	2b01      	cmp	r3, #1
 80171ac:	d101      	bne.n	80171b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80171ae:	2302      	movs	r3, #2
 80171b0:	e027      	b.n	8017202 <HAL_UARTEx_DisableFifoMode+0x66>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	2201      	movs	r2, #1
 80171b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2224      	movs	r2, #36	; 0x24
 80171be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	f022 0201 	bic.w	r2, r2, #1
 80171d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80171e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2200      	movs	r2, #0
 80171e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	68fa      	ldr	r2, [r7, #12]
 80171ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2220      	movs	r2, #32
 80171f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2200      	movs	r2, #0
 80171fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017200:	2300      	movs	r3, #0
}
 8017202:	4618      	mov	r0, r3
 8017204:	3714      	adds	r7, #20
 8017206:	46bd      	mov	sp, r7
 8017208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720c:	4770      	bx	lr

0801720e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801720e:	b580      	push	{r7, lr}
 8017210:	b084      	sub	sp, #16
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
 8017216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801721e:	2b01      	cmp	r3, #1
 8017220:	d101      	bne.n	8017226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017222:	2302      	movs	r3, #2
 8017224:	e02d      	b.n	8017282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2201      	movs	r2, #1
 801722a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2224      	movs	r2, #36	; 0x24
 8017232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f022 0201 	bic.w	r2, r2, #1
 801724c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	689b      	ldr	r3, [r3, #8]
 8017254:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	683a      	ldr	r2, [r7, #0]
 801725e:	430a      	orrs	r2, r1
 8017260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f000 f850 	bl	8017308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	68fa      	ldr	r2, [r7, #12]
 801726e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2220      	movs	r2, #32
 8017274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2200      	movs	r2, #0
 801727c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017280:	2300      	movs	r3, #0
}
 8017282:	4618      	mov	r0, r3
 8017284:	3710      	adds	r7, #16
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}

0801728a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801728a:	b580      	push	{r7, lr}
 801728c:	b084      	sub	sp, #16
 801728e:	af00      	add	r7, sp, #0
 8017290:	6078      	str	r0, [r7, #4]
 8017292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801729a:	2b01      	cmp	r3, #1
 801729c:	d101      	bne.n	80172a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801729e:	2302      	movs	r3, #2
 80172a0:	e02d      	b.n	80172fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2201      	movs	r2, #1
 80172a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2224      	movs	r2, #36	; 0x24
 80172ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f022 0201 	bic.w	r2, r2, #1
 80172c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	689b      	ldr	r3, [r3, #8]
 80172d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	683a      	ldr	r2, [r7, #0]
 80172da:	430a      	orrs	r2, r1
 80172dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80172de:	6878      	ldr	r0, [r7, #4]
 80172e0:	f000 f812 	bl	8017308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	68fa      	ldr	r2, [r7, #12]
 80172ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2220      	movs	r2, #32
 80172f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2200      	movs	r2, #0
 80172f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80172fc:	2300      	movs	r3, #0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3710      	adds	r7, #16
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
	...

08017308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017308:	b480      	push	{r7}
 801730a:	b085      	sub	sp, #20
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017314:	2b00      	cmp	r3, #0
 8017316:	d108      	bne.n	801732a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2201      	movs	r2, #1
 801731c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2201      	movs	r2, #1
 8017324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017328:	e031      	b.n	801738e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801732a:	2310      	movs	r3, #16
 801732c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801732e:	2310      	movs	r3, #16
 8017330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	0e5b      	lsrs	r3, r3, #25
 801733a:	b2db      	uxtb	r3, r3
 801733c:	f003 0307 	and.w	r3, r3, #7
 8017340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	689b      	ldr	r3, [r3, #8]
 8017348:	0f5b      	lsrs	r3, r3, #29
 801734a:	b2db      	uxtb	r3, r3
 801734c:	f003 0307 	and.w	r3, r3, #7
 8017350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017352:	7bbb      	ldrb	r3, [r7, #14]
 8017354:	7b3a      	ldrb	r2, [r7, #12]
 8017356:	4911      	ldr	r1, [pc, #68]	; (801739c <UARTEx_SetNbDataToProcess+0x94>)
 8017358:	5c8a      	ldrb	r2, [r1, r2]
 801735a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801735e:	7b3a      	ldrb	r2, [r7, #12]
 8017360:	490f      	ldr	r1, [pc, #60]	; (80173a0 <UARTEx_SetNbDataToProcess+0x98>)
 8017362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017364:	fb93 f3f2 	sdiv	r3, r3, r2
 8017368:	b29a      	uxth	r2, r3
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017370:	7bfb      	ldrb	r3, [r7, #15]
 8017372:	7b7a      	ldrb	r2, [r7, #13]
 8017374:	4909      	ldr	r1, [pc, #36]	; (801739c <UARTEx_SetNbDataToProcess+0x94>)
 8017376:	5c8a      	ldrb	r2, [r1, r2]
 8017378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801737c:	7b7a      	ldrb	r2, [r7, #13]
 801737e:	4908      	ldr	r1, [pc, #32]	; (80173a0 <UARTEx_SetNbDataToProcess+0x98>)
 8017380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017382:	fb93 f3f2 	sdiv	r3, r3, r2
 8017386:	b29a      	uxth	r2, r3
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801738e:	bf00      	nop
 8017390:	3714      	adds	r7, #20
 8017392:	46bd      	mov	sp, r7
 8017394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017398:	4770      	bx	lr
 801739a:	bf00      	nop
 801739c:	0801b934 	.word	0x0801b934
 80173a0:	0801b93c 	.word	0x0801b93c

080173a4 <__NVIC_SetPriority>:
{
 80173a4:	b480      	push	{r7}
 80173a6:	b083      	sub	sp, #12
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	4603      	mov	r3, r0
 80173ac:	6039      	str	r1, [r7, #0]
 80173ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80173b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	db0a      	blt.n	80173ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	b2da      	uxtb	r2, r3
 80173bc:	490c      	ldr	r1, [pc, #48]	; (80173f0 <__NVIC_SetPriority+0x4c>)
 80173be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173c2:	0112      	lsls	r2, r2, #4
 80173c4:	b2d2      	uxtb	r2, r2
 80173c6:	440b      	add	r3, r1
 80173c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80173cc:	e00a      	b.n	80173e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	b2da      	uxtb	r2, r3
 80173d2:	4908      	ldr	r1, [pc, #32]	; (80173f4 <__NVIC_SetPriority+0x50>)
 80173d4:	88fb      	ldrh	r3, [r7, #6]
 80173d6:	f003 030f 	and.w	r3, r3, #15
 80173da:	3b04      	subs	r3, #4
 80173dc:	0112      	lsls	r2, r2, #4
 80173de:	b2d2      	uxtb	r2, r2
 80173e0:	440b      	add	r3, r1
 80173e2:	761a      	strb	r2, [r3, #24]
}
 80173e4:	bf00      	nop
 80173e6:	370c      	adds	r7, #12
 80173e8:	46bd      	mov	sp, r7
 80173ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ee:	4770      	bx	lr
 80173f0:	e000e100 	.word	0xe000e100
 80173f4:	e000ed00 	.word	0xe000ed00

080173f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80173fc:	4b05      	ldr	r3, [pc, #20]	; (8017414 <SysTick_Handler+0x1c>)
 80173fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017400:	f002 faa0 	bl	8019944 <xTaskGetSchedulerState>
 8017404:	4603      	mov	r3, r0
 8017406:	2b01      	cmp	r3, #1
 8017408:	d001      	beq.n	801740e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801740a:	f003 f8bd 	bl	801a588 <xPortSysTickHandler>
  }
}
 801740e:	bf00      	nop
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	e000e010 	.word	0xe000e010

08017418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017418:	b580      	push	{r7, lr}
 801741a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801741c:	2100      	movs	r1, #0
 801741e:	f06f 0004 	mvn.w	r0, #4
 8017422:	f7ff ffbf 	bl	80173a4 <__NVIC_SetPriority>
#endif
}
 8017426:	bf00      	nop
 8017428:	bd80      	pop	{r7, pc}
	...

0801742c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017432:	f3ef 8305 	mrs	r3, IPSR
 8017436:	603b      	str	r3, [r7, #0]
  return(result);
 8017438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801743a:	2b00      	cmp	r3, #0
 801743c:	d003      	beq.n	8017446 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801743e:	f06f 0305 	mvn.w	r3, #5
 8017442:	607b      	str	r3, [r7, #4]
 8017444:	e00c      	b.n	8017460 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017446:	4b0a      	ldr	r3, [pc, #40]	; (8017470 <osKernelInitialize+0x44>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d105      	bne.n	801745a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801744e:	4b08      	ldr	r3, [pc, #32]	; (8017470 <osKernelInitialize+0x44>)
 8017450:	2201      	movs	r2, #1
 8017452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017454:	2300      	movs	r3, #0
 8017456:	607b      	str	r3, [r7, #4]
 8017458:	e002      	b.n	8017460 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801745a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801745e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017460:	687b      	ldr	r3, [r7, #4]
}
 8017462:	4618      	mov	r0, r3
 8017464:	370c      	adds	r7, #12
 8017466:	46bd      	mov	sp, r7
 8017468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746c:	4770      	bx	lr
 801746e:	bf00      	nop
 8017470:	24002088 	.word	0x24002088

08017474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801747a:	f3ef 8305 	mrs	r3, IPSR
 801747e:	603b      	str	r3, [r7, #0]
  return(result);
 8017480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017482:	2b00      	cmp	r3, #0
 8017484:	d003      	beq.n	801748e <osKernelStart+0x1a>
    stat = osErrorISR;
 8017486:	f06f 0305 	mvn.w	r3, #5
 801748a:	607b      	str	r3, [r7, #4]
 801748c:	e010      	b.n	80174b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801748e:	4b0b      	ldr	r3, [pc, #44]	; (80174bc <osKernelStart+0x48>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	2b01      	cmp	r3, #1
 8017494:	d109      	bne.n	80174aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017496:	f7ff ffbf 	bl	8017418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801749a:	4b08      	ldr	r3, [pc, #32]	; (80174bc <osKernelStart+0x48>)
 801749c:	2202      	movs	r2, #2
 801749e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80174a0:	f001 fd54 	bl	8018f4c <vTaskStartScheduler>
      stat = osOK;
 80174a4:	2300      	movs	r3, #0
 80174a6:	607b      	str	r3, [r7, #4]
 80174a8:	e002      	b.n	80174b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80174aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80174b0:	687b      	ldr	r3, [r7, #4]
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	24002088 	.word	0x24002088

080174c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b08e      	sub	sp, #56	; 0x38
 80174c4:	af04      	add	r7, sp, #16
 80174c6:	60f8      	str	r0, [r7, #12]
 80174c8:	60b9      	str	r1, [r7, #8]
 80174ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80174cc:	2300      	movs	r3, #0
 80174ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174d0:	f3ef 8305 	mrs	r3, IPSR
 80174d4:	617b      	str	r3, [r7, #20]
  return(result);
 80174d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d17e      	bne.n	80175da <osThreadNew+0x11a>
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d07b      	beq.n	80175da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80174e2:	2380      	movs	r3, #128	; 0x80
 80174e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80174e6:	2318      	movs	r3, #24
 80174e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80174ea:	2300      	movs	r3, #0
 80174ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80174ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d045      	beq.n	8017586 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d002      	beq.n	8017508 <osThreadNew+0x48>
        name = attr->name;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	699b      	ldr	r3, [r3, #24]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d002      	beq.n	8017516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	699b      	ldr	r3, [r3, #24]
 8017514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d008      	beq.n	801752e <osThreadNew+0x6e>
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	2b38      	cmp	r3, #56	; 0x38
 8017520:	d805      	bhi.n	801752e <osThreadNew+0x6e>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	f003 0301 	and.w	r3, r3, #1
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <osThreadNew+0x72>
        return (NULL);
 801752e:	2300      	movs	r3, #0
 8017530:	e054      	b.n	80175dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	695b      	ldr	r3, [r3, #20]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d003      	beq.n	8017542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	695b      	ldr	r3, [r3, #20]
 801753e:	089b      	lsrs	r3, r3, #2
 8017540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	689b      	ldr	r3, [r3, #8]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d00e      	beq.n	8017568 <osThreadNew+0xa8>
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	68db      	ldr	r3, [r3, #12]
 801754e:	2b5b      	cmp	r3, #91	; 0x5b
 8017550:	d90a      	bls.n	8017568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017556:	2b00      	cmp	r3, #0
 8017558:	d006      	beq.n	8017568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	695b      	ldr	r3, [r3, #20]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d002      	beq.n	8017568 <osThreadNew+0xa8>
        mem = 1;
 8017562:	2301      	movs	r3, #1
 8017564:	61bb      	str	r3, [r7, #24]
 8017566:	e010      	b.n	801758a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	689b      	ldr	r3, [r3, #8]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d10c      	bne.n	801758a <osThreadNew+0xca>
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d108      	bne.n	801758a <osThreadNew+0xca>
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d104      	bne.n	801758a <osThreadNew+0xca>
          mem = 0;
 8017580:	2300      	movs	r3, #0
 8017582:	61bb      	str	r3, [r7, #24]
 8017584:	e001      	b.n	801758a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017586:	2300      	movs	r3, #0
 8017588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801758a:	69bb      	ldr	r3, [r7, #24]
 801758c:	2b01      	cmp	r3, #1
 801758e:	d110      	bne.n	80175b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017598:	9202      	str	r2, [sp, #8]
 801759a:	9301      	str	r3, [sp, #4]
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	9300      	str	r3, [sp, #0]
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	6a3a      	ldr	r2, [r7, #32]
 80175a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f001 f9f4 	bl	8018994 <xTaskCreateStatic>
 80175ac:	4603      	mov	r3, r0
 80175ae:	613b      	str	r3, [r7, #16]
 80175b0:	e013      	b.n	80175da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80175b2:	69bb      	ldr	r3, [r7, #24]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d110      	bne.n	80175da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80175b8:	6a3b      	ldr	r3, [r7, #32]
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	f107 0310 	add.w	r3, r7, #16
 80175c0:	9301      	str	r3, [sp, #4]
 80175c2:	69fb      	ldr	r3, [r7, #28]
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f001 fa3f 	bl	8018a4e <xTaskCreate>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	d001      	beq.n	80175da <osThreadNew+0x11a>
            hTask = NULL;
 80175d6:	2300      	movs	r3, #0
 80175d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80175da:	693b      	ldr	r3, [r7, #16]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3728      	adds	r7, #40	; 0x28
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175ea:	f3ef 8305 	mrs	r3, IPSR
 80175ee:	603b      	str	r3, [r7, #0]
  return(result);
 80175f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d003      	beq.n	80175fe <osThreadYield+0x1a>
    stat = osErrorISR;
 80175f6:	f06f 0305 	mvn.w	r3, #5
 80175fa:	607b      	str	r3, [r7, #4]
 80175fc:	e009      	b.n	8017612 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80175fe:	2300      	movs	r3, #0
 8017600:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8017602:	4b07      	ldr	r3, [pc, #28]	; (8017620 <osThreadYield+0x3c>)
 8017604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	f3bf 8f4f 	dsb	sy
 801760e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8017612:	687b      	ldr	r3, [r7, #4]
}
 8017614:	4618      	mov	r0, r3
 8017616:	370c      	adds	r7, #12
 8017618:	46bd      	mov	sp, r7
 801761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761e:	4770      	bx	lr
 8017620:	e000ed04 	.word	0xe000ed04

08017624 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017624:	b580      	push	{r7, lr}
 8017626:	b086      	sub	sp, #24
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017630:	f3ef 8305 	mrs	r3, IPSR
 8017634:	60fb      	str	r3, [r7, #12]
  return(result);
 8017636:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017638:	2b00      	cmp	r3, #0
 801763a:	d003      	beq.n	8017644 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801763c:	f06f 0305 	mvn.w	r3, #5
 8017640:	617b      	str	r3, [r7, #20]
 8017642:	e00b      	b.n	801765c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d103      	bne.n	8017652 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801764a:	f06f 0303 	mvn.w	r3, #3
 801764e:	617b      	str	r3, [r7, #20]
 8017650:	e004      	b.n	801765c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8017652:	2300      	movs	r3, #0
 8017654:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8017656:	6938      	ldr	r0, [r7, #16]
 8017658:	f001 fb72 	bl	8018d40 <vTaskSuspend>
  }

  return (stat);
 801765c:	697b      	ldr	r3, [r7, #20]
}
 801765e:	4618      	mov	r0, r3
 8017660:	3718      	adds	r7, #24
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8017666:	b580      	push	{r7, lr}
 8017668:	b086      	sub	sp, #24
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017672:	f3ef 8305 	mrs	r3, IPSR
 8017676:	60fb      	str	r3, [r7, #12]
  return(result);
 8017678:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801767a:	2b00      	cmp	r3, #0
 801767c:	d003      	beq.n	8017686 <osThreadResume+0x20>
    stat = osErrorISR;
 801767e:	f06f 0305 	mvn.w	r3, #5
 8017682:	617b      	str	r3, [r7, #20]
 8017684:	e00b      	b.n	801769e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d103      	bne.n	8017694 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801768c:	f06f 0303 	mvn.w	r3, #3
 8017690:	617b      	str	r3, [r7, #20]
 8017692:	e004      	b.n	801769e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8017694:	2300      	movs	r3, #0
 8017696:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8017698:	6938      	ldr	r0, [r7, #16]
 801769a:	f001 fbf9 	bl	8018e90 <vTaskResume>
  }

  return (stat);
 801769e:	697b      	ldr	r3, [r7, #20]
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3718      	adds	r7, #24
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}

080176a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176b0:	f3ef 8305 	mrs	r3, IPSR
 80176b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80176b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d003      	beq.n	80176c4 <osDelay+0x1c>
    stat = osErrorISR;
 80176bc:	f06f 0305 	mvn.w	r3, #5
 80176c0:	60fb      	str	r3, [r7, #12]
 80176c2:	e007      	b.n	80176d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80176c4:	2300      	movs	r3, #0
 80176c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d002      	beq.n	80176d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	f001 fb02 	bl	8018cd8 <vTaskDelay>
    }
  }

  return (stat);
 80176d4:	68fb      	ldr	r3, [r7, #12]
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3710      	adds	r7, #16
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}

080176de <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80176de:	b580      	push	{r7, lr}
 80176e0:	b086      	sub	sp, #24
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80176e6:	2300      	movs	r3, #0
 80176e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176ea:	f3ef 8305 	mrs	r3, IPSR
 80176ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80176f0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d12d      	bne.n	8017752 <osEventFlagsNew+0x74>
    mem = -1;
 80176f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176fa:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d015      	beq.n	801772e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	689b      	ldr	r3, [r3, #8]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d006      	beq.n	8017718 <osEventFlagsNew+0x3a>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	68db      	ldr	r3, [r3, #12]
 801770e:	2b1f      	cmp	r3, #31
 8017710:	d902      	bls.n	8017718 <osEventFlagsNew+0x3a>
        mem = 1;
 8017712:	2301      	movs	r3, #1
 8017714:	613b      	str	r3, [r7, #16]
 8017716:	e00c      	b.n	8017732 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	689b      	ldr	r3, [r3, #8]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d108      	bne.n	8017732 <osEventFlagsNew+0x54>
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	68db      	ldr	r3, [r3, #12]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d104      	bne.n	8017732 <osEventFlagsNew+0x54>
          mem = 0;
 8017728:	2300      	movs	r3, #0
 801772a:	613b      	str	r3, [r7, #16]
 801772c:	e001      	b.n	8017732 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	2b01      	cmp	r3, #1
 8017736:	d106      	bne.n	8017746 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	689b      	ldr	r3, [r3, #8]
 801773c:	4618      	mov	r0, r3
 801773e:	f000 f91d 	bl	801797c <xEventGroupCreateStatic>
 8017742:	6178      	str	r0, [r7, #20]
 8017744:	e005      	b.n	8017752 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d102      	bne.n	8017752 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801774c:	f000 f94d 	bl	80179ea <xEventGroupCreate>
 8017750:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8017752:	697b      	ldr	r3, [r7, #20]
}
 8017754:	4618      	mov	r0, r3
 8017756:	3718      	adds	r7, #24
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801775c:	b580      	push	{r7, lr}
 801775e:	b086      	sub	sp, #24
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d004      	beq.n	801777a <osEventFlagsSet+0x1e>
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017776:	2b00      	cmp	r3, #0
 8017778:	d003      	beq.n	8017782 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801777a:	f06f 0303 	mvn.w	r3, #3
 801777e:	617b      	str	r3, [r7, #20]
 8017780:	e028      	b.n	80177d4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017782:	f3ef 8305 	mrs	r3, IPSR
 8017786:	60fb      	str	r3, [r7, #12]
  return(result);
 8017788:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801778a:	2b00      	cmp	r3, #0
 801778c:	d01d      	beq.n	80177ca <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801778e:	2300      	movs	r3, #0
 8017790:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8017792:	f107 0308 	add.w	r3, r7, #8
 8017796:	461a      	mov	r2, r3
 8017798:	6839      	ldr	r1, [r7, #0]
 801779a:	6938      	ldr	r0, [r7, #16]
 801779c:	f000 fb46 	bl	8017e2c <xEventGroupSetBitsFromISR>
 80177a0:	4603      	mov	r3, r0
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d103      	bne.n	80177ae <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80177a6:	f06f 0302 	mvn.w	r3, #2
 80177aa:	617b      	str	r3, [r7, #20]
 80177ac:	e012      	b.n	80177d4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d00d      	beq.n	80177d4 <osEventFlagsSet+0x78>
 80177b8:	4b09      	ldr	r3, [pc, #36]	; (80177e0 <osEventFlagsSet+0x84>)
 80177ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177be:	601a      	str	r2, [r3, #0]
 80177c0:	f3bf 8f4f 	dsb	sy
 80177c4:	f3bf 8f6f 	isb	sy
 80177c8:	e004      	b.n	80177d4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80177ca:	6839      	ldr	r1, [r7, #0]
 80177cc:	6938      	ldr	r0, [r7, #16]
 80177ce:	f000 fa65 	bl	8017c9c <xEventGroupSetBits>
 80177d2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80177d4:	697b      	ldr	r3, [r7, #20]
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3718      	adds	r7, #24
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	e000ed04 	.word	0xe000ed04

080177e4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80177f2:	693b      	ldr	r3, [r7, #16]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d004      	beq.n	8017802 <osEventFlagsClear+0x1e>
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d003      	beq.n	801780a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017802:	f06f 0303 	mvn.w	r3, #3
 8017806:	617b      	str	r3, [r7, #20]
 8017808:	e019      	b.n	801783e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801780a:	f3ef 8305 	mrs	r3, IPSR
 801780e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017810:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00e      	beq.n	8017834 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8017816:	6938      	ldr	r0, [r7, #16]
 8017818:	f000 fa1c 	bl	8017c54 <xEventGroupGetBitsFromISR>
 801781c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801781e:	6839      	ldr	r1, [r7, #0]
 8017820:	6938      	ldr	r0, [r7, #16]
 8017822:	f000 fa03 	bl	8017c2c <xEventGroupClearBitsFromISR>
 8017826:	4603      	mov	r3, r0
 8017828:	2b00      	cmp	r3, #0
 801782a:	d108      	bne.n	801783e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801782c:	f06f 0302 	mvn.w	r3, #2
 8017830:	617b      	str	r3, [r7, #20]
 8017832:	e004      	b.n	801783e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017834:	6839      	ldr	r1, [r7, #0]
 8017836:	6938      	ldr	r0, [r7, #16]
 8017838:	f000 f9c0 	bl	8017bbc <xEventGroupClearBits>
 801783c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801783e:	697b      	ldr	r3, [r7, #20]
}
 8017840:	4618      	mov	r0, r3
 8017842:	3718      	adds	r7, #24
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8017848:	b580      	push	{r7, lr}
 801784a:	b08c      	sub	sp, #48	; 0x30
 801784c:	af02      	add	r7, sp, #8
 801784e:	60f8      	str	r0, [r7, #12]
 8017850:	60b9      	str	r1, [r7, #8]
 8017852:	607a      	str	r2, [r7, #4]
 8017854:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801785a:	69bb      	ldr	r3, [r7, #24]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d004      	beq.n	801786a <osEventFlagsWait+0x22>
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017866:	2b00      	cmp	r3, #0
 8017868:	d003      	beq.n	8017872 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801786a:	f06f 0303 	mvn.w	r3, #3
 801786e:	61fb      	str	r3, [r7, #28]
 8017870:	e04b      	b.n	801790a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017872:	f3ef 8305 	mrs	r3, IPSR
 8017876:	617b      	str	r3, [r7, #20]
  return(result);
 8017878:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801787a:	2b00      	cmp	r3, #0
 801787c:	d003      	beq.n	8017886 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801787e:	f06f 0305 	mvn.w	r3, #5
 8017882:	61fb      	str	r3, [r7, #28]
 8017884:	e041      	b.n	801790a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f003 0301 	and.w	r3, r3, #1
 801788c:	2b00      	cmp	r3, #0
 801788e:	d002      	beq.n	8017896 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8017890:	2301      	movs	r3, #1
 8017892:	627b      	str	r3, [r7, #36]	; 0x24
 8017894:	e001      	b.n	801789a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8017896:	2300      	movs	r3, #0
 8017898:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	f003 0302 	and.w	r3, r3, #2
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d002      	beq.n	80178aa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80178a4:	2300      	movs	r3, #0
 80178a6:	623b      	str	r3, [r7, #32]
 80178a8:	e001      	b.n	80178ae <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80178aa:	2301      	movs	r3, #1
 80178ac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	9300      	str	r3, [sp, #0]
 80178b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b4:	6a3a      	ldr	r2, [r7, #32]
 80178b6:	68b9      	ldr	r1, [r7, #8]
 80178b8:	69b8      	ldr	r0, [r7, #24]
 80178ba:	f000 f8b1 	bl	8017a20 <xEventGroupWaitBits>
 80178be:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f003 0301 	and.w	r3, r3, #1
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d010      	beq.n	80178ec <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	69fb      	ldr	r3, [r7, #28]
 80178ce:	4013      	ands	r3, r2
 80178d0:	68ba      	ldr	r2, [r7, #8]
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d019      	beq.n	801790a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d003      	beq.n	80178e4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80178dc:	f06f 0301 	mvn.w	r3, #1
 80178e0:	61fb      	str	r3, [r7, #28]
 80178e2:	e012      	b.n	801790a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80178e4:	f06f 0302 	mvn.w	r3, #2
 80178e8:	61fb      	str	r3, [r7, #28]
 80178ea:	e00e      	b.n	801790a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80178ec:	68ba      	ldr	r2, [r7, #8]
 80178ee:	69fb      	ldr	r3, [r7, #28]
 80178f0:	4013      	ands	r3, r2
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d109      	bne.n	801790a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d003      	beq.n	8017904 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80178fc:	f06f 0301 	mvn.w	r3, #1
 8017900:	61fb      	str	r3, [r7, #28]
 8017902:	e002      	b.n	801790a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017904:	f06f 0302 	mvn.w	r3, #2
 8017908:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801790a:	69fb      	ldr	r3, [r7, #28]
}
 801790c:	4618      	mov	r0, r3
 801790e:	3728      	adds	r7, #40	; 0x28
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017914:	b480      	push	{r7}
 8017916:	b085      	sub	sp, #20
 8017918:	af00      	add	r7, sp, #0
 801791a:	60f8      	str	r0, [r7, #12]
 801791c:	60b9      	str	r1, [r7, #8]
 801791e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	4a07      	ldr	r2, [pc, #28]	; (8017940 <vApplicationGetIdleTaskMemory+0x2c>)
 8017924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	4a06      	ldr	r2, [pc, #24]	; (8017944 <vApplicationGetIdleTaskMemory+0x30>)
 801792a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2280      	movs	r2, #128	; 0x80
 8017930:	601a      	str	r2, [r3, #0]
}
 8017932:	bf00      	nop
 8017934:	3714      	adds	r7, #20
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
 801793e:	bf00      	nop
 8017940:	2400208c 	.word	0x2400208c
 8017944:	240020e8 	.word	0x240020e8

08017948 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017948:	b480      	push	{r7}
 801794a:	b085      	sub	sp, #20
 801794c:	af00      	add	r7, sp, #0
 801794e:	60f8      	str	r0, [r7, #12]
 8017950:	60b9      	str	r1, [r7, #8]
 8017952:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	4a07      	ldr	r2, [pc, #28]	; (8017974 <vApplicationGetTimerTaskMemory+0x2c>)
 8017958:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801795a:	68bb      	ldr	r3, [r7, #8]
 801795c:	4a06      	ldr	r2, [pc, #24]	; (8017978 <vApplicationGetTimerTaskMemory+0x30>)
 801795e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017966:	601a      	str	r2, [r3, #0]
}
 8017968:	bf00      	nop
 801796a:	3714      	adds	r7, #20
 801796c:	46bd      	mov	sp, r7
 801796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017972:	4770      	bx	lr
 8017974:	240022e8 	.word	0x240022e8
 8017978:	24002344 	.word	0x24002344

0801797c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801797c:	b580      	push	{r7, lr}
 801797e:	b086      	sub	sp, #24
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d10a      	bne.n	80179a0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801798e:	f383 8811 	msr	BASEPRI, r3
 8017992:	f3bf 8f6f 	isb	sy
 8017996:	f3bf 8f4f 	dsb	sy
 801799a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801799c:	bf00      	nop
 801799e:	e7fe      	b.n	801799e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80179a0:	2320      	movs	r3, #32
 80179a2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	2b20      	cmp	r3, #32
 80179a8:	d00a      	beq.n	80179c0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80179aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179ae:	f383 8811 	msr	BASEPRI, r3
 80179b2:	f3bf 8f6f 	isb	sy
 80179b6:	f3bf 8f4f 	dsb	sy
 80179ba:	60fb      	str	r3, [r7, #12]
}
 80179bc:	bf00      	nop
 80179be:	e7fe      	b.n	80179be <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d00a      	beq.n	80179e0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	2200      	movs	r2, #0
 80179ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	3304      	adds	r3, #4
 80179d4:	4618      	mov	r0, r3
 80179d6:	f000 fa3d 	bl	8017e54 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80179da:	697b      	ldr	r3, [r7, #20]
 80179dc:	2201      	movs	r2, #1
 80179de:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80179e0:	697b      	ldr	r3, [r7, #20]
	}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3718      	adds	r7, #24
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}

080179ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b082      	sub	sp, #8
 80179ee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80179f0:	2020      	movs	r0, #32
 80179f2:	f002 fe59 	bl	801a6a8 <pvPortMalloc>
 80179f6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d00a      	beq.n	8017a14 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	2200      	movs	r2, #0
 8017a02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	3304      	adds	r3, #4
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f000 fa23 	bl	8017e54 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	2200      	movs	r2, #0
 8017a12:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017a14:	687b      	ldr	r3, [r7, #4]
	}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3708      	adds	r7, #8
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
	...

08017a20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b090      	sub	sp, #64	; 0x40
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	60f8      	str	r0, [r7, #12]
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
 8017a2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017a32:	2300      	movs	r3, #0
 8017a34:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017a36:	2300      	movs	r3, #0
 8017a38:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d10a      	bne.n	8017a56 <xEventGroupWaitBits+0x36>
	__asm volatile
 8017a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a44:	f383 8811 	msr	BASEPRI, r3
 8017a48:	f3bf 8f6f 	isb	sy
 8017a4c:	f3bf 8f4f 	dsb	sy
 8017a50:	623b      	str	r3, [r7, #32]
}
 8017a52:	bf00      	nop
 8017a54:	e7fe      	b.n	8017a54 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017a56:	68bb      	ldr	r3, [r7, #8]
 8017a58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00a      	beq.n	8017a76 <xEventGroupWaitBits+0x56>
	__asm volatile
 8017a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a64:	f383 8811 	msr	BASEPRI, r3
 8017a68:	f3bf 8f6f 	isb	sy
 8017a6c:	f3bf 8f4f 	dsb	sy
 8017a70:	61fb      	str	r3, [r7, #28]
}
 8017a72:	bf00      	nop
 8017a74:	e7fe      	b.n	8017a74 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d10a      	bne.n	8017a92 <xEventGroupWaitBits+0x72>
	__asm volatile
 8017a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a80:	f383 8811 	msr	BASEPRI, r3
 8017a84:	f3bf 8f6f 	isb	sy
 8017a88:	f3bf 8f4f 	dsb	sy
 8017a8c:	61bb      	str	r3, [r7, #24]
}
 8017a8e:	bf00      	nop
 8017a90:	e7fe      	b.n	8017a90 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a92:	f001 ff57 	bl	8019944 <xTaskGetSchedulerState>
 8017a96:	4603      	mov	r3, r0
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d102      	bne.n	8017aa2 <xEventGroupWaitBits+0x82>
 8017a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d101      	bne.n	8017aa6 <xEventGroupWaitBits+0x86>
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	e000      	b.n	8017aa8 <xEventGroupWaitBits+0x88>
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d10a      	bne.n	8017ac2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ab0:	f383 8811 	msr	BASEPRI, r3
 8017ab4:	f3bf 8f6f 	isb	sy
 8017ab8:	f3bf 8f4f 	dsb	sy
 8017abc:	617b      	str	r3, [r7, #20]
}
 8017abe:	bf00      	nop
 8017ac0:	e7fe      	b.n	8017ac0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017ac2:	f001 faa9 	bl	8019018 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	68b9      	ldr	r1, [r7, #8]
 8017ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ad2:	f000 f988 	bl	8017de6 <prvTestWaitCondition>
 8017ad6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00e      	beq.n	8017afc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d028      	beq.n	8017b3e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aee:	681a      	ldr	r2, [r3, #0]
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	43db      	mvns	r3, r3
 8017af4:	401a      	ands	r2, r3
 8017af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017af8:	601a      	str	r2, [r3, #0]
 8017afa:	e020      	b.n	8017b3e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d104      	bne.n	8017b0c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b04:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017b06:	2301      	movs	r3, #1
 8017b08:	633b      	str	r3, [r7, #48]	; 0x30
 8017b0a:	e018      	b.n	8017b3e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d003      	beq.n	8017b1a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017b18:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d003      	beq.n	8017b28 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017b26:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b2a:	1d18      	adds	r0, r3, #4
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b30:	4313      	orrs	r3, r2
 8017b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b34:	4619      	mov	r1, r3
 8017b36:	f001 fc7d 	bl	8019434 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017b3e:	f001 fa79 	bl	8019034 <xTaskResumeAll>
 8017b42:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d031      	beq.n	8017bae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8017b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d107      	bne.n	8017b60 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017b50:	4b19      	ldr	r3, [pc, #100]	; (8017bb8 <xEventGroupWaitBits+0x198>)
 8017b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b56:	601a      	str	r2, [r3, #0]
 8017b58:	f3bf 8f4f 	dsb	sy
 8017b5c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017b60:	f001 ff7c 	bl	8019a5c <uxTaskResetEventItemValue>
 8017b64:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d11a      	bne.n	8017ba6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017b70:	f002 fc78 	bl	801a464 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8017b7a:	683a      	ldr	r2, [r7, #0]
 8017b7c:	68b9      	ldr	r1, [r7, #8]
 8017b7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017b80:	f000 f931 	bl	8017de6 <prvTestWaitCondition>
 8017b84:	4603      	mov	r3, r0
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d009      	beq.n	8017b9e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d006      	beq.n	8017b9e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b92:	681a      	ldr	r2, [r3, #0]
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	43db      	mvns	r3, r3
 8017b98:	401a      	ands	r2, r3
 8017b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b9c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017ba2:	f002 fc8f 	bl	801a4c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017bac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3740      	adds	r7, #64	; 0x40
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	e000ed04 	.word	0xe000ed04

08017bbc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b086      	sub	sp, #24
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d10a      	bne.n	8017be6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd4:	f383 8811 	msr	BASEPRI, r3
 8017bd8:	f3bf 8f6f 	isb	sy
 8017bdc:	f3bf 8f4f 	dsb	sy
 8017be0:	60fb      	str	r3, [r7, #12]
}
 8017be2:	bf00      	nop
 8017be4:	e7fe      	b.n	8017be4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d00a      	beq.n	8017c06 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bf4:	f383 8811 	msr	BASEPRI, r3
 8017bf8:	f3bf 8f6f 	isb	sy
 8017bfc:	f3bf 8f4f 	dsb	sy
 8017c00:	60bb      	str	r3, [r7, #8]
}
 8017c02:	bf00      	nop
 8017c04:	e7fe      	b.n	8017c04 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017c06:	f002 fc2d 	bl	801a464 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017c10:	697b      	ldr	r3, [r7, #20]
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	43db      	mvns	r3, r3
 8017c18:	401a      	ands	r2, r3
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017c1e:	f002 fc51 	bl	801a4c4 <vPortExitCritical>

	return uxReturn;
 8017c22:	693b      	ldr	r3, [r7, #16]
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3718      	adds	r7, #24
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}

08017c2c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b084      	sub	sp, #16
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
 8017c34:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017c36:	2300      	movs	r3, #0
 8017c38:	683a      	ldr	r2, [r7, #0]
 8017c3a:	6879      	ldr	r1, [r7, #4]
 8017c3c:	4804      	ldr	r0, [pc, #16]	; (8017c50 <xEventGroupClearBitsFromISR+0x24>)
 8017c3e:	f002 fac7 	bl	801a1d0 <xTimerPendFunctionCallFromISR>
 8017c42:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017c44:	68fb      	ldr	r3, [r7, #12]
	}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	08017dcd 	.word	0x08017dcd

08017c54 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017c54:	b480      	push	{r7}
 8017c56:	b089      	sub	sp, #36	; 0x24
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017c60:	f3ef 8211 	mrs	r2, BASEPRI
 8017c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c68:	f383 8811 	msr	BASEPRI, r3
 8017c6c:	f3bf 8f6f 	isb	sy
 8017c70:	f3bf 8f4f 	dsb	sy
 8017c74:	60fa      	str	r2, [r7, #12]
 8017c76:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017c78:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017c7a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017c7c:	69fb      	ldr	r3, [r7, #28]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	617b      	str	r3, [r7, #20]
 8017c82:	69bb      	ldr	r3, [r7, #24]
 8017c84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017c8c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8017c8e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017c90:	4618      	mov	r0, r3
 8017c92:	3724      	adds	r7, #36	; 0x24
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr

08017c9c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b08e      	sub	sp, #56	; 0x38
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
 8017ca4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d10a      	bne.n	8017cce <xEventGroupSetBits+0x32>
	__asm volatile
 8017cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cbc:	f383 8811 	msr	BASEPRI, r3
 8017cc0:	f3bf 8f6f 	isb	sy
 8017cc4:	f3bf 8f4f 	dsb	sy
 8017cc8:	613b      	str	r3, [r7, #16]
}
 8017cca:	bf00      	nop
 8017ccc:	e7fe      	b.n	8017ccc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d00a      	beq.n	8017cee <xEventGroupSetBits+0x52>
	__asm volatile
 8017cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cdc:	f383 8811 	msr	BASEPRI, r3
 8017ce0:	f3bf 8f6f 	isb	sy
 8017ce4:	f3bf 8f4f 	dsb	sy
 8017ce8:	60fb      	str	r3, [r7, #12]
}
 8017cea:	bf00      	nop
 8017cec:	e7fe      	b.n	8017cec <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf0:	3304      	adds	r3, #4
 8017cf2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf6:	3308      	adds	r3, #8
 8017cf8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8017cfa:	f001 f98d 	bl	8019018 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d00:	68db      	ldr	r3, [r3, #12]
 8017d02:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d06:	681a      	ldr	r2, [r3, #0]
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	431a      	orrs	r2, r3
 8017d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017d10:	e03c      	b.n	8017d8c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017d22:	69bb      	ldr	r3, [r7, #24]
 8017d24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017d28:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017d30:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017d32:	697b      	ldr	r3, [r7, #20]
 8017d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d108      	bne.n	8017d4e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	69bb      	ldr	r3, [r7, #24]
 8017d42:	4013      	ands	r3, r2
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d00b      	beq.n	8017d60 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d4c:	e008      	b.n	8017d60 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d50:	681a      	ldr	r2, [r3, #0]
 8017d52:	69bb      	ldr	r3, [r7, #24]
 8017d54:	4013      	ands	r3, r2
 8017d56:	69ba      	ldr	r2, [r7, #24]
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d101      	bne.n	8017d60 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d010      	beq.n	8017d88 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d003      	beq.n	8017d78 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	4313      	orrs	r3, r2
 8017d76:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017d80:	4619      	mov	r1, r3
 8017d82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017d84:	f001 fc22 	bl	80195cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017d88:	69fb      	ldr	r3, [r7, #28]
 8017d8a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d8e:	6a3b      	ldr	r3, [r7, #32]
 8017d90:	429a      	cmp	r2, r3
 8017d92:	d1be      	bne.n	8017d12 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d96:	681a      	ldr	r2, [r3, #0]
 8017d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9a:	43db      	mvns	r3, r3
 8017d9c:	401a      	ands	r2, r3
 8017d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017da2:	f001 f947 	bl	8019034 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da8:	681b      	ldr	r3, [r3, #0]
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3738      	adds	r7, #56	; 0x38
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}

08017db2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017db2:	b580      	push	{r7, lr}
 8017db4:	b082      	sub	sp, #8
 8017db6:	af00      	add	r7, sp, #0
 8017db8:	6078      	str	r0, [r7, #4]
 8017dba:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017dbc:	6839      	ldr	r1, [r7, #0]
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7ff ff6c 	bl	8017c9c <xEventGroupSetBits>
}
 8017dc4:	bf00      	nop
 8017dc6:	3708      	adds	r7, #8
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd80      	pop	{r7, pc}

08017dcc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b082      	sub	sp, #8
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
 8017dd4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017dd6:	6839      	ldr	r1, [r7, #0]
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f7ff feef 	bl	8017bbc <xEventGroupClearBits>
}
 8017dde:	bf00      	nop
 8017de0:	3708      	adds	r7, #8
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}

08017de6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017de6:	b480      	push	{r7}
 8017de8:	b087      	sub	sp, #28
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	60f8      	str	r0, [r7, #12]
 8017dee:	60b9      	str	r1, [r7, #8]
 8017df0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017df2:	2300      	movs	r3, #0
 8017df4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d107      	bne.n	8017e0c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017dfc:	68fa      	ldr	r2, [r7, #12]
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	4013      	ands	r3, r2
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d00a      	beq.n	8017e1c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017e06:	2301      	movs	r3, #1
 8017e08:	617b      	str	r3, [r7, #20]
 8017e0a:	e007      	b.n	8017e1c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	4013      	ands	r3, r2
 8017e12:	68ba      	ldr	r2, [r7, #8]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d101      	bne.n	8017e1c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017e18:	2301      	movs	r3, #1
 8017e1a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017e1c:	697b      	ldr	r3, [r7, #20]
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	371c      	adds	r7, #28
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr
	...

08017e2c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b086      	sub	sp, #24
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	60f8      	str	r0, [r7, #12]
 8017e34:	60b9      	str	r1, [r7, #8]
 8017e36:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	68ba      	ldr	r2, [r7, #8]
 8017e3c:	68f9      	ldr	r1, [r7, #12]
 8017e3e:	4804      	ldr	r0, [pc, #16]	; (8017e50 <xEventGroupSetBitsFromISR+0x24>)
 8017e40:	f002 f9c6 	bl	801a1d0 <xTimerPendFunctionCallFromISR>
 8017e44:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017e46:	697b      	ldr	r3, [r7, #20]
	}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	3718      	adds	r7, #24
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}
 8017e50:	08017db3 	.word	0x08017db3

08017e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017e54:	b480      	push	{r7}
 8017e56:	b083      	sub	sp, #12
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	f103 0208 	add.w	r2, r3, #8
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f103 0208 	add.w	r2, r3, #8
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f103 0208 	add.w	r2, r3, #8
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2200      	movs	r2, #0
 8017e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017e88:	bf00      	nop
 8017e8a:	370c      	adds	r7, #12
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e92:	4770      	bx	lr

08017e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017ea2:	bf00      	nop
 8017ea4:	370c      	adds	r7, #12
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eac:	4770      	bx	lr

08017eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017eae:	b480      	push	{r7}
 8017eb0:	b085      	sub	sp, #20
 8017eb2:	af00      	add	r7, sp, #0
 8017eb4:	6078      	str	r0, [r7, #4]
 8017eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	68fa      	ldr	r2, [r7, #12]
 8017ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	689a      	ldr	r2, [r3, #8]
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	689b      	ldr	r3, [r3, #8]
 8017ed0:	683a      	ldr	r2, [r7, #0]
 8017ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	683a      	ldr	r2, [r7, #0]
 8017ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	687a      	ldr	r2, [r7, #4]
 8017ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	1c5a      	adds	r2, r3, #1
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	601a      	str	r2, [r3, #0]
}
 8017eea:	bf00      	nop
 8017eec:	3714      	adds	r7, #20
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef4:	4770      	bx	lr

08017ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017ef6:	b480      	push	{r7}
 8017ef8:	b085      	sub	sp, #20
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f0c:	d103      	bne.n	8017f16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	691b      	ldr	r3, [r3, #16]
 8017f12:	60fb      	str	r3, [r7, #12]
 8017f14:	e00c      	b.n	8017f30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	3308      	adds	r3, #8
 8017f1a:	60fb      	str	r3, [r7, #12]
 8017f1c:	e002      	b.n	8017f24 <vListInsert+0x2e>
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	685b      	ldr	r3, [r3, #4]
 8017f22:	60fb      	str	r3, [r7, #12]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	685b      	ldr	r3, [r3, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	68ba      	ldr	r2, [r7, #8]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d2f6      	bcs.n	8017f1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	685a      	ldr	r2, [r3, #4]
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	683a      	ldr	r2, [r7, #0]
 8017f3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	68fa      	ldr	r2, [r7, #12]
 8017f44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	683a      	ldr	r2, [r7, #0]
 8017f4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	1c5a      	adds	r2, r3, #1
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	601a      	str	r2, [r3, #0]
}
 8017f5c:	bf00      	nop
 8017f5e:	3714      	adds	r7, #20
 8017f60:	46bd      	mov	sp, r7
 8017f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f66:	4770      	bx	lr

08017f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	685b      	ldr	r3, [r3, #4]
 8017f7a:	687a      	ldr	r2, [r7, #4]
 8017f7c:	6892      	ldr	r2, [r2, #8]
 8017f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	689b      	ldr	r3, [r3, #8]
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	6852      	ldr	r2, [r2, #4]
 8017f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	687a      	ldr	r2, [r7, #4]
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d103      	bne.n	8017f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	689a      	ldr	r2, [r3, #8]
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	1e5a      	subs	r2, r3, #1
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3714      	adds	r7, #20
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fba:	4770      	bx	lr

08017fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d10a      	bne.n	8017fe6 <xQueueGenericReset+0x2a>
	__asm volatile
 8017fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd4:	f383 8811 	msr	BASEPRI, r3
 8017fd8:	f3bf 8f6f 	isb	sy
 8017fdc:	f3bf 8f4f 	dsb	sy
 8017fe0:	60bb      	str	r3, [r7, #8]
}
 8017fe2:	bf00      	nop
 8017fe4:	e7fe      	b.n	8017fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017fe6:	f002 fa3d 	bl	801a464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681a      	ldr	r2, [r3, #0]
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ff2:	68f9      	ldr	r1, [r7, #12]
 8017ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017ff6:	fb01 f303 	mul.w	r3, r1, r3
 8017ffa:	441a      	add	r2, r3
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2200      	movs	r2, #0
 8018004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681a      	ldr	r2, [r3, #0]
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681a      	ldr	r2, [r3, #0]
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018016:	3b01      	subs	r3, #1
 8018018:	68f9      	ldr	r1, [r7, #12]
 801801a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801801c:	fb01 f303 	mul.w	r3, r1, r3
 8018020:	441a      	add	r2, r3
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	22ff      	movs	r2, #255	; 0xff
 801802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	22ff      	movs	r2, #255	; 0xff
 8018032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d114      	bne.n	8018066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	691b      	ldr	r3, [r3, #16]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d01a      	beq.n	801807a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	3310      	adds	r3, #16
 8018048:	4618      	mov	r0, r3
 801804a:	f001 fa5b 	bl	8019504 <xTaskRemoveFromEventList>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d012      	beq.n	801807a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018054:	4b0c      	ldr	r3, [pc, #48]	; (8018088 <xQueueGenericReset+0xcc>)
 8018056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801805a:	601a      	str	r2, [r3, #0]
 801805c:	f3bf 8f4f 	dsb	sy
 8018060:	f3bf 8f6f 	isb	sy
 8018064:	e009      	b.n	801807a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	3310      	adds	r3, #16
 801806a:	4618      	mov	r0, r3
 801806c:	f7ff fef2 	bl	8017e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	3324      	adds	r3, #36	; 0x24
 8018074:	4618      	mov	r0, r3
 8018076:	f7ff feed 	bl	8017e54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801807a:	f002 fa23 	bl	801a4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801807e:	2301      	movs	r3, #1
}
 8018080:	4618      	mov	r0, r3
 8018082:	3710      	adds	r7, #16
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}
 8018088:	e000ed04 	.word	0xe000ed04

0801808c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801808c:	b580      	push	{r7, lr}
 801808e:	b08e      	sub	sp, #56	; 0x38
 8018090:	af02      	add	r7, sp, #8
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	607a      	str	r2, [r7, #4]
 8018098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d10a      	bne.n	80180b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80180a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a4:	f383 8811 	msr	BASEPRI, r3
 80180a8:	f3bf 8f6f 	isb	sy
 80180ac:	f3bf 8f4f 	dsb	sy
 80180b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80180b2:	bf00      	nop
 80180b4:	e7fe      	b.n	80180b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d10a      	bne.n	80180d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80180bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c0:	f383 8811 	msr	BASEPRI, r3
 80180c4:	f3bf 8f6f 	isb	sy
 80180c8:	f3bf 8f4f 	dsb	sy
 80180cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180ce:	bf00      	nop
 80180d0:	e7fe      	b.n	80180d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d002      	beq.n	80180de <xQueueGenericCreateStatic+0x52>
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d001      	beq.n	80180e2 <xQueueGenericCreateStatic+0x56>
 80180de:	2301      	movs	r3, #1
 80180e0:	e000      	b.n	80180e4 <xQueueGenericCreateStatic+0x58>
 80180e2:	2300      	movs	r3, #0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d10a      	bne.n	80180fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80180e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ec:	f383 8811 	msr	BASEPRI, r3
 80180f0:	f3bf 8f6f 	isb	sy
 80180f4:	f3bf 8f4f 	dsb	sy
 80180f8:	623b      	str	r3, [r7, #32]
}
 80180fa:	bf00      	nop
 80180fc:	e7fe      	b.n	80180fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d102      	bne.n	801810a <xQueueGenericCreateStatic+0x7e>
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d101      	bne.n	801810e <xQueueGenericCreateStatic+0x82>
 801810a:	2301      	movs	r3, #1
 801810c:	e000      	b.n	8018110 <xQueueGenericCreateStatic+0x84>
 801810e:	2300      	movs	r3, #0
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10a      	bne.n	801812a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8018114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018118:	f383 8811 	msr	BASEPRI, r3
 801811c:	f3bf 8f6f 	isb	sy
 8018120:	f3bf 8f4f 	dsb	sy
 8018124:	61fb      	str	r3, [r7, #28]
}
 8018126:	bf00      	nop
 8018128:	e7fe      	b.n	8018128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801812a:	2350      	movs	r3, #80	; 0x50
 801812c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	2b50      	cmp	r3, #80	; 0x50
 8018132:	d00a      	beq.n	801814a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8018134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018138:	f383 8811 	msr	BASEPRI, r3
 801813c:	f3bf 8f6f 	isb	sy
 8018140:	f3bf 8f4f 	dsb	sy
 8018144:	61bb      	str	r3, [r7, #24]
}
 8018146:	bf00      	nop
 8018148:	e7fe      	b.n	8018148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801814a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00d      	beq.n	8018172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018158:	2201      	movs	r2, #1
 801815a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801815e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018164:	9300      	str	r3, [sp, #0]
 8018166:	4613      	mov	r3, r2
 8018168:	687a      	ldr	r2, [r7, #4]
 801816a:	68b9      	ldr	r1, [r7, #8]
 801816c:	68f8      	ldr	r0, [r7, #12]
 801816e:	f000 f805 	bl	801817c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018174:	4618      	mov	r0, r3
 8018176:	3730      	adds	r7, #48	; 0x30
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}

0801817c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b084      	sub	sp, #16
 8018180:	af00      	add	r7, sp, #0
 8018182:	60f8      	str	r0, [r7, #12]
 8018184:	60b9      	str	r1, [r7, #8]
 8018186:	607a      	str	r2, [r7, #4]
 8018188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801818a:	68bb      	ldr	r3, [r7, #8]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d103      	bne.n	8018198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018190:	69bb      	ldr	r3, [r7, #24]
 8018192:	69ba      	ldr	r2, [r7, #24]
 8018194:	601a      	str	r2, [r3, #0]
 8018196:	e002      	b.n	801819e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018198:	69bb      	ldr	r3, [r7, #24]
 801819a:	687a      	ldr	r2, [r7, #4]
 801819c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801819e:	69bb      	ldr	r3, [r7, #24]
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80181a4:	69bb      	ldr	r3, [r7, #24]
 80181a6:	68ba      	ldr	r2, [r7, #8]
 80181a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80181aa:	2101      	movs	r1, #1
 80181ac:	69b8      	ldr	r0, [r7, #24]
 80181ae:	f7ff ff05 	bl	8017fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	78fa      	ldrb	r2, [r7, #3]
 80181b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80181ba:	bf00      	nop
 80181bc:	3710      	adds	r7, #16
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
	...

080181c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b08e      	sub	sp, #56	; 0x38
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	60f8      	str	r0, [r7, #12]
 80181cc:	60b9      	str	r1, [r7, #8]
 80181ce:	607a      	str	r2, [r7, #4]
 80181d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80181d2:	2300      	movs	r3, #0
 80181d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80181da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d10a      	bne.n	80181f6 <xQueueGenericSend+0x32>
	__asm volatile
 80181e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e4:	f383 8811 	msr	BASEPRI, r3
 80181e8:	f3bf 8f6f 	isb	sy
 80181ec:	f3bf 8f4f 	dsb	sy
 80181f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80181f2:	bf00      	nop
 80181f4:	e7fe      	b.n	80181f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d103      	bne.n	8018204 <xQueueGenericSend+0x40>
 80181fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018200:	2b00      	cmp	r3, #0
 8018202:	d101      	bne.n	8018208 <xQueueGenericSend+0x44>
 8018204:	2301      	movs	r3, #1
 8018206:	e000      	b.n	801820a <xQueueGenericSend+0x46>
 8018208:	2300      	movs	r3, #0
 801820a:	2b00      	cmp	r3, #0
 801820c:	d10a      	bne.n	8018224 <xQueueGenericSend+0x60>
	__asm volatile
 801820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018212:	f383 8811 	msr	BASEPRI, r3
 8018216:	f3bf 8f6f 	isb	sy
 801821a:	f3bf 8f4f 	dsb	sy
 801821e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018220:	bf00      	nop
 8018222:	e7fe      	b.n	8018222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	2b02      	cmp	r3, #2
 8018228:	d103      	bne.n	8018232 <xQueueGenericSend+0x6e>
 801822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801822e:	2b01      	cmp	r3, #1
 8018230:	d101      	bne.n	8018236 <xQueueGenericSend+0x72>
 8018232:	2301      	movs	r3, #1
 8018234:	e000      	b.n	8018238 <xQueueGenericSend+0x74>
 8018236:	2300      	movs	r3, #0
 8018238:	2b00      	cmp	r3, #0
 801823a:	d10a      	bne.n	8018252 <xQueueGenericSend+0x8e>
	__asm volatile
 801823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018240:	f383 8811 	msr	BASEPRI, r3
 8018244:	f3bf 8f6f 	isb	sy
 8018248:	f3bf 8f4f 	dsb	sy
 801824c:	623b      	str	r3, [r7, #32]
}
 801824e:	bf00      	nop
 8018250:	e7fe      	b.n	8018250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018252:	f001 fb77 	bl	8019944 <xTaskGetSchedulerState>
 8018256:	4603      	mov	r3, r0
 8018258:	2b00      	cmp	r3, #0
 801825a:	d102      	bne.n	8018262 <xQueueGenericSend+0x9e>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d101      	bne.n	8018266 <xQueueGenericSend+0xa2>
 8018262:	2301      	movs	r3, #1
 8018264:	e000      	b.n	8018268 <xQueueGenericSend+0xa4>
 8018266:	2300      	movs	r3, #0
 8018268:	2b00      	cmp	r3, #0
 801826a:	d10a      	bne.n	8018282 <xQueueGenericSend+0xbe>
	__asm volatile
 801826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018270:	f383 8811 	msr	BASEPRI, r3
 8018274:	f3bf 8f6f 	isb	sy
 8018278:	f3bf 8f4f 	dsb	sy
 801827c:	61fb      	str	r3, [r7, #28]
}
 801827e:	bf00      	nop
 8018280:	e7fe      	b.n	8018280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018282:	f002 f8ef 	bl	801a464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801828e:	429a      	cmp	r2, r3
 8018290:	d302      	bcc.n	8018298 <xQueueGenericSend+0xd4>
 8018292:	683b      	ldr	r3, [r7, #0]
 8018294:	2b02      	cmp	r3, #2
 8018296:	d129      	bne.n	80182ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018298:	683a      	ldr	r2, [r7, #0]
 801829a:	68b9      	ldr	r1, [r7, #8]
 801829c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801829e:	f000 fa0b 	bl	80186b8 <prvCopyDataToQueue>
 80182a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80182a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d010      	beq.n	80182ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80182ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ae:	3324      	adds	r3, #36	; 0x24
 80182b0:	4618      	mov	r0, r3
 80182b2:	f001 f927 	bl	8019504 <xTaskRemoveFromEventList>
 80182b6:	4603      	mov	r3, r0
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d013      	beq.n	80182e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80182bc:	4b3f      	ldr	r3, [pc, #252]	; (80183bc <xQueueGenericSend+0x1f8>)
 80182be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182c2:	601a      	str	r2, [r3, #0]
 80182c4:	f3bf 8f4f 	dsb	sy
 80182c8:	f3bf 8f6f 	isb	sy
 80182cc:	e00a      	b.n	80182e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80182ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d007      	beq.n	80182e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80182d4:	4b39      	ldr	r3, [pc, #228]	; (80183bc <xQueueGenericSend+0x1f8>)
 80182d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182da:	601a      	str	r2, [r3, #0]
 80182dc:	f3bf 8f4f 	dsb	sy
 80182e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80182e4:	f002 f8ee 	bl	801a4c4 <vPortExitCritical>
				return pdPASS;
 80182e8:	2301      	movs	r3, #1
 80182ea:	e063      	b.n	80183b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d103      	bne.n	80182fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80182f2:	f002 f8e7 	bl	801a4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	e05c      	b.n	80183b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80182fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d106      	bne.n	801830e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018300:	f107 0314 	add.w	r3, r7, #20
 8018304:	4618      	mov	r0, r3
 8018306:	f001 f9c3 	bl	8019690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801830a:	2301      	movs	r3, #1
 801830c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801830e:	f002 f8d9 	bl	801a4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018312:	f000 fe81 	bl	8019018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018316:	f002 f8a5 	bl	801a464 <vPortEnterCritical>
 801831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018320:	b25b      	sxtb	r3, r3
 8018322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018326:	d103      	bne.n	8018330 <xQueueGenericSend+0x16c>
 8018328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832a:	2200      	movs	r2, #0
 801832c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018336:	b25b      	sxtb	r3, r3
 8018338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801833c:	d103      	bne.n	8018346 <xQueueGenericSend+0x182>
 801833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018340:	2200      	movs	r2, #0
 8018342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018346:	f002 f8bd 	bl	801a4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801834a:	1d3a      	adds	r2, r7, #4
 801834c:	f107 0314 	add.w	r3, r7, #20
 8018350:	4611      	mov	r1, r2
 8018352:	4618      	mov	r0, r3
 8018354:	f001 f9b2 	bl	80196bc <xTaskCheckForTimeOut>
 8018358:	4603      	mov	r3, r0
 801835a:	2b00      	cmp	r3, #0
 801835c:	d124      	bne.n	80183a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801835e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018360:	f000 faa2 	bl	80188a8 <prvIsQueueFull>
 8018364:	4603      	mov	r3, r0
 8018366:	2b00      	cmp	r3, #0
 8018368:	d018      	beq.n	801839c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801836c:	3310      	adds	r3, #16
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	4611      	mov	r1, r2
 8018372:	4618      	mov	r0, r3
 8018374:	f001 f83a 	bl	80193ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801837a:	f000 fa2d 	bl	80187d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801837e:	f000 fe59 	bl	8019034 <xTaskResumeAll>
 8018382:	4603      	mov	r3, r0
 8018384:	2b00      	cmp	r3, #0
 8018386:	f47f af7c 	bne.w	8018282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801838a:	4b0c      	ldr	r3, [pc, #48]	; (80183bc <xQueueGenericSend+0x1f8>)
 801838c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018390:	601a      	str	r2, [r3, #0]
 8018392:	f3bf 8f4f 	dsb	sy
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	e772      	b.n	8018282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801839e:	f000 fa1b 	bl	80187d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80183a2:	f000 fe47 	bl	8019034 <xTaskResumeAll>
 80183a6:	e76c      	b.n	8018282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80183a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183aa:	f000 fa15 	bl	80187d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80183ae:	f000 fe41 	bl	8019034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80183b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	3738      	adds	r7, #56	; 0x38
 80183b8:	46bd      	mov	sp, r7
 80183ba:	bd80      	pop	{r7, pc}
 80183bc:	e000ed04 	.word	0xe000ed04

080183c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b090      	sub	sp, #64	; 0x40
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	607a      	str	r2, [r7, #4]
 80183cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80183d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d10a      	bne.n	80183ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80183d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183dc:	f383 8811 	msr	BASEPRI, r3
 80183e0:	f3bf 8f6f 	isb	sy
 80183e4:	f3bf 8f4f 	dsb	sy
 80183e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80183ea:	bf00      	nop
 80183ec:	e7fe      	b.n	80183ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d103      	bne.n	80183fc <xQueueGenericSendFromISR+0x3c>
 80183f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d101      	bne.n	8018400 <xQueueGenericSendFromISR+0x40>
 80183fc:	2301      	movs	r3, #1
 80183fe:	e000      	b.n	8018402 <xQueueGenericSendFromISR+0x42>
 8018400:	2300      	movs	r3, #0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d10a      	bne.n	801841c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840a:	f383 8811 	msr	BASEPRI, r3
 801840e:	f3bf 8f6f 	isb	sy
 8018412:	f3bf 8f4f 	dsb	sy
 8018416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018418:	bf00      	nop
 801841a:	e7fe      	b.n	801841a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	2b02      	cmp	r3, #2
 8018420:	d103      	bne.n	801842a <xQueueGenericSendFromISR+0x6a>
 8018422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018426:	2b01      	cmp	r3, #1
 8018428:	d101      	bne.n	801842e <xQueueGenericSendFromISR+0x6e>
 801842a:	2301      	movs	r3, #1
 801842c:	e000      	b.n	8018430 <xQueueGenericSendFromISR+0x70>
 801842e:	2300      	movs	r3, #0
 8018430:	2b00      	cmp	r3, #0
 8018432:	d10a      	bne.n	801844a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018438:	f383 8811 	msr	BASEPRI, r3
 801843c:	f3bf 8f6f 	isb	sy
 8018440:	f3bf 8f4f 	dsb	sy
 8018444:	623b      	str	r3, [r7, #32]
}
 8018446:	bf00      	nop
 8018448:	e7fe      	b.n	8018448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801844a:	f002 f8ed 	bl	801a628 <vPortValidateInterruptPriority>
	__asm volatile
 801844e:	f3ef 8211 	mrs	r2, BASEPRI
 8018452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018456:	f383 8811 	msr	BASEPRI, r3
 801845a:	f3bf 8f6f 	isb	sy
 801845e:	f3bf 8f4f 	dsb	sy
 8018462:	61fa      	str	r2, [r7, #28]
 8018464:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8018466:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018468:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801846c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018472:	429a      	cmp	r2, r3
 8018474:	d302      	bcc.n	801847c <xQueueGenericSendFromISR+0xbc>
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	2b02      	cmp	r3, #2
 801847a:	d12f      	bne.n	80184dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801847e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801848a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801848c:	683a      	ldr	r2, [r7, #0]
 801848e:	68b9      	ldr	r1, [r7, #8]
 8018490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018492:	f000 f911 	bl	80186b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018496:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801849a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801849e:	d112      	bne.n	80184c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80184a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d016      	beq.n	80184d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80184a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184aa:	3324      	adds	r3, #36	; 0x24
 80184ac:	4618      	mov	r0, r3
 80184ae:	f001 f829 	bl	8019504 <xTaskRemoveFromEventList>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d00e      	beq.n	80184d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d00b      	beq.n	80184d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2201      	movs	r2, #1
 80184c2:	601a      	str	r2, [r3, #0]
 80184c4:	e007      	b.n	80184d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80184c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80184ca:	3301      	adds	r3, #1
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	b25a      	sxtb	r2, r3
 80184d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80184d6:	2301      	movs	r3, #1
 80184d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80184da:	e001      	b.n	80184e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80184dc:	2300      	movs	r3, #0
 80184de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184e2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	f383 8811 	msr	BASEPRI, r3
}
 80184ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80184ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3740      	adds	r7, #64	; 0x40
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
	...

080184f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b08c      	sub	sp, #48	; 0x30
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	60f8      	str	r0, [r7, #12]
 8018500:	60b9      	str	r1, [r7, #8]
 8018502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018504:	2300      	movs	r3, #0
 8018506:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801850e:	2b00      	cmp	r3, #0
 8018510:	d10a      	bne.n	8018528 <xQueueReceive+0x30>
	__asm volatile
 8018512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018516:	f383 8811 	msr	BASEPRI, r3
 801851a:	f3bf 8f6f 	isb	sy
 801851e:	f3bf 8f4f 	dsb	sy
 8018522:	623b      	str	r3, [r7, #32]
}
 8018524:	bf00      	nop
 8018526:	e7fe      	b.n	8018526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d103      	bne.n	8018536 <xQueueReceive+0x3e>
 801852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018532:	2b00      	cmp	r3, #0
 8018534:	d101      	bne.n	801853a <xQueueReceive+0x42>
 8018536:	2301      	movs	r3, #1
 8018538:	e000      	b.n	801853c <xQueueReceive+0x44>
 801853a:	2300      	movs	r3, #0
 801853c:	2b00      	cmp	r3, #0
 801853e:	d10a      	bne.n	8018556 <xQueueReceive+0x5e>
	__asm volatile
 8018540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018544:	f383 8811 	msr	BASEPRI, r3
 8018548:	f3bf 8f6f 	isb	sy
 801854c:	f3bf 8f4f 	dsb	sy
 8018550:	61fb      	str	r3, [r7, #28]
}
 8018552:	bf00      	nop
 8018554:	e7fe      	b.n	8018554 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018556:	f001 f9f5 	bl	8019944 <xTaskGetSchedulerState>
 801855a:	4603      	mov	r3, r0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d102      	bne.n	8018566 <xQueueReceive+0x6e>
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d101      	bne.n	801856a <xQueueReceive+0x72>
 8018566:	2301      	movs	r3, #1
 8018568:	e000      	b.n	801856c <xQueueReceive+0x74>
 801856a:	2300      	movs	r3, #0
 801856c:	2b00      	cmp	r3, #0
 801856e:	d10a      	bne.n	8018586 <xQueueReceive+0x8e>
	__asm volatile
 8018570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018574:	f383 8811 	msr	BASEPRI, r3
 8018578:	f3bf 8f6f 	isb	sy
 801857c:	f3bf 8f4f 	dsb	sy
 8018580:	61bb      	str	r3, [r7, #24]
}
 8018582:	bf00      	nop
 8018584:	e7fe      	b.n	8018584 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018586:	f001 ff6d 	bl	801a464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801858e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018592:	2b00      	cmp	r3, #0
 8018594:	d01f      	beq.n	80185d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018596:	68b9      	ldr	r1, [r7, #8]
 8018598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801859a:	f000 f8f7 	bl	801878c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a0:	1e5a      	subs	r2, r3, #1
 80185a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80185a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185a8:	691b      	ldr	r3, [r3, #16]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d00f      	beq.n	80185ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80185ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b0:	3310      	adds	r3, #16
 80185b2:	4618      	mov	r0, r3
 80185b4:	f000 ffa6 	bl	8019504 <xTaskRemoveFromEventList>
 80185b8:	4603      	mov	r3, r0
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d007      	beq.n	80185ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80185be:	4b3d      	ldr	r3, [pc, #244]	; (80186b4 <xQueueReceive+0x1bc>)
 80185c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185c4:	601a      	str	r2, [r3, #0]
 80185c6:	f3bf 8f4f 	dsb	sy
 80185ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80185ce:	f001 ff79 	bl	801a4c4 <vPortExitCritical>
				return pdPASS;
 80185d2:	2301      	movs	r3, #1
 80185d4:	e069      	b.n	80186aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d103      	bne.n	80185e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80185dc:	f001 ff72 	bl	801a4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80185e0:	2300      	movs	r3, #0
 80185e2:	e062      	b.n	80186aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80185e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d106      	bne.n	80185f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80185ea:	f107 0310 	add.w	r3, r7, #16
 80185ee:	4618      	mov	r0, r3
 80185f0:	f001 f84e 	bl	8019690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80185f4:	2301      	movs	r3, #1
 80185f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80185f8:	f001 ff64 	bl	801a4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80185fc:	f000 fd0c 	bl	8019018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018600:	f001 ff30 	bl	801a464 <vPortEnterCritical>
 8018604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801860a:	b25b      	sxtb	r3, r3
 801860c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018610:	d103      	bne.n	801861a <xQueueReceive+0x122>
 8018612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018614:	2200      	movs	r2, #0
 8018616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018620:	b25b      	sxtb	r3, r3
 8018622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018626:	d103      	bne.n	8018630 <xQueueReceive+0x138>
 8018628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801862a:	2200      	movs	r2, #0
 801862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018630:	f001 ff48 	bl	801a4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018634:	1d3a      	adds	r2, r7, #4
 8018636:	f107 0310 	add.w	r3, r7, #16
 801863a:	4611      	mov	r1, r2
 801863c:	4618      	mov	r0, r3
 801863e:	f001 f83d 	bl	80196bc <xTaskCheckForTimeOut>
 8018642:	4603      	mov	r3, r0
 8018644:	2b00      	cmp	r3, #0
 8018646:	d123      	bne.n	8018690 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801864a:	f000 f917 	bl	801887c <prvIsQueueEmpty>
 801864e:	4603      	mov	r3, r0
 8018650:	2b00      	cmp	r3, #0
 8018652:	d017      	beq.n	8018684 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018656:	3324      	adds	r3, #36	; 0x24
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	4611      	mov	r1, r2
 801865c:	4618      	mov	r0, r3
 801865e:	f000 fec5 	bl	80193ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018664:	f000 f8b8 	bl	80187d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018668:	f000 fce4 	bl	8019034 <xTaskResumeAll>
 801866c:	4603      	mov	r3, r0
 801866e:	2b00      	cmp	r3, #0
 8018670:	d189      	bne.n	8018586 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018672:	4b10      	ldr	r3, [pc, #64]	; (80186b4 <xQueueReceive+0x1bc>)
 8018674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018678:	601a      	str	r2, [r3, #0]
 801867a:	f3bf 8f4f 	dsb	sy
 801867e:	f3bf 8f6f 	isb	sy
 8018682:	e780      	b.n	8018586 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018686:	f000 f8a7 	bl	80187d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801868a:	f000 fcd3 	bl	8019034 <xTaskResumeAll>
 801868e:	e77a      	b.n	8018586 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018692:	f000 f8a1 	bl	80187d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018696:	f000 fccd 	bl	8019034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801869c:	f000 f8ee 	bl	801887c <prvIsQueueEmpty>
 80186a0:	4603      	mov	r3, r0
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	f43f af6f 	beq.w	8018586 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80186a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80186aa:	4618      	mov	r0, r3
 80186ac:	3730      	adds	r7, #48	; 0x30
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}
 80186b2:	bf00      	nop
 80186b4:	e000ed04 	.word	0xe000ed04

080186b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b086      	sub	sp, #24
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80186c4:	2300      	movs	r3, #0
 80186c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d10d      	bne.n	80186f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d14d      	bne.n	801877a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	689b      	ldr	r3, [r3, #8]
 80186e2:	4618      	mov	r0, r3
 80186e4:	f001 f94c 	bl	8019980 <xTaskPriorityDisinherit>
 80186e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2200      	movs	r2, #0
 80186ee:	609a      	str	r2, [r3, #8]
 80186f0:	e043      	b.n	801877a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d119      	bne.n	801872c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	6858      	ldr	r0, [r3, #4]
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018700:	461a      	mov	r2, r3
 8018702:	68b9      	ldr	r1, [r7, #8]
 8018704:	f002 f9e4 	bl	801aad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	685a      	ldr	r2, [r3, #4]
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018710:	441a      	add	r2, r3
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	685a      	ldr	r2, [r3, #4]
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	689b      	ldr	r3, [r3, #8]
 801871e:	429a      	cmp	r2, r3
 8018720:	d32b      	bcc.n	801877a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	681a      	ldr	r2, [r3, #0]
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	605a      	str	r2, [r3, #4]
 801872a:	e026      	b.n	801877a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	68d8      	ldr	r0, [r3, #12]
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018734:	461a      	mov	r2, r3
 8018736:	68b9      	ldr	r1, [r7, #8]
 8018738:	f002 f9ca 	bl	801aad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	68da      	ldr	r2, [r3, #12]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018744:	425b      	negs	r3, r3
 8018746:	441a      	add	r2, r3
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	68da      	ldr	r2, [r3, #12]
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	429a      	cmp	r2, r3
 8018756:	d207      	bcs.n	8018768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	689a      	ldr	r2, [r3, #8]
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018760:	425b      	negs	r3, r3
 8018762:	441a      	add	r2, r3
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2b02      	cmp	r3, #2
 801876c:	d105      	bne.n	801877a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d002      	beq.n	801877a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018774:	693b      	ldr	r3, [r7, #16]
 8018776:	3b01      	subs	r3, #1
 8018778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	1c5a      	adds	r2, r3, #1
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018782:	697b      	ldr	r3, [r7, #20]
}
 8018784:	4618      	mov	r0, r3
 8018786:	3718      	adds	r7, #24
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801879a:	2b00      	cmp	r3, #0
 801879c:	d018      	beq.n	80187d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	68da      	ldr	r2, [r3, #12]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187a6:	441a      	add	r2, r3
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	68da      	ldr	r2, [r3, #12]
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	689b      	ldr	r3, [r3, #8]
 80187b4:	429a      	cmp	r2, r3
 80187b6:	d303      	bcc.n	80187c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	68d9      	ldr	r1, [r3, #12]
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187c8:	461a      	mov	r2, r3
 80187ca:	6838      	ldr	r0, [r7, #0]
 80187cc:	f002 f980 	bl	801aad0 <memcpy>
	}
}
 80187d0:	bf00      	nop
 80187d2:	3708      	adds	r7, #8
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80187e0:	f001 fe40 	bl	801a464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80187ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80187ec:	e011      	b.n	8018812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d012      	beq.n	801881c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	3324      	adds	r3, #36	; 0x24
 80187fa:	4618      	mov	r0, r3
 80187fc:	f000 fe82 	bl	8019504 <xTaskRemoveFromEventList>
 8018800:	4603      	mov	r3, r0
 8018802:	2b00      	cmp	r3, #0
 8018804:	d001      	beq.n	801880a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018806:	f000 ffbb 	bl	8019780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801880a:	7bfb      	ldrb	r3, [r7, #15]
 801880c:	3b01      	subs	r3, #1
 801880e:	b2db      	uxtb	r3, r3
 8018810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018816:	2b00      	cmp	r3, #0
 8018818:	dce9      	bgt.n	80187ee <prvUnlockQueue+0x16>
 801881a:	e000      	b.n	801881e <prvUnlockQueue+0x46>
					break;
 801881c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	22ff      	movs	r2, #255	; 0xff
 8018822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018826:	f001 fe4d 	bl	801a4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801882a:	f001 fe1b 	bl	801a464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018836:	e011      	b.n	801885c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	691b      	ldr	r3, [r3, #16]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d012      	beq.n	8018866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	3310      	adds	r3, #16
 8018844:	4618      	mov	r0, r3
 8018846:	f000 fe5d 	bl	8019504 <xTaskRemoveFromEventList>
 801884a:	4603      	mov	r3, r0
 801884c:	2b00      	cmp	r3, #0
 801884e:	d001      	beq.n	8018854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018850:	f000 ff96 	bl	8019780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018854:	7bbb      	ldrb	r3, [r7, #14]
 8018856:	3b01      	subs	r3, #1
 8018858:	b2db      	uxtb	r3, r3
 801885a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801885c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018860:	2b00      	cmp	r3, #0
 8018862:	dce9      	bgt.n	8018838 <prvUnlockQueue+0x60>
 8018864:	e000      	b.n	8018868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	22ff      	movs	r2, #255	; 0xff
 801886c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018870:	f001 fe28 	bl	801a4c4 <vPortExitCritical>
}
 8018874:	bf00      	nop
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b084      	sub	sp, #16
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018884:	f001 fdee 	bl	801a464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801888c:	2b00      	cmp	r3, #0
 801888e:	d102      	bne.n	8018896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018890:	2301      	movs	r3, #1
 8018892:	60fb      	str	r3, [r7, #12]
 8018894:	e001      	b.n	801889a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018896:	2300      	movs	r3, #0
 8018898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801889a:	f001 fe13 	bl	801a4c4 <vPortExitCritical>

	return xReturn;
 801889e:	68fb      	ldr	r3, [r7, #12]
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3710      	adds	r7, #16
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b084      	sub	sp, #16
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80188b0:	f001 fdd8 	bl	801a464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188bc:	429a      	cmp	r2, r3
 80188be:	d102      	bne.n	80188c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80188c0:	2301      	movs	r3, #1
 80188c2:	60fb      	str	r3, [r7, #12]
 80188c4:	e001      	b.n	80188ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80188c6:	2300      	movs	r3, #0
 80188c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80188ca:	f001 fdfb 	bl	801a4c4 <vPortExitCritical>

	return xReturn;
 80188ce:	68fb      	ldr	r3, [r7, #12]
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3710      	adds	r7, #16
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}

080188d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80188d8:	b480      	push	{r7}
 80188da:	b085      	sub	sp, #20
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80188e2:	2300      	movs	r3, #0
 80188e4:	60fb      	str	r3, [r7, #12]
 80188e6:	e014      	b.n	8018912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80188e8:	4a0f      	ldr	r2, [pc, #60]	; (8018928 <vQueueAddToRegistry+0x50>)
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d10b      	bne.n	801890c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80188f4:	490c      	ldr	r1, [pc, #48]	; (8018928 <vQueueAddToRegistry+0x50>)
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	683a      	ldr	r2, [r7, #0]
 80188fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80188fe:	4a0a      	ldr	r2, [pc, #40]	; (8018928 <vQueueAddToRegistry+0x50>)
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	4413      	add	r3, r2
 8018906:	687a      	ldr	r2, [r7, #4]
 8018908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801890a:	e006      	b.n	801891a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	3301      	adds	r3, #1
 8018910:	60fb      	str	r3, [r7, #12]
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2b07      	cmp	r3, #7
 8018916:	d9e7      	bls.n	80188e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018918:	bf00      	nop
 801891a:	bf00      	nop
 801891c:	3714      	adds	r7, #20
 801891e:	46bd      	mov	sp, r7
 8018920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018924:	4770      	bx	lr
 8018926:	bf00      	nop
 8018928:	24002744 	.word	0x24002744

0801892c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801892c:	b580      	push	{r7, lr}
 801892e:	b086      	sub	sp, #24
 8018930:	af00      	add	r7, sp, #0
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801893c:	f001 fd92 	bl	801a464 <vPortEnterCritical>
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018946:	b25b      	sxtb	r3, r3
 8018948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801894c:	d103      	bne.n	8018956 <vQueueWaitForMessageRestricted+0x2a>
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	2200      	movs	r2, #0
 8018952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018956:	697b      	ldr	r3, [r7, #20]
 8018958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801895c:	b25b      	sxtb	r3, r3
 801895e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018962:	d103      	bne.n	801896c <vQueueWaitForMessageRestricted+0x40>
 8018964:	697b      	ldr	r3, [r7, #20]
 8018966:	2200      	movs	r2, #0
 8018968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801896c:	f001 fdaa 	bl	801a4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018974:	2b00      	cmp	r3, #0
 8018976:	d106      	bne.n	8018986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	3324      	adds	r3, #36	; 0x24
 801897c:	687a      	ldr	r2, [r7, #4]
 801897e:	68b9      	ldr	r1, [r7, #8]
 8018980:	4618      	mov	r0, r3
 8018982:	f000 fd93 	bl	80194ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018986:	6978      	ldr	r0, [r7, #20]
 8018988:	f7ff ff26 	bl	80187d8 <prvUnlockQueue>
	}
 801898c:	bf00      	nop
 801898e:	3718      	adds	r7, #24
 8018990:	46bd      	mov	sp, r7
 8018992:	bd80      	pop	{r7, pc}

08018994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018994:	b580      	push	{r7, lr}
 8018996:	b08e      	sub	sp, #56	; 0x38
 8018998:	af04      	add	r7, sp, #16
 801899a:	60f8      	str	r0, [r7, #12]
 801899c:	60b9      	str	r1, [r7, #8]
 801899e:	607a      	str	r2, [r7, #4]
 80189a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80189a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d10a      	bne.n	80189be <xTaskCreateStatic+0x2a>
	__asm volatile
 80189a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ac:	f383 8811 	msr	BASEPRI, r3
 80189b0:	f3bf 8f6f 	isb	sy
 80189b4:	f3bf 8f4f 	dsb	sy
 80189b8:	623b      	str	r3, [r7, #32]
}
 80189ba:	bf00      	nop
 80189bc:	e7fe      	b.n	80189bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80189be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d10a      	bne.n	80189da <xTaskCreateStatic+0x46>
	__asm volatile
 80189c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c8:	f383 8811 	msr	BASEPRI, r3
 80189cc:	f3bf 8f6f 	isb	sy
 80189d0:	f3bf 8f4f 	dsb	sy
 80189d4:	61fb      	str	r3, [r7, #28]
}
 80189d6:	bf00      	nop
 80189d8:	e7fe      	b.n	80189d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80189da:	235c      	movs	r3, #92	; 0x5c
 80189dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	2b5c      	cmp	r3, #92	; 0x5c
 80189e2:	d00a      	beq.n	80189fa <xTaskCreateStatic+0x66>
	__asm volatile
 80189e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e8:	f383 8811 	msr	BASEPRI, r3
 80189ec:	f3bf 8f6f 	isb	sy
 80189f0:	f3bf 8f4f 	dsb	sy
 80189f4:	61bb      	str	r3, [r7, #24]
}
 80189f6:	bf00      	nop
 80189f8:	e7fe      	b.n	80189f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80189fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80189fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d01e      	beq.n	8018a40 <xTaskCreateStatic+0xac>
 8018a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d01b      	beq.n	8018a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a14:	2202      	movs	r2, #2
 8018a16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	9303      	str	r3, [sp, #12]
 8018a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a20:	9302      	str	r3, [sp, #8]
 8018a22:	f107 0314 	add.w	r3, r7, #20
 8018a26:	9301      	str	r3, [sp, #4]
 8018a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a2a:	9300      	str	r3, [sp, #0]
 8018a2c:	683b      	ldr	r3, [r7, #0]
 8018a2e:	687a      	ldr	r2, [r7, #4]
 8018a30:	68b9      	ldr	r1, [r7, #8]
 8018a32:	68f8      	ldr	r0, [r7, #12]
 8018a34:	f000 f850 	bl	8018ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a3a:	f000 f8dd 	bl	8018bf8 <prvAddNewTaskToReadyList>
 8018a3e:	e001      	b.n	8018a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018a40:	2300      	movs	r3, #0
 8018a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018a44:	697b      	ldr	r3, [r7, #20]
	}
 8018a46:	4618      	mov	r0, r3
 8018a48:	3728      	adds	r7, #40	; 0x28
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	bd80      	pop	{r7, pc}

08018a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018a4e:	b580      	push	{r7, lr}
 8018a50:	b08c      	sub	sp, #48	; 0x30
 8018a52:	af04      	add	r7, sp, #16
 8018a54:	60f8      	str	r0, [r7, #12]
 8018a56:	60b9      	str	r1, [r7, #8]
 8018a58:	603b      	str	r3, [r7, #0]
 8018a5a:	4613      	mov	r3, r2
 8018a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018a5e:	88fb      	ldrh	r3, [r7, #6]
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	4618      	mov	r0, r3
 8018a64:	f001 fe20 	bl	801a6a8 <pvPortMalloc>
 8018a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018a6a:	697b      	ldr	r3, [r7, #20]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d00e      	beq.n	8018a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018a70:	205c      	movs	r0, #92	; 0x5c
 8018a72:	f001 fe19 	bl	801a6a8 <pvPortMalloc>
 8018a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018a78:	69fb      	ldr	r3, [r7, #28]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d003      	beq.n	8018a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018a7e:	69fb      	ldr	r3, [r7, #28]
 8018a80:	697a      	ldr	r2, [r7, #20]
 8018a82:	631a      	str	r2, [r3, #48]	; 0x30
 8018a84:	e005      	b.n	8018a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018a86:	6978      	ldr	r0, [r7, #20]
 8018a88:	f001 feda 	bl	801a840 <vPortFree>
 8018a8c:	e001      	b.n	8018a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018a92:	69fb      	ldr	r3, [r7, #28]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d017      	beq.n	8018ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018a98:	69fb      	ldr	r3, [r7, #28]
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018aa0:	88fa      	ldrh	r2, [r7, #6]
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	9303      	str	r3, [sp, #12]
 8018aa6:	69fb      	ldr	r3, [r7, #28]
 8018aa8:	9302      	str	r3, [sp, #8]
 8018aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aac:	9301      	str	r3, [sp, #4]
 8018aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	68b9      	ldr	r1, [r7, #8]
 8018ab6:	68f8      	ldr	r0, [r7, #12]
 8018ab8:	f000 f80e 	bl	8018ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018abc:	69f8      	ldr	r0, [r7, #28]
 8018abe:	f000 f89b 	bl	8018bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018ac2:	2301      	movs	r3, #1
 8018ac4:	61bb      	str	r3, [r7, #24]
 8018ac6:	e002      	b.n	8018ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018ace:	69bb      	ldr	r3, [r7, #24]
	}
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	3720      	adds	r7, #32
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b088      	sub	sp, #32
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	607a      	str	r2, [r7, #4]
 8018ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	461a      	mov	r2, r3
 8018af0:	21a5      	movs	r1, #165	; 0xa5
 8018af2:	f001 fffb 	bl	801aaec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018afa:	6879      	ldr	r1, [r7, #4]
 8018afc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018b00:	440b      	add	r3, r1
 8018b02:	009b      	lsls	r3, r3, #2
 8018b04:	4413      	add	r3, r2
 8018b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018b08:	69bb      	ldr	r3, [r7, #24]
 8018b0a:	f023 0307 	bic.w	r3, r3, #7
 8018b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018b10:	69bb      	ldr	r3, [r7, #24]
 8018b12:	f003 0307 	and.w	r3, r3, #7
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d00a      	beq.n	8018b30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1e:	f383 8811 	msr	BASEPRI, r3
 8018b22:	f3bf 8f6f 	isb	sy
 8018b26:	f3bf 8f4f 	dsb	sy
 8018b2a:	617b      	str	r3, [r7, #20]
}
 8018b2c:	bf00      	nop
 8018b2e:	e7fe      	b.n	8018b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018b30:	68bb      	ldr	r3, [r7, #8]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d01f      	beq.n	8018b76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018b36:	2300      	movs	r3, #0
 8018b38:	61fb      	str	r3, [r7, #28]
 8018b3a:	e012      	b.n	8018b62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018b3c:	68ba      	ldr	r2, [r7, #8]
 8018b3e:	69fb      	ldr	r3, [r7, #28]
 8018b40:	4413      	add	r3, r2
 8018b42:	7819      	ldrb	r1, [r3, #0]
 8018b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b46:	69fb      	ldr	r3, [r7, #28]
 8018b48:	4413      	add	r3, r2
 8018b4a:	3334      	adds	r3, #52	; 0x34
 8018b4c:	460a      	mov	r2, r1
 8018b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018b50:	68ba      	ldr	r2, [r7, #8]
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	4413      	add	r3, r2
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d006      	beq.n	8018b6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018b5c:	69fb      	ldr	r3, [r7, #28]
 8018b5e:	3301      	adds	r3, #1
 8018b60:	61fb      	str	r3, [r7, #28]
 8018b62:	69fb      	ldr	r3, [r7, #28]
 8018b64:	2b0f      	cmp	r3, #15
 8018b66:	d9e9      	bls.n	8018b3c <prvInitialiseNewTask+0x64>
 8018b68:	e000      	b.n	8018b6c <prvInitialiseNewTask+0x94>
			{
				break;
 8018b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6e:	2200      	movs	r2, #0
 8018b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018b74:	e003      	b.n	8018b7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b78:	2200      	movs	r2, #0
 8018b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b80:	2b37      	cmp	r3, #55	; 0x37
 8018b82:	d901      	bls.n	8018b88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018b84:	2337      	movs	r3, #55	; 0x37
 8018b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b96:	2200      	movs	r2, #0
 8018b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9c:	3304      	adds	r3, #4
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7ff f978 	bl	8017e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba6:	3318      	adds	r3, #24
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7ff f973 	bl	8017e94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bcc:	2200      	movs	r2, #0
 8018bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018bd2:	683a      	ldr	r2, [r7, #0]
 8018bd4:	68f9      	ldr	r1, [r7, #12]
 8018bd6:	69b8      	ldr	r0, [r7, #24]
 8018bd8:	f001 fb1a 	bl	801a210 <pxPortInitialiseStack>
 8018bdc:	4602      	mov	r2, r0
 8018bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d002      	beq.n	8018bee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018bee:	bf00      	nop
 8018bf0:	3720      	adds	r7, #32
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
	...

08018bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018c00:	f001 fc30 	bl	801a464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018c04:	4b2d      	ldr	r3, [pc, #180]	; (8018cbc <prvAddNewTaskToReadyList+0xc4>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	3301      	adds	r3, #1
 8018c0a:	4a2c      	ldr	r2, [pc, #176]	; (8018cbc <prvAddNewTaskToReadyList+0xc4>)
 8018c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018c0e:	4b2c      	ldr	r3, [pc, #176]	; (8018cc0 <prvAddNewTaskToReadyList+0xc8>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d109      	bne.n	8018c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018c16:	4a2a      	ldr	r2, [pc, #168]	; (8018cc0 <prvAddNewTaskToReadyList+0xc8>)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018c1c:	4b27      	ldr	r3, [pc, #156]	; (8018cbc <prvAddNewTaskToReadyList+0xc4>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	2b01      	cmp	r3, #1
 8018c22:	d110      	bne.n	8018c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018c24:	f000 fdd0 	bl	80197c8 <prvInitialiseTaskLists>
 8018c28:	e00d      	b.n	8018c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018c2a:	4b26      	ldr	r3, [pc, #152]	; (8018cc4 <prvAddNewTaskToReadyList+0xcc>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d109      	bne.n	8018c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018c32:	4b23      	ldr	r3, [pc, #140]	; (8018cc0 <prvAddNewTaskToReadyList+0xc8>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d802      	bhi.n	8018c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018c40:	4a1f      	ldr	r2, [pc, #124]	; (8018cc0 <prvAddNewTaskToReadyList+0xc8>)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018c46:	4b20      	ldr	r3, [pc, #128]	; (8018cc8 <prvAddNewTaskToReadyList+0xd0>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	3301      	adds	r3, #1
 8018c4c:	4a1e      	ldr	r2, [pc, #120]	; (8018cc8 <prvAddNewTaskToReadyList+0xd0>)
 8018c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018c50:	4b1d      	ldr	r3, [pc, #116]	; (8018cc8 <prvAddNewTaskToReadyList+0xd0>)
 8018c52:	681a      	ldr	r2, [r3, #0]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c5c:	4b1b      	ldr	r3, [pc, #108]	; (8018ccc <prvAddNewTaskToReadyList+0xd4>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d903      	bls.n	8018c6c <prvAddNewTaskToReadyList+0x74>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c68:	4a18      	ldr	r2, [pc, #96]	; (8018ccc <prvAddNewTaskToReadyList+0xd4>)
 8018c6a:	6013      	str	r3, [r2, #0]
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c70:	4613      	mov	r3, r2
 8018c72:	009b      	lsls	r3, r3, #2
 8018c74:	4413      	add	r3, r2
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	4a15      	ldr	r2, [pc, #84]	; (8018cd0 <prvAddNewTaskToReadyList+0xd8>)
 8018c7a:	441a      	add	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	3304      	adds	r3, #4
 8018c80:	4619      	mov	r1, r3
 8018c82:	4610      	mov	r0, r2
 8018c84:	f7ff f913 	bl	8017eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018c88:	f001 fc1c 	bl	801a4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018c8c:	4b0d      	ldr	r3, [pc, #52]	; (8018cc4 <prvAddNewTaskToReadyList+0xcc>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d00e      	beq.n	8018cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018c94:	4b0a      	ldr	r3, [pc, #40]	; (8018cc0 <prvAddNewTaskToReadyList+0xc8>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	d207      	bcs.n	8018cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018ca2:	4b0c      	ldr	r3, [pc, #48]	; (8018cd4 <prvAddNewTaskToReadyList+0xdc>)
 8018ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ca8:	601a      	str	r2, [r3, #0]
 8018caa:	f3bf 8f4f 	dsb	sy
 8018cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018cb2:	bf00      	nop
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	24002c58 	.word	0x24002c58
 8018cc0:	24002784 	.word	0x24002784
 8018cc4:	24002c64 	.word	0x24002c64
 8018cc8:	24002c74 	.word	0x24002c74
 8018ccc:	24002c60 	.word	0x24002c60
 8018cd0:	24002788 	.word	0x24002788
 8018cd4:	e000ed04 	.word	0xe000ed04

08018cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b084      	sub	sp, #16
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d017      	beq.n	8018d1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018cea:	4b13      	ldr	r3, [pc, #76]	; (8018d38 <vTaskDelay+0x60>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d00a      	beq.n	8018d08 <vTaskDelay+0x30>
	__asm volatile
 8018cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf6:	f383 8811 	msr	BASEPRI, r3
 8018cfa:	f3bf 8f6f 	isb	sy
 8018cfe:	f3bf 8f4f 	dsb	sy
 8018d02:	60bb      	str	r3, [r7, #8]
}
 8018d04:	bf00      	nop
 8018d06:	e7fe      	b.n	8018d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018d08:	f000 f986 	bl	8019018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	f000 febc 	bl	8019a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018d14:	f000 f98e 	bl	8019034 <xTaskResumeAll>
 8018d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d107      	bne.n	8018d30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018d20:	4b06      	ldr	r3, [pc, #24]	; (8018d3c <vTaskDelay+0x64>)
 8018d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d26:	601a      	str	r2, [r3, #0]
 8018d28:	f3bf 8f4f 	dsb	sy
 8018d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d30:	bf00      	nop
 8018d32:	3710      	adds	r7, #16
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	24002c80 	.word	0x24002c80
 8018d3c:	e000ed04 	.word	0xe000ed04

08018d40 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018d48:	f001 fb8c 	bl	801a464 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d102      	bne.n	8018d58 <vTaskSuspend+0x18>
 8018d52:	4b30      	ldr	r3, [pc, #192]	; (8018e14 <vTaskSuspend+0xd4>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	e000      	b.n	8018d5a <vTaskSuspend+0x1a>
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	3304      	adds	r3, #4
 8018d60:	4618      	mov	r0, r3
 8018d62:	f7ff f901 	bl	8017f68 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d004      	beq.n	8018d78 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	3318      	adds	r3, #24
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7ff f8f8 	bl	8017f68 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	3304      	adds	r3, #4
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	4826      	ldr	r0, [pc, #152]	; (8018e18 <vTaskSuspend+0xd8>)
 8018d80:	f7ff f895 	bl	8017eae <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	2b01      	cmp	r3, #1
 8018d8e:	d103      	bne.n	8018d98 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	2200      	movs	r2, #0
 8018d94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018d98:	f001 fb94 	bl	801a4c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018d9c:	4b1f      	ldr	r3, [pc, #124]	; (8018e1c <vTaskSuspend+0xdc>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d005      	beq.n	8018db0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018da4:	f001 fb5e 	bl	801a464 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018da8:	f000 fdac 	bl	8019904 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018dac:	f001 fb8a 	bl	801a4c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018db0:	4b18      	ldr	r3, [pc, #96]	; (8018e14 <vTaskSuspend+0xd4>)
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	68fa      	ldr	r2, [r7, #12]
 8018db6:	429a      	cmp	r2, r3
 8018db8:	d127      	bne.n	8018e0a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8018dba:	4b18      	ldr	r3, [pc, #96]	; (8018e1c <vTaskSuspend+0xdc>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d017      	beq.n	8018df2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018dc2:	4b17      	ldr	r3, [pc, #92]	; (8018e20 <vTaskSuspend+0xe0>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d00a      	beq.n	8018de0 <vTaskSuspend+0xa0>
	__asm volatile
 8018dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dce:	f383 8811 	msr	BASEPRI, r3
 8018dd2:	f3bf 8f6f 	isb	sy
 8018dd6:	f3bf 8f4f 	dsb	sy
 8018dda:	60bb      	str	r3, [r7, #8]
}
 8018ddc:	bf00      	nop
 8018dde:	e7fe      	b.n	8018dde <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018de0:	4b10      	ldr	r3, [pc, #64]	; (8018e24 <vTaskSuspend+0xe4>)
 8018de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018de6:	601a      	str	r2, [r3, #0]
 8018de8:	f3bf 8f4f 	dsb	sy
 8018dec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018df0:	e00b      	b.n	8018e0a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018df2:	4b09      	ldr	r3, [pc, #36]	; (8018e18 <vTaskSuspend+0xd8>)
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	4b0c      	ldr	r3, [pc, #48]	; (8018e28 <vTaskSuspend+0xe8>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	429a      	cmp	r2, r3
 8018dfc:	d103      	bne.n	8018e06 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018dfe:	4b05      	ldr	r3, [pc, #20]	; (8018e14 <vTaskSuspend+0xd4>)
 8018e00:	2200      	movs	r2, #0
 8018e02:	601a      	str	r2, [r3, #0]
	}
 8018e04:	e001      	b.n	8018e0a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018e06:	f000 fa85 	bl	8019314 <vTaskSwitchContext>
	}
 8018e0a:	bf00      	nop
 8018e0c:	3710      	adds	r7, #16
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	24002784 	.word	0x24002784
 8018e18:	24002c44 	.word	0x24002c44
 8018e1c:	24002c64 	.word	0x24002c64
 8018e20:	24002c80 	.word	0x24002c80
 8018e24:	e000ed04 	.word	0xe000ed04
 8018e28:	24002c58 	.word	0x24002c58

08018e2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018e2c:	b480      	push	{r7}
 8018e2e:	b087      	sub	sp, #28
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018e34:	2300      	movs	r3, #0
 8018e36:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d10a      	bne.n	8018e58 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	60fb      	str	r3, [r7, #12]
}
 8018e54:	bf00      	nop
 8018e56:	e7fe      	b.n	8018e56 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	695b      	ldr	r3, [r3, #20]
 8018e5c:	4a0a      	ldr	r2, [pc, #40]	; (8018e88 <prvTaskIsTaskSuspended+0x5c>)
 8018e5e:	4293      	cmp	r3, r2
 8018e60:	d10a      	bne.n	8018e78 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018e62:	693b      	ldr	r3, [r7, #16]
 8018e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e66:	4a09      	ldr	r2, [pc, #36]	; (8018e8c <prvTaskIsTaskSuspended+0x60>)
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d005      	beq.n	8018e78 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d101      	bne.n	8018e78 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018e74:	2301      	movs	r3, #1
 8018e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018e78:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	371c      	adds	r7, #28
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e84:	4770      	bx	lr
 8018e86:	bf00      	nop
 8018e88:	24002c44 	.word	0x24002c44
 8018e8c:	24002c18 	.word	0x24002c18

08018e90 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d10a      	bne.n	8018eb8 <vTaskResume+0x28>
	__asm volatile
 8018ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea6:	f383 8811 	msr	BASEPRI, r3
 8018eaa:	f3bf 8f6f 	isb	sy
 8018eae:	f3bf 8f4f 	dsb	sy
 8018eb2:	60bb      	str	r3, [r7, #8]
}
 8018eb4:	bf00      	nop
 8018eb6:	e7fe      	b.n	8018eb6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018eb8:	4b20      	ldr	r3, [pc, #128]	; (8018f3c <vTaskResume+0xac>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	68fa      	ldr	r2, [r7, #12]
 8018ebe:	429a      	cmp	r2, r3
 8018ec0:	d038      	beq.n	8018f34 <vTaskResume+0xa4>
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d035      	beq.n	8018f34 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018ec8:	f001 facc 	bl	801a464 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018ecc:	68f8      	ldr	r0, [r7, #12]
 8018ece:	f7ff ffad 	bl	8018e2c <prvTaskIsTaskSuspended>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d02b      	beq.n	8018f30 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	3304      	adds	r3, #4
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7ff f843 	bl	8017f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ee6:	4b16      	ldr	r3, [pc, #88]	; (8018f40 <vTaskResume+0xb0>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d903      	bls.n	8018ef6 <vTaskResume+0x66>
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ef2:	4a13      	ldr	r2, [pc, #76]	; (8018f40 <vTaskResume+0xb0>)
 8018ef4:	6013      	str	r3, [r2, #0]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018efa:	4613      	mov	r3, r2
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	4413      	add	r3, r2
 8018f00:	009b      	lsls	r3, r3, #2
 8018f02:	4a10      	ldr	r2, [pc, #64]	; (8018f44 <vTaskResume+0xb4>)
 8018f04:	441a      	add	r2, r3
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	3304      	adds	r3, #4
 8018f0a:	4619      	mov	r1, r3
 8018f0c:	4610      	mov	r0, r2
 8018f0e:	f7fe ffce 	bl	8017eae <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f16:	4b09      	ldr	r3, [pc, #36]	; (8018f3c <vTaskResume+0xac>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d307      	bcc.n	8018f30 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018f20:	4b09      	ldr	r3, [pc, #36]	; (8018f48 <vTaskResume+0xb8>)
 8018f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f26:	601a      	str	r2, [r3, #0]
 8018f28:	f3bf 8f4f 	dsb	sy
 8018f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018f30:	f001 fac8 	bl	801a4c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018f34:	bf00      	nop
 8018f36:	3710      	adds	r7, #16
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	24002784 	.word	0x24002784
 8018f40:	24002c60 	.word	0x24002c60
 8018f44:	24002788 	.word	0x24002788
 8018f48:	e000ed04 	.word	0xe000ed04

08018f4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b08a      	sub	sp, #40	; 0x28
 8018f50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018f52:	2300      	movs	r3, #0
 8018f54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018f56:	2300      	movs	r3, #0
 8018f58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	1d39      	adds	r1, r7, #4
 8018f5e:	f107 0308 	add.w	r3, r7, #8
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fe fcd6 	bl	8017914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018f68:	6839      	ldr	r1, [r7, #0]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68ba      	ldr	r2, [r7, #8]
 8018f6e:	9202      	str	r2, [sp, #8]
 8018f70:	9301      	str	r3, [sp, #4]
 8018f72:	2300      	movs	r3, #0
 8018f74:	9300      	str	r3, [sp, #0]
 8018f76:	2300      	movs	r3, #0
 8018f78:	460a      	mov	r2, r1
 8018f7a:	4921      	ldr	r1, [pc, #132]	; (8019000 <vTaskStartScheduler+0xb4>)
 8018f7c:	4821      	ldr	r0, [pc, #132]	; (8019004 <vTaskStartScheduler+0xb8>)
 8018f7e:	f7ff fd09 	bl	8018994 <xTaskCreateStatic>
 8018f82:	4603      	mov	r3, r0
 8018f84:	4a20      	ldr	r2, [pc, #128]	; (8019008 <vTaskStartScheduler+0xbc>)
 8018f86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018f88:	4b1f      	ldr	r3, [pc, #124]	; (8019008 <vTaskStartScheduler+0xbc>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d002      	beq.n	8018f96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018f90:	2301      	movs	r3, #1
 8018f92:	617b      	str	r3, [r7, #20]
 8018f94:	e001      	b.n	8018f9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018f96:	2300      	movs	r3, #0
 8018f98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018f9a:	697b      	ldr	r3, [r7, #20]
 8018f9c:	2b01      	cmp	r3, #1
 8018f9e:	d102      	bne.n	8018fa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018fa0:	f000 fdc8 	bl	8019b34 <xTimerCreateTimerTask>
 8018fa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	2b01      	cmp	r3, #1
 8018faa:	d116      	bne.n	8018fda <vTaskStartScheduler+0x8e>
	__asm volatile
 8018fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fb0:	f383 8811 	msr	BASEPRI, r3
 8018fb4:	f3bf 8f6f 	isb	sy
 8018fb8:	f3bf 8f4f 	dsb	sy
 8018fbc:	613b      	str	r3, [r7, #16]
}
 8018fbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018fc0:	4b12      	ldr	r3, [pc, #72]	; (801900c <vTaskStartScheduler+0xc0>)
 8018fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018fc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018fc8:	4b11      	ldr	r3, [pc, #68]	; (8019010 <vTaskStartScheduler+0xc4>)
 8018fca:	2201      	movs	r2, #1
 8018fcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018fce:	4b11      	ldr	r3, [pc, #68]	; (8019014 <vTaskStartScheduler+0xc8>)
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018fd4:	f001 f9a4 	bl	801a320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018fd8:	e00e      	b.n	8018ff8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fe0:	d10a      	bne.n	8018ff8 <vTaskStartScheduler+0xac>
	__asm volatile
 8018fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe6:	f383 8811 	msr	BASEPRI, r3
 8018fea:	f3bf 8f6f 	isb	sy
 8018fee:	f3bf 8f4f 	dsb	sy
 8018ff2:	60fb      	str	r3, [r7, #12]
}
 8018ff4:	bf00      	nop
 8018ff6:	e7fe      	b.n	8018ff6 <vTaskStartScheduler+0xaa>
}
 8018ff8:	bf00      	nop
 8018ffa:	3718      	adds	r7, #24
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}
 8019000:	0801b760 	.word	0x0801b760
 8019004:	08019799 	.word	0x08019799
 8019008:	24002c7c 	.word	0x24002c7c
 801900c:	24002c78 	.word	0x24002c78
 8019010:	24002c64 	.word	0x24002c64
 8019014:	24002c5c 	.word	0x24002c5c

08019018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019018:	b480      	push	{r7}
 801901a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801901c:	4b04      	ldr	r3, [pc, #16]	; (8019030 <vTaskSuspendAll+0x18>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	3301      	adds	r3, #1
 8019022:	4a03      	ldr	r2, [pc, #12]	; (8019030 <vTaskSuspendAll+0x18>)
 8019024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019026:	bf00      	nop
 8019028:	46bd      	mov	sp, r7
 801902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902e:	4770      	bx	lr
 8019030:	24002c80 	.word	0x24002c80

08019034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b084      	sub	sp, #16
 8019038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801903a:	2300      	movs	r3, #0
 801903c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801903e:	2300      	movs	r3, #0
 8019040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019042:	4b42      	ldr	r3, [pc, #264]	; (801914c <xTaskResumeAll+0x118>)
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d10a      	bne.n	8019060 <xTaskResumeAll+0x2c>
	__asm volatile
 801904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904e:	f383 8811 	msr	BASEPRI, r3
 8019052:	f3bf 8f6f 	isb	sy
 8019056:	f3bf 8f4f 	dsb	sy
 801905a:	603b      	str	r3, [r7, #0]
}
 801905c:	bf00      	nop
 801905e:	e7fe      	b.n	801905e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019060:	f001 fa00 	bl	801a464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019064:	4b39      	ldr	r3, [pc, #228]	; (801914c <xTaskResumeAll+0x118>)
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	3b01      	subs	r3, #1
 801906a:	4a38      	ldr	r2, [pc, #224]	; (801914c <xTaskResumeAll+0x118>)
 801906c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801906e:	4b37      	ldr	r3, [pc, #220]	; (801914c <xTaskResumeAll+0x118>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d162      	bne.n	801913c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019076:	4b36      	ldr	r3, [pc, #216]	; (8019150 <xTaskResumeAll+0x11c>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d05e      	beq.n	801913c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801907e:	e02f      	b.n	80190e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019080:	4b34      	ldr	r3, [pc, #208]	; (8019154 <xTaskResumeAll+0x120>)
 8019082:	68db      	ldr	r3, [r3, #12]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	3318      	adds	r3, #24
 801908c:	4618      	mov	r0, r3
 801908e:	f7fe ff6b 	bl	8017f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	3304      	adds	r3, #4
 8019096:	4618      	mov	r0, r3
 8019098:	f7fe ff66 	bl	8017f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190a0:	4b2d      	ldr	r3, [pc, #180]	; (8019158 <xTaskResumeAll+0x124>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	429a      	cmp	r2, r3
 80190a6:	d903      	bls.n	80190b0 <xTaskResumeAll+0x7c>
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190ac:	4a2a      	ldr	r2, [pc, #168]	; (8019158 <xTaskResumeAll+0x124>)
 80190ae:	6013      	str	r3, [r2, #0]
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190b4:	4613      	mov	r3, r2
 80190b6:	009b      	lsls	r3, r3, #2
 80190b8:	4413      	add	r3, r2
 80190ba:	009b      	lsls	r3, r3, #2
 80190bc:	4a27      	ldr	r2, [pc, #156]	; (801915c <xTaskResumeAll+0x128>)
 80190be:	441a      	add	r2, r3
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	3304      	adds	r3, #4
 80190c4:	4619      	mov	r1, r3
 80190c6:	4610      	mov	r0, r2
 80190c8:	f7fe fef1 	bl	8017eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190d0:	4b23      	ldr	r3, [pc, #140]	; (8019160 <xTaskResumeAll+0x12c>)
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d302      	bcc.n	80190e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80190da:	4b22      	ldr	r3, [pc, #136]	; (8019164 <xTaskResumeAll+0x130>)
 80190dc:	2201      	movs	r2, #1
 80190de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80190e0:	4b1c      	ldr	r3, [pc, #112]	; (8019154 <xTaskResumeAll+0x120>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d1cb      	bne.n	8019080 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d001      	beq.n	80190f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80190ee:	f000 fc09 	bl	8019904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80190f2:	4b1d      	ldr	r3, [pc, #116]	; (8019168 <xTaskResumeAll+0x134>)
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d010      	beq.n	8019120 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80190fe:	f000 f847 	bl	8019190 <xTaskIncrementTick>
 8019102:	4603      	mov	r3, r0
 8019104:	2b00      	cmp	r3, #0
 8019106:	d002      	beq.n	801910e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019108:	4b16      	ldr	r3, [pc, #88]	; (8019164 <xTaskResumeAll+0x130>)
 801910a:	2201      	movs	r2, #1
 801910c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	3b01      	subs	r3, #1
 8019112:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d1f1      	bne.n	80190fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801911a:	4b13      	ldr	r3, [pc, #76]	; (8019168 <xTaskResumeAll+0x134>)
 801911c:	2200      	movs	r2, #0
 801911e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019120:	4b10      	ldr	r3, [pc, #64]	; (8019164 <xTaskResumeAll+0x130>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d009      	beq.n	801913c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019128:	2301      	movs	r3, #1
 801912a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801912c:	4b0f      	ldr	r3, [pc, #60]	; (801916c <xTaskResumeAll+0x138>)
 801912e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019132:	601a      	str	r2, [r3, #0]
 8019134:	f3bf 8f4f 	dsb	sy
 8019138:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801913c:	f001 f9c2 	bl	801a4c4 <vPortExitCritical>

	return xAlreadyYielded;
 8019140:	68bb      	ldr	r3, [r7, #8]
}
 8019142:	4618      	mov	r0, r3
 8019144:	3710      	adds	r7, #16
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}
 801914a:	bf00      	nop
 801914c:	24002c80 	.word	0x24002c80
 8019150:	24002c58 	.word	0x24002c58
 8019154:	24002c18 	.word	0x24002c18
 8019158:	24002c60 	.word	0x24002c60
 801915c:	24002788 	.word	0x24002788
 8019160:	24002784 	.word	0x24002784
 8019164:	24002c6c 	.word	0x24002c6c
 8019168:	24002c68 	.word	0x24002c68
 801916c:	e000ed04 	.word	0xe000ed04

08019170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019170:	b480      	push	{r7}
 8019172:	b083      	sub	sp, #12
 8019174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019176:	4b05      	ldr	r3, [pc, #20]	; (801918c <xTaskGetTickCount+0x1c>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801917c:	687b      	ldr	r3, [r7, #4]
}
 801917e:	4618      	mov	r0, r3
 8019180:	370c      	adds	r7, #12
 8019182:	46bd      	mov	sp, r7
 8019184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019188:	4770      	bx	lr
 801918a:	bf00      	nop
 801918c:	24002c5c 	.word	0x24002c5c

08019190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b086      	sub	sp, #24
 8019194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019196:	2300      	movs	r3, #0
 8019198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801919a:	4b53      	ldr	r3, [pc, #332]	; (80192e8 <xTaskIncrementTick+0x158>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f040 8095 	bne.w	80192ce <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80191a4:	4b51      	ldr	r3, [pc, #324]	; (80192ec <xTaskIncrementTick+0x15c>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	3301      	adds	r3, #1
 80191aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80191ac:	4a4f      	ldr	r2, [pc, #316]	; (80192ec <xTaskIncrementTick+0x15c>)
 80191ae:	693b      	ldr	r3, [r7, #16]
 80191b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d120      	bne.n	80191fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80191b8:	4b4d      	ldr	r3, [pc, #308]	; (80192f0 <xTaskIncrementTick+0x160>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d00a      	beq.n	80191d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80191c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191c6:	f383 8811 	msr	BASEPRI, r3
 80191ca:	f3bf 8f6f 	isb	sy
 80191ce:	f3bf 8f4f 	dsb	sy
 80191d2:	603b      	str	r3, [r7, #0]
}
 80191d4:	bf00      	nop
 80191d6:	e7fe      	b.n	80191d6 <xTaskIncrementTick+0x46>
 80191d8:	4b45      	ldr	r3, [pc, #276]	; (80192f0 <xTaskIncrementTick+0x160>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	60fb      	str	r3, [r7, #12]
 80191de:	4b45      	ldr	r3, [pc, #276]	; (80192f4 <xTaskIncrementTick+0x164>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	4a43      	ldr	r2, [pc, #268]	; (80192f0 <xTaskIncrementTick+0x160>)
 80191e4:	6013      	str	r3, [r2, #0]
 80191e6:	4a43      	ldr	r2, [pc, #268]	; (80192f4 <xTaskIncrementTick+0x164>)
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	6013      	str	r3, [r2, #0]
 80191ec:	4b42      	ldr	r3, [pc, #264]	; (80192f8 <xTaskIncrementTick+0x168>)
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	3301      	adds	r3, #1
 80191f2:	4a41      	ldr	r2, [pc, #260]	; (80192f8 <xTaskIncrementTick+0x168>)
 80191f4:	6013      	str	r3, [r2, #0]
 80191f6:	f000 fb85 	bl	8019904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80191fa:	4b40      	ldr	r3, [pc, #256]	; (80192fc <xTaskIncrementTick+0x16c>)
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	693a      	ldr	r2, [r7, #16]
 8019200:	429a      	cmp	r2, r3
 8019202:	d349      	bcc.n	8019298 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019204:	4b3a      	ldr	r3, [pc, #232]	; (80192f0 <xTaskIncrementTick+0x160>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d104      	bne.n	8019218 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801920e:	4b3b      	ldr	r3, [pc, #236]	; (80192fc <xTaskIncrementTick+0x16c>)
 8019210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019214:	601a      	str	r2, [r3, #0]
					break;
 8019216:	e03f      	b.n	8019298 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019218:	4b35      	ldr	r3, [pc, #212]	; (80192f0 <xTaskIncrementTick+0x160>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	68db      	ldr	r3, [r3, #12]
 801921e:	68db      	ldr	r3, [r3, #12]
 8019220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	685b      	ldr	r3, [r3, #4]
 8019226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019228:	693a      	ldr	r2, [r7, #16]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	429a      	cmp	r2, r3
 801922e:	d203      	bcs.n	8019238 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019230:	4a32      	ldr	r2, [pc, #200]	; (80192fc <xTaskIncrementTick+0x16c>)
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019236:	e02f      	b.n	8019298 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	3304      	adds	r3, #4
 801923c:	4618      	mov	r0, r3
 801923e:	f7fe fe93 	bl	8017f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019246:	2b00      	cmp	r3, #0
 8019248:	d004      	beq.n	8019254 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801924a:	68bb      	ldr	r3, [r7, #8]
 801924c:	3318      	adds	r3, #24
 801924e:	4618      	mov	r0, r3
 8019250:	f7fe fe8a 	bl	8017f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019258:	4b29      	ldr	r3, [pc, #164]	; (8019300 <xTaskIncrementTick+0x170>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	429a      	cmp	r2, r3
 801925e:	d903      	bls.n	8019268 <xTaskIncrementTick+0xd8>
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019264:	4a26      	ldr	r2, [pc, #152]	; (8019300 <xTaskIncrementTick+0x170>)
 8019266:	6013      	str	r3, [r2, #0]
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801926c:	4613      	mov	r3, r2
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	4413      	add	r3, r2
 8019272:	009b      	lsls	r3, r3, #2
 8019274:	4a23      	ldr	r2, [pc, #140]	; (8019304 <xTaskIncrementTick+0x174>)
 8019276:	441a      	add	r2, r3
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	3304      	adds	r3, #4
 801927c:	4619      	mov	r1, r3
 801927e:	4610      	mov	r0, r2
 8019280:	f7fe fe15 	bl	8017eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019288:	4b1f      	ldr	r3, [pc, #124]	; (8019308 <xTaskIncrementTick+0x178>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801928e:	429a      	cmp	r2, r3
 8019290:	d3b8      	bcc.n	8019204 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019292:	2301      	movs	r3, #1
 8019294:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019296:	e7b5      	b.n	8019204 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019298:	4b1b      	ldr	r3, [pc, #108]	; (8019308 <xTaskIncrementTick+0x178>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801929e:	4919      	ldr	r1, [pc, #100]	; (8019304 <xTaskIncrementTick+0x174>)
 80192a0:	4613      	mov	r3, r2
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	4413      	add	r3, r2
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	440b      	add	r3, r1
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	d901      	bls.n	80192b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80192b0:	2301      	movs	r3, #1
 80192b2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80192b4:	4b15      	ldr	r3, [pc, #84]	; (801930c <xTaskIncrementTick+0x17c>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d101      	bne.n	80192c0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80192bc:	f7e9 f954 	bl	8002568 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80192c0:	4b13      	ldr	r3, [pc, #76]	; (8019310 <xTaskIncrementTick+0x180>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d009      	beq.n	80192dc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80192c8:	2301      	movs	r3, #1
 80192ca:	617b      	str	r3, [r7, #20]
 80192cc:	e006      	b.n	80192dc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80192ce:	4b0f      	ldr	r3, [pc, #60]	; (801930c <xTaskIncrementTick+0x17c>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	3301      	adds	r3, #1
 80192d4:	4a0d      	ldr	r2, [pc, #52]	; (801930c <xTaskIncrementTick+0x17c>)
 80192d6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80192d8:	f7e9 f946 	bl	8002568 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80192dc:	697b      	ldr	r3, [r7, #20]
}
 80192de:	4618      	mov	r0, r3
 80192e0:	3718      	adds	r7, #24
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}
 80192e6:	bf00      	nop
 80192e8:	24002c80 	.word	0x24002c80
 80192ec:	24002c5c 	.word	0x24002c5c
 80192f0:	24002c10 	.word	0x24002c10
 80192f4:	24002c14 	.word	0x24002c14
 80192f8:	24002c70 	.word	0x24002c70
 80192fc:	24002c78 	.word	0x24002c78
 8019300:	24002c60 	.word	0x24002c60
 8019304:	24002788 	.word	0x24002788
 8019308:	24002784 	.word	0x24002784
 801930c:	24002c68 	.word	0x24002c68
 8019310:	24002c6c 	.word	0x24002c6c

08019314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b084      	sub	sp, #16
 8019318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801931a:	4b2f      	ldr	r3, [pc, #188]	; (80193d8 <vTaskSwitchContext+0xc4>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d003      	beq.n	801932a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019322:	4b2e      	ldr	r3, [pc, #184]	; (80193dc <vTaskSwitchContext+0xc8>)
 8019324:	2201      	movs	r2, #1
 8019326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019328:	e052      	b.n	80193d0 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801932a:	4b2c      	ldr	r3, [pc, #176]	; (80193dc <vTaskSwitchContext+0xc8>)
 801932c:	2200      	movs	r2, #0
 801932e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019330:	4b2b      	ldr	r3, [pc, #172]	; (80193e0 <vTaskSwitchContext+0xcc>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	681a      	ldr	r2, [r3, #0]
 8019336:	4b2a      	ldr	r3, [pc, #168]	; (80193e0 <vTaskSwitchContext+0xcc>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801933c:	429a      	cmp	r2, r3
 801933e:	d808      	bhi.n	8019352 <vTaskSwitchContext+0x3e>
 8019340:	4b27      	ldr	r3, [pc, #156]	; (80193e0 <vTaskSwitchContext+0xcc>)
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	4b26      	ldr	r3, [pc, #152]	; (80193e0 <vTaskSwitchContext+0xcc>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	3334      	adds	r3, #52	; 0x34
 801934a:	4619      	mov	r1, r3
 801934c:	4610      	mov	r0, r2
 801934e:	f7e9 f919 	bl	8002584 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019352:	4b24      	ldr	r3, [pc, #144]	; (80193e4 <vTaskSwitchContext+0xd0>)
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	60fb      	str	r3, [r7, #12]
 8019358:	e010      	b.n	801937c <vTaskSwitchContext+0x68>
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d10a      	bne.n	8019376 <vTaskSwitchContext+0x62>
	__asm volatile
 8019360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019364:	f383 8811 	msr	BASEPRI, r3
 8019368:	f3bf 8f6f 	isb	sy
 801936c:	f3bf 8f4f 	dsb	sy
 8019370:	607b      	str	r3, [r7, #4]
}
 8019372:	bf00      	nop
 8019374:	e7fe      	b.n	8019374 <vTaskSwitchContext+0x60>
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	3b01      	subs	r3, #1
 801937a:	60fb      	str	r3, [r7, #12]
 801937c:	491a      	ldr	r1, [pc, #104]	; (80193e8 <vTaskSwitchContext+0xd4>)
 801937e:	68fa      	ldr	r2, [r7, #12]
 8019380:	4613      	mov	r3, r2
 8019382:	009b      	lsls	r3, r3, #2
 8019384:	4413      	add	r3, r2
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	440b      	add	r3, r1
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d0e4      	beq.n	801935a <vTaskSwitchContext+0x46>
 8019390:	68fa      	ldr	r2, [r7, #12]
 8019392:	4613      	mov	r3, r2
 8019394:	009b      	lsls	r3, r3, #2
 8019396:	4413      	add	r3, r2
 8019398:	009b      	lsls	r3, r3, #2
 801939a:	4a13      	ldr	r2, [pc, #76]	; (80193e8 <vTaskSwitchContext+0xd4>)
 801939c:	4413      	add	r3, r2
 801939e:	60bb      	str	r3, [r7, #8]
 80193a0:	68bb      	ldr	r3, [r7, #8]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	685a      	ldr	r2, [r3, #4]
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	605a      	str	r2, [r3, #4]
 80193aa:	68bb      	ldr	r3, [r7, #8]
 80193ac:	685a      	ldr	r2, [r3, #4]
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	3308      	adds	r3, #8
 80193b2:	429a      	cmp	r2, r3
 80193b4:	d104      	bne.n	80193c0 <vTaskSwitchContext+0xac>
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	685b      	ldr	r3, [r3, #4]
 80193ba:	685a      	ldr	r2, [r3, #4]
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	605a      	str	r2, [r3, #4]
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	685b      	ldr	r3, [r3, #4]
 80193c4:	68db      	ldr	r3, [r3, #12]
 80193c6:	4a06      	ldr	r2, [pc, #24]	; (80193e0 <vTaskSwitchContext+0xcc>)
 80193c8:	6013      	str	r3, [r2, #0]
 80193ca:	4a06      	ldr	r2, [pc, #24]	; (80193e4 <vTaskSwitchContext+0xd0>)
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6013      	str	r3, [r2, #0]
}
 80193d0:	bf00      	nop
 80193d2:	3710      	adds	r7, #16
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	24002c80 	.word	0x24002c80
 80193dc:	24002c6c 	.word	0x24002c6c
 80193e0:	24002784 	.word	0x24002784
 80193e4:	24002c60 	.word	0x24002c60
 80193e8:	24002788 	.word	0x24002788

080193ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d10a      	bne.n	8019412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80193fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019400:	f383 8811 	msr	BASEPRI, r3
 8019404:	f3bf 8f6f 	isb	sy
 8019408:	f3bf 8f4f 	dsb	sy
 801940c:	60fb      	str	r3, [r7, #12]
}
 801940e:	bf00      	nop
 8019410:	e7fe      	b.n	8019410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019412:	4b07      	ldr	r3, [pc, #28]	; (8019430 <vTaskPlaceOnEventList+0x44>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	3318      	adds	r3, #24
 8019418:	4619      	mov	r1, r3
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f7fe fd6b 	bl	8017ef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019420:	2101      	movs	r1, #1
 8019422:	6838      	ldr	r0, [r7, #0]
 8019424:	f000 fb32 	bl	8019a8c <prvAddCurrentTaskToDelayedList>
}
 8019428:	bf00      	nop
 801942a:	3710      	adds	r7, #16
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}
 8019430:	24002784 	.word	0x24002784

08019434 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d10a      	bne.n	801945c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8019446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801944a:	f383 8811 	msr	BASEPRI, r3
 801944e:	f3bf 8f6f 	isb	sy
 8019452:	f3bf 8f4f 	dsb	sy
 8019456:	617b      	str	r3, [r7, #20]
}
 8019458:	bf00      	nop
 801945a:	e7fe      	b.n	801945a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801945c:	4b11      	ldr	r3, [pc, #68]	; (80194a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d10a      	bne.n	801947a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8019464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019468:	f383 8811 	msr	BASEPRI, r3
 801946c:	f3bf 8f6f 	isb	sy
 8019470:	f3bf 8f4f 	dsb	sy
 8019474:	613b      	str	r3, [r7, #16]
}
 8019476:	bf00      	nop
 8019478:	e7fe      	b.n	8019478 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801947a:	4b0b      	ldr	r3, [pc, #44]	; (80194a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8019484:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019486:	4b08      	ldr	r3, [pc, #32]	; (80194a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	3318      	adds	r3, #24
 801948c:	4619      	mov	r1, r3
 801948e:	68f8      	ldr	r0, [r7, #12]
 8019490:	f7fe fd0d 	bl	8017eae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019494:	2101      	movs	r1, #1
 8019496:	6878      	ldr	r0, [r7, #4]
 8019498:	f000 faf8 	bl	8019a8c <prvAddCurrentTaskToDelayedList>
}
 801949c:	bf00      	nop
 801949e:	3718      	adds	r7, #24
 80194a0:	46bd      	mov	sp, r7
 80194a2:	bd80      	pop	{r7, pc}
 80194a4:	24002c80 	.word	0x24002c80
 80194a8:	24002784 	.word	0x24002784

080194ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b086      	sub	sp, #24
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	60f8      	str	r0, [r7, #12]
 80194b4:	60b9      	str	r1, [r7, #8]
 80194b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d10a      	bne.n	80194d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80194be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194c2:	f383 8811 	msr	BASEPRI, r3
 80194c6:	f3bf 8f6f 	isb	sy
 80194ca:	f3bf 8f4f 	dsb	sy
 80194ce:	617b      	str	r3, [r7, #20]
}
 80194d0:	bf00      	nop
 80194d2:	e7fe      	b.n	80194d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80194d4:	4b0a      	ldr	r3, [pc, #40]	; (8019500 <vTaskPlaceOnEventListRestricted+0x54>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	3318      	adds	r3, #24
 80194da:	4619      	mov	r1, r3
 80194dc:	68f8      	ldr	r0, [r7, #12]
 80194de:	f7fe fce6 	bl	8017eae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d002      	beq.n	80194ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80194e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80194ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80194ee:	6879      	ldr	r1, [r7, #4]
 80194f0:	68b8      	ldr	r0, [r7, #8]
 80194f2:	f000 facb 	bl	8019a8c <prvAddCurrentTaskToDelayedList>
	}
 80194f6:	bf00      	nop
 80194f8:	3718      	adds	r7, #24
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	24002784 	.word	0x24002784

08019504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019504:	b580      	push	{r7, lr}
 8019506:	b086      	sub	sp, #24
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	68db      	ldr	r3, [r3, #12]
 8019510:	68db      	ldr	r3, [r3, #12]
 8019512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019514:	693b      	ldr	r3, [r7, #16]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d10a      	bne.n	8019530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801951e:	f383 8811 	msr	BASEPRI, r3
 8019522:	f3bf 8f6f 	isb	sy
 8019526:	f3bf 8f4f 	dsb	sy
 801952a:	60fb      	str	r3, [r7, #12]
}
 801952c:	bf00      	nop
 801952e:	e7fe      	b.n	801952e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019530:	693b      	ldr	r3, [r7, #16]
 8019532:	3318      	adds	r3, #24
 8019534:	4618      	mov	r0, r3
 8019536:	f7fe fd17 	bl	8017f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801953a:	4b1e      	ldr	r3, [pc, #120]	; (80195b4 <xTaskRemoveFromEventList+0xb0>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d11d      	bne.n	801957e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019542:	693b      	ldr	r3, [r7, #16]
 8019544:	3304      	adds	r3, #4
 8019546:	4618      	mov	r0, r3
 8019548:	f7fe fd0e 	bl	8017f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801954c:	693b      	ldr	r3, [r7, #16]
 801954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019550:	4b19      	ldr	r3, [pc, #100]	; (80195b8 <xTaskRemoveFromEventList+0xb4>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	429a      	cmp	r2, r3
 8019556:	d903      	bls.n	8019560 <xTaskRemoveFromEventList+0x5c>
 8019558:	693b      	ldr	r3, [r7, #16]
 801955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801955c:	4a16      	ldr	r2, [pc, #88]	; (80195b8 <xTaskRemoveFromEventList+0xb4>)
 801955e:	6013      	str	r3, [r2, #0]
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019564:	4613      	mov	r3, r2
 8019566:	009b      	lsls	r3, r3, #2
 8019568:	4413      	add	r3, r2
 801956a:	009b      	lsls	r3, r3, #2
 801956c:	4a13      	ldr	r2, [pc, #76]	; (80195bc <xTaskRemoveFromEventList+0xb8>)
 801956e:	441a      	add	r2, r3
 8019570:	693b      	ldr	r3, [r7, #16]
 8019572:	3304      	adds	r3, #4
 8019574:	4619      	mov	r1, r3
 8019576:	4610      	mov	r0, r2
 8019578:	f7fe fc99 	bl	8017eae <vListInsertEnd>
 801957c:	e005      	b.n	801958a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801957e:	693b      	ldr	r3, [r7, #16]
 8019580:	3318      	adds	r3, #24
 8019582:	4619      	mov	r1, r3
 8019584:	480e      	ldr	r0, [pc, #56]	; (80195c0 <xTaskRemoveFromEventList+0xbc>)
 8019586:	f7fe fc92 	bl	8017eae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801958a:	693b      	ldr	r3, [r7, #16]
 801958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801958e:	4b0d      	ldr	r3, [pc, #52]	; (80195c4 <xTaskRemoveFromEventList+0xc0>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019594:	429a      	cmp	r2, r3
 8019596:	d905      	bls.n	80195a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019598:	2301      	movs	r3, #1
 801959a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801959c:	4b0a      	ldr	r3, [pc, #40]	; (80195c8 <xTaskRemoveFromEventList+0xc4>)
 801959e:	2201      	movs	r2, #1
 80195a0:	601a      	str	r2, [r3, #0]
 80195a2:	e001      	b.n	80195a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80195a4:	2300      	movs	r3, #0
 80195a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80195a8:	697b      	ldr	r3, [r7, #20]
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	3718      	adds	r7, #24
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
 80195b2:	bf00      	nop
 80195b4:	24002c80 	.word	0x24002c80
 80195b8:	24002c60 	.word	0x24002c60
 80195bc:	24002788 	.word	0x24002788
 80195c0:	24002c18 	.word	0x24002c18
 80195c4:	24002784 	.word	0x24002784
 80195c8:	24002c6c 	.word	0x24002c6c

080195cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b086      	sub	sp, #24
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
 80195d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80195d6:	4b29      	ldr	r3, [pc, #164]	; (801967c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d10a      	bne.n	80195f4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	613b      	str	r3, [r7, #16]
}
 80195f0:	bf00      	nop
 80195f2:	e7fe      	b.n	80195f2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80195f4:	683b      	ldr	r3, [r7, #0]
 80195f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	68db      	ldr	r3, [r3, #12]
 8019602:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d10a      	bne.n	8019620 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801960e:	f383 8811 	msr	BASEPRI, r3
 8019612:	f3bf 8f6f 	isb	sy
 8019616:	f3bf 8f4f 	dsb	sy
 801961a:	60fb      	str	r3, [r7, #12]
}
 801961c:	bf00      	nop
 801961e:	e7fe      	b.n	801961e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8019620:	6878      	ldr	r0, [r7, #4]
 8019622:	f7fe fca1 	bl	8017f68 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	3304      	adds	r3, #4
 801962a:	4618      	mov	r0, r3
 801962c:	f7fe fc9c 	bl	8017f68 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8019630:	697b      	ldr	r3, [r7, #20]
 8019632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019634:	4b12      	ldr	r3, [pc, #72]	; (8019680 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	429a      	cmp	r2, r3
 801963a:	d903      	bls.n	8019644 <vTaskRemoveFromUnorderedEventList+0x78>
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019640:	4a0f      	ldr	r2, [pc, #60]	; (8019680 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019642:	6013      	str	r3, [r2, #0]
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019648:	4613      	mov	r3, r2
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	4413      	add	r3, r2
 801964e:	009b      	lsls	r3, r3, #2
 8019650:	4a0c      	ldr	r2, [pc, #48]	; (8019684 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8019652:	441a      	add	r2, r3
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	3304      	adds	r3, #4
 8019658:	4619      	mov	r1, r3
 801965a:	4610      	mov	r0, r2
 801965c:	f7fe fc27 	bl	8017eae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019664:	4b08      	ldr	r3, [pc, #32]	; (8019688 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801966a:	429a      	cmp	r2, r3
 801966c:	d902      	bls.n	8019674 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801966e:	4b07      	ldr	r3, [pc, #28]	; (801968c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8019670:	2201      	movs	r2, #1
 8019672:	601a      	str	r2, [r3, #0]
	}
}
 8019674:	bf00      	nop
 8019676:	3718      	adds	r7, #24
 8019678:	46bd      	mov	sp, r7
 801967a:	bd80      	pop	{r7, pc}
 801967c:	24002c80 	.word	0x24002c80
 8019680:	24002c60 	.word	0x24002c60
 8019684:	24002788 	.word	0x24002788
 8019688:	24002784 	.word	0x24002784
 801968c:	24002c6c 	.word	0x24002c6c

08019690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019690:	b480      	push	{r7}
 8019692:	b083      	sub	sp, #12
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019698:	4b06      	ldr	r3, [pc, #24]	; (80196b4 <vTaskInternalSetTimeOutState+0x24>)
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80196a0:	4b05      	ldr	r3, [pc, #20]	; (80196b8 <vTaskInternalSetTimeOutState+0x28>)
 80196a2:	681a      	ldr	r2, [r3, #0]
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	605a      	str	r2, [r3, #4]
}
 80196a8:	bf00      	nop
 80196aa:	370c      	adds	r7, #12
 80196ac:	46bd      	mov	sp, r7
 80196ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b2:	4770      	bx	lr
 80196b4:	24002c70 	.word	0x24002c70
 80196b8:	24002c5c 	.word	0x24002c5c

080196bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b088      	sub	sp, #32
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
 80196c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10a      	bne.n	80196e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80196cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196d0:	f383 8811 	msr	BASEPRI, r3
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	f3bf 8f4f 	dsb	sy
 80196dc:	613b      	str	r3, [r7, #16]
}
 80196de:	bf00      	nop
 80196e0:	e7fe      	b.n	80196e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d10a      	bne.n	80196fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80196e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196ec:	f383 8811 	msr	BASEPRI, r3
 80196f0:	f3bf 8f6f 	isb	sy
 80196f4:	f3bf 8f4f 	dsb	sy
 80196f8:	60fb      	str	r3, [r7, #12]
}
 80196fa:	bf00      	nop
 80196fc:	e7fe      	b.n	80196fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80196fe:	f000 feb1 	bl	801a464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019702:	4b1d      	ldr	r3, [pc, #116]	; (8019778 <xTaskCheckForTimeOut+0xbc>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	685b      	ldr	r3, [r3, #4]
 801970c:	69ba      	ldr	r2, [r7, #24]
 801970e:	1ad3      	subs	r3, r2, r3
 8019710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801971a:	d102      	bne.n	8019722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801971c:	2300      	movs	r3, #0
 801971e:	61fb      	str	r3, [r7, #28]
 8019720:	e023      	b.n	801976a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681a      	ldr	r2, [r3, #0]
 8019726:	4b15      	ldr	r3, [pc, #84]	; (801977c <xTaskCheckForTimeOut+0xc0>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	429a      	cmp	r2, r3
 801972c:	d007      	beq.n	801973e <xTaskCheckForTimeOut+0x82>
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	69ba      	ldr	r2, [r7, #24]
 8019734:	429a      	cmp	r2, r3
 8019736:	d302      	bcc.n	801973e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019738:	2301      	movs	r3, #1
 801973a:	61fb      	str	r3, [r7, #28]
 801973c:	e015      	b.n	801976a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801973e:	683b      	ldr	r3, [r7, #0]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	697a      	ldr	r2, [r7, #20]
 8019744:	429a      	cmp	r2, r3
 8019746:	d20b      	bcs.n	8019760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	1ad2      	subs	r2, r2, r3
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	f7ff ff9b 	bl	8019690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801975a:	2300      	movs	r3, #0
 801975c:	61fb      	str	r3, [r7, #28]
 801975e:	e004      	b.n	801976a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	2200      	movs	r2, #0
 8019764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019766:	2301      	movs	r3, #1
 8019768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801976a:	f000 feab 	bl	801a4c4 <vPortExitCritical>

	return xReturn;
 801976e:	69fb      	ldr	r3, [r7, #28]
}
 8019770:	4618      	mov	r0, r3
 8019772:	3720      	adds	r7, #32
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	24002c5c 	.word	0x24002c5c
 801977c:	24002c70 	.word	0x24002c70

08019780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019780:	b480      	push	{r7}
 8019782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019784:	4b03      	ldr	r3, [pc, #12]	; (8019794 <vTaskMissedYield+0x14>)
 8019786:	2201      	movs	r2, #1
 8019788:	601a      	str	r2, [r3, #0]
}
 801978a:	bf00      	nop
 801978c:	46bd      	mov	sp, r7
 801978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019792:	4770      	bx	lr
 8019794:	24002c6c 	.word	0x24002c6c

08019798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80197a0:	f000 f852 	bl	8019848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80197a4:	4b06      	ldr	r3, [pc, #24]	; (80197c0 <prvIdleTask+0x28>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	d9f9      	bls.n	80197a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80197ac:	4b05      	ldr	r3, [pc, #20]	; (80197c4 <prvIdleTask+0x2c>)
 80197ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80197b2:	601a      	str	r2, [r3, #0]
 80197b4:	f3bf 8f4f 	dsb	sy
 80197b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80197bc:	e7f0      	b.n	80197a0 <prvIdleTask+0x8>
 80197be:	bf00      	nop
 80197c0:	24002788 	.word	0x24002788
 80197c4:	e000ed04 	.word	0xe000ed04

080197c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b082      	sub	sp, #8
 80197cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80197ce:	2300      	movs	r3, #0
 80197d0:	607b      	str	r3, [r7, #4]
 80197d2:	e00c      	b.n	80197ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	4613      	mov	r3, r2
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	4413      	add	r3, r2
 80197dc:	009b      	lsls	r3, r3, #2
 80197de:	4a12      	ldr	r2, [pc, #72]	; (8019828 <prvInitialiseTaskLists+0x60>)
 80197e0:	4413      	add	r3, r2
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7fe fb36 	bl	8017e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	3301      	adds	r3, #1
 80197ec:	607b      	str	r3, [r7, #4]
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2b37      	cmp	r3, #55	; 0x37
 80197f2:	d9ef      	bls.n	80197d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80197f4:	480d      	ldr	r0, [pc, #52]	; (801982c <prvInitialiseTaskLists+0x64>)
 80197f6:	f7fe fb2d 	bl	8017e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80197fa:	480d      	ldr	r0, [pc, #52]	; (8019830 <prvInitialiseTaskLists+0x68>)
 80197fc:	f7fe fb2a 	bl	8017e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019800:	480c      	ldr	r0, [pc, #48]	; (8019834 <prvInitialiseTaskLists+0x6c>)
 8019802:	f7fe fb27 	bl	8017e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019806:	480c      	ldr	r0, [pc, #48]	; (8019838 <prvInitialiseTaskLists+0x70>)
 8019808:	f7fe fb24 	bl	8017e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801980c:	480b      	ldr	r0, [pc, #44]	; (801983c <prvInitialiseTaskLists+0x74>)
 801980e:	f7fe fb21 	bl	8017e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019812:	4b0b      	ldr	r3, [pc, #44]	; (8019840 <prvInitialiseTaskLists+0x78>)
 8019814:	4a05      	ldr	r2, [pc, #20]	; (801982c <prvInitialiseTaskLists+0x64>)
 8019816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019818:	4b0a      	ldr	r3, [pc, #40]	; (8019844 <prvInitialiseTaskLists+0x7c>)
 801981a:	4a05      	ldr	r2, [pc, #20]	; (8019830 <prvInitialiseTaskLists+0x68>)
 801981c:	601a      	str	r2, [r3, #0]
}
 801981e:	bf00      	nop
 8019820:	3708      	adds	r7, #8
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}
 8019826:	bf00      	nop
 8019828:	24002788 	.word	0x24002788
 801982c:	24002be8 	.word	0x24002be8
 8019830:	24002bfc 	.word	0x24002bfc
 8019834:	24002c18 	.word	0x24002c18
 8019838:	24002c2c 	.word	0x24002c2c
 801983c:	24002c44 	.word	0x24002c44
 8019840:	24002c10 	.word	0x24002c10
 8019844:	24002c14 	.word	0x24002c14

08019848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b082      	sub	sp, #8
 801984c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801984e:	e019      	b.n	8019884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019850:	f000 fe08 	bl	801a464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019854:	4b10      	ldr	r3, [pc, #64]	; (8019898 <prvCheckTasksWaitingTermination+0x50>)
 8019856:	68db      	ldr	r3, [r3, #12]
 8019858:	68db      	ldr	r3, [r3, #12]
 801985a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	3304      	adds	r3, #4
 8019860:	4618      	mov	r0, r3
 8019862:	f7fe fb81 	bl	8017f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019866:	4b0d      	ldr	r3, [pc, #52]	; (801989c <prvCheckTasksWaitingTermination+0x54>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	3b01      	subs	r3, #1
 801986c:	4a0b      	ldr	r2, [pc, #44]	; (801989c <prvCheckTasksWaitingTermination+0x54>)
 801986e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019870:	4b0b      	ldr	r3, [pc, #44]	; (80198a0 <prvCheckTasksWaitingTermination+0x58>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	3b01      	subs	r3, #1
 8019876:	4a0a      	ldr	r2, [pc, #40]	; (80198a0 <prvCheckTasksWaitingTermination+0x58>)
 8019878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801987a:	f000 fe23 	bl	801a4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f000 f810 	bl	80198a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019884:	4b06      	ldr	r3, [pc, #24]	; (80198a0 <prvCheckTasksWaitingTermination+0x58>)
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d1e1      	bne.n	8019850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801988c:	bf00      	nop
 801988e:	bf00      	nop
 8019890:	3708      	adds	r7, #8
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}
 8019896:	bf00      	nop
 8019898:	24002c2c 	.word	0x24002c2c
 801989c:	24002c58 	.word	0x24002c58
 80198a0:	24002c40 	.word	0x24002c40

080198a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d108      	bne.n	80198c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198ba:	4618      	mov	r0, r3
 80198bc:	f000 ffc0 	bl	801a840 <vPortFree>
				vPortFree( pxTCB );
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f000 ffbd 	bl	801a840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80198c6:	e018      	b.n	80198fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d103      	bne.n	80198da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80198d2:	6878      	ldr	r0, [r7, #4]
 80198d4:	f000 ffb4 	bl	801a840 <vPortFree>
	}
 80198d8:	e00f      	b.n	80198fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80198e0:	2b02      	cmp	r3, #2
 80198e2:	d00a      	beq.n	80198fa <prvDeleteTCB+0x56>
	__asm volatile
 80198e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e8:	f383 8811 	msr	BASEPRI, r3
 80198ec:	f3bf 8f6f 	isb	sy
 80198f0:	f3bf 8f4f 	dsb	sy
 80198f4:	60fb      	str	r3, [r7, #12]
}
 80198f6:	bf00      	nop
 80198f8:	e7fe      	b.n	80198f8 <prvDeleteTCB+0x54>
	}
 80198fa:	bf00      	nop
 80198fc:	3710      	adds	r7, #16
 80198fe:	46bd      	mov	sp, r7
 8019900:	bd80      	pop	{r7, pc}
	...

08019904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019904:	b480      	push	{r7}
 8019906:	b083      	sub	sp, #12
 8019908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801990a:	4b0c      	ldr	r3, [pc, #48]	; (801993c <prvResetNextTaskUnblockTime+0x38>)
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d104      	bne.n	801991e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019914:	4b0a      	ldr	r3, [pc, #40]	; (8019940 <prvResetNextTaskUnblockTime+0x3c>)
 8019916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801991a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801991c:	e008      	b.n	8019930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801991e:	4b07      	ldr	r3, [pc, #28]	; (801993c <prvResetNextTaskUnblockTime+0x38>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	68db      	ldr	r3, [r3, #12]
 8019924:	68db      	ldr	r3, [r3, #12]
 8019926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	4a04      	ldr	r2, [pc, #16]	; (8019940 <prvResetNextTaskUnblockTime+0x3c>)
 801992e:	6013      	str	r3, [r2, #0]
}
 8019930:	bf00      	nop
 8019932:	370c      	adds	r7, #12
 8019934:	46bd      	mov	sp, r7
 8019936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993a:	4770      	bx	lr
 801993c:	24002c10 	.word	0x24002c10
 8019940:	24002c78 	.word	0x24002c78

08019944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019944:	b480      	push	{r7}
 8019946:	b083      	sub	sp, #12
 8019948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801994a:	4b0b      	ldr	r3, [pc, #44]	; (8019978 <xTaskGetSchedulerState+0x34>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d102      	bne.n	8019958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019952:	2301      	movs	r3, #1
 8019954:	607b      	str	r3, [r7, #4]
 8019956:	e008      	b.n	801996a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019958:	4b08      	ldr	r3, [pc, #32]	; (801997c <xTaskGetSchedulerState+0x38>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d102      	bne.n	8019966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019960:	2302      	movs	r3, #2
 8019962:	607b      	str	r3, [r7, #4]
 8019964:	e001      	b.n	801996a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019966:	2300      	movs	r3, #0
 8019968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801996a:	687b      	ldr	r3, [r7, #4]
	}
 801996c:	4618      	mov	r0, r3
 801996e:	370c      	adds	r7, #12
 8019970:	46bd      	mov	sp, r7
 8019972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019976:	4770      	bx	lr
 8019978:	24002c64 	.word	0x24002c64
 801997c:	24002c80 	.word	0x24002c80

08019980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019980:	b580      	push	{r7, lr}
 8019982:	b086      	sub	sp, #24
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801998c:	2300      	movs	r3, #0
 801998e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d056      	beq.n	8019a44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019996:	4b2e      	ldr	r3, [pc, #184]	; (8019a50 <xTaskPriorityDisinherit+0xd0>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	693a      	ldr	r2, [r7, #16]
 801999c:	429a      	cmp	r2, r3
 801999e:	d00a      	beq.n	80199b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80199a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199a4:	f383 8811 	msr	BASEPRI, r3
 80199a8:	f3bf 8f6f 	isb	sy
 80199ac:	f3bf 8f4f 	dsb	sy
 80199b0:	60fb      	str	r3, [r7, #12]
}
 80199b2:	bf00      	nop
 80199b4:	e7fe      	b.n	80199b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80199b6:	693b      	ldr	r3, [r7, #16]
 80199b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d10a      	bne.n	80199d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80199be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199c2:	f383 8811 	msr	BASEPRI, r3
 80199c6:	f3bf 8f6f 	isb	sy
 80199ca:	f3bf 8f4f 	dsb	sy
 80199ce:	60bb      	str	r3, [r7, #8]
}
 80199d0:	bf00      	nop
 80199d2:	e7fe      	b.n	80199d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80199d4:	693b      	ldr	r3, [r7, #16]
 80199d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80199d8:	1e5a      	subs	r2, r3, #1
 80199da:	693b      	ldr	r3, [r7, #16]
 80199dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80199de:	693b      	ldr	r3, [r7, #16]
 80199e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199e2:	693b      	ldr	r3, [r7, #16]
 80199e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d02c      	beq.n	8019a44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80199ea:	693b      	ldr	r3, [r7, #16]
 80199ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d128      	bne.n	8019a44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80199f2:	693b      	ldr	r3, [r7, #16]
 80199f4:	3304      	adds	r3, #4
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7fe fab6 	bl	8017f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80199fc:	693b      	ldr	r3, [r7, #16]
 80199fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019a0c:	693b      	ldr	r3, [r7, #16]
 8019a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a14:	4b0f      	ldr	r3, [pc, #60]	; (8019a54 <xTaskPriorityDisinherit+0xd4>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d903      	bls.n	8019a24 <xTaskPriorityDisinherit+0xa4>
 8019a1c:	693b      	ldr	r3, [r7, #16]
 8019a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a20:	4a0c      	ldr	r2, [pc, #48]	; (8019a54 <xTaskPriorityDisinherit+0xd4>)
 8019a22:	6013      	str	r3, [r2, #0]
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a28:	4613      	mov	r3, r2
 8019a2a:	009b      	lsls	r3, r3, #2
 8019a2c:	4413      	add	r3, r2
 8019a2e:	009b      	lsls	r3, r3, #2
 8019a30:	4a09      	ldr	r2, [pc, #36]	; (8019a58 <xTaskPriorityDisinherit+0xd8>)
 8019a32:	441a      	add	r2, r3
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	3304      	adds	r3, #4
 8019a38:	4619      	mov	r1, r3
 8019a3a:	4610      	mov	r0, r2
 8019a3c:	f7fe fa37 	bl	8017eae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019a40:	2301      	movs	r3, #1
 8019a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019a44:	697b      	ldr	r3, [r7, #20]
	}
 8019a46:	4618      	mov	r0, r3
 8019a48:	3718      	adds	r7, #24
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
 8019a4e:	bf00      	nop
 8019a50:	24002784 	.word	0x24002784
 8019a54:	24002c60 	.word	0x24002c60
 8019a58:	24002788 	.word	0x24002788

08019a5c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	b083      	sub	sp, #12
 8019a60:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8019a62:	4b09      	ldr	r3, [pc, #36]	; (8019a88 <uxTaskResetEventItemValue+0x2c>)
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	699b      	ldr	r3, [r3, #24]
 8019a68:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a6a:	4b07      	ldr	r3, [pc, #28]	; (8019a88 <uxTaskResetEventItemValue+0x2c>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a70:	4b05      	ldr	r3, [pc, #20]	; (8019a88 <uxTaskResetEventItemValue+0x2c>)
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8019a78:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8019a7a:	687b      	ldr	r3, [r7, #4]
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	370c      	adds	r7, #12
 8019a80:	46bd      	mov	sp, r7
 8019a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a86:	4770      	bx	lr
 8019a88:	24002784 	.word	0x24002784

08019a8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019a96:	4b21      	ldr	r3, [pc, #132]	; (8019b1c <prvAddCurrentTaskToDelayedList+0x90>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019a9c:	4b20      	ldr	r3, [pc, #128]	; (8019b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7fe fa60 	bl	8017f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019aae:	d10a      	bne.n	8019ac6 <prvAddCurrentTaskToDelayedList+0x3a>
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d007      	beq.n	8019ac6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019ab6:	4b1a      	ldr	r3, [pc, #104]	; (8019b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	3304      	adds	r3, #4
 8019abc:	4619      	mov	r1, r3
 8019abe:	4819      	ldr	r0, [pc, #100]	; (8019b24 <prvAddCurrentTaskToDelayedList+0x98>)
 8019ac0:	f7fe f9f5 	bl	8017eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019ac4:	e026      	b.n	8019b14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019ac6:	68fa      	ldr	r2, [r7, #12]
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	4413      	add	r3, r2
 8019acc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019ace:	4b14      	ldr	r3, [pc, #80]	; (8019b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	68ba      	ldr	r2, [r7, #8]
 8019ad4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019ad6:	68ba      	ldr	r2, [r7, #8]
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d209      	bcs.n	8019af2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019ade:	4b12      	ldr	r3, [pc, #72]	; (8019b28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	4b0f      	ldr	r3, [pc, #60]	; (8019b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	3304      	adds	r3, #4
 8019ae8:	4619      	mov	r1, r3
 8019aea:	4610      	mov	r0, r2
 8019aec:	f7fe fa03 	bl	8017ef6 <vListInsert>
}
 8019af0:	e010      	b.n	8019b14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019af2:	4b0e      	ldr	r3, [pc, #56]	; (8019b2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019af4:	681a      	ldr	r2, [r3, #0]
 8019af6:	4b0a      	ldr	r3, [pc, #40]	; (8019b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	3304      	adds	r3, #4
 8019afc:	4619      	mov	r1, r3
 8019afe:	4610      	mov	r0, r2
 8019b00:	f7fe f9f9 	bl	8017ef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019b04:	4b0a      	ldr	r3, [pc, #40]	; (8019b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	68ba      	ldr	r2, [r7, #8]
 8019b0a:	429a      	cmp	r2, r3
 8019b0c:	d202      	bcs.n	8019b14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019b0e:	4a08      	ldr	r2, [pc, #32]	; (8019b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	6013      	str	r3, [r2, #0]
}
 8019b14:	bf00      	nop
 8019b16:	3710      	adds	r7, #16
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}
 8019b1c:	24002c5c 	.word	0x24002c5c
 8019b20:	24002784 	.word	0x24002784
 8019b24:	24002c44 	.word	0x24002c44
 8019b28:	24002c14 	.word	0x24002c14
 8019b2c:	24002c10 	.word	0x24002c10
 8019b30:	24002c78 	.word	0x24002c78

08019b34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b08a      	sub	sp, #40	; 0x28
 8019b38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019b3e:	f000 fb07 	bl	801a150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019b42:	4b1c      	ldr	r3, [pc, #112]	; (8019bb4 <xTimerCreateTimerTask+0x80>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d021      	beq.n	8019b8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019b52:	1d3a      	adds	r2, r7, #4
 8019b54:	f107 0108 	add.w	r1, r7, #8
 8019b58:	f107 030c 	add.w	r3, r7, #12
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7fd fef3 	bl	8017948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019b62:	6879      	ldr	r1, [r7, #4]
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	68fa      	ldr	r2, [r7, #12]
 8019b68:	9202      	str	r2, [sp, #8]
 8019b6a:	9301      	str	r3, [sp, #4]
 8019b6c:	2302      	movs	r3, #2
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	2300      	movs	r3, #0
 8019b72:	460a      	mov	r2, r1
 8019b74:	4910      	ldr	r1, [pc, #64]	; (8019bb8 <xTimerCreateTimerTask+0x84>)
 8019b76:	4811      	ldr	r0, [pc, #68]	; (8019bbc <xTimerCreateTimerTask+0x88>)
 8019b78:	f7fe ff0c 	bl	8018994 <xTaskCreateStatic>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	4a10      	ldr	r2, [pc, #64]	; (8019bc0 <xTimerCreateTimerTask+0x8c>)
 8019b80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019b82:	4b0f      	ldr	r3, [pc, #60]	; (8019bc0 <xTimerCreateTimerTask+0x8c>)
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d001      	beq.n	8019b8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d10a      	bne.n	8019baa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b98:	f383 8811 	msr	BASEPRI, r3
 8019b9c:	f3bf 8f6f 	isb	sy
 8019ba0:	f3bf 8f4f 	dsb	sy
 8019ba4:	613b      	str	r3, [r7, #16]
}
 8019ba6:	bf00      	nop
 8019ba8:	e7fe      	b.n	8019ba8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019baa:	697b      	ldr	r3, [r7, #20]
}
 8019bac:	4618      	mov	r0, r3
 8019bae:	3718      	adds	r7, #24
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	24002cb4 	.word	0x24002cb4
 8019bb8:	0801b768 	.word	0x0801b768
 8019bbc:	08019cf9 	.word	0x08019cf9
 8019bc0:	24002cb8 	.word	0x24002cb8

08019bc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b08a      	sub	sp, #40	; 0x28
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	60f8      	str	r0, [r7, #12]
 8019bcc:	60b9      	str	r1, [r7, #8]
 8019bce:	607a      	str	r2, [r7, #4]
 8019bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d10a      	bne.n	8019bf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019be0:	f383 8811 	msr	BASEPRI, r3
 8019be4:	f3bf 8f6f 	isb	sy
 8019be8:	f3bf 8f4f 	dsb	sy
 8019bec:	623b      	str	r3, [r7, #32]
}
 8019bee:	bf00      	nop
 8019bf0:	e7fe      	b.n	8019bf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019bf2:	4b1a      	ldr	r3, [pc, #104]	; (8019c5c <xTimerGenericCommand+0x98>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d02a      	beq.n	8019c50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	2b05      	cmp	r3, #5
 8019c0a:	dc18      	bgt.n	8019c3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019c0c:	f7ff fe9a 	bl	8019944 <xTaskGetSchedulerState>
 8019c10:	4603      	mov	r3, r0
 8019c12:	2b02      	cmp	r3, #2
 8019c14:	d109      	bne.n	8019c2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019c16:	4b11      	ldr	r3, [pc, #68]	; (8019c5c <xTimerGenericCommand+0x98>)
 8019c18:	6818      	ldr	r0, [r3, #0]
 8019c1a:	f107 0110 	add.w	r1, r7, #16
 8019c1e:	2300      	movs	r3, #0
 8019c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c22:	f7fe facf 	bl	80181c4 <xQueueGenericSend>
 8019c26:	6278      	str	r0, [r7, #36]	; 0x24
 8019c28:	e012      	b.n	8019c50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019c2a:	4b0c      	ldr	r3, [pc, #48]	; (8019c5c <xTimerGenericCommand+0x98>)
 8019c2c:	6818      	ldr	r0, [r3, #0]
 8019c2e:	f107 0110 	add.w	r1, r7, #16
 8019c32:	2300      	movs	r3, #0
 8019c34:	2200      	movs	r2, #0
 8019c36:	f7fe fac5 	bl	80181c4 <xQueueGenericSend>
 8019c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8019c3c:	e008      	b.n	8019c50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019c3e:	4b07      	ldr	r3, [pc, #28]	; (8019c5c <xTimerGenericCommand+0x98>)
 8019c40:	6818      	ldr	r0, [r3, #0]
 8019c42:	f107 0110 	add.w	r1, r7, #16
 8019c46:	2300      	movs	r3, #0
 8019c48:	683a      	ldr	r2, [r7, #0]
 8019c4a:	f7fe fbb9 	bl	80183c0 <xQueueGenericSendFromISR>
 8019c4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019c52:	4618      	mov	r0, r3
 8019c54:	3728      	adds	r7, #40	; 0x28
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}
 8019c5a:	bf00      	nop
 8019c5c:	24002cb4 	.word	0x24002cb4

08019c60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b088      	sub	sp, #32
 8019c64:	af02      	add	r7, sp, #8
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c6a:	4b22      	ldr	r3, [pc, #136]	; (8019cf4 <prvProcessExpiredTimer+0x94>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	68db      	ldr	r3, [r3, #12]
 8019c70:	68db      	ldr	r3, [r3, #12]
 8019c72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	3304      	adds	r3, #4
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7fe f975 	bl	8017f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019c7e:	697b      	ldr	r3, [r7, #20]
 8019c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c84:	f003 0304 	and.w	r3, r3, #4
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d022      	beq.n	8019cd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019c8c:	697b      	ldr	r3, [r7, #20]
 8019c8e:	699a      	ldr	r2, [r3, #24]
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	18d1      	adds	r1, r2, r3
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	683a      	ldr	r2, [r7, #0]
 8019c98:	6978      	ldr	r0, [r7, #20]
 8019c9a:	f000 f8d1 	bl	8019e40 <prvInsertTimerInActiveList>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d01f      	beq.n	8019ce4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	9300      	str	r3, [sp, #0]
 8019ca8:	2300      	movs	r3, #0
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	2100      	movs	r1, #0
 8019cae:	6978      	ldr	r0, [r7, #20]
 8019cb0:	f7ff ff88 	bl	8019bc4 <xTimerGenericCommand>
 8019cb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019cb6:	693b      	ldr	r3, [r7, #16]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d113      	bne.n	8019ce4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cc0:	f383 8811 	msr	BASEPRI, r3
 8019cc4:	f3bf 8f6f 	isb	sy
 8019cc8:	f3bf 8f4f 	dsb	sy
 8019ccc:	60fb      	str	r3, [r7, #12]
}
 8019cce:	bf00      	nop
 8019cd0:	e7fe      	b.n	8019cd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019cd2:	697b      	ldr	r3, [r7, #20]
 8019cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cd8:	f023 0301 	bic.w	r3, r3, #1
 8019cdc:	b2da      	uxtb	r2, r3
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	6a1b      	ldr	r3, [r3, #32]
 8019ce8:	6978      	ldr	r0, [r7, #20]
 8019cea:	4798      	blx	r3
}
 8019cec:	bf00      	nop
 8019cee:	3718      	adds	r7, #24
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}
 8019cf4:	24002cac 	.word	0x24002cac

08019cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b084      	sub	sp, #16
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019d00:	f107 0308 	add.w	r3, r7, #8
 8019d04:	4618      	mov	r0, r3
 8019d06:	f000 f857 	bl	8019db8 <prvGetNextExpireTime>
 8019d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019d0c:	68bb      	ldr	r3, [r7, #8]
 8019d0e:	4619      	mov	r1, r3
 8019d10:	68f8      	ldr	r0, [r7, #12]
 8019d12:	f000 f803 	bl	8019d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019d16:	f000 f8d5 	bl	8019ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019d1a:	e7f1      	b.n	8019d00 <prvTimerTask+0x8>

08019d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b084      	sub	sp, #16
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019d26:	f7ff f977 	bl	8019018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d2a:	f107 0308 	add.w	r3, r7, #8
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f000 f866 	bl	8019e00 <prvSampleTimeNow>
 8019d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d130      	bne.n	8019d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d10a      	bne.n	8019d58 <prvProcessTimerOrBlockTask+0x3c>
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	429a      	cmp	r2, r3
 8019d48:	d806      	bhi.n	8019d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019d4a:	f7ff f973 	bl	8019034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019d4e:	68f9      	ldr	r1, [r7, #12]
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f7ff ff85 	bl	8019c60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019d56:	e024      	b.n	8019da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d008      	beq.n	8019d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019d5e:	4b13      	ldr	r3, [pc, #76]	; (8019dac <prvProcessTimerOrBlockTask+0x90>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d101      	bne.n	8019d6c <prvProcessTimerOrBlockTask+0x50>
 8019d68:	2301      	movs	r3, #1
 8019d6a:	e000      	b.n	8019d6e <prvProcessTimerOrBlockTask+0x52>
 8019d6c:	2300      	movs	r3, #0
 8019d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019d70:	4b0f      	ldr	r3, [pc, #60]	; (8019db0 <prvProcessTimerOrBlockTask+0x94>)
 8019d72:	6818      	ldr	r0, [r3, #0]
 8019d74:	687a      	ldr	r2, [r7, #4]
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	1ad3      	subs	r3, r2, r3
 8019d7a:	683a      	ldr	r2, [r7, #0]
 8019d7c:	4619      	mov	r1, r3
 8019d7e:	f7fe fdd5 	bl	801892c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019d82:	f7ff f957 	bl	8019034 <xTaskResumeAll>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d10a      	bne.n	8019da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019d8c:	4b09      	ldr	r3, [pc, #36]	; (8019db4 <prvProcessTimerOrBlockTask+0x98>)
 8019d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d92:	601a      	str	r2, [r3, #0]
 8019d94:	f3bf 8f4f 	dsb	sy
 8019d98:	f3bf 8f6f 	isb	sy
}
 8019d9c:	e001      	b.n	8019da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019d9e:	f7ff f949 	bl	8019034 <xTaskResumeAll>
}
 8019da2:	bf00      	nop
 8019da4:	3710      	adds	r7, #16
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bd80      	pop	{r7, pc}
 8019daa:	bf00      	nop
 8019dac:	24002cb0 	.word	0x24002cb0
 8019db0:	24002cb4 	.word	0x24002cb4
 8019db4:	e000ed04 	.word	0xe000ed04

08019db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019db8:	b480      	push	{r7}
 8019dba:	b085      	sub	sp, #20
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019dc0:	4b0e      	ldr	r3, [pc, #56]	; (8019dfc <prvGetNextExpireTime+0x44>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d101      	bne.n	8019dce <prvGetNextExpireTime+0x16>
 8019dca:	2201      	movs	r2, #1
 8019dcc:	e000      	b.n	8019dd0 <prvGetNextExpireTime+0x18>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d105      	bne.n	8019de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ddc:	4b07      	ldr	r3, [pc, #28]	; (8019dfc <prvGetNextExpireTime+0x44>)
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	68db      	ldr	r3, [r3, #12]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	60fb      	str	r3, [r7, #12]
 8019de6:	e001      	b.n	8019dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019de8:	2300      	movs	r3, #0
 8019dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019dec:	68fb      	ldr	r3, [r7, #12]
}
 8019dee:	4618      	mov	r0, r3
 8019df0:	3714      	adds	r7, #20
 8019df2:	46bd      	mov	sp, r7
 8019df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df8:	4770      	bx	lr
 8019dfa:	bf00      	nop
 8019dfc:	24002cac 	.word	0x24002cac

08019e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b084      	sub	sp, #16
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019e08:	f7ff f9b2 	bl	8019170 <xTaskGetTickCount>
 8019e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019e0e:	4b0b      	ldr	r3, [pc, #44]	; (8019e3c <prvSampleTimeNow+0x3c>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	68fa      	ldr	r2, [r7, #12]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d205      	bcs.n	8019e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019e18:	f000 f936 	bl	801a088 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2201      	movs	r2, #1
 8019e20:	601a      	str	r2, [r3, #0]
 8019e22:	e002      	b.n	8019e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2200      	movs	r2, #0
 8019e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019e2a:	4a04      	ldr	r2, [pc, #16]	; (8019e3c <prvSampleTimeNow+0x3c>)
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019e30:	68fb      	ldr	r3, [r7, #12]
}
 8019e32:	4618      	mov	r0, r3
 8019e34:	3710      	adds	r7, #16
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bd80      	pop	{r7, pc}
 8019e3a:	bf00      	nop
 8019e3c:	24002cbc 	.word	0x24002cbc

08019e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b086      	sub	sp, #24
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	60f8      	str	r0, [r7, #12]
 8019e48:	60b9      	str	r1, [r7, #8]
 8019e4a:	607a      	str	r2, [r7, #4]
 8019e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	68ba      	ldr	r2, [r7, #8]
 8019e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	68fa      	ldr	r2, [r7, #12]
 8019e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019e5e:	68ba      	ldr	r2, [r7, #8]
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	429a      	cmp	r2, r3
 8019e64:	d812      	bhi.n	8019e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e66:	687a      	ldr	r2, [r7, #4]
 8019e68:	683b      	ldr	r3, [r7, #0]
 8019e6a:	1ad2      	subs	r2, r2, r3
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	699b      	ldr	r3, [r3, #24]
 8019e70:	429a      	cmp	r2, r3
 8019e72:	d302      	bcc.n	8019e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019e74:	2301      	movs	r3, #1
 8019e76:	617b      	str	r3, [r7, #20]
 8019e78:	e01b      	b.n	8019eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019e7a:	4b10      	ldr	r3, [pc, #64]	; (8019ebc <prvInsertTimerInActiveList+0x7c>)
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	3304      	adds	r3, #4
 8019e82:	4619      	mov	r1, r3
 8019e84:	4610      	mov	r0, r2
 8019e86:	f7fe f836 	bl	8017ef6 <vListInsert>
 8019e8a:	e012      	b.n	8019eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019e8c:	687a      	ldr	r2, [r7, #4]
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d206      	bcs.n	8019ea2 <prvInsertTimerInActiveList+0x62>
 8019e94:	68ba      	ldr	r2, [r7, #8]
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d302      	bcc.n	8019ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	617b      	str	r3, [r7, #20]
 8019ea0:	e007      	b.n	8019eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ea2:	4b07      	ldr	r3, [pc, #28]	; (8019ec0 <prvInsertTimerInActiveList+0x80>)
 8019ea4:	681a      	ldr	r2, [r3, #0]
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	3304      	adds	r3, #4
 8019eaa:	4619      	mov	r1, r3
 8019eac:	4610      	mov	r0, r2
 8019eae:	f7fe f822 	bl	8017ef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019eb2:	697b      	ldr	r3, [r7, #20]
}
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	3718      	adds	r7, #24
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	24002cb0 	.word	0x24002cb0
 8019ec0:	24002cac 	.word	0x24002cac

08019ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b08e      	sub	sp, #56	; 0x38
 8019ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019eca:	e0ca      	b.n	801a062 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	da18      	bge.n	8019f04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019ed2:	1d3b      	adds	r3, r7, #4
 8019ed4:	3304      	adds	r3, #4
 8019ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d10a      	bne.n	8019ef4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ee2:	f383 8811 	msr	BASEPRI, r3
 8019ee6:	f3bf 8f6f 	isb	sy
 8019eea:	f3bf 8f4f 	dsb	sy
 8019eee:	61fb      	str	r3, [r7, #28]
}
 8019ef0:	bf00      	nop
 8019ef2:	e7fe      	b.n	8019ef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019efa:	6850      	ldr	r0, [r2, #4]
 8019efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019efe:	6892      	ldr	r2, [r2, #8]
 8019f00:	4611      	mov	r1, r2
 8019f02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	f2c0 80aa 	blt.w	801a060 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f12:	695b      	ldr	r3, [r3, #20]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d004      	beq.n	8019f22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f1a:	3304      	adds	r3, #4
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7fe f823 	bl	8017f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019f22:	463b      	mov	r3, r7
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7ff ff6b 	bl	8019e00 <prvSampleTimeNow>
 8019f2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2b09      	cmp	r3, #9
 8019f30:	f200 8097 	bhi.w	801a062 <prvProcessReceivedCommands+0x19e>
 8019f34:	a201      	add	r2, pc, #4	; (adr r2, 8019f3c <prvProcessReceivedCommands+0x78>)
 8019f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f3a:	bf00      	nop
 8019f3c:	08019f65 	.word	0x08019f65
 8019f40:	08019f65 	.word	0x08019f65
 8019f44:	08019f65 	.word	0x08019f65
 8019f48:	08019fd9 	.word	0x08019fd9
 8019f4c:	08019fed 	.word	0x08019fed
 8019f50:	0801a037 	.word	0x0801a037
 8019f54:	08019f65 	.word	0x08019f65
 8019f58:	08019f65 	.word	0x08019f65
 8019f5c:	08019fd9 	.word	0x08019fd9
 8019f60:	08019fed 	.word	0x08019fed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f6a:	f043 0301 	orr.w	r3, r3, #1
 8019f6e:	b2da      	uxtb	r2, r3
 8019f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019f76:	68ba      	ldr	r2, [r7, #8]
 8019f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f7a:	699b      	ldr	r3, [r3, #24]
 8019f7c:	18d1      	adds	r1, r2, r3
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f84:	f7ff ff5c 	bl	8019e40 <prvInsertTimerInActiveList>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d069      	beq.n	801a062 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f90:	6a1b      	ldr	r3, [r3, #32]
 8019f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f9c:	f003 0304 	and.w	r3, r3, #4
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d05e      	beq.n	801a062 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019fa4:	68ba      	ldr	r2, [r7, #8]
 8019fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa8:	699b      	ldr	r3, [r3, #24]
 8019faa:	441a      	add	r2, r3
 8019fac:	2300      	movs	r3, #0
 8019fae:	9300      	str	r3, [sp, #0]
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	2100      	movs	r1, #0
 8019fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019fb6:	f7ff fe05 	bl	8019bc4 <xTimerGenericCommand>
 8019fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d14f      	bne.n	801a062 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fc6:	f383 8811 	msr	BASEPRI, r3
 8019fca:	f3bf 8f6f 	isb	sy
 8019fce:	f3bf 8f4f 	dsb	sy
 8019fd2:	61bb      	str	r3, [r7, #24]
}
 8019fd4:	bf00      	nop
 8019fd6:	e7fe      	b.n	8019fd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019fde:	f023 0301 	bic.w	r3, r3, #1
 8019fe2:	b2da      	uxtb	r2, r3
 8019fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019fea:	e03a      	b.n	801a062 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ff2:	f043 0301 	orr.w	r3, r3, #1
 8019ff6:	b2da      	uxtb	r2, r3
 8019ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019ffe:	68ba      	ldr	r2, [r7, #8]
 801a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a002:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a006:	699b      	ldr	r3, [r3, #24]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d10a      	bne.n	801a022 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a010:	f383 8811 	msr	BASEPRI, r3
 801a014:	f3bf 8f6f 	isb	sy
 801a018:	f3bf 8f4f 	dsb	sy
 801a01c:	617b      	str	r3, [r7, #20]
}
 801a01e:	bf00      	nop
 801a020:	e7fe      	b.n	801a020 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a024:	699a      	ldr	r2, [r3, #24]
 801a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a028:	18d1      	adds	r1, r2, r3
 801a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a030:	f7ff ff06 	bl	8019e40 <prvInsertTimerInActiveList>
					break;
 801a034:	e015      	b.n	801a062 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a03c:	f003 0302 	and.w	r3, r3, #2
 801a040:	2b00      	cmp	r3, #0
 801a042:	d103      	bne.n	801a04c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801a044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a046:	f000 fbfb 	bl	801a840 <vPortFree>
 801a04a:	e00a      	b.n	801a062 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a052:	f023 0301 	bic.w	r3, r3, #1
 801a056:	b2da      	uxtb	r2, r3
 801a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a05e:	e000      	b.n	801a062 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801a060:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a062:	4b08      	ldr	r3, [pc, #32]	; (801a084 <prvProcessReceivedCommands+0x1c0>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	1d39      	adds	r1, r7, #4
 801a068:	2200      	movs	r2, #0
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7fe fa44 	bl	80184f8 <xQueueReceive>
 801a070:	4603      	mov	r3, r0
 801a072:	2b00      	cmp	r3, #0
 801a074:	f47f af2a 	bne.w	8019ecc <prvProcessReceivedCommands+0x8>
	}
}
 801a078:	bf00      	nop
 801a07a:	bf00      	nop
 801a07c:	3730      	adds	r7, #48	; 0x30
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop
 801a084:	24002cb4 	.word	0x24002cb4

0801a088 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b088      	sub	sp, #32
 801a08c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a08e:	e048      	b.n	801a122 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a090:	4b2d      	ldr	r3, [pc, #180]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	68db      	ldr	r3, [r3, #12]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a09a:	4b2b      	ldr	r3, [pc, #172]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	68db      	ldr	r3, [r3, #12]
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	3304      	adds	r3, #4
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7fd ff5d 	bl	8017f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	6a1b      	ldr	r3, [r3, #32]
 801a0b2:	68f8      	ldr	r0, [r7, #12]
 801a0b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a0bc:	f003 0304 	and.w	r3, r3, #4
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d02e      	beq.n	801a122 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	699b      	ldr	r3, [r3, #24]
 801a0c8:	693a      	ldr	r2, [r7, #16]
 801a0ca:	4413      	add	r3, r2
 801a0cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a0ce:	68ba      	ldr	r2, [r7, #8]
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	429a      	cmp	r2, r3
 801a0d4:	d90e      	bls.n	801a0f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	68ba      	ldr	r2, [r7, #8]
 801a0da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a0e2:	4b19      	ldr	r3, [pc, #100]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a0e4:	681a      	ldr	r2, [r3, #0]
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	3304      	adds	r3, #4
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	4610      	mov	r0, r2
 801a0ee:	f7fd ff02 	bl	8017ef6 <vListInsert>
 801a0f2:	e016      	b.n	801a122 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	9300      	str	r3, [sp, #0]
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	693a      	ldr	r2, [r7, #16]
 801a0fc:	2100      	movs	r1, #0
 801a0fe:	68f8      	ldr	r0, [r7, #12]
 801a100:	f7ff fd60 	bl	8019bc4 <xTimerGenericCommand>
 801a104:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d10a      	bne.n	801a122 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a110:	f383 8811 	msr	BASEPRI, r3
 801a114:	f3bf 8f6f 	isb	sy
 801a118:	f3bf 8f4f 	dsb	sy
 801a11c:	603b      	str	r3, [r7, #0]
}
 801a11e:	bf00      	nop
 801a120:	e7fe      	b.n	801a120 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a122:	4b09      	ldr	r3, [pc, #36]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d1b1      	bne.n	801a090 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a12c:	4b06      	ldr	r3, [pc, #24]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a132:	4b06      	ldr	r3, [pc, #24]	; (801a14c <prvSwitchTimerLists+0xc4>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4a04      	ldr	r2, [pc, #16]	; (801a148 <prvSwitchTimerLists+0xc0>)
 801a138:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a13a:	4a04      	ldr	r2, [pc, #16]	; (801a14c <prvSwitchTimerLists+0xc4>)
 801a13c:	697b      	ldr	r3, [r7, #20]
 801a13e:	6013      	str	r3, [r2, #0]
}
 801a140:	bf00      	nop
 801a142:	3718      	adds	r7, #24
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}
 801a148:	24002cac 	.word	0x24002cac
 801a14c:	24002cb0 	.word	0x24002cb0

0801a150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b082      	sub	sp, #8
 801a154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a156:	f000 f985 	bl	801a464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a15a:	4b15      	ldr	r3, [pc, #84]	; (801a1b0 <prvCheckForValidListAndQueue+0x60>)
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d120      	bne.n	801a1a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801a162:	4814      	ldr	r0, [pc, #80]	; (801a1b4 <prvCheckForValidListAndQueue+0x64>)
 801a164:	f7fd fe76 	bl	8017e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a168:	4813      	ldr	r0, [pc, #76]	; (801a1b8 <prvCheckForValidListAndQueue+0x68>)
 801a16a:	f7fd fe73 	bl	8017e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a16e:	4b13      	ldr	r3, [pc, #76]	; (801a1bc <prvCheckForValidListAndQueue+0x6c>)
 801a170:	4a10      	ldr	r2, [pc, #64]	; (801a1b4 <prvCheckForValidListAndQueue+0x64>)
 801a172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a174:	4b12      	ldr	r3, [pc, #72]	; (801a1c0 <prvCheckForValidListAndQueue+0x70>)
 801a176:	4a10      	ldr	r2, [pc, #64]	; (801a1b8 <prvCheckForValidListAndQueue+0x68>)
 801a178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a17a:	2300      	movs	r3, #0
 801a17c:	9300      	str	r3, [sp, #0]
 801a17e:	4b11      	ldr	r3, [pc, #68]	; (801a1c4 <prvCheckForValidListAndQueue+0x74>)
 801a180:	4a11      	ldr	r2, [pc, #68]	; (801a1c8 <prvCheckForValidListAndQueue+0x78>)
 801a182:	2110      	movs	r1, #16
 801a184:	200a      	movs	r0, #10
 801a186:	f7fd ff81 	bl	801808c <xQueueGenericCreateStatic>
 801a18a:	4603      	mov	r3, r0
 801a18c:	4a08      	ldr	r2, [pc, #32]	; (801a1b0 <prvCheckForValidListAndQueue+0x60>)
 801a18e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a190:	4b07      	ldr	r3, [pc, #28]	; (801a1b0 <prvCheckForValidListAndQueue+0x60>)
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d005      	beq.n	801a1a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a198:	4b05      	ldr	r3, [pc, #20]	; (801a1b0 <prvCheckForValidListAndQueue+0x60>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	490b      	ldr	r1, [pc, #44]	; (801a1cc <prvCheckForValidListAndQueue+0x7c>)
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7fe fb9a 	bl	80188d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a1a4:	f000 f98e 	bl	801a4c4 <vPortExitCritical>
}
 801a1a8:	bf00      	nop
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}
 801a1ae:	bf00      	nop
 801a1b0:	24002cb4 	.word	0x24002cb4
 801a1b4:	24002c84 	.word	0x24002c84
 801a1b8:	24002c98 	.word	0x24002c98
 801a1bc:	24002cac 	.word	0x24002cac
 801a1c0:	24002cb0 	.word	0x24002cb0
 801a1c4:	24002d60 	.word	0x24002d60
 801a1c8:	24002cc0 	.word	0x24002cc0
 801a1cc:	0801b770 	.word	0x0801b770

0801a1d0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b08a      	sub	sp, #40	; 0x28
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	60f8      	str	r0, [r7, #12]
 801a1d8:	60b9      	str	r1, [r7, #8]
 801a1da:	607a      	str	r2, [r7, #4]
 801a1dc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801a1de:	f06f 0301 	mvn.w	r3, #1
 801a1e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a1f0:	4b06      	ldr	r3, [pc, #24]	; (801a20c <xTimerPendFunctionCallFromISR+0x3c>)
 801a1f2:	6818      	ldr	r0, [r3, #0]
 801a1f4:	f107 0114 	add.w	r1, r7, #20
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	683a      	ldr	r2, [r7, #0]
 801a1fc:	f7fe f8e0 	bl	80183c0 <xQueueGenericSendFromISR>
 801a200:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a204:	4618      	mov	r0, r3
 801a206:	3728      	adds	r7, #40	; 0x28
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}
 801a20c:	24002cb4 	.word	0x24002cb4

0801a210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a210:	b480      	push	{r7}
 801a212:	b085      	sub	sp, #20
 801a214:	af00      	add	r7, sp, #0
 801a216:	60f8      	str	r0, [r7, #12]
 801a218:	60b9      	str	r1, [r7, #8]
 801a21a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	3b04      	subs	r3, #4
 801a220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	3b04      	subs	r3, #4
 801a22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a230:	68bb      	ldr	r3, [r7, #8]
 801a232:	f023 0201 	bic.w	r2, r3, #1
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	3b04      	subs	r3, #4
 801a23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a240:	4a0c      	ldr	r2, [pc, #48]	; (801a274 <pxPortInitialiseStack+0x64>)
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	3b14      	subs	r3, #20
 801a24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a24c:	687a      	ldr	r2, [r7, #4]
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	3b04      	subs	r3, #4
 801a256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	f06f 0202 	mvn.w	r2, #2
 801a25e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	3b20      	subs	r3, #32
 801a264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a266:	68fb      	ldr	r3, [r7, #12]
}
 801a268:	4618      	mov	r0, r3
 801a26a:	3714      	adds	r7, #20
 801a26c:	46bd      	mov	sp, r7
 801a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a272:	4770      	bx	lr
 801a274:	0801a279 	.word	0x0801a279

0801a278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a278:	b480      	push	{r7}
 801a27a:	b085      	sub	sp, #20
 801a27c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a27e:	2300      	movs	r3, #0
 801a280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a282:	4b12      	ldr	r3, [pc, #72]	; (801a2cc <prvTaskExitError+0x54>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a28a:	d00a      	beq.n	801a2a2 <prvTaskExitError+0x2a>
	__asm volatile
 801a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a290:	f383 8811 	msr	BASEPRI, r3
 801a294:	f3bf 8f6f 	isb	sy
 801a298:	f3bf 8f4f 	dsb	sy
 801a29c:	60fb      	str	r3, [r7, #12]
}
 801a29e:	bf00      	nop
 801a2a0:	e7fe      	b.n	801a2a0 <prvTaskExitError+0x28>
	__asm volatile
 801a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2a6:	f383 8811 	msr	BASEPRI, r3
 801a2aa:	f3bf 8f6f 	isb	sy
 801a2ae:	f3bf 8f4f 	dsb	sy
 801a2b2:	60bb      	str	r3, [r7, #8]
}
 801a2b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a2b6:	bf00      	nop
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d0fc      	beq.n	801a2b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a2be:	bf00      	nop
 801a2c0:	bf00      	nop
 801a2c2:	3714      	adds	r7, #20
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ca:	4770      	bx	lr
 801a2cc:	240000d8 	.word	0x240000d8

0801a2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a2d0:	4b07      	ldr	r3, [pc, #28]	; (801a2f0 <pxCurrentTCBConst2>)
 801a2d2:	6819      	ldr	r1, [r3, #0]
 801a2d4:	6808      	ldr	r0, [r1, #0]
 801a2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2da:	f380 8809 	msr	PSP, r0
 801a2de:	f3bf 8f6f 	isb	sy
 801a2e2:	f04f 0000 	mov.w	r0, #0
 801a2e6:	f380 8811 	msr	BASEPRI, r0
 801a2ea:	4770      	bx	lr
 801a2ec:	f3af 8000 	nop.w

0801a2f0 <pxCurrentTCBConst2>:
 801a2f0:	24002784 	.word	0x24002784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a2f4:	bf00      	nop
 801a2f6:	bf00      	nop

0801a2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a2f8:	4808      	ldr	r0, [pc, #32]	; (801a31c <prvPortStartFirstTask+0x24>)
 801a2fa:	6800      	ldr	r0, [r0, #0]
 801a2fc:	6800      	ldr	r0, [r0, #0]
 801a2fe:	f380 8808 	msr	MSP, r0
 801a302:	f04f 0000 	mov.w	r0, #0
 801a306:	f380 8814 	msr	CONTROL, r0
 801a30a:	b662      	cpsie	i
 801a30c:	b661      	cpsie	f
 801a30e:	f3bf 8f4f 	dsb	sy
 801a312:	f3bf 8f6f 	isb	sy
 801a316:	df00      	svc	0
 801a318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a31a:	bf00      	nop
 801a31c:	e000ed08 	.word	0xe000ed08

0801a320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a320:	b580      	push	{r7, lr}
 801a322:	b086      	sub	sp, #24
 801a324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a326:	4b46      	ldr	r3, [pc, #280]	; (801a440 <xPortStartScheduler+0x120>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4a46      	ldr	r2, [pc, #280]	; (801a444 <xPortStartScheduler+0x124>)
 801a32c:	4293      	cmp	r3, r2
 801a32e:	d10a      	bne.n	801a346 <xPortStartScheduler+0x26>
	__asm volatile
 801a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a334:	f383 8811 	msr	BASEPRI, r3
 801a338:	f3bf 8f6f 	isb	sy
 801a33c:	f3bf 8f4f 	dsb	sy
 801a340:	613b      	str	r3, [r7, #16]
}
 801a342:	bf00      	nop
 801a344:	e7fe      	b.n	801a344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a346:	4b3e      	ldr	r3, [pc, #248]	; (801a440 <xPortStartScheduler+0x120>)
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	4a3f      	ldr	r2, [pc, #252]	; (801a448 <xPortStartScheduler+0x128>)
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d10a      	bne.n	801a366 <xPortStartScheduler+0x46>
	__asm volatile
 801a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a354:	f383 8811 	msr	BASEPRI, r3
 801a358:	f3bf 8f6f 	isb	sy
 801a35c:	f3bf 8f4f 	dsb	sy
 801a360:	60fb      	str	r3, [r7, #12]
}
 801a362:	bf00      	nop
 801a364:	e7fe      	b.n	801a364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a366:	4b39      	ldr	r3, [pc, #228]	; (801a44c <xPortStartScheduler+0x12c>)
 801a368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a36a:	697b      	ldr	r3, [r7, #20]
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	22ff      	movs	r2, #255	; 0xff
 801a376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a378:	697b      	ldr	r3, [r7, #20]
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a380:	78fb      	ldrb	r3, [r7, #3]
 801a382:	b2db      	uxtb	r3, r3
 801a384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a388:	b2da      	uxtb	r2, r3
 801a38a:	4b31      	ldr	r3, [pc, #196]	; (801a450 <xPortStartScheduler+0x130>)
 801a38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a38e:	4b31      	ldr	r3, [pc, #196]	; (801a454 <xPortStartScheduler+0x134>)
 801a390:	2207      	movs	r2, #7
 801a392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a394:	e009      	b.n	801a3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a396:	4b2f      	ldr	r3, [pc, #188]	; (801a454 <xPortStartScheduler+0x134>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	3b01      	subs	r3, #1
 801a39c:	4a2d      	ldr	r2, [pc, #180]	; (801a454 <xPortStartScheduler+0x134>)
 801a39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a3a0:	78fb      	ldrb	r3, [r7, #3]
 801a3a2:	b2db      	uxtb	r3, r3
 801a3a4:	005b      	lsls	r3, r3, #1
 801a3a6:	b2db      	uxtb	r3, r3
 801a3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a3aa:	78fb      	ldrb	r3, [r7, #3]
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3b2:	2b80      	cmp	r3, #128	; 0x80
 801a3b4:	d0ef      	beq.n	801a396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a3b6:	4b27      	ldr	r3, [pc, #156]	; (801a454 <xPortStartScheduler+0x134>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	f1c3 0307 	rsb	r3, r3, #7
 801a3be:	2b04      	cmp	r3, #4
 801a3c0:	d00a      	beq.n	801a3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 801a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3c6:	f383 8811 	msr	BASEPRI, r3
 801a3ca:	f3bf 8f6f 	isb	sy
 801a3ce:	f3bf 8f4f 	dsb	sy
 801a3d2:	60bb      	str	r3, [r7, #8]
}
 801a3d4:	bf00      	nop
 801a3d6:	e7fe      	b.n	801a3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a3d8:	4b1e      	ldr	r3, [pc, #120]	; (801a454 <xPortStartScheduler+0x134>)
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	021b      	lsls	r3, r3, #8
 801a3de:	4a1d      	ldr	r2, [pc, #116]	; (801a454 <xPortStartScheduler+0x134>)
 801a3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a3e2:	4b1c      	ldr	r3, [pc, #112]	; (801a454 <xPortStartScheduler+0x134>)
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a3ea:	4a1a      	ldr	r2, [pc, #104]	; (801a454 <xPortStartScheduler+0x134>)
 801a3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	b2da      	uxtb	r2, r3
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a3f6:	4b18      	ldr	r3, [pc, #96]	; (801a458 <xPortStartScheduler+0x138>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	4a17      	ldr	r2, [pc, #92]	; (801a458 <xPortStartScheduler+0x138>)
 801a3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a402:	4b15      	ldr	r3, [pc, #84]	; (801a458 <xPortStartScheduler+0x138>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	4a14      	ldr	r2, [pc, #80]	; (801a458 <xPortStartScheduler+0x138>)
 801a408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a40e:	f000 f8dd 	bl	801a5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a412:	4b12      	ldr	r3, [pc, #72]	; (801a45c <xPortStartScheduler+0x13c>)
 801a414:	2200      	movs	r2, #0
 801a416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a418:	f000 f8fc 	bl	801a614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a41c:	4b10      	ldr	r3, [pc, #64]	; (801a460 <xPortStartScheduler+0x140>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	4a0f      	ldr	r2, [pc, #60]	; (801a460 <xPortStartScheduler+0x140>)
 801a422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a428:	f7ff ff66 	bl	801a2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a42c:	f7fe ff72 	bl	8019314 <vTaskSwitchContext>
	prvTaskExitError();
 801a430:	f7ff ff22 	bl	801a278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a434:	2300      	movs	r3, #0
}
 801a436:	4618      	mov	r0, r3
 801a438:	3718      	adds	r7, #24
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
 801a43e:	bf00      	nop
 801a440:	e000ed00 	.word	0xe000ed00
 801a444:	410fc271 	.word	0x410fc271
 801a448:	410fc270 	.word	0x410fc270
 801a44c:	e000e400 	.word	0xe000e400
 801a450:	24002db0 	.word	0x24002db0
 801a454:	24002db4 	.word	0x24002db4
 801a458:	e000ed20 	.word	0xe000ed20
 801a45c:	240000d8 	.word	0x240000d8
 801a460:	e000ef34 	.word	0xe000ef34

0801a464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a464:	b480      	push	{r7}
 801a466:	b083      	sub	sp, #12
 801a468:	af00      	add	r7, sp, #0
	__asm volatile
 801a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a46e:	f383 8811 	msr	BASEPRI, r3
 801a472:	f3bf 8f6f 	isb	sy
 801a476:	f3bf 8f4f 	dsb	sy
 801a47a:	607b      	str	r3, [r7, #4]
}
 801a47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a47e:	4b0f      	ldr	r3, [pc, #60]	; (801a4bc <vPortEnterCritical+0x58>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	3301      	adds	r3, #1
 801a484:	4a0d      	ldr	r2, [pc, #52]	; (801a4bc <vPortEnterCritical+0x58>)
 801a486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a488:	4b0c      	ldr	r3, [pc, #48]	; (801a4bc <vPortEnterCritical+0x58>)
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	2b01      	cmp	r3, #1
 801a48e:	d10f      	bne.n	801a4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a490:	4b0b      	ldr	r3, [pc, #44]	; (801a4c0 <vPortEnterCritical+0x5c>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	b2db      	uxtb	r3, r3
 801a496:	2b00      	cmp	r3, #0
 801a498:	d00a      	beq.n	801a4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a49e:	f383 8811 	msr	BASEPRI, r3
 801a4a2:	f3bf 8f6f 	isb	sy
 801a4a6:	f3bf 8f4f 	dsb	sy
 801a4aa:	603b      	str	r3, [r7, #0]
}
 801a4ac:	bf00      	nop
 801a4ae:	e7fe      	b.n	801a4ae <vPortEnterCritical+0x4a>
	}
}
 801a4b0:	bf00      	nop
 801a4b2:	370c      	adds	r7, #12
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ba:	4770      	bx	lr
 801a4bc:	240000d8 	.word	0x240000d8
 801a4c0:	e000ed04 	.word	0xe000ed04

0801a4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a4c4:	b480      	push	{r7}
 801a4c6:	b083      	sub	sp, #12
 801a4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a4ca:	4b12      	ldr	r3, [pc, #72]	; (801a514 <vPortExitCritical+0x50>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d10a      	bne.n	801a4e8 <vPortExitCritical+0x24>
	__asm volatile
 801a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d6:	f383 8811 	msr	BASEPRI, r3
 801a4da:	f3bf 8f6f 	isb	sy
 801a4de:	f3bf 8f4f 	dsb	sy
 801a4e2:	607b      	str	r3, [r7, #4]
}
 801a4e4:	bf00      	nop
 801a4e6:	e7fe      	b.n	801a4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a4e8:	4b0a      	ldr	r3, [pc, #40]	; (801a514 <vPortExitCritical+0x50>)
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	3b01      	subs	r3, #1
 801a4ee:	4a09      	ldr	r2, [pc, #36]	; (801a514 <vPortExitCritical+0x50>)
 801a4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a4f2:	4b08      	ldr	r3, [pc, #32]	; (801a514 <vPortExitCritical+0x50>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d105      	bne.n	801a506 <vPortExitCritical+0x42>
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	f383 8811 	msr	BASEPRI, r3
}
 801a504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a506:	bf00      	nop
 801a508:	370c      	adds	r7, #12
 801a50a:	46bd      	mov	sp, r7
 801a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a510:	4770      	bx	lr
 801a512:	bf00      	nop
 801a514:	240000d8 	.word	0x240000d8
	...

0801a520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a520:	f3ef 8009 	mrs	r0, PSP
 801a524:	f3bf 8f6f 	isb	sy
 801a528:	4b15      	ldr	r3, [pc, #84]	; (801a580 <pxCurrentTCBConst>)
 801a52a:	681a      	ldr	r2, [r3, #0]
 801a52c:	f01e 0f10 	tst.w	lr, #16
 801a530:	bf08      	it	eq
 801a532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a53a:	6010      	str	r0, [r2, #0]
 801a53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a540:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a544:	f380 8811 	msr	BASEPRI, r0
 801a548:	f3bf 8f4f 	dsb	sy
 801a54c:	f3bf 8f6f 	isb	sy
 801a550:	f7fe fee0 	bl	8019314 <vTaskSwitchContext>
 801a554:	f04f 0000 	mov.w	r0, #0
 801a558:	f380 8811 	msr	BASEPRI, r0
 801a55c:	bc09      	pop	{r0, r3}
 801a55e:	6819      	ldr	r1, [r3, #0]
 801a560:	6808      	ldr	r0, [r1, #0]
 801a562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a566:	f01e 0f10 	tst.w	lr, #16
 801a56a:	bf08      	it	eq
 801a56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a570:	f380 8809 	msr	PSP, r0
 801a574:	f3bf 8f6f 	isb	sy
 801a578:	4770      	bx	lr
 801a57a:	bf00      	nop
 801a57c:	f3af 8000 	nop.w

0801a580 <pxCurrentTCBConst>:
 801a580:	24002784 	.word	0x24002784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a584:	bf00      	nop
 801a586:	bf00      	nop

0801a588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
	__asm volatile
 801a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a592:	f383 8811 	msr	BASEPRI, r3
 801a596:	f3bf 8f6f 	isb	sy
 801a59a:	f3bf 8f4f 	dsb	sy
 801a59e:	607b      	str	r3, [r7, #4]
}
 801a5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a5a2:	f7fe fdf5 	bl	8019190 <xTaskIncrementTick>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d003      	beq.n	801a5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a5ac:	4b06      	ldr	r3, [pc, #24]	; (801a5c8 <xPortSysTickHandler+0x40>)
 801a5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5b2:	601a      	str	r2, [r3, #0]
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	f383 8811 	msr	BASEPRI, r3
}
 801a5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a5c0:	bf00      	nop
 801a5c2:	3708      	adds	r7, #8
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	e000ed04 	.word	0xe000ed04

0801a5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a5cc:	b480      	push	{r7}
 801a5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a5d0:	4b0b      	ldr	r3, [pc, #44]	; (801a600 <vPortSetupTimerInterrupt+0x34>)
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a5d6:	4b0b      	ldr	r3, [pc, #44]	; (801a604 <vPortSetupTimerInterrupt+0x38>)
 801a5d8:	2200      	movs	r2, #0
 801a5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a5dc:	4b0a      	ldr	r3, [pc, #40]	; (801a608 <vPortSetupTimerInterrupt+0x3c>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	4a0a      	ldr	r2, [pc, #40]	; (801a60c <vPortSetupTimerInterrupt+0x40>)
 801a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 801a5e6:	099b      	lsrs	r3, r3, #6
 801a5e8:	4a09      	ldr	r2, [pc, #36]	; (801a610 <vPortSetupTimerInterrupt+0x44>)
 801a5ea:	3b01      	subs	r3, #1
 801a5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a5ee:	4b04      	ldr	r3, [pc, #16]	; (801a600 <vPortSetupTimerInterrupt+0x34>)
 801a5f0:	2207      	movs	r2, #7
 801a5f2:	601a      	str	r2, [r3, #0]
}
 801a5f4:	bf00      	nop
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fc:	4770      	bx	lr
 801a5fe:	bf00      	nop
 801a600:	e000e010 	.word	0xe000e010
 801a604:	e000e018 	.word	0xe000e018
 801a608:	240000c8 	.word	0x240000c8
 801a60c:	10624dd3 	.word	0x10624dd3
 801a610:	e000e014 	.word	0xe000e014

0801a614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a624 <vPortEnableVFP+0x10>
 801a618:	6801      	ldr	r1, [r0, #0]
 801a61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a61e:	6001      	str	r1, [r0, #0]
 801a620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a622:	bf00      	nop
 801a624:	e000ed88 	.word	0xe000ed88

0801a628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a628:	b480      	push	{r7}
 801a62a:	b085      	sub	sp, #20
 801a62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a62e:	f3ef 8305 	mrs	r3, IPSR
 801a632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2b0f      	cmp	r3, #15
 801a638:	d914      	bls.n	801a664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a63a:	4a17      	ldr	r2, [pc, #92]	; (801a698 <vPortValidateInterruptPriority+0x70>)
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	4413      	add	r3, r2
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a644:	4b15      	ldr	r3, [pc, #84]	; (801a69c <vPortValidateInterruptPriority+0x74>)
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	7afa      	ldrb	r2, [r7, #11]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d20a      	bcs.n	801a664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a652:	f383 8811 	msr	BASEPRI, r3
 801a656:	f3bf 8f6f 	isb	sy
 801a65a:	f3bf 8f4f 	dsb	sy
 801a65e:	607b      	str	r3, [r7, #4]
}
 801a660:	bf00      	nop
 801a662:	e7fe      	b.n	801a662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a664:	4b0e      	ldr	r3, [pc, #56]	; (801a6a0 <vPortValidateInterruptPriority+0x78>)
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a66c:	4b0d      	ldr	r3, [pc, #52]	; (801a6a4 <vPortValidateInterruptPriority+0x7c>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	429a      	cmp	r2, r3
 801a672:	d90a      	bls.n	801a68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a678:	f383 8811 	msr	BASEPRI, r3
 801a67c:	f3bf 8f6f 	isb	sy
 801a680:	f3bf 8f4f 	dsb	sy
 801a684:	603b      	str	r3, [r7, #0]
}
 801a686:	bf00      	nop
 801a688:	e7fe      	b.n	801a688 <vPortValidateInterruptPriority+0x60>
	}
 801a68a:	bf00      	nop
 801a68c:	3714      	adds	r7, #20
 801a68e:	46bd      	mov	sp, r7
 801a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a694:	4770      	bx	lr
 801a696:	bf00      	nop
 801a698:	e000e3f0 	.word	0xe000e3f0
 801a69c:	24002db0 	.word	0x24002db0
 801a6a0:	e000ed0c 	.word	0xe000ed0c
 801a6a4:	24002db4 	.word	0x24002db4

0801a6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b08a      	sub	sp, #40	; 0x28
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a6b4:	f7fe fcb0 	bl	8019018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a6b8:	4b5b      	ldr	r3, [pc, #364]	; (801a828 <pvPortMalloc+0x180>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d101      	bne.n	801a6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a6c0:	f000 f920 	bl	801a904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a6c4:	4b59      	ldr	r3, [pc, #356]	; (801a82c <pvPortMalloc+0x184>)
 801a6c6:	681a      	ldr	r2, [r3, #0]
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	4013      	ands	r3, r2
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	f040 8093 	bne.w	801a7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d01d      	beq.n	801a714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a6d8:	2208      	movs	r2, #8
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	4413      	add	r3, r2
 801a6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	f003 0307 	and.w	r3, r3, #7
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d014      	beq.n	801a714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	f023 0307 	bic.w	r3, r3, #7
 801a6f0:	3308      	adds	r3, #8
 801a6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	f003 0307 	and.w	r3, r3, #7
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d00a      	beq.n	801a714 <pvPortMalloc+0x6c>
	__asm volatile
 801a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a702:	f383 8811 	msr	BASEPRI, r3
 801a706:	f3bf 8f6f 	isb	sy
 801a70a:	f3bf 8f4f 	dsb	sy
 801a70e:	617b      	str	r3, [r7, #20]
}
 801a710:	bf00      	nop
 801a712:	e7fe      	b.n	801a712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d06e      	beq.n	801a7f8 <pvPortMalloc+0x150>
 801a71a:	4b45      	ldr	r3, [pc, #276]	; (801a830 <pvPortMalloc+0x188>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	687a      	ldr	r2, [r7, #4]
 801a720:	429a      	cmp	r2, r3
 801a722:	d869      	bhi.n	801a7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a724:	4b43      	ldr	r3, [pc, #268]	; (801a834 <pvPortMalloc+0x18c>)
 801a726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a728:	4b42      	ldr	r3, [pc, #264]	; (801a834 <pvPortMalloc+0x18c>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a72e:	e004      	b.n	801a73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a73c:	685b      	ldr	r3, [r3, #4]
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	429a      	cmp	r2, r3
 801a742:	d903      	bls.n	801a74c <pvPortMalloc+0xa4>
 801a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d1f1      	bne.n	801a730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a74c:	4b36      	ldr	r3, [pc, #216]	; (801a828 <pvPortMalloc+0x180>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a752:	429a      	cmp	r2, r3
 801a754:	d050      	beq.n	801a7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a756:	6a3b      	ldr	r3, [r7, #32]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	2208      	movs	r2, #8
 801a75c:	4413      	add	r3, r2
 801a75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a762:	681a      	ldr	r2, [r3, #0]
 801a764:	6a3b      	ldr	r3, [r7, #32]
 801a766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a76a:	685a      	ldr	r2, [r3, #4]
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	1ad2      	subs	r2, r2, r3
 801a770:	2308      	movs	r3, #8
 801a772:	005b      	lsls	r3, r3, #1
 801a774:	429a      	cmp	r2, r3
 801a776:	d91f      	bls.n	801a7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	4413      	add	r3, r2
 801a77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a780:	69bb      	ldr	r3, [r7, #24]
 801a782:	f003 0307 	and.w	r3, r3, #7
 801a786:	2b00      	cmp	r3, #0
 801a788:	d00a      	beq.n	801a7a0 <pvPortMalloc+0xf8>
	__asm volatile
 801a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a78e:	f383 8811 	msr	BASEPRI, r3
 801a792:	f3bf 8f6f 	isb	sy
 801a796:	f3bf 8f4f 	dsb	sy
 801a79a:	613b      	str	r3, [r7, #16]
}
 801a79c:	bf00      	nop
 801a79e:	e7fe      	b.n	801a79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a2:	685a      	ldr	r2, [r3, #4]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	1ad2      	subs	r2, r2, r3
 801a7a8:	69bb      	ldr	r3, [r7, #24]
 801a7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ae:	687a      	ldr	r2, [r7, #4]
 801a7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a7b2:	69b8      	ldr	r0, [r7, #24]
 801a7b4:	f000 f908 	bl	801a9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a7b8:	4b1d      	ldr	r3, [pc, #116]	; (801a830 <pvPortMalloc+0x188>)
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	1ad3      	subs	r3, r2, r3
 801a7c2:	4a1b      	ldr	r2, [pc, #108]	; (801a830 <pvPortMalloc+0x188>)
 801a7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a7c6:	4b1a      	ldr	r3, [pc, #104]	; (801a830 <pvPortMalloc+0x188>)
 801a7c8:	681a      	ldr	r2, [r3, #0]
 801a7ca:	4b1b      	ldr	r3, [pc, #108]	; (801a838 <pvPortMalloc+0x190>)
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	d203      	bcs.n	801a7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a7d2:	4b17      	ldr	r3, [pc, #92]	; (801a830 <pvPortMalloc+0x188>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	4a18      	ldr	r2, [pc, #96]	; (801a838 <pvPortMalloc+0x190>)
 801a7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7dc:	685a      	ldr	r2, [r3, #4]
 801a7de:	4b13      	ldr	r3, [pc, #76]	; (801a82c <pvPortMalloc+0x184>)
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	431a      	orrs	r2, r3
 801a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ea:	2200      	movs	r2, #0
 801a7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a7ee:	4b13      	ldr	r3, [pc, #76]	; (801a83c <pvPortMalloc+0x194>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	3301      	adds	r3, #1
 801a7f4:	4a11      	ldr	r2, [pc, #68]	; (801a83c <pvPortMalloc+0x194>)
 801a7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a7f8:	f7fe fc1c 	bl	8019034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a7fc:	69fb      	ldr	r3, [r7, #28]
 801a7fe:	f003 0307 	and.w	r3, r3, #7
 801a802:	2b00      	cmp	r3, #0
 801a804:	d00a      	beq.n	801a81c <pvPortMalloc+0x174>
	__asm volatile
 801a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a80a:	f383 8811 	msr	BASEPRI, r3
 801a80e:	f3bf 8f6f 	isb	sy
 801a812:	f3bf 8f4f 	dsb	sy
 801a816:	60fb      	str	r3, [r7, #12]
}
 801a818:	bf00      	nop
 801a81a:	e7fe      	b.n	801a81a <pvPortMalloc+0x172>
	return pvReturn;
 801a81c:	69fb      	ldr	r3, [r7, #28]
}
 801a81e:	4618      	mov	r0, r3
 801a820:	3728      	adds	r7, #40	; 0x28
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	240069c0 	.word	0x240069c0
 801a82c:	240069d4 	.word	0x240069d4
 801a830:	240069c4 	.word	0x240069c4
 801a834:	240069b8 	.word	0x240069b8
 801a838:	240069c8 	.word	0x240069c8
 801a83c:	240069cc 	.word	0x240069cc

0801a840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b086      	sub	sp, #24
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d04d      	beq.n	801a8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a852:	2308      	movs	r3, #8
 801a854:	425b      	negs	r3, r3
 801a856:	697a      	ldr	r2, [r7, #20]
 801a858:	4413      	add	r3, r2
 801a85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	685a      	ldr	r2, [r3, #4]
 801a864:	4b24      	ldr	r3, [pc, #144]	; (801a8f8 <vPortFree+0xb8>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	4013      	ands	r3, r2
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d10a      	bne.n	801a884 <vPortFree+0x44>
	__asm volatile
 801a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a872:	f383 8811 	msr	BASEPRI, r3
 801a876:	f3bf 8f6f 	isb	sy
 801a87a:	f3bf 8f4f 	dsb	sy
 801a87e:	60fb      	str	r3, [r7, #12]
}
 801a880:	bf00      	nop
 801a882:	e7fe      	b.n	801a882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a884:	693b      	ldr	r3, [r7, #16]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d00a      	beq.n	801a8a2 <vPortFree+0x62>
	__asm volatile
 801a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a890:	f383 8811 	msr	BASEPRI, r3
 801a894:	f3bf 8f6f 	isb	sy
 801a898:	f3bf 8f4f 	dsb	sy
 801a89c:	60bb      	str	r3, [r7, #8]
}
 801a89e:	bf00      	nop
 801a8a0:	e7fe      	b.n	801a8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	685a      	ldr	r2, [r3, #4]
 801a8a6:	4b14      	ldr	r3, [pc, #80]	; (801a8f8 <vPortFree+0xb8>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	4013      	ands	r3, r2
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d01e      	beq.n	801a8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a8b0:	693b      	ldr	r3, [r7, #16]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d11a      	bne.n	801a8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a8b8:	693b      	ldr	r3, [r7, #16]
 801a8ba:	685a      	ldr	r2, [r3, #4]
 801a8bc:	4b0e      	ldr	r3, [pc, #56]	; (801a8f8 <vPortFree+0xb8>)
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	43db      	mvns	r3, r3
 801a8c2:	401a      	ands	r2, r3
 801a8c4:	693b      	ldr	r3, [r7, #16]
 801a8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a8c8:	f7fe fba6 	bl	8019018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a8cc:	693b      	ldr	r3, [r7, #16]
 801a8ce:	685a      	ldr	r2, [r3, #4]
 801a8d0:	4b0a      	ldr	r3, [pc, #40]	; (801a8fc <vPortFree+0xbc>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	4413      	add	r3, r2
 801a8d6:	4a09      	ldr	r2, [pc, #36]	; (801a8fc <vPortFree+0xbc>)
 801a8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a8da:	6938      	ldr	r0, [r7, #16]
 801a8dc:	f000 f874 	bl	801a9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a8e0:	4b07      	ldr	r3, [pc, #28]	; (801a900 <vPortFree+0xc0>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	4a06      	ldr	r2, [pc, #24]	; (801a900 <vPortFree+0xc0>)
 801a8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a8ea:	f7fe fba3 	bl	8019034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a8ee:	bf00      	nop
 801a8f0:	3718      	adds	r7, #24
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	240069d4 	.word	0x240069d4
 801a8fc:	240069c4 	.word	0x240069c4
 801a900:	240069d0 	.word	0x240069d0

0801a904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a904:	b480      	push	{r7}
 801a906:	b085      	sub	sp, #20
 801a908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a90a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a910:	4b27      	ldr	r3, [pc, #156]	; (801a9b0 <prvHeapInit+0xac>)
 801a912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	f003 0307 	and.w	r3, r3, #7
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d00c      	beq.n	801a938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	3307      	adds	r3, #7
 801a922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	f023 0307 	bic.w	r3, r3, #7
 801a92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a92c:	68ba      	ldr	r2, [r7, #8]
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	1ad3      	subs	r3, r2, r3
 801a932:	4a1f      	ldr	r2, [pc, #124]	; (801a9b0 <prvHeapInit+0xac>)
 801a934:	4413      	add	r3, r2
 801a936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a93c:	4a1d      	ldr	r2, [pc, #116]	; (801a9b4 <prvHeapInit+0xb0>)
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a942:	4b1c      	ldr	r3, [pc, #112]	; (801a9b4 <prvHeapInit+0xb0>)
 801a944:	2200      	movs	r2, #0
 801a946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	68ba      	ldr	r2, [r7, #8]
 801a94c:	4413      	add	r3, r2
 801a94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a950:	2208      	movs	r2, #8
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	1a9b      	subs	r3, r3, r2
 801a956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	f023 0307 	bic.w	r3, r3, #7
 801a95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	4a15      	ldr	r2, [pc, #84]	; (801a9b8 <prvHeapInit+0xb4>)
 801a964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a966:	4b14      	ldr	r3, [pc, #80]	; (801a9b8 <prvHeapInit+0xb4>)
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	2200      	movs	r2, #0
 801a96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a96e:	4b12      	ldr	r3, [pc, #72]	; (801a9b8 <prvHeapInit+0xb4>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	2200      	movs	r2, #0
 801a974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	68fa      	ldr	r2, [r7, #12]
 801a97e:	1ad2      	subs	r2, r2, r3
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a984:	4b0c      	ldr	r3, [pc, #48]	; (801a9b8 <prvHeapInit+0xb4>)
 801a986:	681a      	ldr	r2, [r3, #0]
 801a988:	683b      	ldr	r3, [r7, #0]
 801a98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	685b      	ldr	r3, [r3, #4]
 801a990:	4a0a      	ldr	r2, [pc, #40]	; (801a9bc <prvHeapInit+0xb8>)
 801a992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a994:	683b      	ldr	r3, [r7, #0]
 801a996:	685b      	ldr	r3, [r3, #4]
 801a998:	4a09      	ldr	r2, [pc, #36]	; (801a9c0 <prvHeapInit+0xbc>)
 801a99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a99c:	4b09      	ldr	r3, [pc, #36]	; (801a9c4 <prvHeapInit+0xc0>)
 801a99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a9a2:	601a      	str	r2, [r3, #0]
}
 801a9a4:	bf00      	nop
 801a9a6:	3714      	adds	r7, #20
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ae:	4770      	bx	lr
 801a9b0:	24002db8 	.word	0x24002db8
 801a9b4:	240069b8 	.word	0x240069b8
 801a9b8:	240069c0 	.word	0x240069c0
 801a9bc:	240069c8 	.word	0x240069c8
 801a9c0:	240069c4 	.word	0x240069c4
 801a9c4:	240069d4 	.word	0x240069d4

0801a9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a9c8:	b480      	push	{r7}
 801a9ca:	b085      	sub	sp, #20
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a9d0:	4b28      	ldr	r3, [pc, #160]	; (801aa74 <prvInsertBlockIntoFreeList+0xac>)
 801a9d2:	60fb      	str	r3, [r7, #12]
 801a9d4:	e002      	b.n	801a9dc <prvInsertBlockIntoFreeList+0x14>
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	60fb      	str	r3, [r7, #12]
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	687a      	ldr	r2, [r7, #4]
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d8f7      	bhi.n	801a9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	685b      	ldr	r3, [r3, #4]
 801a9ee:	68ba      	ldr	r2, [r7, #8]
 801a9f0:	4413      	add	r3, r2
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	429a      	cmp	r2, r3
 801a9f6:	d108      	bne.n	801aa0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	685a      	ldr	r2, [r3, #4]
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	685b      	ldr	r3, [r3, #4]
 801aa00:	441a      	add	r2, r3
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	68ba      	ldr	r2, [r7, #8]
 801aa14:	441a      	add	r2, r3
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	429a      	cmp	r2, r3
 801aa1c:	d118      	bne.n	801aa50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	681a      	ldr	r2, [r3, #0]
 801aa22:	4b15      	ldr	r3, [pc, #84]	; (801aa78 <prvInsertBlockIntoFreeList+0xb0>)
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	429a      	cmp	r2, r3
 801aa28:	d00d      	beq.n	801aa46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	685a      	ldr	r2, [r3, #4]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	685b      	ldr	r3, [r3, #4]
 801aa34:	441a      	add	r2, r3
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	681a      	ldr	r2, [r3, #0]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	601a      	str	r2, [r3, #0]
 801aa44:	e008      	b.n	801aa58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801aa46:	4b0c      	ldr	r3, [pc, #48]	; (801aa78 <prvInsertBlockIntoFreeList+0xb0>)
 801aa48:	681a      	ldr	r2, [r3, #0]
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	601a      	str	r2, [r3, #0]
 801aa4e:	e003      	b.n	801aa58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801aa58:	68fa      	ldr	r2, [r7, #12]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d002      	beq.n	801aa66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	687a      	ldr	r2, [r7, #4]
 801aa64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801aa66:	bf00      	nop
 801aa68:	3714      	adds	r7, #20
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa70:	4770      	bx	lr
 801aa72:	bf00      	nop
 801aa74:	240069b8 	.word	0x240069b8
 801aa78:	240069c0 	.word	0x240069c0

0801aa7c <__errno>:
 801aa7c:	4b01      	ldr	r3, [pc, #4]	; (801aa84 <__errno+0x8>)
 801aa7e:	6818      	ldr	r0, [r3, #0]
 801aa80:	4770      	bx	lr
 801aa82:	bf00      	nop
 801aa84:	240000dc 	.word	0x240000dc

0801aa88 <__libc_init_array>:
 801aa88:	b570      	push	{r4, r5, r6, lr}
 801aa8a:	4d0d      	ldr	r5, [pc, #52]	; (801aac0 <__libc_init_array+0x38>)
 801aa8c:	4c0d      	ldr	r4, [pc, #52]	; (801aac4 <__libc_init_array+0x3c>)
 801aa8e:	1b64      	subs	r4, r4, r5
 801aa90:	10a4      	asrs	r4, r4, #2
 801aa92:	2600      	movs	r6, #0
 801aa94:	42a6      	cmp	r6, r4
 801aa96:	d109      	bne.n	801aaac <__libc_init_array+0x24>
 801aa98:	4d0b      	ldr	r5, [pc, #44]	; (801aac8 <__libc_init_array+0x40>)
 801aa9a:	4c0c      	ldr	r4, [pc, #48]	; (801aacc <__libc_init_array+0x44>)
 801aa9c:	f000 fd2c 	bl	801b4f8 <_init>
 801aaa0:	1b64      	subs	r4, r4, r5
 801aaa2:	10a4      	asrs	r4, r4, #2
 801aaa4:	2600      	movs	r6, #0
 801aaa6:	42a6      	cmp	r6, r4
 801aaa8:	d105      	bne.n	801aab6 <__libc_init_array+0x2e>
 801aaaa:	bd70      	pop	{r4, r5, r6, pc}
 801aaac:	f855 3b04 	ldr.w	r3, [r5], #4
 801aab0:	4798      	blx	r3
 801aab2:	3601      	adds	r6, #1
 801aab4:	e7ee      	b.n	801aa94 <__libc_init_array+0xc>
 801aab6:	f855 3b04 	ldr.w	r3, [r5], #4
 801aaba:	4798      	blx	r3
 801aabc:	3601      	adds	r6, #1
 801aabe:	e7f2      	b.n	801aaa6 <__libc_init_array+0x1e>
 801aac0:	0801b9b0 	.word	0x0801b9b0
 801aac4:	0801b9b0 	.word	0x0801b9b0
 801aac8:	0801b9b0 	.word	0x0801b9b0
 801aacc:	0801b9b4 	.word	0x0801b9b4

0801aad0 <memcpy>:
 801aad0:	440a      	add	r2, r1
 801aad2:	4291      	cmp	r1, r2
 801aad4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801aad8:	d100      	bne.n	801aadc <memcpy+0xc>
 801aada:	4770      	bx	lr
 801aadc:	b510      	push	{r4, lr}
 801aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aae6:	4291      	cmp	r1, r2
 801aae8:	d1f9      	bne.n	801aade <memcpy+0xe>
 801aaea:	bd10      	pop	{r4, pc}

0801aaec <memset>:
 801aaec:	4402      	add	r2, r0
 801aaee:	4603      	mov	r3, r0
 801aaf0:	4293      	cmp	r3, r2
 801aaf2:	d100      	bne.n	801aaf6 <memset+0xa>
 801aaf4:	4770      	bx	lr
 801aaf6:	f803 1b01 	strb.w	r1, [r3], #1
 801aafa:	e7f9      	b.n	801aaf0 <memset+0x4>

0801aafc <_puts_r>:
 801aafc:	b570      	push	{r4, r5, r6, lr}
 801aafe:	460e      	mov	r6, r1
 801ab00:	4605      	mov	r5, r0
 801ab02:	b118      	cbz	r0, 801ab0c <_puts_r+0x10>
 801ab04:	6983      	ldr	r3, [r0, #24]
 801ab06:	b90b      	cbnz	r3, 801ab0c <_puts_r+0x10>
 801ab08:	f000 fa48 	bl	801af9c <__sinit>
 801ab0c:	69ab      	ldr	r3, [r5, #24]
 801ab0e:	68ac      	ldr	r4, [r5, #8]
 801ab10:	b913      	cbnz	r3, 801ab18 <_puts_r+0x1c>
 801ab12:	4628      	mov	r0, r5
 801ab14:	f000 fa42 	bl	801af9c <__sinit>
 801ab18:	4b2c      	ldr	r3, [pc, #176]	; (801abcc <_puts_r+0xd0>)
 801ab1a:	429c      	cmp	r4, r3
 801ab1c:	d120      	bne.n	801ab60 <_puts_r+0x64>
 801ab1e:	686c      	ldr	r4, [r5, #4]
 801ab20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab22:	07db      	lsls	r3, r3, #31
 801ab24:	d405      	bmi.n	801ab32 <_puts_r+0x36>
 801ab26:	89a3      	ldrh	r3, [r4, #12]
 801ab28:	0598      	lsls	r0, r3, #22
 801ab2a:	d402      	bmi.n	801ab32 <_puts_r+0x36>
 801ab2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab2e:	f000 fad3 	bl	801b0d8 <__retarget_lock_acquire_recursive>
 801ab32:	89a3      	ldrh	r3, [r4, #12]
 801ab34:	0719      	lsls	r1, r3, #28
 801ab36:	d51d      	bpl.n	801ab74 <_puts_r+0x78>
 801ab38:	6923      	ldr	r3, [r4, #16]
 801ab3a:	b1db      	cbz	r3, 801ab74 <_puts_r+0x78>
 801ab3c:	3e01      	subs	r6, #1
 801ab3e:	68a3      	ldr	r3, [r4, #8]
 801ab40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ab44:	3b01      	subs	r3, #1
 801ab46:	60a3      	str	r3, [r4, #8]
 801ab48:	bb39      	cbnz	r1, 801ab9a <_puts_r+0x9e>
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	da38      	bge.n	801abc0 <_puts_r+0xc4>
 801ab4e:	4622      	mov	r2, r4
 801ab50:	210a      	movs	r1, #10
 801ab52:	4628      	mov	r0, r5
 801ab54:	f000 f848 	bl	801abe8 <__swbuf_r>
 801ab58:	3001      	adds	r0, #1
 801ab5a:	d011      	beq.n	801ab80 <_puts_r+0x84>
 801ab5c:	250a      	movs	r5, #10
 801ab5e:	e011      	b.n	801ab84 <_puts_r+0x88>
 801ab60:	4b1b      	ldr	r3, [pc, #108]	; (801abd0 <_puts_r+0xd4>)
 801ab62:	429c      	cmp	r4, r3
 801ab64:	d101      	bne.n	801ab6a <_puts_r+0x6e>
 801ab66:	68ac      	ldr	r4, [r5, #8]
 801ab68:	e7da      	b.n	801ab20 <_puts_r+0x24>
 801ab6a:	4b1a      	ldr	r3, [pc, #104]	; (801abd4 <_puts_r+0xd8>)
 801ab6c:	429c      	cmp	r4, r3
 801ab6e:	bf08      	it	eq
 801ab70:	68ec      	ldreq	r4, [r5, #12]
 801ab72:	e7d5      	b.n	801ab20 <_puts_r+0x24>
 801ab74:	4621      	mov	r1, r4
 801ab76:	4628      	mov	r0, r5
 801ab78:	f000 f888 	bl	801ac8c <__swsetup_r>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d0dd      	beq.n	801ab3c <_puts_r+0x40>
 801ab80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ab84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab86:	07da      	lsls	r2, r3, #31
 801ab88:	d405      	bmi.n	801ab96 <_puts_r+0x9a>
 801ab8a:	89a3      	ldrh	r3, [r4, #12]
 801ab8c:	059b      	lsls	r3, r3, #22
 801ab8e:	d402      	bmi.n	801ab96 <_puts_r+0x9a>
 801ab90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab92:	f000 faa2 	bl	801b0da <__retarget_lock_release_recursive>
 801ab96:	4628      	mov	r0, r5
 801ab98:	bd70      	pop	{r4, r5, r6, pc}
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	da04      	bge.n	801aba8 <_puts_r+0xac>
 801ab9e:	69a2      	ldr	r2, [r4, #24]
 801aba0:	429a      	cmp	r2, r3
 801aba2:	dc06      	bgt.n	801abb2 <_puts_r+0xb6>
 801aba4:	290a      	cmp	r1, #10
 801aba6:	d004      	beq.n	801abb2 <_puts_r+0xb6>
 801aba8:	6823      	ldr	r3, [r4, #0]
 801abaa:	1c5a      	adds	r2, r3, #1
 801abac:	6022      	str	r2, [r4, #0]
 801abae:	7019      	strb	r1, [r3, #0]
 801abb0:	e7c5      	b.n	801ab3e <_puts_r+0x42>
 801abb2:	4622      	mov	r2, r4
 801abb4:	4628      	mov	r0, r5
 801abb6:	f000 f817 	bl	801abe8 <__swbuf_r>
 801abba:	3001      	adds	r0, #1
 801abbc:	d1bf      	bne.n	801ab3e <_puts_r+0x42>
 801abbe:	e7df      	b.n	801ab80 <_puts_r+0x84>
 801abc0:	6823      	ldr	r3, [r4, #0]
 801abc2:	250a      	movs	r5, #10
 801abc4:	1c5a      	adds	r2, r3, #1
 801abc6:	6022      	str	r2, [r4, #0]
 801abc8:	701d      	strb	r5, [r3, #0]
 801abca:	e7db      	b.n	801ab84 <_puts_r+0x88>
 801abcc:	0801b968 	.word	0x0801b968
 801abd0:	0801b988 	.word	0x0801b988
 801abd4:	0801b948 	.word	0x0801b948

0801abd8 <puts>:
 801abd8:	4b02      	ldr	r3, [pc, #8]	; (801abe4 <puts+0xc>)
 801abda:	4601      	mov	r1, r0
 801abdc:	6818      	ldr	r0, [r3, #0]
 801abde:	f7ff bf8d 	b.w	801aafc <_puts_r>
 801abe2:	bf00      	nop
 801abe4:	240000dc 	.word	0x240000dc

0801abe8 <__swbuf_r>:
 801abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abea:	460e      	mov	r6, r1
 801abec:	4614      	mov	r4, r2
 801abee:	4605      	mov	r5, r0
 801abf0:	b118      	cbz	r0, 801abfa <__swbuf_r+0x12>
 801abf2:	6983      	ldr	r3, [r0, #24]
 801abf4:	b90b      	cbnz	r3, 801abfa <__swbuf_r+0x12>
 801abf6:	f000 f9d1 	bl	801af9c <__sinit>
 801abfa:	4b21      	ldr	r3, [pc, #132]	; (801ac80 <__swbuf_r+0x98>)
 801abfc:	429c      	cmp	r4, r3
 801abfe:	d12b      	bne.n	801ac58 <__swbuf_r+0x70>
 801ac00:	686c      	ldr	r4, [r5, #4]
 801ac02:	69a3      	ldr	r3, [r4, #24]
 801ac04:	60a3      	str	r3, [r4, #8]
 801ac06:	89a3      	ldrh	r3, [r4, #12]
 801ac08:	071a      	lsls	r2, r3, #28
 801ac0a:	d52f      	bpl.n	801ac6c <__swbuf_r+0x84>
 801ac0c:	6923      	ldr	r3, [r4, #16]
 801ac0e:	b36b      	cbz	r3, 801ac6c <__swbuf_r+0x84>
 801ac10:	6923      	ldr	r3, [r4, #16]
 801ac12:	6820      	ldr	r0, [r4, #0]
 801ac14:	1ac0      	subs	r0, r0, r3
 801ac16:	6963      	ldr	r3, [r4, #20]
 801ac18:	b2f6      	uxtb	r6, r6
 801ac1a:	4283      	cmp	r3, r0
 801ac1c:	4637      	mov	r7, r6
 801ac1e:	dc04      	bgt.n	801ac2a <__swbuf_r+0x42>
 801ac20:	4621      	mov	r1, r4
 801ac22:	4628      	mov	r0, r5
 801ac24:	f000 f926 	bl	801ae74 <_fflush_r>
 801ac28:	bb30      	cbnz	r0, 801ac78 <__swbuf_r+0x90>
 801ac2a:	68a3      	ldr	r3, [r4, #8]
 801ac2c:	3b01      	subs	r3, #1
 801ac2e:	60a3      	str	r3, [r4, #8]
 801ac30:	6823      	ldr	r3, [r4, #0]
 801ac32:	1c5a      	adds	r2, r3, #1
 801ac34:	6022      	str	r2, [r4, #0]
 801ac36:	701e      	strb	r6, [r3, #0]
 801ac38:	6963      	ldr	r3, [r4, #20]
 801ac3a:	3001      	adds	r0, #1
 801ac3c:	4283      	cmp	r3, r0
 801ac3e:	d004      	beq.n	801ac4a <__swbuf_r+0x62>
 801ac40:	89a3      	ldrh	r3, [r4, #12]
 801ac42:	07db      	lsls	r3, r3, #31
 801ac44:	d506      	bpl.n	801ac54 <__swbuf_r+0x6c>
 801ac46:	2e0a      	cmp	r6, #10
 801ac48:	d104      	bne.n	801ac54 <__swbuf_r+0x6c>
 801ac4a:	4621      	mov	r1, r4
 801ac4c:	4628      	mov	r0, r5
 801ac4e:	f000 f911 	bl	801ae74 <_fflush_r>
 801ac52:	b988      	cbnz	r0, 801ac78 <__swbuf_r+0x90>
 801ac54:	4638      	mov	r0, r7
 801ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac58:	4b0a      	ldr	r3, [pc, #40]	; (801ac84 <__swbuf_r+0x9c>)
 801ac5a:	429c      	cmp	r4, r3
 801ac5c:	d101      	bne.n	801ac62 <__swbuf_r+0x7a>
 801ac5e:	68ac      	ldr	r4, [r5, #8]
 801ac60:	e7cf      	b.n	801ac02 <__swbuf_r+0x1a>
 801ac62:	4b09      	ldr	r3, [pc, #36]	; (801ac88 <__swbuf_r+0xa0>)
 801ac64:	429c      	cmp	r4, r3
 801ac66:	bf08      	it	eq
 801ac68:	68ec      	ldreq	r4, [r5, #12]
 801ac6a:	e7ca      	b.n	801ac02 <__swbuf_r+0x1a>
 801ac6c:	4621      	mov	r1, r4
 801ac6e:	4628      	mov	r0, r5
 801ac70:	f000 f80c 	bl	801ac8c <__swsetup_r>
 801ac74:	2800      	cmp	r0, #0
 801ac76:	d0cb      	beq.n	801ac10 <__swbuf_r+0x28>
 801ac78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ac7c:	e7ea      	b.n	801ac54 <__swbuf_r+0x6c>
 801ac7e:	bf00      	nop
 801ac80:	0801b968 	.word	0x0801b968
 801ac84:	0801b988 	.word	0x0801b988
 801ac88:	0801b948 	.word	0x0801b948

0801ac8c <__swsetup_r>:
 801ac8c:	4b32      	ldr	r3, [pc, #200]	; (801ad58 <__swsetup_r+0xcc>)
 801ac8e:	b570      	push	{r4, r5, r6, lr}
 801ac90:	681d      	ldr	r5, [r3, #0]
 801ac92:	4606      	mov	r6, r0
 801ac94:	460c      	mov	r4, r1
 801ac96:	b125      	cbz	r5, 801aca2 <__swsetup_r+0x16>
 801ac98:	69ab      	ldr	r3, [r5, #24]
 801ac9a:	b913      	cbnz	r3, 801aca2 <__swsetup_r+0x16>
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f000 f97d 	bl	801af9c <__sinit>
 801aca2:	4b2e      	ldr	r3, [pc, #184]	; (801ad5c <__swsetup_r+0xd0>)
 801aca4:	429c      	cmp	r4, r3
 801aca6:	d10f      	bne.n	801acc8 <__swsetup_r+0x3c>
 801aca8:	686c      	ldr	r4, [r5, #4]
 801acaa:	89a3      	ldrh	r3, [r4, #12]
 801acac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801acb0:	0719      	lsls	r1, r3, #28
 801acb2:	d42c      	bmi.n	801ad0e <__swsetup_r+0x82>
 801acb4:	06dd      	lsls	r5, r3, #27
 801acb6:	d411      	bmi.n	801acdc <__swsetup_r+0x50>
 801acb8:	2309      	movs	r3, #9
 801acba:	6033      	str	r3, [r6, #0]
 801acbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801acc0:	81a3      	strh	r3, [r4, #12]
 801acc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acc6:	e03e      	b.n	801ad46 <__swsetup_r+0xba>
 801acc8:	4b25      	ldr	r3, [pc, #148]	; (801ad60 <__swsetup_r+0xd4>)
 801acca:	429c      	cmp	r4, r3
 801accc:	d101      	bne.n	801acd2 <__swsetup_r+0x46>
 801acce:	68ac      	ldr	r4, [r5, #8]
 801acd0:	e7eb      	b.n	801acaa <__swsetup_r+0x1e>
 801acd2:	4b24      	ldr	r3, [pc, #144]	; (801ad64 <__swsetup_r+0xd8>)
 801acd4:	429c      	cmp	r4, r3
 801acd6:	bf08      	it	eq
 801acd8:	68ec      	ldreq	r4, [r5, #12]
 801acda:	e7e6      	b.n	801acaa <__swsetup_r+0x1e>
 801acdc:	0758      	lsls	r0, r3, #29
 801acde:	d512      	bpl.n	801ad06 <__swsetup_r+0x7a>
 801ace0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ace2:	b141      	cbz	r1, 801acf6 <__swsetup_r+0x6a>
 801ace4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ace8:	4299      	cmp	r1, r3
 801acea:	d002      	beq.n	801acf2 <__swsetup_r+0x66>
 801acec:	4630      	mov	r0, r6
 801acee:	f000 fa5b 	bl	801b1a8 <_free_r>
 801acf2:	2300      	movs	r3, #0
 801acf4:	6363      	str	r3, [r4, #52]	; 0x34
 801acf6:	89a3      	ldrh	r3, [r4, #12]
 801acf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801acfc:	81a3      	strh	r3, [r4, #12]
 801acfe:	2300      	movs	r3, #0
 801ad00:	6063      	str	r3, [r4, #4]
 801ad02:	6923      	ldr	r3, [r4, #16]
 801ad04:	6023      	str	r3, [r4, #0]
 801ad06:	89a3      	ldrh	r3, [r4, #12]
 801ad08:	f043 0308 	orr.w	r3, r3, #8
 801ad0c:	81a3      	strh	r3, [r4, #12]
 801ad0e:	6923      	ldr	r3, [r4, #16]
 801ad10:	b94b      	cbnz	r3, 801ad26 <__swsetup_r+0x9a>
 801ad12:	89a3      	ldrh	r3, [r4, #12]
 801ad14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ad18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ad1c:	d003      	beq.n	801ad26 <__swsetup_r+0x9a>
 801ad1e:	4621      	mov	r1, r4
 801ad20:	4630      	mov	r0, r6
 801ad22:	f000 fa01 	bl	801b128 <__smakebuf_r>
 801ad26:	89a0      	ldrh	r0, [r4, #12]
 801ad28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad2c:	f010 0301 	ands.w	r3, r0, #1
 801ad30:	d00a      	beq.n	801ad48 <__swsetup_r+0xbc>
 801ad32:	2300      	movs	r3, #0
 801ad34:	60a3      	str	r3, [r4, #8]
 801ad36:	6963      	ldr	r3, [r4, #20]
 801ad38:	425b      	negs	r3, r3
 801ad3a:	61a3      	str	r3, [r4, #24]
 801ad3c:	6923      	ldr	r3, [r4, #16]
 801ad3e:	b943      	cbnz	r3, 801ad52 <__swsetup_r+0xc6>
 801ad40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ad44:	d1ba      	bne.n	801acbc <__swsetup_r+0x30>
 801ad46:	bd70      	pop	{r4, r5, r6, pc}
 801ad48:	0781      	lsls	r1, r0, #30
 801ad4a:	bf58      	it	pl
 801ad4c:	6963      	ldrpl	r3, [r4, #20]
 801ad4e:	60a3      	str	r3, [r4, #8]
 801ad50:	e7f4      	b.n	801ad3c <__swsetup_r+0xb0>
 801ad52:	2000      	movs	r0, #0
 801ad54:	e7f7      	b.n	801ad46 <__swsetup_r+0xba>
 801ad56:	bf00      	nop
 801ad58:	240000dc 	.word	0x240000dc
 801ad5c:	0801b968 	.word	0x0801b968
 801ad60:	0801b988 	.word	0x0801b988
 801ad64:	0801b948 	.word	0x0801b948

0801ad68 <__sflush_r>:
 801ad68:	898a      	ldrh	r2, [r1, #12]
 801ad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad6e:	4605      	mov	r5, r0
 801ad70:	0710      	lsls	r0, r2, #28
 801ad72:	460c      	mov	r4, r1
 801ad74:	d458      	bmi.n	801ae28 <__sflush_r+0xc0>
 801ad76:	684b      	ldr	r3, [r1, #4]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	dc05      	bgt.n	801ad88 <__sflush_r+0x20>
 801ad7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	dc02      	bgt.n	801ad88 <__sflush_r+0x20>
 801ad82:	2000      	movs	r0, #0
 801ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ad8a:	2e00      	cmp	r6, #0
 801ad8c:	d0f9      	beq.n	801ad82 <__sflush_r+0x1a>
 801ad8e:	2300      	movs	r3, #0
 801ad90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ad94:	682f      	ldr	r7, [r5, #0]
 801ad96:	602b      	str	r3, [r5, #0]
 801ad98:	d032      	beq.n	801ae00 <__sflush_r+0x98>
 801ad9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ad9c:	89a3      	ldrh	r3, [r4, #12]
 801ad9e:	075a      	lsls	r2, r3, #29
 801ada0:	d505      	bpl.n	801adae <__sflush_r+0x46>
 801ada2:	6863      	ldr	r3, [r4, #4]
 801ada4:	1ac0      	subs	r0, r0, r3
 801ada6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ada8:	b10b      	cbz	r3, 801adae <__sflush_r+0x46>
 801adaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801adac:	1ac0      	subs	r0, r0, r3
 801adae:	2300      	movs	r3, #0
 801adb0:	4602      	mov	r2, r0
 801adb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801adb4:	6a21      	ldr	r1, [r4, #32]
 801adb6:	4628      	mov	r0, r5
 801adb8:	47b0      	blx	r6
 801adba:	1c43      	adds	r3, r0, #1
 801adbc:	89a3      	ldrh	r3, [r4, #12]
 801adbe:	d106      	bne.n	801adce <__sflush_r+0x66>
 801adc0:	6829      	ldr	r1, [r5, #0]
 801adc2:	291d      	cmp	r1, #29
 801adc4:	d82c      	bhi.n	801ae20 <__sflush_r+0xb8>
 801adc6:	4a2a      	ldr	r2, [pc, #168]	; (801ae70 <__sflush_r+0x108>)
 801adc8:	40ca      	lsrs	r2, r1
 801adca:	07d6      	lsls	r6, r2, #31
 801adcc:	d528      	bpl.n	801ae20 <__sflush_r+0xb8>
 801adce:	2200      	movs	r2, #0
 801add0:	6062      	str	r2, [r4, #4]
 801add2:	04d9      	lsls	r1, r3, #19
 801add4:	6922      	ldr	r2, [r4, #16]
 801add6:	6022      	str	r2, [r4, #0]
 801add8:	d504      	bpl.n	801ade4 <__sflush_r+0x7c>
 801adda:	1c42      	adds	r2, r0, #1
 801addc:	d101      	bne.n	801ade2 <__sflush_r+0x7a>
 801adde:	682b      	ldr	r3, [r5, #0]
 801ade0:	b903      	cbnz	r3, 801ade4 <__sflush_r+0x7c>
 801ade2:	6560      	str	r0, [r4, #84]	; 0x54
 801ade4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ade6:	602f      	str	r7, [r5, #0]
 801ade8:	2900      	cmp	r1, #0
 801adea:	d0ca      	beq.n	801ad82 <__sflush_r+0x1a>
 801adec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801adf0:	4299      	cmp	r1, r3
 801adf2:	d002      	beq.n	801adfa <__sflush_r+0x92>
 801adf4:	4628      	mov	r0, r5
 801adf6:	f000 f9d7 	bl	801b1a8 <_free_r>
 801adfa:	2000      	movs	r0, #0
 801adfc:	6360      	str	r0, [r4, #52]	; 0x34
 801adfe:	e7c1      	b.n	801ad84 <__sflush_r+0x1c>
 801ae00:	6a21      	ldr	r1, [r4, #32]
 801ae02:	2301      	movs	r3, #1
 801ae04:	4628      	mov	r0, r5
 801ae06:	47b0      	blx	r6
 801ae08:	1c41      	adds	r1, r0, #1
 801ae0a:	d1c7      	bne.n	801ad9c <__sflush_r+0x34>
 801ae0c:	682b      	ldr	r3, [r5, #0]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d0c4      	beq.n	801ad9c <__sflush_r+0x34>
 801ae12:	2b1d      	cmp	r3, #29
 801ae14:	d001      	beq.n	801ae1a <__sflush_r+0xb2>
 801ae16:	2b16      	cmp	r3, #22
 801ae18:	d101      	bne.n	801ae1e <__sflush_r+0xb6>
 801ae1a:	602f      	str	r7, [r5, #0]
 801ae1c:	e7b1      	b.n	801ad82 <__sflush_r+0x1a>
 801ae1e:	89a3      	ldrh	r3, [r4, #12]
 801ae20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae24:	81a3      	strh	r3, [r4, #12]
 801ae26:	e7ad      	b.n	801ad84 <__sflush_r+0x1c>
 801ae28:	690f      	ldr	r7, [r1, #16]
 801ae2a:	2f00      	cmp	r7, #0
 801ae2c:	d0a9      	beq.n	801ad82 <__sflush_r+0x1a>
 801ae2e:	0793      	lsls	r3, r2, #30
 801ae30:	680e      	ldr	r6, [r1, #0]
 801ae32:	bf08      	it	eq
 801ae34:	694b      	ldreq	r3, [r1, #20]
 801ae36:	600f      	str	r7, [r1, #0]
 801ae38:	bf18      	it	ne
 801ae3a:	2300      	movne	r3, #0
 801ae3c:	eba6 0807 	sub.w	r8, r6, r7
 801ae40:	608b      	str	r3, [r1, #8]
 801ae42:	f1b8 0f00 	cmp.w	r8, #0
 801ae46:	dd9c      	ble.n	801ad82 <__sflush_r+0x1a>
 801ae48:	6a21      	ldr	r1, [r4, #32]
 801ae4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ae4c:	4643      	mov	r3, r8
 801ae4e:	463a      	mov	r2, r7
 801ae50:	4628      	mov	r0, r5
 801ae52:	47b0      	blx	r6
 801ae54:	2800      	cmp	r0, #0
 801ae56:	dc06      	bgt.n	801ae66 <__sflush_r+0xfe>
 801ae58:	89a3      	ldrh	r3, [r4, #12]
 801ae5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae5e:	81a3      	strh	r3, [r4, #12]
 801ae60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae64:	e78e      	b.n	801ad84 <__sflush_r+0x1c>
 801ae66:	4407      	add	r7, r0
 801ae68:	eba8 0800 	sub.w	r8, r8, r0
 801ae6c:	e7e9      	b.n	801ae42 <__sflush_r+0xda>
 801ae6e:	bf00      	nop
 801ae70:	20400001 	.word	0x20400001

0801ae74 <_fflush_r>:
 801ae74:	b538      	push	{r3, r4, r5, lr}
 801ae76:	690b      	ldr	r3, [r1, #16]
 801ae78:	4605      	mov	r5, r0
 801ae7a:	460c      	mov	r4, r1
 801ae7c:	b913      	cbnz	r3, 801ae84 <_fflush_r+0x10>
 801ae7e:	2500      	movs	r5, #0
 801ae80:	4628      	mov	r0, r5
 801ae82:	bd38      	pop	{r3, r4, r5, pc}
 801ae84:	b118      	cbz	r0, 801ae8e <_fflush_r+0x1a>
 801ae86:	6983      	ldr	r3, [r0, #24]
 801ae88:	b90b      	cbnz	r3, 801ae8e <_fflush_r+0x1a>
 801ae8a:	f000 f887 	bl	801af9c <__sinit>
 801ae8e:	4b14      	ldr	r3, [pc, #80]	; (801aee0 <_fflush_r+0x6c>)
 801ae90:	429c      	cmp	r4, r3
 801ae92:	d11b      	bne.n	801aecc <_fflush_r+0x58>
 801ae94:	686c      	ldr	r4, [r5, #4]
 801ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d0ef      	beq.n	801ae7e <_fflush_r+0xa>
 801ae9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aea0:	07d0      	lsls	r0, r2, #31
 801aea2:	d404      	bmi.n	801aeae <_fflush_r+0x3a>
 801aea4:	0599      	lsls	r1, r3, #22
 801aea6:	d402      	bmi.n	801aeae <_fflush_r+0x3a>
 801aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeaa:	f000 f915 	bl	801b0d8 <__retarget_lock_acquire_recursive>
 801aeae:	4628      	mov	r0, r5
 801aeb0:	4621      	mov	r1, r4
 801aeb2:	f7ff ff59 	bl	801ad68 <__sflush_r>
 801aeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aeb8:	07da      	lsls	r2, r3, #31
 801aeba:	4605      	mov	r5, r0
 801aebc:	d4e0      	bmi.n	801ae80 <_fflush_r+0xc>
 801aebe:	89a3      	ldrh	r3, [r4, #12]
 801aec0:	059b      	lsls	r3, r3, #22
 801aec2:	d4dd      	bmi.n	801ae80 <_fflush_r+0xc>
 801aec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aec6:	f000 f908 	bl	801b0da <__retarget_lock_release_recursive>
 801aeca:	e7d9      	b.n	801ae80 <_fflush_r+0xc>
 801aecc:	4b05      	ldr	r3, [pc, #20]	; (801aee4 <_fflush_r+0x70>)
 801aece:	429c      	cmp	r4, r3
 801aed0:	d101      	bne.n	801aed6 <_fflush_r+0x62>
 801aed2:	68ac      	ldr	r4, [r5, #8]
 801aed4:	e7df      	b.n	801ae96 <_fflush_r+0x22>
 801aed6:	4b04      	ldr	r3, [pc, #16]	; (801aee8 <_fflush_r+0x74>)
 801aed8:	429c      	cmp	r4, r3
 801aeda:	bf08      	it	eq
 801aedc:	68ec      	ldreq	r4, [r5, #12]
 801aede:	e7da      	b.n	801ae96 <_fflush_r+0x22>
 801aee0:	0801b968 	.word	0x0801b968
 801aee4:	0801b988 	.word	0x0801b988
 801aee8:	0801b948 	.word	0x0801b948

0801aeec <std>:
 801aeec:	2300      	movs	r3, #0
 801aeee:	b510      	push	{r4, lr}
 801aef0:	4604      	mov	r4, r0
 801aef2:	e9c0 3300 	strd	r3, r3, [r0]
 801aef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aefa:	6083      	str	r3, [r0, #8]
 801aefc:	8181      	strh	r1, [r0, #12]
 801aefe:	6643      	str	r3, [r0, #100]	; 0x64
 801af00:	81c2      	strh	r2, [r0, #14]
 801af02:	6183      	str	r3, [r0, #24]
 801af04:	4619      	mov	r1, r3
 801af06:	2208      	movs	r2, #8
 801af08:	305c      	adds	r0, #92	; 0x5c
 801af0a:	f7ff fdef 	bl	801aaec <memset>
 801af0e:	4b05      	ldr	r3, [pc, #20]	; (801af24 <std+0x38>)
 801af10:	6263      	str	r3, [r4, #36]	; 0x24
 801af12:	4b05      	ldr	r3, [pc, #20]	; (801af28 <std+0x3c>)
 801af14:	62a3      	str	r3, [r4, #40]	; 0x28
 801af16:	4b05      	ldr	r3, [pc, #20]	; (801af2c <std+0x40>)
 801af18:	62e3      	str	r3, [r4, #44]	; 0x2c
 801af1a:	4b05      	ldr	r3, [pc, #20]	; (801af30 <std+0x44>)
 801af1c:	6224      	str	r4, [r4, #32]
 801af1e:	6323      	str	r3, [r4, #48]	; 0x30
 801af20:	bd10      	pop	{r4, pc}
 801af22:	bf00      	nop
 801af24:	0801b389 	.word	0x0801b389
 801af28:	0801b3ab 	.word	0x0801b3ab
 801af2c:	0801b3e3 	.word	0x0801b3e3
 801af30:	0801b407 	.word	0x0801b407

0801af34 <_cleanup_r>:
 801af34:	4901      	ldr	r1, [pc, #4]	; (801af3c <_cleanup_r+0x8>)
 801af36:	f000 b8af 	b.w	801b098 <_fwalk_reent>
 801af3a:	bf00      	nop
 801af3c:	0801ae75 	.word	0x0801ae75

0801af40 <__sfmoreglue>:
 801af40:	b570      	push	{r4, r5, r6, lr}
 801af42:	2268      	movs	r2, #104	; 0x68
 801af44:	1e4d      	subs	r5, r1, #1
 801af46:	4355      	muls	r5, r2
 801af48:	460e      	mov	r6, r1
 801af4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801af4e:	f000 f997 	bl	801b280 <_malloc_r>
 801af52:	4604      	mov	r4, r0
 801af54:	b140      	cbz	r0, 801af68 <__sfmoreglue+0x28>
 801af56:	2100      	movs	r1, #0
 801af58:	e9c0 1600 	strd	r1, r6, [r0]
 801af5c:	300c      	adds	r0, #12
 801af5e:	60a0      	str	r0, [r4, #8]
 801af60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801af64:	f7ff fdc2 	bl	801aaec <memset>
 801af68:	4620      	mov	r0, r4
 801af6a:	bd70      	pop	{r4, r5, r6, pc}

0801af6c <__sfp_lock_acquire>:
 801af6c:	4801      	ldr	r0, [pc, #4]	; (801af74 <__sfp_lock_acquire+0x8>)
 801af6e:	f000 b8b3 	b.w	801b0d8 <__retarget_lock_acquire_recursive>
 801af72:	bf00      	nop
 801af74:	240069d9 	.word	0x240069d9

0801af78 <__sfp_lock_release>:
 801af78:	4801      	ldr	r0, [pc, #4]	; (801af80 <__sfp_lock_release+0x8>)
 801af7a:	f000 b8ae 	b.w	801b0da <__retarget_lock_release_recursive>
 801af7e:	bf00      	nop
 801af80:	240069d9 	.word	0x240069d9

0801af84 <__sinit_lock_acquire>:
 801af84:	4801      	ldr	r0, [pc, #4]	; (801af8c <__sinit_lock_acquire+0x8>)
 801af86:	f000 b8a7 	b.w	801b0d8 <__retarget_lock_acquire_recursive>
 801af8a:	bf00      	nop
 801af8c:	240069da 	.word	0x240069da

0801af90 <__sinit_lock_release>:
 801af90:	4801      	ldr	r0, [pc, #4]	; (801af98 <__sinit_lock_release+0x8>)
 801af92:	f000 b8a2 	b.w	801b0da <__retarget_lock_release_recursive>
 801af96:	bf00      	nop
 801af98:	240069da 	.word	0x240069da

0801af9c <__sinit>:
 801af9c:	b510      	push	{r4, lr}
 801af9e:	4604      	mov	r4, r0
 801afa0:	f7ff fff0 	bl	801af84 <__sinit_lock_acquire>
 801afa4:	69a3      	ldr	r3, [r4, #24]
 801afa6:	b11b      	cbz	r3, 801afb0 <__sinit+0x14>
 801afa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afac:	f7ff bff0 	b.w	801af90 <__sinit_lock_release>
 801afb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801afb4:	6523      	str	r3, [r4, #80]	; 0x50
 801afb6:	4b13      	ldr	r3, [pc, #76]	; (801b004 <__sinit+0x68>)
 801afb8:	4a13      	ldr	r2, [pc, #76]	; (801b008 <__sinit+0x6c>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	62a2      	str	r2, [r4, #40]	; 0x28
 801afbe:	42a3      	cmp	r3, r4
 801afc0:	bf04      	itt	eq
 801afc2:	2301      	moveq	r3, #1
 801afc4:	61a3      	streq	r3, [r4, #24]
 801afc6:	4620      	mov	r0, r4
 801afc8:	f000 f820 	bl	801b00c <__sfp>
 801afcc:	6060      	str	r0, [r4, #4]
 801afce:	4620      	mov	r0, r4
 801afd0:	f000 f81c 	bl	801b00c <__sfp>
 801afd4:	60a0      	str	r0, [r4, #8]
 801afd6:	4620      	mov	r0, r4
 801afd8:	f000 f818 	bl	801b00c <__sfp>
 801afdc:	2200      	movs	r2, #0
 801afde:	60e0      	str	r0, [r4, #12]
 801afe0:	2104      	movs	r1, #4
 801afe2:	6860      	ldr	r0, [r4, #4]
 801afe4:	f7ff ff82 	bl	801aeec <std>
 801afe8:	68a0      	ldr	r0, [r4, #8]
 801afea:	2201      	movs	r2, #1
 801afec:	2109      	movs	r1, #9
 801afee:	f7ff ff7d 	bl	801aeec <std>
 801aff2:	68e0      	ldr	r0, [r4, #12]
 801aff4:	2202      	movs	r2, #2
 801aff6:	2112      	movs	r1, #18
 801aff8:	f7ff ff78 	bl	801aeec <std>
 801affc:	2301      	movs	r3, #1
 801affe:	61a3      	str	r3, [r4, #24]
 801b000:	e7d2      	b.n	801afa8 <__sinit+0xc>
 801b002:	bf00      	nop
 801b004:	0801b944 	.word	0x0801b944
 801b008:	0801af35 	.word	0x0801af35

0801b00c <__sfp>:
 801b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b00e:	4607      	mov	r7, r0
 801b010:	f7ff ffac 	bl	801af6c <__sfp_lock_acquire>
 801b014:	4b1e      	ldr	r3, [pc, #120]	; (801b090 <__sfp+0x84>)
 801b016:	681e      	ldr	r6, [r3, #0]
 801b018:	69b3      	ldr	r3, [r6, #24]
 801b01a:	b913      	cbnz	r3, 801b022 <__sfp+0x16>
 801b01c:	4630      	mov	r0, r6
 801b01e:	f7ff ffbd 	bl	801af9c <__sinit>
 801b022:	3648      	adds	r6, #72	; 0x48
 801b024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b028:	3b01      	subs	r3, #1
 801b02a:	d503      	bpl.n	801b034 <__sfp+0x28>
 801b02c:	6833      	ldr	r3, [r6, #0]
 801b02e:	b30b      	cbz	r3, 801b074 <__sfp+0x68>
 801b030:	6836      	ldr	r6, [r6, #0]
 801b032:	e7f7      	b.n	801b024 <__sfp+0x18>
 801b034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b038:	b9d5      	cbnz	r5, 801b070 <__sfp+0x64>
 801b03a:	4b16      	ldr	r3, [pc, #88]	; (801b094 <__sfp+0x88>)
 801b03c:	60e3      	str	r3, [r4, #12]
 801b03e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b042:	6665      	str	r5, [r4, #100]	; 0x64
 801b044:	f000 f847 	bl	801b0d6 <__retarget_lock_init_recursive>
 801b048:	f7ff ff96 	bl	801af78 <__sfp_lock_release>
 801b04c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b054:	6025      	str	r5, [r4, #0]
 801b056:	61a5      	str	r5, [r4, #24]
 801b058:	2208      	movs	r2, #8
 801b05a:	4629      	mov	r1, r5
 801b05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b060:	f7ff fd44 	bl	801aaec <memset>
 801b064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b06c:	4620      	mov	r0, r4
 801b06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b070:	3468      	adds	r4, #104	; 0x68
 801b072:	e7d9      	b.n	801b028 <__sfp+0x1c>
 801b074:	2104      	movs	r1, #4
 801b076:	4638      	mov	r0, r7
 801b078:	f7ff ff62 	bl	801af40 <__sfmoreglue>
 801b07c:	4604      	mov	r4, r0
 801b07e:	6030      	str	r0, [r6, #0]
 801b080:	2800      	cmp	r0, #0
 801b082:	d1d5      	bne.n	801b030 <__sfp+0x24>
 801b084:	f7ff ff78 	bl	801af78 <__sfp_lock_release>
 801b088:	230c      	movs	r3, #12
 801b08a:	603b      	str	r3, [r7, #0]
 801b08c:	e7ee      	b.n	801b06c <__sfp+0x60>
 801b08e:	bf00      	nop
 801b090:	0801b944 	.word	0x0801b944
 801b094:	ffff0001 	.word	0xffff0001

0801b098 <_fwalk_reent>:
 801b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b09c:	4606      	mov	r6, r0
 801b09e:	4688      	mov	r8, r1
 801b0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b0a4:	2700      	movs	r7, #0
 801b0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b0aa:	f1b9 0901 	subs.w	r9, r9, #1
 801b0ae:	d505      	bpl.n	801b0bc <_fwalk_reent+0x24>
 801b0b0:	6824      	ldr	r4, [r4, #0]
 801b0b2:	2c00      	cmp	r4, #0
 801b0b4:	d1f7      	bne.n	801b0a6 <_fwalk_reent+0xe>
 801b0b6:	4638      	mov	r0, r7
 801b0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0bc:	89ab      	ldrh	r3, [r5, #12]
 801b0be:	2b01      	cmp	r3, #1
 801b0c0:	d907      	bls.n	801b0d2 <_fwalk_reent+0x3a>
 801b0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b0c6:	3301      	adds	r3, #1
 801b0c8:	d003      	beq.n	801b0d2 <_fwalk_reent+0x3a>
 801b0ca:	4629      	mov	r1, r5
 801b0cc:	4630      	mov	r0, r6
 801b0ce:	47c0      	blx	r8
 801b0d0:	4307      	orrs	r7, r0
 801b0d2:	3568      	adds	r5, #104	; 0x68
 801b0d4:	e7e9      	b.n	801b0aa <_fwalk_reent+0x12>

0801b0d6 <__retarget_lock_init_recursive>:
 801b0d6:	4770      	bx	lr

0801b0d8 <__retarget_lock_acquire_recursive>:
 801b0d8:	4770      	bx	lr

0801b0da <__retarget_lock_release_recursive>:
 801b0da:	4770      	bx	lr

0801b0dc <__swhatbuf_r>:
 801b0dc:	b570      	push	{r4, r5, r6, lr}
 801b0de:	460e      	mov	r6, r1
 801b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0e4:	2900      	cmp	r1, #0
 801b0e6:	b096      	sub	sp, #88	; 0x58
 801b0e8:	4614      	mov	r4, r2
 801b0ea:	461d      	mov	r5, r3
 801b0ec:	da08      	bge.n	801b100 <__swhatbuf_r+0x24>
 801b0ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b0f2:	2200      	movs	r2, #0
 801b0f4:	602a      	str	r2, [r5, #0]
 801b0f6:	061a      	lsls	r2, r3, #24
 801b0f8:	d410      	bmi.n	801b11c <__swhatbuf_r+0x40>
 801b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b0fe:	e00e      	b.n	801b11e <__swhatbuf_r+0x42>
 801b100:	466a      	mov	r2, sp
 801b102:	f000 f9a7 	bl	801b454 <_fstat_r>
 801b106:	2800      	cmp	r0, #0
 801b108:	dbf1      	blt.n	801b0ee <__swhatbuf_r+0x12>
 801b10a:	9a01      	ldr	r2, [sp, #4]
 801b10c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b114:	425a      	negs	r2, r3
 801b116:	415a      	adcs	r2, r3
 801b118:	602a      	str	r2, [r5, #0]
 801b11a:	e7ee      	b.n	801b0fa <__swhatbuf_r+0x1e>
 801b11c:	2340      	movs	r3, #64	; 0x40
 801b11e:	2000      	movs	r0, #0
 801b120:	6023      	str	r3, [r4, #0]
 801b122:	b016      	add	sp, #88	; 0x58
 801b124:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b128 <__smakebuf_r>:
 801b128:	898b      	ldrh	r3, [r1, #12]
 801b12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b12c:	079d      	lsls	r5, r3, #30
 801b12e:	4606      	mov	r6, r0
 801b130:	460c      	mov	r4, r1
 801b132:	d507      	bpl.n	801b144 <__smakebuf_r+0x1c>
 801b134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b138:	6023      	str	r3, [r4, #0]
 801b13a:	6123      	str	r3, [r4, #16]
 801b13c:	2301      	movs	r3, #1
 801b13e:	6163      	str	r3, [r4, #20]
 801b140:	b002      	add	sp, #8
 801b142:	bd70      	pop	{r4, r5, r6, pc}
 801b144:	ab01      	add	r3, sp, #4
 801b146:	466a      	mov	r2, sp
 801b148:	f7ff ffc8 	bl	801b0dc <__swhatbuf_r>
 801b14c:	9900      	ldr	r1, [sp, #0]
 801b14e:	4605      	mov	r5, r0
 801b150:	4630      	mov	r0, r6
 801b152:	f000 f895 	bl	801b280 <_malloc_r>
 801b156:	b948      	cbnz	r0, 801b16c <__smakebuf_r+0x44>
 801b158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b15c:	059a      	lsls	r2, r3, #22
 801b15e:	d4ef      	bmi.n	801b140 <__smakebuf_r+0x18>
 801b160:	f023 0303 	bic.w	r3, r3, #3
 801b164:	f043 0302 	orr.w	r3, r3, #2
 801b168:	81a3      	strh	r3, [r4, #12]
 801b16a:	e7e3      	b.n	801b134 <__smakebuf_r+0xc>
 801b16c:	4b0d      	ldr	r3, [pc, #52]	; (801b1a4 <__smakebuf_r+0x7c>)
 801b16e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b170:	89a3      	ldrh	r3, [r4, #12]
 801b172:	6020      	str	r0, [r4, #0]
 801b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b178:	81a3      	strh	r3, [r4, #12]
 801b17a:	9b00      	ldr	r3, [sp, #0]
 801b17c:	6163      	str	r3, [r4, #20]
 801b17e:	9b01      	ldr	r3, [sp, #4]
 801b180:	6120      	str	r0, [r4, #16]
 801b182:	b15b      	cbz	r3, 801b19c <__smakebuf_r+0x74>
 801b184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b188:	4630      	mov	r0, r6
 801b18a:	f000 f975 	bl	801b478 <_isatty_r>
 801b18e:	b128      	cbz	r0, 801b19c <__smakebuf_r+0x74>
 801b190:	89a3      	ldrh	r3, [r4, #12]
 801b192:	f023 0303 	bic.w	r3, r3, #3
 801b196:	f043 0301 	orr.w	r3, r3, #1
 801b19a:	81a3      	strh	r3, [r4, #12]
 801b19c:	89a0      	ldrh	r0, [r4, #12]
 801b19e:	4305      	orrs	r5, r0
 801b1a0:	81a5      	strh	r5, [r4, #12]
 801b1a2:	e7cd      	b.n	801b140 <__smakebuf_r+0x18>
 801b1a4:	0801af35 	.word	0x0801af35

0801b1a8 <_free_r>:
 801b1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b1aa:	2900      	cmp	r1, #0
 801b1ac:	d044      	beq.n	801b238 <_free_r+0x90>
 801b1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1b2:	9001      	str	r0, [sp, #4]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	f1a1 0404 	sub.w	r4, r1, #4
 801b1ba:	bfb8      	it	lt
 801b1bc:	18e4      	addlt	r4, r4, r3
 801b1be:	f000 f97d 	bl	801b4bc <__malloc_lock>
 801b1c2:	4a1e      	ldr	r2, [pc, #120]	; (801b23c <_free_r+0x94>)
 801b1c4:	9801      	ldr	r0, [sp, #4]
 801b1c6:	6813      	ldr	r3, [r2, #0]
 801b1c8:	b933      	cbnz	r3, 801b1d8 <_free_r+0x30>
 801b1ca:	6063      	str	r3, [r4, #4]
 801b1cc:	6014      	str	r4, [r2, #0]
 801b1ce:	b003      	add	sp, #12
 801b1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1d4:	f000 b978 	b.w	801b4c8 <__malloc_unlock>
 801b1d8:	42a3      	cmp	r3, r4
 801b1da:	d908      	bls.n	801b1ee <_free_r+0x46>
 801b1dc:	6825      	ldr	r5, [r4, #0]
 801b1de:	1961      	adds	r1, r4, r5
 801b1e0:	428b      	cmp	r3, r1
 801b1e2:	bf01      	itttt	eq
 801b1e4:	6819      	ldreq	r1, [r3, #0]
 801b1e6:	685b      	ldreq	r3, [r3, #4]
 801b1e8:	1949      	addeq	r1, r1, r5
 801b1ea:	6021      	streq	r1, [r4, #0]
 801b1ec:	e7ed      	b.n	801b1ca <_free_r+0x22>
 801b1ee:	461a      	mov	r2, r3
 801b1f0:	685b      	ldr	r3, [r3, #4]
 801b1f2:	b10b      	cbz	r3, 801b1f8 <_free_r+0x50>
 801b1f4:	42a3      	cmp	r3, r4
 801b1f6:	d9fa      	bls.n	801b1ee <_free_r+0x46>
 801b1f8:	6811      	ldr	r1, [r2, #0]
 801b1fa:	1855      	adds	r5, r2, r1
 801b1fc:	42a5      	cmp	r5, r4
 801b1fe:	d10b      	bne.n	801b218 <_free_r+0x70>
 801b200:	6824      	ldr	r4, [r4, #0]
 801b202:	4421      	add	r1, r4
 801b204:	1854      	adds	r4, r2, r1
 801b206:	42a3      	cmp	r3, r4
 801b208:	6011      	str	r1, [r2, #0]
 801b20a:	d1e0      	bne.n	801b1ce <_free_r+0x26>
 801b20c:	681c      	ldr	r4, [r3, #0]
 801b20e:	685b      	ldr	r3, [r3, #4]
 801b210:	6053      	str	r3, [r2, #4]
 801b212:	4421      	add	r1, r4
 801b214:	6011      	str	r1, [r2, #0]
 801b216:	e7da      	b.n	801b1ce <_free_r+0x26>
 801b218:	d902      	bls.n	801b220 <_free_r+0x78>
 801b21a:	230c      	movs	r3, #12
 801b21c:	6003      	str	r3, [r0, #0]
 801b21e:	e7d6      	b.n	801b1ce <_free_r+0x26>
 801b220:	6825      	ldr	r5, [r4, #0]
 801b222:	1961      	adds	r1, r4, r5
 801b224:	428b      	cmp	r3, r1
 801b226:	bf04      	itt	eq
 801b228:	6819      	ldreq	r1, [r3, #0]
 801b22a:	685b      	ldreq	r3, [r3, #4]
 801b22c:	6063      	str	r3, [r4, #4]
 801b22e:	bf04      	itt	eq
 801b230:	1949      	addeq	r1, r1, r5
 801b232:	6021      	streq	r1, [r4, #0]
 801b234:	6054      	str	r4, [r2, #4]
 801b236:	e7ca      	b.n	801b1ce <_free_r+0x26>
 801b238:	b003      	add	sp, #12
 801b23a:	bd30      	pop	{r4, r5, pc}
 801b23c:	240069dc 	.word	0x240069dc

0801b240 <sbrk_aligned>:
 801b240:	b570      	push	{r4, r5, r6, lr}
 801b242:	4e0e      	ldr	r6, [pc, #56]	; (801b27c <sbrk_aligned+0x3c>)
 801b244:	460c      	mov	r4, r1
 801b246:	6831      	ldr	r1, [r6, #0]
 801b248:	4605      	mov	r5, r0
 801b24a:	b911      	cbnz	r1, 801b252 <sbrk_aligned+0x12>
 801b24c:	f000 f88c 	bl	801b368 <_sbrk_r>
 801b250:	6030      	str	r0, [r6, #0]
 801b252:	4621      	mov	r1, r4
 801b254:	4628      	mov	r0, r5
 801b256:	f000 f887 	bl	801b368 <_sbrk_r>
 801b25a:	1c43      	adds	r3, r0, #1
 801b25c:	d00a      	beq.n	801b274 <sbrk_aligned+0x34>
 801b25e:	1cc4      	adds	r4, r0, #3
 801b260:	f024 0403 	bic.w	r4, r4, #3
 801b264:	42a0      	cmp	r0, r4
 801b266:	d007      	beq.n	801b278 <sbrk_aligned+0x38>
 801b268:	1a21      	subs	r1, r4, r0
 801b26a:	4628      	mov	r0, r5
 801b26c:	f000 f87c 	bl	801b368 <_sbrk_r>
 801b270:	3001      	adds	r0, #1
 801b272:	d101      	bne.n	801b278 <sbrk_aligned+0x38>
 801b274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b278:	4620      	mov	r0, r4
 801b27a:	bd70      	pop	{r4, r5, r6, pc}
 801b27c:	240069e0 	.word	0x240069e0

0801b280 <_malloc_r>:
 801b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b284:	1ccd      	adds	r5, r1, #3
 801b286:	f025 0503 	bic.w	r5, r5, #3
 801b28a:	3508      	adds	r5, #8
 801b28c:	2d0c      	cmp	r5, #12
 801b28e:	bf38      	it	cc
 801b290:	250c      	movcc	r5, #12
 801b292:	2d00      	cmp	r5, #0
 801b294:	4607      	mov	r7, r0
 801b296:	db01      	blt.n	801b29c <_malloc_r+0x1c>
 801b298:	42a9      	cmp	r1, r5
 801b29a:	d905      	bls.n	801b2a8 <_malloc_r+0x28>
 801b29c:	230c      	movs	r3, #12
 801b29e:	603b      	str	r3, [r7, #0]
 801b2a0:	2600      	movs	r6, #0
 801b2a2:	4630      	mov	r0, r6
 801b2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2a8:	4e2e      	ldr	r6, [pc, #184]	; (801b364 <_malloc_r+0xe4>)
 801b2aa:	f000 f907 	bl	801b4bc <__malloc_lock>
 801b2ae:	6833      	ldr	r3, [r6, #0]
 801b2b0:	461c      	mov	r4, r3
 801b2b2:	bb34      	cbnz	r4, 801b302 <_malloc_r+0x82>
 801b2b4:	4629      	mov	r1, r5
 801b2b6:	4638      	mov	r0, r7
 801b2b8:	f7ff ffc2 	bl	801b240 <sbrk_aligned>
 801b2bc:	1c43      	adds	r3, r0, #1
 801b2be:	4604      	mov	r4, r0
 801b2c0:	d14d      	bne.n	801b35e <_malloc_r+0xde>
 801b2c2:	6834      	ldr	r4, [r6, #0]
 801b2c4:	4626      	mov	r6, r4
 801b2c6:	2e00      	cmp	r6, #0
 801b2c8:	d140      	bne.n	801b34c <_malloc_r+0xcc>
 801b2ca:	6823      	ldr	r3, [r4, #0]
 801b2cc:	4631      	mov	r1, r6
 801b2ce:	4638      	mov	r0, r7
 801b2d0:	eb04 0803 	add.w	r8, r4, r3
 801b2d4:	f000 f848 	bl	801b368 <_sbrk_r>
 801b2d8:	4580      	cmp	r8, r0
 801b2da:	d13a      	bne.n	801b352 <_malloc_r+0xd2>
 801b2dc:	6821      	ldr	r1, [r4, #0]
 801b2de:	3503      	adds	r5, #3
 801b2e0:	1a6d      	subs	r5, r5, r1
 801b2e2:	f025 0503 	bic.w	r5, r5, #3
 801b2e6:	3508      	adds	r5, #8
 801b2e8:	2d0c      	cmp	r5, #12
 801b2ea:	bf38      	it	cc
 801b2ec:	250c      	movcc	r5, #12
 801b2ee:	4629      	mov	r1, r5
 801b2f0:	4638      	mov	r0, r7
 801b2f2:	f7ff ffa5 	bl	801b240 <sbrk_aligned>
 801b2f6:	3001      	adds	r0, #1
 801b2f8:	d02b      	beq.n	801b352 <_malloc_r+0xd2>
 801b2fa:	6823      	ldr	r3, [r4, #0]
 801b2fc:	442b      	add	r3, r5
 801b2fe:	6023      	str	r3, [r4, #0]
 801b300:	e00e      	b.n	801b320 <_malloc_r+0xa0>
 801b302:	6822      	ldr	r2, [r4, #0]
 801b304:	1b52      	subs	r2, r2, r5
 801b306:	d41e      	bmi.n	801b346 <_malloc_r+0xc6>
 801b308:	2a0b      	cmp	r2, #11
 801b30a:	d916      	bls.n	801b33a <_malloc_r+0xba>
 801b30c:	1961      	adds	r1, r4, r5
 801b30e:	42a3      	cmp	r3, r4
 801b310:	6025      	str	r5, [r4, #0]
 801b312:	bf18      	it	ne
 801b314:	6059      	strne	r1, [r3, #4]
 801b316:	6863      	ldr	r3, [r4, #4]
 801b318:	bf08      	it	eq
 801b31a:	6031      	streq	r1, [r6, #0]
 801b31c:	5162      	str	r2, [r4, r5]
 801b31e:	604b      	str	r3, [r1, #4]
 801b320:	4638      	mov	r0, r7
 801b322:	f104 060b 	add.w	r6, r4, #11
 801b326:	f000 f8cf 	bl	801b4c8 <__malloc_unlock>
 801b32a:	f026 0607 	bic.w	r6, r6, #7
 801b32e:	1d23      	adds	r3, r4, #4
 801b330:	1af2      	subs	r2, r6, r3
 801b332:	d0b6      	beq.n	801b2a2 <_malloc_r+0x22>
 801b334:	1b9b      	subs	r3, r3, r6
 801b336:	50a3      	str	r3, [r4, r2]
 801b338:	e7b3      	b.n	801b2a2 <_malloc_r+0x22>
 801b33a:	6862      	ldr	r2, [r4, #4]
 801b33c:	42a3      	cmp	r3, r4
 801b33e:	bf0c      	ite	eq
 801b340:	6032      	streq	r2, [r6, #0]
 801b342:	605a      	strne	r2, [r3, #4]
 801b344:	e7ec      	b.n	801b320 <_malloc_r+0xa0>
 801b346:	4623      	mov	r3, r4
 801b348:	6864      	ldr	r4, [r4, #4]
 801b34a:	e7b2      	b.n	801b2b2 <_malloc_r+0x32>
 801b34c:	4634      	mov	r4, r6
 801b34e:	6876      	ldr	r6, [r6, #4]
 801b350:	e7b9      	b.n	801b2c6 <_malloc_r+0x46>
 801b352:	230c      	movs	r3, #12
 801b354:	603b      	str	r3, [r7, #0]
 801b356:	4638      	mov	r0, r7
 801b358:	f000 f8b6 	bl	801b4c8 <__malloc_unlock>
 801b35c:	e7a1      	b.n	801b2a2 <_malloc_r+0x22>
 801b35e:	6025      	str	r5, [r4, #0]
 801b360:	e7de      	b.n	801b320 <_malloc_r+0xa0>
 801b362:	bf00      	nop
 801b364:	240069dc 	.word	0x240069dc

0801b368 <_sbrk_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d06      	ldr	r5, [pc, #24]	; (801b384 <_sbrk_r+0x1c>)
 801b36c:	2300      	movs	r3, #0
 801b36e:	4604      	mov	r4, r0
 801b370:	4608      	mov	r0, r1
 801b372:	602b      	str	r3, [r5, #0]
 801b374:	f7e9 fc20 	bl	8004bb8 <_sbrk>
 801b378:	1c43      	adds	r3, r0, #1
 801b37a:	d102      	bne.n	801b382 <_sbrk_r+0x1a>
 801b37c:	682b      	ldr	r3, [r5, #0]
 801b37e:	b103      	cbz	r3, 801b382 <_sbrk_r+0x1a>
 801b380:	6023      	str	r3, [r4, #0]
 801b382:	bd38      	pop	{r3, r4, r5, pc}
 801b384:	240069e4 	.word	0x240069e4

0801b388 <__sread>:
 801b388:	b510      	push	{r4, lr}
 801b38a:	460c      	mov	r4, r1
 801b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b390:	f000 f8a0 	bl	801b4d4 <_read_r>
 801b394:	2800      	cmp	r0, #0
 801b396:	bfab      	itete	ge
 801b398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b39a:	89a3      	ldrhlt	r3, [r4, #12]
 801b39c:	181b      	addge	r3, r3, r0
 801b39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b3a2:	bfac      	ite	ge
 801b3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b3a6:	81a3      	strhlt	r3, [r4, #12]
 801b3a8:	bd10      	pop	{r4, pc}

0801b3aa <__swrite>:
 801b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ae:	461f      	mov	r7, r3
 801b3b0:	898b      	ldrh	r3, [r1, #12]
 801b3b2:	05db      	lsls	r3, r3, #23
 801b3b4:	4605      	mov	r5, r0
 801b3b6:	460c      	mov	r4, r1
 801b3b8:	4616      	mov	r6, r2
 801b3ba:	d505      	bpl.n	801b3c8 <__swrite+0x1e>
 801b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3c0:	2302      	movs	r3, #2
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	f000 f868 	bl	801b498 <_lseek_r>
 801b3c8:	89a3      	ldrh	r3, [r4, #12]
 801b3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b3d2:	81a3      	strh	r3, [r4, #12]
 801b3d4:	4632      	mov	r2, r6
 801b3d6:	463b      	mov	r3, r7
 801b3d8:	4628      	mov	r0, r5
 801b3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3de:	f000 b817 	b.w	801b410 <_write_r>

0801b3e2 <__sseek>:
 801b3e2:	b510      	push	{r4, lr}
 801b3e4:	460c      	mov	r4, r1
 801b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3ea:	f000 f855 	bl	801b498 <_lseek_r>
 801b3ee:	1c43      	adds	r3, r0, #1
 801b3f0:	89a3      	ldrh	r3, [r4, #12]
 801b3f2:	bf15      	itete	ne
 801b3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b3fe:	81a3      	strheq	r3, [r4, #12]
 801b400:	bf18      	it	ne
 801b402:	81a3      	strhne	r3, [r4, #12]
 801b404:	bd10      	pop	{r4, pc}

0801b406 <__sclose>:
 801b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b40a:	f000 b813 	b.w	801b434 <_close_r>
	...

0801b410 <_write_r>:
 801b410:	b538      	push	{r3, r4, r5, lr}
 801b412:	4d07      	ldr	r5, [pc, #28]	; (801b430 <_write_r+0x20>)
 801b414:	4604      	mov	r4, r0
 801b416:	4608      	mov	r0, r1
 801b418:	4611      	mov	r1, r2
 801b41a:	2200      	movs	r2, #0
 801b41c:	602a      	str	r2, [r5, #0]
 801b41e:	461a      	mov	r2, r3
 801b420:	f7e9 fb79 	bl	8004b16 <_write>
 801b424:	1c43      	adds	r3, r0, #1
 801b426:	d102      	bne.n	801b42e <_write_r+0x1e>
 801b428:	682b      	ldr	r3, [r5, #0]
 801b42a:	b103      	cbz	r3, 801b42e <_write_r+0x1e>
 801b42c:	6023      	str	r3, [r4, #0]
 801b42e:	bd38      	pop	{r3, r4, r5, pc}
 801b430:	240069e4 	.word	0x240069e4

0801b434 <_close_r>:
 801b434:	b538      	push	{r3, r4, r5, lr}
 801b436:	4d06      	ldr	r5, [pc, #24]	; (801b450 <_close_r+0x1c>)
 801b438:	2300      	movs	r3, #0
 801b43a:	4604      	mov	r4, r0
 801b43c:	4608      	mov	r0, r1
 801b43e:	602b      	str	r3, [r5, #0]
 801b440:	f7e9 fb85 	bl	8004b4e <_close>
 801b444:	1c43      	adds	r3, r0, #1
 801b446:	d102      	bne.n	801b44e <_close_r+0x1a>
 801b448:	682b      	ldr	r3, [r5, #0]
 801b44a:	b103      	cbz	r3, 801b44e <_close_r+0x1a>
 801b44c:	6023      	str	r3, [r4, #0]
 801b44e:	bd38      	pop	{r3, r4, r5, pc}
 801b450:	240069e4 	.word	0x240069e4

0801b454 <_fstat_r>:
 801b454:	b538      	push	{r3, r4, r5, lr}
 801b456:	4d07      	ldr	r5, [pc, #28]	; (801b474 <_fstat_r+0x20>)
 801b458:	2300      	movs	r3, #0
 801b45a:	4604      	mov	r4, r0
 801b45c:	4608      	mov	r0, r1
 801b45e:	4611      	mov	r1, r2
 801b460:	602b      	str	r3, [r5, #0]
 801b462:	f7e9 fb80 	bl	8004b66 <_fstat>
 801b466:	1c43      	adds	r3, r0, #1
 801b468:	d102      	bne.n	801b470 <_fstat_r+0x1c>
 801b46a:	682b      	ldr	r3, [r5, #0]
 801b46c:	b103      	cbz	r3, 801b470 <_fstat_r+0x1c>
 801b46e:	6023      	str	r3, [r4, #0]
 801b470:	bd38      	pop	{r3, r4, r5, pc}
 801b472:	bf00      	nop
 801b474:	240069e4 	.word	0x240069e4

0801b478 <_isatty_r>:
 801b478:	b538      	push	{r3, r4, r5, lr}
 801b47a:	4d06      	ldr	r5, [pc, #24]	; (801b494 <_isatty_r+0x1c>)
 801b47c:	2300      	movs	r3, #0
 801b47e:	4604      	mov	r4, r0
 801b480:	4608      	mov	r0, r1
 801b482:	602b      	str	r3, [r5, #0]
 801b484:	f7e9 fb7f 	bl	8004b86 <_isatty>
 801b488:	1c43      	adds	r3, r0, #1
 801b48a:	d102      	bne.n	801b492 <_isatty_r+0x1a>
 801b48c:	682b      	ldr	r3, [r5, #0]
 801b48e:	b103      	cbz	r3, 801b492 <_isatty_r+0x1a>
 801b490:	6023      	str	r3, [r4, #0]
 801b492:	bd38      	pop	{r3, r4, r5, pc}
 801b494:	240069e4 	.word	0x240069e4

0801b498 <_lseek_r>:
 801b498:	b538      	push	{r3, r4, r5, lr}
 801b49a:	4d07      	ldr	r5, [pc, #28]	; (801b4b8 <_lseek_r+0x20>)
 801b49c:	4604      	mov	r4, r0
 801b49e:	4608      	mov	r0, r1
 801b4a0:	4611      	mov	r1, r2
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	602a      	str	r2, [r5, #0]
 801b4a6:	461a      	mov	r2, r3
 801b4a8:	f7e9 fb78 	bl	8004b9c <_lseek>
 801b4ac:	1c43      	adds	r3, r0, #1
 801b4ae:	d102      	bne.n	801b4b6 <_lseek_r+0x1e>
 801b4b0:	682b      	ldr	r3, [r5, #0]
 801b4b2:	b103      	cbz	r3, 801b4b6 <_lseek_r+0x1e>
 801b4b4:	6023      	str	r3, [r4, #0]
 801b4b6:	bd38      	pop	{r3, r4, r5, pc}
 801b4b8:	240069e4 	.word	0x240069e4

0801b4bc <__malloc_lock>:
 801b4bc:	4801      	ldr	r0, [pc, #4]	; (801b4c4 <__malloc_lock+0x8>)
 801b4be:	f7ff be0b 	b.w	801b0d8 <__retarget_lock_acquire_recursive>
 801b4c2:	bf00      	nop
 801b4c4:	240069d8 	.word	0x240069d8

0801b4c8 <__malloc_unlock>:
 801b4c8:	4801      	ldr	r0, [pc, #4]	; (801b4d0 <__malloc_unlock+0x8>)
 801b4ca:	f7ff be06 	b.w	801b0da <__retarget_lock_release_recursive>
 801b4ce:	bf00      	nop
 801b4d0:	240069d8 	.word	0x240069d8

0801b4d4 <_read_r>:
 801b4d4:	b538      	push	{r3, r4, r5, lr}
 801b4d6:	4d07      	ldr	r5, [pc, #28]	; (801b4f4 <_read_r+0x20>)
 801b4d8:	4604      	mov	r4, r0
 801b4da:	4608      	mov	r0, r1
 801b4dc:	4611      	mov	r1, r2
 801b4de:	2200      	movs	r2, #0
 801b4e0:	602a      	str	r2, [r5, #0]
 801b4e2:	461a      	mov	r2, r3
 801b4e4:	f7e9 fafa 	bl	8004adc <_read>
 801b4e8:	1c43      	adds	r3, r0, #1
 801b4ea:	d102      	bne.n	801b4f2 <_read_r+0x1e>
 801b4ec:	682b      	ldr	r3, [r5, #0]
 801b4ee:	b103      	cbz	r3, 801b4f2 <_read_r+0x1e>
 801b4f0:	6023      	str	r3, [r4, #0]
 801b4f2:	bd38      	pop	{r3, r4, r5, pc}
 801b4f4:	240069e4 	.word	0x240069e4

0801b4f8 <_init>:
 801b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4fa:	bf00      	nop
 801b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4fe:	bc08      	pop	{r3}
 801b500:	469e      	mov	lr, r3
 801b502:	4770      	bx	lr

0801b504 <_fini>:
 801b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b506:	bf00      	nop
 801b508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b50a:	bc08      	pop	{r3}
 801b50c:	469e      	mov	lr, r3
 801b50e:	4770      	bx	lr
